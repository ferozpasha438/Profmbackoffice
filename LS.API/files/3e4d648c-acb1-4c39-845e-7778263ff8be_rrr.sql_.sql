USE [master]
GO
/****** Object:  Database [eCoponTest2021July11]    Script Date: 07/11/2021 17:05:54 ******/
CREATE DATABASE [eCoponTest2021July11]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'ECoupons', FILENAME = N'H:\temp\eCoponTest2021July11.mdf' , SIZE = 145753664KB , MAXSIZE = UNLIMITED, FILEGROWTH = 10%)
 LOG ON 
( NAME = N'ECoupons_log', FILENAME = N'H:\temp\eCoponTest2021July11_0.ldf' , SIZE = 6166080KB , MAXSIZE = UNLIMITED, FILEGROWTH = 10%)
GO
ALTER DATABASE [eCoponTest2021July11] SET COMPATIBILITY_LEVEL = 110
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [eCoponTest2021July11].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [eCoponTest2021July11] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET ARITHABORT OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [eCoponTest2021July11] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [eCoponTest2021July11] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET  DISABLE_BROKER 
GO
ALTER DATABASE [eCoponTest2021July11] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [eCoponTest2021July11] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [eCoponTest2021July11] SET  MULTI_USER 
GO
ALTER DATABASE [eCoponTest2021July11] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [eCoponTest2021July11] SET DB_CHAINING OFF 
GO
ALTER DATABASE [eCoponTest2021July11] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [eCoponTest2021July11] SET TARGET_RECOVERY_TIME = 0 SECONDS 
GO
ALTER DATABASE [eCoponTest2021July11] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [eCoponTest2021July11] SET QUERY_STORE = OFF
GO
USE [eCoponTest2021July11]
GO
/****** Object:  User [Othman]    Script Date: 07/11/2021 17:05:56 ******/
CREATE USER [Othman] FOR LOGIN [Othman] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [eCoponLiveUsr]    Script Date: 07/11/2021 17:05:56 ******/
CREATE USER [eCoponLiveUsr] FOR LOGIN [eCoponLiveUsr] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [eCoponLive]    Script Date: 07/11/2021 17:05:56 ******/
CREATE USER [eCoponLive] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
ALTER ROLE [db_owner] ADD MEMBER [Othman]
GO
ALTER ROLE [db_datareader] ADD MEMBER [Othman]
GO
ALTER ROLE [db_owner] ADD MEMBER [eCoponLiveUsr]
GO
ALTER ROLE [db_datareader] ADD MEMBER [eCoponLiveUsr]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [eCoponLiveUsr]
GO
ALTER ROLE [db_owner] ADD MEMBER [eCoponLive]
GO
/****** Object:  UserDefinedDataType [dbo].[AccountCode]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[AccountCode] FROM [nvarchar](30) NOT NULL
GO
/****** Object:  UserDefinedDataType [dbo].[Address]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[Address] FROM [nvarchar](255) NULL
GO
/****** Object:  UserDefinedDataType [dbo].[Amount]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[Amount] FROM [decimal](15, 4) NOT NULL
GO
/****** Object:  UserDefinedDataType [dbo].[BarCode]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[BarCode] FROM [nvarchar](20) NULL
GO
/****** Object:  UserDefinedDataType [dbo].[Code]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[Code] FROM [nvarchar](20) NOT NULL
GO
/****** Object:  UserDefinedDataType [dbo].[Description]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[Description] FROM [nvarchar](100) NOT NULL
GO
/****** Object:  UserDefinedDataType [dbo].[Email]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[Email] FROM [varchar](100) NULL
GO
/****** Object:  UserDefinedDataType [dbo].[Mobile]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[Mobile] FROM [varchar](15) NULL
GO
/****** Object:  UserDefinedDataType [dbo].[Name]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[Name] FROM [nvarchar](200) NOT NULL
GO
/****** Object:  UserDefinedDataType [dbo].[NullAmount]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[NullAmount] FROM [decimal](15, 4) NULL
GO
/****** Object:  UserDefinedDataType [dbo].[NullCode]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[NullCode] FROM [nvarchar](20) NULL
GO
/****** Object:  UserDefinedDataType [dbo].[NullDescription]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[NullDescription] FROM [nvarchar](100) NULL
GO
/****** Object:  UserDefinedDataType [dbo].[NullName]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[NullName] FROM [nvarchar](200) NULL
GO
/****** Object:  UserDefinedDataType [dbo].[NullPercentage]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[NullPercentage] FROM [decimal](5, 2) NULL
GO
/****** Object:  UserDefinedDataType [dbo].[NullPin]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[NullPin] FROM [nvarchar](6) NULL
GO
/****** Object:  UserDefinedDataType [dbo].[Percentage]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[Percentage] FROM [decimal](5, 2) NOT NULL
GO
/****** Object:  UserDefinedDataType [dbo].[Phone]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[Phone] FROM [varchar](15) NULL
GO
/****** Object:  UserDefinedDataType [dbo].[PostalCode]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[PostalCode] FROM [varchar](10) NULL
GO
/****** Object:  UserDefinedDataType [dbo].[Remark]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[Remark] FROM [nvarchar](1000) NULL
GO
/****** Object:  UserDefinedDataType [dbo].[RemarkBig]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[RemarkBig] FROM [nvarchar](max) NULL
GO
/****** Object:  UserDefinedDataType [dbo].[Sigment]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[Sigment] FROM [nvarchar](5) NULL
GO
/****** Object:  UserDefinedTableType [dbo].[UT_coc_BroadcastEmail]    Script Date: 07/11/2021 17:05:56 ******/
CREATE TYPE [dbo].[UT_coc_BroadcastEmail] AS TABLE(
	[EServiceID] [int] NULL,
	[CustomerName] [nvarchar](100) NOT NULL,
	[EmailAddress] [varchar](100) NOT NULL,
	[EmailBody] [nvarchar](max) NULL,
	[UserID] [int] NOT NULL,
	[EntryTime] [datetime] NOT NULL
)
GO
/****** Object:  UserDefinedFunction [dbo].[Core_ValidateAllowParticipation]    Script Date: 07/11/2021 17:05:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[Core_ValidateAllowParticipation] ( @consumerID bigint )
RETURNS BIT
AS
BEGIN
	DECLARE @PaticipationCount int
	DECLARE @IsEmailVerified bit
	DECLARE @IsAllow bit=1
	if exists(select ConsumerID
		from coc_Consumers
		where ConsumerID=@consumerID and IsEmailVerified=0)
	begin
		set @PaticipationCount=(select Count(*)
		from coc_ECouponParticipations(nolock)
		where ConsumerID=@consumerID)
		if (@PaticipationCount >0)
		begin
			set @IsAllow=0
		end
		else
		begin
			set @IsAllow=1
		end
	end
	return @IsAllow
END
GO
/****** Object:  UserDefinedFunction [dbo].[DistanceBetweenPoints]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


Create FUNCTION [dbo].[DistanceBetweenPoints] 
(@Latitude1  DECIMAL(10,6),
@Latitude2 DECIMAL(10,6),
@Longitude1 DECIMAL(10,6),
@Longitude2 DECIMAL(10,6))
RETURNS DECIMAL(20,8)
AS
BEGIN
	DECLARE @x DECIMAL(10,6)
	DECLARE @y DECIMAL(10,6)
	DECLARE @Distance DECIMAL(20,8)
	--SELECT @x = 69.1 * (@Latitude2 - @Latitude1)
	--SELECT @y = 53.0 * (@Longitude2 - @Longitude1)
	--
	--SELECT sqrt(@x * @x + @y * @y ) * 1.609344


	SELECT @x = 69.1 * (@Latitude2 - @Latitude1)
	SELECT @y = 69.1 * (@Longitude2 - @Longitude1) * cos(@Latitude1/57.3)

	SELECT @Distance = sqrt(@x * @x + @y * @y )  * 1.609344


	RETURN @Distance * 1000

END





GO
/****** Object:  UserDefinedFunction [dbo].[fnDateFormat]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION	[dbo].[fnDateFormat]
(
	@dtDateTime datetime
)
RETURNS VARCHAR(30)
AS

BEGIN
	return CONVERT(NVARCHAR(19), @dtDateTime, 113)
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnGetConcatenatedName]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION	[dbo].[fnGetConcatenatedName]
(
	@FirstName nvarchar(200),
	@SecondName nvarchar(200),
	@ThirdName nvarchar(200),
	@FamilyName nvarchar(200),
	@FullName nvarchar(500)

)
RETURNS NVARCHAR(500)
AS

BEGIN
	RETURN isnull(@FullName,      
         isnull(@FirstName, '') + ' ' +ISNULL(@SecondName, '')+' '+isnull(@FamilyName, ''))

END
GO
/****** Object:  UserDefinedFunction [dbo].[fnGetLuhn]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION	[dbo].[fnGetLuhn]
(
	@Luhn VARCHAR(7999)
)
RETURNS VARCHAR(8000)
AS

BEGIN
	IF @Luhn LIKE '%[^0-9]%'
		RETURN @Luhn

	DECLARE	@Index SMALLINT,
		@Multiplier TINYINT,
		@Sum INT,
		@Plus TINYINT

	SELECT	@Index = LEN(@Luhn),
		@Multiplier = 2,
		@Sum = 0

	WHILE @Index >= 1
		SELECT	@Plus = @Multiplier * CAST(SUBSTRING(@Luhn, 

@Index, 1) AS TINYINT),
			@Multiplier = 3 - @Multiplier,
			@Sum = @Sum + @Plus / 10 + @Plus % 10,
			@Index = @Index - 1

	RETURN	@Luhn + CASE WHEN @Sum % 10 = 0 THEN '0' ELSE CAST

(10 - @Sum % 10 AS CHAR) END
END


GO
/****** Object:  UserDefinedFunction [dbo].[fnIsLuhnValid]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION	[dbo].[fnIsLuhnValid]
(
	@Luhn VARCHAR(8000)
)
RETURNS BIT
AS

BEGIN
	IF @Luhn LIKE '%[^0-9]%'
		RETURN 0

	DECLARE	@Index SMALLINT,
		@Multiplier TINYINT,
		@Sum INT,
		@Plus TINYINT

	SELECT	@Index = LEN(@Luhn),
		@Multiplier = 1,
		@Sum = 0

	WHILE @Index >= 1
		SELECT	@Plus = @Multiplier * CAST(SUBSTRING(@Luhn, 

@Index, 1) AS TINYINT),
			@Multiplier = 3 - @Multiplier,
			@Sum = @Sum + @Plus / 10 + @Plus % 10,
			@Index = @Index - 1

	RETURN CASE WHEN @Sum % 10 = 0 THEN 1 ELSE 0 END
END

GO
/****** Object:  UserDefinedFunction [dbo].[fnTimeFormat]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION	[dbo].[fnTimeFormat]
(
	@dtDateTime datetime
)
RETURNS VARCHAR(30)
AS

BEGIN
	return CONVERT(NVARCHAR(8),cast(@dtDateTime as time)) 
END
GO
/****** Object:  UserDefinedFunction [dbo].[GetCalledMLMs]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetCalledMLMs] 
(
    -- Add the parameters for the function here
    @MLM_Txt nvarchar(MAX)
)
RETURNS XML
AS
BEGIN
    -- Declare the return variable here
    DECLARE @CalledMLMs XML
    Declare @MLMTbl table (pos int, endpos int, CalledMLM nvarchar(200))
    --Logic to get the data...

    Select @CalledMLMs = CalledMLM from @MLMTbl FOR XML PATH

    -- Return the result of the function
    RETURN @CalledMLMs

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetCompetionPriceById]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetCompetionPriceById](@pricingSourceTypeId int , @pricingSourceId int,@quantity bigint=0)  
 RETURNS decimal(18,2)  
 AS  
BEGIN  
 Declare @Price decimal;
 Declare @IsPriceRangeRequired bit;
 select @Price=Price,@IsPriceRangeRequired=IsPriceRangeRequired from Coc_Pricing where PricingSourceTypeId=@pricingSourceTypeId and PricingSourceId=@pricingSourceId
 if(@IsPriceRangeRequired =0 and @Price is not null)
 begin
  RETURN @Price;
 end
 else if(@quantity >=0)
 begin 
   select  @Price=Price from Coc_PricingDetails where PricingID=(select PricingID from Coc_Pricing where PricingSourceTypeId=@pricingSourceTypeId and PricingSourceId=@pricingSourceId and (@quantity between RangeFrom and RangeTo))
    set @Price=@Price*@quantity; 
 end
 RETURN @Price;
END
GO
/****** Object:  UserDefinedFunction [dbo].[NumbersCountInString]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[NumbersCountInString]
(
    @number bigint
)
RETURNS nvarchar(500) -- or whatever length you need
AS
BEGIN
    Declare @returnResult nvarchar(500)='';
	if Len(@number) =4 
	begin
	set @returnResult='+ '+LEFT(@number, 1)+'  K'
	end
	else if Len(@number) =5 
	begin
	set @returnResult='+ '+LEFT(@number, 2)+'  K'
	end 
	else if Len(@number)=6 
	begin
	set @returnResult='+ '+LEFT(@number, 3)+'  K'
	end 
	else if Len(@number) =7 
	begin
	set @returnResult='+ '+LEFT(@number, 1)+'  M'
	end 
	else if Len(@number) =8 
	begin
	set @returnResult='+ '+LEFT(@number, 2)+'  M'
	end
	else if Len(@number) =9 
	begin
	set @returnResult='+ '+LEFT(@number, 3)+'  M'
	end  
	else if @number=0 OR @number=null
	begin
	set @returnResult='0'
	end
	else
	begin
	set @returnResult=@number
	end
    RETURN  @returnResult

END
GO
/****** Object:  UserDefinedFunction [dbo].[rafeeq_debug]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[rafeeq_debug]
(
@input nvarchar(150),
@output nvarchar(1500)
)
RETURNS nvarchar(1500)
AS 
BEGIN
    declare @result nvarchar(1600);
set @result = '>>>>>>>>>>>>>>>>>>>>>'+@output +'='+cast(@input as nvarchar(150))+'<<<<<<<<<<<<<<<<<<<<<<<<<<<<<';
return @result ;
END;
GO
/****** Object:  UserDefinedFunction [dbo].[UDF_coc_GetChamberQRCode]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[UDF_coc_GetChamberQRCode](@ChamberID int,@CompetitionStageID bigint) 
returns nvarchar(500) 
as 
begin 

    DECLARE @ChamberQRCode nvarchar(200); 

	DECLARE @ChamberQRCode1 nvarchar(200);

	DECLARE @ChamberQRCode2 nvarchar(200);

	DECLARE @ChamberQRCode3 nvarchar(200);

	DECLARE @ChamberQRCode4 nvarchar(200);

	DECLARE  @ChamberQRCode5 nvarchar(200);

	DECLARE @CompetitionStagingID bigint;  
   
    DECLARE  @ChamberSymbol nvarchar(2);

    select @ChamberSymbol=ChamberSymbol  from coc_Chambers where ChamberID=@ChamberID
    set @CompetitionStagingID=@CompetitionStageID
    --SELECT  @CompetitionStagingID =  max(CompetitionStagingID)  FROM coc_competition_staging(nolock)    

    --SET @ChamberQRCode1 = REPLICATE('0',3-LEN(RTRIM(CONVERT(varchar,@UniqueNumberID ))))
    
    --SET @ChamberQRCode2 =RTRIM(CONVERT(varchar,@UniqueNumberID ))
	 
     SET @ChamberQRCode2 =RIGHT(year(GETDATE()) ,2)
     SET @ChamberQRCode3 =RIGHT('00' + convert(varchar(2),month(getdate())),2)
    SET @ChamberQRCode4=REPLICATE('0',10-LEN(LTRIM(ISNULL(MAX(@CompetitionStagingID), 0))))
    
    SET @ChamberQRCode5 =CONVERT(varchar,ISNULL(MAX(@CompetitionStagingID), 0))
    
    SET @ChamberQRCode=   @ChamberSymbol+@ChamberQRCode2+@ChamberQRCode3+@ChamberQRCode4+@ChamberQRCode5

  RETURN @ChamberQRCode

END
GO
/****** Object:  UserDefinedFunction [dbo].[UDF_Core_GetEcoponOrderNumber]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[UDF_Core_GetEcoponOrderNumber](@EcoponID bigint) 
returns nvarchar(500) 

as 

begin 
      DECLARE @EcoponOrderNumber  nvarchar(200); 
	  DECLARE @EcoponZerosAppend  nvarchar(200); 
	  DECLARE @EcoponIDAppend  nvarchar(200); 

     SET @EcoponZerosAppend = REPLICATE('0',8-LEN(RTRIM(CONVERT(varchar,@EcoponID ))))
     SET @EcoponIDAppend =RTRIM(CONVERT(varchar,@EcoponID ))
	set @EcoponOrderNumber=@EcoponZerosAppend+@EcoponIDAppend

  RETURN @EcoponOrderNumber

END
GO
/****** Object:  UserDefinedFunction [dbo].[udf_StripAllHTML]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[udf_StripAllHTML] (@HTMLText NVARCHAR(MAX))
RETURNS NVARCHAR(MAX) AS
BEGIN
DECLARE @Start  int
DECLARE @End    int
DECLARE @Length int

-- Remove anything between <STYLE> tags
SET @Start = CHARINDEX('<STYLE', @HTMLText)
SET @End = CHARINDEX('</STYLE>', @HTMLText, CHARINDEX('<', @HTMLText)) + 7
SET @Length = (@End - @Start) + 1

WHILE (@Start > 0 AND @End > 0 AND @Length > 0) BEGIN
SET @HTMLText = STUFF(@HTMLText, @Start, @Length, '')
SET @Start = CHARINDEX('<STYLE', @HTMLText)
SET @End = CHARINDEX('</STYLE>', @HTMLText, CHARINDEX('</STYLE>', @HTMLText)) + 7
SET @Length = (@End - @Start) + 1
END

SET @Start = CHARINDEX('<',@HTMLText) SET @End = 
CHARINDEX('>',@HTMLText,CHARINDEX('<',@HTMLText)) 
SET @Length = (@End - @Start) + 1 WHILE @Start > 0
AND @End > 0
AND @Length > 0
BEGIN
SET @HTMLText = STUFF(@HTMLText,@Start,@Length,'')
SET @Start = CHARINDEX('<',@HTMLText) SET @End = CHARINDEX('>',@HTMLText,CHARINDEX('<',@HTMLText))
SET @Length = (@End - @Start) + 1
END

Set @HTMLText=REPLACE(@HTMLText, '=', '');
Set @HTMLText=REPLACE(@HTMLText, '&nbsp;', '');



RETURN LTRIM(RTRIM(@HTMLText))

END
GO
/****** Object:  UserDefinedFunction [dbo].[udf_StripHTML]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[udf_StripHTML] (@HTMLText NVARCHAR(MAX))
RETURNS NVARCHAR(MAX) AS
BEGIN
DECLARE @Start  int
DECLARE @End    int
DECLARE @Length int

-- Remove anything between <STYLE> tags
SET @Start = CHARINDEX('<STYLE', @HTMLText)
SET @End = CHARINDEX('</STYLE>', @HTMLText, CHARINDEX('<', @HTMLText)) + 7
SET @Length = (@End - @Start) + 1

WHILE (@Start > 0 AND @End > 0 AND @Length > 0) BEGIN
SET @HTMLText = STUFF(@HTMLText, @Start, @Length, '')
SET @Start = CHARINDEX('<STYLE', @HTMLText)
SET @End = CHARINDEX('</STYLE>', @HTMLText, CHARINDEX('</STYLE>', @HTMLText)) + 7
SET @Length = (@End - @Start) + 1
END

RETURN LTRIM(RTRIM(@HTMLText))

END
GO
/****** Object:  Table [dbo].[coc_Consumers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Consumers](
	[ConsumerID] [int] IDENTITY(1,1) NOT NULL,
	[FirstName] [dbo].[Name] NOT NULL,
	[SecondName] [dbo].[NullName] NULL,
	[FamilyName] [dbo].[NullName] NULL,
	[UserID] [int] NULL,
	[Gender] [smallint] NULL,
	[BirthDate] [datetime] NULL,
	[AgeGroupID] [int] NULL,
	[KnowECouponID] [int] NULL,
	[Address1] [dbo].[Address] NULL,
	[Address2] [dbo].[Address] NULL,
	[PrimaryMobile] [dbo].[Mobile] NULL,
	[SecondaryMobile] [dbo].[Mobile] NULL,
	[EmailID] [dbo].[Email] NULL,
	[FacebookID] [dbo].[Email] NULL,
	[CityID] [int] NULL,
	[CountryID] [int] NULL,
	[ImageFile] [dbo].[NullDescription] NULL,
	[IsVerified] [bit] NOT NULL,
	[VerificationDate] [datetime] NULL,
	[IsActive] [bit] NOT NULL,
	[AcceptedTerms] [bit] NOT NULL,
	[HideApplicationTour] [bit] NOT NULL,
	[IsFacebookUser] [bit] NOT NULL,
	[LoyaltyPoint] [int] NOT NULL,
	[RedeemPoint] [int] NOT NULL,
	[BalancePoint]  AS ([LoyaltyPoint]-[RedeemPoint]),
	[NotificationCount] [int] NULL,
	[AddDate] [datetime] NOT NULL,
	[EditDate] [datetime] NULL,
	[NationalityID] [int] NULL,
	[OtpID] [int] NULL,
	[IsTwitterUser] [bit] NOT NULL,
	[IsGmailUser] [bit] NOT NULL,
	[IsYahooUser] [bit] NOT NULL,
	[IsOutlookUser] [bit] NOT NULL,
	[TwitterID] [dbo].[Email] NULL,
	[OutlookID] [dbo].[Email] NULL,
	[YahooID] [dbo].[Email] NULL,
	[MembershipNumber] [dbo].[NullCode] NULL,
	[KnowECouponOthers] [dbo].[NullDescription] NULL,
	[GmailID] [dbo].[Email] NULL,
	[IqamaNumber] [dbo].[NullCode] NULL,
	[DeviceToken] [nvarchar](max) NULL,
	[ChannelName] [nvarchar](max) NULL,
	[AndroidDeviceToken] [nvarchar](max) NULL,
	[IsDeleted] [bit] NOT NULL,
	[ThirdName] [nvarchar](200) NULL,
	[OccupationID] [int] NULL,
	[JobNumber] [nvarchar](50) NULL,
	[Organization] [nvarchar](150) NULL,
	[MaritalStatusID] [int] NULL,
	[FamilyMember] [nvarchar](50) NULL,
	[IsFromCompetitionLink] [bit] NULL,
	[ECouponID] [bigint] NULL,
	[IsMobileVerified] [bit] NULL,
	[IsEmailVerified] [bit] NULL,
	[AdminAttachFile] [nvarchar](500) NULL,
	[AdminRemarks] [nvarchar](max) NULL,
	[FullName] [nvarchar](500) NULL,
	[APIKEY] [nvarchar](200) NULL,
	[StatusID] [int] NULL,
	[PromoCodeID] [bigint] NULL,
	[PromoCodeAddedDate] [datetime] NULL,
	[PromoCodeExpiryDate] [datetime] NULL,
	[UserIdentityTypeID] [int] NULL,
	[UserIdentityNumber] [nvarchar](100) NULL,
	[UpdatedBy] [int] NULL,
	[EmailVerificationSentOn] [datetime] NULL,
	[MobileOTPSentOn] [datetime] NULL,
	[DeActivatedBy] [int] NULL,
 CONSTRAINT [PK_Consumers] PRIMARY KEY NONCLUSTERED 
(
	[ConsumerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EnumValueLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EnumValueLanguages](
	[EnumValueID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[EnumValue] [nvarchar](200) NULL,
 CONSTRAINT [PK_EnumValueLanguages] PRIMARY KEY CLUSTERED 
(
	[EnumValueID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CountryLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CountryLanguages](
	[CountryID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[Country] [dbo].[Description] NOT NULL,
 CONSTRAINT [PK_CountryLanguages] PRIMARY KEY CLUSTERED 
(
	[CountryID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CityLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CityLanguages](
	[CityID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[City] [dbo].[Description] NOT NULL,
 CONSTRAINT [PK_CityLanguages] PRIMARY KEY CLUSTERED 
(
	[CityID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_NationalityLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_NationalityLanguages](
	[NationalityID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[Nationality] [dbo].[Description] NOT NULL,
 CONSTRAINT [PK_NationalityLanguages] PRIMARY KEY CLUSTERED 
(
	[NationalityID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Guests]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Guests](
	[GuestID] [int] IDENTITY(1,1) NOT NULL,
	[FullName] [dbo].[Name] NOT NULL,
	[PrimaryMobile] [dbo].[Mobile] NULL,
	[EmailID] [dbo].[Email] NULL,
	[IsActive] [bit] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[EditDate] [datetime] NULL,
	[OtpID] [int] NULL,
	[IsVerified] [bit] NULL,
	[JobTitle] [varchar](1000) NULL,
	[CompanyName] [varchar](100) NULL,
	[Gender] [int] NULL,
	[UploadParticipationsID] [bigint] NULL,
	[FamilyName] [nvarchar](200) NULL,
	[CountryID] [int] NULL,
	[CityID] [int] NULL,
	[DOB] [datetime] NULL,
	[Nationality] [nvarchar](50) NULL,
	[IsFromCompetitionLink] [bit] NULL,
	[FirstName] [nvarchar](200) NULL,
	[SecondName] [nvarchar](200) NULL,
	[Age] [int] NULL,
	[MaritalStatus] [int] NULL,
	[EducationQualification] [int] NULL,
	[RequestSourceType] [int] NULL,
	[ReferenceNumber] [nvarchar](150) NULL,
 CONSTRAINT [PK_Guests] PRIMARY KEY NONCLUSTERED 
(
	[GuestID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_MembersList]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[vw_MembersList]
As
SELECT        CONVERT(date, CS.AddDate) AS registrationdate, CONVERT(varchar(8), CONVERT(time, CS.AddDate)) AS registrationtime, CS.MembershipNumber, (ISNULL(CS.FirstName, '') + ' ' + ISNULL(CS.SecondName, '') 
                         + ' ' + ISNULL(CS.FamilyName, '')) AS FullName, CS.PrimaryMobile, CS.EmailID, CASE WHEN CS.Gender = 2 THEN 'Female' ELSE 'Male' END Gender, CASE WHEN CS.BirthDate IS NULL THEN '' ELSE CONVERT(varchar, 
                         CONVERT(date, CS.BirthDate)) END DateOfBirth, CL.Country, CA.City, NL.Nationality, '' AS Occupation, '' AS JobNumber, '' AS OccupationitFollows, '' AS MaritalStatus, 'Member' AS UserType, '' AS EntryType, CS.AddDate, 
                         CS.UserIdentityNumber AS ID,CS.IsEmailVerified,CS.IsMobileVerified
FROM            [coc_Consumers](NOLOCK) CS LEFT JOIN
                         [coc_CountryLanguages] CL(NOLOCK) ON CL.CountryID = CS.CountryID AND CL.LanguageID = 1 LEFT JOIN
                         [coc_CityLanguages] CA(NOLOCK) ON CA.CityID = CS.CityID AND CA.LanguageID = 1 LEFT JOIN
                         [coc_EnumValueLanguages] EVL(NOLOCK) ON EVL.EnumValueID = CS.Gender AND EVL.LanguageID = 1 LEFT JOIN
                         coc_NationalityLanguages NL(NOLOCK) ON NL.NationalityID = CS.NationalityID AND NL.LanguageID = 1
WHERE        IsVerified = 1 AND isactive = 1 AND isdeleted = 0 AND (PrimaryMobile LIKE '009665%' OR
                         PrimaryMobile LIKE '00962%' OR
                         PrimaryMobile LIKE '009715%')
/*and convert(date,CS.AddDate) <= convert(date, '12/31/2018')*/ UNION
SELECT        CONVERT(date, G.AddDate) AS registrationdate, CONVERT(varchar(8), CONVERT(time, G.AddDate)) AS registrationtime, CONVERT(varchar, G.GuestID) AS GuestID, ISNULL(G.Fullname, G.FirstName + ' ' + G.SecondName) 
                         Fullname, G.primaryMobile, G.EmailID, CASE WHEN G.Gender = 1 THEN 'Male' ELSE CASE WHEN G.Gender = 2 THEN 'Female' ELSE CASE WHEN G.Gender = 3 THEN 'Company' END END END AS Gender, '' AS DateOfBirth, 
                         '' AS Country, '' AS City, '' AS Nationality, '' AS Occupation, '' AS JobNumber, '' AS OccupationitFollows, '' AS MaritalStatus, 'Guest' AS UserType, CASE WHEN G.UploadParticipationsID IS NOT NULL 
                         THEN 'Uploaded' ELSE 'kiosk' END AS EntryType, G.AddDate, '' AS ID,'' AS IsEmailVerified,'' AS IsMobileVerified
FROM            coc_Guests G(NOLOCK)
WHERE        IsActive = 1
GO
/****** Object:  Table [dbo].[coc_EServiceLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EServiceLanguages](
	[EServiceID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[EService] [dbo].[Remark] NOT NULL,
 CONSTRAINT [PK_EServiceLanguages] PRIMARY KEY CLUSTERED 
(
	[EServiceID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponParticipationsInvalid]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponParticipationsInvalid](
	[ECouponParticipationID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponID] [bigint] NOT NULL,
	[ParticipationDate] [datetime] NOT NULL,
	[Barcode] [dbo].[NullDescription] NULL,
	[ParticipationMobile] [dbo].[Mobile] NULL,
	[ParticipationEmailID] [dbo].[Email] NULL,
	[ConsumerID] [int] NULL,
	[Reason] [varchar](1) NULL,
	[ConsumerName] [varchar](100) NULL,
	[RetailOutletID] [int] NULL,
	[EnteredStandardBarcode] [dbo].[NullDescription] NULL,
	[IsFromCompetitionLink] [bit] NULL,
	[UploadImagePath] [nvarchar](200) NULL,
 CONSTRAINT [PK_ECouponParticipationsInvalid] PRIMARY KEY NONCLUSTERED 
(
	[ECouponParticipationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EServices]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EServices](
	[EServiceID] [int] IDENTITY(1,1) NOT NULL,
	[ServiceNumber] [dbo].[Code] NOT NULL,
	[ServiceDate] [datetime] NOT NULL,
	[FromDate] [datetime] NOT NULL,
	[ToDate] [datetime] NOT NULL,
	[CorporateID] [int] NOT NULL,
	[ServiceTypeID] [int] NOT NULL,
	[ServiceSubTypeID] [int] NULL,
	[CompetitionID] [int] NULL,
	[IsActive] [bit] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[IsBarcodeUsed] [bit] NOT NULL,
	[MessagePackTypeID] [int] NULL,
	[NotificationSend] [bit] NULL,
	[IsPaymentDone] [bit] NOT NULL,
	[PaymentType] [int] NULL,
	[AllowExternalValidation] [bit] NULL,
	[ExternalRedirectionURL] [nvarchar](500) NULL,
	[AllowExternalBarcode] [bit] NULL,
	[BarcodePrefix] [nvarchar](10) NULL,
	[BarcodeLength] [nvarchar](20) NULL,
	[AllowExternalBarcodeAsPending] [bit] NULL,
	[TruncationProcessStage] [int] NULL,
 CONSTRAINT [PK_EServices] PRIMARY KEY NONCLUSTERED 
(
	[EServiceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UNK_EServices] UNIQUE NONCLUSTERED 
(
	[ServiceNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponParticipations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponParticipations](
	[ECouponParticipationID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponID] [bigint] NOT NULL,
	[ParticipationDate] [datetime] NOT NULL,
	[Barcode] [dbo].[NullDescription] NULL,
	[ParticipationMobile] [dbo].[Mobile] NULL,
	[ParticipationEmailID] [dbo].[Email] NULL,
	[ConsumerID] [int] NULL,
	[GuestID] [int] NULL,
	[RetailOutletID] [int] NULL,
	[ConsumerName] [nvarchar](100) NULL,
	[KioskID] [int] NULL,
	[InvoiceAmount] [decimal](18, 0) NULL,
	[InvoiceNumber] [nvarchar](50) NULL,
	[CorporateID] [int] NULL,
	[EnteredStandardBarcode] [dbo].[NullDescription] NULL,
	[Restaurant] [int] NULL,
	[IsFromCompetitionLink] [bit] NULL,
	[RequestSourceType] [int] NULL,
	[ReferenceNumber] [nvarchar](150) NULL,
	[UploadImagePath] [nvarchar](200) NULL,
	[Remarks] [nvarchar](max) NULL,
	[BranchName] [nvarchar](150) NULL,
	[Question1] [nvarchar](1000) NULL,
	[Question2] [nvarchar](1000) NULL,
	[Supermarket] [nvarchar](100) NULL,
	[DeviceSource] [nvarchar](200) NULL,
	[Latitude] [nvarchar](200) NULL,
	[Longitude] [nvarchar](200) NULL,
	[DistanceToRetailoutlet] [decimal](18, 2) NULL,
	[ClosestRetailoutletID] [int] NULL,
	[MacAddress] [nvarchar](100) NULL,
	[UploadImagePath2] [nvarchar](200) NULL,
	[IdentificationNumber] [nvarchar](200) NULL,
	[TamimiRewardsMembershipNumber] [nvarchar](200) NULL,
	[ReasonForRejection] [nvarchar](max) NULL,
	[IsRejected] [bit] NULL,
	[Gift] [nvarchar](200) NULL,
	[Question3] [nvarchar](1000) NULL,
	[UserName] [nvarchar](1000) NULL,
	[IsInstantGiftWinner] [bit] NULL,
	[SocialMediaID] [int] NULL,
 CONSTRAINT [PK_ECouponParticipations] PRIMARY KEY NONCLUSTERED 
(
	[ECouponParticipationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [ClusteredIndex-20190625-180139]    Script Date: 07/11/2021 17:05:57 ******/
CREATE CLUSTERED INDEX [ClusteredIndex-20190625-180139] ON [dbo].[coc_ECouponParticipations]
(
	[ParticipationEmailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Corporates]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Corporates](
	[CorporateID] [int] IDENTITY(1,1) NOT NULL,
	[JCCICode] [dbo].[Code] NOT NULL,
	[CRNumber] [dbo].[NullCode] NULL,
	[EmailID] [dbo].[Email] NULL,
	[MobileNumber] [dbo].[Mobile] NULL,
	[UserID] [int] NULL,
	[BarcodePrefix] [char](4) NULL,
	[BarcodeSuffix] [char](4) NULL,
	[BarcodeLength] [tinyint] NULL,
	[BarcodeTypeID] [int] NULL,
	[IsActive] [bit] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[LicenseExpiryDate] [datetime] NOT NULL,
	[CRDocumentFile] [dbo].[NullDescription] NULL,
	[IDSponsorFile] [dbo].[NullDescription] NULL,
	[LogoFile] [dbo].[NullDescription] NULL,
	[FirstName] [dbo].[NullName] NULL,
	[MiddleName] [dbo].[NullName] NULL,
	[LastName] [dbo].[NullName] NULL,
	[CountryID] [int] NULL,
	[CityID] [int] NULL,
	[Address1] [dbo].[Address] NULL,
	[PhoneNumber] [dbo].[Mobile] NULL,
	[FaxNumber] [dbo].[Mobile] NULL,
	[Password] [nvarchar](1) NULL,
	[IsEmailCommunication] [bit] NOT NULL,
	[IsSMSCommunication] [bit] NOT NULL,
	[IsMobileCommunication] [bit] NOT NULL,
	[CanContactMorning] [bit] NOT NULL,
	[CanContactEvening] [bit] NOT NULL,
	[NewsLetterNotification] [bit] NOT NULL,
	[PromotionNotification] [bit] NOT NULL,
	[IsVerified] [bit] NULL,
	[CorporateName] [dbo].[NullDescription] NULL,
	[MerchantCode] [dbo].[NullDescription] NULL,
	[CorporateType] [int] NULL,
	[CorporateNameAR] [dbo].[NullDescription] NULL,
	[VATNo] [varchar](25) NULL,
	[DateOfActivation] [datetime] NULL,
	[IsIntegralShopperCorporate] [bit] NULL,
 CONSTRAINT [PK_Corporates] PRIMARY KEY NONCLUSTERED 
(
	[CorporateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECoupons]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECoupons](
	[ECouponID] [bigint] IDENTITY(1,1) NOT NULL,
	[EServiceID] [int] NOT NULL,
	[ResultDate] [datetime] NULL,
	[WinnerCount] [tinyint] NULL,
	[EntryTypeID] [int] NOT NULL,
	[MinInvoiceValue] [dbo].[Amount] NULL,
	[AdditionalCouponValue] [dbo].[NullAmount] NULL,
	[AllowMultipleInvoices] [bit] NULL,
	[CouponPerInvoice] [int] NULL,
	[CouponPerMember] [int] NULL,
	[UserAurthorised] [bit] NULL,
	[QuestionCount] [int] NULL,
	[ImageFile] [dbo].[NullDescription] NULL,
	[UsesTerm] [dbo].[Remark] NULL,
	[ECouponTemplate] [dbo].[Remark] NULL,
	[ParticipationByKiosk] [bit] NOT NULL,
	[MemberOnly] [bit] NOT NULL,
	[RegistrationRequired] [bit] NOT NULL,
	[IsApproved] [bit] NULL,
	[ApprovalDate] [datetime] NULL,
	[IsActive] [bit] NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[ResulltDeclared] [bit] NULL,
	[DeclaredDate] [datetime] NULL,
	[DeclaredBy] [int] NULL,
	[DisplayImage] [dbo].[NullDescription] NULL,
	[Location] [dbo].[NullDescription] NULL,
	[NumberOfConsumerParticipations] [int] NULL,
	[NumberOfGuestParticipations] [int] NULL,
	[AllowMobileParticipation] [int] NULL,
	[AllowWebParticipation] [int] NULL,
	[AllowStandardBarcode] [bit] NULL,
	[StandardBarcodeValue] [varchar](100) NULL,
	[MultipleParticipation] [bit] NULL,
	[ParticipationCount] [int] NULL,
	[SentEVoucher] [bit] NULL,
	[GenderRestriction] [int] NULL,
	[LocationURL] [nvarchar](300) NULL,
	[StandardBarcodeByRetailOutlet] [bit] NULL,
	[TotalAllowedParticipationPerCustomer] [int] NULL,
	[TotalAllowedParticipationPerCustomerPerDay] [int] NULL,
	[AllowedParticipationPerBarcodePerCustomer] [int] NULL,
	[AllowedParticipationPerBarcodePerCustomerPerDay] [int] NULL,
	[TotalAllowedParticipationPerGuest] [int] NULL,
	[TotalAllowedParticipationPerGuestPerDay] [int] NULL,
	[AllowedParticipationPerAttemptInKiosk] [int] NULL,
	[StandardBarcodePrefix] [varchar](2) NULL,
	[StandardBarcodeWidth] [int] NULL,
	[StandardBarcodeByQuestionBank] [bit] NULL,
	[ParticipationNotificationTemplateID] [int] NULL,
	[ParticipationSMSTemplateID] [int] NULL,
	[ParticipationEmailTemplateID] [int] NULL,
	[SendSMS] [bit] NULL,
	[SendEmail] [bit] NULL,
	[CountryID] [int] NULL,
	[Priority] [int] NULL,
	[RecursiveHoursParticipationDuration] [int] NULL,
	[RecursiveHoursNumberOfParticipations] [int] NULL,
	[IsShowMobile] [bit] NULL,
	[LocationValidationRequired] [bit] NULL,
	[RecursiveHoursParticipationDurationKiosk] [int] NULL,
	[RecursiveHoursNumberOfParticipationsKiosk] [int] NULL,
	[APIParticipationCount] [int] NULL,
	[BarcodeFilePrefix] [varchar](max) NULL,
 CONSTRAINT [PK_ECoupons] PRIMARY KEY NONCLUSTERED 
(
	[ECouponID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UploadParticipations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UploadParticipations](
	[UploadParticipationsID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponID] [bigint] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[Mobile] [dbo].[Mobile] NULL,
	[EmailID] [dbo].[Email] NULL,
	[UploadDate] [datetime] NULL,
	[GuestID] [int] NULL,
	[ECouponParticipationID] [bigint] NULL,
	[GuestAdded] [bit] NULL,
	[GuestAddedDate] [datetime] NULL,
	[ParticipantAdded] [bit] NULL,
	[ParticipantAddedDate] [datetime] NULL,
	[RetailOutletID] [int] NULL,
	[RefNo] [varchar](20) NULL,
	[ParticipationDate] [datetime] NULL,
	[Barcode] [nvarchar](100) NULL,
	[BarcodeEnc] [nvarchar](100) NULL,
	[Age] [int] NULL,
	[Gender] [int] NULL,
	[Status] [varchar](10) NULL,
	[UploadParticipationAuditID] [bigint] NULL,
	[ConsumerID] [int] NULL,
 CONSTRAINT [PK_UploadParticipations] PRIMARY KEY NONCLUSTERED 
(
	[UploadParticipationsID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [ClusteredIndex-20201028-162211]    Script Date: 07/11/2021 17:05:57 ******/
CREATE CLUSTERED INDEX [ClusteredIndex-20201028-162211] ON [dbo].[UploadParticipations]
(
	[ECouponID] ASC,
	[Name] ASC,
	[Mobile] ASC,
	[GuestID] ASC,
	[GuestAdded] ASC,
	[ParticipantAdded] ASC,
	[RetailOutletID] ASC,
	[ParticipationDate] ASC,
	[Barcode] ASC,
	[BarcodeEnc] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_ParticipantDetails]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vw_ParticipantDetails]
AS

	select 
ESL.EService as CompetitionName, Corp.CorporateName, ES.FromDate, ES.ToDate, 
convert(date,ParticipationDate) as 'ParticipationDatePart', convert(varchar(8),convert(time, ParticipationDate)) as ParticipationTime, 
case when C.ConsumerID IS NULL THEN 'Guest' ELSE 'Consumer' END as UserType,
case when C.ConsumerID IS NULL THEN G.GuestID ELSE C.ConsumerID END as ID,
case when EP.ParticipationMobile IS NULL THEN case when C.ConsumerID is null then G.PrimaryMobile else C.PrimaryMobile end else EP.ParticipationMobile end as Mobile,
case when EP.ParticipationEmailID IS NULL THEN case when C.ConsumerID is null then G.EmailID else C.EmailID end else EP.ParticipationEmailID end as Email,
case when EP.ConsumerName IS NULL THEN case when C.ConsumerID is null then G.FullName else rtrim(ltrim(C.FirstName + ' '+ C.SecondName + ' '+ c.FamilyName)) end else EP.ConsumerName end as 'Full Name',
C.MembershipNumber, case when ISNULL(C.Gender,0) = 2 then 'F' else case when ISNULL(C.Gender,0) = 1 then 'M' else '-' end end as Gender,
C.BirthDate, C.SecondaryMobile, C.Address1, CL.City, Col.Country, NL.Nationality, 
ESL.EService as 'Competition Name', EP.KioskID, case when EP.KioskID IS NULL THEN 'Normal' ELSE 'Kiosk' END as ParticipationType, 
EC.EServiceID, EP.ParticipationDate,
EC.ECouponID, ES.CorporateID
 from coc_ECouponParticipations(NOLOCK) EP 
	left join coc_ECoupons(NOLOCK) EC ON EP.ECouponID = EC.ECouponID
	left join coc_EServices(NOLOCK) ES ON ES.EServiceID = EC.EServiceID
	left join coc_EServiceLanguages(NOLOCK) ESL ON ESL.EServiceID  = EC.EServiceID and ESL.LanguageID = 1
	left join coc_Corporates(NOLOCK) Corp ON Corp.CorporateID = ES.CorporateID
	left join coc_Consumers(NOLOCK) C ON  EP.ConsumerID = C.ConsumerID
	left join coc_Guests(NOLOCK) G On  EP.GuestID = G.GuestID
	left join coc_CityLanguages(NOLOCK) CL on CL.CityID = C.CityID and CL.LanguageID= 1
	left join coc_CountryLanguages(NOLOCK) CoL on CoL.CountryID = C.CountryID and CoL.LanguageID= 1
	left join coc_NationalityLanguages(NOLOCK) NL on NL.NationalityID = C.NationalityID and NL.LanguageID= 1
	where ISNULL(EP.ConsumerID,0) <> 256 
	and ISNULL(case when EP.ParticipationMobile IS NULL THEN case when C.ConsumerID is null then G.PrimaryMobile else C.PrimaryMobile end else EP.ParticipationMobile end, '') not in( '00966544151155' , '00966557476051', '00966550154069' , '00966504691644', '00966543371169')
	and ISNULL(case when EP.ParticipationEmailID IS NULL THEN case when C.ConsumerID is null then G.EmailID else C.EmailID end else EP.ParticipationEmailID end, '') not in ('shamim.mn@gmail.com', 'othman206@gmail.com', 'kstel-2@hotmail.com', 'Othman206@hotmail.com', 'shamim@logicsystems-me.com')
	and len(ISNULL(case when EP.ParticipationMobile IS NULL THEN C.PrimaryMobile else EP.ParticipationMobile end ,'') ) = 14
	and ISNULL(ECouponParticipationID ,-1) not in (select UploadParticipations.ECouponParticipationID from UploadParticipations)
	and convert(date,EP.ParticipationDate) <= convert(date, '12/31/2018') 
UNION ALL

select 
ESL.EService as CompetitionName, Corp.CorporateName, ES.FromDate, ES.ToDate, 
convert(date,ParticipationDate) as 'ParticipationDatePart', convert(varchar(8),convert(time, ParticipationDate)) as ParticipationTime,
case when C.ConsumerID IS NULL THEN 'Guest' ELSE 'Consumer' END as UserType,
case when C.ConsumerID IS NULL THEN NULL ELSE C.ConsumerID END as ID,
case when EP.ParticipationMobile IS NULL THEN C.PrimaryMobile else EP.ParticipationMobile end as Mobile,
case when EP.ParticipationEmailID IS NULL THEN C.EmailID else EP.ParticipationEmailID end as Email,
case when EP.ConsumerName IS NULL THEN rtrim(ltrim(C.FirstName + ' '+ C.SecondName + ' '+ c.FamilyName)) else EP.ConsumerName end as 'Full Name',
C.MembershipNumber, case when ISNULL(C.Gender,0) = 2 then 'F' else case when ISNULL(C.Gender,0) = 1 then 'M' else '-' end end as Gender,
C.BirthDate, C.SecondaryMobile, C.Address1, CL.City, Col.Country, NL.Nationality, 
ESL.EService as 'Competition Name', NULL as KioskID, 'Kiosk' as ParticipationType, 
EC.EServiceID,EP.ParticipationDate,
EC.ECouponID, ES.CorporateID 
 from coc_ECouponParticipationsInvalid EP 
	left join coc_ECoupons EC ON EP.ECouponID = EC.ECouponID
	left join coc_EServices ES ON ES.EServiceID = EC.EServiceID
	left join coc_EServiceLanguages ESL ON ESL.EServiceID  = EC.EServiceID and ESL.LanguageID = 1
	left join coc_Corporates Corp ON Corp.CorporateID = ES.CorporateID
	left join coc_Consumers C ON  EP.ConsumerID = C.ConsumerID
	--left join coc_Guests G On  EP.GuestID = G.GuestID
	left join coc_CityLanguages CL on CL.CityID = C.CityID and CL.LanguageID= 1
	left join coc_CountryLanguages CoL on CoL.CountryID = C.CountryID and CoL.LanguageID= 1
	left join coc_NationalityLanguages NL on NL.NationalityID = C.NationalityID and NL.LanguageID= 1
	where ISNULL(EP.ConsumerID,0) <> 256
	and ISNULL(case when EP.ParticipationMobile IS NULL THEN C.PrimaryMobile else EP.ParticipationMobile end ,'') not in( '00966544151155' , '00966557476051', '00966550154069' , '00966504691644', '00966543371169')
	and len(ISNULL(case when EP.ParticipationMobile IS NULL THEN C.PrimaryMobile else EP.ParticipationMobile end ,'') ) = 14
	and isnull(case when EP.ParticipationEmailID IS NULL THEN C.EmailID else EP.ParticipationEmailID end ,'null') not in ('shamim.mn@gmail.com', 'othman206@gmail.com', 'kstel-2@hotmail.com', 'Othman206@hotmail.com', 'shamim@logicsystems-me.com')
	and ISNULL(ECouponParticipationID ,-1) not in (select UploadParticipations.ECouponParticipationID from UploadParticipations)
	and convert(date,EP.ParticipationDate) <= convert(date, '12/31/2018') 

UNION ALL 

SELECT 
ESL.EService as CompetitionName, Corp.CorporateName, ES.FromDate, ES.ToDate, 
convert(date,ParticipationDate) as 'ParticipationDatePart', convert(varchar(8),convert(time, ParticipationDate)) as ParticipationTime,
--ParticipationMobile, ParticipationEmailID, --EP.ConsumerID,
case when C.ConsumerID IS NULL THEN 'Guest' ELSE 'Consumer' END as UserType,
case when C.ConsumerID IS NULL THEN NULL ELSE C.ConsumerID END as ID,
case when EP.ParticipationMobile IS NULL THEN case when C.ConsumerID is null then G.PrimaryMobile else C.PrimaryMobile end else EP.ParticipationMobile end as Mobile,
case when EP.ParticipationEmailID IS NULL THEN case when C.ConsumerID is null then G.EmailID else C.EmailID end else EP.ParticipationEmailID end as Email,
case when EP.ConsumerName IS NULL THEN case when C.ConsumerID is null then G.FullName else rtrim(ltrim(C.FirstName + ' '+ C.SecondName + ' '+ c.FamilyName)) end else EP.ConsumerName end as 'Full Name',
C.MembershipNumber, case when ISNULL(C.Gender,0) = 2 then 'F' else case when ISNULL(C.Gender,0) = 1 then 'M' else '-' end end as Gender,
C.BirthDate, C.SecondaryMobile, C.Address1, CL.City,  Col.Country, NL.Nationality, 
--C.FirstName, C.SecondName, C.FamilyName, C.PrimaryMobile, C.EmailID, --G.FullName,G.PrimaryMobile, G.EmailID,
ESL.EService as 'Competition Name', EP.KioskID, 'Excel'  as ParticipationType, 
EC.EServiceID,EP.ParticipationDate,
EC.ECouponID, ES.CorporateID
 from coc_ECouponParticipations EP 
	left join coc_ECoupons EC ON EP.ECouponID = EC.ECouponID
	left join coc_EServices ES ON ES.EServiceID = EC.EServiceID
	left join coc_EServiceLanguages ESL ON ESL.EServiceID  = EC.EServiceID and ESL.LanguageID = 1
	left join coc_Corporates Corp ON Corp.CorporateID = ES.CorporateID
	left join coc_Consumers C ON  EP.ConsumerID = C.ConsumerID
	left join coc_Guests G On  EP.GuestID = G.GuestID
	left join coc_CityLanguages CL on CL.CityID = C.CityID and CL.LanguageID= 1
	left join coc_CountryLanguages CoL on CoL.CountryID = C.CountryID and CoL.LanguageID= 1
	left join coc_NationalityLanguages NL on NL.NationalityID = C.NationalityID and NL.LanguageID= 1
	where ISNULL(EP.ConsumerID,0) <> 256
	and ISNULL(case when EP.ParticipationMobile IS NULL THEN case when C.ConsumerID is null then G.PrimaryMobile else C.PrimaryMobile end else EP.ParticipationMobile end,'') not in( '00966544151155' , '00966557476051', '00966550154069' , '00966504691644', '00966543371169')
	and len(ISNULL(case when EP.ParticipationMobile IS NULL THEN case when C.ConsumerID is null then G.PrimaryMobile else C.PrimaryMobile end else EP.ParticipationMobile end,'')) = 14
	and isnull(case when EP.ParticipationEmailID IS NULL THEN case when C.ConsumerID is null then G.EmailID else C.EmailID end else EP.ParticipationEmailID end,'') not in ('shamim.mn@gmail.com', 'othman206@gmail.com', 'kstel-2@hotmail.com', 'Othman206@hotmail.com', 'shamim@logicsystems-me.com')
	and ISNULL(ECouponParticipationID ,-1) in (select UploadParticipations.ECouponParticipationID from UploadParticipations)
	and convert(date,EP.ParticipationDate) <= convert(date, '12/31/2018') 


GO
/****** Object:  View [dbo].[vw_CorporateInformation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vw_CorporateInformation]
as 
	SELECT 
		 Corp.CorporateName
		,Corp.CorporateNameAR
		,dbo.fnDateFormat(Corp.AddDate) [RegistrationDate] 
		,dbo.fnTimeFormat(Corp.AddDate) [ParticipationTime] 
		,Corp.AddDate as RegistrationDateTime
		,Corp.CRNumber
		,Corp.JCCICode
		,corp.VATNo
		,Corp.IsActive
		,Corp.IsVerified
		,Corp.FirstName
		,Corp.MiddleName
		,Corp.LastName
		,corp.MobileNumber
		,Con_E.Country As [Country Name En]
		,Con_A.Country As [Country Name Ar]
		,City_E.City As [City Name En]
		,City_A.City As [City Name Ar]
		

	from coc_Corporates Corp
		LEFT JOIN coc_CountryLanguages Con_E ON Con_E.CountryID = Corp.CountryID and Con_E.LanguageID = 1
		LEFT JOIN coc_CountryLanguages Con_A ON Con_A.CountryID = Corp.CountryID and Con_A.LanguageID = 2
		LEFT JOIN coc_CityLanguages City_E ON City_E.CityID = Corp.CityID and City_E.LanguageID = 1
		LEFT JOIN coc_CityLanguages City_A ON City_A.CityID = Corp.CityID and City_A.LanguageID = 2
GO
/****** Object:  Table [dbo].[coc_RetailOutletLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_RetailOutletLanguages](
	[RetailOutletID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[RetailOutlet] [dbo].[Description] NOT NULL,
 CONSTRAINT [PK_RetailOutletLanguages] PRIMARY KEY CLUSTERED 
(
	[RetailOutletID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_ParticipationData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vw_ParticipationData]
as 
 SELECT 
   c.ConsumerID        
    ,ep.ECouponParticipationID        
    ,dbo.fnDateFormat(ep.ParticipationDate) [Participation Date] 
	,dbo.fnTimeFormat(ep.ParticipationDate) [Participation Time] 
    ,ep.Barcode        
    ,c.MembershipNumber AS [Member ID]        
    ,CASE WHEN c.ConsumerID IS NOT NULL THEN isnull(ep.ConsumerName, dbo.fnGetConcatenatedName(c.FirstName, c.SecondName, c.ThirdName, c.FamilyName, c.FullName)) 
			ELSE isnull(ep.ConsumerName, dbo.fnGetConcatenatedName(g.FirstName, g.SecondName, null, g.FamilyName, g.FullName))  END AS [Consumer Name]        
    ,isnull(ep.ParticipationMobile, c.PrimaryMobile) AS Mobile        
    ,isnull(ep.ParticipationEmailID, c.EmailID) AS Email        
    ,CASE WHEN c.BirthDate IS NULL THEN '' ELSE dbo.fnDateFormat(c.BirthDate) END DateOfBirth
    ,CASE WHEN c.Gender = 2 THEN 'Female' WHEN c.Gender = 1 THEN 'Male' ELSE '' END Gender
    ,CASE WHEN c.IsFacebookUser = 1 THEN c.FacebookID WHEN c.IsTwitterUser = 1 THEN c.TwitterID WHEN c.IsGmailUser =1    
 THEN c.GmailID WHEN c.IsYahooUser = 1 THEN c.YahooID WHEN c.IsOutlookUser = 'true'     
 THEN c.OutlookID END AS [Social Media ID]        
    ,CASE WHEN c.IsFacebookUser =1 THEN 'Facebook' WHEN c.IsTwitterUser = 1 THEN 'Twitter'     
 WHEN c.IsGmailUser = 1 THEN 'Google' WHEN c.IsYahooUser = 1 THEN 'Yahoo'     
 WHEN c.IsOutlookUser = 1 THEN 'Outlook' END AS [Social Media Type]        
    ,ec.ECouponID        
    ,esl_E.EService AS [Competition Name En]        
    ,esl_A.EService AS [Competition Name Ar]        
    ,es.EServiceID        
    ,CASE WHEN es.CompetitionID = 42 THEN 'Correct Answer' ELSE CASE WHEN ep.RetailOutletID IS NULL THEN '' ELSE rol_E.RetailOutlet END END AS Remarks        
    ,rol_E.RetailOutlet AS [Retail Outlet En]
	,rol_A.RetailOutlet AS [Retail Outlet Ar]
	,ep.ParticipationDate        
    ,nl_E.Nationality    [Nationality En]
    ,nl_A.Nationality    [Nationality Ar]
    ,CASE WHEN c.ConsumerID IS NOT NULL THEN 'Member' WHEN g.GuestID IS NOT NULL THEN 'Guest' END AS [User Type]        
    ,isnull(c.UserIdentityNumber, '') UserIdentityNumber        
    ,ep.UploadImagePath File1        
    ,ep.UploadImagePath2 File2        
    ,(CASE WHEN ep.IsRejected = 1 THEN 'Rejected' ELSE 'Approved' END) STATUS        
    ,ep.ReasonForRejection 
	,case	when ep.KioskID is not null then 'By Kiosk' 
			when ep.EnteredStandardBarcode is not null then 'Standard barcode'
			when isnull(ep.IsFromCompetitionLink,0) <> 0 then 'Micro Link'
			--when up.ECouponParticipationID is not null then 'uploaded'
			else 'eCopon'
			end as ParticipationMethod
	,Latitude
	,Longitude
	,DistanceToRetailoutlet
	,ClosestRetailoutletID
	,c.IsEmailVerified
	,c.IsMobileVerified
	,c.IsActive [Customer Status]
	
   FROM dbo.coc_ECouponParticipations(NOLOCK) ep        
   INNER JOIN coc_ECoupons(NOLOCK) ec ON ec.ECouponID = ep.ECouponID        
   INNER JOIN coc_EServices(NOLOCK) es ON es.EServiceID = ec.EServiceID        
   INNER JOIN coc_EServiceLanguages(NOLOCK) esl_E ON esl_E.EServiceID = ec.EServiceID and esl_E.LanguageID= 1
   INNER JOIN coc_EServiceLanguages(NOLOCK) esl_A ON esl_E.EServiceID = ec.EServiceID and esl_A.LanguageID= 2
   LEFT JOIN coc_Consumers(NOLOCK) c ON c.ConsumerID = ep.ConsumerID        
   LEFT JOIN coc_Guests(NOLOCK) g ON g.GuestID = ep.GuestID        
   LEFT JOIN coc_RetailOutletLanguages(NOLOCK) rol_E ON rol_E.RetailOutletID = ep.RetailOutletID  AND rol_E.LanguageID = 1
   LEFT JOIN coc_RetailOutletLanguages(NOLOCK) rol_A ON rol_A.RetailOutletID = ep.RetailOutletID  AND rol_A.LanguageID = 2
   LEFT JOIN coc_NationalityLanguages(NOLOCK) nl_E ON nl_E.NationalityID = c.NationalityID AND nl_E.LanguageID = 1
   LEFT JOIN coc_NationalityLanguages(NOLOCK) nl_A ON nl_A.NationalityID = c.NationalityID AND nl_A.LanguageID = 2
   --LEFT JOIN UploadParticipations (NOLOCK) UP ON UP.ECouponParticipationID = ep.ECouponParticipationID
   -- where (isnull(@vEServiceID,0) = 0 or es.EServiceID = @vEServiceID)                                    
   WHERE        
     (  ec.ECouponID <> 2        
		OR (        
		  ec.ECouponID = 2        
		  AND ep.RetailOutletID IS NOT NULL        
		  ) )
    AND len(isnull(C.PrimaryMobile, ep.ParticipationMobile)) = 14        
    AND g.GuestID IS NULL        
    AND c.ConsumerID IS NOT NULL        
   --and ep.ParticipationMobile not in  (SELECT top 100 PrimaryMobile FROM [coc_ConsumerExclusions] WITH(NOLOCK) order by 1 desc)                           
           
   UNION        
           
   SELECT  c.ConsumerID        
    ,ep.ECouponParticipationID        
    ,dbo.fnDateFormat(ep.ParticipationDate) [Participation Date] 
	,dbo.fnTimeFormat(ep.ParticipationDate) [Participation Time] 
    ,ep.Barcode        
    ,c.MembershipNumber AS [Member ID]        
    ,isnull(ep.ConsumerName, dbo.fnGetConcatenatedName(c.FirstName, c.SecondName, c.ThirdName, c.FamilyName, c.FullName)) AS [Consumer Name]        
    ,c.PrimaryMobile AS Mobile        
    ,c.EmailID AS Email 
	,CASE WHEN c.BirthDate IS NULL THEN '' ELSE dbo.fnDateFormat(c.BirthDate) END DateOfBirth
    ,CASE WHEN c.Gender = 2 THEN 'Female' WHEN c.Gender = 1 THEN 'Male' ELSE '' END Gender        
     ,CASE WHEN c.IsFacebookUser = 1 THEN c.FacebookID WHEN c.IsTwitterUser = 1 THEN c.TwitterID WHEN c.IsGmailUser =1    
 THEN c.GmailID WHEN c.IsYahooUser = 1 THEN c.YahooID WHEN c.IsOutlookUser = 'true'     
 THEN c.OutlookID END AS [Social Media ID]        
    ,CASE WHEN c.IsFacebookUser =1 THEN 'Facebook' WHEN c.IsTwitterUser = 1 THEN 'Twitter'     
 WHEN c.IsGmailUser = 1 THEN 'Google' WHEN c.IsYahooUser = 1 THEN 'Yahoo'     
 WHEN c.IsOutlookUser = 1 THEN 'Outlook' END AS [Social Media Type]     
    ,ec.ECouponID        
    ,esl_E.EService AS [Competition Name En]        
    ,esl_A.EService AS [Competition Name Ar]        
    ,es.EServiceID        
    ,CASE WHEN es.CompetitionID = 42 THEN 'Correct Answer' ELSE CASE WHEN ep.Reason = 'W' THEN 'Wrong Answer' ELSE 'Repeated Attempt' END END AS Remarks        
    ,rol_E.RetailOutlet AS [Retail Outlet En]
	,rol_A.RetailOutlet AS [Retail Outlet Ar]
	,ep.ParticipationDate        
    ,nl_E.Nationality    [Nationality En]
    ,nl_A.Nationality    [Nationality Ar]
    ,CASE WHEN c.ConsumerID IS NOT NULL THEN 'Member' END AS [User Type]        
    ,isnull(c.UserIdentityNumber, '') UserIdentityNumber        
    ,NULL File1        
    ,NULL File2        
    ,'Rejected' STATUS        
    ,'' ReasonForRejection
	,'eCopon' as ParticipationMethod
	,null as Latitude
	,null as Longitude
	,null as DistanceToRetailoutlet
	,null as ClosestRetailoutletID
	,c.IsEmailVerified
	,c.IsMobileVerified
	,c.IsActive [Customer Status]
   FROM coc_ECouponParticipationsInvalid(NOLOCK) ep        
   INNER JOIN coc_Consumers(NOLOCK) c ON c.ConsumerID = ep.ConsumerID     
   INNER JOIN coc_ECoupons(NOLOCK) ec ON ec.ECouponID = ep.ECouponID        
   INNER JOIN coc_EServices(NOLOCK) es ON es.EServiceID = ec.EServiceID        
   INNER JOIN coc_EServiceLanguages(NOLOCK) esl_E ON esl_E.EServiceID = ec.EServiceID and esl_E.LanguageID= 1
   INNER JOIN coc_EServiceLanguages(NOLOCK) esl_A ON esl_E.EServiceID = ec.EServiceID and esl_A.LanguageID= 2
   LEFT JOIN coc_RetailOutletLanguages(NOLOCK) rol_E ON rol_E.RetailOutletID = ep.RetailOutletID  AND rol_E.LanguageID = 1
   LEFT JOIN coc_RetailOutletLanguages(NOLOCK) rol_A ON rol_A.RetailOutletID = ep.RetailOutletID  AND rol_A.LanguageID = 2
   LEFT JOIN coc_NationalityLanguages(NOLOCK) nl_E ON nl_E.NationalityID = c.NationalityID AND nl_E.LanguageID = 1
   LEFT JOIN coc_NationalityLanguages(NOLOCK) nl_A ON nl_A.NationalityID = c.NationalityID AND nl_A.LanguageID = 2
	AND len(isnull(C.PrimaryMobile, ep.ParticipationMobile)) = 14
GO
/****** Object:  Table [dbo].['04-07-2019 01-00-18_Barcode$']    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].['04-07-2019 01-00-18_Barcode$'](
	[NotificationID] [float] NULL,
	[CorporateID] [float] NULL,
	[BarcodeTypeID] [float] NULL,
	[Barcode] [nvarchar](255) NULL,
	[CanDelete] [float] NULL,
	[IsUsed] [float] NULL,
	[AsignedMoile] [nvarchar](255) NULL,
	[AsignedEmailID] [nvarchar](255) NULL,
	[UsedDate] [nvarchar](255) NULL,
	[ConsumerNotificationID] [nvarchar](255) NULL,
	[ConsumerID] [nvarchar](255) NULL,
	[GuestID] [nvarchar](255) NULL,
	[EVoucherID] [nvarchar](255) NULL,
	[DistributorCorporateID] [nvarchar](255) NULL,
	[EVoucherBundleEligibilityForConsumersID] [nvarchar](255) NULL,
	[EBundleID] [nvarchar](255) NULL,
	[EventID] [nvarchar](255) NULL,
	[UserId] [nvarchar](255) NULL,
	[EServiceAddOnId] [nvarchar](255) NULL,
	[UsedAtKioskID] [nvarchar](255) NULL,
	[IsDirectVoucher] [nvarchar](255) NULL,
	[BroadcastEmailID] [nvarchar](255) NULL,
	[Distributiontype] [nvarchar](255) NULL,
	[StandardBarcodeValue] [nvarchar](255) NULL,
	[AssignedDate] [nvarchar](255) NULL,
	[UsedByAPI] [nvarchar](255) NULL,
	[CorporateAPIUserID] [nvarchar](255) NULL,
	[InvoiceAmount] [nvarchar](255) NULL,
	[InvoiceNumber] [nvarchar](255) NULL,
	[Location] [nvarchar](255) NULL,
	[RetailoutletID] [nvarchar](255) NULL,
	[APIKey] [nvarchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ChangeLog]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChangeLog](
	[LogId] [int] IDENTITY(1,1) NOT NULL,
	[DatabaseName] [varchar](256) NOT NULL,
	[EventType] [varchar](50) NOT NULL,
	[ObjectName] [varchar](256) NOT NULL,
	[ObjectType] [varchar](25) NOT NULL,
	[SqlCommand] [varchar](max) NOT NULL,
	[EventDate] [datetime] NOT NULL,
	[LoginName] [varchar](256) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_AdvertisementFiles]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_AdvertisementFiles](
	[AdvertisementFileID] [bigint] IDENTITY(1,1) NOT NULL,
	[AdvertisementID] [bigint] NULL,
	[IsURL] [bit] NOT NULL,
	[AdvertisementText] [dbo].[Remark] NULL,
	[FilePath] [dbo].[NullName] NULL,
 CONSTRAINT [PK_AdvertisementFiles] PRIMARY KEY NONCLUSTERED 
(
	[AdvertisementFileID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_AdvertisementPages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_AdvertisementPages](
	[AdvertisementPageID] [bigint] IDENTITY(1,1) NOT NULL,
	[AdvertisementID] [bigint] NULL,
	[PageID] [int] NULL,
 CONSTRAINT [PK_AdvertisementPages] PRIMARY KEY NONCLUSTERED 
(
	[AdvertisementPageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Advertisements]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Advertisements](
	[AdvertisementID] [bigint] IDENTITY(1,1) NOT NULL,
	[AdvertisementName] [dbo].[NullName] NULL,
	[TargetPlateform] [tinyint] NOT NULL,
	[PositionID] [int] NULL,
	[PopupHeight] [int] NULL,
	[PopupWidth] [int] NULL,
	[DisplayTypeID] [tinyint] NOT NULL,
	[TargetURL] [dbo].[NullName] NULL,
	[StartDate] [datetime] NOT NULL,
	[Duration] [int] NOT NULL,
	[Cost] [dbo].[Amount] NOT NULL,
	[DisplayCount] [int] NULL,
	[HitCount] [int] NULL,
	[IsActive] [bit] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[IsImage] [bit] NOT NULL,
	[IsVideo] [bit] NOT NULL,
	[HasNextVideo] [bit] NOT NULL,
	[TargetLinkType] [varchar](10) NULL,
	[eCouponID] [bigint] NULL,
 CONSTRAINT [PK_Advertisements] PRIMARY KEY NONCLUSTERED 
(
	[AdvertisementID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_API_ExternalParticipations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_API_ExternalParticipations](
	[ExternalParticipationID] [bigint] IDENTITY(1,1) NOT NULL,
	[FirstName] [nvarchar](200) NULL,
	[LastName] [nvarchar](200) NULL,
	[MiddleName] [nvarchar](200) NULL,
	[PrimaryMobile] [varchar](25) NULL,
	[EmailID] [nvarchar](100) NULL,
	[CountryISOCode] [varchar](5) NULL,
	[APIKEY] [nvarchar](200) NULL,
	[AddedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_API_ExternalParticipations] PRIMARY KEY CLUSTERED 
(
	[ExternalParticipationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_APIRequestLog]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_APIRequestLog](
	[RequestID] [bigint] IDENTITY(1,1) NOT NULL,
	[CorporateID] [int] NULL,
	[APIKey] [nvarchar](50) NULL,
	[ServiceKey] [nvarchar](50) NULL,
	[ResponsePayload] [nvarchar](max) NULL,
	[RequestedOn] [datetime] NULL,
	[RequestIPAddress] [nvarchar](150) NULL,
	[RequestURL] [nvarchar](500) NULL,
	[CompetitionID] [int] NULL,
	[PayloadType] [nvarchar](150) NULL,
	[RequestPayload] [nvarchar](max) NULL,
	[RequestPayloadFileName] [nvarchar](150) NULL,
	[RequestType] [int] NULL,
	[ResponseStatus] [int] NULL,
	[ErrorCode] [int] NULL,
	[ErrorDescription] [nvarchar](max) NULL,
	[ResponseDateTime] [datetime] NULL,
	[ResponsePayloadFileName] [nvarchar](150) NULL,
 CONSTRAINT [PK_coc_APIRequestLog] PRIMARY KEY CLUSTERED 
(
	[RequestID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_APIRequestReferenceLog]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_APIRequestReferenceLog](
	[ServiceReferenceID] [bigint] IDENTITY(1,1) NOT NULL,
	[ServiceKey] [nvarchar](50) NULL,
	[APIKey] [nvarchar](50) NULL,
	[ReferenceNo] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK_coc_APIRequestReferenceLog] PRIMARY KEY CLUSTERED 
(
	[ServiceReferenceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_APIRequestValidationRules]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_APIRequestValidationRules](
	[APIRequestValidationRuleID] [bigint] IDENTITY(1,1) NOT NULL,
	[APIRequestValidationID] [bigint] NULL,
	[PropertyName] [nvarchar](30) NULL,
	[Condition] [nvarchar](30) NULL,
	[ConditionValue] [nvarchar](500) NULL,
	[ErrorMessage_EN] [nvarchar](100) NULL,
	[ErrorMessage_AR] [nvarchar](100) NULL,
	[IsDependent] [bit] NULL,
	[DependentPropertyName] [nvarchar](30) NULL,
	[DependentKeyId] [bigint] NULL,
	[IsRegularExpression] [bit] NULL,
	[RegularExpression] [nvarchar](500) NULL,
	[IsRequired] [bit] NULL,
	[IsActive] [bit] NULL,
	[IsSystem] [int] NULL,
	[CreatedBy] [bigint] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [bigint] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK__coc_APIR__C14734BDFD696433] PRIMARY KEY CLUSTERED 
(
	[APIRequestValidationRuleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_APIRequestValidations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_APIRequestValidations](
	[APIRequestValidationID] [bigint] IDENTITY(1,1) NOT NULL,
	[RequestTypeID] [int] NULL,
	[IsDefault] [bit] NULL,
	[ServiceKey] [nvarchar](50) NULL,
	[CreatedBy] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
	[Description] [nvarchar](500) NULL,
 CONSTRAINT [PK_coc_APIRequestValidations] PRIMARY KEY CLUSTERED 
(
	[APIRequestValidationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_AuditPaytabTransaction]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_AuditPaytabTransaction](
	[PaytabAuditID] [bigint] IDENTITY(1,1) NOT NULL,
	[TransactionRefNum] [nvarchar](50) NULL,
	[BarcodeID] [bigint] NULL,
	[VoucherAmount] [decimal](18, 2) NULL,
	[ConsumerID] [int] NULL,
	[EvoucherID] [int] NULL,
	[OrderID] [nvarchar](300) NULL,
	[InvoiceID] [nvarchar](300) NULL,
	[RequestStatus] [int] NULL,
	[RequestTime] [datetime] NULL,
	[PaytabRefNum] [nvarchar](200) NULL,
	[CardLastFourDigits] [nvarchar](10) NULL,
	[CardFirstSixDigits] [nvarchar](10) NULL,
	[CardBrand] [nvarchar](50) NULL,
	[PaytabResponseCode] [nvarchar](50) NULL,
	[PaytabResponseTime] [datetime] NULL,
	[PaytabResponseMessage] [nvarchar](200) NULL,
 CONSTRAINT [PK_coc_AuditPaytabTransaction] PRIMARY KEY CLUSTERED 
(
	[PaytabAuditID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Banner]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Banner](
	[BannerID] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](100) NULL,
	[Image] [nvarchar](200) NOT NULL,
	[url] [nvarchar](500) NULL,
	[Order] [int] NULL,
	[IsActive] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[CreatedBy] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Barcode_Bank]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Barcode_Bank](
	[BarcodeID] [bigint] IDENTITY(1,1) NOT NULL,
	[Barcode] [nvarchar](150) NULL,
	[SysBarcode] [nvarchar](150) NULL,
	[IsImported] [int] NULL,
	[CreatedOn] [nvarchar](150) NULL,
 CONSTRAINT [PK__coc_barc__21916C88EC712BEB] PRIMARY KEY CLUSTERED 
(
	[BarcodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UQ__coc_barc__177800D3075877F4] UNIQUE NONCLUSTERED 
(
	[Barcode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UQ__coc_barc__80CBB9954AC2D6F8] UNIQUE NONCLUSTERED 
(
	[SysBarcode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_BarcodeConfigurations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_BarcodeConfigurations](
	[BarcodeConfigurationID] [int] IDENTITY(1,1) NOT NULL,
	[ServiceTypeID] [int] NOT NULL,
	[BarcodeCombinationID] [int] NOT NULL,
	[Sequence] [tinyint] NOT NULL,
	[CombinationLength] [tinyint] NOT NULL,
	[CombinationValue] [tinyint] NULL,
	[EditSequence] [tinyint] NOT NULL,
	[EditCombinationLength] [tinyint] NOT NULL,
	[EditCombinationValue] [tinyint] NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[IsApproved] [bit] NOT NULL,
	[CheckerDate] [datetime] NULL,
	[CheckerUserID] [int] NULL,
 CONSTRAINT [PK_BarcodeConfigurations] PRIMARY KEY NONCLUSTERED 
(
	[BarcodeConfigurationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_BarcodeDumpBank]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_BarcodeDumpBank](
	[BarcodeID] [bigint] IDENTITY(1,1) NOT NULL,
	[Barcode] [nvarchar](250) NOT NULL,
 CONSTRAINT [PK_coc_BarcodeDumpBank] PRIMARY KEY CLUSTERED 
(
	[BarcodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_BarcodePackagePricings]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_BarcodePackagePricings](
	[BarcodePackagePricingsID] [int] IDENTITY(1,1) NOT NULL,
	[PackFrom] [int] NOT NULL,
	[PackTo] [int] NOT NULL,
	[MessageRate] [dbo].[Amount] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[IsActive] [bit] NOT NULL,
	[Currency] [nvarchar](50) NULL,
 CONSTRAINT [PK_BarcodePricings] PRIMARY KEY NONCLUSTERED 
(
	[BarcodePackagePricingsID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_BarcodePrices]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_BarcodePrices](
	[BarcodePriceId] [bigint] IDENTITY(1,1) NOT NULL,
	[CountFrom] [bigint] NOT NULL,
	[CountTo] [bigint] NOT NULL,
	[Price] [decimal](18, 2) NOT NULL,
	[CurrencyId] [bigint] NOT NULL,
 CONSTRAINT [PK_coc_BarcodePrices] PRIMARY KEY CLUSTERED 
(
	[BarcodePriceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_BarcodePrintDetails]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_BarcodePrintDetails](
	[BarcodePrintID] [bigint] NOT NULL,
	[EServiceBarcodeID] [bigint] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_BarcodePrintFile]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_BarcodePrintFile](
	[BarcodePrintFileID] [bigint] IDENTITY(1,1) NOT NULL,
	[BarcodePrintID] [bigint] NOT NULL,
	[PrintCount] [int] NOT NULL,
	[FileName] [nvarchar](400) NOT NULL,
	[UserID] [int] NULL,
 CONSTRAINT [PK_BarcodePrintFile] PRIMARY KEY NONCLUSTERED 
(
	[BarcodePrintFileID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_BarcodePrints]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_BarcodePrints](
	[BarcodePrintID] [bigint] IDENTITY(1,1) NOT NULL,
	[NotificationID] [bigint] NOT NULL,
	[PrintCount] [int] NOT NULL,
	[PrintDate] [datetime] NOT NULL,
	[PrintUserID] [int] NOT NULL,
 CONSTRAINT [PK_BarcodePrints] PRIMARY KEY NONCLUSTERED 
(
	[BarcodePrintID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_BarcodePurchase]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_BarcodePurchase](
	[BarcodePurchaseId] [bigint] IDENTITY(1,1) NOT NULL,
	[PurchaseNo] [bigint] NOT NULL,
	[CorporateId] [int] NOT NULL,
	[Date] [datetime] NOT NULL,
	[NoOfBarcodes] [bigint] NOT NULL,
	[BarcodePriceId] [bigint] NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[TaxApplicable] [bit] NULL,
	[Tax] [decimal](18, 2) NULL,
	[TotalAmount] [decimal](18, 2) NULL,
	[Status] [int] NOT NULL,
	[NoOfBarCodesApproved] [bigint] NULL,
	[ApprovedAdminId] [bigint] NULL,
	[UserId] [int] NULL,
	[CreatedDate] [datetime] NOT NULL,
	[AdminApprovedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL,
	[InvoicePath] [nvarchar](500) NULL,
	[ReasonForReject] [nvarchar](500) NULL,
	[IsCompetitionFeeAapply] [bit] NULL,
 CONSTRAINT [PK_coc_BarcodePurchase] PRIMARY KEY CLUSTERED 
(
	[BarcodePurchaseId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_BarcodePurchasePayment]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_BarcodePurchasePayment](
	[BarcodePurcahsePaymentId] [bigint] IDENTITY(1,1) NOT NULL,
	[BarcodePurchaseId] [bigint] NOT NULL,
	[PaymentDate] [datetime] NOT NULL,
	[PaidAmount] [decimal](18, 2) NOT NULL,
	[UserId] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[PaymentReceipt] [nvarchar](200) NULL,
	[NOfBarcodesApproved] [bigint] NULL,
	[Status] [int] NULL,
	[ReasonForReject] [nvarchar](max) NULL,
	[RemainingAmount] [decimal](18, 2) NULL,
 CONSTRAINT [PK_coc_BarcodePurchasePayment] PRIMARY KEY CLUSTERED 
(
	[BarcodePurcahsePaymentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_BarcodePurchases]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_BarcodePurchases](
	[BarcodePurchasesID] [int] IDENTITY(1,1) NOT NULL,
	[BarcodePackagePricingsID] [int] NOT NULL,
	[CorporateID] [int] NOT NULL,
	[EServiceInvoiceID] [int] NOT NULL,
	[IsPaymentDone] [bit] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[AddDate] [datetime] NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[NumberOfBarcodes] [bigint] NULL,
	[Rate] [dbo].[Amount] NOT NULL,
 CONSTRAINT [PK_BarcodePurchases] PRIMARY KEY NONCLUSTERED 
(
	[BarcodePurchasesID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_BarcodesConsumption]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_BarcodesConsumption](
	[BarcodeConsumptionID] [bigint] IDENTITY(1,1) NOT NULL,
	[CorporateID] [int] NOT NULL,
	[Date] [datetime] NULL,
	[BarcodePurchasePaymentID] [bigint] NULL,
	[CompetitionStagingId] [bigint] NULL,
	[CompetitionID] [bigint] NULL,
	[CompetitionUnapproved] [bit] NULL,
	[NoOfBarcodesApproved] [bigint] NULL,
	[NoOfBarcodesUsed] [bigint] NULL,
	[BarcodeExpiryDate] [datetime] NULL,
	[BaseConsumptionID] [bigint] NULL,
	[EServiceID] [int] NULL,
 CONSTRAINT [PK_coc_BarcodesConsumption] PRIMARY KEY CLUSTERED 
(
	[BarcodeConsumptionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_black_list]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_black_list](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](500) NULL,
	[Mobile] [nvarchar](50) NULL,
 CONSTRAINT [PK_coc_black_list] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_BroadcastEmail]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_BroadcastEmail](
	[BroadcastEmailID] [bigint] IDENTITY(1,1) NOT NULL,
	[EServiceID] [int] NOT NULL,
	[CustomerName] [nvarchar](100) NOT NULL,
	[EmailAddress] [nvarchar](100) NOT NULL,
	[EmailBody] [nvarchar](max) NULL,
	[Status] [int] NULL,
	[UserID] [int] NOT NULL,
	[EntryTime] [datetime] NOT NULL,
	[SentTime] [datetime] NULL,
 CONSTRAINT [PK_Table_1] PRIMARY KEY CLUSTERED 
(
	[BroadcastEmailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_BroadcastEmail_Log]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_BroadcastEmail_Log](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[EVoucherID] [int] NULL,
	[CustomerName] [nvarchar](100) NULL,
	[CustomerEmail] [nvarchar](100) NULL,
	[EmailStatus] [char](1) NULL,
	[EmailSentOn] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ChamberLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ChamberLanguages](
	[ChamberID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[Name] [nvarchar](1000) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Chambers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Chambers](
	[ChamberID] [int] IDENTITY(1,1) NOT NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
	[ChamberSymbol] [varchar](3) NULL,
	[ChamberLogo] [varchar](max) NULL,
 CONSTRAINT [PK_coc_Chambers] PRIMARY KEY CLUSTERED 
(
	[ChamberID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ChangeContactInformationAudit]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ChangeContactInformationAudit](
	[ContactInformationID] [bigint] IDENTITY(1,1) NOT NULL,
	[ConsumerID] [int] NULL,
	[NewEmailID] [nvarchar](50) NULL,
	[OldEmailID] [nvarchar](50) NULL,
	[NewMobile] [nvarchar](50) NULL,
	[OldMobile] [nvarchar](50) NULL,
	[OTPID] [int] NULL,
	[OTPGeneratedOn] [datetime] NULL,
	[OTPVerifiedOn] [datetime] NULL,
	[IsVerified] [bit] NULL,
	[OTP] [nvarchar](50) NULL,
	[AddedOn] [datetime] NULL,
 CONSTRAINT [PK_coc_ChangeContactInformationAudit] PRIMARY KEY CLUSTERED 
(
	[ContactInformationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CheckVersion]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CheckVersion](
	[CheckVersionID] [bigint] IDENTITY(1,1) NOT NULL,
	[MajorVersionNo] [int] NULL,
	[RevisionNo] [varchar](10) NULL,
	[DeviceID] [varchar](100) NULL,
	[OSVersion] [varchar](100) NULL,
	[ConsumerID] [bigint] NULL,
	[LanguageID] [int] NULL,
	[DeviceType] [varchar](10) NULL,
	[WebServiceVersion] [varchar](50) NULL,
	[Timestamp] [datetime] NULL,
 CONSTRAINT [PK_coc_CheckVersion] PRIMARY KEY CLUSTERED 
(
	[CheckVersionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Cities]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Cities](
	[CityID] [int] NOT NULL,
	[CountryID] [int] NULL,
	[IsActive] [bit] NOT NULL,
	[HasIntegration] [bit] NOT NULL,
	[DisplayOrder] [int] NULL,
 CONSTRAINT [PK_Cities] PRIMARY KEY NONCLUSTERED 
(
	[CityID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_competition]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_competition](
	[CompetitionID] [bigint] IDENTITY(1,1) NOT NULL,
	[ChamberId] [int] NOT NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[NoOfCoupons] [bigint] NULL,
	[NoOfPrizes] [int] NULL,
	[NoOfPrizeTypes] [int] NULL,
	[NoOfBranches] [int] NULL,
	[DrawDays] [int] NULL,
	[CorporateID] [int] NOT NULL,
	[CreatedBy] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
	[IsSaved] [bit] NULL,
	[ImageFile] [dbo].[NullDescription] NULL,
	[GeneratedPDFFile] [nvarchar](200) NULL,
	[SentForAdminApproval] [bit] NULL,
	[IsAdminApproved] [bit] NULL,
	[AdminRejectionReason] [nvarchar](500) NULL,
	[IsChamberApproved] [bit] NULL,
	[ChamberApprovedPDF] [nvarchar](500) NULL,
	[IsChamberRejected] [bit] NULL,
	[ChamberRejectionReason] [bit] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_coc_competition] PRIMARY KEY CLUSTERED 
(
	[CompetitionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_competition_staging]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_competition_staging](
	[CompetitionStagingID] [bigint] IDENTITY(1,1) NOT NULL,
	[guid] [nvarchar](max) NULL,
	[CompetitionId] [bigint] NULL,
	[ChamberId] [int] NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[NoOfCoupons] [bigint] NULL,
	[NoOfPrizes] [int] NULL,
	[NoOfPrizeTypes] [int] NULL,
	[NoOfBranches] [int] NULL,
	[DrawDays] [int] NULL,
	[CorporateID] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
	[IsSaved] [bit] NULL,
	[ImageFile] [dbo].[NullDescription] NULL,
	[GeneratedPDFFile] [nvarchar](200) NULL,
	[SentForAdminApproval] [bit] NULL,
	[IsAdminApproved] [bit] NULL,
	[IsAdminRejected] [bit] NULL,
	[AdminRejectionReason] [nvarchar](500) NULL,
	[IsChamberApproved] [bit] NULL,
	[ChamberApprovedPDF] [nvarchar](500) NULL,
	[IsChamberRejected] [bit] NULL,
	[ChamberRejectionReason] [nvarchar](500) NULL,
	[IsActive] [bit] NULL,
	[Invoice] [nvarchar](200) NULL,
	[AdminApprovedOn] [datetime] NULL,
	[AdminRejectedOn] [datetime] NULL,
	[AdminRevokeRejectionOn] [datetime] NULL,
	[AdminEntryDate] [datetime] NULL,
	[ChamberApprovedOn] [datetime] NULL,
	[ChamberRejectedOn] [datetime] NULL,
	[ChamberRevokeRejectionOn] [datetime] NULL,
	[ChamberEntryDate] [datetime] NULL,
	[FinalApprovedDate] [datetime] NULL,
	[IsOnHold] [bit] NULL,
	[OnHoldReason] [nvarchar](500) NULL,
	[OnHoldDate] [datetime] NULL,
	[AdminApprovedUserID] [int] NULL,
	[AdminRejectionUserID] [int] NULL,
	[AdminRevokeRejectionUserID] [int] NULL,
	[ChamberApprovedUserID] [int] NULL,
	[ChamberRejectionUserID] [int] NULL,
	[ChamberRevokeRejectionUserID] [int] NULL,
	[FinalApprovedUserID] [int] NULL,
	[OnHoldUserID] [int] NULL,
	[FinalEntryDate] [datetime] NULL,
	[IsAdminPartialRejection] [bit] NULL,
	[ChamberQRCode] [nvarchar](30) NULL,
	[NumberOfLinks] [int] NULL,
	[NumberOfSpecialBarcodes] [int] NULL,
	[IsFromOpenQuantityLink] [bit] NULL,
	[SentRequestForActivation] [bit] NULL,
	[CompetitionNumber] [bigint] NULL,
	[CompetitionOrderNumber] [nvarchar](20) NULL,
	[LocationValidationRequired] [bit] NULL,
	[IsDeleted] [bit] NULL,
 CONSTRAINT [PK_coc_competition_staging] PRIMARY KEY CLUSTERED 
(
	[CompetitionStagingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_competition_staging_checklists]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_competition_staging_checklists](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CompetitionStagingID] [bigint] NOT NULL,
	[CheckListID] [int] NOT NULL,
 CONSTRAINT [PK_coc_competition_staging_checklists] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_competition_staging_cities]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_competition_staging_cities](
	[CityID] [int] NOT NULL,
	[CompetitionStagingId] [bigint] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_competition_staging_CompetitionMethods]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_competition_staging_CompetitionMethods](
	[CompetitionStagingCompetitionMethodId] [bigint] IDENTITY(1,1) NOT NULL,
	[CompetitionStagingID] [bigint] NOT NULL,
	[CompetitionMethodId] [int] NULL,
 CONSTRAINT [PK_coc_competition_staging_CompetitionMethods] PRIMARY KEY CLUSTERED 
(
	[CompetitionStagingCompetitionMethodId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_competition_staging_CompetitionTypes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_competition_staging_CompetitionTypes](
	[CompetitionStagingCompetitionTypeId] [bigint] IDENTITY(1,1) NOT NULL,
	[CompetitionStagingID] [int] NOT NULL,
	[CompetitionTypeId] [int] NULL,
 CONSTRAINT [PK_coc_competition_staging_CompetitionTypes] PRIMARY KEY CLUSTERED 
(
	[CompetitionStagingCompetitionTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_competition_staging_countries]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_competition_staging_countries](
	[CompetitionStagingId] [bigint] NULL,
	[CountryId] [int] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_competition_staging_draws]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_competition_staging_draws](
	[CompetitionStagingDrawID] [int] IDENTITY(1,1) NOT NULL,
	[CompetitionStagingID] [bigint] NOT NULL,
	[DrawDate] [datetime] NULL,
	[WinnersCount] [int] NOT NULL,
	[BranchesCount] [int] NOT NULL,
	[TypeOfPrizesCount] [int] NOT NULL,
	[ECouponDrawID] [bigint] NULL,
 CONSTRAINT [PK_coc_competition_staging_draws] PRIMARY KEY CLUSTERED 
(
	[CompetitionStagingDrawID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_competition_staging_draws_details]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_competition_staging_draws_details](
	[CometitionStagingDrawDetailID] [int] IDENTITY(1,1) NOT NULL,
	[CompetitionStagingDrawID] [int] NOT NULL,
	[RetailOutletID] [int] NULL,
	[CompetitionStagingPrizeID] [int] NULL,
	[AvailableCount] [int] NULL,
	[ChoosenCount] [int] NULL,
	[ECouponDrawPrizeID] [bigint] NULL,
 CONSTRAINT [PK_coc_competition_staging_draws_details] PRIMARY KEY CLUSTERED 
(
	[CometitionStagingDrawDetailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_competition_staging_draws_languages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_competition_staging_draws_languages](
	[CompetitionStagingDrawID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[Name] [nvarchar](200) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_competition_staging_languages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_competition_staging_languages](
	[CompetitionStagingID] [bigint] NULL,
	[LanguageID] [int] NULL,
	[ResourceKey] [varchar](200) NULL,
	[ResourceValue] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_competition_staging_ParticipationTypes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_competition_staging_ParticipationTypes](
	[CompetitionStagingParticipationTypeId] [bigint] IDENTITY(1,1) NOT NULL,
	[CompetitionStagingID] [int] NOT NULL,
	[CompetitionParticipationTypeID] [int] NULL,
 CONSTRAINT [PK_coc_competition_staging_ParticipationTypes] PRIMARY KEY CLUSTERED 
(
	[CompetitionStagingParticipationTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_competition_staging_prizes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_competition_staging_prizes](
	[CompetitionStagingPrizeID] [int] IDENTITY(1,1) NOT NULL,
	[CompetitionStagingId] [bigint] NOT NULL,
	[PrizeCount] [int] NOT NULL,
	[ECouponPrizeID] [bigint] NULL,
 CONSTRAINT [PK_coc_competition_staging_prizes] PRIMARY KEY CLUSTERED 
(
	[CompetitionStagingPrizeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_competition_staging_prizes_languages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_competition_staging_prizes_languages](
	[CompetitionStagingPrizeId] [int] NOT NULL,
	[LanguageId] [int] NULL,
	[ResourceKey] [varchar](100) NOT NULL,
	[ResourceValue] [nvarchar](2000) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_competition_staging_rejections]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_competition_staging_rejections](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[CompetitionStagingID] [bigint] NOT NULL,
	[SendAdminApproval] [bit] NOT NULL,
	[AdminStatus] [bit] NULL,
	[ReasonForRejection] [nvarchar](1000) NULL,
	[EntryDate] [datetime] NULL,
	[ApprovedOrRejectionDate] [datetime] NULL,
	[CreatedDate] [datetime] NULL,
	[IsAdminPartialRejection] [bit] NULL,
	[Type] [int] NULL,
	[CreatedBy] [int] NULL,
 CONSTRAINT [PK_coc_competition_staging_rejections] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Competition_Staging_RetailOutlets]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Competition_Staging_RetailOutlets](
	[CompetitionStagingId] [bigint] NOT NULL,
	[RetailOutletID] [int] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_competition_staging_Services]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_competition_staging_Services](
	[CompetitionStagingServiceId] [bigint] IDENTITY(1,1) NOT NULL,
	[CompetitionStagingID] [int] NOT NULL,
	[CompetitionServiceId] [int] NULL,
 CONSTRAINT [PK_coc_competition_staging_Services] PRIMARY KEY CLUSTERED 
(
	[CompetitionStagingServiceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_competition_staging_SocialMedia]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_competition_staging_SocialMedia](
	[CompetitionStagingSocialMediaID] [int] IDENTITY(1,1) NOT NULL,
	[CompetitionStagingID] [bigint] NOT NULL,
	[SocialMediaID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[CompetitionStagingSocialMediaID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionCheckLists]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionCheckLists](
	[CheckListID] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](1000) NOT NULL,
	[IsActive] [bit] NOT NULL,
	[ArabicName] [nvarchar](1000) NULL,
 CONSTRAINT [PK_coc_CompetitionCheckLists] PRIMARY KEY CLUSTERED 
(
	[CheckListID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionContactUs]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionContactUs](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponID] [int] NULL,
	[Name] [nvarchar](50) NULL,
	[Email] [nvarchar](50) NULL,
	[Subject] [nvarchar](150) NULL,
	[Message] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK_coc_CompetitionContactUs] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionLanguage]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionLanguage](
	[CompetitionLanguageID] [bigint] IDENTITY(1,1) NOT NULL,
	[CompetitionRegistrationID] [bigint] NULL,
	[LanguageID] [int] NULL,
	[CampaignName] [nvarchar](150) NULL,
	[CreatedBy] [bigint] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [bigint] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_CompetitionLanguage] PRIMARY KEY CLUSTERED 
(
	[CompetitionLanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionMethod_Types]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionMethod_Types](
	[CompetitionMethodTypeID] [int] IDENTITY(1,1) NOT NULL,
	[CompetitionTypeID] [int] NOT NULL,
	[CompetitionMethodID] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_CompetitionMethod_Types] PRIMARY KEY CLUSTERED 
(
	[CompetitionMethodTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionMethodLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionMethodLanguages](
	[CompetitionMethodID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[Name] [nvarchar](1000) NOT NULL,
	[Description] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionMethodParticipationTypes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionMethodParticipationTypes](
	[CompetitionMethodParticipationTypeID] [int] IDENTITY(1,1) NOT NULL,
	[CompetitionMethodID] [int] NOT NULL,
	[ParticipationTypeID] [int] NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_CompetitionMethodParticipationTypes] PRIMARY KEY CLUSTERED 
(
	[CompetitionMethodParticipationTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionMethods]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionMethods](
	[CompetitionMethodID] [int] IDENTITY(1,1) NOT NULL,
	[IsActive] [bit] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
	[DisplayOrder] [int] NULL,
 CONSTRAINT [PK_coc_CompetitionMethods_1] PRIMARY KEY CLUSTERED 
(
	[CompetitionMethodID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionMethodServices]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionMethodServices](
	[CompetitionMethodServiceID] [int] IDENTITY(1,1) NOT NULL,
	[CompetitionMethodID] [int] NOT NULL,
	[CompetitionServiceID] [int] NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_CompetitionMethodServices] PRIMARY KEY CLUSTERED 
(
	[CompetitionMethodServiceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionParticipationTypeLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionParticipationTypeLanguages](
	[CompetitionParticipationTypeID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[Name] [nvarchar](1000) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionParticipationTypes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionParticipationTypes](
	[CompetitionParticipationTypeID] [int] IDENTITY(1,1) NOT NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_CompetitionParticipationTypes] PRIMARY KEY CLUSTERED 
(
	[CompetitionParticipationTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionPayment]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionPayment](
	[CompetitionPaymentID] [bigint] IDENTITY(1,1) NOT NULL,
	[CompetitionStagingID] [bigint] NOT NULL,
	[PaymentDate] [datetime] NOT NULL,
	[PaidAmount] [decimal](18, 2) NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[PaymentReceipt] [nvarchar](500) NULL,
 CONSTRAINT [PK_coc_CompetitionPayment] PRIMARY KEY CLUSTERED 
(
	[CompetitionPaymentID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionRegistration]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionRegistration](
	[CompetitionRegistrationID] [bigint] IDENTITY(1,1) NOT NULL,
	[CompanyName] [nvarchar](200) NULL,
	[CompanyCRNumber] [nvarchar](30) NULL,
	[AgencyName] [nvarchar](200) NULL,
	[AgencyCRNumber] [nvarchar](30) NULL,
	[NumberofECoupons] [bigint] NULL,
	[NumberofDraw] [bigint] NULL,
	[NumberofPrize] [bigint] NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[Questions] [bit] NULL,
	[Survey] [bit] NULL,
	[ScanCoupon] [bit] NULL,
	[StandardCoupons] [bit] NULL,
	[CustomersService] [bit] NULL,
	[CreatedBy] [bigint] NULL,
	[Createddate] [datetime] NULL,
	[ModifiedBy] [bigint] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_CompetitionRegistration] PRIMARY KEY CLUSTERED 
(
	[CompetitionRegistrationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionRegistrationDraws]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionRegistrationDraws](
	[CompetitionRegistrationDrawsID] [bigint] IDENTITY(1,1) NOT NULL,
	[DrawDate] [datetime] NULL,
	[NoOfWinners] [bigint] NULL,
	[CompetitionRegistrationID] [bigint] NULL,
	[CreatedBy] [bigint] NULL,
	[Createddate] [datetime] NULL,
	[ModifiedBy] [bigint] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_CompetitionRegistrationDraws] PRIMARY KEY CLUSTERED 
(
	[CompetitionRegistrationDrawsID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionServiceLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionServiceLanguages](
	[CompetitionServiceID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[Name] [nvarchar](1000) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionServices]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionServices](
	[CompetitionServiceID] [int] IDENTITY(1,1) NOT NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
	[IsDisplayAsService] [bit] NULL,
 CONSTRAINT [PK_coc_CompetitionServices] PRIMARY KEY CLUSTERED 
(
	[CompetitionServiceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionType_Participation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionType_Participation](
	[CompetitionTypeParticipationID] [int] IDENTITY(1,1) NOT NULL,
	[CompetitionParticipationTypeID] [int] NOT NULL,
	[CompetitionMethodTypeID] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_CompetitionType_Participation] PRIMARY KEY CLUSTERED 
(
	[CompetitionTypeParticipationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionType_Services]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionType_Services](
	[CompetitionTypeServiceID] [int] IDENTITY(1,1) NOT NULL,
	[CompetitionMethodTypeID] [int] NOT NULL,
	[CompetitionServiceID] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_CompetitionType_Services] PRIMARY KEY CLUSTERED 
(
	[CompetitionTypeServiceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionTypeLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionTypeLanguages](
	[CompetitionTypeID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[Name] [nvarchar](1000) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompetitionTypes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompetitionTypes](
	[CompetitionTypeID] [int] IDENTITY(1,1) NOT NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_CompetitionTypes] PRIMARY KEY CLUSTERED 
(
	[CompetitionTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CompleteCompetitionAudit]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CompleteCompetitionAudit](
	[CompetitionAuditID] [bigint] IDENTITY(1,1) NOT NULL,
	[EserviceID] [bigint] NOT NULL,
	[EcouponID] [bigint] NOT NULL,
	[EserviceXML] [xml] NOT NULL,
	[EserviceLanguagesXML] [xml] NOT NULL,
	[NotificationsXML] [xml] NULL,
	[ServiceKeysXML] [xml] NULL,
	[EServiceInvoicesXML] [xml] NULL,
	[ECouponsXML] [xml] NOT NULL,
	[EcouponlanguagesXML] [xml] NOT NULL,
	[ECouponOutletsXML] [xml] NULL,
	[ECouponStandardBarcodesXML] [xml] NULL,
	[ECouponPrizesXML] [xml] NULL,
	[ECouponPrizesLanguagesXML] [xml] NULL,
	[ECouponDrawsXML] [xml] NULL,
	[ECouponDrawLanguages] [xml] NULL,
	[ECouponDrawRetailOutletsXML] [xml] NULL,
	[ECouponDrawPrizesXML] [xml] NULL,
PRIMARY KEY CLUSTERED 
(
	[CompetitionAuditID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ConfigurationParticipations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ConfigurationParticipations](
	[ConfigurationParticipationsID] [bigint] IDENTITY(1,1) NOT NULL,
	[ColumnName] [nvarchar](200) NULL,
	[DisplayName] [nvarchar](200) NULL,
	[IsMandatory] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ConfigurationUploadParticipations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ConfigurationUploadParticipations](
	[ConfigurationParticipationsID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponID] [bigint] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[Mobile] [dbo].[Mobile] NULL,
	[EmailID] [dbo].[Email] NULL,
	[UploadDate] [datetime] NULL,
	[RefNo] [varchar](20) NULL,
	[Barcode] [nvarchar](100) NULL,
	[BarcodeEnc] [nvarchar](100) NULL,
	[ParticipationDate] [datetime] NULL,
	[Age] [int] NULL,
	[Gender] [int] NULL,
	[RetailOutletID] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ConsumerExclusions]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ConsumerExclusions](
	[ConsumerExclusionID] [int] IDENTITY(1,1) NOT NULL,
	[ConsumerID] [int] NULL,
	[PrimaryMobile] [dbo].[Mobile] NULL,
	[EmailID] [dbo].[Email] NULL,
	[FacebookID] [dbo].[Email] NULL,
	[TwitterID] [dbo].[Email] NULL,
	[OutlookID] [dbo].[Email] NULL,
	[YahooID] [dbo].[Email] NULL,
	[MembershipNumber] [dbo].[NullCode] NULL,
	[GmailID] [dbo].[Email] NULL,
	[IqamaNumber] [dbo].[NullCode] NULL,
	[ECouponID] [bigint] NULL,
	[CorporateID] [int] NULL,
	[datecreated] [datetime] NULL,
 CONSTRAINT [PK_ConsumerExclusions] PRIMARY KEY NONCLUSTERED 
(
	[ConsumerExclusionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [ClusteredIndex-20190708-214454]    Script Date: 07/11/2021 17:05:57 ******/
CREATE CLUSTERED INDEX [ClusteredIndex-20190708-214454] ON [dbo].[coc_ConsumerExclusions]
(
	[ConsumerID] ASC,
	[PrimaryMobile] ASC,
	[EmailID] ASC,
	[MembershipNumber] ASC,
	[IqamaNumber] ASC,
	[ECouponID] ASC,
	[CorporateID] ASC,
	[ConsumerExclusionID] ASC,
	[FacebookID] ASC,
	[TwitterID] ASC,
	[OutlookID] ASC,
	[YahooID] ASC,
	[GmailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ConsumerInterestedCities]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ConsumerInterestedCities](
	[ConsumerInterestedCityID] [int] IDENTITY(1,1) NOT NULL,
	[ConsumerID] [int] NOT NULL,
	[CityID] [int] NULL,
 CONSTRAINT [PK_ConsumerInterestedCities] PRIMARY KEY NONCLUSTERED 
(
	[ConsumerInterestedCityID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ConsumerNotifications]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ConsumerNotifications](
	[ConsumerNotificationID] [bigint] IDENTITY(1,1) NOT NULL,
	[NotificationSendID] [bigint] NOT NULL,
	[ConsumerID] [int] NOT NULL,
	[SendDate] [datetime] NOT NULL,
	[HasChecked] [bit] NOT NULL,
	[CheckedDate] [datetime] NULL,
	[ActionSource] [tinyint] NULL,
	[IsPushed] [bit] NOT NULL,
	[SendPushNotification] [bit] NULL,
	[PushNotified] [bit] NULL,
	[PushAction] [varchar](200) NULL,
 CONSTRAINT [PK_ConsumerNotification] PRIMARY KEY NONCLUSTERED 
(
	[ConsumerNotificationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [ClusteredIndex-20170220-120227]    Script Date: 07/11/2021 17:05:57 ******/
CREATE CLUSTERED INDEX [ClusteredIndex-20170220-120227] ON [dbo].[coc_ConsumerNotifications]
(
	[ConsumerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ConsumerPointDetails]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ConsumerPointDetails](
	[ConsumerPointDetailID] [int] IDENTITY(1,1) NOT NULL,
	[ConsumerID] [int] NOT NULL,
	[PointDate] [datetime] NOT NULL,
	[PointSource] [tinyint] NOT NULL,
	[LoyaltyPoint] [int] NULL,
	[RedeemPoint] [int] NULL,
	[ECouponID] [bigint] NULL,
 CONSTRAINT [PK_ConsumerPointDetails] PRIMARY KEY NONCLUSTERED 
(
	[ConsumerPointDetailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ConsumerProfileEdit]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ConsumerProfileEdit](
	[ConsumerID] [int] NOT NULL,
	[FirstName] [dbo].[Name] NULL,
	[SecondName] [dbo].[NullName] NULL,
	[FamilyName] [dbo].[NullName] NULL,
	[UserID] [int] NULL,
	[Gender] [smallint] NULL,
	[BirthDate] [datetime] NULL,
	[AgeGroupID] [int] NULL,
	[KnowECouponID] [int] NULL,
	[Address1] [dbo].[Address] NULL,
	[Address2] [dbo].[Address] NULL,
	[PrimaryMobile] [dbo].[Mobile] NULL,
	[SecondaryMobile] [dbo].[Mobile] NULL,
	[EmailID] [dbo].[Email] NULL,
	[FacebookID] [dbo].[Email] NULL,
	[CityID] [int] NULL,
	[CountryID] [int] NULL,
	[ImageFile] [dbo].[NullDescription] NULL,
	[IsVerified] [bit] NULL,
	[VerificationDate] [datetime] NULL,
	[IsActive] [bit] NULL,
	[AcceptedTerms] [bit] NULL,
	[HideApplicationTour] [bit] NULL,
	[IsFacebookUser] [bit] NULL,
	[LoyaltyPoint] [int] NULL,
	[RedeemPoint] [int] NULL,
	[BalancePoint]  AS ([LoyaltyPoint]-[RedeemPoint]),
	[NotificationCount] [int] NULL,
	[AddDate] [datetime] NULL,
	[EditDate] [datetime] NULL,
	[NationalityID] [int] NULL,
	[OtpID] [int] NULL,
	[IsTwitterUser] [bit] NULL,
	[IsGmailUser] [bit] NULL,
	[IsYahooUser] [bit] NULL,
	[IsOutlookUser] [bit] NULL,
	[TwitterID] [dbo].[Email] NULL,
	[OutlookID] [dbo].[Email] NULL,
	[YahooID] [dbo].[Email] NULL,
	[MembershipNumber] [dbo].[NullCode] NULL,
	[KnowECouponOthers] [dbo].[NullDescription] NULL,
	[GmailID] [dbo].[Email] NULL,
	[IqamaNumber] [dbo].[NullCode] NULL,
	[DeviceToken] [nvarchar](max) NULL,
	[ChannelName] [nvarchar](max) NULL,
	[AndroidDeviceToken] [nvarchar](max) NULL,
	[IsDeleted] [bit] NULL,
	[ThirdName] [nvarchar](200) NULL,
	[OccupationID] [int] NULL,
	[JobNumber] [nvarchar](50) NULL,
	[Organization] [nvarchar](150) NULL,
	[MaritalStatusID] [int] NULL,
	[FamilyMember] [nvarchar](50) NULL,
	[IsFromCompetitionLink] [bit] NULL,
	[ECouponID] [bigint] NULL,
	[IsMobileVerified] [bit] NULL,
	[IsEmailVerified] [bit] NULL,
	[AdminAttachFile] [nvarchar](500) NULL,
	[AdminRemarks] [nvarchar](max) NULL,
	[FullName] [nvarchar](200) NULL,
	[APIKEY] [nvarchar](200) NULL,
	[StatusID] [int] NULL,
	[UserIdentityTypeID] [int] NULL,
	[UserIdentityNumber] [nvarchar](100) NULL,
	[UpdatedBy] [int] NULL,
	[ConsumerStatus] [int] NULL,
UNIQUE NONCLUSTERED 
(
	[ConsumerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ConsumerRedemptions]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ConsumerRedemptions](
	[ConsumerRedemptionID] [int] IDENTITY(1,1) NOT NULL,
	[RedemptionCode] [dbo].[Code] NOT NULL,
	[ConsumerID] [int] NOT NULL,
	[RedemptionPlanID] [int] NOT NULL,
	[RetailOutletID] [int] NOT NULL,
	[RedemptionDate] [datetime] NOT NULL,
	[Remarks] [dbo].[Remark] NULL,
	[OtpID] [int] NULL,
	[IsVerified] [bit] NOT NULL,
	[VerificationDate] [datetime] NULL,
	[VerificationUserID] [int] NULL,
 CONSTRAINT [PK_ConsumerRedemptions] PRIMARY KEY NONCLUSTERED 
(
	[ConsumerRedemptionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Consumers_Audit]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Consumers_Audit](
	[ConsumerID] [int] NOT NULL,
	[FirstName] [dbo].[Name] NOT NULL,
	[SecondName] [dbo].[NullName] NULL,
	[FamilyName] [dbo].[NullName] NULL,
	[UserID] [int] NULL,
	[Gender] [smallint] NULL,
	[BirthDate] [datetime] NULL,
	[AgeGroupID] [int] NULL,
	[KnowECouponID] [int] NULL,
	[Address1] [dbo].[Address] NULL,
	[Address2] [dbo].[Address] NULL,
	[PrimaryMobile] [dbo].[Mobile] NULL,
	[SecondaryMobile] [dbo].[Mobile] NULL,
	[EmailID] [dbo].[Email] NULL,
	[FacebookID] [dbo].[Email] NULL,
	[CityID] [int] NULL,
	[CountryID] [int] NULL,
	[ImageFile] [dbo].[NullDescription] NULL,
	[IsVerified] [bit] NOT NULL,
	[VerificationDate] [datetime] NULL,
	[IsActive] [bit] NOT NULL,
	[AcceptedTerms] [bit] NOT NULL,
	[HideApplicationTour] [bit] NOT NULL,
	[IsFacebookUser] [bit] NOT NULL,
	[LoyaltyPoint] [int] NOT NULL,
	[RedeemPoint] [int] NOT NULL,
	[BalancePoint]  AS ([LoyaltyPoint]-[RedeemPoint]),
	[NotificationCount] [int] NULL,
	[AddDate] [datetime] NOT NULL,
	[EditDate] [datetime] NULL,
	[NationalityID] [int] NULL,
	[OtpID] [int] NULL,
	[IsTwitterUser] [bit] NOT NULL,
	[IsGmailUser] [bit] NOT NULL,
	[IsYahooUser] [bit] NOT NULL,
	[IsOutlookUser] [bit] NOT NULL,
	[TwitterID] [dbo].[Email] NULL,
	[OutlookID] [dbo].[Email] NULL,
	[YahooID] [dbo].[Email] NULL,
	[MembershipNumber] [dbo].[NullCode] NULL,
	[KnowECouponOthers] [dbo].[NullDescription] NULL,
	[GmailID] [dbo].[Email] NULL,
	[IqamaNumber] [dbo].[NullCode] NULL,
	[DeviceToken] [nvarchar](max) NULL,
	[ChannelName] [nvarchar](max) NULL,
	[AndroidDeviceToken] [nvarchar](max) NULL,
	[IsDeleted] [bit] NOT NULL,
	[ThirdName] [nvarchar](200) NULL,
	[OccupationID] [int] NULL,
	[JobNumber] [nvarchar](50) NULL,
	[Organization] [nvarchar](150) NULL,
	[MaritalStatusID] [int] NULL,
	[FamilyMember] [nvarchar](50) NULL,
	[IsFromCompetitionLink] [bit] NULL,
	[ECouponID] [bigint] NULL,
	[IsMobileVerified] [bit] NULL,
	[IsEmailVerified] [bit] NULL,
	[AdminAttachFile] [nvarchar](500) NULL,
	[AdminRemarks] [nvarchar](max) NULL,
	[FullName] [nvarchar](200) NULL,
	[APIKEY] [nvarchar](200) NULL,
	[LogDateTime] [datetime] NULL,
	[UserAction] [nvarchar](200) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ConsumersUpdateLog]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ConsumersUpdateLog](
	[ConsumersUpdateLogID] [bigint] IDENTITY(1,1) NOT NULL,
	[ConsumerID] [int] NOT NULL,
	[UnverifedEmailID] [dbo].[Email] NULL,
	[UnverifiedPrimaryMobile] [dbo].[Mobile] NULL,
	[PreviousEmailID] [dbo].[Email] NULL,
	[PreviousPrimaryMobile] [dbo].[Mobile] NULL,
	[IsEmailVerified] [bit] NULL,
	[IsMobileVerified] [bit] NULL,
	[AddedBy] [int] NULL,
	[AddedDate] [datetime] NULL,
	[VerifiedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_ConsumersUpdateLog] PRIMARY KEY CLUSTERED 
(
	[ConsumersUpdateLogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ContactChanges]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ContactChanges](
	[ContactChangeID] [bigint] IDENTITY(1,1) NOT NULL,
	[ConsumerID] [int] NULL,
	[MobileChange] [bit] NOT NULL,
	[EmailChange] [bit] NOT NULL,
	[RequestTime] [datetime] NOT NULL,
	[MobileOtpID] [int] NULL,
	[EmailOtpID] [int] NULL,
	[IsVerified] [bit] NOT NULL,
	[VerificationTime] [datetime] NULL,
	[UserID] [int] NULL,
 CONSTRAINT [PK_MobileChanges] PRIMARY KEY NONCLUSTERED 
(
	[ContactChangeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ContentItemLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ContentItemLanguages](
	[ContentItemID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[ContentItem] [nvarchar](max) NOT NULL,
	[DisplayOrder] [int] NULL,
 CONSTRAINT [PK_ContentItemLanguages] PRIMARY KEY CLUSTERED 
(
	[ContentItemID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ContentItems]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ContentItems](
	[ContentItemID] [int] NOT NULL,
	[ContentItemTypeID] [int] NULL,
	[IsActive] [bit] NOT NULL,
	[ParentContentItemID] [int] NULL,
	[DisplayOrder] [int] NULL,
 CONSTRAINT [PK_ContentItems] PRIMARY KEY NONCLUSTERED 
(
	[ContentItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_core_ApplyPromoCodeLogs]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_core_ApplyPromoCodeLogs](
	[PromoCodeLogID] [bigint] IDENTITY(1,1) NOT NULL,
	[PromoCodeID] [bigint] NOT NULL,
	[ConsumerID] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
 CONSTRAINT [PK_coc_core_ApplyPromoCodeLogs] PRIMARY KEY CLUSTERED 
(
	[PromoCodeLogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_core_Category]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_core_Category](
	[CategoryID] [int] IDENTITY(1,1) NOT NULL,
	[CategoryName] [nvarchar](150) NOT NULL,
	[CategoryNameAR] [nvarchar](150) NOT NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_core_Category] PRIMARY KEY CLUSTERED 
(
	[CategoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Core_ConsumerStatus]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Core_ConsumerStatus](
	[ConsumerStatusID] [int] IDENTITY(1,1) NOT NULL,
	[StatusEnglish] [nvarchar](100) NULL,
	[StatusArabic] [nvarchar](100) NULL,
	[IsActive] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[Type] [smallint] NULL,
 CONSTRAINT [PK_coc_Core_ConsumerStatus] PRIMARY KEY CLUSTERED 
(
	[ConsumerStatusID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Coc_Core_DynamicLinkQAOptions]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Coc_Core_DynamicLinkQAOptions](
	[DynamicLinkAnswerID] [bigint] IDENTITY(1,1) NOT NULL,
	[DynamicLinkQAID] [bigint] NOT NULL,
	[QAOption] [nvarchar](1000) NOT NULL,
	[QAOptionAR] [nvarchar](1000) NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [bigint] NOT NULL,
	[UpdateOn] [datetime] NULL,
	[UpdatedBy] [bigint] NULL,
 CONSTRAINT [PK_Coc_Core_DynamicLinkQAOptions] PRIMARY KEY CLUSTERED 
(
	[DynamicLinkAnswerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Coc_Core_DynamicLinkQuestions]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Coc_Core_DynamicLinkQuestions](
	[DynamicLinkQAID] [bigint] IDENTITY(1,1) NOT NULL,
	[DynamicLinkID] [bigint] NOT NULL,
	[Question] [nvarchar](1000) NULL,
	[QuestionAR] [nvarchar](1000) NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [bigint] NOT NULL,
	[UpdateOn] [datetime] NULL,
	[UpdatedBy] [bigint] NULL,
 CONSTRAINT [PK_Coc_Core_DynamicLinkQuestions] PRIMARY KEY CLUSTERED 
(
	[DynamicLinkQAID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Coc_Core_DynamicLinks]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Coc_Core_DynamicLinks](
	[DynamicLinkID] [bigint] IDENTITY(1,1) NOT NULL,
	[LinkName] [nvarchar](150) NULL,
	[EcouponID] [bigint] NULL,
	[RetailoutletID] [int] NULL,
	[BackgroundImage] [nvarchar](200) NULL,
	[ModalPopupLogo] [nvarchar](200) NULL,
	[ModalContentBackgroundImage] [nvarchar](200) NULL,
	[Style] [nvarchar](max) NULL,
	[CompetitionImage] [nvarchar](200) NULL,
	[IsActive] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [bigint] NULL,
	[UpdateOn] [datetime] NULL,
	[UpdatedBy] [bigint] NULL,
	[CompetitionType] [int] NULL,
	[AutoParticipation] [bit] NULL,
	[VoucherPackageID] [bigint] NULL,
	[SocialMediaID] [int] NULL,
 CONSTRAINT [PK_Coc_Core_DynamicLinks] PRIMARY KEY CLUSTERED 
(
	[DynamicLinkID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_core_ECouponIntegralShoppers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_core_ECouponIntegralShoppers](
	[ECouponIntegralShopperID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponID] [bigint] NULL,
	[BaseURL] [nvarchar](1000) NULL,
	[ConsumerPlayGameCount] [int] NULL,
	[GuestPlayGameCount] [int] NULL,
	[ShowOnMobile] [bit] NULL,
	[ShowOnWeb] [bit] NULL,
	[AllowToPlayMultipleTimes] [bit] NULL,
	[StandardBarcodeIsRequriedAllTheTime] [bit] NULL,
	[CreatedBy] [bigint] NULL,
	[CreatedOn] [datetime] NULL,
	[UpdatedBy] [bigint] NULL,
	[UpdatedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[PrivateKey] [nvarchar](1000) NULL,
 CONSTRAINT [PK_coc_core_ECouponIntegralShoppers] PRIMARY KEY CLUSTERED 
(
	[ECouponIntegralShopperID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_core_EmailTemplates]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_core_EmailTemplates](
	[EmailTemplateID] [int] IDENTITY(1,1) NOT NULL,
	[Subject] [nvarchar](max) NOT NULL,
	[EmailBody] [text] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[UpdatedOn] [datetime] NULL,
	[UpdatedBy] [int] NULL,
 CONSTRAINT [PK_coc_core_EmailTemplates] PRIMARY KEY CLUSTERED 
(
	[EmailTemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_core_EVoucherCategories]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_core_EVoucherCategories](
	[EVoucherCategoryID] [bigint] IDENTITY(1,1) NOT NULL,
	[EVoucherID] [int] NOT NULL,
	[CategoryID] [int] NOT NULL,
	[ImageName] [nvarchar](100) NULL,
	[Discount] [decimal](18, 2) NOT NULL,
	[Description] [nvarchar](2000) NULL,
	[DescriptionAr] [nvarchar](2000) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL,
 CONSTRAINT [PK_coc_core_EVoucherCategories] PRIMARY KEY CLUSTERED 
(
	[EVoucherCategoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_core_IntegralShopperParameters]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_core_IntegralShopperParameters](
	[IntegralShopperParamterID] [int] IDENTITY(1,1) NOT NULL,
	[ECouponIntegralShopperID] [bigint] NULL,
	[ParameterName] [nvarchar](150) NULL,
	[ParameterValue] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NULL,
	[UpdatedOn] [datetime] NULL,
	[CreatedBy] [bigint] NULL,
	[UpdatedBy] [bigint] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_coc_core_IntegralShopperParameters] PRIMARY KEY CLUSTERED 
(
	[IntegralShopperParamterID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_core_MobileServiceReferenceLog]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_core_MobileServiceReferenceLog](
	[ReferenceID] [bigint] IDENTITY(1,1) NOT NULL,
	[ReferenceNumber] [nvarchar](50) NULL,
	[ControllerName] [nvarchar](500) NULL,
	[ActionName] [nvarchar](500) NULL,
	[CreatedOn] [datetime] NULL,
	[RequestBody] [nvarchar](max) NULL,
 CONSTRAINT [PK_coc_core_MobileServiceReferenceLog] PRIMARY KEY CLUSTERED 
(
	[ReferenceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_core_NewsLetterSubscription]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_core_NewsLetterSubscription](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[EmailId] [nvarchar](255) NOT NULL,
	[SubscribeDate] [datetime] NOT NULL,
	[IsVerified] [bit] NULL,
	[SubscribeStatus] [nvarchar](20) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Core_ProfileReportsColumns]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Core_ProfileReportsColumns](
	[ProfileID] [int] IDENTITY(1,1) NOT NULL,
	[ProfileName] [varchar](100) NULL,
	[UserID] [int] NULL,
	[ReportID] [int] NULL,
	[ColumnName] [nvarchar](max) NULL,
	[CreatedDate] [datetime] NULL,
	[UpdateDate] [datetime] NULL,
	[UpdatedUserId] [int] NULL,
	[RoleID] [int] NULL,
	[IsDefault] [int] NULL,
	[IsSystem] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[ProfileID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_core_PromoCodeBundle]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_core_PromoCodeBundle](
	[PromoCodeBundleID] [bigint] IDENTITY(1,1) NOT NULL,
	[CategoryID] [int] NOT NULL,
	[PromoCodeCount] [int] NOT NULL,
	[FileName] [nvarchar](150) NULL,
	[IsDownloaded] [bit] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[DownloadedDate] [datetime] NULL,
	[Status] [int] NULL,
 CONSTRAINT [PK_coc_core_PromoCodeBundle] PRIMARY KEY CLUSTERED 
(
	[PromoCodeBundleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_core_promocodes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_core_promocodes](
	[PromoCodeID] [bigint] IDENTITY(1,1) NOT NULL,
	[PromoCodeBundleID] [bigint] NOT NULL,
	[CategoryID] [int] NOT NULL,
	[PromoCode] [dbo].[NullDescription] NOT NULL,
	[ConsumerID] [int] NULL,
	[PrimaryMobile] [dbo].[Mobile] NULL,
	[EmailID] [dbo].[Email] NULL,
	[IsUsed] [bit] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[UsedDate] [datetime] NULL,
	[ExpiryDate] [datetime] NULL,
 CONSTRAINT [PK_coc_core_promocodes] PRIMARY KEY CLUSTERED 
(
	[PromoCodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_core_RetailoutletDistanceCalculationAudit]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_core_RetailoutletDistanceCalculationAudit](
	[RetailoutletDistanceCalculationID] [bigint] IDENTITY(1,1) NOT NULL,
	[ConsumerID] [int] NULL,
	[ECouponID] [int] NULL,
	[EServiceID] [int] NULL,
	[DeviceSource] [nvarchar](200) NULL,
	[Latitude] [nvarchar](200) NULL,
	[Longitude] [nvarchar](200) NULL,
	[MacAddress] [nvarchar](200) NULL,
	[CalculatedDistance] [decimal](18, 2) NULL,
	[RetailoutletID] [int] NULL,
	[ProximityRadiusValue] [decimal](18, 2) NULL,
	[GUID] [nvarchar](100) NULL,
	[Status] [int] NULL,
	[Description] [nvarchar](500) NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK_coc_core_RetailoutletDistanceCalculationAduit] PRIMARY KEY CLUSTERED 
(
	[RetailoutletDistanceCalculationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[COC_CORE_UploadExternalBarcodeAudit]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[COC_CORE_UploadExternalBarcodeAudit](
	[UploadExternalBarcodeAuditID] [int] IDENTITY(1,1) NOT NULL,
	[ExcelFileName] [nvarchar](200) NULL,
	[UploadOn] [datetime] NULL,
	[NumberOfRecordsInExcel] [int] NULL,
	[NumberOfRecordsSavedToDB] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[UploadExternalBarcodeAuditID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_core_UserIdentityTypes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_core_UserIdentityTypes](
	[UserIdentityTypeID] [int] IDENTITY(1,1) NOT NULL,
	[UserIdentityName_EN] [varchar](100) NULL,
	[UserIdentityName_AR] [nvarchar](100) NULL,
	[RegularExpression] [nvarchar](500) NULL,
	[IsActive] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[UpdatedOn] [datetime] NULL,
 CONSTRAINT [PK_coc_core_UserIdentityTypes] PRIMARY KEY CLUSTERED 
(
	[UserIdentityTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_core_VGP_Distributions]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_core_VGP_Distributions](
	[VGPDistributionsID] [bigint] IDENTITY(1,1) NOT NULL,
	[VoucherPackageID] [bigint] NULL,
	[ConsumerID] [int] NULL,
	[DistributionDate] [datetime] NULL,
	[VoucherID] [bigint] NULL,
	[EServiceBarcodeID] [bigint] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [bigint] NULL,
	[UpdatedOn] [datetime] NULL,
	[UpdatedBy] [bigint] NULL,
 CONSTRAINT [PK_coc_core_VGP_Distributions] PRIMARY KEY CLUSTERED 
(
	[VGPDistributionsID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_core_VGP_RefferalCodes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_core_VGP_RefferalCodes](
	[RefferalCodeID] [bigint] IDENTITY(1,1) NOT NULL,
	[RefferalCode] [nvarchar](50) NOT NULL,
	[VoucherPackageID] [bigint] NOT NULL,
	[VGPDistributionsID] [bigint] NULL,
	[CreatedBy] [bigint] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedBy] [bigint] NULL,
	[UpdatedOn] [datetime] NULL,
 CONSTRAINT [PK_coc_core_VGP_RefferalCodes] PRIMARY KEY CLUSTERED 
(
	[RefferalCodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_core_VGP_Vouchers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_core_VGP_Vouchers](
	[VGPVoucherID] [bigint] IDENTITY(1,1) NOT NULL,
	[VoucherPackageID] [bigint] NULL,
	[VoucherID] [bigint] NULL,
	[NumberOfVouchers] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [bigint] NULL,
	[UpdatedOn] [datetime] NULL,
	[UpdatedBy] [bigint] NULL,
 CONSTRAINT [PK_coc_core_VGP_Vouchers] PRIMARY KEY CLUSTERED 
(
	[VGPVoucherID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_core_Voucher_Gift_Package]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_core_Voucher_Gift_Package](
	[VoucherPackageID] [bigint] IDENTITY(1,1) NOT NULL,
	[VoucherPackageName] [nvarchar](500) NULL,
	[VoucherPackageNameAr] [nvarchar](500) NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[IsActive] [bit] NULL,
	[URL] [nvarchar](550) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [bigint] NULL,
	[UpdatedOn] [datetime] NULL,
	[UpdatedBy] [bigint] NULL,
	[ImageName] [nvarchar](250) NULL,
	[ApplyRefferalCode] [bit] NULL,
	[CssCode] [nvarchar](1000) NULL,
	[VoucherPackageLogo] [nvarchar](250) NULL,
	[ButtonColorCode] [nvarchar](100) NULL,
	[CustomCssCode] [nvarchar](1000) NULL,
 CONSTRAINT [PK_coc_core_Voucher_Gift_Package] PRIMARY KEY CLUSTERED 
(
	[VoucherPackageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_core_WebNotifications]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_core_WebNotifications](
	[WebNotificationID] [bigint] IDENTITY(1,1) NOT NULL,
	[WebNotificationDate] [datetime] NOT NULL,
	[WebNotificationTypeID] [int] NOT NULL,
	[RedirectionLink] [nvarchar](500) NULL,
	[ParamValue] [bigint] NULL,
	[AssignedToAdmin] [bit] NULL,
	[AssignedToCorporateID] [int] NULL,
	[IsRead] [bit] NULL,
	[ReadOn] [datetime] NULL,
	[ReadByUserID] [int] NULL,
	[IsCompleted] [bit] NULL,
	[IsHide] [bit] NULL,
	[NotificationFor] [nvarchar](100) NULL,
	[RequestedByUser] [bigint] NULL,
	[RequestedByUserID] [bigint] NULL,
PRIMARY KEY CLUSTERED 
(
	[WebNotificationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CorporateAPIUser]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CorporateAPIUser](
	[CorporateAPIUserID] [int] IDENTITY(1,1) NOT NULL,
	[APIKey] [nvarchar](200) NOT NULL,
	[Password] [nvarchar](100) NOT NULL,
	[CorporateID] [int] NULL,
	[IsActive] [bit] NULL,
	[CreatedBy] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_CorporateAPIUser] PRIMARY KEY CLUSTERED 
(
	[CorporateAPIUserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Corporates_log]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Corporates_log](
	[CorporateLogID] [int] IDENTITY(1,1) NOT NULL,
	[CorporateID] [int] NULL,
	[DateOfActivation] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[CorporateLogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Corporates_Temp]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Corporates_Temp](
	[CorporateID] [int] NOT NULL,
	[JCCICode] [dbo].[Code] NOT NULL,
	[CRNumber] [dbo].[NullCode] NULL,
	[EmailID] [dbo].[Email] NULL,
	[MobileNumber] [dbo].[Mobile] NULL,
	[UserID] [int] NULL,
	[BarcodePrefix] [char](4) NULL,
	[BarcodeSuffix] [char](4) NULL,
	[BarcodeLength] [tinyint] NULL,
	[BarcodeTypeID] [int] NULL,
	[IsActive] [bit] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[LicenseExpiryDate] [datetime] NOT NULL,
	[CRDocumentFile] [dbo].[NullDescription] NULL,
	[IDSponsorFile] [dbo].[NullDescription] NULL,
	[LogoFile] [dbo].[NullDescription] NULL,
	[FirstName] [dbo].[NullName] NULL,
	[MiddleName] [dbo].[NullName] NULL,
	[LastName] [dbo].[NullName] NULL,
	[CountryID] [int] NULL,
	[CityID] [int] NULL,
	[Address1] [dbo].[Address] NULL,
	[PhoneNumber] [dbo].[Mobile] NULL,
	[FaxNumber] [dbo].[Mobile] NULL,
	[Password] [nvarchar](1) NULL,
	[IsEmailCommunication] [bit] NOT NULL,
	[IsSMSCommunication] [bit] NULL,
	[IsMobileCommunication] [bit] NULL,
	[CanContactMorning] [bit] NULL,
	[CanContactEvening] [bit] NULL,
	[NewsLetterNotification] [bit] NULL,
	[PromotionNotification] [bit] NULL,
	[IsVerified] [bit] NULL,
	[CorporateName] [dbo].[NullDescription] NULL,
	[MerchantCode] [dbo].[NullDescription] NULL,
	[CorporateType] [int] NULL,
	[CorporateNameAR] [dbo].[NullDescription] NULL,
	[VATNo] [varchar](25) NULL,
 CONSTRAINT [PK_Corporates_Temp] PRIMARY KEY NONCLUSTERED 
(
	[CorporateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_CorporateUsers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_CorporateUsers](
	[CorporateUserID] [int] IDENTITY(1,1) NOT NULL,
	[CorporateNumber] [dbo].[NullCode] NULL,
	[EmployeeName] [dbo].[Name] NOT NULL,
	[UserID] [int] NULL,
	[CorporateID] [int] NOT NULL,
	[RetailOutletID] [int] NULL,
	[MobileNumber] [dbo].[Mobile] NULL,
	[EmailID] [dbo].[Email] NULL,
	[AllowRedeeming] [bit] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
 CONSTRAINT [PK_CorporateUsers] PRIMARY KEY NONCLUSTERED 
(
	[CorporateUserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Countries]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Countries](
	[CountryID] [int] NOT NULL,
	[CountryCode] [dbo].[Code] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[TelephoneCode] [varchar](200) NULL,
	[DisplayOrder] [int] NULL,
	[AllowRegistration] [bit] NULL,
	[ValidationExpression] [nvarchar](max) NULL,
	[FlagImage] [nvarchar](200) NULL,
	[ISOCode] [nvarchar](10) NULL,
	[MobileNumberLength] [int] NULL,
	[PlaceHolderCode] [nvarchar](20) NULL,
	[ISOThreeCharCode] [nvarchar](3) NULL,
	[Currency] [nvarchar](10) NULL,
 CONSTRAINT [PK_Countries] PRIMARY KEY NONCLUSTERED 
(
	[CountryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Currency]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Currency](
	[CurrencyId] [bigint] IDENTITY(1,1) NOT NULL,
	[CurrencySymbol_EN] [varchar](10) NOT NULL,
	[CurrencySymbol_AR] [nvarchar](50) NULL,
	[CurrencyName] [varchar](100) NOT NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK_coc_Currency] PRIMARY KEY CLUSTERED 
(
	[CurrencyId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_DistributePrivateVoucherExcelAudit]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_DistributePrivateVoucherExcelAudit](
	[AuditID] [int] IDENTITY(1,1) NOT NULL,
	[FileName] [nvarchar](500) NOT NULL,
	[Status] [int] NOT NULL,
	[NoOfRecordsInExcel] [int] NULL,
	[NoOfRecordsUploaded] [int] NULL,
	[NoOfRecordsProcessed] [int] NULL,
	[UploadedBy] [int] NULL,
	[UploadedDate] [datetime] NOT NULL,
	[UploadedFileName] [nvarchar](500) NOT NULL,
	[CorporateID] [int] NULL,
	[UploadType] [int] NULL,
	[MandatoryFieldID] [int] NULL,
 CONSTRAINT [PK_coc_DistributePrivateVoucherExcelAudit] PRIMARY KEY CLUSTERED 
(
	[AuditID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_DistributePrivateVouchers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_DistributePrivateVouchers](
	[DistributeVoucherID] [bigint] IDENTITY(1,1) NOT NULL,
	[EVoucherID] [int] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[Mobile] [dbo].[Mobile] NULL,
	[EmailID] [dbo].[Email] NULL,
	[UploadDate] [datetime] NULL,
	[ConsumerID] [int] NULL,
	[GuestID] [int] NULL,
	[AuditID] [int] NULL,
	[EServiceBarcodeID] [bigint] NULL,
	[ECouponWinnerID] [int] NULL,
	[Message] [nvarchar](250) NULL,
 CONSTRAINT [PK_coc_DistributePrivateVouchers] PRIMARY KEY CLUSTERED 
(
	[DistributeVoucherID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_DrawNameLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_DrawNameLanguages](
	[DrawID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[Name] [nvarchar](200) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_DrawNames]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_DrawNames](
	[DrawID] [int] IDENTITY(1,1) NOT NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
 CONSTRAINT [PK_coc_DrawNames] PRIMARY KEY CLUSTERED 
(
	[DrawID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[COC_DropDownValues]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[COC_DropDownValues](
	[DropDownValueID] [bigint] IDENTITY(1,1) NOT NULL,
	[DropDownType] [int] NULL,
	[DropDownTypeName] [nvarchar](50) NULL,
	[DataValueField] [int] NULL,
	[DataTextField_EN] [nvarchar](150) NULL,
	[DataTextField_AR] [nvarchar](150) NULL,
	[IsActive] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [bigint] NULL,
 CONSTRAINT [PK_COC_DropDownValues] PRIMARY KEY CLUSTERED 
(
	[DropDownValueID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_DynamicCompetition]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_DynamicCompetition](
	[DynamicCompetitionID] [bigint] IDENTITY(1,1) NOT NULL,
	[CompetitionName] [nvarchar](50) NULL,
	[ECouponID] [bigint] NOT NULL,
	[RetailOutletID] [int] NULL,
	[BackgroundCss] [nvarchar](max) NULL,
	[ForegroundCss] [nvarchar](max) NULL,
	[Description] [nvarchar](50) NULL,
	[IsActive] [bit] NULL,
	[CreatedBy] [bigint] NULL,
	[CreatedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_DynamicCompetition] PRIMARY KEY CLUSTERED 
(
	[DynamicCompetitionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_coc_DynamicCompetition] UNIQUE NONCLUSTERED 
(
	[CompetitionName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EBundle]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EBundle](
	[EBundleID] [int] IDENTITY(1,1) NOT NULL,
	[Description] [nvarchar](1000) NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[EditDate] [datetime] NULL,
	[CreatedUserID] [int] NOT NULL,
	[EditedUserID] [int] NULL,
	[IsActive] [bit] NOT NULL,
	[MaxNumberOfVouchersPerCustomer] [int] NULL,
	[MaxNumberOfVouchersPerCustomerPerDay] [int] NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[EBundleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EBundleLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EBundleLanguages](
	[EBundleLanguagesID] [int] IDENTITY(1,1) NOT NULL,
	[EBundleID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[ResourceKey] [varchar](100) NULL,
	[ResourceValue] [nvarchar](1000) NULL,
PRIMARY KEY CLUSTERED 
(
	[EBundleLanguagesID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponDraw]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponDraw](
	[ECouponDrawID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponID] [bigint] NOT NULL,
	[DrawDate] [datetime] NOT NULL,
	[Location] [nvarchar](500) NULL,
	[RetailOutlets] [nvarchar](300) NULL,
	[Latitude] [varchar](20) NULL,
	[Longitude] [varchar](20) NULL,
	[LocationURL] [varchar](250) NULL,
	[IsDisable] [bit] NULL,
 CONSTRAINT [PK_coc_ECouponDraw] PRIMARY KEY CLUSTERED 
(
	[ECouponDrawID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponDrawLanguage]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponDrawLanguage](
	[ECouponDrawID] [bigint] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[Name] [nvarchar](300) NULL,
 CONSTRAINT [PK_coc_ECouponDrawLanguage] PRIMARY KEY CLUSTERED 
(
	[ECouponDrawID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponDrawLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponDrawLanguages](
	[ECouponDrawLanguageID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponDrawID] [bigint] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[ResourceKey] [nvarchar](100) NOT NULL,
	[Value] [nvarchar](300) NULL,
 CONSTRAINT [PK_coc_ECouponDrawLanguages] PRIMARY KEY CLUSTERED 
(
	[ECouponDrawLanguageID] ASC,
	[LanguageID] ASC,
	[ResourceKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponDrawPrizes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponDrawPrizes](
	[ECouponDrawPrizeID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponPrizeID] [bigint] NULL,
	[ECouponDrawID] [bigint] NULL,
	[Frequency] [int] NOT NULL,
	[RetailOutlets] [nvarchar](2000) NULL,
 CONSTRAINT [PK_coc_ECouponDrawPrizes] PRIMARY KEY CLUSTERED 
(
	[ECouponDrawPrizeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponDrawRetailOutlets]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponDrawRetailOutlets](
	[ECoponDrawRetailOutletID] [int] IDENTITY(1,1) NOT NULL,
	[ECoponDrawID] [int] NULL,
	[RetailOutletID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[ECoponDrawRetailOutletID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponDrawRetailOutlets_Audit]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponDrawRetailOutlets_Audit](
	[AuditID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECoponDrawRetailOutletID] [int] NOT NULL,
	[ECoponDrawID] [int] NULL,
	[RetailOutletID] [int] NULL,
	[LogBy] [int] NULL,
	[LogDateTime] [datetime] NULL,
	[UserAction] [nvarchar](20) NULL,
PRIMARY KEY CLUSTERED 
(
	[AuditID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponDrawRetailOutlets_bak]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponDrawRetailOutlets_bak](
	[ECoponDrawRetailOutletID] [int] IDENTITY(1,1) NOT NULL,
	[ECoponDrawID] [int] NULL,
	[RetailOutletID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[ECoponDrawRetailOutletID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponHelp]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponHelp](
	[HelpID] [int] IDENTITY(1,1) NOT NULL,
	[PageNo] [int] NOT NULL,
	[LanguageId] [int] NOT NULL,
	[Content] [nvarchar](1000) NOT NULL,
	[Remarks] [nvarchar](1000) NULL,
PRIMARY KEY CLUSTERED 
(
	[HelpID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponInvoiceDetails]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponInvoiceDetails](
	[ECouponInvoiceDetailID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponInvoiceID] [bigint] NOT NULL,
	[InvoiceNumber] [dbo].[Code] NOT NULL,
	[InvoiceDate] [datetime] NOT NULL,
	[InvoiceAmount] [dbo].[Amount] NOT NULL,
	[Remarks] [dbo].[Remark] NULL,
	[EligibleCoupons] [int] NOT NULL,
	[MaxCoupons] [int] NOT NULL,
	[AssignedCoupons] [int] NOT NULL,
 CONSTRAINT [PK_ECouponInvoiceDetails] PRIMARY KEY NONCLUSTERED 
(
	[ECouponInvoiceDetailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponInvoices]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponInvoices](
	[ECouponInvoiceID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponID] [bigint] NOT NULL,
	[InvoiceDate] [datetime] NOT NULL,
	[IsMember] [bit] NOT NULL,
	[MobileNumber] [dbo].[Mobile] NULL,
	[ConsumerID] [int] NULL,
	[EligibleCoupons] [int] NOT NULL,
	[AssignedCoupons] [int] NOT NULL,
	[UsesTerm] [dbo].[Remark] NULL,
	[IsAccept] [bit] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
 CONSTRAINT [PK_ECouponInvoices] PRIMARY KEY NONCLUSTERED 
(
	[ECouponInvoiceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponLanguages](
	[ECouponID] [bigint] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[UsesTerm] [dbo].[RemarkBig] NULL,
	[ECouponTemplate] [dbo].[RemarkBig] NULL,
	[Description] [nvarchar](1000) NULL,
	[ResourceKey] [varchar](100) NULL,
	[Value] [nvarchar](1000) NULL,
	[Location] [nvarchar](150) NULL,
 CONSTRAINT [PK_ECouponLanguages] PRIMARY KEY CLUSTERED 
(
	[ECouponID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponOutlets]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponOutlets](
	[ECouponOutletID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponID] [bigint] NOT NULL,
	[RetailOutletID] [int] NOT NULL,
	[TotalAllowedParticipationPerCustomer] [int] NULL,
	[TotalAllowedParticipationPerCustomerPerDay] [int] NULL,
	[TotalAllowedParticipationPerGuest] [int] NULL,
	[TotalAllowedParticipationPerGuestPerDay] [int] NULL,
	[AllowedParticipationByKiosk] [bit] NULL,
	[AllowedParticipationPerAttemptInKiosk] [int] NULL,
	[StandardBarcodePrefix] [varchar](2) NULL,
	[IsActive] [bit] NULL,
	[AddDate] [datetime] NULL,
	[AddUserID] [int] NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[TotalAllowedParticipationinOutlet] [int] NULL,
	[TotalAllowedParticipationPerBarcode] [int] NULL,
	[TotalAllowedParticipationPerBarcodePerDay] [int] NULL,
	[APIParticipationLimit] [int] NULL,
 CONSTRAINT [PK_ECouponOutlets] PRIMARY KEY NONCLUSTERED 
(
	[ECouponOutletID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponParticipationAnswers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponParticipationAnswers](
	[ECouponParticipationAnswersID] [bigint] IDENTITY(1,1) NOT NULL,
	[QuestionBankID] [int] NOT NULL,
	[QuestionOptionID] [int] NULL,
	[AnswerRank] [int] NULL,
	[AnswerValue] [varchar](100) NULL,
	[ECouponParticipationID] [bigint] NULL,
 CONSTRAINT [PK_ECouponParticipationAnswers] PRIMARY KEY NONCLUSTERED 
(
	[ECouponParticipationAnswersID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponParticipationByExternalBarcode]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponParticipationByExternalBarcode](
	[ExternalParticipationID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponParticipationID] [int] NULL,
	[ECouponID] [bigint] NOT NULL,
	[ParticipationDate] [datetime] NOT NULL,
	[EnteredBarcode] [dbo].[NullDescription] NULL,
	[ParticipationMobile] [dbo].[Mobile] NULL,
	[ParticipationEmailID] [dbo].[Email] NULL,
	[ConsumerID] [int] NULL,
	[RetailOutletID] [int] NULL,
	[ConsumerName] [nvarchar](100) NULL,
	[KioskID] [int] NULL,
	[InvoiceAmount] [decimal](18, 0) NULL,
	[InvoiceNumber] [nvarchar](50) NULL,
	[CorporateID] [int] NULL,
	[IsFromCompetitionLink] [bit] NULL,
	[IdentificationNumber] [nvarchar](200) NULL,
	[ParticipantStatus] [int] NULL,
	[Remarks] [nvarchar](500) NULL,
	[ProcessDate] [datetime] NULL,
 CONSTRAINT [PK_coc_ECouponParticipationByExternalBarcode] PRIMARY KEY CLUSTERED 
(
	[ExternalParticipationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponPrizes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponPrizes](
	[ECouponPrizeID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponID] [bigint] NOT NULL,
	[PrizeTypeID] [int] NULL,
	[PrizeHeader] [dbo].[NullDescription] NULL,
	[PrizeDetail] [dbo].[Remark] NULL,
	[ImageFile] [dbo].[NullDescription] NULL,
	[PrizeCount] [int] NULL,
	[Category] [varchar](2) NULL,
 CONSTRAINT [PK_ECouponPrize] PRIMARY KEY NONCLUSTERED 
(
	[ECouponPrizeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponPrizesLanguage]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponPrizesLanguage](
	[ECouponPrizeID] [bigint] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[PrizeHeader] [dbo].[NullDescription] NULL,
	[PrizeDetail] [dbo].[Remark] NULL,
 CONSTRAINT [PK_coc_ECouponPrizesLanguage] PRIMARY KEY CLUSTERED 
(
	[ECouponPrizeID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponPrizesLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponPrizesLanguages](
	[ECouponPrizeLanguageID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponPrizeID] [bigint] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[ResourceKey] [nvarchar](100) NULL,
	[Value] [nvarchar](300) NULL,
 CONSTRAINT [PK_coc_ECouponPrizesLanguages] PRIMARY KEY CLUSTERED 
(
	[ECouponPrizeLanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponProducts]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponProducts](
	[ECouponProductID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponID] [bigint] NOT NULL,
	[ProductCode] [dbo].[NullDescription] NULL,
	[IsUsed] [bit] NOT NULL,
	[UsedDate] [datetime] NULL,
	[MobileUsed] [dbo].[Mobile] NULL,
 CONSTRAINT [PK_ECouponProducts] PRIMARY KEY NONCLUSTERED 
(
	[ECouponProductID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECoupons_Audit]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECoupons_Audit](
	[AuditECouponID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponID] [bigint] NOT NULL,
	[EServiceID] [int] NOT NULL,
	[ResultDate] [datetime] NULL,
	[WinnerCount] [tinyint] NULL,
	[EntryTypeID] [int] NOT NULL,
	[MinInvoiceValue] [dbo].[Amount] NULL,
	[AdditionalCouponValue] [dbo].[NullAmount] NULL,
	[AllowMultipleInvoices] [bit] NULL,
	[CouponPerInvoice] [int] NULL,
	[CouponPerMember] [int] NULL,
	[UserAurthorised] [bit] NULL,
	[QuestionCount] [int] NULL,
	[ImageFile] [dbo].[NullDescription] NULL,
	[UsesTerm] [dbo].[Remark] NULL,
	[ECouponTemplate] [dbo].[Remark] NULL,
	[ParticipationByKiosk] [bit] NOT NULL,
	[MemberOnly] [bit] NOT NULL,
	[RegistrationRequired] [bit] NOT NULL,
	[IsApproved] [bit] NULL,
	[ApprovalDate] [datetime] NULL,
	[IsActive] [bit] NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[ResulltDeclared] [bit] NULL,
	[DeclaredDate] [datetime] NULL,
	[DeclaredBy] [int] NULL,
	[DisplayImage] [dbo].[NullDescription] NULL,
	[Location] [dbo].[NullDescription] NULL,
	[NumberOfConsumerParticipations] [int] NULL,
	[NumberOfGuestParticipations] [int] NULL,
	[AllowMobileParticipation] [int] NULL,
	[AllowWebParticipation] [int] NULL,
	[AllowStandardBarcode] [bit] NULL,
	[StandardBarcodeValue] [varchar](100) NULL,
	[MultipleParticipation] [bit] NULL,
	[ParticipationCount] [int] NULL,
	[SentEVoucher] [bit] NULL,
	[GenderRestriction] [int] NULL,
	[LocationURL] [nvarchar](300) NULL,
	[StandardBarcodeByRetailOutlet] [bit] NULL,
	[TotalAllowedParticipationPerCustomer] [int] NULL,
	[TotalAllowedParticipationPerCustomerPerDay] [int] NULL,
	[AllowedParticipationPerBarcodePerCustomer] [int] NULL,
	[AllowedParticipationPerBarcodePerCustomerPerDay] [int] NULL,
	[TotalAllowedParticipationPerGuest] [int] NULL,
	[TotalAllowedParticipationPerGuestPerDay] [int] NULL,
	[AllowedParticipationPerAttemptInKiosk] [int] NULL,
	[StandardBarcodePrefix] [varchar](2) NULL,
	[StandardBarcodeWidth] [int] NULL,
	[StandardBarcodeByQuestionBank] [bit] NULL,
	[ParticipationNotificationTemplateID] [int] NULL,
	[ParticipationSMSTemplateID] [int] NULL,
	[ParticipationEmailTemplateID] [int] NULL,
	[SendSMS] [bit] NULL,
	[SendEmail] [bit] NULL,
	[CountryID] [int] NULL,
	[Priority] [int] NULL,
	[RecursiveHoursParticipationDuration] [int] NULL,
	[RecursiveHoursNumberOfParticipations] [int] NULL,
	[IsShowMobile] [bit] NULL,
	[LocationValidationRequired] [bit] NULL,
	[RecursiveHoursParticipationDurationKiosk] [int] NULL,
	[RecursiveHoursNumberOfParticipationsKiosk] [int] NULL,
	[LogBy] [int] NULL,
	[LogDateTime] [datetime] NULL,
	[UserAction] [nvarchar](20) NULL,
 CONSTRAINT [PK_ECoupons_Audit] PRIMARY KEY NONCLUSTERED 
(
	[AuditECouponID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponStandardBarcodes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponStandardBarcodes](
	[ECouponStandardBarcodeID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponOutletID] [bigint] NULL,
	[StandardBarcode] [nvarchar](100) NOT NULL,
	[IsActive] [bit] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[ECouponID] [bigint] NULL,
	[Type] [int] NULL,
	[QuestionOptionID] [int] NULL,
	[RecursiveHoursParticipationDuration] [int] NULL,
	[RecursiveHoursNumberOfParticipations] [int] NULL,
 CONSTRAINT [PK_ECouponStandardBarcodes] PRIMARY KEY NONCLUSTERED 
(
	[ECouponStandardBarcodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponStandardBarcodes_Audit]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponStandardBarcodes_Audit](
	[AuditECouponStandardBarcodeID] [int] IDENTITY(1,1) NOT NULL,
	[ECouponStandardBarcodeID] [bigint] NOT NULL,
	[ECouponOutletID] [bigint] NULL,
	[StandardBarcode] [nvarchar](100) NOT NULL,
	[IsActive] [bit] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[ECouponID] [bigint] NULL,
	[Type] [int] NULL,
	[QuestionOptionID] [int] NULL,
	[RecursiveHoursParticipationDuration] [int] NULL,
	[RecursiveHoursNumberOfParticipations] [int] NULL,
	[LogBy] [int] NULL,
	[LogDateTime] [datetime] NULL,
	[UserAction] [nvarchar](20) NULL,
 CONSTRAINT [PK_ECouponStandardBarcodes_Audit] PRIMARY KEY NONCLUSTERED 
(
	[AuditECouponStandardBarcodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponVoucherSending]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponVoucherSending](
	[ECouponVoucherID] [int] IDENTITY(1,1) NOT NULL,
	[EServiceID] [int] NOT NULL,
	[EVoucherID] [int] NOT NULL,
	[NoOfVouchers] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_coc_ECouponVoucher] PRIMARY KEY CLUSTERED 
(
	[ECouponVoucherID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponWinners]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponWinners](
	[ECouponWinnerID] [int] IDENTITY(1,1) NOT NULL,
	[ECouponPrizeID] [bigint] NOT NULL,
	[MobileNumber] [dbo].[Mobile] NOT NULL,
	[ConsumerID] [int] NULL,
	[PrizeHeader] [dbo].[Description] NULL,
	[PrizeDetail] [dbo].[Remark] NULL,
	[ImageFile] [dbo].[NullDescription] NULL,
	[ECouponDrawPrizeID] [int] NULL,
	[ConsumerType] [tinyint] NULL,
	[ConsumerName] [nvarchar](200) NULL,
	[Email] [nvarchar](200) NULL,
	[MembershipID] [nvarchar](20) NULL,
	[DrawDateTime] [datetime] NULL,
	[GuestID] [int] NULL,
	[ECouponParticipationID] [int] NULL,
 CONSTRAINT [PK_ECouponWinners] PRIMARY KEY NONCLUSTERED 
(
	[ECouponWinnerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [ClusteredIndex-20190708-214755]    Script Date: 07/11/2021 17:05:57 ******/
CREATE UNIQUE CLUSTERED INDEX [ClusteredIndex-20190708-214755] ON [dbo].[coc_ECouponWinners]
(
	[ECouponPrizeID] ASC,
	[MobileNumber] ASC,
	[ConsumerID] ASC,
	[ECouponDrawPrizeID] ASC,
	[ConsumerName] ASC,
	[ECouponParticipationID] ASC,
	[Email] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ECouponWinners_DeleteLog]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ECouponWinners_DeleteLog](
	[RowID] [int] IDENTITY(1,1) NOT NULL,
	[ECouponWinnerID] [int] NOT NULL,
	[ECouponPrizeID] [bigint] NOT NULL,
	[MobileNumber] [dbo].[Mobile] NOT NULL,
	[ConsumerID] [int] NULL,
	[PrizeHeader] [dbo].[Description] NULL,
	[PrizeDetail] [dbo].[Remark] NULL,
	[ImageFile] [dbo].[NullDescription] NULL,
	[ECouponDrawPrizeID] [int] NULL,
	[ConsumerType] [tinyint] NULL,
	[ConsumerName] [nvarchar](200) NULL,
	[Email] [nvarchar](200) NULL,
	[MembershipID] [nvarchar](20) NULL,
	[DrawDateTime] [datetime] NULL,
	[GuestID] [int] NULL,
	[ECouponParticipationID] [int] NULL,
	[UserName] [nvarchar](50) NULL,
	[DeleteDateTime] [datetime] NULL,
	[DeleteComment] [nvarchar](50) NULL,
 CONSTRAINT [PK_ECouponWinners_DeleteLog] PRIMARY KEY NONCLUSTERED 
(
	[RowID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EmailSchedule]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EmailSchedule](
	[EmailScheduleID] [bigint] IDENTITY(1,1) NOT NULL,
	[ConsumerID] [int] NULL,
	[GuestID] [int] NULL,
	[EmailBody] [nvarchar](max) NULL,
	[EmailID] [nvarchar](200) NULL,
	[IsProcessed] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[SendDate] [datetime] NULL,
	[Status] [int] NULL,
	[NoOfTriesAttempted] [int] NULL,
 CONSTRAINT [PK_coc_EmailSchedule] PRIMARY KEY CLUSTERED 
(
	[EmailScheduleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Endorsements]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Endorsements](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[FirstName] [dbo].[Name] NOT NULL,
	[SecondName] [dbo].[NullName] NULL,
	[FamilyName] [dbo].[NullName] NULL,
	[PrimaryMobile] [dbo].[Mobile] NULL,
	[EmailID] [dbo].[Email] NULL,
	[Gender] [smallint] NULL,
	[NationalityID] [int] NULL,
	[CountryID] [int] NULL,
	[CityID] [int] NULL,
	[MembershipNumber] [dbo].[NullCode] NULL,
	[IqamaNumber] [dbo].[NullCode] NULL,
	[CreatedDate] [datetime] NULL,
	[IsMobileVerified] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[IsActive] [bit] NULL,
	[MobileOtp] [int] NULL,
	[DrawID] [bigint] NULL,
	[DeviceToken] [nvarchar](250) NULL,
	[EmailOtp] [int] NULL,
	[ConsumerID] [int] NULL,
	[IsEmailVerified] [bit] NULL,
	[VerifiedDate] [datetime] NULL,
	[OtpGenerateDate] [datetime] NULL,
 CONSTRAINT [PK_coc_Endorsements] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Enums]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Enums](
	[EnumID] [int] NOT NULL,
	[Enum] [dbo].[Name] NOT NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_Enums] PRIMARY KEY NONCLUSTERED 
(
	[EnumID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EnumValues]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EnumValues](
	[EnumValueID] [int] NOT NULL,
	[EnumID] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[BaseValue] [dbo].[NullDescription] NULL,
 CONSTRAINT [PK_EnumValues] PRIMARY KEY NONCLUSTERED 
(
	[EnumValueID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_eServiceAddOn]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_eServiceAddOn](
	[EServiceAddOnId] [int] IDENTITY(1,1) NOT NULL,
	[EServiceID] [int] NOT NULL,
	[AddOnServiceID] [int] NULL,
	[ParticipationCount] [int] NULL,
	[IsActive] [bit] NOT NULL,
	[EBundleID] [int] NULL,
	[AddOnType] [int] NULL,
 CONSTRAINT [PK_coc_eServiceAddOn] PRIMARY KEY CLUSTERED 
(
	[EServiceAddOnId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EServiceAddOnConsumers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EServiceAddOnConsumers](
	[ConsumerEServiceAddOnID] [int] IDENTITY(1,1) NOT NULL,
	[EServiceAddOnId] [int] NOT NULL,
	[ConsumerID] [int] NOT NULL,
	[IsProcessed] [bit] NOT NULL,
	[Status] [int] NOT NULL,
	[Message] [nvarchar](1000) NULL,
	[CreatedOn] [datetime] NULL,
	[IsActive] [bit] NULL,
	[ProcessedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_ConsumerEServiceAddOn] PRIMARY KEY CLUSTERED 
(
	[ConsumerEServiceAddOnID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EserviceAdminApproval]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EserviceAdminApproval](
	[EserviceAdminApprovalID] [int] IDENTITY(1,1) NOT NULL,
	[EserviceID] [int] NULL,
	[Comments] [nvarchar](max) NULL,
	[Status] [int] NULL,
	[RequestedOn] [datetime] NULL,
	[RequestedBy] [int] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_coc_EserviceAdminApproval] PRIMARY KEY CLUSTERED 
(
	[EserviceAdminApprovalID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EServiceBarcodes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EServiceBarcodes](
	[EServiceBarcodeID] [bigint] IDENTITY(1,1) NOT NULL,
	[NotificationID] [bigint] NOT NULL,
	[CorporateID] [int] NOT NULL,
	[BarcodeTypeID] [int] NULL,
	[Barcode] [dbo].[NullDescription] NULL,
	[CanDelete] [bit] NOT NULL,
	[IsUsed] [bit] NOT NULL,
	[AsignedMoile] [dbo].[Mobile] NULL,
	[AsignedEmailID] [dbo].[Email] NULL,
	[UsedDate] [datetime] NULL,
	[ConsumerNotificationID] [bigint] NULL,
	[ConsumerID] [int] NULL,
	[GuestID] [int] NULL,
	[EVoucherID] [int] NULL,
	[DistributorCorporateID] [bigint] NULL,
	[EVoucherBundleEligibilityForConsumersID] [bigint] NULL,
	[EBundleID] [bigint] NULL,
	[EventID] [int] NULL,
	[UserId] [int] NULL,
	[EServiceAddOnId] [int] NULL,
	[UsedAtKioskID] [int] NULL,
	[IsDirectVoucher] [bit] NULL,
	[BroadcastEmailID] [int] NULL,
	[Distributiontype] [int] NULL,
	[StandardBarcodeValue] [varchar](100) NULL,
	[AssignedDate] [datetime] NULL,
	[UsedByAPI] [bit] NULL,
	[CorporateAPIUserID] [int] NULL,
	[InvoiceAmount] [dbo].[Amount] NULL,
	[InvoiceNumber] [varchar](50) NULL,
	[Location] [varchar](100) NULL,
	[RetailoutletID] [int] NULL,
	[APIKey] [nvarchar](150) NULL,
	[IsBlocked] [bit] NULL,
	[AllowDownload] [bit] NULL,
	[PromoCodeID] [bigint] NULL,
	[IsDownloaded] [bit] NULL,
	[EVoucherCategoryID] [bigint] NULL,
	[ExtraDiscount] [decimal](18, 2) NULL,
	[IsWinner] [bit] NULL,
 CONSTRAINT [PK_EServiceBarcodes] PRIMARY KEY NONCLUSTERED 
(
	[EServiceBarcodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EServiceBarcodes_Dump]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EServiceBarcodes_Dump](
	[EServiceBarcodeID] [bigint] IDENTITY(1,1) NOT NULL,
	[NotificationID] [bigint] NOT NULL,
	[CorporateID] [int] NOT NULL,
	[BarcodeTypeID] [int] NULL,
	[Barcode] [dbo].[NullDescription] NULL,
	[CanDelete] [bit] NOT NULL,
	[IsUsed] [bit] NOT NULL,
	[AsignedMoile] [dbo].[Mobile] NULL,
	[AsignedEmailID] [dbo].[Email] NULL,
	[UsedDate] [datetime] NULL,
	[ConsumerNotificationID] [bigint] NULL,
	[ConsumerID] [int] NULL,
	[GuestID] [int] NULL,
	[EVoucherID] [int] NULL,
	[DistributorCorporateID] [bigint] NULL,
	[EVoucherBundleEligibilityForConsumersID] [bigint] NULL,
	[EBundleID] [bigint] NULL,
	[EventID] [int] NULL,
	[UserId] [int] NULL,
	[EServiceAddOnId] [int] NULL,
	[UsedAtKioskID] [int] NULL,
	[IsDirectVoucher] [bit] NULL,
	[BroadcastEmailID] [int] NULL,
	[Distributiontype] [int] NULL,
	[StandardBarcodeValue] [varchar](100) NULL,
	[AssignedDate] [datetime] NULL,
	[UsedByAPI] [bit] NULL,
	[CorporateAPIUserID] [int] NULL,
	[InvoiceAmount] [dbo].[Amount] NULL,
	[InvoiceNumber] [varchar](50) NULL,
	[Location] [varchar](100) NULL,
	[RetailoutletID] [int] NULL,
	[APIKey] [nvarchar](150) NULL,
	[DecryptedBarcode] [nvarchar](150) NULL,
	[IsBlocked] [bit] NULL,
	[AllowDownload] [bit] NULL,
	[PromoCodeID] [bigint] NULL,
	[IsDownloaded] [bit] NULL,
	[EVoucherCategoryID] [bigint] NULL,
	[ExtraDiscount] [decimal](18, 2) NULL,
	[FileName] [nvarchar](100) NULL,
	[CategoryName] [nvarchar](50) NULL,
PRIMARY KEY CLUSTERED 
(
	[EServiceBarcodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EServiceBarcodes_Dump_1]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EServiceBarcodes_Dump_1](
	[EServiceBarcodeID] [bigint] IDENTITY(1,1) NOT NULL,
	[NotificationID] [bigint] NOT NULL,
	[CorporateID] [int] NOT NULL,
	[BarcodeTypeID] [int] NULL,
	[Barcode] [dbo].[NullDescription] NULL,
	[CanDelete] [bit] NOT NULL,
	[IsUsed] [bit] NOT NULL,
	[AsignedMoile] [dbo].[Mobile] NULL,
	[AsignedEmailID] [dbo].[Email] NULL,
	[UsedDate] [datetime] NULL,
	[ConsumerNotificationID] [bigint] NULL,
	[ConsumerID] [int] NULL,
	[GuestID] [int] NULL,
	[EVoucherID] [int] NULL,
	[DistributorCorporateID] [bigint] NULL,
	[EVoucherBundleEligibilityForConsumersID] [bigint] NULL,
	[EBundleID] [bigint] NULL,
	[EventID] [int] NULL,
	[UserId] [int] NULL,
	[EServiceAddOnId] [int] NULL,
	[UsedAtKioskID] [int] NULL,
	[IsDirectVoucher] [bit] NULL,
	[BroadcastEmailID] [int] NULL,
	[Distributiontype] [int] NULL,
	[StandardBarcodeValue] [varchar](100) NULL,
	[AssignedDate] [datetime] NULL,
	[UsedByAPI] [bit] NULL,
	[CorporateAPIUserID] [int] NULL,
	[InvoiceAmount] [dbo].[Amount] NULL,
	[InvoiceNumber] [varchar](50) NULL,
	[Location] [varchar](100) NULL,
	[RetailoutletID] [int] NULL,
	[APIKey] [nvarchar](150) NULL,
	[DecryptedBarcode] [nvarchar](150) NULL,
	[IsBlocked] [bit] NULL,
	[AllowDownload] [bit] NULL,
	[PromoCodeID] [bigint] NULL,
	[IsDownloaded] [bit] NULL,
	[EVoucherCategoryID] [bigint] NULL,
	[ExtraDiscount] [decimal](18, 2) NULL,
	[FileName] [nvarchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[EServiceBarcodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EServiceBarcodes_Dump_2]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EServiceBarcodes_Dump_2](
	[EServiceBarcodeID] [bigint] IDENTITY(1,1) NOT NULL,
	[NotificationID] [bigint] NOT NULL,
	[CorporateID] [int] NOT NULL,
	[BarcodeTypeID] [int] NULL,
	[Barcode] [dbo].[NullDescription] NULL,
	[CanDelete] [bit] NOT NULL,
	[IsUsed] [bit] NOT NULL,
	[AsignedMoile] [dbo].[Mobile] NULL,
	[AsignedEmailID] [dbo].[Email] NULL,
	[UsedDate] [datetime] NULL,
	[ConsumerNotificationID] [bigint] NULL,
	[ConsumerID] [int] NULL,
	[GuestID] [int] NULL,
	[EVoucherID] [int] NULL,
	[DistributorCorporateID] [bigint] NULL,
	[EVoucherBundleEligibilityForConsumersID] [bigint] NULL,
	[EBundleID] [bigint] NULL,
	[EventID] [int] NULL,
	[UserId] [int] NULL,
	[EServiceAddOnId] [int] NULL,
	[UsedAtKioskID] [int] NULL,
	[IsDirectVoucher] [bit] NULL,
	[BroadcastEmailID] [int] NULL,
	[Distributiontype] [int] NULL,
	[StandardBarcodeValue] [varchar](100) NULL,
	[AssignedDate] [datetime] NULL,
	[UsedByAPI] [bit] NULL,
	[CorporateAPIUserID] [int] NULL,
	[InvoiceAmount] [dbo].[Amount] NULL,
	[InvoiceNumber] [varchar](50) NULL,
	[Location] [varchar](100) NULL,
	[RetailoutletID] [int] NULL,
	[APIKey] [nvarchar](150) NULL,
	[DecryptedBarcode] [nvarchar](150) NULL,
PRIMARY KEY CLUSTERED 
(
	[EServiceBarcodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EServiceBarcodes_Dump_3]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EServiceBarcodes_Dump_3](
	[EServiceBarcodeID] [bigint] IDENTITY(1,1) NOT NULL,
	[NotificationID] [bigint] NOT NULL,
	[CorporateID] [int] NOT NULL,
	[BarcodeTypeID] [int] NULL,
	[Barcode] [dbo].[NullDescription] NULL,
	[CanDelete] [bit] NOT NULL,
	[IsUsed] [bit] NOT NULL,
	[AsignedMoile] [dbo].[Mobile] NULL,
	[AsignedEmailID] [dbo].[Email] NULL,
	[UsedDate] [datetime] NULL,
	[ConsumerNotificationID] [bigint] NULL,
	[ConsumerID] [int] NULL,
	[GuestID] [int] NULL,
	[EVoucherID] [int] NULL,
	[DistributorCorporateID] [bigint] NULL,
	[EVoucherBundleEligibilityForConsumersID] [bigint] NULL,
	[EBundleID] [bigint] NULL,
	[EventID] [int] NULL,
	[UserId] [int] NULL,
	[EServiceAddOnId] [int] NULL,
	[UsedAtKioskID] [int] NULL,
	[IsDirectVoucher] [bit] NULL,
	[BroadcastEmailID] [int] NULL,
	[Distributiontype] [int] NULL,
	[StandardBarcodeValue] [varchar](100) NULL,
	[AssignedDate] [datetime] NULL,
	[UsedByAPI] [bit] NULL,
	[CorporateAPIUserID] [int] NULL,
	[InvoiceAmount] [dbo].[Amount] NULL,
	[InvoiceNumber] [varchar](50) NULL,
	[Location] [varchar](100) NULL,
	[RetailoutletID] [int] NULL,
	[APIKey] [nvarchar](150) NULL,
	[DecryptedBarcode] [nvarchar](150) NULL,
PRIMARY KEY CLUSTERED 
(
	[EServiceBarcodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EServiceBarcodes_Dump_4]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EServiceBarcodes_Dump_4](
	[EServiceBarcodeID] [bigint] IDENTITY(1,1) NOT NULL,
	[NotificationID] [bigint] NOT NULL,
	[CorporateID] [int] NOT NULL,
	[BarcodeTypeID] [int] NULL,
	[Barcode] [dbo].[NullDescription] NULL,
	[CanDelete] [bit] NOT NULL,
	[IsUsed] [bit] NOT NULL,
	[AsignedMoile] [dbo].[Mobile] NULL,
	[AsignedEmailID] [dbo].[Email] NULL,
	[UsedDate] [datetime] NULL,
	[ConsumerNotificationID] [bigint] NULL,
	[ConsumerID] [int] NULL,
	[GuestID] [int] NULL,
	[EVoucherID] [int] NULL,
	[DistributorCorporateID] [bigint] NULL,
	[EVoucherBundleEligibilityForConsumersID] [bigint] NULL,
	[EBundleID] [bigint] NULL,
	[EventID] [int] NULL,
	[UserId] [int] NULL,
	[EServiceAddOnId] [int] NULL,
	[UsedAtKioskID] [int] NULL,
	[IsDirectVoucher] [bit] NULL,
	[BroadcastEmailID] [int] NULL,
	[Distributiontype] [int] NULL,
	[StandardBarcodeValue] [varchar](100) NULL,
	[AssignedDate] [datetime] NULL,
	[UsedByAPI] [bit] NULL,
	[CorporateAPIUserID] [int] NULL,
	[InvoiceAmount] [dbo].[Amount] NULL,
	[InvoiceNumber] [varchar](50) NULL,
	[Location] [varchar](100) NULL,
	[RetailoutletID] [int] NULL,
	[APIKey] [nvarchar](150) NULL,
	[DecryptedBarcode] [nvarchar](150) NULL,
PRIMARY KEY CLUSTERED 
(
	[EServiceBarcodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EServiceBarcodes_Dump_5]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EServiceBarcodes_Dump_5](
	[EServiceBarcodeID] [bigint] IDENTITY(1,1) NOT NULL,
	[NotificationID] [bigint] NULL,
	[CorporateID] [int] NULL,
	[BarcodeTypeID] [int] NULL,
	[Barcode] [dbo].[NullDescription] NULL,
	[CanDelete] [bit] NULL,
	[IsUsed] [bit] NULL,
	[AsignedMoile] [dbo].[Mobile] NULL,
	[AsignedEmailID] [dbo].[Email] NULL,
	[UsedDate] [datetime] NULL,
	[ConsumerNotificationID] [bigint] NULL,
	[ConsumerID] [int] NULL,
	[GuestID] [int] NULL,
	[EVoucherID] [int] NULL,
	[DistributorCorporateID] [bigint] NULL,
	[EVoucherBundleEligibilityForConsumersID] [bigint] NULL,
	[EBundleID] [bigint] NULL,
	[EventID] [int] NULL,
	[UserId] [int] NULL,
	[EServiceAddOnId] [int] NULL,
	[UsedAtKioskID] [int] NULL,
	[IsDirectVoucher] [bit] NULL,
	[BroadcastEmailID] [int] NULL,
	[Distributiontype] [int] NULL,
	[StandardBarcodeValue] [varchar](100) NULL,
	[AssignedDate] [datetime] NULL,
	[UsedByAPI] [bit] NULL,
	[CorporateAPIUserID] [int] NULL,
	[InvoiceAmount] [dbo].[Amount] NULL,
	[InvoiceNumber] [varchar](50) NULL,
	[Location] [varchar](100) NULL,
	[RetailoutletID] [int] NULL,
	[APIKey] [nvarchar](150) NULL,
	[IsBlocked] [bit] NULL,
	[AllowDownload] [bit] NULL,
	[PromoCodeID] [bigint] NULL,
	[IsDownloaded] [bit] NULL,
	[EVoucherCategoryID] [bigint] NULL,
	[ExtraDiscount] [decimal](18, 2) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EServiceBarcodes_StatisticalData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EServiceBarcodes_StatisticalData](
	[EServiceBarcodesStatisticsID] [int] IDENTITY(1,1) NOT NULL,
	[EServiceID] [int] NULL,
	[TotalNoOfBarcodes] [int] NULL,
	[ExtraBarcodesAdded] [int] NULL,
	[TotalBarcodesCreated] [int] NULL,
	[TotalBarcodesDownloaded] [int] NULL,
	[TotalBarcodesUsed] [int] NULL,
	[TotalBarcodesDeleted] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[EServiceBarcodesStatisticsID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EServiceEventOutlets]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EServiceEventOutlets](
	[EServiceEventOutletID] [int] IDENTITY(1,1) NOT NULL,
	[EServiceEventID] [int] NOT NULL,
	[RetailOutletID] [int] NOT NULL,
 CONSTRAINT [PK_EServiceEventOutlets] PRIMARY KEY NONCLUSTERED 
(
	[EServiceEventOutletID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EServiceEvents]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EServiceEvents](
	[EServiceEventID] [int] IDENTITY(1,1) NOT NULL,
	[EServiceID] [int] NOT NULL,
	[EventDescription] [nvarchar](max) NULL,
	[EventTypeID] [int] NOT NULL,
	[EventDate] [datetime] NOT NULL,
	[LastDate] [datetime] NOT NULL,
	[PurchaseStartDate] [datetime] NOT NULL,
	[PurchaseEndDate] [datetime] NOT NULL,
	[EventCost] [dbo].[Amount] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[TicketDescription] [nvarchar](max) NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[DisplayImage] [dbo].[NullDescription] NULL,
 CONSTRAINT [PK_EServiceEvents] PRIMARY KEY NONCLUSTERED 
(
	[EServiceEventID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EServiceExternalBarcodes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EServiceExternalBarcodes](
	[EServiceExternalBarcodeID] [bigint] IDENTITY(1,1) NOT NULL,
	[EServiceBarcodeID] [bigint] NULL,
	[EServiceID] [bigint] NULL,
	[CorporateID] [int] NOT NULL,
	[RetailoutletID] [int] NULL,
	[ExternalBarcode] [dbo].[NullDescription] NULL,
	[LoadedDate] [datetime] NULL,
	[IsBlocked] [bit] NULL,
	[IsUsed] [bit] NOT NULL,
	[UsedDate] [datetime] NULL,
	[ExternalParticipationID] [bigint] NULL,
	[UploadExternalBarcodeAuditID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[EServiceExternalBarcodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EServiceInvoices]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EServiceInvoices](
	[EServiceInvoiceID] [int] IDENTITY(1,1) NOT NULL,
	[InvoiceNumber] [dbo].[Code] NOT NULL,
	[EServiceID] [int] NOT NULL,
	[InvoiceDate] [datetime] NOT NULL,
	[IsExtension] [bit] NOT NULL,
	[NotificationCount] [int] NOT NULL,
	[PackageAmount] [dbo].[Amount] NOT NULL,
	[PaymentTypeID] [int] NULL,
	[IsBarcodeGenerated] [bit] NOT NULL,
	[VatAmount] [dbo].[Amount] NULL,
	[TotalAmount] [dbo].[Amount] NULL,
 CONSTRAINT [PK_EServiceInvoices] PRIMARY KEY NONCLUSTERED 
(
	[EServiceInvoiceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UNK_EServiceInvoices] UNIQUE NONCLUSTERED 
(
	[InvoiceNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EServiceLocations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EServiceLocations](
	[EServiceLocationID] [int] IDENTITY(1,1) NOT NULL,
	[EServiceID] [int] NOT NULL,
	[RetailOutletID] [int] NOT NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_EServiceLocations] PRIMARY KEY NONCLUSTERED 
(
	[EServiceLocationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EServiceReceipts]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EServiceReceipts](
	[EServiceReceiptID] [int] IDENTITY(1,1) NOT NULL,
	[EServiceInvoiceID] [int] NOT NULL,
	[PaymentTypeID] [int] NOT NULL,
	[ReceiptDate] [datetime] NOT NULL,
	[ReceiptAmount] [dbo].[Amount] NOT NULL,
	[ReferenceNumber] [dbo].[NullCode] NULL,
	[ChequePayment] [bit] NOT NULL,
	[CashPayment] [bit] NOT NULL,
	[CardPayment] [bit] NOT NULL,
	[ChequeNumber] [dbo].[NullCode] NULL,
	[ChequeDate] [datetime] NULL,
	[BankName] [dbo].[NullName] NULL,
	[Remarks] [dbo].[Remark] NULL,
	[IsCancel] [bit] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[Log] [nvarchar](max) NULL,
 CONSTRAINT [PK_EServiceReceipts] PRIMARY KEY NONCLUSTERED 
(
	[EServiceReceiptID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EServices_Audit]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EServices_Audit](
	[AuditEServiceID] [int] IDENTITY(1,1) NOT NULL,
	[EServiceID] [int] NULL,
	[ServiceNumber] [dbo].[Code] NULL,
	[ServiceDate] [datetime] NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[CorporateID] [int] NULL,
	[ServiceTypeID] [int] NULL,
	[ServiceSubTypeID] [int] NULL,
	[CompetitionID] [int] NULL,
	[IsActive] [bit] NULL,
	[AddDate] [datetime] NULL,
	[AddUserID] [int] NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[IsBarcodeUsed] [bit] NULL,
	[MessagePackTypeID] [int] NULL,
	[NotificationSend] [bit] NULL,
	[IsPaymentDone] [bit] NULL,
	[PaymentType] [int] NULL,
	[LogBy] [int] NULL,
	[LogDateTime] [datetime] NULL,
	[UserAction] [nvarchar](20) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EventConfiguration]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EventConfiguration](
	[EventID] [int] IDENTITY(1,1) NOT NULL,
	[EServiceID] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[EventStartDate] [datetime] NULL,
	[EventEndDate] [datetime] NULL,
	[ImageFileName] [nvarchar](100) NULL,
	[AddDate] [datetime] NOT NULL,
	[EditDate] [datetime] NULL,
	[CreatedUserID] [int] NOT NULL,
	[EditedUserID] [int] NULL,
	[HtmlContent] [nvarchar](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[EventID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EventLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EventLanguages](
	[EventLanguageID] [int] IDENTITY(1,1) NOT NULL,
	[EventID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[ResourceKey] [varchar](100) NULL,
	[ResourceValue] [varchar](1000) NULL,
PRIMARY KEY CLUSTERED 
(
	[EventLanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EVoucher]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EVoucher](
	[EVoucherID] [int] IDENTITY(1,1) NOT NULL,
	[EServiceID] [int] NOT NULL,
	[VoucherType] [bit] NOT NULL,
	[MaxNumberOfVouchersPerCustomer] [int] NULL,
	[MaxNumberOfVouchersPerCustomerPerDay] [int] NULL,
	[AddDate] [datetime] NOT NULL,
	[EditDate] [datetime] NULL,
	[CreatedUserID] [int] NOT NULL,
	[EditedUserID] [int] NULL,
	[IsActive] [bit] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[ImageFile] [nvarchar](1000) NULL,
	[ExpiryDate] [datetime] NULL,
	[IsPrinted] [bit] NULL,
	[EVoucherCategoryID] [int] NULL,
	[IsAllowed] [bit] NOT NULL,
	[IsAcceptedTC] [bit] NULL,
	[Link] [nvarchar](200) NULL,
	[OriginalPrice] [dbo].[Amount] NULL,
	[PriceAfterDiscount] [dbo].[Amount] NULL,
	[Type] [int] NULL,
	[DiscountType] [int] NULL,
	[DiscountAmount] [decimal](18, 2) NULL,
	[DiscountPercentage] [decimal](18, 2) NULL,
	[PromotionAmount] [decimal](18, 2) NULL,
	[VoucherAmount] [decimal](18, 2) NULL,
	[NumberOfVouchers] [int] NULL,
	[CountryID] [int] NULL,
	[VoucherTypeID] [int] NULL,
	[FromTime] [time](7) NULL,
	[ToTime] [time](7) NULL,
	[SelectedDays] [nvarchar](100) NULL,
	[CurrentStatus] [int] NULL,
	[ReasonForReject] [nvarchar](max) NULL,
	[LastInActiveDate] [datetime] NULL,
	[LastInActiveDescription] [nvarchar](max) NULL,
	[IsPaymentEnabled] [bit] NULL,
	[EVoucherTypeID] [int] NULL,
	[AcceptExtraDiscount] [bit] NULL,
	[VoucherPDF] [nvarchar](250) NULL,
	[GenerateExactNumberOfVouchers] [bit] NULL,
 CONSTRAINT [PK__coc_EVou__BC18D35EB8F32242] PRIMARY KEY CLUSTERED 
(
	[EVoucherID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EVoucher_Audit]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EVoucher_Audit](
	[EVoucherID] [int] NULL,
	[EServiceID] [int] NULL,
	[VoucherType] [bit] NULL,
	[MaxNumberOfVouchersPerCustomer] [int] NULL,
	[MaxNumberOfVouchersPerCustomerPerDay] [int] NULL,
	[AddDate] [datetime] NULL,
	[EditDate] [datetime] NULL,
	[CreatedUserID] [int] NULL,
	[EditedUserID] [int] NULL,
	[IsActive] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[ImageFile] [nvarchar](1000) NULL,
	[ExpiryDate] [datetime] NULL,
	[IsPrinted] [bit] NULL,
	[EVoucherCategoryID] [int] NULL,
	[IsAllowed] [bit] NULL,
	[IsAcceptedTC] [bit] NULL,
	[Link] [nvarchar](200) NULL,
	[OriginalPrice] [dbo].[Amount] NULL,
	[PriceAfterDiscount] [dbo].[Amount] NULL,
	[Type] [int] NULL,
	[DiscountType] [int] NULL,
	[DiscountAmount] [decimal](18, 2) NULL,
	[DiscountPercentage] [decimal](18, 2) NULL,
	[PromotionAmount] [decimal](18, 2) NULL,
	[VoucherAmount] [decimal](18, 2) NULL,
	[NumberOfVouchers] [int] NULL,
	[CountryID] [int] NULL,
	[VoucherTypeID] [int] NULL,
	[FromTime] [time](7) NULL,
	[ToTime] [time](7) NULL,
	[SelectedDays] [nvarchar](100) NULL,
	[CurrentStatus] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EvoucherApproval]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EvoucherApproval](
	[EVoucherApprovalID] [int] IDENTITY(1,1) NOT NULL,
	[RequesterUserID] [int] NOT NULL,
	[EVoucherBundleID] [int] NOT NULL,
	[IsApproved] [bit] NOT NULL,
	[ApprovedDate] [datetime] NULL,
	[RequestedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_EvoucherApproval] PRIMARY KEY CLUSTERED 
(
	[EVoucherApprovalID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EVoucherAudit]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EVoucherAudit](
	[EVoucherAuditID] [bigint] IDENTITY(1,1) NOT NULL,
	[EVoucherID] [int] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[CurrentStatus] [int] NOT NULL,
	[EditedUserID] [int] NULL,
 CONSTRAINT [PK_coc_EVoucherAudit] PRIMARY KEY CLUSTERED 
(
	[EVoucherAuditID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EVoucherBundle]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EVoucherBundle](
	[EVoucherBundleID] [int] IDENTITY(1,1) NOT NULL,
	[EBundleID] [int] NOT NULL,
	[EVoucherID] [int] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[EditDate] [datetime] NULL,
	[CreatedUserID] [int] NOT NULL,
	[EditedUserID] [int] NULL,
	[IsActive] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[EVoucherBundleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EVoucherBundleDistribution]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EVoucherBundleDistribution](
	[EVoucherBundleDistributionID] [int] IDENTITY(1,1) NOT NULL,
	[EVoucherBundleID] [int] NOT NULL,
	[CorporateID] [int] NOT NULL,
	[NoOfVouchers] [int] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[EditDate] [datetime] NULL,
	[CreatedUserID] [int] NOT NULL,
	[EditedUserID] [int] NULL,
	[IsActive] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[EVoucherBundleDistributionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EVoucherBundleDistributionQRCode]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EVoucherBundleDistributionQRCode](
	[EVoucherBundleDistributionQRCodeID] [int] IDENTITY(1,1) NOT NULL,
	[EVoucherBundleDistributionID] [int] NOT NULL,
	[NumberOfEligibleVouchers] [int] NOT NULL,
	[QRCodeValue ] [varchar](100) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[EVoucherBundleDistributionQRCodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EVoucherBundleEligibilityForConsumers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EVoucherBundleEligibilityForConsumers](
	[EVoucherBundleEligibilityForConsumersID] [int] IDENTITY(1,1) NOT NULL,
	[EVoucherBundleQRCodeID] [int] NOT NULL,
	[ConsumerID] [int] NOT NULL,
	[EBundleID] [int] NOT NULL,
	[EligibleNoOfVouchers] [int] NOT NULL,
	[ExpiryDate] [datetime] NULL,
	[EntryDate] [datetime] NOT NULL,
	[IsUsed] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[EVoucherBundleEligibilityForConsumersID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EVoucherBundleQRCode]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EVoucherBundleQRCode](
	[EVoucherBundleQRCodeID] [int] IDENTITY(1,1) NOT NULL,
	[EBundleID] [int] NOT NULL,
	[CorporateID] [int] NOT NULL,
	[NumberOfEligibleVouchers] [int] NULL,
	[QRCodeValue] [nvarchar](max) NULL,
	[AddDate] [datetime] NOT NULL,
	[CreatedUser] [int] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditedUser] [int] NULL,
	[IsActive] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[EVoucherBundleQRCodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EVoucherCategory]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EVoucherCategory](
	[EVoucherCategoryID] [int] IDENTITY(1,1) NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[EditDate] [datetime] NULL,
	[CreatedUserID] [int] NOT NULL,
	[EditedUserID] [int] NULL,
	[IsActive] [bit] NOT NULL,
	[ImageFile] [nvarchar](1000) NULL,
	[InActiveImageFile] [nvarchar](1000) NULL,
PRIMARY KEY CLUSTERED 
(
	[EVoucherCategoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EVoucherCategoryLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EVoucherCategoryLanguages](
	[EVoucherCategoryLanguageID] [int] IDENTITY(1,1) NOT NULL,
	[EVoucherCategoryID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[ResourceKey] [varchar](100) NULL,
	[ResourceValue] [nvarchar](1000) NULL,
PRIMARY KEY CLUSTERED 
(
	[EVoucherCategoryLanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EVoucherImages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EVoucherImages](
	[EVoucherImagesID] [int] IDENTITY(1,1) NOT NULL,
	[EVoucherID] [int] NOT NULL,
	[ImageFile] [nvarchar](1000) NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[EditDate] [datetime] NULL,
	[CreatedUserID] [int] NOT NULL,
	[EditedUserID] [int] NULL,
	[IsPrimaryImage] [bit] NOT NULL,
	[LanguageID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[EVoucherImagesID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EVoucherLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EVoucherLanguages](
	[EVoucherLanguageID] [int] IDENTITY(1,1) NOT NULL,
	[EVoucherID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[ResourceKey] [varchar](100) NULL,
	[ResourceValue] [nvarchar](2000) NULL,
	[AddDate] [datetime] NOT NULL,
	[EditDate] [datetime] NULL,
	[CreatedUserId] [int] NOT NULL,
	[EditedUserId] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[EVoucherLanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_eVoucherLocationLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_eVoucherLocationLanguages](
	[VoucherLocationID] [int] NOT NULL,
	[LanguageID] [int] NULL,
	[Location] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EvoucherLocations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EvoucherLocations](
	[VoucherLocationID] [int] IDENTITY(1,1) NOT NULL,
	[EVoucherID] [int] NULL,
	[CityID] [int] NULL,
	[MapLink] [nvarchar](max) NULL,
	[CreatedBy] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
	[PlusCode] [nvarchar](200) NULL,
 CONSTRAINT [PK_coc_EvoucherLocations] PRIMARY KEY CLUSTERED 
(
	[VoucherLocationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_EVoucherRetailOutlet]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_EVoucherRetailOutlet](
	[EVoucherID] [int] NOT NULL,
	[RetailOutletID] [int] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ExternalRedirectionDataMapping]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ExternalRedirectionDataMapping](
	[ExternalRedirectionDataMappingID] [int] IDENTITY(1,1) NOT NULL,
	[EServiceID] [int] NOT NULL,
	[OrderNumber] [int] NULL,
	[QueryStringParamKey] [varchar](500) NULL,
	[LocalRefColumn] [varchar](500) NULL,
	[CreatedBy] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [int] NULL,
	[UpdatedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_ExternalRedirectionDataMapping] PRIMARY KEY CLUSTERED 
(
	[ExternalRedirectionDataMappingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_GeneralNotification]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_GeneralNotification](
	[GeneralNotificationId] [bigint] IDENTITY(1,1) NOT NULL,
	[ScheduleFromDate] [datetime] NULL,
	[ScheduleToDate] [datetime] NULL,
	[IsActive] [bit] NULL,
	[IsBrodaCast] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[IsSendPushNotification] [bit] NULL,
	[IsShowAsAppNotification] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[GeneralNotificationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_GeneralNotificationTemplateLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_GeneralNotificationTemplateLanguages](
	[GeneralNotificationTemplateID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[TemplateTitle] [dbo].[Description] NOT NULL,
	[Template] [dbo].[Remark] NULL,
 CONSTRAINT [PK_GeneralNotificationTemplateLanguages] PRIMARY KEY CLUSTERED 
(
	[GeneralNotificationTemplateID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_GeneralNotificationTemplates]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_GeneralNotificationTemplates](
	[GeneralNotificationTemplateID] [int] IDENTITY(1,1) NOT NULL,
	[TemplateTypeID] [int] NOT NULL,
	[SMSUsage] [bit] NOT NULL,
	[NotificatonUsage] [bit] NOT NULL,
	[EmailUsage] [bit] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
 CONSTRAINT [PK_GeneralNotificationTemplates] PRIMARY KEY NONCLUSTERED 
(
	[GeneralNotificationTemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_GridResources]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_GridResources](
	[GridResourceID] [int] IDENTITY(1,1) NOT NULL,
	[ScreenID] [int] NOT NULL,
	[GridKey] [dbo].[Description] NOT NULL,
	[GridValue] [dbo].[Description] NOT NULL,
 CONSTRAINT [PK_GridResources] PRIMARY KEY NONCLUSTERED 
(
	[GridResourceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_GuestParticipations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_GuestParticipations](
	[GuestParticipationID] [bigint] IDENTITY(1,1) NOT NULL,
	[GuestName] [dbo].[Name] NOT NULL,
	[Mobile] [dbo].[Mobile] NULL,
	[OtpID] [int] NULL,
	[ParticipationDate] [datetime] NOT NULL,
	[RetailOutletID] [int] NULL,
 CONSTRAINT [PK_GuestParticipations] PRIMARY KEY NONCLUSTERED 
(
	[GuestParticipationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [ClusteredIndex-20190822-163838]    Script Date: 07/11/2021 17:05:57 ******/
CREATE CLUSTERED INDEX [ClusteredIndex-20190822-163838] ON [dbo].[coc_GuestParticipations]
(
	[GuestName] ASC,
	[Mobile] ASC,
	[ParticipationDate] ASC,
	[RetailOutletID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_InviteDetails]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_InviteDetails](
	[InviteDetailID] [int] IDENTITY(1,1) NOT NULL,
	[InviteFriendID] [bigint] NOT NULL,
	[EmailID] [dbo].[Email] NULL,
	[FacebookID] [dbo].[Email] NULL,
	[PhoneNuber] [dbo].[Phone] NULL,
	[AutoRejected] [bit] NOT NULL,
	[IsAccepted] [bit] NOT NULL,
	[AcceptDate] [datetime] NULL,
 CONSTRAINT [PK_InviteDetails] PRIMARY KEY NONCLUSTERED 
(
	[InviteDetailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_InviteFriends]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_InviteFriends](
	[InviteFriendID] [bigint] IDENTITY(1,1) NOT NULL,
	[InvitationCode] [dbo].[Code] NOT NULL,
	[ConsumerID] [int] NOT NULL,
	[InvitationDate] [datetime] NOT NULL,
 CONSTRAINT [PK_InviteFriends] PRIMARY KEY NONCLUSTERED 
(
	[InviteFriendID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UNK_InviteFriends] UNIQUE NONCLUSTERED 
(
	[InvitationCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_KioskLocationLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_KioskLocationLanguages](
	[KioskLocationID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[KioskLocation] [dbo].[Description] NOT NULL,
 CONSTRAINT [PK_KioskLocationLanguages] PRIMARY KEY CLUSTERED 
(
	[KioskLocationID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_KioskLocationRetailOutlets]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_KioskLocationRetailOutlets](
	[KioskLocationID] [int] NOT NULL,
	[RetailOutletID] [int] NOT NULL,
 CONSTRAINT [PK_KioskLocationRetailOutlets] PRIMARY KEY CLUSTERED 
(
	[KioskLocationID] ASC,
	[RetailOutletID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_KioskLocations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_KioskLocations](
	[KioskLocationID] [int] IDENTITY(1,1) NOT NULL,
	[Address1] [dbo].[Address] NULL,
	[Address2] [dbo].[Address] NULL,
	[Longitude] [dbo].[NullCode] NULL,
	[Latitude] [dbo].[NullCode] NULL,
	[Location] [dbo].[Remark] NULL,
	[MacAddress1] [dbo].[NullCode] NULL,
	[MacAddress2] [dbo].[NullCode] NULL,
	[CityID] [int] NULL,
	[CountryID] [int] NULL,
	[Remarks] [dbo].[Remark] NULL,
	[IsActive] [bit] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[LocationURL] [nvarchar](1000) NULL,
	[SendVerificationOTP] [bit] NULL,
	[PlusCode] [nvarchar](1000) NULL,
	[UserName] [nvarchar](250) NULL,
	[Password] [nvarchar](250) NULL,
	[NickName] [nvarchar](250) NULL,
 CONSTRAINT [PK_KioskLocations] PRIMARY KEY NONCLUSTERED 
(
	[KioskLocationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_KioskLogins]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_KioskLogins](
	[KioskLoginID] [int] IDENTITY(1,1) NOT NULL,
	[KioskLocationID] [int] NULL,
	[DeviceToken] [varchar](50) NULL,
	[ExpiryDate] [datetime] NULL,
	[Disabled] [bit] NULL,
	[DisabledTime] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[KioskLoginID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_KioskScreenLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_KioskScreenLanguages](
	[KioskScreenID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[KioskScreenName] [dbo].[Remark] NOT NULL,
	[ImageFile] [dbo].[NullDescription] NULL,
 CONSTRAINT [PK_KioskScreenLanguages] PRIMARY KEY NONCLUSTERED 
(
	[KioskScreenID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_KioskScreenMapping]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_KioskScreenMapping](
	[KioskLocationID] [int] NOT NULL,
	[KioskScreenID] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_KioskScreenMapping] PRIMARY KEY NONCLUSTERED 
(
	[KioskLocationID] ASC,
	[KioskScreenID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_KioskScreens]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_KioskScreens](
	[KioskScreenID] [int] NOT NULL,
	[KioskScreenName] [dbo].[Description] NOT NULL,
	[ImageFile] [dbo].[NullDescription] NULL,
 CONSTRAINT [PK_KioskScreens] PRIMARY KEY NONCLUSTERED 
(
	[KioskScreenID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_KioskUserMapping]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_KioskUserMapping](
	[KioskLocationID] [int] NOT NULL,
	[UserID] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_KioskUserMapping] PRIMARY KEY NONCLUSTERED 
(
	[KioskLocationID] ASC,
	[UserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Languages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Languages](
	[LanguageID] [int] IDENTITY(1,1) NOT NULL,
	[Language] [dbo].[Description] NOT NULL,
	[CssFilePath] [dbo].[Remark] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[IsDefaultLanguage] [bit] NOT NULL,
	[Direction] [char](3) NULL,
 CONSTRAINT [PK_Languages] PRIMARY KEY NONCLUSTERED 
(
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_LoginUsers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_LoginUsers](
	[LoginUserID] [bigint] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[SessionCode] [dbo].[Code] NOT NULL,
	[IPAddress] [dbo].[Code] NOT NULL,
	[HostName] [dbo].[Description] NOT NULL,
	[LoginTime] [datetime] NOT NULL,
	[LogoutTime] [datetime] NULL,
 CONSTRAINT [PK_LoginUsers] PRIMARY KEY NONCLUSTERED 
(
	[LoginUserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_LoyaltyPointRedemptions]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_LoyaltyPointRedemptions](
	[LoyaltyPointRedemptionID] [bigint] IDENTITY(1,1) NOT NULL,
	[RedemptionDate] [datetime] NOT NULL,
	[ConsumerID] [int] NOT NULL,
	[RedemptionPlanID] [int] NOT NULL,
	[Barcode] [dbo].[NullCode] NULL,
	[VerificationCode] [dbo].[NullPin] NULL,
	[Remarks] [dbo].[Remark] NULL,
	[IsVerified] [bit] NOT NULL,
	[VerificationUserID] [int] NULL,
 CONSTRAINT [PK_LoyaltyPointRedemptions] PRIMARY KEY NONCLUSTERED 
(
	[LoyaltyPointRedemptionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_LoyaltyPointSetups]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_LoyaltyPointSetups](
	[LoyaltyPointSetupID] [int] NOT NULL,
	[LoyaltyPointKey] [dbo].[Description] NOT NULL,
	[SetupValue] [dbo].[Amount] NOT NULL,
	[EditValue] [dbo].[NullAmount] NULL,
	[IsApproved] [bit] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[CheckerDate] [datetime] NULL,
	[CheckerUserID] [int] NULL,
 CONSTRAINT [PK_LoyaltyPointSetups] PRIMARY KEY NONCLUSTERED 
(
	[LoyaltyPointSetupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_MasterResources]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_MasterResources](
	[MasterResourceID] [int] IDENTITY(1,1) NOT NULL,
	[ScreenID] [int] NOT NULL,
	[ResourceKey] [dbo].[Description] NOT NULL,
	[ResourceValue] [dbo].[Description] NOT NULL,
 CONSTRAINT [PK_MasterResources] PRIMARY KEY NONCLUSTERED 
(
	[MasterResourceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_MenuLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_MenuLanguages](
	[MenuID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[Menu] [dbo].[Description] NOT NULL,
 CONSTRAINT [PK_MenuLanguages] PRIMARY KEY CLUSTERED 
(
	[MenuID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Menus]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Menus](
	[MenuID] [int] NOT NULL,
	[RootID] [int] NOT NULL,
	[MenuCode] [dbo].[Code] NOT NULL,
	[Menu] [dbo].[Description] NOT NULL,
	[ParentID] [int] NULL,
	[TargetURL] [dbo].[Remark] NULL,
	[IconTag] [tinyint] NULL,
	[SortOrder] [smallint] NOT NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_Menus] PRIMARY KEY NONCLUSTERED 
(
	[MenuID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UNK_Menus] UNIQUE NONCLUSTERED 
(
	[MenuCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_MessagePackTypes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_MessagePackTypes](
	[MessagePackTypeID] [int] NOT NULL,
	[MessagePackType] [dbo].[Description] NOT NULL,
	[HasCity] [bit] NOT NULL,
	[HasAgeGroup] [bit] NOT NULL,
	[HasGender] [bit] NOT NULL,
	[CanResend] [bit] NOT NULL,
	[ResendCount] [tinyint] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[AliasMessagePackType] [dbo].[Description] NULL,
 CONSTRAINT [PK_MessagePackTypes] PRIMARY KEY NONCLUSTERED 
(
	[MessagePackTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UNK_MessagePackTypes] UNIQUE NONCLUSTERED 
(
	[MessagePackType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_MessageTemplateLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_MessageTemplateLanguages](
	[MessageTemplateID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[TemplateTitle] [dbo].[Description] NOT NULL,
	[Template] [dbo].[Remark] NULL,
 CONSTRAINT [PK_MessageTemplateLanguages1] PRIMARY KEY CLUSTERED 
(
	[MessageTemplateID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_MessageTemplates]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_MessageTemplates](
	[MessageTemplateID] [int] IDENTITY(1,1) NOT NULL,
	[TemplateType] [tinyint] NULL,
	[IsActive] [bit] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
 CONSTRAINT [PK_MessageTemplates] PRIMARY KEY NONCLUSTERED 
(
	[MessageTemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Nationalities]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Nationalities](
	[NationalityID] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[DisplayOrder] [int] NULL,
 CONSTRAINT [PK_Nationalities] PRIMARY KEY NONCLUSTERED 
(
	[NationalityID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Notifications]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Notifications](
	[NotificationID] [bigint] IDENTITY(1,1) NOT NULL,
	[EServiceID] [int] NULL,
	[NotificationCount] [int] NOT NULL,
	[NotificationSend] [int] NULL,
	[NotificationRead] [int] NULL,
	[ResendCounter] [int] NOT NULL,
	[EBundleID] [int] NULL,
	[EServiceAddOnId] [int] NULL,
 CONSTRAINT [PK_Notifications] PRIMARY KEY NONCLUSTERED 
(
	[NotificationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_NotificationSendLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_NotificationSendLanguages](
	[NotificationSendID] [bigint] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[Subject] [dbo].[Remark] NULL,
	[Message] [nvarchar](max) NULL,
 CONSTRAINT [PK_NotificationSendLanguages] PRIMARY KEY CLUSTERED 
(
	[NotificationSendID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_NotificationSends]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_NotificationSends](
	[NotificationSendID] [bigint] IDENTITY(1,1) NOT NULL,
	[NotificationID] [bigint] NULL,
	[SendingDate] [datetime] NOT NULL,
	[SendingType] [tinyint] NOT NULL,
	[CityID] [int] NULL,
	[AgeGroupID] [int] NULL,
	[Gender] [tinyint] NULL,
	[SearchCount] [int] NOT NULL,
	[ScheduleDate] [datetime] NULL,
	[NotificationCount] [int] NOT NULL,
	[GeneralNotificationId] [bigint] NULL,
 CONSTRAINT [PK_NotificationSends] PRIMARY KEY NONCLUSTERED 
(
	[NotificationSendID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [ClusteredIndex-20170220-120626]    Script Date: 07/11/2021 17:05:57 ******/
CREATE CLUSTERED INDEX [ClusteredIndex-20170220-120626] ON [dbo].[coc_NotificationSends]
(
	[SendingDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Occupation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Occupation](
	[OccupationID] [int] IDENTITY(1,1) NOT NULL,
	[IsActive] [bit] NULL,
	[AddDate] [datetime] NULL,
	[EditDate] [datetime] NULL,
	[CreatedUserId] [int] NULL,
	[EditedUserId] [int] NULL,
 CONSTRAINT [PK_coc_Occupation] PRIMARY KEY CLUSTERED 
(
	[OccupationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_OccupationLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_OccupationLanguages](
	[OccupationLanguageID] [int] IDENTITY(1,1) NOT NULL,
	[AddDate] [datetime] NULL,
	[EditDate] [datetime] NULL,
	[CreatedUserId] [int] NULL,
	[EditedUserId] [int] NULL,
	[LanguageID] [int] NULL,
	[OccupationID] [int] NULL,
	[Occupation] [nvarchar](150) NULL,
	[Description] [nvarchar](250) NULL,
 CONSTRAINT [PK_coc_OcupationLanguages] PRIMARY KEY CLUSTERED 
(
	[OccupationLanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_OrderAddresses]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_OrderAddresses](
	[OrderAdressID] [bigint] IDENTITY(1,1) NOT NULL,
	[ConsumerID] [int] NULL,
	[Address] [nvarchar](max) NULL,
	[CityID] [int] NULL,
	[CountryID] [int] NULL,
	[State] [nvarchar](20) NULL,
	[PostalCode] [nvarchar](20) NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK_coc_OrderAddresses] PRIMARY KEY CLUSTERED 
(
	[OrderAdressID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_OTP]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_OTP](
	[OtpID] [int] IDENTITY(1,1) NOT NULL,
	[OtpTypeID] [int] NOT NULL,
	[Otp] [int] NOT NULL,
	[OTPDate] [datetime] NOT NULL,
	[OtpExpity] [datetime] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[IsVerified] [bit] NULL,
 CONSTRAINT [PK_OTP] PRIMARY KEY NONCLUSTERED 
(
	[OtpID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_PackagePricings]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_PackagePricings](
	[PackagePricingID] [int] IDENTITY(1,1) NOT NULL,
	[ServiceTypeID] [int] NOT NULL,
	[ServiceSubTypeID] [int] NULL,
	[MessagePackTypeID] [int] NOT NULL,
	[CompetitionID] [int] NULL,
	[PackFrom] [int] NOT NULL,
	[PackTo] [int] NOT NULL,
	[MessageRate] [dbo].[Amount] NOT NULL,
	[MessagePercentage] [dbo].[Percentage] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[EditPackFrom] [int] NOT NULL,
	[EditPackTo] [int] NOT NULL,
	[EditMessageRate] [dbo].[Amount] NOT NULL,
	[EditMessagePercentage] [dbo].[Percentage] NOT NULL,
	[IsApproved] [bit] NOT NULL,
	[CheckerDate] [datetime] NULL,
	[CheckerUserID] [int] NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_PackagePricings] PRIMARY KEY NONCLUSTERED 
(
	[PackagePricingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UNK_PackagePricings] UNIQUE NONCLUSTERED 
(
	[ServiceTypeID] ASC,
	[ServiceSubTypeID] ASC,
	[MessagePackTypeID] ASC,
	[CompetitionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Periods]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Periods](
	[PeriodID] [int] NOT NULL,
	[Periods] [dbo].[Name] NOT NULL,
	[FromDate] [datetime] NOT NULL,
	[ToDate] [datetime] NOT NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_Periods] PRIMARY KEY NONCLUSTERED 
(
	[PeriodID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_PreConsumerRegister]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_PreConsumerRegister](
	[PreConsumerID] [int] IDENTITY(1,1) NOT NULL,
	[PrimaryMobile] [dbo].[Mobile] NULL,
	[EmailID] [dbo].[Email] NULL,
	[CountryID] [int] NULL,
	[AddDate] [datetime] NOT NULL,
	[EditDate] [datetime] NULL,
	[OtpID] [int] NULL,
	[IsMobileVerified] [bit] NULL,
	[IsEmailVerified] [bit] NULL,
	[VerificationDate] [datetime] NULL,
	[IsVerified] [bit] NULL,
	[IsActive] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Coc_Pricing]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Coc_Pricing](
	[PricingID] [int] IDENTITY(1,1) NOT NULL,
	[PricingSourceTypeId] [int] NOT NULL,
	[PricingSourceId] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[IsPriceRangeRequired] [bit] NOT NULL,
	[Price] [decimal](18, 2) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[PricingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Coc_Pricing_log]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Coc_Pricing_log](
	[guid] [nvarchar](max) NULL,
	[PricingSourceTypeId] [int] NULL,
	[PricingSourceId] [int] NULL,
	[Amount] [decimal](18, 2) NULL,
	[Name] [nvarchar](200) NULL,
	[BarcodePurchaseId] [bigint] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Coc_PricingDetails]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Coc_PricingDetails](
	[PricingDetailId] [int] IDENTITY(1,1) NOT NULL,
	[PricingID] [int] NOT NULL,
	[RangeFrom] [bigint] NOT NULL,
	[RangeTo] [bigint] NOT NULL,
	[Price] [decimal](18, 2) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[PricingDetailId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_QuestionBanks]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_QuestionBanks](
	[QuestionBankID] [int] IDENTITY(1,1) NOT NULL,
	[ECouponID] [bigint] NOT NULL,
	[QuestionType] [int] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_QuestionBanks] PRIMARY KEY NONCLUSTERED 
(
	[QuestionBankID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_QuestionLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_QuestionLanguages](
	[QuestionBankID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[Question] [dbo].[Remark] NULL,
	[ShortQuestion] [nvarchar](100) NULL,
 CONSTRAINT [PK_QuestionLanguages] PRIMARY KEY CLUSTERED 
(
	[QuestionBankID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_QuestionOptionLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_QuestionOptionLanguages](
	[QuestionOptionID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[QuestionOption] [dbo].[Remark] NULL,
 CONSTRAINT [PK_QuestionOptionLanguages] PRIMARY KEY CLUSTERED 
(
	[QuestionOptionID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_QuestionOptions]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_QuestionOptions](
	[QuestionOptionID] [int] IDENTITY(1,1) NOT NULL,
	[QuestionBankID] [int] NOT NULL,
	[IsCorrect] [bit] NOT NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_QuestionOptions] PRIMARY KEY NONCLUSTERED 
(
	[QuestionOptionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_RedemptionLocations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_RedemptionLocations](
	[RedemptionLocationID] [int] IDENTITY(1,1) NOT NULL,
	[RedemptionPlanID] [int] NOT NULL,
	[CorporateID] [int] NOT NULL,
	[RetailOutletID] [int] NOT NULL,
 CONSTRAINT [PK_RedemptionLocations] PRIMARY KEY NONCLUSTERED 
(
	[RedemptionLocationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_RedemptionPlanLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_RedemptionPlanLanguages](
	[RedemptionPlanID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[RedemptionPlan] [dbo].[NullName] NULL,
 CONSTRAINT [PK_RedemptionPlanLanguages] PRIMARY KEY CLUSTERED 
(
	[RedemptionPlanID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_RedemptionPlans]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_RedemptionPlans](
	[RedemptionPlanID] [int] IDENTITY(1,1) NOT NULL,
	[RedeemTypeID] [tinyint] NOT NULL,
	[LoyaltyPoint] [int] NOT NULL,
	[LoyaltyAmount] [dbo].[NullAmount] NULL,
	[LoyaltyItem] [dbo].[NullName] NULL,
	[Remarks] [dbo].[Remark] NULL,
	[IsActive] [bit] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[EditLoyaltyPoint] [int] NULL,
	[EditLoyaltyAmount] [dbo].[NullAmount] NULL,
	[EditLoyaltyItem] [dbo].[NullName] NULL,
	[IsApproved] [bit] NOT NULL,
	[CheckerDate] [datetime] NULL,
	[CheckerUserID] [int] NULL,
 CONSTRAINT [PK_RedemptionPlans] PRIMARY KEY NONCLUSTERED 
(
	[RedemptionPlanID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Report_OutputParams]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Report_OutputParams](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ReportID] [bigint] NOT NULL,
	[OutputParamName] [nvarchar](500) NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_coc_Report_OutputParams] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ReportCommonFilters]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ReportCommonFilters](
	[CommonFilterID] [bigint] IDENTITY(1,1) NOT NULL,
	[DisplayLabelName_EN] [nvarchar](250) NULL,
	[ParameterControlType] [int] NULL,
	[ParameterColumnName] [nvarchar](100) NULL,
	[ParameterColumnDataType] [int] NULL,
	[ConditionQuery] [nvarchar](max) NULL,
	[CreatedBy] [bigint] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [bigint] NULL,
	[ModifiedDate] [datetime] NULL,
	[IsActive] [bit] NULL,
	[IsCompulsory] [bit] NULL,
	[RelationFilterID] [bigint] NULL,
	[ConditionQueryType] [int] NULL,
	[DisplayLabelName_AR] [nvarchar](250) NULL,
 CONSTRAINT [PK_coc_ReportCommonFilters] PRIMARY KEY CLUSTERED 
(
	[CommonFilterID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ReportFilters]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ReportFilters](
	[ReportFilterID] [bigint] IDENTITY(1,1) NOT NULL,
	[ReportID] [bigint] NOT NULL,
	[DisplayLabelName_EN] [nvarchar](250) NULL,
	[DisplayLabelName_AR] [nvarchar](250) NULL,
	[ParameterControlType] [int] NULL,
	[ParameterColumnName] [nvarchar](100) NULL,
	[ParameterColumnDataType] [int] NULL,
	[ConditionQuery] [nvarchar](max) NULL,
	[CreatedBy] [bigint] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [bigint] NULL,
	[ModifiedDate] [datetime] NULL,
	[IsActive] [bit] NULL,
	[IsCompulsory] [bit] NULL,
	[RelationFilterID] [bigint] NULL,
	[ConditionQueryType] [int] NULL,
 CONSTRAINT [PK_coc_ReportFilters] PRIMARY KEY CLUSTERED 
(
	[ReportFilterID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ReportMappingByRole]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ReportMappingByRole](
	[ReportMappingByRoleID] [bigint] IDENTITY(1,1) NOT NULL,
	[ReportID] [bigint] NULL,
	[RoleID] [bigint] NULL,
	[IsActive] [bit] NULL,
	[UserID] [bigint] NULL,
	[CreatedBy] [bigint] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [bigint] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_ReportMappingByRole] PRIMARY KEY CLUSTERED 
(
	[ReportMappingByRoleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Reports]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Reports](
	[ReportID] [bigint] IDENTITY(1,1) NOT NULL,
	[ReportName_EN] [nvarchar](100) NULL,
	[ReportName_AR] [nvarchar](100) NULL,
	[Description] [nvarchar](500) NULL,
	[DataModelType] [int] NULL,
	[DataModel] [nvarchar](max) NULL,
	[IsActive] [bit] NULL,
	[CreatedBy] [bigint] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [bigint] NULL,
	[ModifiedDate] [bigint] NULL,
	[AcceptCommonFilters] [bit] NULL,
 CONSTRAINT [PK_coc_Reports] PRIMARY KEY CLUSTERED 
(
	[ReportID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ResetPassword]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ResetPassword](
	[ResetPasswordID] [bigint] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[ByMobile] [bit] NOT NULL,
	[ByEmail] [bit] NOT NULL,
	[RequestTime] [datetime] NOT NULL,
	[OtpID] [int] NULL,
	[IsVerified] [bit] NOT NULL,
	[VerificationTime] [datetime] NULL,
 CONSTRAINT [PK_ResetPassword] PRIMARY KEY NONCLUSTERED 
(
	[ResetPasswordID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Resources]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Resources](
	[ResourceID] [int] IDENTITY(1,1) NOT NULL,
	[ScreenID] [int] NOT NULL,
	[ScreenViewID] [int] NULL,
	[LanguageID] [int] NOT NULL,
	[ResourceKey] [dbo].[NullDescription] NULL,
	[ResourceValue] [nvarchar](1000) NULL,
	[MasterResourceID] [int] NULL,
	[GridResourceID] [int] NULL,
	[ResourceText] [nvarchar](1000) NULL,
 CONSTRAINT [PK_Resources] PRIMARY KEY NONCLUSTERED 
(
	[ResourceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_RetailOutlets]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_RetailOutlets](
	[RetailOutletID] [int] IDENTITY(1,1) NOT NULL,
	[CorporateID] [int] NOT NULL,
	[ContactPerson] [nvarchar](200) NULL,
	[Address1] [dbo].[Address] NULL,
	[Address2] [dbo].[Address] NULL,
	[CountryID] [int] NULL,
	[CityID] [int] NULL,
	[Longitude] [dbo].[NullCode] NULL,
	[Latitude] [dbo].[NullCode] NULL,
	[Location] [dbo].[Remark] NULL,
	[IsActive] [bit] NOT NULL,
	[IsImported] [bit] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[LocationURL] [nvarchar](1000) NULL,
	[APIParticipationLimit] [int] NULL,
	[PlusCode] [nvarchar](1000) NULL,
	[ProximityValue] [decimal](10, 6) NULL,
 CONSTRAINT [PK_RetailOutlets] PRIMARY KEY NONCLUSTERED 
(
	[RetailOutletID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_RoleMenuAccess]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_RoleMenuAccess](
	[RoleID] [int] NOT NULL,
	[MenuID] [int] NOT NULL,
	[IsAccessible] [bit] NOT NULL,
 CONSTRAINT [PK_RoleMenuAccess] PRIMARY KEY NONCLUSTERED 
(
	[RoleID] ASC,
	[MenuID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Sadafco_BarcodesMapping]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Sadafco_BarcodesMapping](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[EncryptedBarcode] [nvarchar](150) NOT NULL,
	[DecryptedBarcode] [nvarchar](150) NOT NULL,
	[EserviceBarcodeID] [bigint] NOT NULL,
	[IsDeleted] [bit] NULL,
	[IsMapped] [bit] NULL,
 CONSTRAINT [PK_coc_Sadafco_BarcodesMapping] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Sadafco_Participations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Sadafco_Participations](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[EserviceBarcodeID] [bigint] NULL,
	[ECouponParticipationID] [bigint] NULL,
	[Barcode] [nvarchar](150) NOT NULL,
	[IsUsed] [bit] NULL,
	[UsedDate] [datetime] NULL,
	[IPAddress] [nvarchar](150) NULL,
	[MacAddress] [nvarchar](150) NULL,
 CONSTRAINT [PK_coc_Sadafco_Participations] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_SadafcoBarcodesFailure]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_SadafcoBarcodesFailure](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ConsumerID] [int] NULL,
	[GuestID] [int] NULL,
	[Barcode] [nvarchar](100) NULL,
	[ErrorMsg] [nvarchar](1000) NULL,
	[LogDate] [datetime] NULL,
 CONSTRAINT [PK_coc_SadafcoBarcodesFailure] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_SadafcoRegistrationFailure]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_SadafcoRegistrationFailure](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[EmailID] [nvarchar](100) NULL,
	[MobileNumber] [nvarchar](50) NULL,
	[ErrorMsg] [nvarchar](1000) NULL,
	[CreatedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_SadafcoRegistrationFailure] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Screens]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Screens](
	[ScreenID] [int] NOT NULL,
	[ScreenName] [dbo].[Description] NOT NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_Screens] PRIMARY KEY NONCLUSTERED 
(
	[ScreenID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ScreenViewColumns]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ScreenViewColumns](
	[ScreenViewColumnID] [int] IDENTITY(1,1) NOT NULL,
	[ScreenViewID] [int] NOT NULL,
	[ColumnName] [dbo].[Description] NOT NULL,
	[AliasName] [dbo].[Description] NOT NULL,
 CONSTRAINT [PK_ScreenViewColumns] PRIMARY KEY NONCLUSTERED 
(
	[ScreenViewColumnID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ScreenViews]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ScreenViews](
	[ScreenViewID] [int] IDENTITY(1,1) NOT NULL,
	[ViewName] [dbo].[Description] NOT NULL,
	[ScreenID] [int] NOT NULL,
	[TableName] [dbo].[Description] NOT NULL,
	[PrimaryKey] [dbo].[Description] NOT NULL,
	[IsSystem] [bit] NOT NULL,
 CONSTRAINT [PK_ScreenViews] PRIMARY KEY NONCLUSTERED 
(
	[ScreenViewID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ServiceKeys]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ServiceKeys](
	[ServiceKeyID] [int] IDENTITY(1,1) NOT NULL,
	[EServiceID] [int] NOT NULL,
	[IsAPIIntegrationEnabled] [bit] NULL,
	[ServiceKey] [nvarchar](200) NOT NULL,
	[IsActive] [bit] NULL,
	[CreatedBy] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_coc_ServiceKeys] PRIMARY KEY CLUSTERED 
(
	[ServiceKeyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ServiceTask]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ServiceTask](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TaskTypeId] [int] NOT NULL,
	[Date] [datetime] NOT NULL,
	[ExecuteDate] [datetime] NOT NULL,
	[UniqueId] [int] NOT NULL,
	[Parameters] [nvarchar](max) NULL,
	[UserId] [int] NOT NULL,
	[Status] [int] NOT NULL,
	[ExecutionStatus] [int] NULL,
	[Result] [nvarchar](500) NULL,
	[TaskData] [nvarchar](max) NULL,
	[RowStatus] [int] NOT NULL,
	[ErrorMsgEmailSend] [bit] NULL,
	[IsFailureNotificationAlreadySend] [bit] NULL,
	[IsRecurring] [bit] NULL,
 CONSTRAINT [PK_ServiceTask] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_ServiceTaskNotification]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_ServiceTaskNotification](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ServiceTaskId] [int] NULL,
	[UserId] [int] NULL,
	[Date] [datetime] NULL,
	[Message] [nvarchar](500) NOT NULL,
	[Status] [int] NULL,
	[Result] [nvarchar](max) NULL,
	[RowStatus] [int] NULL,
	[LanguageId] [int] NOT NULL,
	[ReadStatus] [bit] NOT NULL,
	[RedirectPage] [nvarchar](200) NULL,
	[RedirectParameter] [nvarchar](200) NULL,
 CONSTRAINT [PK_ServiceTaskNotification] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Settings]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Settings](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BaseCurrencyId] [bigint] NOT NULL,
	[SettingDescription] [nvarchar](500) NOT NULL,
	[VatPercentage] [decimal](18, 2) NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_SMSSchedule]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_SMSSchedule](
	[SMSID] [bigint] IDENTITY(1,1) NOT NULL,
	[ConsumerID] [int] NULL,
	[GuestID] [int] NULL,
	[SMSBody] [nvarchar](max) NULL,
	[MobileNumber] [nvarchar](20) NULL,
	[IsProcessed] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[SendDate] [datetime] NULL,
	[Status] [int] NULL,
	[NoOfTriesAttempted] [int] NULL,
 CONSTRAINT [PK_coc_SMSEmailSchedule] PRIMARY KEY CLUSTERED 
(
	[SMSID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_SocialMedia]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_SocialMedia](
	[SocialMediaID] [int] IDENTITY(1,1) NOT NULL,
	[SocialMediaName] [dbo].[NullDescription] NULL,
	[SocialMediaNameAR] [dbo].[NullDescription] NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[SocialMediaID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_SpecialBarcodes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_SpecialBarcodes](
	[SpecialBarcodID] [bigint] IDENTITY(1,1) NOT NULL,
	[EServiceBarcodeID] [bigint] NOT NULL,
	[ECouponID] [bigint] NOT NULL,
	[RetailOutletID] [int] NULL,
	[Barcode] [dbo].[NullDescription] NOT NULL,
	[IsUsed] [bit] NOT NULL,
	[AddedDate] [datetime] NOT NULL,
	[UsedDate] [datetime] NULL,
	[IsWinner] [bit] NOT NULL,
	[ECouponDrawID] [bigint] NULL,
 CONSTRAINT [PK_coc_SpecialBarcodes] PRIMARY KEY CLUSTERED 
(
	[SpecialBarcodID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_staging_retailoutlets]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_staging_retailoutlets](
	[CompetitionStagingID] [bigint] NOT NULL,
	[RetailOutletID] [int] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[COC_SystemSetups]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[COC_SystemSetups](
	[SystemSetupID] [int] NOT NULL,
	[SetupKey] [dbo].[Description] NOT NULL,
	[SetupValue] [dbo].[NullName] NULL,
	[GeneralNotificationTemplateID] [int] NULL,
 CONSTRAINT [PK_SystemSetups] PRIMARY KEY NONCLUSTERED 
(
	[SystemSetupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_TermLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_TermLanguages](
	[TermLanguagesID] [int] NOT NULL,
	[TermID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[Term] [nvarchar](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[TermLanguagesID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Terms]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Terms](
	[TermID] [int] NOT NULL,
	[Term] [nvarchar](max) NULL,
	[ConfigTemsEng] [nvarchar](max) NULL,
	[ConfigTemsArabic] [nvarchar](max) NULL,
	[TermsKey] [int] NULL,
 CONSTRAINT [PK_Terms] PRIMARY KEY NONCLUSTERED 
(
	[TermID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_TermsAndCondition]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_TermsAndCondition](
	[TermsID] [int] NOT NULL,
	[TermsAndConditionEnglish] [nvarchar](max) NULL,
	[TermsAndConditionArabic] [nvarchar](max) NULL,
	[TermsKey] [int] NULL,
	[TermsKeyDescription] [nvarchar](max) NULL,
	[IsActive] [bit] NULL,
	[CreatedBy] [bigint] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [bigint] NULL,
	[ModifiedOn] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[TermsID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Tickets]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Tickets](
	[TicketID] [int] IDENTITY(1,1) NOT NULL,
	[TicketDate] [datetime] NOT NULL,
	[EServiceEventID] [int] NOT NULL,
	[EServiceBarcodeID] [bigint] NULL,
	[MobileNumber] [dbo].[Mobile] NOT NULL,
	[GuestName] [dbo].[NullName] NULL,
	[ConsumerID] [int] NULL,
	[Amount] [dbo].[Amount] NOT NULL,
	[PaymentTypeID] [int] NOT NULL,
	[PaymentReferenceNumber] [dbo].[NullCode] NULL,
	[OtpID] [int] NULL,
	[IsVerified] [bit] NOT NULL,
	[VerificationUserID] [int] NULL,
	[VerificationTime] [datetime] NULL,
	[CustomerName] [dbo].[NullName] NULL,
	[CustomerMobile] [dbo].[Mobile] NULL,
	[Isprinted] [bit] NOT NULL,
 CONSTRAINT [PK_Tickets] PRIMARY KEY NONCLUSTERED 
(
	[TicketID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_TicketTemplates]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_TicketTemplates](
	[TicketTemplateID] [int] IDENTITY(1,1) NOT NULL,
	[CorporateID] [int] NULL,
	[TemplateName] [dbo].[Description] NOT NULL,
	[TicketDescription] [dbo].[Remark] NULL,
	[IsActive] [bit] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
 CONSTRAINT [PK_TicketTemplates] PRIMARY KEY NONCLUSTERED 
(
	[TicketTemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Tmp_ResultTable]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Tmp_ResultTable](
	[UniqueID] [int] IDENTITY(1,1) NOT NULL,
	[ECouponParticipationID] [bigint] NOT NULL,
	[Barcode] [nvarchar](100) NOT NULL,
	[ECouponID] [int] NOT NULL,
	[EServiceID] [int] NOT NULL,
	[ConsumerID] [int] NULL,
	[GuestID] [int] NULL,
	[ParticipationMobile] [varchar](15) NOT NULL,
	[ParticipationEmailID] [varchar](100) NULL,
	[ConsumerName] [nvarchar](100) NULL,
	[CorporateID] [int] NULL,
	[MembershipNumber] [varchar](30) NULL,
	[EmailSubject] [nvarchar](1000) NULL,
	[EmailBody] [nvarchar](1000) NULL,
	[SMS] [nvarchar](1000) NULL,
	[TypeID] [tinyint] NULL,
	[DrawID] [bigint] NOT NULL,
	[DrawPrizeID] [bigint] NOT NULL,
 CONSTRAINT [PK_coc_Tmp_ResultTable] PRIMARY KEY CLUSTERED 
(
	[UniqueID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_UserRole]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_UserRole](
	[RoleID] [int] NOT NULL,
	[Role] [dbo].[Description] NOT NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_UserRole] PRIMARY KEY NONCLUSTERED 
(
	[RoleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UNK_UserRole] UNIQUE NONCLUSTERED 
(
	[Role] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_Users]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_Users](
	[UserID] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [dbo].[Description] NOT NULL,
	[Password] [nvarchar](max) NULL,
	[RoleID] [int] NOT NULL,
	[MobileNumber] [dbo].[Mobile] NULL,
	[EmailID] [dbo].[Email] NULL,
	[PhoneNumber] [dbo].[Phone] NULL,
	[ResetRequired] [bit] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[EditdDate] [datetime] NULL,
	[FullName] [dbo].[NullName] NULL,
	[IsDeleted] [bit] NOT NULL,
	[Remarks] [nvarchar](max) NULL,
	[DeletedDate] [datetime] NULL,
	[DeleteBy] [bigint] NULL,
	[ReasonForDeleteFile] [nvarchar](500) NULL,
	[UserToken] [nvarchar](500) NULL,
 CONSTRAINT [PK_UserID] PRIMARY KEY NONCLUSTERED 
(
	[UserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UNK_Users1] UNIQUE NONCLUSTERED 
(
	[UserName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UNK_Users3] UNIQUE NONCLUSTERED 
(
	[EmailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_VersionUpdate]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_VersionUpdate](
	[VersionUpdateID] [bigint] IDENTITY(1,1) NOT NULL,
	[MajorVersionNo] [int] NOT NULL,
	[RevisionNo] [varchar](10) NULL,
	[DeviceType] [varchar](10) NOT NULL,
	[NeedUpdate] [bit] NOT NULL,
	[ForceUpdate] [bit] NOT NULL,
 CONSTRAINT [PK_coc_VersionUpdate] PRIMARY KEY CLUSTERED 
(
	[VersionUpdateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_VoucherTemplate]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_VoucherTemplate](
	[TemplateID] [int] IDENTITY(1,1) NOT NULL,
	[VoucherID] [int] NULL,
	[Logo] [nvarchar](200) NULL,
	[Position] [int] NULL,
	[ContentType] [varchar](50) NULL,
	[IsActive] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[UpdatedOn] [datetime] NULL,
	[UpdatedBy] [int] NULL,
 CONSTRAINT [PK_coc_VoucherTemplate] PRIMARY KEY CLUSTERED 
(
	[TemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_VoucherTypes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_VoucherTypes](
	[VoucherTypeID] [int] IDENTITY(1,1) NOT NULL,
	[VoucherTypeEN] [nvarchar](500) NULL,
	[VoucherTypeAR] [nvarchar](500) NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_coc_VoucherTypes] PRIMARY KEY CLUSTERED 
(
	[VoucherTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_WebNotificationLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_WebNotificationLanguages](
	[WebNotificationID] [bigint] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[WebNotificationMessage] [nvarchar](200) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[coc_WinnerVoucherMapping]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[coc_WinnerVoucherMapping](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[VoucherID] [int] NOT NULL,
	[ECouponWinnerID] [int] NOT NULL,
	[EServiceBarcodeID] [bigint] NOT NULL,
	[SendSMS] [bit] NOT NULL,
	[SendEmail] [bit] NOT NULL,
	[SendNotification] [bit] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
 CONSTRAINT [PK_coc_WinnerVoucherMapping] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[cocat_BarcodeConfigurations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[cocat_BarcodeConfigurations](
	[BarcodeConfigurationID] [int] NULL,
	[ServiceTypeID] [int] NULL,
	[BarcodeCombinationID] [int] NULL,
	[Sequence] [tinyint] NULL,
	[CombinationLength] [tinyint] NULL,
	[CombinationValue] [tinyint] NULL,
	[EditSequence] [tinyint] NULL,
	[EditCombinationLength] [tinyint] NULL,
	[EditCombinationValue] [tinyint] NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[IsApproved] [bit] NULL,
	[CheckerDate] [datetime] NULL,
	[CheckerUserID] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[cocat_CorporateUsers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[cocat_CorporateUsers](
	[CorporateUserID] [int] NULL,
	[CorporateNumber] [dbo].[NullCode] NULL,
	[EmployeeName] [dbo].[Name] NOT NULL,
	[UserID] [int] NULL,
	[CorporateID] [int] NULL,
	[RetailOutletID] [int] NULL,
	[MobileNumber] [dbo].[Mobile] NULL,
	[EmailID] [dbo].[Email] NULL,
	[AllowRedeeming] [bit] NULL,
	[IsActive] [bit] NULL,
	[AddDate] [datetime] NULL,
	[AddUserID] [int] NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[cocat_EServiceInvoices]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[cocat_EServiceInvoices](
	[EServiceInvoiceID] [int] NULL,
	[InvoiceNumber] [dbo].[Code] NOT NULL,
	[EServiceID] [int] NULL,
	[InvoiceDate] [datetime] NULL,
	[IsExtension] [bit] NULL,
	[NotificationCount] [int] NULL,
	[PackageAmount] [dbo].[Amount] NOT NULL,
	[PaymentTypeID] [int] NULL,
	[IsBarcodeGenerated] [bit] NULL,
	[VatAmount] [dbo].[Amount] NULL,
	[TotalAmount] [dbo].[Amount] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[cocat_EServiceLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[cocat_EServiceLanguages](
	[EServiceID] [int] NULL,
	[LanguageID] [int] NULL,
	[EService] [dbo].[Description] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[cocat_EServiceLocations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[cocat_EServiceLocations](
	[EServiceLocationID] [int] NULL,
	[EServiceID] [int] NULL,
	[RetailOutletID] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[cocat_EServices]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[cocat_EServices](
	[EServiceID] [int] NULL,
	[ServiceNumber] [dbo].[Code] NOT NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[CorporateID] [int] NULL,
	[ServiceTypeID] [int] NULL,
	[ServiceSubTypeID] [int] NULL,
	[CompetitionID] [int] NULL,
	[MessagePackTypeID] [int] NULL,
	[IsActive] [bit] NULL,
	[IsBarcodeUsed] [bit] NULL,
	[NotificationSend] [bit] NULL,
	[AddDate] [datetime] NULL,
	[AddUserID] [int] NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[cocat_LoyaltyPointSetups]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[cocat_LoyaltyPointSetups](
	[LoyaltyPointSetupID] [int] NULL,
	[LoyaltyPointKey] [dbo].[Description] NOT NULL,
	[SetupValue] [dbo].[Amount] NOT NULL,
	[EditValue] [dbo].[NullAmount] NULL,
	[IsApproved] [bit] NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[CheckerDate] [datetime] NULL,
	[CheckerUserID] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[cocat_PackagePricings]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[cocat_PackagePricings](
	[PackagePricingID] [int] NULL,
	[ServiceTypeID] [int] NULL,
	[ServiceSubTypeID] [int] NULL,
	[MessagePackTypeID] [int] NULL,
	[CompetitionID] [int] NULL,
	[PackFrom] [int] NULL,
	[PackTo] [int] NULL,
	[MessageRate] [dbo].[Amount] NOT NULL,
	[MessagePercentage] [dbo].[Percentage] NOT NULL,
	[IsActive] [bit] NULL,
	[AddDate] [datetime] NULL,
	[AddUserID] [int] NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[EditPackFrom] [int] NULL,
	[EditPackTo] [int] NULL,
	[EditMessageRate] [dbo].[Amount] NOT NULL,
	[EditMessagePercentage] [dbo].[Percentage] NOT NULL,
	[IsApproved] [bit] NULL,
	[CheckerDate] [datetime] NULL,
	[CheckerUserID] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[cocat_RedemptionLocations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[cocat_RedemptionLocations](
	[RedemptionLocationID] [int] NULL,
	[RedemptionPlanID] [int] NULL,
	[CorporateID] [int] NULL,
	[RetailOutletID] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[cocat_RedemptionPlanLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[cocat_RedemptionPlanLanguages](
	[RedemptionPlanID] [int] NULL,
	[LanguageID] [int] NULL,
	[RedemptionPlan] [dbo].[NullName] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[cocat_RedemptionPlans]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[cocat_RedemptionPlans](
	[RedemptionPlanID] [int] NULL,
	[RedeemTypeID] [tinyint] NULL,
	[LoyaltyPoint] [int] NULL,
	[LoyaltyAmount] [dbo].[NullAmount] NULL,
	[LoyaltyItem] [dbo].[NullName] NULL,
	[Remarks] [dbo].[Remark] NULL,
	[IsActive] [bit] NULL,
	[AddDate] [datetime] NULL,
	[AddUserID] [int] NULL,
	[IsApproved] [bit] NULL,
	[EditLoyaltyPoint] [int] NULL,
	[EditLoyaltyAmount] [dbo].[NullAmount] NULL,
	[EditLoyaltyItem] [dbo].[NullName] NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[CheckerDate] [datetime] NULL,
	[CheckerUserID] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[cocat_RetailOutletLanguages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[cocat_RetailOutletLanguages](
	[RetailOutletID] [int] NULL,
	[LanguageID] [int] NULL,
	[RetailOutlet] [dbo].[Description] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[cocat_RetailOutlets]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[cocat_RetailOutlets](
	[RetailOutletID] [int] NULL,
	[CorporateID] [int] NULL,
	[ContactPerson] [dbo].[Name] NOT NULL,
	[Address1] [dbo].[Address] NULL,
	[Address2] [dbo].[Address] NULL,
	[CountryID] [int] NULL,
	[CityID] [int] NULL,
	[Longitude] [dbo].[NullCode] NULL,
	[Latitude] [dbo].[NullCode] NULL,
	[Location] [dbo].[Remark] NULL,
	[IsActive] [bit] NULL,
	[IsImported] [bit] NULL,
	[AddDate] [datetime] NULL,
	[AddUserID] [int] NULL,
	[EditDate] [datetime] NULL,
	[EditUserID] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[cocat_Users]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[cocat_Users](
	[UserID] [int] NULL,
	[UserName] [dbo].[Description] NOT NULL,
	[Password] [nvarchar](max) NULL,
	[FullName] [dbo].[NullName] NULL,
	[RoleID] [int] NULL,
	[MobileNumber] [dbo].[Mobile] NULL,
	[EmailID] [dbo].[Email] NULL,
	[PhoneNumber] [dbo].[Phone] NULL,
	[ResetRequired] [bit] NULL,
	[IsActive] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[EditdDate] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[core_coc_ContactUs]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_coc_ContactUs](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ContactType] [int] NULL,
	[Subject] [nvarchar](100) NULL,
	[Name] [varchar](200) NULL,
	[Email] [nvarchar](100) NULL,
	[City] [nvarchar](100) NULL,
	[ContactNumber] [nvarchar](50) NULL,
	[Question] [nvarchar](max) NULL,
	[CreatedDate] [datetime] NULL,
 CONSTRAINT [PK_core_coc_ContactUs] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[core_coc_Email_sending_log]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_coc_Email_sending_log](
	[EmailSendingId] [bigint] IDENTITY(1,1) NOT NULL,
	[MessageBody] [nvarchar](max) NULL,
	[TemplateID] [bigint] NULL,
	[Subject] [nvarchar](max) NULL,
	[From] [varchar](100) NULL,
	[To] [varchar](100) NULL,
	[Cc] [varchar](100) NULL,
	[AddedDate] [datetime] NULL,
	[ScreenName] [varchar](50) NULL,
	[ProcessName] [varchar](50) NULL,
	[Status] [int] NULL,
	[SentDate] [datetime] NULL,
	[LoggedInUser] [varchar](50) NULL,
 CONSTRAINT [PK_core_coc_Email_sending_log] PRIMARY KEY CLUSTERED 
(
	[EmailSendingId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[core_coc_InvoiceDetails]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_coc_InvoiceDetails](
	[InvoiceDetailID] [bigint] IDENTITY(1,1) NOT NULL,
	[InvoiceID] [bigint] NOT NULL,
	[ServiceTypeID] [int] NULL,
	[BarcodePackagePricingsID] [int] NULL,
	[NumberOfBarcodes] [bigint] NULL,
	[UnitCost] [dbo].[Amount] NULL,
	[VatAmount] [dbo].[Amount] NULL,
	[TotalAmount] [dbo].[Amount] NULL,
	[EServiceID] [int] NULL,
 CONSTRAINT [PK_core_coc_InvoiceDetails] PRIMARY KEY CLUSTERED 
(
	[InvoiceDetailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[core_coc_Invoices]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_coc_Invoices](
	[InvoiceID] [bigint] IDENTITY(1,1) NOT NULL,
	[InvoiceNumber] [dbo].[Code] NOT NULL,
	[CorporateID] [int] NOT NULL,
	[TotalAmount] [dbo].[Amount] NOT NULL,
	[VatAmount] [dbo].[Amount] NOT NULL,
	[Status] [int] NOT NULL,
	[AddUserID] [int] NOT NULL,
	[AddDate] [datetime] NOT NULL,
	[EditUserID] [int] NULL,
	[EditDate] [datetime] NULL,
 CONSTRAINT [PK_core_coc_Invoices] PRIMARY KEY CLUSTERED 
(
	[InvoiceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[core_coc_Mall]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_coc_Mall](
	[MallID] [int] IDENTITY(1,1) NOT NULL,
	[MallName_EN] [nvarchar](200) NULL,
	[MallName_AR] [nvarchar](200) NULL,
	[MallImage] [nvarchar](200) NULL,
	[IsActive] [bit] NULL,
	[TermsAndConditions_EN] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[CountryID] [int] NOT NULL,
	[CityID] [int] NOT NULL,
	[LocationUrl] [nvarchar](200) NULL,
	[TermsAndConditions_AR] [nvarchar](max) NULL,
	[CreatedBy] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_core_coc_Mall] PRIMARY KEY CLUSTERED 
(
	[MallID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Core_coc_Menu]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Core_coc_Menu](
	[MenuID] [int] IDENTITY(1,1) NOT NULL,
	[MenuLabel_EN] [nvarchar](100) NULL,
	[MenuLabel_AR] [nvarchar](100) NULL,
	[MenuDescription] [varchar](500) NULL,
	[ParentMenuID] [int] NULL,
	[ScreenID] [int] NULL,
	[MenuType] [int] NULL,
	[IsActive] [bit] NULL,
	[IsSystem] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
	[CssClass] [nvarchar](50) NULL,
PRIMARY KEY CLUSTERED 
(
	[MenuID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[core_coc_RoleMenuMapping]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_coc_RoleMenuMapping](
	[RoleMenuMappingID] [int] IDENTITY(1,1) NOT NULL,
	[RoleID] [int] NULL,
	[MenuID] [int] NULL,
	[ScreenPermission] [int] NULL,
	[Remarks] [varchar](500) NULL,
	[IsActive] [bit] NULL,
	[IsSystem] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[RoleMenuMappingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[core_coc_Screen]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_coc_Screen](
	[ScreenID] [int] IDENTITY(1,1) NOT NULL,
	[ScreenName_EN] [nvarchar](100) NULL,
	[ScreenName_AR] [nvarchar](100) NULL,
	[ActionName] [varchar](100) NULL,
	[ControllerName] [varchar](100) NULL,
	[IsActive] [bit] NULL,
	[ScreenType] [int] NULL,
	[AdditionalData] [nvarchar](100) NULL,
	[CreatedBy] [int] NULL,
	[CreatedDate] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[ScreenID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[core_coc_temp_Consumers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_coc_temp_Consumers](
	[TempConsumerID] [bigint] IDENTITY(1,1) NOT NULL,
	[ConsumerID] [int] NOT NULL,
	[EmailID] [dbo].[Email] NULL,
	[MobileNumber] [varchar](100) NULL,
	[IsMobileUpdated] [bit] NULL,
	[IsEmailUpdated] [bit] NULL,
	[FullName] [nvarchar](100) NULL,
	[CountryID] [bigint] NULL,
	[CityID] [int] NULL,
	[Gender] [smallint] NULL,
	[MobileOtpID] [int] NULL,
	[EmailOtpID] [int] NULL,
	[BirthDate] [varchar](100) NULL,
	[NationalityID] [int] NULL,
	[UserIdentityTypeID] [int] NULL,
	[UserIdentityNumber] [nvarchar](100) NULL,
	[OtpInitiateDateTime] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[TempConsumerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[core_coc_Terms]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_coc_Terms](
	[TermAndConditionID] [int] IDENTITY(1,1) NOT NULL,
	[TermAndConditionTypeID] [int] NOT NULL,
	[TermAndConditionTypeName] [nvarchar](200) NULL,
	[ConfigTemsEng] [nvarchar](max) NULL,
	[ConfigTemsArabic] [nvarchar](max) NULL,
	[ShortConfigTemsEng] [nvarchar](max) NULL,
	[ShortConfigTemsArabic] [nvarchar](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[TermAndConditionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[core_coc_TransCorporateBarcodes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_coc_TransCorporateBarcodes](
	[TransCorporateBarcodesID] [bigint] IDENTITY(1,1) NOT NULL,
	[CorporateID] [int] NOT NULL,
	[NumberOfBarcodes] [bigint] NULL,
	[TransactionType] [int] NOT NULL,
	[EServiceID] [int] NULL,
	[TransactionDate] [datetime] NOT NULL,
	[Remarks] [nvarchar](1000) NULL,
	[NewBalance] [dbo].[Amount] NULL,
	[InvoiceDetailID] [bigint] NULL,
 CONSTRAINT [PK_core_coc_TransCorporateBarcodes] PRIMARY KEY CLUSTERED 
(
	[TransCorporateBarcodesID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[GeneralNotification]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GeneralNotification](
	[GenerateNotificationId] [bigint] IDENTITY(1,1) NOT NULL,
	[ScheduleFromDate] [datetime] NULL,
	[ScheduleToDate] [datetime] NULL,
	[IsActive] [bit] NULL,
	[BrodaCast] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[CreatedBy] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[GenerateNotificationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[jcci_Competition]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[jcci_Competition](
	[CompetitionID] [int] IDENTITY(1,1) NOT NULL,
	[ReferenceNumber] [dbo].[Name] NOT NULL,
	[MembershipID] [numeric](18, 0) NULL,
	[CRNumber] [dbo].[Name] NOT NULL,
	[CorporateName] [dbo].[Name] NOT NULL,
	[RequesterName] [dbo].[Name] NOT NULL,
	[RequesterEmail] [dbo].[Email] NOT NULL,
	[RequesterMobile] [dbo].[Mobile] NOT NULL,
	[CompetitionName] [dbo].[Name] NOT NULL,
	[CompetitionStartDate] [datetime] NOT NULL,
	[CompetitionEndDate] [datetime] NOT NULL,
	[NumberofCopons] [int] NULL,
	[AddDate] [datetime] NOT NULL,
	[AddUser] [dbo].[Name] NOT NULL,
	[EditDate] [datetime] NULL,
	[EditUser] [dbo].[Name] NULL,
	[IsPaid] [bit] NOT NULL,
	[IsUsed] [bit] NOT NULL,
	[EServiceID] [int] NULL,
	[InvoiceNumber] [dbo].[Name] NULL,
	[InvoiceAmount] [dbo].[Amount] NULL,
	[QRCode] [dbo].[Name] NULL,
	[PaymentReference] [dbo].[Name] NULL,
	[PaymentExpiry] [datetime] NULL,
	[PaymentStatus] [int] NULL,
	[LastPaymentStatusCheckDate] [datetime] NULL,
	[LastPaymentStatusChangeDate] [datetime] NULL,
	[iseCoponCustomer] [bit] NULL,
 CONSTRAINT [PK_jcci_Competition] PRIMARY KEY NONCLUSTERED 
(
	[CompetitionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[jcci_Competition_Award]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[jcci_Competition_Award](
	[AwardID] [bigint] IDENTITY(1,1) NOT NULL,
	[CompetitionID] [int] NOT NULL,
	[Name] [dbo].[Name] NOT NULL,
	[Number] [int] NOT NULL,
	[Value] [dbo].[Name] NOT NULL,
	[AddDate] [datetime] NOT NULL,
 CONSTRAINT [PK_jcci_Competition_Award] PRIMARY KEY NONCLUSTERED 
(
	[AwardID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[jcci_Competition_Branch]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[jcci_Competition_Branch](
	[BranchID] [bigint] IDENTITY(1,1) NOT NULL,
	[CompetitionID] [int] NOT NULL,
	[GUID] [dbo].[Name] NOT NULL,
	[BranchName] [dbo].[Name] NOT NULL,
	[Location] [dbo].[Name] NOT NULL,
	[AddDate] [datetime] NOT NULL,
 CONSTRAINT [PK_jcci_Competition_Branch] PRIMARY KEY NONCLUSTERED 
(
	[BranchID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[jcci_Competition_Draw]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[jcci_Competition_Draw](
	[DrawID] [bigint] IDENTITY(1,1) NOT NULL,
	[CompetitionID] [int] NOT NULL,
	[NumberOfDraws] [int] NOT NULL,
	[DateOfDraw] [datetime] NOT NULL,
	[LocationOfDraw] [dbo].[Name] NOT NULL,
	[AddDate] [datetime] NOT NULL,
 CONSTRAINT [PK_jcci_Competition_Draw] PRIMARY KEY NONCLUSTERED 
(
	[DrawID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LOC_EserviceBarcode]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LOC_EserviceBarcode](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[EncryptBarcode] [nvarchar](200) NULL,
	[Barcode] [nvarchar](50) NULL,
	[IsDelete] [bit] NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK_LOC_EserviceBarcode] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Sheet1$]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Sheet1$](
	[DropDownType] [float] NULL,
	[DropDownTypeName] [nvarchar](255) NULL,
	[DataValueField] [float] NULL,
	[DataTextField_EN] [nvarchar](255) NULL,
	[DataTextField_AR] [nvarchar](255) NULL,
	[F6] [nvarchar](255) NULL,
	[F7] [nvarchar](255) NULL,
	[F8] [nvarchar](255) NULL,
	[F9] [nvarchar](255) NULL,
	[F10] [nvarchar](255) NULL,
	[F11] [nvarchar](255) NULL,
	[F12] [nvarchar](255) NULL,
	[F13] [nvarchar](255) NULL,
	[F14] [nvarchar](255) NULL,
	[F15] [nvarchar](255) NULL,
	[F16] [nvarchar](255) NULL,
	[F17] [nvarchar](255) NULL,
	[F18] [nvarchar](255) NULL,
	[F19] [nvarchar](255) NULL,
	[F20] [nvarchar](255) NULL,
	[F21] [nvarchar](255) NULL,
	[F22] [nvarchar](255) NULL,
	[F23] [nvarchar](255) NULL,
	[F24] [nvarchar](255) NULL,
	[F25] [nvarchar](255) NULL,
	[F26] [nvarchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[temp]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[temp](
	[tempdata] [varchar](100) NULL,
	[tempdata1] [varchar](100) NULL,
	[arabicdata] [nvarchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[temp_MobileNumbers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[temp_MobileNumbers](
	[MobileNumber] [varchar](20) NOT NULL,
	[Name] [nvarchar](100) NULL,
	[rowID] [bigint] IDENTITY(1,1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[temp_MobileNumbersLatest]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[temp_MobileNumbersLatest](
	[MobileNumber] [varchar](20) NOT NULL,
	[Name] [nvarchar](100) NULL,
	[rowID] [bigint] IDENTITY(1,1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[temp_MobileNumbersNew]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[temp_MobileNumbersNew](
	[MobileNumber] [varchar](20) NOT NULL,
	[Name] [nvarchar](100) NULL,
	[rowID] [bigint] IDENTITY(1,1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TempUploadParticipations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TempUploadParticipations](
	[TempUploadParticipationsID] [bigint] IDENTITY(1,1) NOT NULL,
	[ECouponID] [bigint] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[Mobile] [dbo].[Mobile] NULL,
	[EmailID] [dbo].[Email] NULL,
	[UploadDate] [datetime] NULL,
	[RefNo] [varchar](20) NULL,
	[Barcode] [nvarchar](100) NULL,
	[BarcodeEnc] [nvarchar](100) NULL,
	[ParticipationDate] [datetime] NULL,
	[Age] [int] NULL,
	[Gender] [int] NULL,
	[RetailOutletID] [int] NULL,
	[Other] [varchar](50) NULL,
 CONSTRAINT [PK_TempUploadParticipations] PRIMARY KEY NONCLUSTERED 
(
	[TempUploadParticipationsID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[testbarcodedata]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[testbarcodedata](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[Barcode] [nvarchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tmp_Data]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tmp_Data](
	[Email] [nvarchar](100) NULL,
	[Mobile] [varchar](20) NULL,
	[Name] [nvarchar](100) NULL,
	[Sl] [int] NULL,
	[City] [nvarchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tmp_EmailNeeds]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tmp_EmailNeeds](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[mobile] [varchar](100) NULL,
	[email] [varchar](100) NULL,
	[email1] [varchar](100) NULL,
 CONSTRAINT [PK_tmp_EmailNeeds] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UploadParticipationAudit]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UploadParticipationAudit](
	[UploadParticipationAuditID] [bigint] IDENTITY(1,1) NOT NULL,
	[FileName] [nvarchar](500) NOT NULL,
	[Status] [int] NOT NULL,
	[NoOfRecordsInExcel] [int] NULL,
	[NoOfRecordsUploaded] [int] NULL,
	[NoOfRecordsProcessed] [int] NULL,
	[UploadedBy] [int] NOT NULL,
	[UploadedDate] [datetime] NOT NULL,
	[UploadedFileName] [nvarchar](500) NOT NULL,
	[CorporateID] [int] NULL,
 CONSTRAINT [PK_UploadParticipationAudit] PRIMARY KEY CLUSTERED 
(
	[UploadParticipationAuditID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UploadParticipationInvalidData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UploadParticipationInvalidData](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[UploadParticipationAuditID] [bigint] NULL,
	[ECouponID] [bigint] NOT NULL,
	[Name] [nvarchar](100) NULL,
	[Mobile] [dbo].[Mobile] NULL,
	[EmailID] [dbo].[Email] NULL,
	[UploadDate] [datetime] NULL,
	[RefNo] [varchar](20) NULL,
	[RetailOutletID] [int] NULL,
	[Gender] [int] NULL,
	[Age] [int] NULL,
	[ErrorMessage] [nvarchar](500) NULL,
 CONSTRAINT [PK_UploadParticipationInvalidData] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [NonClusteredIndex-20210429-171834]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20210429-171834] ON [dbo].[coc_APIRequestLog]
(
	[CorporateID] ASC,
	[APIKey] ASC,
	[ServiceKey] ASC,
	[CompetitionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [NonClusteredIndex-20200827-172505]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20200827-172505] ON [dbo].[coc_CheckVersion]
(
	[CheckVersionID] ASC,
	[ConsumerID] ASC,
	[LanguageID] ASC,
	[DeviceType] ASC,
	[Timestamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_CityLanguages_City]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IDX_CityLanguages_City] ON [dbo].[coc_CityLanguages]
(
	[City] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [Idx_coc_ConsumerNotifications_CustomerId]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [Idx_coc_ConsumerNotifications_CustomerId] ON [dbo].[coc_ConsumerNotifications]
(
	[ConsumerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [Idx_coc_ConsumerNotifications_NotificationSendID]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [Idx_coc_ConsumerNotifications_NotificationSendID] ON [dbo].[coc_ConsumerNotifications]
(
	[NotificationSendID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [Idx_coc_ConsumerNotifications_PushNotified]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [Idx_coc_ConsumerNotifications_PushNotified] ON [dbo].[coc_ConsumerNotifications]
(
	[NotificationSendID] ASC,
	[PushNotified] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [Idx_coc_ConsumerNotifications_SendPushNotification]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [Idx_coc_ConsumerNotifications_SendPushNotification] ON [dbo].[coc_ConsumerNotifications]
(
	[NotificationSendID] ASC,
	[SendPushNotification] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NonClusteredIndex-20170220-120729]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20170220-120729] ON [dbo].[coc_ConsumerNotifications]
(
	[NotificationSendID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NonClusteredIndex-20200827-173042]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20200827-173042] ON [dbo].[coc_ConsumerNotifications]
(
	[NotificationSendID] ASC,
	[ConsumerID] ASC,
	[SendDate] ASC,
	[IsPushed] ASC,
	[SendPushNotification] ASC,
	[PushNotified] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_Consumers_EmailID]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IDX_Consumers_EmailID] ON [dbo].[coc_Consumers]
(
	[EmailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_Consumers_PrimaryMobile]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IDX_Consumers_PrimaryMobile] ON [dbo].[coc_Consumers]
(
	[PrimaryMobile] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NonClusteredIndex-20190625-180413]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20190625-180413] ON [dbo].[coc_Consumers]
(
	[CityID] ASC,
	[CountryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [NonClusteredIndex-20200827-172814]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20200827-172814] ON [dbo].[coc_Consumers]
(
	[FirstName] ASC,
	[SecondName] ASC,
	[FamilyName] ASC,
	[PrimaryMobile] ASC,
	[EmailID] ASC,
	[IsVerified] ASC,
	[IsActive] ASC,
	[OtpID] ASC,
	[IsDeleted] ASC,
	[StatusID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [Promocode_unique]    Script Date: 07/11/2021 17:05:57 ******/
CREATE UNIQUE NONCLUSTERED INDEX [Promocode_unique] ON [dbo].[coc_core_promocodes]
(
	[PromoCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_Corporates_EmailID]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IDX_Corporates_EmailID] ON [dbo].[coc_Corporates]
(
	[EmailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_Corporates_Mobile]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IDX_Corporates_Mobile] ON [dbo].[coc_Corporates]
(
	[MobileNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_CorporateUsers_EmailID]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IDX_CorporateUsers_EmailID] ON [dbo].[coc_CorporateUsers]
(
	[EmailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_CorporateUsers_Mobile]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IDX_CorporateUsers_Mobile] ON [dbo].[coc_CorporateUsers]
(
	[MobileNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_CountryLanguages_Country]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IDX_CountryLanguages_Country] ON [dbo].[coc_CountryLanguages]
(
	[Country] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [coc_ECouponDrawLanguages_Resource]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [coc_ECouponDrawLanguages_Resource] ON [dbo].[coc_ECouponDrawLanguages]
(
	[ResourceKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_coc_ECouponPrizesLanguages_Resource]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IX_coc_ECouponPrizesLanguages_Resource] ON [dbo].[coc_ECouponDrawLanguages]
(
	[ECouponDrawID] ASC,
	[ResourceKey] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NonClusteredIndex-20190625-175921]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20190625-175921] ON [dbo].[coc_ECouponParticipations]
(
	[GuestID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [NonClusteredIndex-20190625-180003]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20190625-180003] ON [dbo].[coc_ECouponParticipations]
(
	[ParticipationMobile] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NonClusteredIndex-20190625-180039]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20190625-180039] ON [dbo].[coc_ECouponParticipations]
(
	[ConsumerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NonClusteredIndex-20190625-180057]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20190625-180057] ON [dbo].[coc_ECouponParticipations]
(
	[ParticipationDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [NonClusteredIndex-20190625-180915]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20190625-180915] ON [dbo].[coc_ECouponParticipations]
(
	[ParticipationDate] ASC,
	[ParticipationMobile] ASC,
	[ParticipationEmailID] ASC,
	[ConsumerID] ASC,
	[GuestID] ASC,
	[RetailOutletID] ASC,
	[KioskID] ASC,
	[CorporateID] ASC,
	[IsFromCompetitionLink] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_coc_ECouponPrizesLanguages_Resource]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IX_coc_ECouponPrizesLanguages_Resource] ON [dbo].[coc_ECouponPrizesLanguages]
(
	[ECouponPrizeID] ASC,
	[ResourceKey] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_ECouponProducts_ProductCode]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IDX_ECouponProducts_ProductCode] ON [dbo].[coc_ECouponProducts]
(
	[ProductCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_ECouponWinners_1]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IDX_ECouponWinners_1] ON [dbo].[coc_ECouponWinners]
(
	[ECouponPrizeID] ASC,
	[MobileNumber] ASC,
	[Email] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [COC_EServicecsBarcodes_DistributorCorproateID]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [COC_EServicecsBarcodes_DistributorCorproateID] ON [dbo].[coc_EServiceBarcodes]
(
	[DistributorCorporateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_EServiceBarcodes_Barcode]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IDX_EServiceBarcodes_Barcode] ON [dbo].[coc_EServiceBarcodes]
(
	[Barcode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NonClusteredIndex-20171014-092216]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20171014-092216] ON [dbo].[coc_EServiceBarcodes]
(
	[NotificationID] ASC,
	[IsUsed] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NonClusteredIndex-20171014-092641]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20171014-092641] ON [dbo].[coc_EServiceBarcodes]
(
	[NotificationID] ASC,
	[EVoucherID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [NonClusteredIndex-20190806-122242]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20190806-122242] ON [dbo].[coc_EServiceBarcodes]
(
	[EServiceBarcodeID] ASC,
	[NotificationID] ASC,
	[IsUsed] ASC,
	[AsignedMoile] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [NonClusteredIndex-20200512-233549]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20200512-233549] ON [dbo].[coc_EServiceBarcodes]
(
	[EServiceBarcodeID] ASC,
	[IsUsed] ASC,
	[AsignedMoile] ASC,
	[ConsumerID] ASC,
	[GuestID] ASC,
	[NotificationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [NonClusteredIndex-20200512-233938]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20200512-233938] ON [dbo].[coc_EServiceBarcodes]
(
	[EServiceBarcodeID] DESC,
	[NotificationID] ASC,
	[IsUsed] ASC,
	[AsignedMoile] ASC,
	[ConsumerID] ASC,
	[GuestID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [NonClusteredIndex-20200826-222717]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20200826-222717] ON [dbo].[coc_EServiceBarcodes]
(
	[NotificationID] ASC,
	[IsUsed] ASC,
	[AsignedMoile] ASC,
	[AsignedEmailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NonClusteredIndex-20211012-135126]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20211012-135126] ON [dbo].[coc_EServiceBarcodes]
(
	[EVoucherID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_EServiceLanguages_EService]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IDX_EServiceLanguages_EService] ON [dbo].[coc_EServiceLanguages]
(
	[EService] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [NonClusteredIndex-20190625-181230]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20190625-181230] ON [dbo].[coc_Guests]
(
	[PrimaryMobile] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [NonClusteredIndex-20190625-181250]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20190625-181250] ON [dbo].[coc_Guests]
(
	[EmailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [NonClusteredIndex-20190625-181316]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20190625-181316] ON [dbo].[coc_Guests]
(
	[PrimaryMobile] ASC,
	[EmailID] ASC,
	[Gender] ASC,
	[CountryID] ASC,
	[CityID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_MasterResources_ResourceKey]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IDX_MasterResources_ResourceKey] ON [dbo].[coc_MasterResources]
(
	[ResourceKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [Idx_coc_NotificationSendLanguages_LanguageID]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [Idx_coc_NotificationSendLanguages_LanguageID] ON [dbo].[coc_NotificationSendLanguages]
(
	[NotificationSendID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [Idx_coc_NotificationSends_NotificationID]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [Idx_coc_NotificationSends_NotificationID] ON [dbo].[coc_NotificationSends]
(
	[NotificationSendID] ASC,
	[NotificationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [Idx_coc_NotificationSends_SendingDate]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [Idx_coc_NotificationSends_SendingDate] ON [dbo].[coc_NotificationSends]
(
	[NotificationSendID] ASC,
	[SendingDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NonClusteredIndex-20200822-213037]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20200822-213037] ON [dbo].[coc_OTP]
(
	[Otp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_Resources_ResourceKeyLanguageID]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IDX_Resources_ResourceKeyLanguageID] ON [dbo].[coc_Resources]
(
	[LanguageID] ASC,
	[ResourceKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [NonClusteredIndex-20190908-133055]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20190908-133055] ON [dbo].[coc_Resources]
(
	[ScreenID] ASC,
	[ScreenViewID] ASC,
	[LanguageID] ASC,
	[ResourceKey] ASC,
	[MasterResourceID] ASC,
	[GridResourceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_RetailOutletLanguages_RetailOutlet]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IDX_RetailOutletLanguages_RetailOutlet] ON [dbo].[coc_RetailOutletLanguages]
(
	[RetailOutlet] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NonClusteredIndex-20190531-155818]    Script Date: 07/11/2021 17:05:57 ******/
CREATE UNIQUE NONCLUSTERED INDEX [NonClusteredIndex-20190531-155818] ON [dbo].[coc_Sadafco_BarcodesMapping]
(
	[EserviceBarcodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [NonClusteredIndex-20190531-155848]    Script Date: 07/11/2021 17:05:57 ******/
CREATE UNIQUE NONCLUSTERED INDEX [NonClusteredIndex-20190531-155848] ON [dbo].[coc_Sadafco_BarcodesMapping]
(
	[DecryptedBarcode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NonClusteredIndex-20190531-160621]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20190531-160621] ON [dbo].[coc_Sadafco_Participations]
(
	[EserviceBarcodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [NonClusteredIndex-20190531-160700]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20190531-160700] ON [dbo].[coc_Sadafco_Participations]
(
	[Barcode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_Users_EmailID]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IDX_Users_EmailID] ON [dbo].[coc_Users]
(
	[EmailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_Users_MobileNumber]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [IDX_Users_MobileNumber] ON [dbo].[coc_Users]
(
	[MobileNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NonClusteredIndex-20190625-182441]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20190625-182441] ON [dbo].[UploadParticipations]
(
	[ECouponParticipationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [NonClusteredIndex-20190801-161708]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20190801-161708] ON [dbo].[UploadParticipations]
(
	[ECouponID] ASC,
	[Mobile] ASC,
	[GuestAdded] ASC,
	[ParticipantAdded] ASC,
	[Status] ASC,
	[GuestID] ASC,
	[ConsumerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NonClusteredIndex-20190925-111142]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20190925-111142] ON [dbo].[UploadParticipations]
(
	[ECouponParticipationID] ASC,
	[ECouponID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NonClusteredIndex-20210406-123422]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20210406-123422] ON [dbo].[UploadParticipations]
(
	[UploadParticipationAuditID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [NonClusteredIndex-20210701-121402]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20210701-121402] ON [dbo].[UploadParticipations]
(
	[ECouponID] ASC,
	[GuestAdded] ASC,
	[ParticipantAdded] ASC,
	[Status] ASC,
	[UploadDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NonClusteredIndex-20210912-172125]    Script Date: 07/11/2021 17:05:57 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20210912-172125] ON [dbo].[UploadParticipations]
(
	[ECouponID] ASC,
	[GuestAdded] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [dbo].[ChangeLog] ADD  CONSTRAINT [DF_EventsLog_EventDate]  DEFAULT (getdate()) FOR [EventDate]
GO
ALTER TABLE [dbo].[coc_AdvertisementFiles] ADD  DEFAULT ((0)) FOR [IsURL]
GO
ALTER TABLE [dbo].[coc_Advertisements] ADD  DEFAULT ((0)) FOR [TargetPlateform]
GO
ALTER TABLE [dbo].[coc_Advertisements] ADD  DEFAULT ((0)) FOR [DisplayTypeID]
GO
ALTER TABLE [dbo].[coc_Advertisements] ADD  DEFAULT (getdate()) FOR [StartDate]
GO
ALTER TABLE [dbo].[coc_Advertisements] ADD  DEFAULT ((0)) FOR [Duration]
GO
ALTER TABLE [dbo].[coc_Advertisements] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_Advertisements] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[coc_Advertisements] ADD  DEFAULT ((0)) FOR [IsImage]
GO
ALTER TABLE [dbo].[coc_Advertisements] ADD  DEFAULT ((0)) FOR [IsVideo]
GO
ALTER TABLE [dbo].[coc_Advertisements] ADD  DEFAULT ((0)) FOR [HasNextVideo]
GO
ALTER TABLE [dbo].[coc_API_ExternalParticipations] ADD  CONSTRAINT [DF_coc_API_ExternalParticipations_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
GO
ALTER TABLE [dbo].[coc_Barcode_Bank] ADD  CONSTRAINT [DF__coc_barco__IsImp__1F67A14A]  DEFAULT ((0)) FOR [IsImported]
GO
ALTER TABLE [dbo].[coc_Barcode_Bank] ADD  CONSTRAINT [DF__coc_barco__Creat__205BC583]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[coc_BarcodeConfigurations] ADD  DEFAULT ((0)) FOR [Sequence]
GO
ALTER TABLE [dbo].[coc_BarcodeConfigurations] ADD  DEFAULT ((0)) FOR [CombinationLength]
GO
ALTER TABLE [dbo].[coc_BarcodeConfigurations] ADD  DEFAULT ((0)) FOR [EditSequence]
GO
ALTER TABLE [dbo].[coc_BarcodeConfigurations] ADD  DEFAULT ((0)) FOR [EditCombinationLength]
GO
ALTER TABLE [dbo].[coc_BarcodeConfigurations] ADD  DEFAULT ((0)) FOR [IsApproved]
GO
ALTER TABLE [dbo].[coc_BarcodePackagePricings] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[coc_BarcodePrints] ADD  DEFAULT ((0)) FOR [PrintCount]
GO
ALTER TABLE [dbo].[coc_BarcodePrints] ADD  DEFAULT (getdate()) FOR [PrintDate]
GO
ALTER TABLE [dbo].[coc_CheckVersion] ADD  CONSTRAINT [DF_coc_CheckVersion_Timestamp]  DEFAULT (getdate()) FOR [Timestamp]
GO
ALTER TABLE [dbo].[coc_Cities] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_Cities] ADD  DEFAULT ((0)) FOR [HasIntegration]
GO
ALTER TABLE [dbo].[coc_CompetitionLanguage] ADD  CONSTRAINT [DF_coc_CompetitionLanguage_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [dbo].[coc_ConsumerExclusions] ADD  DEFAULT (getdate()) FOR [datecreated]
GO
ALTER TABLE [dbo].[coc_ConsumerNotifications] ADD  DEFAULT (getdate()) FOR [SendDate]
GO
ALTER TABLE [dbo].[coc_ConsumerNotifications] ADD  DEFAULT ((0)) FOR [HasChecked]
GO
ALTER TABLE [dbo].[coc_ConsumerNotifications] ADD  DEFAULT ((0)) FOR [IsPushed]
GO
ALTER TABLE [dbo].[coc_ConsumerPointDetails] ADD  DEFAULT (getdate()) FOR [PointDate]
GO
ALTER TABLE [dbo].[coc_ConsumerPointDetails] ADD  DEFAULT ((0)) FOR [PointSource]
GO
ALTER TABLE [dbo].[coc_ConsumerRedemptions] ADD  DEFAULT (getdate()) FOR [RedemptionDate]
GO
ALTER TABLE [dbo].[coc_ConsumerRedemptions] ADD  DEFAULT ((0)) FOR [IsVerified]
GO
ALTER TABLE [dbo].[coc_ConsumerRedemptions] ADD  DEFAULT (getdate()) FOR [VerificationDate]
GO
ALTER TABLE [dbo].[coc_Consumers] ADD  DEFAULT ((0)) FOR [IsVerified]
GO
ALTER TABLE [dbo].[coc_Consumers] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_Consumers] ADD  DEFAULT ((0)) FOR [AcceptedTerms]
GO
ALTER TABLE [dbo].[coc_Consumers] ADD  DEFAULT ((0)) FOR [HideApplicationTour]
GO
ALTER TABLE [dbo].[coc_Consumers] ADD  DEFAULT ((0)) FOR [IsFacebookUser]
GO
ALTER TABLE [dbo].[coc_Consumers] ADD  DEFAULT ((0)) FOR [LoyaltyPoint]
GO
ALTER TABLE [dbo].[coc_Consumers] ADD  DEFAULT ((0)) FOR [RedeemPoint]
GO
ALTER TABLE [dbo].[coc_Consumers] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[coc_Consumers] ADD  DEFAULT ((0)) FOR [IsTwitterUser]
GO
ALTER TABLE [dbo].[coc_Consumers] ADD  DEFAULT ((0)) FOR [IsGmailUser]
GO
ALTER TABLE [dbo].[coc_Consumers] ADD  DEFAULT ((0)) FOR [IsYahooUser]
GO
ALTER TABLE [dbo].[coc_Consumers] ADD  DEFAULT ((0)) FOR [IsOutlookUser]
GO
ALTER TABLE [dbo].[coc_Consumers] ADD  CONSTRAINT [DF_coc_Consumers_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[coc_ContactChanges] ADD  DEFAULT ((0)) FOR [MobileChange]
GO
ALTER TABLE [dbo].[coc_ContactChanges] ADD  DEFAULT ((0)) FOR [EmailChange]
GO
ALTER TABLE [dbo].[coc_ContactChanges] ADD  DEFAULT (getdate()) FOR [RequestTime]
GO
ALTER TABLE [dbo].[coc_ContactChanges] ADD  DEFAULT ((0)) FOR [IsVerified]
GO
ALTER TABLE [dbo].[coc_Core_ConsumerStatus] ADD  CONSTRAINT [DF_coc_Core_ConsumerStatus_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_Core_ConsumerStatus] ADD  CONSTRAINT [DF_coc_Core_ConsumerStatus_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Coc_Core_DynamicLinks] ADD  CONSTRAINT [DF_Coc_Core_DynamicLinks_CompetitionType_1]  DEFAULT ((1)) FOR [CompetitionType]
GO
ALTER TABLE [dbo].[Coc_Core_DynamicLinks] ADD  CONSTRAINT [DF_Coc_Core_DynamicLinks_AutoParticipation]  DEFAULT ((0)) FOR [AutoParticipation]
GO
ALTER TABLE [dbo].[coc_core_ECouponIntegralShoppers] ADD  CONSTRAINT [DF_coc_core_ECouponIntegralShoppers_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[coc_core_ECouponIntegralShoppers] ADD  CONSTRAINT [DF_coc_core_ECouponIntegralShoppers_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_core_IntegralShopperParameters] ADD  CONSTRAINT [DF_coc_core_IntegralShopperParameters_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[coc_core_IntegralShopperParameters] ADD  CONSTRAINT [DF_coc_core_IntegralShopperParameters_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_core_MobileServiceReferenceLog] ADD  CONSTRAINT [DF_coc_core_MobileServiceReferenceLog_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[coc_Core_ProfileReportsColumns] ADD  CONSTRAINT [DF_coc_Core_ProfileReportsColumns_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [dbo].[coc_core_RetailoutletDistanceCalculationAudit] ADD  CONSTRAINT [DF_coc_core_RetailoutletDistanceCalculationAduit_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[coc_core_UserIdentityTypes] ADD  CONSTRAINT [DF_coc_core_UserIdentityTypes_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[coc_Corporates] ADD  DEFAULT ((0)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_Corporates] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[coc_Corporates] ADD  DEFAULT (getdate()) FOR [LicenseExpiryDate]
GO
ALTER TABLE [dbo].[coc_Corporates] ADD  DEFAULT ((0)) FOR [IsEmailCommunication]
GO
ALTER TABLE [dbo].[coc_Corporates] ADD  DEFAULT ((0)) FOR [IsSMSCommunication]
GO
ALTER TABLE [dbo].[coc_Corporates] ADD  DEFAULT ((0)) FOR [IsMobileCommunication]
GO
ALTER TABLE [dbo].[coc_Corporates] ADD  DEFAULT ((0)) FOR [CanContactMorning]
GO
ALTER TABLE [dbo].[coc_Corporates] ADD  DEFAULT ((0)) FOR [CanContactEvening]
GO
ALTER TABLE [dbo].[coc_Corporates] ADD  DEFAULT ((0)) FOR [NewsLetterNotification]
GO
ALTER TABLE [dbo].[coc_Corporates] ADD  DEFAULT ((0)) FOR [PromotionNotification]
GO
ALTER TABLE [dbo].[coc_Corporates] ADD  CONSTRAINT [DF_coc_Corporates_CorporateType]  DEFAULT ((1)) FOR [CorporateType]
GO
ALTER TABLE [dbo].[coc_Corporates] ADD  CONSTRAINT [DF__coc_Corporates__IsIntegralShopperCorporate]  DEFAULT ((0)) FOR [IsIntegralShopperCorporate]
GO
ALTER TABLE [dbo].[coc_CorporateUsers] ADD  DEFAULT ((1)) FOR [AllowRedeeming]
GO
ALTER TABLE [dbo].[coc_CorporateUsers] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_CorporateUsers] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[coc_Countries] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_Currency] ADD  CONSTRAINT [DF_coc_Currency_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[COC_DropDownValues] ADD  CONSTRAINT [DF_COC_DropDownValues_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[COC_DropDownValues] ADD  CONSTRAINT [DF_COC_DropDownValues_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[coc_ECouponDraw] ADD  CONSTRAINT [DF__coc_ECoup__IsDis__328C56FB]  DEFAULT ((0)) FOR [IsDisable]
GO
ALTER TABLE [dbo].[coc_ECouponInvoiceDetails] ADD  DEFAULT (getdate()) FOR [InvoiceDate]
GO
ALTER TABLE [dbo].[coc_ECouponInvoiceDetails] ADD  DEFAULT ((0)) FOR [EligibleCoupons]
GO
ALTER TABLE [dbo].[coc_ECouponInvoiceDetails] ADD  DEFAULT ((0)) FOR [MaxCoupons]
GO
ALTER TABLE [dbo].[coc_ECouponInvoices] ADD  DEFAULT (getdate()) FOR [InvoiceDate]
GO
ALTER TABLE [dbo].[coc_ECouponInvoices] ADD  DEFAULT ((1)) FOR [IsMember]
GO
ALTER TABLE [dbo].[coc_ECouponInvoices] ADD  DEFAULT ((0)) FOR [EligibleCoupons]
GO
ALTER TABLE [dbo].[coc_ECouponInvoices] ADD  DEFAULT ((0)) FOR [AssignedCoupons]
GO
ALTER TABLE [dbo].[coc_ECouponInvoices] ADD  DEFAULT ((1)) FOR [IsAccept]
GO
ALTER TABLE [dbo].[coc_ECouponInvoices] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[coc_ECouponParticipations] ADD  DEFAULT (getdate()) FOR [ParticipationDate]
GO
ALTER TABLE [dbo].[coc_ECouponParticipationsInvalid] ADD  DEFAULT (getdate()) FOR [ParticipationDate]
GO
ALTER TABLE [dbo].[coc_ECouponProducts] ADD  DEFAULT ((0)) FOR [IsUsed]
GO
ALTER TABLE [dbo].[coc_ECoupons] ADD  DEFAULT (getdate()) FOR [ResultDate]
GO
ALTER TABLE [dbo].[coc_ECoupons] ADD  DEFAULT ((1)) FOR [WinnerCount]
GO
ALTER TABLE [dbo].[coc_ECoupons] ADD  DEFAULT ((0)) FOR [AllowMultipleInvoices]
GO
ALTER TABLE [dbo].[coc_ECoupons] ADD  DEFAULT ((0)) FOR [UserAurthorised]
GO
ALTER TABLE [dbo].[coc_ECoupons] ADD  DEFAULT ((0)) FOR [ParticipationByKiosk]
GO
ALTER TABLE [dbo].[coc_ECoupons] ADD  DEFAULT ((0)) FOR [MemberOnly]
GO
ALTER TABLE [dbo].[coc_ECoupons] ADD  DEFAULT ((0)) FOR [RegistrationRequired]
GO
ALTER TABLE [dbo].[coc_ECoupons] ADD  DEFAULT ((1)) FOR [IsApproved]
GO
ALTER TABLE [dbo].[coc_ECoupons] ADD  CONSTRAINT [DF__coc_ECoup__IsAct__7EB7AD3A]  DEFAULT ((0)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_ECoupons] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[coc_ECoupons] ADD  DEFAULT ((0)) FOR [ResulltDeclared]
GO
ALTER TABLE [dbo].[coc_ECoupons] ADD  CONSTRAINT [DF_coc_ECoupons_LocationValidationRequired]  DEFAULT ((0)) FOR [LocationValidationRequired]
GO
ALTER TABLE [dbo].[coc_ECouponWinners] ADD  CONSTRAINT [DF_coc_ECouponWinners]  DEFAULT (getdate()) FOR [DrawDateTime]
GO
ALTER TABLE [dbo].[coc_ECouponWinners_DeleteLog] ADD  CONSTRAINT [DF_coc_ECouponWinners_DeleteLog]  DEFAULT (getdate()) FOR [DeleteDateTime]
GO
ALTER TABLE [dbo].[coc_Enums] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_EnumValues] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_eServiceAddOn] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_EServiceBarcodes] ADD  DEFAULT ((1)) FOR [CanDelete]
GO
ALTER TABLE [dbo].[coc_EServiceBarcodes] ADD  DEFAULT ((0)) FOR [IsUsed]
GO
ALTER TABLE [dbo].[coc_EServiceEvents] ADD  DEFAULT (getdate()) FOR [EventDate]
GO
ALTER TABLE [dbo].[coc_EServiceEvents] ADD  DEFAULT (getdate()) FOR [LastDate]
GO
ALTER TABLE [dbo].[coc_EServiceEvents] ADD  DEFAULT (getdate()) FOR [PurchaseStartDate]
GO
ALTER TABLE [dbo].[coc_EServiceEvents] ADD  DEFAULT (getdate()) FOR [PurchaseEndDate]
GO
ALTER TABLE [dbo].[coc_EServiceEvents] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_EServiceEvents] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[coc_EServiceInvoices] ADD  DEFAULT (getdate()) FOR [InvoiceDate]
GO
ALTER TABLE [dbo].[coc_EServiceInvoices] ADD  DEFAULT ((0)) FOR [IsExtension]
GO
ALTER TABLE [dbo].[coc_EServiceInvoices] ADD  DEFAULT ((0)) FOR [NotificationCount]
GO
ALTER TABLE [dbo].[coc_EServiceInvoices] ADD  DEFAULT ((0)) FOR [IsBarcodeGenerated]
GO
ALTER TABLE [dbo].[coc_EServiceReceipts] ADD  DEFAULT ((0)) FOR [ChequePayment]
GO
ALTER TABLE [dbo].[coc_EServiceReceipts] ADD  DEFAULT ((0)) FOR [CashPayment]
GO
ALTER TABLE [dbo].[coc_EServiceReceipts] ADD  DEFAULT ((0)) FOR [CardPayment]
GO
ALTER TABLE [dbo].[coc_EServiceReceipts] ADD  DEFAULT ((0)) FOR [IsCancel]
GO
ALTER TABLE [dbo].[coc_EServiceReceipts] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[coc_EServices] ADD  CONSTRAINT [DF__coc_EServ__Servi__5A8F5B5D]  DEFAULT (getdate()) FOR [ServiceDate]
GO
ALTER TABLE [dbo].[coc_EServices] ADD  CONSTRAINT [DF__coc_EServ__FromD__5B837F96]  DEFAULT (getdate()) FOR [FromDate]
GO
ALTER TABLE [dbo].[coc_EServices] ADD  CONSTRAINT [DF__coc_EServ__ToDat__5C77A3CF]  DEFAULT (getdate()) FOR [ToDate]
GO
ALTER TABLE [dbo].[coc_EServices] ADD  CONSTRAINT [DF__coc_EServ__IsAct__62307D25]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_EServices] ADD  CONSTRAINT [DF__coc_EServ__AddDa__6324A15E]  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[coc_EServices] ADD  CONSTRAINT [DF__coc_EServ__IsBar__1B68FA81]  DEFAULT ((0)) FOR [IsBarcodeUsed]
GO
ALTER TABLE [dbo].[coc_EServices] ADD  CONSTRAINT [DF__coc_EServ__Notif__5A261260]  DEFAULT ((0)) FOR [NotificationSend]
GO
ALTER TABLE [dbo].[coc_EServices] ADD  CONSTRAINT [DF__coc_EServ__IsPay__432F351D]  DEFAULT ((0)) FOR [IsPaymentDone]
GO
ALTER TABLE [dbo].[coc_EVoucher] ADD  CONSTRAINT [DF__coc_EVouc__IsAll__6D456A7A]  DEFAULT ((0)) FOR [IsAllowed]
GO
ALTER TABLE [dbo].[coc_EVoucher] ADD  CONSTRAINT [DF__coc_EVouc__IsAcc__6E398EB3]  DEFAULT ((0)) FOR [IsAcceptedTC]
GO
ALTER TABLE [dbo].[coc_EVoucherBundleEligibilityForConsumers] ADD  CONSTRAINT [DF_coc_EVoucherBundleEligibilityForConsumers_IsUsed]  DEFAULT ((0)) FOR [IsUsed]
GO
ALTER TABLE [dbo].[coc_EvoucherLocations] ADD  CONSTRAINT [DF_coc_EvoucherLocations_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [dbo].[coc_ExternalRedirectionDataMapping] ADD  CONSTRAINT [DF_coc_ExternalRedirectionDataMapping_CreatedBy]  DEFAULT ((1)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[coc_ExternalRedirectionDataMapping] ADD  CONSTRAINT [DF_coc_ExternalRedirectionDataMapping_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [dbo].[coc_GeneralNotificationTemplates] ADD  DEFAULT ((0)) FOR [SMSUsage]
GO
ALTER TABLE [dbo].[coc_GeneralNotificationTemplates] ADD  DEFAULT ((0)) FOR [NotificatonUsage]
GO
ALTER TABLE [dbo].[coc_GeneralNotificationTemplates] ADD  DEFAULT ((0)) FOR [EmailUsage]
GO
ALTER TABLE [dbo].[coc_GeneralNotificationTemplates] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_GeneralNotificationTemplates] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[coc_GuestParticipations] ADD  DEFAULT (getdate()) FOR [ParticipationDate]
GO
ALTER TABLE [dbo].[coc_Guests] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[coc_InviteDetails] ADD  DEFAULT ((0)) FOR [AutoRejected]
GO
ALTER TABLE [dbo].[coc_InviteDetails] ADD  DEFAULT ((0)) FOR [IsAccepted]
GO
ALTER TABLE [dbo].[coc_InviteFriends] ADD  DEFAULT (getdate()) FOR [InvitationDate]
GO
ALTER TABLE [dbo].[coc_KioskLocations] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_KioskLocations] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[coc_Languages] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_Languages] ADD  DEFAULT ((0)) FOR [IsDefaultLanguage]
GO
ALTER TABLE [dbo].[coc_LoginUsers] ADD  DEFAULT (getdate()) FOR [LoginTime]
GO
ALTER TABLE [dbo].[coc_LoyaltyPointRedemptions] ADD  DEFAULT (getdate()) FOR [RedemptionDate]
GO
ALTER TABLE [dbo].[coc_LoyaltyPointRedemptions] ADD  DEFAULT ((0)) FOR [IsVerified]
GO
ALTER TABLE [dbo].[coc_LoyaltyPointSetups] ADD  DEFAULT ((0)) FOR [IsApproved]
GO
ALTER TABLE [dbo].[coc_Menus] ADD  DEFAULT ((0)) FOR [SortOrder]
GO
ALTER TABLE [dbo].[coc_Menus] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_MessagePackTypes] ADD  DEFAULT ((0)) FOR [HasCity]
GO
ALTER TABLE [dbo].[coc_MessagePackTypes] ADD  DEFAULT ((0)) FOR [HasAgeGroup]
GO
ALTER TABLE [dbo].[coc_MessagePackTypes] ADD  DEFAULT ((0)) FOR [HasGender]
GO
ALTER TABLE [dbo].[coc_MessagePackTypes] ADD  DEFAULT ((0)) FOR [CanResend]
GO
ALTER TABLE [dbo].[coc_MessagePackTypes] ADD  DEFAULT ((0)) FOR [ResendCount]
GO
ALTER TABLE [dbo].[coc_MessagePackTypes] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_MessageTemplates] ADD  DEFAULT ((0)) FOR [TemplateType]
GO
ALTER TABLE [dbo].[coc_MessageTemplates] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_MessageTemplates] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[coc_Nationalities] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_Notifications] ADD  DEFAULT ((0)) FOR [ResendCounter]
GO
ALTER TABLE [dbo].[coc_NotificationSends] ADD  CONSTRAINT [DF__coc_Notif__Sendi__066DDD9B]  DEFAULT (getdate()) FOR [SendingDate]
GO
ALTER TABLE [dbo].[coc_OTP] ADD  DEFAULT (getdate()) FOR [OTPDate]
GO
ALTER TABLE [dbo].[coc_OTP] ADD  DEFAULT (getdate()) FOR [OtpExpity]
GO
ALTER TABLE [dbo].[coc_OTP] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_PackagePricings] ADD  DEFAULT ((0)) FOR [PackFrom]
GO
ALTER TABLE [dbo].[coc_PackagePricings] ADD  DEFAULT ((0)) FOR [PackTo]
GO
ALTER TABLE [dbo].[coc_PackagePricings] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[coc_PackagePricings] ADD  DEFAULT ((0)) FOR [EditPackFrom]
GO
ALTER TABLE [dbo].[coc_PackagePricings] ADD  DEFAULT ((0)) FOR [EditPackTo]
GO
ALTER TABLE [dbo].[coc_PackagePricings] ADD  DEFAULT ((0)) FOR [IsApproved]
GO
ALTER TABLE [dbo].[coc_PackagePricings] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_Periods] ADD  DEFAULT (getdate()) FOR [FromDate]
GO
ALTER TABLE [dbo].[coc_Periods] ADD  DEFAULT (getdate()) FOR [ToDate]
GO
ALTER TABLE [dbo].[coc_Periods] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_QuestionOptions] ADD  DEFAULT ((0)) FOR [IsCorrect]
GO
ALTER TABLE [dbo].[coc_RedemptionPlans] ADD  DEFAULT ((0)) FOR [RedeemTypeID]
GO
ALTER TABLE [dbo].[coc_RedemptionPlans] ADD  DEFAULT ((0)) FOR [LoyaltyPoint]
GO
ALTER TABLE [dbo].[coc_RedemptionPlans] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_RedemptionPlans] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[coc_RedemptionPlans] ADD  DEFAULT ((0)) FOR [IsApproved]
GO
ALTER TABLE [dbo].[coc_Report_OutputParams] ADD  CONSTRAINT [cc_coc_Report_OutputParams_IsActive]  DEFAULT ((0)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_ResetPassword] ADD  DEFAULT ((0)) FOR [ByMobile]
GO
ALTER TABLE [dbo].[coc_ResetPassword] ADD  DEFAULT ((0)) FOR [ByEmail]
GO
ALTER TABLE [dbo].[coc_ResetPassword] ADD  DEFAULT (getdate()) FOR [RequestTime]
GO
ALTER TABLE [dbo].[coc_ResetPassword] ADD  DEFAULT ((0)) FOR [IsVerified]
GO
ALTER TABLE [dbo].[coc_RetailOutlets] ADD  CONSTRAINT [DF__coc_Retai__IsAct__10E14A6D]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_RetailOutlets] ADD  CONSTRAINT [DF__coc_Retai__IsImp__11D56EA6]  DEFAULT ((0)) FOR [IsImported]
GO
ALTER TABLE [dbo].[coc_RetailOutlets] ADD  CONSTRAINT [DF__coc_Retai__AddDa__12C992DF]  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[coc_RoleMenuAccess] ADD  DEFAULT ((0)) FOR [IsAccessible]
GO
ALTER TABLE [dbo].[coc_Sadafco_Participations] ADD  CONSTRAINT [DF_coc_Sadafco_Participations_IsUsed]  DEFAULT ((0)) FOR [IsUsed]
GO
ALTER TABLE [dbo].[coc_Screens] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_ScreenViews] ADD  DEFAULT ((1)) FOR [IsSystem]
GO
ALTER TABLE [dbo].[coc_ServiceTaskNotification] ADD  DEFAULT ((0)) FOR [ReadStatus]
GO
ALTER TABLE [dbo].[coc_Tickets] ADD  DEFAULT (getdate()) FOR [TicketDate]
GO
ALTER TABLE [dbo].[coc_Tickets] ADD  DEFAULT ((0)) FOR [IsVerified]
GO
ALTER TABLE [dbo].[coc_Tickets] ADD  DEFAULT ((0)) FOR [Isprinted]
GO
ALTER TABLE [dbo].[coc_TicketTemplates] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_TicketTemplates] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[coc_UserRole] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_Users] ADD  DEFAULT ((0)) FOR [ResetRequired]
GO
ALTER TABLE [dbo].[coc_Users] ADD  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[coc_Users] ADD  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [dbo].[coc_Users] ADD  CONSTRAINT [DF_coc_Users_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[coc_VoucherTypes] ADD  CONSTRAINT [DF_coc_VoucherTypes_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[jcci_Competition] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[jcci_Competition_Award] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[jcci_Competition_Branch] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[jcci_Competition_Draw] ADD  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[LOC_EserviceBarcode] ADD  CONSTRAINT [DF_LOC_EserviceBarcode_IsDelete]  DEFAULT ((0)) FOR [IsDelete]
GO
ALTER TABLE [dbo].[LOC_EserviceBarcode] ADD  CONSTRAINT [DF_LOC_EserviceBarcode_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[TempUploadParticipations] ADD  DEFAULT (getdate()) FOR [UploadDate]
GO
ALTER TABLE [dbo].[UploadParticipations] ADD  DEFAULT (getdate()) FOR [UploadDate]
GO
ALTER TABLE [dbo].[coc_AdvertisementFiles]  WITH CHECK ADD  CONSTRAINT [FK_AdvertisementFiles1] FOREIGN KEY([AdvertisementID])
REFERENCES [dbo].[coc_Advertisements] ([AdvertisementID])
GO
ALTER TABLE [dbo].[coc_AdvertisementFiles] CHECK CONSTRAINT [FK_AdvertisementFiles1]
GO
ALTER TABLE [dbo].[coc_AdvertisementPages]  WITH CHECK ADD  CONSTRAINT [FK_AdvertisementPages1] FOREIGN KEY([AdvertisementID])
REFERENCES [dbo].[coc_Advertisements] ([AdvertisementID])
GO
ALTER TABLE [dbo].[coc_AdvertisementPages] CHECK CONSTRAINT [FK_AdvertisementPages1]
GO
ALTER TABLE [dbo].[coc_AdvertisementPages]  WITH CHECK ADD  CONSTRAINT [FK_AdvertisementPages2] FOREIGN KEY([PageID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_AdvertisementPages] CHECK CONSTRAINT [FK_AdvertisementPages2]
GO
ALTER TABLE [dbo].[coc_Advertisements]  WITH CHECK ADD  CONSTRAINT [FK_Advertisements2] FOREIGN KEY([PositionID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_Advertisements] CHECK CONSTRAINT [FK_Advertisements2]
GO
ALTER TABLE [dbo].[coc_Advertisements]  WITH CHECK ADD  CONSTRAINT [FK_Advertisements51] FOREIGN KEY([AddUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_Advertisements] CHECK CONSTRAINT [FK_Advertisements51]
GO
ALTER TABLE [dbo].[coc_Advertisements]  WITH CHECK ADD  CONSTRAINT [FK_Advertisements52] FOREIGN KEY([EditUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_Advertisements] CHECK CONSTRAINT [FK_Advertisements52]
GO
ALTER TABLE [dbo].[coc_APIRequestValidationRules]  WITH CHECK ADD  CONSTRAINT [FK_coc_APIRequestValidationRules_coc_APIRequestValidations] FOREIGN KEY([APIRequestValidationID])
REFERENCES [dbo].[coc_APIRequestValidations] ([APIRequestValidationID])
GO
ALTER TABLE [dbo].[coc_APIRequestValidationRules] CHECK CONSTRAINT [FK_coc_APIRequestValidationRules_coc_APIRequestValidations]
GO
ALTER TABLE [dbo].[coc_BarcodeConfigurations]  WITH CHECK ADD  CONSTRAINT [FK_BarcodeConfigurations1] FOREIGN KEY([ServiceTypeID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_BarcodeConfigurations] CHECK CONSTRAINT [FK_BarcodeConfigurations1]
GO
ALTER TABLE [dbo].[coc_BarcodeConfigurations]  WITH CHECK ADD  CONSTRAINT [FK_BarcodeConfigurations2] FOREIGN KEY([BarcodeCombinationID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_BarcodeConfigurations] CHECK CONSTRAINT [FK_BarcodeConfigurations2]
GO
ALTER TABLE [dbo].[coc_BarcodeConfigurations]  WITH CHECK ADD  CONSTRAINT [FK_BarcodeConfigurations51] FOREIGN KEY([EditUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_BarcodeConfigurations] CHECK CONSTRAINT [FK_BarcodeConfigurations51]
GO
ALTER TABLE [dbo].[coc_BarcodeConfigurations]  WITH CHECK ADD  CONSTRAINT [FK_BarcodeConfigurations52] FOREIGN KEY([CheckerUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_BarcodeConfigurations] CHECK CONSTRAINT [FK_BarcodeConfigurations52]
GO
ALTER TABLE [dbo].[coc_BarcodePackagePricings]  WITH CHECK ADD  CONSTRAINT [FK_BarcodePricings1] FOREIGN KEY([AddUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_BarcodePackagePricings] CHECK CONSTRAINT [FK_BarcodePricings1]
GO
ALTER TABLE [dbo].[coc_BarcodePackagePricings]  WITH CHECK ADD  CONSTRAINT [FK_BarcodePricings2] FOREIGN KEY([EditUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_BarcodePackagePricings] CHECK CONSTRAINT [FK_BarcodePricings2]
GO
ALTER TABLE [dbo].[coc_BarcodePrices]  WITH CHECK ADD  CONSTRAINT [FK_coc_BarcodePrices_coc_BarcodePrices] FOREIGN KEY([BarcodePriceId])
REFERENCES [dbo].[coc_BarcodePrices] ([BarcodePriceId])
GO
ALTER TABLE [dbo].[coc_BarcodePrices] CHECK CONSTRAINT [FK_coc_BarcodePrices_coc_BarcodePrices]
GO
ALTER TABLE [dbo].[coc_BarcodePrintDetails]  WITH CHECK ADD  CONSTRAINT [FK_coc_BarcodePrintDetails1] FOREIGN KEY([BarcodePrintID])
REFERENCES [dbo].[coc_BarcodePrints] ([BarcodePrintID])
GO
ALTER TABLE [dbo].[coc_BarcodePrintDetails] CHECK CONSTRAINT [FK_coc_BarcodePrintDetails1]
GO
ALTER TABLE [dbo].[coc_BarcodePrintDetails]  WITH CHECK ADD  CONSTRAINT [FK_coc_BarcodePrintDetails2] FOREIGN KEY([EServiceBarcodeID])
REFERENCES [dbo].[coc_EServiceBarcodes] ([EServiceBarcodeID])
GO
ALTER TABLE [dbo].[coc_BarcodePrintDetails] CHECK CONSTRAINT [FK_coc_BarcodePrintDetails2]
GO
ALTER TABLE [dbo].[coc_BarcodePrintFile]  WITH CHECK ADD  CONSTRAINT [FK_BarcodePrints_BarcodePrintFile] FOREIGN KEY([BarcodePrintID])
REFERENCES [dbo].[coc_BarcodePrints] ([BarcodePrintID])
GO
ALTER TABLE [dbo].[coc_BarcodePrintFile] CHECK CONSTRAINT [FK_BarcodePrints_BarcodePrintFile]
GO
ALTER TABLE [dbo].[coc_BarcodePrints]  WITH CHECK ADD  CONSTRAINT [FK_BarcodePrints1] FOREIGN KEY([NotificationID])
REFERENCES [dbo].[coc_Notifications] ([NotificationID])
GO
ALTER TABLE [dbo].[coc_BarcodePrints] CHECK CONSTRAINT [FK_BarcodePrints1]
GO
ALTER TABLE [dbo].[coc_BarcodePrints]  WITH CHECK ADD  CONSTRAINT [FK_BarcodePrints51] FOREIGN KEY([PrintUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_BarcodePrints] CHECK CONSTRAINT [FK_BarcodePrints51]
GO
ALTER TABLE [dbo].[coc_BarcodePurchase]  WITH CHECK ADD  CONSTRAINT [FK_coc_BarcodePurchase_coc_BarcodePrices] FOREIGN KEY([BarcodePriceId])
REFERENCES [dbo].[coc_BarcodePrices] ([BarcodePriceId])
GO
ALTER TABLE [dbo].[coc_BarcodePurchase] CHECK CONSTRAINT [FK_coc_BarcodePurchase_coc_BarcodePrices]
GO
ALTER TABLE [dbo].[coc_BarcodePurchase]  WITH CHECK ADD  CONSTRAINT [FK_coc_BarcodePurchase_coc_Corporates] FOREIGN KEY([CorporateId])
REFERENCES [dbo].[coc_Corporates] ([CorporateID])
GO
ALTER TABLE [dbo].[coc_BarcodePurchase] CHECK CONSTRAINT [FK_coc_BarcodePurchase_coc_Corporates]
GO
ALTER TABLE [dbo].[coc_BarcodePurchasePayment]  WITH CHECK ADD  CONSTRAINT [FK_coc_BarcodePurchasePayment_coc_BarcodePurchase] FOREIGN KEY([BarcodePurchaseId])
REFERENCES [dbo].[coc_BarcodePurchase] ([BarcodePurchaseId])
GO
ALTER TABLE [dbo].[coc_BarcodePurchasePayment] CHECK CONSTRAINT [FK_coc_BarcodePurchasePayment_coc_BarcodePurchase]
GO
ALTER TABLE [dbo].[coc_BarcodePurchases]  WITH CHECK ADD  CONSTRAINT [FK_BarcodePurchases1] FOREIGN KEY([EditUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_BarcodePurchases] CHECK CONSTRAINT [FK_BarcodePurchases1]
GO
ALTER TABLE [dbo].[coc_BarcodePurchases]  WITH CHECK ADD  CONSTRAINT [FK_BarcodePurchases2] FOREIGN KEY([AddUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_BarcodePurchases] CHECK CONSTRAINT [FK_BarcodePurchases2]
GO
ALTER TABLE [dbo].[coc_BarcodesConsumption]  WITH CHECK ADD  CONSTRAINT [FK_coc_BarcodesConsumption_coc_BarcodesConsumption] FOREIGN KEY([BarcodeConsumptionID])
REFERENCES [dbo].[coc_BarcodesConsumption] ([BarcodeConsumptionID])
GO
ALTER TABLE [dbo].[coc_BarcodesConsumption] CHECK CONSTRAINT [FK_coc_BarcodesConsumption_coc_BarcodesConsumption]
GO
ALTER TABLE [dbo].[coc_BarcodesConsumption]  WITH CHECK ADD  CONSTRAINT [FK_coc_BarcodesConsumption_coc_competition] FOREIGN KEY([CompetitionID])
REFERENCES [dbo].[coc_competition] ([CompetitionID])
GO
ALTER TABLE [dbo].[coc_BarcodesConsumption] CHECK CONSTRAINT [FK_coc_BarcodesConsumption_coc_competition]
GO
ALTER TABLE [dbo].[coc_BarcodesConsumption]  WITH CHECK ADD  CONSTRAINT [FK_coc_BarcodesConsumption_coc_competition_staging] FOREIGN KEY([CompetitionStagingId])
REFERENCES [dbo].[coc_competition_staging] ([CompetitionStagingID])
GO
ALTER TABLE [dbo].[coc_BarcodesConsumption] CHECK CONSTRAINT [FK_coc_BarcodesConsumption_coc_competition_staging]
GO
ALTER TABLE [dbo].[coc_Cities]  WITH CHECK ADD  CONSTRAINT [FK_Cities] FOREIGN KEY([CountryID])
REFERENCES [dbo].[coc_Countries] ([CountryID])
GO
ALTER TABLE [dbo].[coc_Cities] CHECK CONSTRAINT [FK_Cities]
GO
ALTER TABLE [dbo].[coc_CityLanguages]  WITH CHECK ADD  CONSTRAINT [FK_CityLanguages1] FOREIGN KEY([CityID])
REFERENCES [dbo].[coc_Cities] ([CityID])
GO
ALTER TABLE [dbo].[coc_CityLanguages] CHECK CONSTRAINT [FK_CityLanguages1]
GO
ALTER TABLE [dbo].[coc_CityLanguages]  WITH CHECK ADD  CONSTRAINT [FK_CityLanguages2] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_CityLanguages] CHECK CONSTRAINT [FK_CityLanguages2]
GO
ALTER TABLE [dbo].[coc_competition]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_coc_Chambers] FOREIGN KEY([ChamberId])
REFERENCES [dbo].[coc_Chambers] ([ChamberID])
GO
ALTER TABLE [dbo].[coc_competition] CHECK CONSTRAINT [FK_coc_competition_coc_Chambers]
GO
ALTER TABLE [dbo].[coc_competition]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_coc_Corporates] FOREIGN KEY([CorporateID])
REFERENCES [dbo].[coc_Corporates] ([CorporateID])
GO
ALTER TABLE [dbo].[coc_competition] CHECK CONSTRAINT [FK_coc_competition_coc_Corporates]
GO
ALTER TABLE [dbo].[coc_competition_staging]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_coc_Chambers] FOREIGN KEY([ChamberId])
REFERENCES [dbo].[coc_Chambers] ([ChamberID])
GO
ALTER TABLE [dbo].[coc_competition_staging] CHECK CONSTRAINT [FK_coc_competition_staging_coc_Chambers]
GO
ALTER TABLE [dbo].[coc_competition_staging]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_coc_Corporates] FOREIGN KEY([CorporateID])
REFERENCES [dbo].[coc_Corporates] ([CorporateID])
GO
ALTER TABLE [dbo].[coc_competition_staging] CHECK CONSTRAINT [FK_coc_competition_staging_coc_Corporates]
GO
ALTER TABLE [dbo].[coc_competition_staging]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_coc_ECoupons] FOREIGN KEY([CompetitionId])
REFERENCES [dbo].[coc_ECoupons] ([ECouponID])
GO
ALTER TABLE [dbo].[coc_competition_staging] CHECK CONSTRAINT [FK_coc_competition_staging_coc_ECoupons]
GO
ALTER TABLE [dbo].[coc_competition_staging_cities]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_cities_coc_Cities] FOREIGN KEY([CityID])
REFERENCES [dbo].[coc_Cities] ([CityID])
GO
ALTER TABLE [dbo].[coc_competition_staging_cities] CHECK CONSTRAINT [FK_coc_competition_staging_cities_coc_Cities]
GO
ALTER TABLE [dbo].[coc_competition_staging_CompetitionMethods]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_CompetitionMethods_coc_competition_staging] FOREIGN KEY([CompetitionStagingID])
REFERENCES [dbo].[coc_competition_staging] ([CompetitionStagingID])
GO
ALTER TABLE [dbo].[coc_competition_staging_CompetitionMethods] CHECK CONSTRAINT [FK_coc_competition_staging_CompetitionMethods_coc_competition_staging]
GO
ALTER TABLE [dbo].[coc_competition_staging_CompetitionMethods]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_CompetitionMethods_coc_CompetitionMethods] FOREIGN KEY([CompetitionMethodId])
REFERENCES [dbo].[coc_CompetitionMethods] ([CompetitionMethodID])
GO
ALTER TABLE [dbo].[coc_competition_staging_CompetitionMethods] CHECK CONSTRAINT [FK_coc_competition_staging_CompetitionMethods_coc_CompetitionMethods]
GO
ALTER TABLE [dbo].[coc_competition_staging_CompetitionTypes]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_CompetitionTypes_coc_CompetitionTypes] FOREIGN KEY([CompetitionTypeId])
REFERENCES [dbo].[coc_CompetitionTypes] ([CompetitionTypeID])
GO
ALTER TABLE [dbo].[coc_competition_staging_CompetitionTypes] CHECK CONSTRAINT [FK_coc_competition_staging_CompetitionTypes_coc_CompetitionTypes]
GO
ALTER TABLE [dbo].[coc_competition_staging_countries]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_countries_coc_competition_staging] FOREIGN KEY([CompetitionStagingId])
REFERENCES [dbo].[coc_competition_staging] ([CompetitionStagingID])
GO
ALTER TABLE [dbo].[coc_competition_staging_countries] CHECK CONSTRAINT [FK_coc_competition_staging_countries_coc_competition_staging]
GO
ALTER TABLE [dbo].[coc_competition_staging_countries]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_countries_coc_Countries] FOREIGN KEY([CountryId])
REFERENCES [dbo].[coc_Countries] ([CountryID])
GO
ALTER TABLE [dbo].[coc_competition_staging_countries] CHECK CONSTRAINT [FK_coc_competition_staging_countries_coc_Countries]
GO
ALTER TABLE [dbo].[coc_competition_staging_draws]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_draws_coc_competition_staging] FOREIGN KEY([CompetitionStagingID])
REFERENCES [dbo].[coc_competition_staging] ([CompetitionStagingID])
GO
ALTER TABLE [dbo].[coc_competition_staging_draws] CHECK CONSTRAINT [FK_coc_competition_staging_draws_coc_competition_staging]
GO
ALTER TABLE [dbo].[coc_competition_staging_draws_details]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_draws_details_coc_competition_staging_draws] FOREIGN KEY([CompetitionStagingDrawID])
REFERENCES [dbo].[coc_competition_staging_draws] ([CompetitionStagingDrawID])
GO
ALTER TABLE [dbo].[coc_competition_staging_draws_details] CHECK CONSTRAINT [FK_coc_competition_staging_draws_details_coc_competition_staging_draws]
GO
ALTER TABLE [dbo].[coc_competition_staging_draws_details]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_draws_details_coc_competition_staging_prizes] FOREIGN KEY([CompetitionStagingPrizeID])
REFERENCES [dbo].[coc_competition_staging_prizes] ([CompetitionStagingPrizeID])
GO
ALTER TABLE [dbo].[coc_competition_staging_draws_details] CHECK CONSTRAINT [FK_coc_competition_staging_draws_details_coc_competition_staging_prizes]
GO
ALTER TABLE [dbo].[coc_competition_staging_draws_languages]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_draws_languages_coc_competition_staging_draws] FOREIGN KEY([CompetitionStagingDrawID])
REFERENCES [dbo].[coc_competition_staging_draws] ([CompetitionStagingDrawID])
GO
ALTER TABLE [dbo].[coc_competition_staging_draws_languages] CHECK CONSTRAINT [FK_coc_competition_staging_draws_languages_coc_competition_staging_draws]
GO
ALTER TABLE [dbo].[coc_competition_staging_languages]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_languages_coc_competition_staging] FOREIGN KEY([CompetitionStagingID])
REFERENCES [dbo].[coc_competition_staging] ([CompetitionStagingID])
GO
ALTER TABLE [dbo].[coc_competition_staging_languages] CHECK CONSTRAINT [FK_coc_competition_staging_languages_coc_competition_staging]
GO
ALTER TABLE [dbo].[coc_competition_staging_ParticipationTypes]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_ParticipationTypes_coc_CompetitionParticipationTypes] FOREIGN KEY([CompetitionParticipationTypeID])
REFERENCES [dbo].[coc_CompetitionParticipationTypes] ([CompetitionParticipationTypeID])
GO
ALTER TABLE [dbo].[coc_competition_staging_ParticipationTypes] CHECK CONSTRAINT [FK_coc_competition_staging_ParticipationTypes_coc_CompetitionParticipationTypes]
GO
ALTER TABLE [dbo].[coc_competition_staging_prizes]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_prizes_coc_competition_staging] FOREIGN KEY([CompetitionStagingId])
REFERENCES [dbo].[coc_competition_staging] ([CompetitionStagingID])
GO
ALTER TABLE [dbo].[coc_competition_staging_prizes] CHECK CONSTRAINT [FK_coc_competition_staging_prizes_coc_competition_staging]
GO
ALTER TABLE [dbo].[coc_competition_staging_prizes_languages]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_prizes_languages_coc_competition_staging_prizes] FOREIGN KEY([CompetitionStagingPrizeId])
REFERENCES [dbo].[coc_competition_staging_prizes] ([CompetitionStagingPrizeID])
GO
ALTER TABLE [dbo].[coc_competition_staging_prizes_languages] CHECK CONSTRAINT [FK_coc_competition_staging_prizes_languages_coc_competition_staging_prizes]
GO
ALTER TABLE [dbo].[coc_competition_staging_rejections]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_rejections_coc_competition_staging] FOREIGN KEY([CompetitionStagingID])
REFERENCES [dbo].[coc_competition_staging] ([CompetitionStagingID])
GO
ALTER TABLE [dbo].[coc_competition_staging_rejections] CHECK CONSTRAINT [FK_coc_competition_staging_rejections_coc_competition_staging]
GO
ALTER TABLE [dbo].[coc_Competition_Staging_RetailOutlets]  WITH CHECK ADD  CONSTRAINT [FK_coc_Competition_Staging_RetailOutlets_coc_competition_staging] FOREIGN KEY([CompetitionStagingId])
REFERENCES [dbo].[coc_competition_staging] ([CompetitionStagingID])
GO
ALTER TABLE [dbo].[coc_Competition_Staging_RetailOutlets] CHECK CONSTRAINT [FK_coc_Competition_Staging_RetailOutlets_coc_competition_staging]
GO
ALTER TABLE [dbo].[coc_Competition_Staging_RetailOutlets]  WITH CHECK ADD  CONSTRAINT [FK_coc_Competition_Staging_RetailOutlets_coc_RetailOutlets] FOREIGN KEY([RetailOutletID])
REFERENCES [dbo].[coc_RetailOutlets] ([RetailOutletID])
GO
ALTER TABLE [dbo].[coc_Competition_Staging_RetailOutlets] CHECK CONSTRAINT [FK_coc_Competition_Staging_RetailOutlets_coc_RetailOutlets]
GO
ALTER TABLE [dbo].[coc_competition_staging_Services]  WITH CHECK ADD  CONSTRAINT [FK_coc_competition_staging_Services_coc_CompetitionServices] FOREIGN KEY([CompetitionServiceId])
REFERENCES [dbo].[coc_CompetitionServices] ([CompetitionServiceID])
GO
ALTER TABLE [dbo].[coc_competition_staging_Services] CHECK CONSTRAINT [FK_coc_competition_staging_Services_coc_CompetitionServices]
GO
ALTER TABLE [dbo].[coc_competition_staging_SocialMedia]  WITH CHECK ADD FOREIGN KEY([SocialMediaID])
REFERENCES [dbo].[coc_SocialMedia] ([SocialMediaID])
GO
ALTER TABLE [dbo].[coc_competition_staging_SocialMedia]  WITH CHECK ADD FOREIGN KEY([SocialMediaID])
REFERENCES [dbo].[coc_SocialMedia] ([SocialMediaID])
GO
ALTER TABLE [dbo].[coc_CompetitionMethod_Types]  WITH CHECK ADD  CONSTRAINT [FK_coc_CompetitionMethod_Types_coc_CompetitionMethods] FOREIGN KEY([CompetitionMethodID])
REFERENCES [dbo].[coc_CompetitionMethods] ([CompetitionMethodID])
GO
ALTER TABLE [dbo].[coc_CompetitionMethod_Types] CHECK CONSTRAINT [FK_coc_CompetitionMethod_Types_coc_CompetitionMethods]
GO
ALTER TABLE [dbo].[coc_CompetitionMethod_Types]  WITH CHECK ADD  CONSTRAINT [FK_coc_CompetitionMethod_Types_coc_CompetitionTypes] FOREIGN KEY([CompetitionTypeID])
REFERENCES [dbo].[coc_CompetitionTypes] ([CompetitionTypeID])
GO
ALTER TABLE [dbo].[coc_CompetitionMethod_Types] CHECK CONSTRAINT [FK_coc_CompetitionMethod_Types_coc_CompetitionTypes]
GO
ALTER TABLE [dbo].[coc_CompetitionMethodLanguages]  WITH CHECK ADD  CONSTRAINT [FK_coc_CompetitionMethodLanguages_coc_CompetitionMethods] FOREIGN KEY([CompetitionMethodID])
REFERENCES [dbo].[coc_CompetitionMethods] ([CompetitionMethodID])
GO
ALTER TABLE [dbo].[coc_CompetitionMethodLanguages] CHECK CONSTRAINT [FK_coc_CompetitionMethodLanguages_coc_CompetitionMethods]
GO
ALTER TABLE [dbo].[coc_CompetitionMethodLanguages]  WITH CHECK ADD  CONSTRAINT [FK_coc_CompetitionMethodLanguages_coc_Languages] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_CompetitionMethodLanguages] CHECK CONSTRAINT [FK_coc_CompetitionMethodLanguages_coc_Languages]
GO
ALTER TABLE [dbo].[coc_CompetitionParticipationTypeLanguages]  WITH CHECK ADD  CONSTRAINT [FK_coc_CompetitionParticipationTypeLanguages_coc_CompetitionParticipationTypes] FOREIGN KEY([CompetitionParticipationTypeID])
REFERENCES [dbo].[coc_CompetitionParticipationTypes] ([CompetitionParticipationTypeID])
GO
ALTER TABLE [dbo].[coc_CompetitionParticipationTypeLanguages] CHECK CONSTRAINT [FK_coc_CompetitionParticipationTypeLanguages_coc_CompetitionParticipationTypes]
GO
ALTER TABLE [dbo].[coc_CompetitionParticipationTypeLanguages]  WITH CHECK ADD  CONSTRAINT [FK_coc_CompetitionParticipationTypeLanguages_coc_Languages] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_CompetitionParticipationTypeLanguages] CHECK CONSTRAINT [FK_coc_CompetitionParticipationTypeLanguages_coc_Languages]
GO
ALTER TABLE [dbo].[coc_CompetitionPayment]  WITH CHECK ADD  CONSTRAINT [FK_coc_CompetitionPayment_coc_competition_staging] FOREIGN KEY([CompetitionStagingID])
REFERENCES [dbo].[coc_competition_staging] ([CompetitionStagingID])
GO
ALTER TABLE [dbo].[coc_CompetitionPayment] CHECK CONSTRAINT [FK_coc_CompetitionPayment_coc_competition_staging]
GO
ALTER TABLE [dbo].[coc_CompetitionServiceLanguages]  WITH CHECK ADD  CONSTRAINT [FK_coc_CompetitionServiceLanguages_coc_CompetitionServices] FOREIGN KEY([CompetitionServiceID])
REFERENCES [dbo].[coc_CompetitionServices] ([CompetitionServiceID])
GO
ALTER TABLE [dbo].[coc_CompetitionServiceLanguages] CHECK CONSTRAINT [FK_coc_CompetitionServiceLanguages_coc_CompetitionServices]
GO
ALTER TABLE [dbo].[coc_CompetitionType_Participation]  WITH CHECK ADD  CONSTRAINT [FK_coc_CompetitionType_Participation_coc_CompetitionMethod_Types] FOREIGN KEY([CompetitionMethodTypeID])
REFERENCES [dbo].[coc_CompetitionMethod_Types] ([CompetitionMethodTypeID])
GO
ALTER TABLE [dbo].[coc_CompetitionType_Participation] CHECK CONSTRAINT [FK_coc_CompetitionType_Participation_coc_CompetitionMethod_Types]
GO
ALTER TABLE [dbo].[coc_CompetitionType_Participation]  WITH CHECK ADD  CONSTRAINT [FK_coc_CompetitionType_Participation_coc_CompetitionParticipationTypes] FOREIGN KEY([CompetitionParticipationTypeID])
REFERENCES [dbo].[coc_CompetitionParticipationTypes] ([CompetitionParticipationTypeID])
GO
ALTER TABLE [dbo].[coc_CompetitionType_Participation] CHECK CONSTRAINT [FK_coc_CompetitionType_Participation_coc_CompetitionParticipationTypes]
GO
ALTER TABLE [dbo].[coc_CompetitionType_Services]  WITH CHECK ADD  CONSTRAINT [FK_coc_CompetitionType_Services_coc_CompetitionMethod_Types] FOREIGN KEY([CompetitionMethodTypeID])
REFERENCES [dbo].[coc_CompetitionMethod_Types] ([CompetitionMethodTypeID])
GO
ALTER TABLE [dbo].[coc_CompetitionType_Services] CHECK CONSTRAINT [FK_coc_CompetitionType_Services_coc_CompetitionMethod_Types]
GO
ALTER TABLE [dbo].[coc_CompetitionType_Services]  WITH CHECK ADD  CONSTRAINT [FK_coc_CompetitionType_Services_coc_CompetitionServices] FOREIGN KEY([CompetitionServiceID])
REFERENCES [dbo].[coc_CompetitionServices] ([CompetitionServiceID])
GO
ALTER TABLE [dbo].[coc_CompetitionType_Services] CHECK CONSTRAINT [FK_coc_CompetitionType_Services_coc_CompetitionServices]
GO
ALTER TABLE [dbo].[coc_CompetitionTypeLanguages]  WITH CHECK ADD  CONSTRAINT [FK_coc_CompetitionTypeLanguages_coc_CompetitionTypes] FOREIGN KEY([CompetitionTypeID])
REFERENCES [dbo].[coc_CompetitionTypes] ([CompetitionTypeID])
GO
ALTER TABLE [dbo].[coc_CompetitionTypeLanguages] CHECK CONSTRAINT [FK_coc_CompetitionTypeLanguages_coc_CompetitionTypes]
GO
ALTER TABLE [dbo].[coc_CompetitionTypeLanguages]  WITH CHECK ADD  CONSTRAINT [FK_coc_CompetitionTypeLanguages_coc_Languages] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_CompetitionTypeLanguages] CHECK CONSTRAINT [FK_coc_CompetitionTypeLanguages_coc_Languages]
GO
ALTER TABLE [dbo].[coc_ConfigurationUploadParticipations]  WITH CHECK ADD FOREIGN KEY([ECouponID])
REFERENCES [dbo].[coc_ECoupons] ([ECouponID])
GO
ALTER TABLE [dbo].[coc_ConsumerExclusions]  WITH CHECK ADD  CONSTRAINT [FK_ConsumerInclusion_Consumers] FOREIGN KEY([ConsumerID])
REFERENCES [dbo].[coc_Consumers] ([ConsumerID])
GO
ALTER TABLE [dbo].[coc_ConsumerExclusions] CHECK CONSTRAINT [FK_ConsumerInclusion_Consumers]
GO
ALTER TABLE [dbo].[coc_ConsumerExclusions]  WITH CHECK ADD  CONSTRAINT [FK_ConsumerInclusion_ECouponInvoices] FOREIGN KEY([ECouponID])
REFERENCES [dbo].[coc_ECoupons] ([ECouponID])
GO
ALTER TABLE [dbo].[coc_ConsumerExclusions] CHECK CONSTRAINT [FK_ConsumerInclusion_ECouponInvoices]
GO
ALTER TABLE [dbo].[coc_ConsumerExclusions]  WITH CHECK ADD  CONSTRAINT [FK_ConsumerInclusion_EServices] FOREIGN KEY([CorporateID])
REFERENCES [dbo].[coc_Corporates] ([CorporateID])
GO
ALTER TABLE [dbo].[coc_ConsumerExclusions] CHECK CONSTRAINT [FK_ConsumerInclusion_EServices]
GO
ALTER TABLE [dbo].[coc_ConsumerInterestedCities]  WITH CHECK ADD  CONSTRAINT [FK_ConsumerInterestedCities1] FOREIGN KEY([ConsumerID])
REFERENCES [dbo].[coc_Consumers] ([ConsumerID])
GO
ALTER TABLE [dbo].[coc_ConsumerInterestedCities] CHECK CONSTRAINT [FK_ConsumerInterestedCities1]
GO
ALTER TABLE [dbo].[coc_ConsumerInterestedCities]  WITH CHECK ADD  CONSTRAINT [FK_ConsumerInterestedCities2] FOREIGN KEY([CityID])
REFERENCES [dbo].[coc_Cities] ([CityID])
GO
ALTER TABLE [dbo].[coc_ConsumerInterestedCities] CHECK CONSTRAINT [FK_ConsumerInterestedCities2]
GO
ALTER TABLE [dbo].[coc_ConsumerNotifications]  WITH CHECK ADD  CONSTRAINT [FK_ConsumerNotifications1] FOREIGN KEY([NotificationSendID])
REFERENCES [dbo].[coc_NotificationSends] ([NotificationSendID])
GO
ALTER TABLE [dbo].[coc_ConsumerNotifications] CHECK CONSTRAINT [FK_ConsumerNotifications1]
GO
ALTER TABLE [dbo].[coc_ConsumerNotifications]  WITH CHECK ADD  CONSTRAINT [FK_ConsumerNotifications2] FOREIGN KEY([ConsumerID])
REFERENCES [dbo].[coc_Consumers] ([ConsumerID])
GO
ALTER TABLE [dbo].[coc_ConsumerNotifications] CHECK CONSTRAINT [FK_ConsumerNotifications2]
GO
ALTER TABLE [dbo].[coc_ConsumerPointDetails]  WITH CHECK ADD  CONSTRAINT [FK_ConsumerPointDetails] FOREIGN KEY([ConsumerID])
REFERENCES [dbo].[coc_Consumers] ([ConsumerID])
GO
ALTER TABLE [dbo].[coc_ConsumerPointDetails] CHECK CONSTRAINT [FK_ConsumerPointDetails]
GO
ALTER TABLE [dbo].[coc_ConsumerPointDetails]  WITH CHECK ADD  CONSTRAINT [FK_ConsumerPointDetails2] FOREIGN KEY([ECouponID])
REFERENCES [dbo].[coc_ECoupons] ([ECouponID])
GO
ALTER TABLE [dbo].[coc_ConsumerPointDetails] CHECK CONSTRAINT [FK_ConsumerPointDetails2]
GO
ALTER TABLE [dbo].[coc_ConsumerRedemptions]  WITH CHECK ADD  CONSTRAINT [FK_ConsumerRedemptions1] FOREIGN KEY([ConsumerID])
REFERENCES [dbo].[coc_Consumers] ([ConsumerID])
GO
ALTER TABLE [dbo].[coc_ConsumerRedemptions] CHECK CONSTRAINT [FK_ConsumerRedemptions1]
GO
ALTER TABLE [dbo].[coc_ConsumerRedemptions]  WITH CHECK ADD  CONSTRAINT [FK_ConsumerRedemptions2] FOREIGN KEY([RedemptionPlanID])
REFERENCES [dbo].[coc_RedemptionPlans] ([RedemptionPlanID])
GO
ALTER TABLE [dbo].[coc_ConsumerRedemptions] CHECK CONSTRAINT [FK_ConsumerRedemptions2]
GO
ALTER TABLE [dbo].[coc_ConsumerRedemptions]  WITH CHECK ADD  CONSTRAINT [FK_ConsumerRedemptions3] FOREIGN KEY([RetailOutletID])
REFERENCES [dbo].[coc_RetailOutlets] ([RetailOutletID])
GO
ALTER TABLE [dbo].[coc_ConsumerRedemptions] CHECK CONSTRAINT [FK_ConsumerRedemptions3]
GO
ALTER TABLE [dbo].[coc_ConsumerRedemptions]  WITH CHECK ADD  CONSTRAINT [FK_ConsumerRedemptions4] FOREIGN KEY([OtpID])
REFERENCES [dbo].[coc_OTP] ([OtpID])
GO
ALTER TABLE [dbo].[coc_ConsumerRedemptions] CHECK CONSTRAINT [FK_ConsumerRedemptions4]
GO
ALTER TABLE [dbo].[coc_ConsumerRedemptions]  WITH CHECK ADD  CONSTRAINT [FK_ConsumerRedemptions51] FOREIGN KEY([VerificationUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_ConsumerRedemptions] CHECK CONSTRAINT [FK_ConsumerRedemptions51]
GO
ALTER TABLE [dbo].[coc_Consumers]  WITH CHECK ADD  CONSTRAINT [FK_coc_Consumers_coc_Core_ConsumerStatus] FOREIGN KEY([StatusID])
REFERENCES [dbo].[coc_Core_ConsumerStatus] ([ConsumerStatusID])
GO
ALTER TABLE [dbo].[coc_Consumers] CHECK CONSTRAINT [FK_coc_Consumers_coc_Core_ConsumerStatus]
GO
ALTER TABLE [dbo].[coc_Consumers]  WITH CHECK ADD  CONSTRAINT [FK_Consumers1] FOREIGN KEY([UserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_Consumers] CHECK CONSTRAINT [FK_Consumers1]
GO
ALTER TABLE [dbo].[coc_Consumers]  WITH CHECK ADD  CONSTRAINT [FK_Consumers2] FOREIGN KEY([AgeGroupID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_Consumers] CHECK CONSTRAINT [FK_Consumers2]
GO
ALTER TABLE [dbo].[coc_Consumers]  WITH CHECK ADD  CONSTRAINT [FK_Consumers3] FOREIGN KEY([KnowECouponID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_Consumers] CHECK CONSTRAINT [FK_Consumers3]
GO
ALTER TABLE [dbo].[coc_Consumers]  WITH CHECK ADD  CONSTRAINT [FK_Consumers4] FOREIGN KEY([CityID])
REFERENCES [dbo].[coc_Cities] ([CityID])
GO
ALTER TABLE [dbo].[coc_Consumers] CHECK CONSTRAINT [FK_Consumers4]
GO
ALTER TABLE [dbo].[coc_Consumers]  WITH CHECK ADD  CONSTRAINT [FK_Consumers5] FOREIGN KEY([CountryID])
REFERENCES [dbo].[coc_Countries] ([CountryID])
GO
ALTER TABLE [dbo].[coc_Consumers] CHECK CONSTRAINT [FK_Consumers5]
GO
ALTER TABLE [dbo].[coc_Consumers]  WITH CHECK ADD  CONSTRAINT [FK_Consumers6] FOREIGN KEY([NationalityID])
REFERENCES [dbo].[coc_Nationalities] ([NationalityID])
GO
ALTER TABLE [dbo].[coc_Consumers] CHECK CONSTRAINT [FK_Consumers6]
GO
ALTER TABLE [dbo].[coc_Consumers]  WITH CHECK ADD  CONSTRAINT [FK_Consumers7] FOREIGN KEY([OtpID])
REFERENCES [dbo].[coc_OTP] ([OtpID])
GO
ALTER TABLE [dbo].[coc_Consumers] CHECK CONSTRAINT [FK_Consumers7]
GO
ALTER TABLE [dbo].[coc_ConsumersUpdateLog]  WITH CHECK ADD  CONSTRAINT [FK_coc_ConsumersUpdateLog_coc_Consumers] FOREIGN KEY([ConsumerID])
REFERENCES [dbo].[coc_Consumers] ([ConsumerID])
GO
ALTER TABLE [dbo].[coc_ConsumersUpdateLog] CHECK CONSTRAINT [FK_coc_ConsumersUpdateLog_coc_Consumers]
GO
ALTER TABLE [dbo].[coc_ContactChanges]  WITH CHECK ADD  CONSTRAINT [FK_ContactChanges1] FOREIGN KEY([ConsumerID])
REFERENCES [dbo].[coc_Consumers] ([ConsumerID])
GO
ALTER TABLE [dbo].[coc_ContactChanges] CHECK CONSTRAINT [FK_ContactChanges1]
GO
ALTER TABLE [dbo].[coc_ContactChanges]  WITH CHECK ADD  CONSTRAINT [FK_ContactChanges2] FOREIGN KEY([MobileOtpID])
REFERENCES [dbo].[coc_OTP] ([OtpID])
GO
ALTER TABLE [dbo].[coc_ContactChanges] CHECK CONSTRAINT [FK_ContactChanges2]
GO
ALTER TABLE [dbo].[coc_ContactChanges]  WITH CHECK ADD  CONSTRAINT [FK_ContactChanges3] FOREIGN KEY([EmailOtpID])
REFERENCES [dbo].[coc_OTP] ([OtpID])
GO
ALTER TABLE [dbo].[coc_ContactChanges] CHECK CONSTRAINT [FK_ContactChanges3]
GO
ALTER TABLE [dbo].[coc_ContentItemLanguages]  WITH CHECK ADD  CONSTRAINT [FK_ContentItemLanguages1] FOREIGN KEY([ContentItemID])
REFERENCES [dbo].[coc_ContentItems] ([ContentItemID])
GO
ALTER TABLE [dbo].[coc_ContentItemLanguages] CHECK CONSTRAINT [FK_ContentItemLanguages1]
GO
ALTER TABLE [dbo].[coc_ContentItemLanguages]  WITH CHECK ADD  CONSTRAINT [FK_ContentItemLanguages2] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_ContentItemLanguages] CHECK CONSTRAINT [FK_ContentItemLanguages2]
GO
ALTER TABLE [dbo].[Coc_Core_DynamicLinks]  WITH CHECK ADD  CONSTRAINT [FK_Coc_Core_DynamicLinks_coc_ECoupons] FOREIGN KEY([EcouponID])
REFERENCES [dbo].[coc_ECoupons] ([ECouponID])
GO
ALTER TABLE [dbo].[Coc_Core_DynamicLinks] CHECK CONSTRAINT [FK_Coc_Core_DynamicLinks_coc_ECoupons]
GO
ALTER TABLE [dbo].[coc_core_ECouponIntegralShoppers]  WITH CHECK ADD  CONSTRAINT [FK_coc_core_ECouponIntegralShoppers_coc_ECoupons] FOREIGN KEY([ECouponID])
REFERENCES [dbo].[coc_ECoupons] ([ECouponID])
GO
ALTER TABLE [dbo].[coc_core_ECouponIntegralShoppers] CHECK CONSTRAINT [FK_coc_core_ECouponIntegralShoppers_coc_ECoupons]
GO
ALTER TABLE [dbo].[coc_core_IntegralShopperParameters]  WITH CHECK ADD  CONSTRAINT [FK_coc_core_IntegralShopperParameters_coc_core_ECouponIntegralShoppers] FOREIGN KEY([ECouponIntegralShopperID])
REFERENCES [dbo].[coc_core_ECouponIntegralShoppers] ([ECouponIntegralShopperID])
GO
ALTER TABLE [dbo].[coc_core_IntegralShopperParameters] CHECK CONSTRAINT [FK_coc_core_IntegralShopperParameters_coc_core_ECouponIntegralShoppers]
GO
ALTER TABLE [dbo].[coc_CorporateAPIUser]  WITH CHECK ADD  CONSTRAINT [FK_coc_CorporateAPIUser_coc_Corporates] FOREIGN KEY([CorporateID])
REFERENCES [dbo].[coc_Corporates] ([CorporateID])
GO
ALTER TABLE [dbo].[coc_CorporateAPIUser] CHECK CONSTRAINT [FK_coc_CorporateAPIUser_coc_Corporates]
GO
ALTER TABLE [dbo].[coc_Corporates]  WITH CHECK ADD  CONSTRAINT [FK_Corporates1] FOREIGN KEY([UserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_Corporates] CHECK CONSTRAINT [FK_Corporates1]
GO
ALTER TABLE [dbo].[coc_Corporates]  WITH CHECK ADD  CONSTRAINT [FK_Corporates6] FOREIGN KEY([BarcodeTypeID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_Corporates] CHECK CONSTRAINT [FK_Corporates6]
GO
ALTER TABLE [dbo].[coc_Corporates]  WITH CHECK ADD  CONSTRAINT [FK_Corporates7] FOREIGN KEY([CountryID])
REFERENCES [dbo].[coc_Countries] ([CountryID])
GO
ALTER TABLE [dbo].[coc_Corporates] CHECK CONSTRAINT [FK_Corporates7]
GO
ALTER TABLE [dbo].[coc_Corporates]  WITH CHECK ADD  CONSTRAINT [FK_Corporates8] FOREIGN KEY([CityID])
REFERENCES [dbo].[coc_Cities] ([CityID])
GO
ALTER TABLE [dbo].[coc_Corporates] CHECK CONSTRAINT [FK_Corporates8]
GO
ALTER TABLE [dbo].[coc_CorporateUsers]  WITH CHECK ADD  CONSTRAINT [FK_CorporateUsers1] FOREIGN KEY([UserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_CorporateUsers] CHECK CONSTRAINT [FK_CorporateUsers1]
GO
ALTER TABLE [dbo].[coc_CorporateUsers]  WITH CHECK ADD  CONSTRAINT [FK_CorporateUsers2] FOREIGN KEY([CorporateID])
REFERENCES [dbo].[coc_Corporates] ([CorporateID])
GO
ALTER TABLE [dbo].[coc_CorporateUsers] CHECK CONSTRAINT [FK_CorporateUsers2]
GO
ALTER TABLE [dbo].[coc_CorporateUsers]  WITH CHECK ADD  CONSTRAINT [FK_CorporateUsers3] FOREIGN KEY([RetailOutletID])
REFERENCES [dbo].[coc_RetailOutlets] ([RetailOutletID])
GO
ALTER TABLE [dbo].[coc_CorporateUsers] CHECK CONSTRAINT [FK_CorporateUsers3]
GO
ALTER TABLE [dbo].[coc_CorporateUsers]  WITH CHECK ADD  CONSTRAINT [FK_CorporateUsers51] FOREIGN KEY([AddUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_CorporateUsers] CHECK CONSTRAINT [FK_CorporateUsers51]
GO
ALTER TABLE [dbo].[coc_CorporateUsers]  WITH CHECK ADD  CONSTRAINT [FK_CorporateUsers52] FOREIGN KEY([EditUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_CorporateUsers] CHECK CONSTRAINT [FK_CorporateUsers52]
GO
ALTER TABLE [dbo].[coc_CountryLanguages]  WITH CHECK ADD  CONSTRAINT [FK_CountryLanguages1] FOREIGN KEY([CountryID])
REFERENCES [dbo].[coc_Countries] ([CountryID])
GO
ALTER TABLE [dbo].[coc_CountryLanguages] CHECK CONSTRAINT [FK_CountryLanguages1]
GO
ALTER TABLE [dbo].[coc_CountryLanguages]  WITH CHECK ADD  CONSTRAINT [FK_CountryLanguages2] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_CountryLanguages] CHECK CONSTRAINT [FK_CountryLanguages2]
GO
ALTER TABLE [dbo].[coc_DynamicCompetition]  WITH CHECK ADD  CONSTRAINT [FK_coc_DynamicCompetition_coc_ECoupons] FOREIGN KEY([ECouponID])
REFERENCES [dbo].[coc_ECoupons] ([ECouponID])
GO
ALTER TABLE [dbo].[coc_DynamicCompetition] CHECK CONSTRAINT [FK_coc_DynamicCompetition_coc_ECoupons]
GO
ALTER TABLE [dbo].[coc_DynamicCompetition]  WITH CHECK ADD  CONSTRAINT [FK_coc_DynamicCompetition_coc_RetailOutlets] FOREIGN KEY([RetailOutletID])
REFERENCES [dbo].[coc_RetailOutlets] ([RetailOutletID])
GO
ALTER TABLE [dbo].[coc_DynamicCompetition] CHECK CONSTRAINT [FK_coc_DynamicCompetition_coc_RetailOutlets]
GO
ALTER TABLE [dbo].[coc_EBundleLanguages]  WITH CHECK ADD  CONSTRAINT [FK_coc_EBundleLanguages_coc_EBundle] FOREIGN KEY([EBundleID])
REFERENCES [dbo].[coc_EBundle] ([EBundleID])
GO
ALTER TABLE [dbo].[coc_EBundleLanguages] CHECK CONSTRAINT [FK_coc_EBundleLanguages_coc_EBundle]
GO
ALTER TABLE [dbo].[coc_EBundleLanguages]  WITH CHECK ADD  CONSTRAINT [FK_coc_EBundleLanguages_coc_Languages] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_EBundleLanguages] CHECK CONSTRAINT [FK_coc_EBundleLanguages_coc_Languages]
GO
ALTER TABLE [dbo].[coc_ECouponDraw]  WITH CHECK ADD  CONSTRAINT [FK_coc_ECouponDraw_coc_ECoupons] FOREIGN KEY([ECouponID])
REFERENCES [dbo].[coc_ECoupons] ([ECouponID])
GO
ALTER TABLE [dbo].[coc_ECouponDraw] CHECK CONSTRAINT [FK_coc_ECouponDraw_coc_ECoupons]
GO
ALTER TABLE [dbo].[coc_ECouponDrawLanguage]  WITH CHECK ADD  CONSTRAINT [FK_coc_ECouponDrawLanguage_coc_ECouponDraw] FOREIGN KEY([ECouponDrawID])
REFERENCES [dbo].[coc_ECouponDraw] ([ECouponDrawID])
GO
ALTER TABLE [dbo].[coc_ECouponDrawLanguage] CHECK CONSTRAINT [FK_coc_ECouponDrawLanguage_coc_ECouponDraw]
GO
ALTER TABLE [dbo].[coc_ECouponDrawLanguages]  WITH CHECK ADD  CONSTRAINT [FK_coc_ECouponDrawLanguages_coc_ECouponDraw] FOREIGN KEY([ECouponDrawID])
REFERENCES [dbo].[coc_ECouponDraw] ([ECouponDrawID])
GO
ALTER TABLE [dbo].[coc_ECouponDrawLanguages] CHECK CONSTRAINT [FK_coc_ECouponDrawLanguages_coc_ECouponDraw]
GO
ALTER TABLE [dbo].[coc_ECouponDrawPrizes]  WITH CHECK ADD  CONSTRAINT [FK_coc_ECouponDrawPrizes_coc_ECouponDraw] FOREIGN KEY([ECouponDrawID])
REFERENCES [dbo].[coc_ECouponDraw] ([ECouponDrawID])
GO
ALTER TABLE [dbo].[coc_ECouponDrawPrizes] CHECK CONSTRAINT [FK_coc_ECouponDrawPrizes_coc_ECouponDraw]
GO
ALTER TABLE [dbo].[coc_ECouponDrawPrizes]  WITH CHECK ADD  CONSTRAINT [FK_coc_ECouponDrawPrizes_coc_ECouponPrizes] FOREIGN KEY([ECouponPrizeID])
REFERENCES [dbo].[coc_ECouponPrizes] ([ECouponPrizeID])
GO
ALTER TABLE [dbo].[coc_ECouponDrawPrizes] CHECK CONSTRAINT [FK_coc_ECouponDrawPrizes_coc_ECouponPrizes]
GO
ALTER TABLE [dbo].[coc_ECouponInvoiceDetails]  WITH CHECK ADD  CONSTRAINT [FK_ECouponInvoiceDetails] FOREIGN KEY([ECouponInvoiceID])
REFERENCES [dbo].[coc_ECouponInvoices] ([ECouponInvoiceID])
GO
ALTER TABLE [dbo].[coc_ECouponInvoiceDetails] CHECK CONSTRAINT [FK_ECouponInvoiceDetails]
GO
ALTER TABLE [dbo].[coc_ECouponInvoices]  WITH CHECK ADD  CONSTRAINT [FK_ECouponInvoices1] FOREIGN KEY([ECouponID])
REFERENCES [dbo].[coc_ECoupons] ([ECouponID])
GO
ALTER TABLE [dbo].[coc_ECouponInvoices] CHECK CONSTRAINT [FK_ECouponInvoices1]
GO
ALTER TABLE [dbo].[coc_ECouponInvoices]  WITH CHECK ADD  CONSTRAINT [FK_ECouponInvoices2] FOREIGN KEY([ConsumerID])
REFERENCES [dbo].[coc_Consumers] ([ConsumerID])
GO
ALTER TABLE [dbo].[coc_ECouponInvoices] CHECK CONSTRAINT [FK_ECouponInvoices2]
GO
ALTER TABLE [dbo].[coc_ECouponInvoices]  WITH CHECK ADD  CONSTRAINT [FK_ECouponInvoices51] FOREIGN KEY([AddUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_ECouponInvoices] CHECK CONSTRAINT [FK_ECouponInvoices51]
GO
ALTER TABLE [dbo].[coc_ECouponLanguages]  WITH CHECK ADD  CONSTRAINT [FK_ECouponLanguages1] FOREIGN KEY([ECouponID])
REFERENCES [dbo].[coc_ECoupons] ([ECouponID])
GO
ALTER TABLE [dbo].[coc_ECouponLanguages] CHECK CONSTRAINT [FK_ECouponLanguages1]
GO
ALTER TABLE [dbo].[coc_ECouponLanguages]  WITH CHECK ADD  CONSTRAINT [FK_ECouponLanguages2] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_ECouponLanguages] CHECK CONSTRAINT [FK_ECouponLanguages2]
GO
ALTER TABLE [dbo].[coc_ECouponOutlets]  WITH CHECK ADD  CONSTRAINT [FK_ECouponOutlets1] FOREIGN KEY([ECouponID])
REFERENCES [dbo].[coc_ECoupons] ([ECouponID])
GO
ALTER TABLE [dbo].[coc_ECouponOutlets] CHECK CONSTRAINT [FK_ECouponOutlets1]
GO
ALTER TABLE [dbo].[coc_ECouponOutlets]  WITH CHECK ADD  CONSTRAINT [FK_ECouponOutlets2] FOREIGN KEY([RetailOutletID])
REFERENCES [dbo].[coc_RetailOutlets] ([RetailOutletID])
GO
ALTER TABLE [dbo].[coc_ECouponOutlets] CHECK CONSTRAINT [FK_ECouponOutlets2]
GO
ALTER TABLE [dbo].[coc_ECouponParticipationAnswers]  WITH CHECK ADD  CONSTRAINT [FK_coc_ECouponParticipationAnswers_Participation] FOREIGN KEY([ECouponParticipationID])
REFERENCES [dbo].[coc_ECouponParticipations] ([ECouponParticipationID])
GO
ALTER TABLE [dbo].[coc_ECouponParticipationAnswers] CHECK CONSTRAINT [FK_coc_ECouponParticipationAnswers_Participation]
GO
ALTER TABLE [dbo].[coc_ECouponParticipationAnswers]  WITH CHECK ADD  CONSTRAINT [FK_ECouponParticipationAnswers__Answer] FOREIGN KEY([QuestionOptionID])
REFERENCES [dbo].[coc_QuestionOptions] ([QuestionOptionID])
GO
ALTER TABLE [dbo].[coc_ECouponParticipationAnswers] CHECK CONSTRAINT [FK_ECouponParticipationAnswers__Answer]
GO
ALTER TABLE [dbo].[coc_ECouponParticipationAnswers]  WITH CHECK ADD  CONSTRAINT [FK_ECouponParticipationAnswers__Question] FOREIGN KEY([QuestionBankID])
REFERENCES [dbo].[coc_QuestionBanks] ([QuestionBankID])
GO
ALTER TABLE [dbo].[coc_ECouponParticipationAnswers] CHECK CONSTRAINT [FK_ECouponParticipationAnswers__Question]
GO
ALTER TABLE [dbo].[coc_ECouponParticipations]  WITH CHECK ADD  CONSTRAINT [FK_ECouponParticipations__Guests] FOREIGN KEY([GuestID])
REFERENCES [dbo].[coc_Guests] ([GuestID])
GO
ALTER TABLE [dbo].[coc_ECouponParticipations] CHECK CONSTRAINT [FK_ECouponParticipations__Guests]
GO
ALTER TABLE [dbo].[coc_ECouponParticipations]  WITH CHECK ADD  CONSTRAINT [FK_ECouponParticipations__RetailOutlets] FOREIGN KEY([RetailOutletID])
REFERENCES [dbo].[coc_RetailOutlets] ([RetailOutletID])
GO
ALTER TABLE [dbo].[coc_ECouponParticipations] CHECK CONSTRAINT [FK_ECouponParticipations__RetailOutlets]
GO
ALTER TABLE [dbo].[coc_ECouponParticipations]  WITH CHECK ADD  CONSTRAINT [FK_ECouponParticipations1] FOREIGN KEY([ECouponID])
REFERENCES [dbo].[coc_ECoupons] ([ECouponID])
GO
ALTER TABLE [dbo].[coc_ECouponParticipations] CHECK CONSTRAINT [FK_ECouponParticipations1]
GO
ALTER TABLE [dbo].[coc_ECouponParticipations]  WITH CHECK ADD  CONSTRAINT [FK_ECouponParticipations2] FOREIGN KEY([ConsumerID])
REFERENCES [dbo].[coc_Consumers] ([ConsumerID])
GO
ALTER TABLE [dbo].[coc_ECouponParticipations] CHECK CONSTRAINT [FK_ECouponParticipations2]
GO
ALTER TABLE [dbo].[coc_ECouponParticipationsInvalid]  WITH CHECK ADD  CONSTRAINT [FK_ECouponParticipationsInvalid1] FOREIGN KEY([ECouponID])
REFERENCES [dbo].[coc_ECoupons] ([ECouponID])
GO
ALTER TABLE [dbo].[coc_ECouponParticipationsInvalid] CHECK CONSTRAINT [FK_ECouponParticipationsInvalid1]
GO
ALTER TABLE [dbo].[coc_ECouponParticipationsInvalid]  WITH CHECK ADD  CONSTRAINT [FK_ECouponParticipationsInvalid2] FOREIGN KEY([ConsumerID])
REFERENCES [dbo].[coc_Consumers] ([ConsumerID])
GO
ALTER TABLE [dbo].[coc_ECouponParticipationsInvalid] CHECK CONSTRAINT [FK_ECouponParticipationsInvalid2]
GO
ALTER TABLE [dbo].[coc_ECouponPrizes]  WITH CHECK ADD  CONSTRAINT [FK_ECouponPrizes1] FOREIGN KEY([ECouponID])
REFERENCES [dbo].[coc_ECoupons] ([ECouponID])
GO
ALTER TABLE [dbo].[coc_ECouponPrizes] CHECK CONSTRAINT [FK_ECouponPrizes1]
GO
ALTER TABLE [dbo].[coc_ECouponPrizes]  WITH CHECK ADD  CONSTRAINT [FK_ECouponPrizes2] FOREIGN KEY([PrizeTypeID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_ECouponPrizes] CHECK CONSTRAINT [FK_ECouponPrizes2]
GO
ALTER TABLE [dbo].[coc_ECouponPrizesLanguage]  WITH CHECK ADD  CONSTRAINT [FK_coc_ECouponPrizesLanguage_coc_ECouponPrizes] FOREIGN KEY([ECouponPrizeID])
REFERENCES [dbo].[coc_ECouponPrizes] ([ECouponPrizeID])
GO
ALTER TABLE [dbo].[coc_ECouponPrizesLanguage] CHECK CONSTRAINT [FK_coc_ECouponPrizesLanguage_coc_ECouponPrizes]
GO
ALTER TABLE [dbo].[coc_ECouponPrizesLanguages]  WITH CHECK ADD  CONSTRAINT [FK_coc_ECouponPrizesLanguages_coc_ECouponPrizes] FOREIGN KEY([ECouponPrizeID])
REFERENCES [dbo].[coc_ECouponPrizes] ([ECouponPrizeID])
GO
ALTER TABLE [dbo].[coc_ECouponPrizesLanguages] CHECK CONSTRAINT [FK_coc_ECouponPrizesLanguages_coc_ECouponPrizes]
GO
ALTER TABLE [dbo].[coc_ECouponProducts]  WITH CHECK ADD  CONSTRAINT [FK_ECouponProducts] FOREIGN KEY([ECouponID])
REFERENCES [dbo].[coc_ECoupons] ([ECouponID])
GO
ALTER TABLE [dbo].[coc_ECouponProducts] CHECK CONSTRAINT [FK_ECouponProducts]
GO
ALTER TABLE [dbo].[coc_ECoupons]  WITH CHECK ADD  CONSTRAINT [FK_ECoupons1] FOREIGN KEY([EServiceID])
REFERENCES [dbo].[coc_EServices] ([EServiceID])
GO
ALTER TABLE [dbo].[coc_ECoupons] CHECK CONSTRAINT [FK_ECoupons1]
GO
ALTER TABLE [dbo].[coc_ECoupons]  WITH CHECK ADD  CONSTRAINT [FK_ECoupons2] FOREIGN KEY([EntryTypeID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_ECoupons] CHECK CONSTRAINT [FK_ECoupons2]
GO
ALTER TABLE [dbo].[coc_ECoupons]  WITH CHECK ADD  CONSTRAINT [FK_ECoupons3] FOREIGN KEY([DeclaredBy])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_ECoupons] CHECK CONSTRAINT [FK_ECoupons3]
GO
ALTER TABLE [dbo].[coc_ECoupons]  WITH CHECK ADD  CONSTRAINT [FK_ECoupons51] FOREIGN KEY([AddUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_ECoupons] CHECK CONSTRAINT [FK_ECoupons51]
GO
ALTER TABLE [dbo].[coc_ECoupons]  WITH CHECK ADD  CONSTRAINT [FK_ECoupons52] FOREIGN KEY([EditUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_ECoupons] CHECK CONSTRAINT [FK_ECoupons52]
GO
ALTER TABLE [dbo].[coc_ECouponStandardBarcodes]  WITH CHECK ADD  CONSTRAINT [FK_ECouponStandardBarcodes_ECouponOutlet] FOREIGN KEY([ECouponOutletID])
REFERENCES [dbo].[coc_ECouponOutlets] ([ECouponOutletID])
GO
ALTER TABLE [dbo].[coc_ECouponStandardBarcodes] CHECK CONSTRAINT [FK_ECouponStandardBarcodes_ECouponOutlet]
GO
ALTER TABLE [dbo].[coc_ECouponStandardBarcodes]  WITH CHECK ADD  CONSTRAINT [FK_ECouponStandardBarcodes_QuestionOptions] FOREIGN KEY([QuestionOptionID])
REFERENCES [dbo].[coc_QuestionOptions] ([QuestionOptionID])
GO
ALTER TABLE [dbo].[coc_ECouponStandardBarcodes] CHECK CONSTRAINT [FK_ECouponStandardBarcodes_QuestionOptions]
GO
ALTER TABLE [dbo].[coc_ECouponVoucherSending]  WITH NOCHECK ADD  CONSTRAINT [FK_coc_ECouponVoucher_coc_EServices] FOREIGN KEY([EServiceID])
REFERENCES [dbo].[coc_EServices] ([EServiceID])
GO
ALTER TABLE [dbo].[coc_ECouponVoucherSending] CHECK CONSTRAINT [FK_coc_ECouponVoucher_coc_EServices]
GO
ALTER TABLE [dbo].[coc_ECouponVoucherSending]  WITH NOCHECK ADD  CONSTRAINT [FK_coc_ECouponVoucher_ToTablecoc_EVouchers] FOREIGN KEY([EVoucherID])
REFERENCES [dbo].[coc_EVoucher] ([EVoucherID])
GO
ALTER TABLE [dbo].[coc_ECouponVoucherSending] CHECK CONSTRAINT [FK_coc_ECouponVoucher_ToTablecoc_EVouchers]
GO
ALTER TABLE [dbo].[coc_ECouponWinners]  WITH CHECK ADD  CONSTRAINT [FK_ECouponWinners1] FOREIGN KEY([ECouponPrizeID])
REFERENCES [dbo].[coc_ECouponPrizes] ([ECouponPrizeID])
GO
ALTER TABLE [dbo].[coc_ECouponWinners] CHECK CONSTRAINT [FK_ECouponWinners1]
GO
ALTER TABLE [dbo].[coc_ECouponWinners]  WITH CHECK ADD  CONSTRAINT [FK_ECouponWinners2] FOREIGN KEY([ConsumerID])
REFERENCES [dbo].[coc_Consumers] ([ConsumerID])
GO
ALTER TABLE [dbo].[coc_ECouponWinners] CHECK CONSTRAINT [FK_ECouponWinners2]
GO
ALTER TABLE [dbo].[coc_EnumValueLanguages]  WITH CHECK ADD  CONSTRAINT [FK_EnumValueLanguages1] FOREIGN KEY([EnumValueID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_EnumValueLanguages] CHECK CONSTRAINT [FK_EnumValueLanguages1]
GO
ALTER TABLE [dbo].[coc_EnumValueLanguages]  WITH CHECK ADD  CONSTRAINT [FK_EnumValueLanguages2] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_EnumValueLanguages] CHECK CONSTRAINT [FK_EnumValueLanguages2]
GO
ALTER TABLE [dbo].[coc_EnumValues]  WITH CHECK ADD  CONSTRAINT [FK_EnumValues] FOREIGN KEY([EnumID])
REFERENCES [dbo].[coc_Enums] ([EnumID])
GO
ALTER TABLE [dbo].[coc_EnumValues] CHECK CONSTRAINT [FK_EnumValues]
GO
ALTER TABLE [dbo].[coc_eServiceAddOn]  WITH NOCHECK ADD  CONSTRAINT [FK_coc_eServiceAddOn_coc_EServices] FOREIGN KEY([EServiceID])
REFERENCES [dbo].[coc_EServices] ([EServiceID])
GO
ALTER TABLE [dbo].[coc_eServiceAddOn] CHECK CONSTRAINT [FK_coc_eServiceAddOn_coc_EServices]
GO
ALTER TABLE [dbo].[coc_EServiceAddOnConsumers]  WITH NOCHECK ADD  CONSTRAINT [FK_coc_ConsumerEServiceAddOn_coc_Consumers] FOREIGN KEY([ConsumerID])
REFERENCES [dbo].[coc_Consumers] ([ConsumerID])
GO
ALTER TABLE [dbo].[coc_EServiceAddOnConsumers] CHECK CONSTRAINT [FK_coc_ConsumerEServiceAddOn_coc_Consumers]
GO
ALTER TABLE [dbo].[coc_EServiceAddOnConsumers]  WITH NOCHECK ADD  CONSTRAINT [FK_coc_ConsumerEServiceAddOn_coc_EServiceAddOn] FOREIGN KEY([EServiceAddOnId])
REFERENCES [dbo].[coc_eServiceAddOn] ([EServiceAddOnId])
GO
ALTER TABLE [dbo].[coc_EServiceAddOnConsumers] CHECK CONSTRAINT [FK_coc_ConsumerEServiceAddOn_coc_EServiceAddOn]
GO
ALTER TABLE [dbo].[coc_EServiceBarcodes_StatisticalData]  WITH CHECK ADD FOREIGN KEY([EServiceID])
REFERENCES [dbo].[coc_EServices] ([EServiceID])
GO
ALTER TABLE [dbo].[coc_EServiceEventOutlets]  WITH CHECK ADD  CONSTRAINT [FK_EServiceEventOutlets1] FOREIGN KEY([EServiceEventID])
REFERENCES [dbo].[coc_EServiceEvents] ([EServiceEventID])
GO
ALTER TABLE [dbo].[coc_EServiceEventOutlets] CHECK CONSTRAINT [FK_EServiceEventOutlets1]
GO
ALTER TABLE [dbo].[coc_EServiceEventOutlets]  WITH CHECK ADD  CONSTRAINT [FK_EServiceEventOutlets2] FOREIGN KEY([RetailOutletID])
REFERENCES [dbo].[coc_RetailOutlets] ([RetailOutletID])
GO
ALTER TABLE [dbo].[coc_EServiceEventOutlets] CHECK CONSTRAINT [FK_EServiceEventOutlets2]
GO
ALTER TABLE [dbo].[coc_EServiceEvents]  WITH CHECK ADD  CONSTRAINT [FK_EServiceEvents1] FOREIGN KEY([EServiceID])
REFERENCES [dbo].[coc_EServices] ([EServiceID])
GO
ALTER TABLE [dbo].[coc_EServiceEvents] CHECK CONSTRAINT [FK_EServiceEvents1]
GO
ALTER TABLE [dbo].[coc_EServiceEvents]  WITH CHECK ADD  CONSTRAINT [FK_EServiceEvents2] FOREIGN KEY([EventTypeID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_EServiceEvents] CHECK CONSTRAINT [FK_EServiceEvents2]
GO
ALTER TABLE [dbo].[coc_EServiceEvents]  WITH CHECK ADD  CONSTRAINT [FK_EServiceEvents51] FOREIGN KEY([AddUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_EServiceEvents] CHECK CONSTRAINT [FK_EServiceEvents51]
GO
ALTER TABLE [dbo].[coc_EServiceEvents]  WITH CHECK ADD  CONSTRAINT [FK_EServiceEvents55] FOREIGN KEY([EditUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_EServiceEvents] CHECK CONSTRAINT [FK_EServiceEvents55]
GO
ALTER TABLE [dbo].[coc_EServiceInvoices]  WITH CHECK ADD  CONSTRAINT [FK_EServiceInvoices1] FOREIGN KEY([EServiceID])
REFERENCES [dbo].[coc_EServices] ([EServiceID])
GO
ALTER TABLE [dbo].[coc_EServiceInvoices] CHECK CONSTRAINT [FK_EServiceInvoices1]
GO
ALTER TABLE [dbo].[coc_EServiceInvoices]  WITH CHECK ADD  CONSTRAINT [FK_PromotionOrders3] FOREIGN KEY([PaymentTypeID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_EServiceInvoices] CHECK CONSTRAINT [FK_PromotionOrders3]
GO
ALTER TABLE [dbo].[coc_EServiceLanguages]  WITH CHECK ADD  CONSTRAINT [FK_EServiceLanguages1] FOREIGN KEY([EServiceID])
REFERENCES [dbo].[coc_EServices] ([EServiceID])
GO
ALTER TABLE [dbo].[coc_EServiceLanguages] CHECK CONSTRAINT [FK_EServiceLanguages1]
GO
ALTER TABLE [dbo].[coc_EServiceLanguages]  WITH CHECK ADD  CONSTRAINT [FK_EServiceLanguages2] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_EServiceLanguages] CHECK CONSTRAINT [FK_EServiceLanguages2]
GO
ALTER TABLE [dbo].[coc_EServiceLocations]  WITH CHECK ADD  CONSTRAINT [FK_EServiceLocations1] FOREIGN KEY([EServiceID])
REFERENCES [dbo].[coc_EServices] ([EServiceID])
GO
ALTER TABLE [dbo].[coc_EServiceLocations] CHECK CONSTRAINT [FK_EServiceLocations1]
GO
ALTER TABLE [dbo].[coc_EServiceLocations]  WITH CHECK ADD  CONSTRAINT [FK_EServiceLocations2] FOREIGN KEY([RetailOutletID])
REFERENCES [dbo].[coc_RetailOutlets] ([RetailOutletID])
GO
ALTER TABLE [dbo].[coc_EServiceLocations] CHECK CONSTRAINT [FK_EServiceLocations2]
GO
ALTER TABLE [dbo].[coc_EServiceReceipts]  WITH CHECK ADD  CONSTRAINT [FK_EServiceReceipts1] FOREIGN KEY([EServiceInvoiceID])
REFERENCES [dbo].[coc_EServiceInvoices] ([EServiceInvoiceID])
GO
ALTER TABLE [dbo].[coc_EServiceReceipts] CHECK CONSTRAINT [FK_EServiceReceipts1]
GO
ALTER TABLE [dbo].[coc_EServiceReceipts]  WITH CHECK ADD  CONSTRAINT [FK_PromotionReceipts4] FOREIGN KEY([PaymentTypeID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_EServiceReceipts] CHECK CONSTRAINT [FK_PromotionReceipts4]
GO
ALTER TABLE [dbo].[coc_EServiceReceipts]  WITH CHECK ADD  CONSTRAINT [FK_PromotionReceipts51] FOREIGN KEY([AddUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_EServiceReceipts] CHECK CONSTRAINT [FK_PromotionReceipts51]
GO
ALTER TABLE [dbo].[coc_EServices]  WITH CHECK ADD  CONSTRAINT [FK_EServices1] FOREIGN KEY([CorporateID])
REFERENCES [dbo].[coc_Corporates] ([CorporateID])
GO
ALTER TABLE [dbo].[coc_EServices] CHECK CONSTRAINT [FK_EServices1]
GO
ALTER TABLE [dbo].[coc_EServices]  WITH CHECK ADD  CONSTRAINT [FK_EServices2] FOREIGN KEY([ServiceTypeID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_EServices] CHECK CONSTRAINT [FK_EServices2]
GO
ALTER TABLE [dbo].[coc_EServices]  WITH CHECK ADD  CONSTRAINT [FK_EServices3] FOREIGN KEY([ServiceSubTypeID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_EServices] CHECK CONSTRAINT [FK_EServices3]
GO
ALTER TABLE [dbo].[coc_EServices]  WITH CHECK ADD  CONSTRAINT [FK_EServices4] FOREIGN KEY([CompetitionID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_EServices] CHECK CONSTRAINT [FK_EServices4]
GO
ALTER TABLE [dbo].[coc_EServices]  WITH CHECK ADD  CONSTRAINT [FK_EServices5] FOREIGN KEY([MessagePackTypeID])
REFERENCES [dbo].[coc_MessagePackTypes] ([MessagePackTypeID])
GO
ALTER TABLE [dbo].[coc_EServices] CHECK CONSTRAINT [FK_EServices5]
GO
ALTER TABLE [dbo].[coc_EServices]  WITH CHECK ADD  CONSTRAINT [FK_EServices51] FOREIGN KEY([AddUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_EServices] CHECK CONSTRAINT [FK_EServices51]
GO
ALTER TABLE [dbo].[coc_EServices]  WITH CHECK ADD  CONSTRAINT [FK_EServices52] FOREIGN KEY([EditUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_EServices] CHECK CONSTRAINT [FK_EServices52]
GO
ALTER TABLE [dbo].[coc_EventConfiguration]  WITH CHECK ADD  CONSTRAINT [FK_coc_EventConfiguration_coc_EServices] FOREIGN KEY([EServiceID])
REFERENCES [dbo].[coc_EServices] ([EServiceID])
GO
ALTER TABLE [dbo].[coc_EventConfiguration] CHECK CONSTRAINT [FK_coc_EventConfiguration_coc_EServices]
GO
ALTER TABLE [dbo].[coc_EventLanguages]  WITH CHECK ADD  CONSTRAINT [FK_coc_EventLanguages_coc_EventConfiguration] FOREIGN KEY([EventID])
REFERENCES [dbo].[coc_EventConfiguration] ([EventID])
GO
ALTER TABLE [dbo].[coc_EventLanguages] CHECK CONSTRAINT [FK_coc_EventLanguages_coc_EventConfiguration]
GO
ALTER TABLE [dbo].[coc_EventLanguages]  WITH CHECK ADD  CONSTRAINT [FK_coc_EventLanguages_coc_Languages] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_EventLanguages] CHECK CONSTRAINT [FK_coc_EventLanguages_coc_Languages]
GO
ALTER TABLE [dbo].[coc_EVoucher]  WITH CHECK ADD  CONSTRAINT [FK_coc_EVoucher_coc_EServices] FOREIGN KEY([EServiceID])
REFERENCES [dbo].[coc_EServices] ([EServiceID])
GO
ALTER TABLE [dbo].[coc_EVoucher] CHECK CONSTRAINT [FK_coc_EVoucher_coc_EServices]
GO
ALTER TABLE [dbo].[coc_EVoucher]  WITH CHECK ADD  CONSTRAINT [FK_coc_EVoucher_coc_EVoucherCategory] FOREIGN KEY([EVoucherCategoryID])
REFERENCES [dbo].[coc_EVoucherCategory] ([EVoucherCategoryID])
GO
ALTER TABLE [dbo].[coc_EVoucher] CHECK CONSTRAINT [FK_coc_EVoucher_coc_EVoucherCategory]
GO
ALTER TABLE [dbo].[coc_EvoucherApproval]  WITH NOCHECK ADD  CONSTRAINT [FK_coc_EvoucherApproval_coc_EVoucherBundle] FOREIGN KEY([EVoucherBundleID])
REFERENCES [dbo].[coc_EVoucherBundle] ([EVoucherBundleID])
GO
ALTER TABLE [dbo].[coc_EvoucherApproval] CHECK CONSTRAINT [FK_coc_EvoucherApproval_coc_EVoucherBundle]
GO
ALTER TABLE [dbo].[coc_EVoucherBundle]  WITH CHECK ADD  CONSTRAINT [FK_coc_EVoucherBundle_coc_EBundle] FOREIGN KEY([EBundleID])
REFERENCES [dbo].[coc_EBundle] ([EBundleID])
GO
ALTER TABLE [dbo].[coc_EVoucherBundle] CHECK CONSTRAINT [FK_coc_EVoucherBundle_coc_EBundle]
GO
ALTER TABLE [dbo].[coc_EVoucherBundle]  WITH CHECK ADD  CONSTRAINT [FK_coc_EVoucherBundle_coc_EVoucher] FOREIGN KEY([EVoucherID])
REFERENCES [dbo].[coc_EVoucher] ([EVoucherID])
GO
ALTER TABLE [dbo].[coc_EVoucherBundle] CHECK CONSTRAINT [FK_coc_EVoucherBundle_coc_EVoucher]
GO
ALTER TABLE [dbo].[coc_EVoucherBundleDistribution]  WITH CHECK ADD  CONSTRAINT [FK_coc_EVoucherBundleDistribution_coc_Corporates] FOREIGN KEY([CorporateID])
REFERENCES [dbo].[coc_Corporates] ([CorporateID])
GO
ALTER TABLE [dbo].[coc_EVoucherBundleDistribution] CHECK CONSTRAINT [FK_coc_EVoucherBundleDistribution_coc_Corporates]
GO
ALTER TABLE [dbo].[coc_EVoucherBundleDistribution]  WITH CHECK ADD  CONSTRAINT [FK_coc_EVoucherBundleDistribution_coc_EVoucherBundle] FOREIGN KEY([EVoucherBundleID])
REFERENCES [dbo].[coc_EVoucherBundle] ([EVoucherBundleID])
GO
ALTER TABLE [dbo].[coc_EVoucherBundleDistribution] CHECK CONSTRAINT [FK_coc_EVoucherBundleDistribution_coc_EVoucherBundle]
GO
ALTER TABLE [dbo].[coc_EVoucherBundleDistributionQRCode]  WITH NOCHECK ADD  CONSTRAINT [FK_coc_EVoucherBundleDistributionQRCode_coc_EVoucherBundleDistribution] FOREIGN KEY([EVoucherBundleDistributionID])
REFERENCES [dbo].[coc_EVoucherBundleDistribution] ([EVoucherBundleDistributionID])
GO
ALTER TABLE [dbo].[coc_EVoucherBundleDistributionQRCode] CHECK CONSTRAINT [FK_coc_EVoucherBundleDistributionQRCode_coc_EVoucherBundleDistribution]
GO
ALTER TABLE [dbo].[coc_EVoucherBundleEligibilityForConsumers]  WITH CHECK ADD  CONSTRAINT [FK_coc_EVoucherBundleEligibilityForConsumers_coc_EBundle] FOREIGN KEY([EBundleID])
REFERENCES [dbo].[coc_EBundle] ([EBundleID])
GO
ALTER TABLE [dbo].[coc_EVoucherBundleEligibilityForConsumers] CHECK CONSTRAINT [FK_coc_EVoucherBundleEligibilityForConsumers_coc_EBundle]
GO
ALTER TABLE [dbo].[coc_EVoucherBundleEligibilityForConsumers]  WITH CHECK ADD  CONSTRAINT [FK_coc_EVoucherBundleEligibilityForConsumers_coc_EVoucherBundleQRCode] FOREIGN KEY([EVoucherBundleQRCodeID])
REFERENCES [dbo].[coc_EVoucherBundleQRCode] ([EVoucherBundleQRCodeID])
GO
ALTER TABLE [dbo].[coc_EVoucherBundleEligibilityForConsumers] CHECK CONSTRAINT [FK_coc_EVoucherBundleEligibilityForConsumers_coc_EVoucherBundleQRCode]
GO
ALTER TABLE [dbo].[coc_EVoucherBundleQRCode]  WITH CHECK ADD  CONSTRAINT [FK_coc_EVoucherBundleQRCode_coc_Corporates] FOREIGN KEY([CorporateID])
REFERENCES [dbo].[coc_Corporates] ([CorporateID])
GO
ALTER TABLE [dbo].[coc_EVoucherBundleQRCode] CHECK CONSTRAINT [FK_coc_EVoucherBundleQRCode_coc_Corporates]
GO
ALTER TABLE [dbo].[coc_EVoucherBundleQRCode]  WITH CHECK ADD  CONSTRAINT [FK_coc_EVoucherBundleQRCode_coc_EBundle] FOREIGN KEY([EBundleID])
REFERENCES [dbo].[coc_EBundle] ([EBundleID])
GO
ALTER TABLE [dbo].[coc_EVoucherBundleQRCode] CHECK CONSTRAINT [FK_coc_EVoucherBundleQRCode_coc_EBundle]
GO
ALTER TABLE [dbo].[coc_EVoucherCategoryLanguages]  WITH NOCHECK ADD  CONSTRAINT [coc_EVoucherCategoryLanguages_coc_Languages] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_EVoucherCategoryLanguages] CHECK CONSTRAINT [coc_EVoucherCategoryLanguages_coc_Languages]
GO
ALTER TABLE [dbo].[coc_EVoucherCategoryLanguages]  WITH NOCHECK ADD  CONSTRAINT [FK_coc_EVoucherCategoryLanguages_coc_EVoucherCategory] FOREIGN KEY([EVoucherCategoryID])
REFERENCES [dbo].[coc_EVoucherCategory] ([EVoucherCategoryID])
GO
ALTER TABLE [dbo].[coc_EVoucherCategoryLanguages] CHECK CONSTRAINT [FK_coc_EVoucherCategoryLanguages_coc_EVoucherCategory]
GO
ALTER TABLE [dbo].[coc_EVoucherImages]  WITH NOCHECK ADD  CONSTRAINT [FK_coc_EVoucherImages_coc_EVoucher] FOREIGN KEY([EVoucherID])
REFERENCES [dbo].[coc_EVoucher] ([EVoucherID])
GO
ALTER TABLE [dbo].[coc_EVoucherImages] CHECK CONSTRAINT [FK_coc_EVoucherImages_coc_EVoucher]
GO
ALTER TABLE [dbo].[coc_EVoucherLanguages]  WITH CHECK ADD  CONSTRAINT [FK_coc_EVoucherLanguages_coc_EVoucher] FOREIGN KEY([EVoucherID])
REFERENCES [dbo].[coc_EVoucher] ([EVoucherID])
GO
ALTER TABLE [dbo].[coc_EVoucherLanguages] CHECK CONSTRAINT [FK_coc_EVoucherLanguages_coc_EVoucher]
GO
ALTER TABLE [dbo].[coc_EVoucherLanguages]  WITH CHECK ADD  CONSTRAINT [FK_coc_EVoucherLanguages_coc_Languages] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_EVoucherLanguages] CHECK CONSTRAINT [FK_coc_EVoucherLanguages_coc_Languages]
GO
ALTER TABLE [dbo].[coc_eVoucherLocationLanguages]  WITH CHECK ADD  CONSTRAINT [FK_coc_eVoucherLocationLanguages_coc_EvoucherLocations] FOREIGN KEY([VoucherLocationID])
REFERENCES [dbo].[coc_EvoucherLocations] ([VoucherLocationID])
GO
ALTER TABLE [dbo].[coc_eVoucherLocationLanguages] CHECK CONSTRAINT [FK_coc_eVoucherLocationLanguages_coc_EvoucherLocations]
GO
ALTER TABLE [dbo].[coc_ExternalRedirectionDataMapping]  WITH CHECK ADD  CONSTRAINT [FK_coc_ExternalRedirectionDataMapping_coc_EServices] FOREIGN KEY([EServiceID])
REFERENCES [dbo].[coc_EServices] ([EServiceID])
GO
ALTER TABLE [dbo].[coc_ExternalRedirectionDataMapping] CHECK CONSTRAINT [FK_coc_ExternalRedirectionDataMapping_coc_EServices]
GO
ALTER TABLE [dbo].[coc_GeneralNotificationTemplateLanguages]  WITH CHECK ADD  CONSTRAINT [FK_GeneralNotificationTemplateLanguages1] FOREIGN KEY([GeneralNotificationTemplateID])
REFERENCES [dbo].[coc_GeneralNotificationTemplates] ([GeneralNotificationTemplateID])
GO
ALTER TABLE [dbo].[coc_GeneralNotificationTemplateLanguages] CHECK CONSTRAINT [FK_GeneralNotificationTemplateLanguages1]
GO
ALTER TABLE [dbo].[coc_GeneralNotificationTemplateLanguages]  WITH CHECK ADD  CONSTRAINT [FK_GeneralNotificationTemplateLanguages2] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_GeneralNotificationTemplateLanguages] CHECK CONSTRAINT [FK_GeneralNotificationTemplateLanguages2]
GO
ALTER TABLE [dbo].[coc_GeneralNotificationTemplates]  WITH CHECK ADD  CONSTRAINT [FK_GeneralNotificationTemplates] FOREIGN KEY([TemplateTypeID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_GeneralNotificationTemplates] CHECK CONSTRAINT [FK_GeneralNotificationTemplates]
GO
ALTER TABLE [dbo].[coc_GeneralNotificationTemplates]  WITH CHECK ADD  CONSTRAINT [FK_GeneralNotificationTemplates51] FOREIGN KEY([AddUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_GeneralNotificationTemplates] CHECK CONSTRAINT [FK_GeneralNotificationTemplates51]
GO
ALTER TABLE [dbo].[coc_GeneralNotificationTemplates]  WITH CHECK ADD  CONSTRAINT [FK_GeneralNotificationTemplates52] FOREIGN KEY([EditUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_GeneralNotificationTemplates] CHECK CONSTRAINT [FK_GeneralNotificationTemplates52]
GO
ALTER TABLE [dbo].[coc_GridResources]  WITH CHECK ADD  CONSTRAINT [FK_GridResources] FOREIGN KEY([ScreenID])
REFERENCES [dbo].[coc_Screens] ([ScreenID])
GO
ALTER TABLE [dbo].[coc_GridResources] CHECK CONSTRAINT [FK_GridResources]
GO
ALTER TABLE [dbo].[coc_GuestParticipations]  WITH CHECK ADD  CONSTRAINT [FK_GuestParticipations] FOREIGN KEY([OtpID])
REFERENCES [dbo].[coc_OTP] ([OtpID])
GO
ALTER TABLE [dbo].[coc_GuestParticipations] CHECK CONSTRAINT [FK_GuestParticipations]
GO
ALTER TABLE [dbo].[coc_Guests]  WITH CHECK ADD  CONSTRAINT [FK_Guests__OTP] FOREIGN KEY([OtpID])
REFERENCES [dbo].[coc_OTP] ([OtpID])
GO
ALTER TABLE [dbo].[coc_Guests] CHECK CONSTRAINT [FK_Guests__OTP]
GO
ALTER TABLE [dbo].[coc_Guests]  WITH CHECK ADD  CONSTRAINT [FK_Guests__UploadParticipations] FOREIGN KEY([UploadParticipationsID])
REFERENCES [dbo].[UploadParticipations] ([UploadParticipationsID])
GO
ALTER TABLE [dbo].[coc_Guests] CHECK CONSTRAINT [FK_Guests__UploadParticipations]
GO
ALTER TABLE [dbo].[coc_InviteDetails]  WITH CHECK ADD  CONSTRAINT [FK_InviteDetails] FOREIGN KEY([InviteFriendID])
REFERENCES [dbo].[coc_InviteFriends] ([InviteFriendID])
GO
ALTER TABLE [dbo].[coc_InviteDetails] CHECK CONSTRAINT [FK_InviteDetails]
GO
ALTER TABLE [dbo].[coc_InviteFriends]  WITH CHECK ADD  CONSTRAINT [FK_InviteFriends] FOREIGN KEY([ConsumerID])
REFERENCES [dbo].[coc_Consumers] ([ConsumerID])
GO
ALTER TABLE [dbo].[coc_InviteFriends] CHECK CONSTRAINT [FK_InviteFriends]
GO
ALTER TABLE [dbo].[coc_KioskLocationLanguages]  WITH CHECK ADD  CONSTRAINT [FK_KioskLocationLanguages1] FOREIGN KEY([KioskLocationID])
REFERENCES [dbo].[coc_KioskLocations] ([KioskLocationID])
GO
ALTER TABLE [dbo].[coc_KioskLocationLanguages] CHECK CONSTRAINT [FK_KioskLocationLanguages1]
GO
ALTER TABLE [dbo].[coc_KioskLocationLanguages]  WITH CHECK ADD  CONSTRAINT [FK_KioskLocationLanguages2] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_KioskLocationLanguages] CHECK CONSTRAINT [FK_KioskLocationLanguages2]
GO
ALTER TABLE [dbo].[coc_KioskLocationRetailOutlets]  WITH CHECK ADD  CONSTRAINT [FK_KioskLocationRetailOutlets1] FOREIGN KEY([KioskLocationID])
REFERENCES [dbo].[coc_KioskLocations] ([KioskLocationID])
GO
ALTER TABLE [dbo].[coc_KioskLocationRetailOutlets] CHECK CONSTRAINT [FK_KioskLocationRetailOutlets1]
GO
ALTER TABLE [dbo].[coc_KioskLocationRetailOutlets]  WITH CHECK ADD  CONSTRAINT [FK_KioskLocationRetailOutlets2] FOREIGN KEY([RetailOutletID])
REFERENCES [dbo].[coc_RetailOutlets] ([RetailOutletID])
GO
ALTER TABLE [dbo].[coc_KioskLocationRetailOutlets] CHECK CONSTRAINT [FK_KioskLocationRetailOutlets2]
GO
ALTER TABLE [dbo].[coc_KioskLocations]  WITH CHECK ADD  CONSTRAINT [FK_KioskLocations2] FOREIGN KEY([CityID])
REFERENCES [dbo].[coc_Cities] ([CityID])
GO
ALTER TABLE [dbo].[coc_KioskLocations] CHECK CONSTRAINT [FK_KioskLocations2]
GO
ALTER TABLE [dbo].[coc_KioskLocations]  WITH CHECK ADD  CONSTRAINT [FK_KioskLocations3] FOREIGN KEY([CountryID])
REFERENCES [dbo].[coc_Countries] ([CountryID])
GO
ALTER TABLE [dbo].[coc_KioskLocations] CHECK CONSTRAINT [FK_KioskLocations3]
GO
ALTER TABLE [dbo].[coc_KioskLocations]  WITH CHECK ADD  CONSTRAINT [FK_KioskLocations51] FOREIGN KEY([AddUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_KioskLocations] CHECK CONSTRAINT [FK_KioskLocations51]
GO
ALTER TABLE [dbo].[coc_KioskLocations]  WITH CHECK ADD  CONSTRAINT [FK_KioskLocations52] FOREIGN KEY([EditUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_KioskLocations] CHECK CONSTRAINT [FK_KioskLocations52]
GO
ALTER TABLE [dbo].[coc_KioskScreenLanguages]  WITH CHECK ADD  CONSTRAINT [fk_KioskScreens_KioskScreenLanguages] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_KioskScreenLanguages] CHECK CONSTRAINT [fk_KioskScreens_KioskScreenLanguages]
GO
ALTER TABLE [dbo].[coc_KioskScreenMapping]  WITH CHECK ADD  CONSTRAINT [fk_KioskScreenMapping_KioskLocation] FOREIGN KEY([KioskLocationID])
REFERENCES [dbo].[coc_KioskLocations] ([KioskLocationID])
GO
ALTER TABLE [dbo].[coc_KioskScreenMapping] CHECK CONSTRAINT [fk_KioskScreenMapping_KioskLocation]
GO
ALTER TABLE [dbo].[coc_KioskScreenMapping]  WITH CHECK ADD  CONSTRAINT [fk_KioskScreenMapping_KioskScreens] FOREIGN KEY([KioskScreenID])
REFERENCES [dbo].[coc_KioskScreens] ([KioskScreenID])
GO
ALTER TABLE [dbo].[coc_KioskScreenMapping] CHECK CONSTRAINT [fk_KioskScreenMapping_KioskScreens]
GO
ALTER TABLE [dbo].[coc_KioskUserMapping]  WITH CHECK ADD  CONSTRAINT [fk_KioskUserMapping_KioskLocation] FOREIGN KEY([KioskLocationID])
REFERENCES [dbo].[coc_KioskLocations] ([KioskLocationID])
GO
ALTER TABLE [dbo].[coc_KioskUserMapping] CHECK CONSTRAINT [fk_KioskUserMapping_KioskLocation]
GO
ALTER TABLE [dbo].[coc_KioskUserMapping]  WITH CHECK ADD  CONSTRAINT [fk_KioskUserMapping_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_KioskUserMapping] CHECK CONSTRAINT [fk_KioskUserMapping_User]
GO
ALTER TABLE [dbo].[coc_LoginUsers]  WITH CHECK ADD  CONSTRAINT [FK_LoginUsers] FOREIGN KEY([UserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_LoginUsers] CHECK CONSTRAINT [FK_LoginUsers]
GO
ALTER TABLE [dbo].[coc_LoyaltyPointRedemptions]  WITH CHECK ADD  CONSTRAINT [FK_LoyaltyPointRedemptions1] FOREIGN KEY([ConsumerID])
REFERENCES [dbo].[coc_Consumers] ([ConsumerID])
GO
ALTER TABLE [dbo].[coc_LoyaltyPointRedemptions] CHECK CONSTRAINT [FK_LoyaltyPointRedemptions1]
GO
ALTER TABLE [dbo].[coc_LoyaltyPointRedemptions]  WITH CHECK ADD  CONSTRAINT [FK_LoyaltyPointRedemptions2] FOREIGN KEY([RedemptionPlanID])
REFERENCES [dbo].[coc_Consumers] ([ConsumerID])
GO
ALTER TABLE [dbo].[coc_LoyaltyPointRedemptions] CHECK CONSTRAINT [FK_LoyaltyPointRedemptions2]
GO
ALTER TABLE [dbo].[coc_LoyaltyPointRedemptions]  WITH CHECK ADD  CONSTRAINT [FK_LoyaltyPointRedemptions3] FOREIGN KEY([VerificationUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_LoyaltyPointRedemptions] CHECK CONSTRAINT [FK_LoyaltyPointRedemptions3]
GO
ALTER TABLE [dbo].[coc_LoyaltyPointSetups]  WITH CHECK ADD  CONSTRAINT [FK_LoyaltyPointSetups51] FOREIGN KEY([EditUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_LoyaltyPointSetups] CHECK CONSTRAINT [FK_LoyaltyPointSetups51]
GO
ALTER TABLE [dbo].[coc_LoyaltyPointSetups]  WITH CHECK ADD  CONSTRAINT [FK_LoyaltyPointSetups52] FOREIGN KEY([CheckerUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_LoyaltyPointSetups] CHECK CONSTRAINT [FK_LoyaltyPointSetups52]
GO
ALTER TABLE [dbo].[coc_MasterResources]  WITH CHECK ADD  CONSTRAINT [FK_MasterResources] FOREIGN KEY([ScreenID])
REFERENCES [dbo].[coc_Screens] ([ScreenID])
GO
ALTER TABLE [dbo].[coc_MasterResources] CHECK CONSTRAINT [FK_MasterResources]
GO
ALTER TABLE [dbo].[coc_MenuLanguages]  WITH CHECK ADD  CONSTRAINT [FK_MenuLanguages1] FOREIGN KEY([MenuID])
REFERENCES [dbo].[coc_Menus] ([MenuID])
GO
ALTER TABLE [dbo].[coc_MenuLanguages] CHECK CONSTRAINT [FK_MenuLanguages1]
GO
ALTER TABLE [dbo].[coc_MenuLanguages]  WITH CHECK ADD  CONSTRAINT [FK_MenuLanguages2] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_MenuLanguages] CHECK CONSTRAINT [FK_MenuLanguages2]
GO
ALTER TABLE [dbo].[coc_Menus]  WITH CHECK ADD  CONSTRAINT [FK_Menus2] FOREIGN KEY([ParentID])
REFERENCES [dbo].[coc_Menus] ([MenuID])
GO
ALTER TABLE [dbo].[coc_Menus] CHECK CONSTRAINT [FK_Menus2]
GO
ALTER TABLE [dbo].[coc_MessageTemplateLanguages]  WITH CHECK ADD  CONSTRAINT [FK_MessageTemplateLanguages1] FOREIGN KEY([MessageTemplateID])
REFERENCES [dbo].[coc_MessageTemplates] ([MessageTemplateID])
GO
ALTER TABLE [dbo].[coc_MessageTemplateLanguages] CHECK CONSTRAINT [FK_MessageTemplateLanguages1]
GO
ALTER TABLE [dbo].[coc_MessageTemplateLanguages]  WITH CHECK ADD  CONSTRAINT [FK_MessageTemplateLanguages2] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_MessageTemplateLanguages] CHECK CONSTRAINT [FK_MessageTemplateLanguages2]
GO
ALTER TABLE [dbo].[coc_MessageTemplates]  WITH CHECK ADD  CONSTRAINT [FK_MessageTemplates1] FOREIGN KEY([AddUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_MessageTemplates] CHECK CONSTRAINT [FK_MessageTemplates1]
GO
ALTER TABLE [dbo].[coc_MessageTemplates]  WITH CHECK ADD  CONSTRAINT [FK_MessageTemplates2] FOREIGN KEY([EditUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_MessageTemplates] CHECK CONSTRAINT [FK_MessageTemplates2]
GO
ALTER TABLE [dbo].[coc_NationalityLanguages]  WITH CHECK ADD  CONSTRAINT [FK_NationalityLanguages1] FOREIGN KEY([NationalityID])
REFERENCES [dbo].[coc_Nationalities] ([NationalityID])
GO
ALTER TABLE [dbo].[coc_NationalityLanguages] CHECK CONSTRAINT [FK_NationalityLanguages1]
GO
ALTER TABLE [dbo].[coc_NationalityLanguages]  WITH CHECK ADD  CONSTRAINT [FK_NationalityLanguages2] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_NationalityLanguages] CHECK CONSTRAINT [FK_NationalityLanguages2]
GO
ALTER TABLE [dbo].[coc_Notifications]  WITH CHECK ADD  CONSTRAINT [FK_coc_Notifications_coc_EBundle] FOREIGN KEY([EBundleID])
REFERENCES [dbo].[coc_EBundle] ([EBundleID])
GO
ALTER TABLE [dbo].[coc_Notifications] CHECK CONSTRAINT [FK_coc_Notifications_coc_EBundle]
GO
ALTER TABLE [dbo].[coc_Notifications]  WITH CHECK ADD  CONSTRAINT [FK_Notifications] FOREIGN KEY([EServiceID])
REFERENCES [dbo].[coc_EServices] ([EServiceID])
GO
ALTER TABLE [dbo].[coc_Notifications] CHECK CONSTRAINT [FK_Notifications]
GO
ALTER TABLE [dbo].[coc_NotificationSendLanguages]  WITH CHECK ADD  CONSTRAINT [FK_NotificationSendLanguages1] FOREIGN KEY([NotificationSendID])
REFERENCES [dbo].[coc_NotificationSends] ([NotificationSendID])
GO
ALTER TABLE [dbo].[coc_NotificationSendLanguages] CHECK CONSTRAINT [FK_NotificationSendLanguages1]
GO
ALTER TABLE [dbo].[coc_NotificationSendLanguages]  WITH CHECK ADD  CONSTRAINT [FK_NotificationSendLanguages2] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_NotificationSendLanguages] CHECK CONSTRAINT [FK_NotificationSendLanguages2]
GO
ALTER TABLE [dbo].[coc_NotificationSends]  WITH CHECK ADD  CONSTRAINT [FK_coc_NotificationSends_coc_GeneralNotification] FOREIGN KEY([GeneralNotificationId])
REFERENCES [dbo].[coc_GeneralNotification] ([GeneralNotificationId])
GO
ALTER TABLE [dbo].[coc_NotificationSends] CHECK CONSTRAINT [FK_coc_NotificationSends_coc_GeneralNotification]
GO
ALTER TABLE [dbo].[coc_NotificationSends]  WITH CHECK ADD  CONSTRAINT [FK_Notifications1] FOREIGN KEY([NotificationID])
REFERENCES [dbo].[coc_Notifications] ([NotificationID])
GO
ALTER TABLE [dbo].[coc_NotificationSends] CHECK CONSTRAINT [FK_Notifications1]
GO
ALTER TABLE [dbo].[coc_NotificationSends]  WITH CHECK ADD  CONSTRAINT [FK_Notifications2] FOREIGN KEY([CityID])
REFERENCES [dbo].[coc_Cities] ([CityID])
GO
ALTER TABLE [dbo].[coc_NotificationSends] CHECK CONSTRAINT [FK_Notifications2]
GO
ALTER TABLE [dbo].[coc_NotificationSends]  WITH CHECK ADD  CONSTRAINT [FK_Notifications3] FOREIGN KEY([AgeGroupID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_NotificationSends] CHECK CONSTRAINT [FK_Notifications3]
GO
ALTER TABLE [dbo].[coc_OTP]  WITH CHECK ADD  CONSTRAINT [FK_OTP] FOREIGN KEY([OtpTypeID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_OTP] CHECK CONSTRAINT [FK_OTP]
GO
ALTER TABLE [dbo].[coc_PackagePricings]  WITH CHECK ADD  CONSTRAINT [FK_PackagePricings1] FOREIGN KEY([ServiceTypeID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_PackagePricings] CHECK CONSTRAINT [FK_PackagePricings1]
GO
ALTER TABLE [dbo].[coc_PackagePricings]  WITH CHECK ADD  CONSTRAINT [FK_PackagePricings2] FOREIGN KEY([ServiceSubTypeID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_PackagePricings] CHECK CONSTRAINT [FK_PackagePricings2]
GO
ALTER TABLE [dbo].[coc_PackagePricings]  WITH CHECK ADD  CONSTRAINT [FK_PackagePricings3] FOREIGN KEY([MessagePackTypeID])
REFERENCES [dbo].[coc_MessagePackTypes] ([MessagePackTypeID])
GO
ALTER TABLE [dbo].[coc_PackagePricings] CHECK CONSTRAINT [FK_PackagePricings3]
GO
ALTER TABLE [dbo].[coc_PackagePricings]  WITH CHECK ADD  CONSTRAINT [FK_PackagePricings4] FOREIGN KEY([CompetitionID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_PackagePricings] CHECK CONSTRAINT [FK_PackagePricings4]
GO
ALTER TABLE [dbo].[coc_PackagePricings]  WITH CHECK ADD  CONSTRAINT [FK_PackagePricings51] FOREIGN KEY([AddUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_PackagePricings] CHECK CONSTRAINT [FK_PackagePricings51]
GO
ALTER TABLE [dbo].[coc_PackagePricings]  WITH CHECK ADD  CONSTRAINT [FK_PackagePricings52] FOREIGN KEY([EditUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_PackagePricings] CHECK CONSTRAINT [FK_PackagePricings52]
GO
ALTER TABLE [dbo].[coc_PackagePricings]  WITH CHECK ADD  CONSTRAINT [FK_PackagePricings53] FOREIGN KEY([CheckerUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_PackagePricings] CHECK CONSTRAINT [FK_PackagePricings53]
GO
ALTER TABLE [dbo].[coc_PreConsumerRegister]  WITH CHECK ADD  CONSTRAINT [FK_PreConsumerOTP] FOREIGN KEY([OtpID])
REFERENCES [dbo].[coc_OTP] ([OtpID])
GO
ALTER TABLE [dbo].[coc_PreConsumerRegister] CHECK CONSTRAINT [FK_PreConsumerOTP]
GO
ALTER TABLE [dbo].[Coc_PricingDetails]  WITH CHECK ADD FOREIGN KEY([PricingID])
REFERENCES [dbo].[Coc_Pricing] ([PricingID])
GO
ALTER TABLE [dbo].[coc_QuestionBanks]  WITH CHECK ADD  CONSTRAINT [FK_QuestionBanks1] FOREIGN KEY([ECouponID])
REFERENCES [dbo].[coc_ECoupons] ([ECouponID])
GO
ALTER TABLE [dbo].[coc_QuestionBanks] CHECK CONSTRAINT [FK_QuestionBanks1]
GO
ALTER TABLE [dbo].[coc_QuestionLanguages]  WITH CHECK ADD  CONSTRAINT [FK_QuestionLanguages1] FOREIGN KEY([QuestionBankID])
REFERENCES [dbo].[coc_QuestionBanks] ([QuestionBankID])
GO
ALTER TABLE [dbo].[coc_QuestionLanguages] CHECK CONSTRAINT [FK_QuestionLanguages1]
GO
ALTER TABLE [dbo].[coc_QuestionLanguages]  WITH CHECK ADD  CONSTRAINT [FK_QuestionLanguages2] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_QuestionLanguages] CHECK CONSTRAINT [FK_QuestionLanguages2]
GO
ALTER TABLE [dbo].[coc_QuestionOptionLanguages]  WITH CHECK ADD  CONSTRAINT [FK_QuestionOptionLanguages1] FOREIGN KEY([QuestionOptionID])
REFERENCES [dbo].[coc_QuestionOptions] ([QuestionOptionID])
GO
ALTER TABLE [dbo].[coc_QuestionOptionLanguages] CHECK CONSTRAINT [FK_QuestionOptionLanguages1]
GO
ALTER TABLE [dbo].[coc_QuestionOptionLanguages]  WITH CHECK ADD  CONSTRAINT [FK_QuestionOptionLanguages2] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_QuestionOptionLanguages] CHECK CONSTRAINT [FK_QuestionOptionLanguages2]
GO
ALTER TABLE [dbo].[coc_QuestionOptions]  WITH CHECK ADD  CONSTRAINT [FK_QuestionOptions] FOREIGN KEY([QuestionBankID])
REFERENCES [dbo].[coc_QuestionBanks] ([QuestionBankID])
GO
ALTER TABLE [dbo].[coc_QuestionOptions] CHECK CONSTRAINT [FK_QuestionOptions]
GO
ALTER TABLE [dbo].[coc_RedemptionLocations]  WITH CHECK ADD  CONSTRAINT [FK_RedemptionLocations1] FOREIGN KEY([RedemptionPlanID])
REFERENCES [dbo].[coc_RedemptionPlans] ([RedemptionPlanID])
GO
ALTER TABLE [dbo].[coc_RedemptionLocations] CHECK CONSTRAINT [FK_RedemptionLocations1]
GO
ALTER TABLE [dbo].[coc_RedemptionLocations]  WITH CHECK ADD  CONSTRAINT [FK_RedemptionLocations2] FOREIGN KEY([CorporateID])
REFERENCES [dbo].[coc_Corporates] ([CorporateID])
GO
ALTER TABLE [dbo].[coc_RedemptionLocations] CHECK CONSTRAINT [FK_RedemptionLocations2]
GO
ALTER TABLE [dbo].[coc_RedemptionLocations]  WITH CHECK ADD  CONSTRAINT [FK_RedemptionLocations3] FOREIGN KEY([RetailOutletID])
REFERENCES [dbo].[coc_RetailOutlets] ([RetailOutletID])
GO
ALTER TABLE [dbo].[coc_RedemptionLocations] CHECK CONSTRAINT [FK_RedemptionLocations3]
GO
ALTER TABLE [dbo].[coc_RedemptionPlanLanguages]  WITH CHECK ADD  CONSTRAINT [FK_RedemptionPlanLanguages1] FOREIGN KEY([RedemptionPlanID])
REFERENCES [dbo].[coc_RedemptionPlans] ([RedemptionPlanID])
GO
ALTER TABLE [dbo].[coc_RedemptionPlanLanguages] CHECK CONSTRAINT [FK_RedemptionPlanLanguages1]
GO
ALTER TABLE [dbo].[coc_RedemptionPlanLanguages]  WITH CHECK ADD  CONSTRAINT [FK_RedemptionPlanLanguages2] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_RedemptionPlanLanguages] CHECK CONSTRAINT [FK_RedemptionPlanLanguages2]
GO
ALTER TABLE [dbo].[coc_RedemptionPlans]  WITH CHECK ADD  CONSTRAINT [FK_RedemptionPlans51] FOREIGN KEY([AddUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_RedemptionPlans] CHECK CONSTRAINT [FK_RedemptionPlans51]
GO
ALTER TABLE [dbo].[coc_RedemptionPlans]  WITH CHECK ADD  CONSTRAINT [FK_RedemptionPlans52] FOREIGN KEY([EditUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_RedemptionPlans] CHECK CONSTRAINT [FK_RedemptionPlans52]
GO
ALTER TABLE [dbo].[coc_RedemptionPlans]  WITH CHECK ADD  CONSTRAINT [FK_RedemptionPlans53] FOREIGN KEY([CheckerUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_RedemptionPlans] CHECK CONSTRAINT [FK_RedemptionPlans53]
GO
ALTER TABLE [dbo].[coc_Report_OutputParams]  WITH CHECK ADD  CONSTRAINT [FK_coc_Report_OutputParams_coc_Reports] FOREIGN KEY([ReportID])
REFERENCES [dbo].[coc_Reports] ([ReportID])
GO
ALTER TABLE [dbo].[coc_Report_OutputParams] CHECK CONSTRAINT [FK_coc_Report_OutputParams_coc_Reports]
GO
ALTER TABLE [dbo].[coc_ReportFilters]  WITH CHECK ADD  CONSTRAINT [FK_coc_ReportFilters_coc_Reports] FOREIGN KEY([ReportID])
REFERENCES [dbo].[coc_Reports] ([ReportID])
GO
ALTER TABLE [dbo].[coc_ReportFilters] CHECK CONSTRAINT [FK_coc_ReportFilters_coc_Reports]
GO
ALTER TABLE [dbo].[coc_ReportMappingByRole]  WITH CHECK ADD  CONSTRAINT [FK_coc_ReportMappingByRole_coc_ReportMappingByRole] FOREIGN KEY([ReportID])
REFERENCES [dbo].[coc_Reports] ([ReportID])
GO
ALTER TABLE [dbo].[coc_ReportMappingByRole] CHECK CONSTRAINT [FK_coc_ReportMappingByRole_coc_ReportMappingByRole]
GO
ALTER TABLE [dbo].[coc_ResetPassword]  WITH CHECK ADD  CONSTRAINT [FK_ResetPassword] FOREIGN KEY([UserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_ResetPassword] CHECK CONSTRAINT [FK_ResetPassword]
GO
ALTER TABLE [dbo].[coc_ResetPassword]  WITH CHECK ADD  CONSTRAINT [FK_ResetPassword2] FOREIGN KEY([OtpID])
REFERENCES [dbo].[coc_OTP] ([OtpID])
GO
ALTER TABLE [dbo].[coc_ResetPassword] CHECK CONSTRAINT [FK_ResetPassword2]
GO
ALTER TABLE [dbo].[coc_Resources]  WITH CHECK ADD  CONSTRAINT [FK_Resources1] FOREIGN KEY([ScreenID])
REFERENCES [dbo].[coc_Screens] ([ScreenID])
GO
ALTER TABLE [dbo].[coc_Resources] CHECK CONSTRAINT [FK_Resources1]
GO
ALTER TABLE [dbo].[coc_Resources]  WITH CHECK ADD  CONSTRAINT [FK_Resources2] FOREIGN KEY([ScreenViewID])
REFERENCES [dbo].[coc_ScreenViews] ([ScreenViewID])
GO
ALTER TABLE [dbo].[coc_Resources] CHECK CONSTRAINT [FK_Resources2]
GO
ALTER TABLE [dbo].[coc_Resources]  WITH CHECK ADD  CONSTRAINT [FK_Resources3] FOREIGN KEY([MasterResourceID])
REFERENCES [dbo].[coc_MasterResources] ([MasterResourceID])
GO
ALTER TABLE [dbo].[coc_Resources] CHECK CONSTRAINT [FK_Resources3]
GO
ALTER TABLE [dbo].[coc_Resources]  WITH CHECK ADD  CONSTRAINT [FK_Resources4] FOREIGN KEY([GridResourceID])
REFERENCES [dbo].[coc_GridResources] ([GridResourceID])
GO
ALTER TABLE [dbo].[coc_Resources] CHECK CONSTRAINT [FK_Resources4]
GO
ALTER TABLE [dbo].[coc_RetailOutletLanguages]  WITH CHECK ADD  CONSTRAINT [FK_RetailOutletLanguages1] FOREIGN KEY([RetailOutletID])
REFERENCES [dbo].[coc_RetailOutlets] ([RetailOutletID])
GO
ALTER TABLE [dbo].[coc_RetailOutletLanguages] CHECK CONSTRAINT [FK_RetailOutletLanguages1]
GO
ALTER TABLE [dbo].[coc_RetailOutletLanguages]  WITH CHECK ADD  CONSTRAINT [FK_RetailOutletLanguages2] FOREIGN KEY([LanguageID])
REFERENCES [dbo].[coc_Languages] ([LanguageID])
GO
ALTER TABLE [dbo].[coc_RetailOutletLanguages] CHECK CONSTRAINT [FK_RetailOutletLanguages2]
GO
ALTER TABLE [dbo].[coc_RetailOutlets]  WITH CHECK ADD  CONSTRAINT [FK_RetailOutlets1] FOREIGN KEY([CorporateID])
REFERENCES [dbo].[coc_Corporates] ([CorporateID])
GO
ALTER TABLE [dbo].[coc_RetailOutlets] CHECK CONSTRAINT [FK_RetailOutlets1]
GO
ALTER TABLE [dbo].[coc_RetailOutlets]  WITH CHECK ADD  CONSTRAINT [FK_RetailOutlets2] FOREIGN KEY([CountryID])
REFERENCES [dbo].[coc_Countries] ([CountryID])
GO
ALTER TABLE [dbo].[coc_RetailOutlets] CHECK CONSTRAINT [FK_RetailOutlets2]
GO
ALTER TABLE [dbo].[coc_RetailOutlets]  WITH CHECK ADD  CONSTRAINT [FK_RetailOutlets3] FOREIGN KEY([CityID])
REFERENCES [dbo].[coc_Cities] ([CityID])
GO
ALTER TABLE [dbo].[coc_RetailOutlets] CHECK CONSTRAINT [FK_RetailOutlets3]
GO
ALTER TABLE [dbo].[coc_RetailOutlets]  WITH CHECK ADD  CONSTRAINT [FK_RetailOutlets51] FOREIGN KEY([AddUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_RetailOutlets] CHECK CONSTRAINT [FK_RetailOutlets51]
GO
ALTER TABLE [dbo].[coc_RetailOutlets]  WITH CHECK ADD  CONSTRAINT [FK_RetailOutlets52] FOREIGN KEY([EditUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_RetailOutlets] CHECK CONSTRAINT [FK_RetailOutlets52]
GO
ALTER TABLE [dbo].[coc_RoleMenuAccess]  WITH CHECK ADD  CONSTRAINT [FK_RoleMenuAccess1] FOREIGN KEY([RoleID])
REFERENCES [dbo].[coc_UserRole] ([RoleID])
GO
ALTER TABLE [dbo].[coc_RoleMenuAccess] CHECK CONSTRAINT [FK_RoleMenuAccess1]
GO
ALTER TABLE [dbo].[coc_RoleMenuAccess]  WITH CHECK ADD  CONSTRAINT [FK_RoleMenuAccess2] FOREIGN KEY([MenuID])
REFERENCES [dbo].[coc_Menus] ([MenuID])
GO
ALTER TABLE [dbo].[coc_RoleMenuAccess] CHECK CONSTRAINT [FK_RoleMenuAccess2]
GO
ALTER TABLE [dbo].[coc_ScreenViewColumns]  WITH CHECK ADD  CONSTRAINT [FK_ScreenViewColumns] FOREIGN KEY([ScreenViewID])
REFERENCES [dbo].[coc_ScreenViews] ([ScreenViewID])
GO
ALTER TABLE [dbo].[coc_ScreenViewColumns] CHECK CONSTRAINT [FK_ScreenViewColumns]
GO
ALTER TABLE [dbo].[coc_ScreenViews]  WITH CHECK ADD  CONSTRAINT [FK_ScreenViews] FOREIGN KEY([ScreenID])
REFERENCES [dbo].[coc_Screens] ([ScreenID])
GO
ALTER TABLE [dbo].[coc_ScreenViews] CHECK CONSTRAINT [FK_ScreenViews]
GO
ALTER TABLE [dbo].[coc_ServiceKeys]  WITH CHECK ADD  CONSTRAINT [FK_coc_ServiceKeys_coc_EServices] FOREIGN KEY([EServiceID])
REFERENCES [dbo].[coc_EServices] ([EServiceID])
GO
ALTER TABLE [dbo].[coc_ServiceKeys] CHECK CONSTRAINT [FK_coc_ServiceKeys_coc_EServices]
GO
ALTER TABLE [dbo].[coc_ServiceTaskNotification]  WITH NOCHECK ADD  CONSTRAINT [FK_coc_ServiceTaskNotification_coc_ServiceTask] FOREIGN KEY([ServiceTaskId])
REFERENCES [dbo].[coc_ServiceTask] ([Id])
GO
ALTER TABLE [dbo].[coc_ServiceTaskNotification] CHECK CONSTRAINT [FK_coc_ServiceTaskNotification_coc_ServiceTask]
GO
ALTER TABLE [dbo].[coc_Settings]  WITH CHECK ADD  CONSTRAINT [FK_coc_Settings_coc_Currency] FOREIGN KEY([BaseCurrencyId])
REFERENCES [dbo].[coc_Currency] ([CurrencyId])
GO
ALTER TABLE [dbo].[coc_Settings] CHECK CONSTRAINT [FK_coc_Settings_coc_Currency]
GO
ALTER TABLE [dbo].[coc_staging_retailoutlets]  WITH CHECK ADD  CONSTRAINT [FK_coc_staging_retailoutlets_coc_RetailOutlets] FOREIGN KEY([RetailOutletID])
REFERENCES [dbo].[coc_RetailOutlets] ([RetailOutletID])
GO
ALTER TABLE [dbo].[coc_staging_retailoutlets] CHECK CONSTRAINT [FK_coc_staging_retailoutlets_coc_RetailOutlets]
GO
ALTER TABLE [dbo].[COC_SystemSetups]  WITH CHECK ADD  CONSTRAINT [FK_SystemSetups] FOREIGN KEY([GeneralNotificationTemplateID])
REFERENCES [dbo].[coc_GeneralNotificationTemplates] ([GeneralNotificationTemplateID])
GO
ALTER TABLE [dbo].[COC_SystemSetups] CHECK CONSTRAINT [FK_SystemSetups]
GO
ALTER TABLE [dbo].[coc_TermLanguages]  WITH NOCHECK ADD  CONSTRAINT [FK_TermLanguages_Terms] FOREIGN KEY([TermID])
REFERENCES [dbo].[coc_Terms] ([TermID])
GO
ALTER TABLE [dbo].[coc_TermLanguages] CHECK CONSTRAINT [FK_TermLanguages_Terms]
GO
ALTER TABLE [dbo].[coc_Tickets]  WITH CHECK ADD  CONSTRAINT [FK_Tickets1] FOREIGN KEY([EServiceEventID])
REFERENCES [dbo].[coc_EServiceEvents] ([EServiceEventID])
GO
ALTER TABLE [dbo].[coc_Tickets] CHECK CONSTRAINT [FK_Tickets1]
GO
ALTER TABLE [dbo].[coc_Tickets]  WITH CHECK ADD  CONSTRAINT [FK_Tickets2] FOREIGN KEY([EServiceBarcodeID])
REFERENCES [dbo].[coc_EServiceBarcodes] ([EServiceBarcodeID])
GO
ALTER TABLE [dbo].[coc_Tickets] CHECK CONSTRAINT [FK_Tickets2]
GO
ALTER TABLE [dbo].[coc_Tickets]  WITH CHECK ADD  CONSTRAINT [FK_Tickets3] FOREIGN KEY([ConsumerID])
REFERENCES [dbo].[coc_Consumers] ([ConsumerID])
GO
ALTER TABLE [dbo].[coc_Tickets] CHECK CONSTRAINT [FK_Tickets3]
GO
ALTER TABLE [dbo].[coc_Tickets]  WITH CHECK ADD  CONSTRAINT [FK_Tickets4] FOREIGN KEY([PaymentTypeID])
REFERENCES [dbo].[coc_EnumValues] ([EnumValueID])
GO
ALTER TABLE [dbo].[coc_Tickets] CHECK CONSTRAINT [FK_Tickets4]
GO
ALTER TABLE [dbo].[coc_Tickets]  WITH CHECK ADD  CONSTRAINT [FK_Tickets5] FOREIGN KEY([OtpID])
REFERENCES [dbo].[coc_OTP] ([OtpID])
GO
ALTER TABLE [dbo].[coc_Tickets] CHECK CONSTRAINT [FK_Tickets5]
GO
ALTER TABLE [dbo].[coc_Tickets]  WITH CHECK ADD  CONSTRAINT [FK_Tickets6] FOREIGN KEY([VerificationUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_Tickets] CHECK CONSTRAINT [FK_Tickets6]
GO
ALTER TABLE [dbo].[coc_TicketTemplates]  WITH CHECK ADD  CONSTRAINT [FK_TicketTemplates1] FOREIGN KEY([CorporateID])
REFERENCES [dbo].[coc_Corporates] ([CorporateID])
GO
ALTER TABLE [dbo].[coc_TicketTemplates] CHECK CONSTRAINT [FK_TicketTemplates1]
GO
ALTER TABLE [dbo].[coc_TicketTemplates]  WITH CHECK ADD  CONSTRAINT [FK_TicketTemplates51] FOREIGN KEY([AddUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_TicketTemplates] CHECK CONSTRAINT [FK_TicketTemplates51]
GO
ALTER TABLE [dbo].[coc_TicketTemplates]  WITH CHECK ADD  CONSTRAINT [FK_TicketTemplates52] FOREIGN KEY([EditUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[coc_TicketTemplates] CHECK CONSTRAINT [FK_TicketTemplates52]
GO
ALTER TABLE [dbo].[coc_Users]  WITH CHECK ADD  CONSTRAINT [FK_Users1] FOREIGN KEY([RoleID])
REFERENCES [dbo].[coc_UserRole] ([RoleID])
GO
ALTER TABLE [dbo].[coc_Users] CHECK CONSTRAINT [FK_Users1]
GO
ALTER TABLE [dbo].[coc_WebNotificationLanguages]  WITH CHECK ADD FOREIGN KEY([WebNotificationID])
REFERENCES [dbo].[coc_core_WebNotifications] ([WebNotificationID])
GO
ALTER TABLE [dbo].[core_coc_InvoiceDetails]  WITH CHECK ADD  CONSTRAINT [FK_core_coc_InvoiceDetails_coc_BarcodePackagePricings] FOREIGN KEY([BarcodePackagePricingsID])
REFERENCES [dbo].[coc_BarcodePackagePricings] ([BarcodePackagePricingsID])
GO
ALTER TABLE [dbo].[core_coc_InvoiceDetails] CHECK CONSTRAINT [FK_core_coc_InvoiceDetails_coc_BarcodePackagePricings]
GO
ALTER TABLE [dbo].[core_coc_InvoiceDetails]  WITH CHECK ADD  CONSTRAINT [FK_core_coc_InvoiceDetails_coc_EServices] FOREIGN KEY([EServiceID])
REFERENCES [dbo].[coc_EServices] ([EServiceID])
GO
ALTER TABLE [dbo].[core_coc_InvoiceDetails] CHECK CONSTRAINT [FK_core_coc_InvoiceDetails_coc_EServices]
GO
ALTER TABLE [dbo].[core_coc_InvoiceDetails]  WITH CHECK ADD  CONSTRAINT [FK_core_coc_InvoiceDetails_core_coc_Invoices] FOREIGN KEY([InvoiceID])
REFERENCES [dbo].[core_coc_Invoices] ([InvoiceID])
GO
ALTER TABLE [dbo].[core_coc_InvoiceDetails] CHECK CONSTRAINT [FK_core_coc_InvoiceDetails_core_coc_Invoices]
GO
ALTER TABLE [dbo].[core_coc_Invoices]  WITH CHECK ADD  CONSTRAINT [FK_core_coc_Invoices_coc_Corporates] FOREIGN KEY([CorporateID])
REFERENCES [dbo].[coc_Corporates] ([CorporateID])
GO
ALTER TABLE [dbo].[core_coc_Invoices] CHECK CONSTRAINT [FK_core_coc_Invoices_coc_Corporates]
GO
ALTER TABLE [dbo].[core_coc_Invoices]  WITH CHECK ADD  CONSTRAINT [FK_core_coc_Invoices_coc_Users] FOREIGN KEY([AddUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[core_coc_Invoices] CHECK CONSTRAINT [FK_core_coc_Invoices_coc_Users]
GO
ALTER TABLE [dbo].[core_coc_Invoices]  WITH CHECK ADD  CONSTRAINT [FK_core_coc_Invoices_coc_Users1] FOREIGN KEY([EditUserID])
REFERENCES [dbo].[coc_Users] ([UserID])
GO
ALTER TABLE [dbo].[core_coc_Invoices] CHECK CONSTRAINT [FK_core_coc_Invoices_coc_Users1]
GO
ALTER TABLE [dbo].[core_coc_Mall]  WITH CHECK ADD  CONSTRAINT [FK_core_coc_Mall_coc_Cities] FOREIGN KEY([CityID])
REFERENCES [dbo].[coc_Cities] ([CityID])
GO
ALTER TABLE [dbo].[core_coc_Mall] CHECK CONSTRAINT [FK_core_coc_Mall_coc_Cities]
GO
ALTER TABLE [dbo].[core_coc_Mall]  WITH CHECK ADD  CONSTRAINT [FK_core_coc_Mall_coc_Countries] FOREIGN KEY([CountryID])
REFERENCES [dbo].[coc_Countries] ([CountryID])
GO
ALTER TABLE [dbo].[core_coc_Mall] CHECK CONSTRAINT [FK_core_coc_Mall_coc_Countries]
GO
ALTER TABLE [dbo].[Core_coc_Menu]  WITH CHECK ADD FOREIGN KEY([ParentMenuID])
REFERENCES [dbo].[Core_coc_Menu] ([MenuID])
GO
ALTER TABLE [dbo].[Core_coc_Menu]  WITH CHECK ADD FOREIGN KEY([ScreenID])
REFERENCES [dbo].[core_coc_Screen] ([ScreenID])
GO
ALTER TABLE [dbo].[core_coc_RoleMenuMapping]  WITH CHECK ADD FOREIGN KEY([MenuID])
REFERENCES [dbo].[Core_coc_Menu] ([MenuID])
GO
ALTER TABLE [dbo].[core_coc_RoleMenuMapping]  WITH CHECK ADD FOREIGN KEY([RoleID])
REFERENCES [dbo].[coc_UserRole] ([RoleID])
GO
ALTER TABLE [dbo].[core_coc_temp_Consumers]  WITH CHECK ADD FOREIGN KEY([ConsumerID])
REFERENCES [dbo].[coc_Consumers] ([ConsumerID])
GO
ALTER TABLE [dbo].[core_coc_TransCorporateBarcodes]  WITH CHECK ADD  CONSTRAINT [FK_core_coc_TransCorporateBarcodes_coc_Corporates] FOREIGN KEY([CorporateID])
REFERENCES [dbo].[coc_Corporates] ([CorporateID])
GO
ALTER TABLE [dbo].[core_coc_TransCorporateBarcodes] CHECK CONSTRAINT [FK_core_coc_TransCorporateBarcodes_coc_Corporates]
GO
ALTER TABLE [dbo].[core_coc_TransCorporateBarcodes]  WITH CHECK ADD  CONSTRAINT [FK_core_coc_TransCorporateBarcodes_coc_EServices] FOREIGN KEY([EServiceID])
REFERENCES [dbo].[coc_EServices] ([EServiceID])
GO
ALTER TABLE [dbo].[core_coc_TransCorporateBarcodes] CHECK CONSTRAINT [FK_core_coc_TransCorporateBarcodes_coc_EServices]
GO
ALTER TABLE [dbo].[jcci_Competition]  WITH CHECK ADD  CONSTRAINT [FK_EServicesCompetition] FOREIGN KEY([EServiceID])
REFERENCES [dbo].[coc_EServices] ([EServiceID])
GO
ALTER TABLE [dbo].[jcci_Competition] CHECK CONSTRAINT [FK_EServicesCompetition]
GO
ALTER TABLE [dbo].[jcci_Competition_Award]  WITH CHECK ADD  CONSTRAINT [FK_jcciCompetitionAward] FOREIGN KEY([CompetitionID])
REFERENCES [dbo].[jcci_Competition] ([CompetitionID])
GO
ALTER TABLE [dbo].[jcci_Competition_Award] CHECK CONSTRAINT [FK_jcciCompetitionAward]
GO
ALTER TABLE [dbo].[jcci_Competition_Branch]  WITH CHECK ADD  CONSTRAINT [FK_jcciCompetitionBranch] FOREIGN KEY([CompetitionID])
REFERENCES [dbo].[jcci_Competition] ([CompetitionID])
GO
ALTER TABLE [dbo].[jcci_Competition_Branch] CHECK CONSTRAINT [FK_jcciCompetitionBranch]
GO
ALTER TABLE [dbo].[jcci_Competition_Draw]  WITH CHECK ADD  CONSTRAINT [FK_jcciCompetitionDraw] FOREIGN KEY([CompetitionID])
REFERENCES [dbo].[jcci_Competition] ([CompetitionID])
GO
ALTER TABLE [dbo].[jcci_Competition_Draw] CHECK CONSTRAINT [FK_jcciCompetitionDraw]
GO
ALTER TABLE [dbo].[TempUploadParticipations]  WITH CHECK ADD  CONSTRAINT [FK_TempUploadParticipations_ECoupon] FOREIGN KEY([ECouponID])
REFERENCES [dbo].[coc_ECoupons] ([ECouponID])
GO
ALTER TABLE [dbo].[TempUploadParticipations] CHECK CONSTRAINT [FK_TempUploadParticipations_ECoupon]
GO
ALTER TABLE [dbo].[UploadParticipations]  WITH NOCHECK ADD  CONSTRAINT [FK_UploadParticipations__Guests] FOREIGN KEY([GuestID])
REFERENCES [dbo].[coc_Guests] ([GuestID])
GO
ALTER TABLE [dbo].[UploadParticipations] CHECK CONSTRAINT [FK_UploadParticipations__Guests]
GO
ALTER TABLE [dbo].[UploadParticipations]  WITH NOCHECK ADD  CONSTRAINT [FK_UploadParticipations__RetailOutlets] FOREIGN KEY([RetailOutletID])
REFERENCES [dbo].[coc_RetailOutlets] ([RetailOutletID])
GO
ALTER TABLE [dbo].[UploadParticipations] CHECK CONSTRAINT [FK_UploadParticipations__RetailOutlets]
GO
ALTER TABLE [dbo].[UploadParticipations]  WITH NOCHECK ADD  CONSTRAINT [FK_UploadParticipations_ECoupon] FOREIGN KEY([ECouponID])
REFERENCES [dbo].[coc_ECoupons] ([ECouponID])
GO
ALTER TABLE [dbo].[UploadParticipations] CHECK CONSTRAINT [FK_UploadParticipations_ECoupon]
GO
ALTER TABLE [dbo].[UploadParticipations]  WITH NOCHECK ADD  CONSTRAINT [FK_UploadParticipations_Participation] FOREIGN KEY([ECouponParticipationID])
REFERENCES [dbo].[coc_ECouponParticipations] ([ECouponParticipationID])
GO
ALTER TABLE [dbo].[UploadParticipations] CHECK CONSTRAINT [FK_UploadParticipations_Participation]
GO
/****** Object:  StoredProcedure [dbo].[@GetVoucherDetailsReport]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[@GetVoucherDetailsReport]            
 @BundleID INTEGER=NULL,            
 @EVoucherID INTEGER=NULL,  
 @FromDate DATETIME=NULL,            
 @ToDate DATETIME=NULL,            
 @CorporateID INTEGER=NULL,            
 @LanguageID INTEGER=1    
 ,@PageSize  int=100                                                          
 ,@RecordCount bigint  Output                                                      
 ,@PageIndex int=1 
AS                                                                  
BEGIN               
  SET NOCOUNT ON;                                                 
  declare @offset bigint,@fetch  bigint;                                          
     set @offset =@PageSize*(@PageIndex-1);                                          
     set @fetch =@PageSize;             
              
 IF (@FromDate IS NULL)              
   SET @FromDate = GetDate();                                          
 IF (@ToDate IS NULL)              
   SET @ToDate = dateadd(dd, + 1, GetDate());              
IF (@LanguageID IS NULL)              
  SET @LanguageID = 1;          
        
   DECLARE @GetVoucherDetailsReport TABLE (  
   EVoucherID INTEGER,
   [EVoucherName] NVARCHAR(300),
   CorporateID INTEGER,
  [CorporateName] NVARCHAR(300),
   ConsumerID INT,
  [ConsumerName] NVARCHAR(300),
   MobileNo NVARCHAR(20),
  InvoiceAmount Int,
  InvoiceNumber NVARCHAR(200),
  [VoucherDistributed] INTEGER,                        
  [VoucherDownloaded] INTEGER,          
  [VoucherUsed] INTEGER,          
  [VoucherRemaining] INTEGER ,         
  BundleName NVARCHAR(300),
  DateAndTime datetime,
  MembershipID NVARCHAR(200),
  KioskLocation NVARCHAR(300),
  RetailOutlet NVARCHAR(300),
  UsedDate DateTime
         
  )           
             
   INSERT INTO @GetVoucherDetailsReport            
            
   SELECT             
 ev.EVoucherID AS [EVoucherID],          
 evl.ResourceValue AS [EVoucherName], 
  es.CorporateID AS [CorporateID],
  crs.CorporateName  , 
   esb.ConsumerID,
   isnull(cns.FirstName,'')+' '+isnull(cns.SecondName,'') AS [ConsumerName],
   isnull(esb.AsignedMoile, cns.PrimaryMobile) mobileNo,
   esb.InvoiceAmount,
   esb.InvoiceNumber, 
  (select count(*) from coc_EServiceBarcodes(nolock) where NotificationID=ns.NotificationID) AS [VoucherDistributed],  
 (select count(*) from coc_EServiceBarcodes(nolock) where NotificationID=ns.NotificationID and ((ISNULL(ConsumerID,0)>0 or ISNULL(GuestID,0)>0))) AS [VoucherDownloaded],           
 (select count(*) from coc_EServiceBarcodes(nolock) where NotificationID=ns.NotificationID and IsUsed=1 and ((ISNULL(ConsumerID,0)>0 or ISNULL(GuestID,0)>0))) AS [VoucherUsed],           
 (select count(*) from coc_EServiceBarcodes(nolock) where NotificationID=ns.NotificationID and IsUsed=0 and ISNULL(ConsumerID,0)=0 and ISNULL(GuestID,0)=0) AS [VoucherRemaining],           
           
 '' as BundleName,  
  ev.ExpiryDate AS [DateAndTime],
  cns.MembershipNumber AS [MembershipID],
  kll.KioskLocation,
  rol.RetailOutlet,    
  esb.UsedDate
            
  --WHEN CONVERT(INT,esb.IsUsed)=1            
  --  THEN 'Yes'            
  --  ELSE 'No'            
  --END AS [VoucherUsed]      
            
               
  FROM  coc_EVoucher(nolock) ev            
       
   INNER JOIN coc_EVoucherLanguages(nolock) AS evl ON evl.EVoucherID=ev.EVoucherID AND evl.ResourceKey='VoucherName' AND evl.LanguageID=@LanguageID            
   Inner join coc_EServices(nolock) es on es.EServiceID=ev.EServiceID                 
   INNER JOIN coc_Corporates(nolock) AS crs ON crs.CorporateID=es.CorporateID                        
   LEFT OUTER JOIN coc_EServiceBarcodes(nolock) esb ON esb.EVoucherID = ev.EVoucherID        
   LEFT OUTER  JOIN coc_Consumers(nolock) AS cns ON cns.ConsumerID=esb.ConsumerID              
   LEFT OUTER  JOIN coc_EVoucherBundleEligibilityForConsumers(nolock) evbe ON evbe.EVoucherBundleEligibilityForConsumersID = esb.EVoucherBundleEligibilityForConsumersID            
   LEFT OUTER  JOIN coc_KioskLocationLanguages(nolock) kll on kll.KioskLocationID=esb.UsedAtKioskID and kll.LanguageID=@LanguageID          
    LEFT OUTER  JOIN coc_KioskLocationRetailOutlets(nolock) klr on klr.KioskLocationID=esb.UsedAtKioskID          
 LEFT OUTER  JOIN coc_RetailOutletLanguages(nolock) rol on rol.RetailOutletID=klr.RetailOutletID and rol.LanguageID=@LanguageID  
 Inner join coc_Notifications(nolock) ns on ns.EServiceID=ev.EServiceID 
  where (@EVoucherID is null or ev.EVoucherID=@EVoucherID)   
   and (@CorporateID is null or es.CorporateID=@CorporateID)   
   and (@FromDate is null or convert(date,esb.AssignedDate)>= convert(date,@FromDate)) and (@ToDate is null or  convert(date,esb.AssignedDate)<=convert(date,@ToDate))              
  AND (@CorporateID IS NULL OR es.CorporateID=@CorporateID) 
   
  
   select EVoucherID , [EVoucherName] ,CorporateID ,[CorporateName],ConsumerID, [ConsumerName],MobileNo,InvoiceAmount,InvoiceNumber,[VoucherDistributed],[VoucherDownloaded],  
       [VoucherUsed],[VoucherRemaining],BundleName,DateAndTime,MembershipID,KioskLocation ,RetailOutlet,UsedDate  from @GetVoucherDetailsReport         
                order by 1 desc    OFFSET @offset ROWS                                                  
                          FETCH NEXT @fetch ROWS ONLY                                         
                                           
           
                
          
 
               
END
GO
/****** Object:  StoredProcedure [dbo].[AddCustomerLoyaltyPoints]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
CREATE PROCEDURE [dbo].[AddCustomerLoyaltyPoints]   
 @EcouponID INTEGER,  
 @ConsumerID INTEGER,  
 @LoyaltyPointSetupID integer,  
 @ErrorMessage [Remark] = NULL OUTPUT  
AS  
SET NOCOUNT ON  
BEGIN  
   
  
 DECLARE @Points INTEGER  
 select @ErrorMessage = ''  
   
 BEGIN TRANSACTION AddCustomerLoyaltyPoints  
 BEGIN TRY  
  declare @participationCount int = 0  
  select @participationCount = count(*) from coc_ECouponParticipations(NOLOCK) where ECouponID = @EcouponID and ConsumerID= @ConsumerID  
  if ISNULL(@participationCount,0) = 0  
  begin  
   select @participationCount = count(*) from coc_ECouponParticipationsInvalid(NOLOCK) where ECouponID = @EcouponID and ConsumerID= @ConsumerID  
   if ISNULL(@participationCount,0) = 0  
   begin  
     
    SELECT @Points = SetupValue  
     FROM coc_LoyaltyPointSetups(NOLOCK)  
     WHERE LoyaltyPointSetupID = @LoyaltyPointSetupID  
  
    UPDATE coc_Consumers  
     SET LoyaltyPoint = LoyaltyPoint + @Points  
     WHERE ConsumerID = @ConsumerID  
    
    
    INSERT INTO coc_ConsumerPointDetails (  
      ConsumerID  
      ,PointDate  
      ,PointSource  
      ,LoyaltyPoint  
      ,RedeemPoint  
      ,ECouponID  
      )  
     SELECT @ConsumerID  
      ,GETDATE()  
      ,@LoyaltyPointSetupID  
      ,@Points  
      ,0  
      ,@EcouponID  
   
    UPDATE coc_Consumers  
      SET LoyaltyPoint = LoyaltyPoint + @Points  
      WHERE ConsumerID = @ConsumerID  
   end  
  end   
  COMMIT TRANSACTION AddCustomerLoyaltyPoints   
 END TRY  
 BEGIN CATCH    
  ROLLBACK TRANSACTION AddCustomerLoyaltyPoints         
  SELECT @ErrorMessage=ERROR_MESSAGE()+' From : AddCustomerLoyaltyPoints SP'  
  RAISERROR(@ErrorMessage, 16, 1);     
 END CATCH  
END  
SET NOCOUNT OFF  
  
GO
/****** Object:  StoredProcedure [dbo].[AddEcoponsIntoServiceTask]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[AddEcoponsIntoServiceTask]         
 @EServiceID INTEGER         
,@UserId INTEGER = NULL        
,@NoOfEcopons   INTEGER       
,@CorporateID INTEGER = NULL       
,@InvoiceUpdate bit=NULL          
AS     
BEGIN TRY      
 if(@CorporateID=0)  
 begin    
 set @CorporateID  = null   
 end      
 print(@CorporateID)    
if(@EServiceID <> 0 AND @EServiceID is not null)  
begin  
 declare @Parameters Nvarchar(max)= NULL   ;        
 declare @NotificationID bigint;      
 declare @SpResultStatus int;      
 declare @NotificationCount bigint;      
  declare @NotificationCountForInvoice bigint;      
 set @NotificationID=(select top 1 NotificationID from coc_Notifications (NOLOCK) where EServiceID=@EServiceID order by 1 desc)      
 set @CorporateID=(select CorporateID from coc_EServices (NOLOCK) where EServiceID=@EServiceID)       
 set @UserId=(select UserID from coc_Corporates (NOLOCK) where CorporateID=@CorporateID)      
 print(@UserId)   
 insert into coc_servicetask(TaskTypeId,[Date],ExecuteDate,UniqueId,Parameters,UserId,[Status],ExecutionStatus,Result,TaskData,RowStatus,ErrorMsgEmailSend,IsFailureNotificationAlreadySend) 
 Values( 1,
 getdate(),
 getdate(),
 @EServiceID,
 '<?xml version="1.0" encoding="utf-16"?><BarcodeGenerateParams xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ServiceID>'+Convert(nvarchar(20),@EServiceID)+'</ServiceID><NoOfBarcodes>'+Convert(nvarchar(20),@NoOfEcopons)+'</NoOfBarcodes><NotificationID>'+Convert(nvarchar(20),@NotificationID)+'</NotificationID><ServiceTypeID>52</ServiceTypeID><Prefix>0</Prefix><Suffix>0</Suffix><CorporateID>'+Convert(nvarchar(20),@CorporateID)+'</CorporateID><LanguageID>1</LanguageID><UserId>'+Convert(nvarchar(20),@UserId)+'</UserId></BarcodeGenerateParams>',
 @UserId,
 1,
 1,
 NULL,
 NULL,
 1,
 NULL,
 NULL  
 )  
 --insert into coc_servicetask select 1,getdate(),getdate(),@EServiceID,'<?xml version="1.0" encoding="utf-16"?><BarcodeGenerateParams xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ServiceID>'+Convert(nvarchar(20),@EServiceID)+'</ServiceID><NoOfBarcodes>'+Convert(nvarchar(20),@NoOfEcopons)+'</NoOfBarcodes><NotificationID>'+Convert(nvarchar(20),@NotificationID)+'</NotificationID><ServiceTypeID>52</ServiceTypeID><Prefix>0</Prefix><Suffix>0</Suffix><CorporateID>'+Convert(nvarchar(20),@CorporateID)+'</CorporateID><LanguageID>1</LanguageID><UserId>'+Convert(nvarchar(20),@UserId)+'</UserId></BarcodeGenerateParams>',@UserId,1,1,NULL,NULL,1,NULL,NULL   
 set @NotificationCount=(select NotificationCount from  coc_notifications (NOLOCK) where EServiceID=@EServiceID);   
 update coc_notifications set notificationcount=  (@NotificationCount +  @NoOfEcopons)    
 where  EServiceID=@EServiceID;   
  set @NotificationCountForInvoice=(select NotificationCount from coc_eserviceinvoices (NOLOCK) where EServiceID=@EServiceID)   
 update coc_eserviceinvoices set notificationcount=(@NotificationCountForInvoice +  @NoOfEcopons)   
 where EServiceID=@EServiceID  --end       
  set @SpResultStatus=1    
  select @SpResultStatus  
    print(@CorporateID)    
 end  
END TRY      
BEGIN CATCH      
 set @SpResultStatus=0    
 select @SpResultStatus  
END CATCH 
GO
/****** Object:  StoredProcedure [dbo].[AddNewGuest]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[AddNewGuest]
	@Email [Email]=NULL,
	@Mobile [Mobile]=NULL,
	@FullName [Name]= NULL,
	@OTPID [int]= NULL,
	@IsVerified [bit]= NULL,
	@GuestID [int] OUTPUT 
AS	
	SET NOCOUNT ON
		BEGIN
			
			
			Insert into coc_guests([FullName], [PrimaryMobile], [EmailID], [IsActive],[AddDate],[OTPID], [IsVerified])
				VALUES (@FullName, @Mobile, @Email, 1, getdate(), @OTPID, @IsVerified)
			
			select @GuestID = SCOPE_IDENTITY() 

		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[ApplyPromoCode]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ApplyPromoCode]            
 @ConsumerID INTEGER             
,@LanguageID INTEGER = 1            
,@PromoCode nvarchar(150)   
,@Status INTEGER OUTPUT  
,@MessageText NVARCHAR(150) OUTPUT     
AS            
BEGIN            
BEGIN TRY      
    
  SET @MessageText=''  
   Declare @PromoCodeID bigint    
   if not exists(select PromoCodeID from coc_core_PromoCodes(nolock) where PromoCode= @PromoCode)  
   begin  
      Select @Status=0,@MessageText = 'InvalidPromoCode'  
   end  
   else if not exists(select PromoCodeID from coc_core_PromoCodes(nolock) where PromoCode= @PromoCode and IsUsed=0 and   
         ConsumerID is null and PrimaryMobile is null and EmailID is null and UsedDate is null)  
   begin  
        Select @Status=0,@MessageText = 'UsedPromoCode'  
   end  
   else if not exists(select PromoCodeID from coc_core_PromoCodes(nolock) where PromoCode= @PromoCode and ExpiryDate>=getdate())  
   begin  
       Select @Status=0,@MessageText = 'PromoCodeExpired'  
   end  
   else  
   begin  
         
    Select @PromoCodeID=PromoCodeID from coc_core_PromoCodes where PromoCode= @PromoCode  
  
    Update coc_core_PromoCodes  set ConsumerID=NULL where ConsumerID=@ConsumerID  
  
       Update coc_core_PromoCodes set ConsumerID=@ConsumerID,IsUsed=1,UsedDate=getdate() where PromoCodeID= @PromoCodeID  
  
    update coc_consumers set PromoCodeID=@PromoCodeID,PromoCodeAddedDate=getdate(),PromoCodeExpiryDate=dateadd(year,1, getdate()) where ConsumerID=@ConsumerID  
  
    insert into coc_core_ApplyPromoCodeLogs(PromoCodeID,ConsumerID,CreatedDate)  
       select @PromoCodeID,@ConsumerID,getdate()  
  
    SELECT @Status = 1, @MessageText = 'PromoCodeApplied.'    
  
    Select cp.ConsumerID,cp.PromoCode,  
    (Case when @LanguageID=2 then cc.CategoryNameAR else cc.CategoryName end) CategoryName,  
    convert(nvarchar(30),c.PromoCodeAddedDate) AppliedDateTime,  
    convert(nvarchar(30),c.PromoCodeExpiryDate) ExpiryDateTime,  
    0 as IsExpired  
    from  coc_core_PromoCodes(nolock) cp  
    inner join coc_core_Category(nolock) cc on cc.CategoryID=cp.CategoryID  
    inner join coc_consumers(nolock) c on c.ConsumerID=cp.ConsumerID  
    where cp.ConsumerID=@ConsumerID  
  
   end  
    
END try            
BEGIN CATCH                     
 SELECT @Status = 0, @MessageText=ERROR_MESSAGE()            
 RAISERROR(@MessageText, 16, 1);               
END CATCH            
END
GO
/****** Object:  StoredProcedure [dbo].[ApproveConfig]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ApproveConfig]
@EcouponID INTEGER
AS
BEGIN

UPDATE coc_ECoupons set IsApproved = 1,ApprovalDate=GETDATE(), isactive = 1 WHERE ECouponID = @EcouponID
END

GO
/****** Object:  StoredProcedure [dbo].[CheckBarcodeGeneration]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CheckBarcodeGeneration]
	 @EServiceID INTEGER=NULL,
	 @ErrorMessage REMARK OUTPUT
AS 
SET NOCOUNT ON 
	--Tables[0] EServices
	DECLARE @ServiceSubTypeID INTEGER
	SELECT @ServiceSubTypeID=ServiceSubTypeID FROM coc_EServices(NOLOCK) WHERE EServiceID=@EServiceID
	IF(@ServiceSubTypeID=62)
	BEGIN
		SET @ErrorMessage=1
		SET @ErrorMessage=@ErrorMessage
	END
	ELSE
	BEGIN
		SELECT @ErrorMessage=1 fROM coc_EServices(NOLOCK) ES
			INNER JOIN coc_Notifications CN(NOLOCK) ON ES.EServiceID=CN.EServiceID
			INNER JOIN coc_EServiceBarcodes EB(NOLOCK) ON CN.NotificationID=EB.NotificationID
		WHERE ES.EServiceID=@EServiceID
		SET @ErrorMessage=@ErrorMessage
	END
SET NOCOUNT OFF 






GO
/****** Object:  StoredProcedure [dbo].[CheckBarcodesPending]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CheckBarcodesPending]
	 @EServiceID INTEGER,
	 @TaskCount INT OUTPUT
	 
AS 
SET NOCOUNT ON 

DECLARE @serviceRunning INT
select @serviceRunning = count(*) from coc_ServiceTask(NOLOCK) where TaskTypeId=1 and [Status]=1 and UniqueId=@EServiceID

	--Tables[0] EServices
	DECLARE @ServiceSubTypeID INTEGER
	SELECT @TaskCount= COUNT(*) FROM coc_ServiceTask(NOLOCK) WHERE UniqueId=@EServiceID AND Status=1
	
SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[CheckServicesPending]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CheckServicesPending]
	 @EServiceID INTEGER,
	 @TaskTypeId INTEGER,
	 @TaskCount INT OUTPUT
	 
AS 
SET NOCOUNT ON 

IF(@TaskTypeId=1)
BEGIN
	SELECT @TaskCount= COUNT(*) FROM coc_ServiceTask(NOLOCK) WHERE TaskTypeId=@TaskTypeId AND UniqueId=@EServiceID AND Status=1
END

IF(@TaskTypeId=3)
BEGIN
	SELECT @TaskCount=COUNT(*) FROM coc_ServiceTask(NOLOCK) AS ser
	INNER JOIN coc_NotificationSends(NOLOCK) AS ns ON ns.NotificationSendID=ser.UniqueId
	INNER Join coc_Notifications(NOLOCK) AS noti ON noti.NotificationID=ns.NotificationID
	WHERE ser.Status=1 AND noti.EServiceID=@EServiceID AND ser.TaskTypeId=3
END
SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[CheckVersion]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE  [dbo].[CheckVersion]
	@MajorVersionNo INTEGER,  
	@RevisionNo varchar(10),
	@DeviceID varchar(100),
	@DeviceType varchar(10),
	@OSVersion varchar(100),
	@ConsumerID bigint= null,
	@LanguageID int,
	@WebServiceVersion varchar(50),
	@Status [int] OUTPUT,
	@Error [Remark] OUTPUT,
	@Message varchar(100) OUTPUT,
	@NeedUpdate bit OUTPUT, 
	@ForceUpdate bit OUTPUT

AS
SET NOCOUNT ON
BEGIN
	select @NeedUpdate = 0, @ForceUpdate = 0
	BEGIN TRANSACTION TRN_CheckVersion
	BEGIN TRY
		INSERT INTO coc_CheckVersion(MajorVersionNo, RevisionNo, DeviceID, DeviceType, OSVersion, ConsumerID, LanguageID, WebServiceVersion)
			VALUES (@MajorVersionNo, @RevisionNo, @DeviceID, @DeviceType, @OSVersion, @ConsumerID, @LanguageID, @WebServiceVersion)

		declare @VersionUpdateID bigint
		declare @MaxAllowedRevision numeric(10,2)
		
		select @MaxAllowedRevision  = max(cast(RevisionNo as numeric(10,2))) from [dbo].[coc_VersionUpdate] (NOLOCK) 
			where NeedUpdate = 0 and MajorVersionNo= @MajorVersionNo and DeviceType= @DeviceType and RevisionNo is not null

		select @VersionUpdateID = VersionUpdateID, @NeedUpdate = NeedUpdate, @ForceUpdate = ForceUpdate 
			from [dbo].[coc_VersionUpdate] (NOLOCK)
			where MajorVersionNo = @MajorVersionNo
					and RevisionNo = @RevisionNo
					and DeviceType = @DeviceType
		
		if @VersionUpdateID is null 
		BEGIN
			if @MaxAllowedRevision < cast(@RevisionNo as numeric(10,2))
		begin
			select @VersionUpdateID = VersionUpdateID, @NeedUpdate = NeedUpdate, @ForceUpdate = ForceUpdate 
				from [dbo].[coc_VersionUpdate] (NOLOCK)
				where MajorVersionNo = @MajorVersionNo
							and RevisionNo = cast(@MaxAllowedRevision as varchar)
						and DeviceType = @DeviceType

		end
			--else
			--begin
			--	select @VersionUpdateID = VersionUpdateID, @NeedUpdate = NeedUpdate, @ForceUpdate = ForceUpdate 
			--		from [dbo].[coc_VersionUpdate] (NOLOCK)
			--		where MajorVersionNo = @MajorVersionNo
			--				and RevisionNo is null
			--				and DeviceType = @DeviceType

			--end
		END
		SELECT @Status= 0, 
				@Message= case when @NeedUpdate = 1 then 'VersionUpdate' else '' end,
				@Error= ''
		
		

		--temporary fix 
		--set @NeedUpdate=0;set @ForceUpdate=0;--this line needs b

		COMMIT TRANSACTION TRN_CheckVersion

		
	END TRY
	BEGIN CATCH

		ROLLBACK TRANSACTION TRN_CheckVersion
		SELECT @Status= 1, 
			@Error = ERROR_MESSAGE() 
	END CATCH
END
SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[ClearAndroidDeviceToken]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ClearAndroidDeviceToken]
	@ConsumerID INTEGER,	
	@ErrorMessage [Remark] OUTPUT 

AS
	BEGIN
		UPDATE coc_Consumers SET AndroidDeviceToken=null WHERE ConsumerID=@ConsumerID
				SET @ErrorMessage=''
		
	END



GO
/****** Object:  StoredProcedure [dbo].[ClearDeviceToken]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ClearDeviceToken]
	@ConsumerID INTEGER,	
	@ErrorMessage [Remark] OUTPUT 

AS
	BEGIN
		UPDATE coc_Consumers SET DeviceToken=null WHERE ConsumerID=@ConsumerID
		SET @ErrorMessage=''
	END

	
GO
/****** Object:  StoredProcedure [dbo].[coc_usp_GetStepOneData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[coc_usp_GetStepOneData]
 @EVoucherID INTEGER,      
 @LanguageID int=1,        
 @RoleID bigint=NULL,      
 @UserID bigint=NULL,      
 @ImpersonationUserID bigint=null,      
 @SpResponseStatus int output ,      
 @SpResponseMessage nvarchar(500) output,      
 @SpErrorDetails nvarchar(500) output       
 AS    
  if(@RoleID <> 1)
     begin
		Set @SpResponseStatus=0;         
		Set @SpResponseMessage='UnSuccess';        
		Set @SpErrorDetails='Access denied';        
		return;
	 end
	   
 BEGIN TRY    
  Set @SpResponseStatus=1;       
  Set @SpResponseMessage='Success';     
  Set @SpErrorDetails='Success';     

  Select EV.EvoucherID, 
  eslE.EService AS PromotionNameEN, 
  eslA.EService AS PromotionNameAR,
  EV.Type as VoucherTypeID,
  ES.FromDate,
  CONVERT(VARCHAR(11),ES.FromDate,131) FromDateHijri,
  ES.ToDate,
  CONVERT(VARCHAR(11),ES.ToDate,131) ToDateDateHijri,
  EV.NumberOfVouchers,
  isnull(EV.EVoucherTypeID,1) EVoucherTypeID
  from coc_EVoucher EV (NOLOCK)
   Inner join coc_EServices ES (NOLOCK) on ES.EserviceID = EV.EserviceID
   INNER JOIN coc_EServiceLanguages eslE (NOLOCK) ON eslE.EServiceID = EV.EServiceID AND eslE.LanguageID=1           
   INNER JOIN coc_EServiceLanguages eslA (NOLOCK) ON eslA.EServiceID = EV.EServiceID AND eslA.LanguageID=2
   where EV.EVoucherID = @EvoucherID
 END TRY        
BEGIN CATCH       
  ROLLBACK TRANSACTION SaveEVoucherTermsData       
  Set @SpResponseStatus=0;       
  Set @SpResponseMessage='GenericError';      
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(varchar,ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(varchar,ERROR_SEVERITY())+'>, ErrorState : <'+Convert(varchar,ERROR_STATE())+'> , ErrorProcedure : <'+Convert(varchar,ERROR_PROCEDURE())+'> , ErrorLine <'+Convert(varchar,ERROR_LINE())+'> ErrorMessage : <'+Convert(varchar,ERROR_MESSAGE())+'>';      
END CATCH;
GO
/****** Object:  StoredProcedure [dbo].[coc_usp_GetVoucherActivationData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[coc_usp_GetVoucherActivationData]       
 @EVoucherID INTEGER,      
 @LanguageID int=1,        
 @RoleID bigint=NULL,      
 @UserID bigint=NULL,      
 @ImpersonationUserID bigint=null,      
 @SpResponseStatus int output ,      
 @SpResponseMessage nvarchar(500) output,      
 @SpErrorDetails nvarchar(500) output       
 AS      
 BEGIN TRY    
  Set @SpResponseStatus=1;       
  Set @SpResponseMessage='Success';     
   Set @SpErrorDetails='Success';     
       
  DECLARE @IsDesabled BIT = 0      
  IF(EXISTS(SELECT * FROM coc_EVoucherBundle EB (NOLOCK) INNER JOIN coc_EVoucherBundleDistribution EVD (NOLOCK) ON EB.EVoucherBundleID = EVD.EVoucherBundleID WHERE EB.EVoucherID = @EVoucherID))      
   BEGIN      
    SET @IsDesabled = 1      
   END      
      
  SELECT E.EVoucherID,E.EServiceID,E.IsAllowed, E.IsActive as IsActivated, @IsDesabled AS IsDesabled, E.IsAcceptedTC ,    
   E.VoucherPDF,    
   (select ResourceValue from coc_EVoucherLanguages(NOLOCK) where EVoucherID=E.EVoucherID  and ResourceKey='Terms' and LanguageID=1) as TermsAndCondition,              
   (select ResourceValue from coc_EVoucherLanguages(NOLOCK) where EVoucherID=E.EVoucherID  and ResourceKey='Terms' and LanguageID=2) as TermsAndConditionArabic              
   ,E.CurrentStatus      
   FROM coc_EVoucher(NOLOCK)  E      
  WHERE E.EVoucherID = @EVoucherID       
     
 END TRY        
BEGIN CATCH       
  ROLLBACK TRANSACTION SaveEVoucherTermsData       
  Set @SpResponseStatus=0;       
  Set @SpResponseMessage='GenericError';      
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
END CATCH;
GO
/****** Object:  StoredProcedure [dbo].[coc_usp_SaveServiceTask]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[coc_usp_SaveServiceTask]
 @TaskTypeId INTEGER,  
 @UniqueId INTEGER,  
 @ExecuteDate DATETIME,  
 @TaskParameters NVARCHAR(MAX),   
 @TaskData NVARCHAR(MAX)=NULL,  
 @UserId INTEGER,  
 @ServiceTaskId INTEGER OUTPUT,  
 @ReturnValue [Remark] OUTPUT ,
 @LanguageID int=1,               
 @RoleID bigint=null,            
 @ImpersonationUserID bigint=null,            
 @SpResponseStatus int out,            
 @SpResponseMessage nvarchar(max) out,            
 @SpErrorDetails nvarchar(max)    out            
AS  
SET NOCOUNT ON  
 BEGIN  
  
  --BEGIN TRANSACTION TRN_Countries  
  BEGIN TRY  
  
  INSERT INTO coc_ServiceTask(TaskTypeId, [UniqueId],[Date], [ExecuteDate],[Parameters], [TaskData],[UserId],[Status],[RowStatus])  
   VALUES (@TaskTypeId, @UniqueId, GETDATE(), @ExecuteDate, @TaskParameters,@TaskData, @UserId, 1,1)  
    
  SET @ServiceTaskId =SCOPE_IDENTITY()  
  
  SET @ReturnValue =''   
  --COMMIT TRANSACTION TRN_Countries  
    Set @SpResponseStatus=1;             
   Set @SpResponseMessage='Success';            
   Set @SpErrorDetails='Success';      
  END TRY  
  BEGIN CATCH  
   SELECT @ReturnValue= ERROR_MESSAGE()  
  --ROLLBACK TRANSACTION TRN_Countries  
    Set @SpResponseStatus=0;  
	Set @SpResponseMessage='GenericError';   
    Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';              
  
  END CATCH  
  END  
SET NOCOUNT OFF  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[ConfirmConsumers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ConfirmConsumers]  
 @ConsumerName [Name]=NULL,  
 @MobileNo [Mobile],  
 @Password NVARCHAR(125),  
 @VerificationCode [NullPin],  
 @ConsumerID INTEGER OUTPUT,  
 @ErrorMessage [Remark] OUTPUT   
AS   
SET NOCOUNT ON  
 DECLARE @IsVerified BIT=0  
 DECLARE @EmailID [Email]  
 DECLARE @UserID INTEGER  
 DECLARE @OtpID INTEGER  
  
 SET @ErrorMessage = ''  
 BEGIN TRY  
  SELECT top 1  @OtpID= OtpID FROM coc_OTP(NOLOCK) WHERE Otp=@VerificationCode  and otpid in (select otpid from coc_Consumers (NOLOCK) where PrimaryMobile= @MobileNo)
  order by otpid desc

  SELECT  @IsVerified=ISNULL(IsVerified,0),@ConsumerID=ConsumerID,@EmailID=EmailID   
    FROM [COC_Consumers](NOLOCK)   
     WHERE PrimaryMobile = @MobileNo
  IF EXISTS(SELECT  NULL FROM [COC_Consumers](NOLOCK) WHERE PrimaryMobile = @MobileNo AND OtpID=@OtpID)--FirstName = @ConsumerName AND   
  BEGIN  
   SELECT  @IsVerified=ISNULL(IsVerified,0),@ConsumerID=ConsumerID,@EmailID=EmailID   
    FROM [COC_Consumers](NOLOCK)   
     WHERE PrimaryMobile = @MobileNo AND OtpID=@OtpID   --FirstName = @ConsumerName AND   
   IF(@IsVerified=0)  
   BEGIN  
    UPDATE [COC_Consumers]  
     SET IsVerified=1, VerificationDate=GETDATE()  
    WHERE  PrimaryMobile = @MobileNo AND OtpID=@OtpID --FirstName = @ConsumerName AND  
  
    IF EXISTS (SELECT USERID FROM [COC_Consumers](NOLOCK) WHERE ConsumerID = @ConsumerID AND USERID IS NULL)   
    BEGIN  
     INSERT INTO [COC_Users](UserName,Password,RoleID,MobileNumber,EmailID,PhoneNumber,ResetRequired,IsActive,CreatedDate)  
      SELECT @EmailID,@Password,5,@MobileNo,@EmailID,@MobileNo,0,1,GETDATE()    
     SET @UserID=SCOPE_IDENTITY()  
  
     UPDATE [COC_Consumers]  
     SET UserID = @UserID  
     WHERE ConsumerID=@ConsumerID  
    END  
   END  
   ELSE  
   BEGIN  
    SET @ErrorMessage = 'RegistrationalreadyVerified'  
   END  
  END  
  ELSE  
  BEGIN  
   SET @ErrorMessage = 'InvalidVerificationCode'  
  END  
     
 END TRY  
 BEGIN CATCH           
  SELECT @ErrorMessage=ERROR_MESSAGE()  
  RAISERROR(@ErrorMessage, 16, 1);     
 END CATCH  
SET NOCOUNT OFF  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[ConfirmCorporateRegistration]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ConfirmCorporateRegistration]
	@ConfirmID INTEGER, 
	@EmailID  [Email],
	@MobileNumber [Phone],
	@Password  NVARCHAR(55), 
	@ErrorMessage [Remark] OUTPUT 
AS 
SET NOCOUNT ON
	BEGIN TRY
	IF EXISTS(SELECT 1 FROM coc_Corporates (NOLOCK) WHERE CorporateID=@ConfirmID AND IsVerified=0)
	BEGIN
 	     INSERT INTO coc_Users(UserName,[Password],RoleID,MobileNumber,EmailID,CreatedDate)
			SELECT @EmailID,@Password,3,@MobileNumber,@EmailID,GETDATE()
			 		
		 UPDATE coc_Corporates 
			 SET IsVerified=1 
			 WHERE CorporateID=@ConfirmID
	SET @ErrorMessage=''
	END
	ELSE 
	BEGIN
		SET @ErrorMessage='Corporate User is already Verified.'
	END
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);
	END CATCH
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[cor_usp_GetConsumerProfile]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[cor_usp_GetConsumerProfile]           
 @RegistrationID INTEGER                           
AS        
BEGIN    
 SET NOCOUNT ON
 IF EXISTS (SELECT ConsumerID FROM coc_ConsumerProfileEdit WITH(NOLOCK) WHERE ConsumerID = @RegistrationID)
  SELECT ConsumerID
	,		MembershipNumber
	,	    Isnull(FirstName,FullName)+FamilyName [MemberName]
	,		FirstName
	,		CoalEsce(FullName,FirstName) FullName
	,       SecondName                                                   
	,       FamilyName                                                   
	,       UserID                                                       
	,       Gender
	,       CONVERT(VARCHAR(10), BirthDate, 101) BirthDate_Gre                  
	,       CONVERT(VARCHAR(100),BirthDate,131) BirthDate_Ar
	,      BirthDate                                                    
	,      AgeGroupID                                                   
	,      KnowECouponID                                                
	,      Address1                                                     
	,      Address2                                                     
	,      LTRIM(RTRIM(PrimaryMobile))  as PrimaryMobile                                               
	,      LTRIM(RTRIM(SecondaryMobile)) as SecondaryMobile                                              
	,      LTRIM(RTRIM(EmailID)) as EmailID
	,      FacebookID                                                   
    ,      CityID                      
    ,      CityID as UserSelectedCityID
	,      CountryID
	,      NationalityID
	,      ImageFile
	,      OtpID
	,      IsVerified                                                   
    ,      VerificationDate                    
	,      IsActive                      
	,      AcceptedTerms                                                
	,      HideApplicationTour
	,      IsFacebookUser                                               
	,      LoyaltyPoint                                                 
	,      RedeemPoint                                                  
	,      BalancePoint
	,      NotificationCount                                            
	,      MembershipNumber                                             
	,      NationalityID                                                
	,      IqamaNumber
	,      KnowECouponOthers                                            
	,      ISNULL(DeviceToken,0) [DeviceToken]                      
	,      ThirdName                      
	,      OccupationID                       
	,      JobNumber                       
	,      Organization                       
	,      MaritalStatusID                       
	,      FamilyMember                 
	,      IsMobileVerified                
	,      IsEmailVerified                       
	,      UserIdentityTypeID        
	,      UserIdentityNumber        
  FROM coc_ConsumerProfileEdit WITH(NOLOCK) WHERE ConsumerID = @RegistrationID
ELSE
  SELECT ConsumerID           
  ,      MembershipNumber                                             
  ,     Isnull(FirstName,FullName)+FamilyName [MemberName]                      
  ,      FirstName       
  ,      CoalEsce(FullName,FirstName) FullName     
  ,      SecondName                                                   
  ,      FamilyName                                                   
  ,      UserID                                                       
  ,      Gender                     
  ,      CONVERT(VARCHAR(10), BirthDate, 101) BirthDate_Gre                  
  ,      CONVERT(VARCHAR(100),BirthDate,131) BirthDate_Ar                                                      
  ,      BirthDate                                                    
  ,      AgeGroupID                                                   
  ,      KnowECouponID                                                
  ,      Address1                                                     
  ,      Address2                                                     
  ,      LTRIM(RTRIM(PrimaryMobile))  as PrimaryMobile                                               
  ,      LTRIM(RTRIM(SecondaryMobile)) as SecondaryMobile                                              
  ,      LTRIM(RTRIM(EmailID)) as EmailID                                                      
  ,      FacebookID                                                   
  ,      CityID                      
  ,      CityID as UserSelectedCityID                                                       
  ,      CountryID                                                    
  ,      NationalityID                                                
  ,      ImageFile                                                    
  ,      OtpID                                     
  ,      IsVerified                                                   
  ,      VerificationDate                    
  ,      IsActive                      
  ,      AcceptedTerms                                                
  ,      HideApplicationTour                                          
  ,      IsFacebookUser                                               
  ,      LoyaltyPoint                                                 
  ,      RedeemPoint                                                  
  ,      BalancePoint                                      
  ,      NotificationCount                                            
  ,      MembershipNumber                                             
  ,      NationalityID                                                
  ,      IqamaNumber                                                  
  ,      KnowECouponOthers                                            
  ,      ISNULL(DeviceToken,0)                   [DeviceToken]                      
  ,      ThirdName                      
  ,      OccupationID                       
  ,      JobNumber                       
  ,      Organization                       
  ,      MaritalStatusID                       
  ,      FamilyMember                 
  ,      IsMobileVerified                
  ,      IsEmailVerified                       
  ,      UserIdentityTypeID        
  ,      UserIdentityNumber        
  FROM [coc_Consumers] (NOLOCK)       
  WHERE  ConsumerID=@RegistrationID and IsActive=1 and IsDeleted=0    
 END
GO
/****** Object:  StoredProcedure [dbo].[cor_usp_GetConsumerProfileData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[cor_usp_GetConsumerProfileData]     
 @RegistrationID INTEGER     = NULL                
,@Email [Email]              = NULL                
,@Mobile [Mobile]            = NULL                
,@MembershipNumber [NullCode]= NULL                
,@TicketNo [NullDescription] = NULL                
,@UserID INTEGER              =NULL                
AS                
                
 SET NOCOUNT ON          
 DECLARE @AdminApprovalPending bit;    
 SET @AdminApprovalPending = 0;    
 DECLARE @AllowToEditProfile bit;-- set by default @AllowToEditProfile = 1      
 set @AllowToEditProfile = 1;      
 DECLARE @EServiceBarcodeID INTEGER                
                
 DECLARE @ConsumerID INTEGER                
                
 DECLARE @EServiceEventID INTEGER                
                
 DECLARE @CorporateID INTEGER                
                
 DECLARE @ServiceCorporateID INTEGER                
                
 DECLARE @LanguageID INTEGER                
  if (@UserID =0) set @UserID = null;              
 if @MembershipNumber = '0'                
                
  select @MembershipNumber = null                
                
 if @Email = ''                
                
  select @Email = null                
                
 SELECT @LanguageID =LanguageID                
 FROM coc_Languages (NOLOCK)               
 WHERE IsDefaultLanguage=1                
                
--validate consumer for profile edit      
print('>>>@RegistrationID: '+convert(varchar(100),@RegistrationID))      
if(@RegistrationID is not null and @RegistrationID  <> 0)      
  begin -- @RegistrationID null check if starts      
   Declare @ECouponID int = 0;      
   select top 1 @ECouponID = ECouponID from coc_ECouponParticipations  (NOLOCK) where ConsumerID = @RegistrationID order by ECouponParticipationID desc;      
 print('>>>@ECouponID: '+convert(varchar(100),@ECouponID))        
   if(@ECouponID <> 0)      
     begin-- @@ECouponID null check if starts      
       
 Declare @FinalDrawDate datetime;      
  select @FinalDrawDate = max(drawdate)  from coc_ECouponDraw  (NOLOCK) where ecouponid = @ECouponID;      
  print('>>>@FinalDrawDate: '+convert(varchar(100),@FinalDrawDate))        
  if(convert(date,getdate())<convert(date,@FinalDrawDate))      
  set @AllowToEditProfile = 0;      
      
  print('>>>@AllowToEditProfile: '+convert(varchar(100),@AllowToEditProfile))        
  end  -- @@ECouponID null check if ends      
      
  end -- @RegistrationID null check if ends      
      
 IF (@TicketNo IS NULL)                
                
 BEGIN                
   if exists(Select ConsumerID from coc_ConsumerProfileEdit (NOLOCK) where ConsumerID = @RegistrationID)    
    begin    
 SET @AdminApprovalPending = 1;    
  SELECT ConsumerID     
  ,      MembershipNumber                                       
  ,      FirstName+' '+SecondName+' '+FamilyName [MemberName]                
  ,      FirstName                                              
  ,      SecondName                                             
  ,      FamilyName                                             
  ,      UserID                                                 
  ,      Gender               
  ,      CONVERT(VARCHAR(10), BirthDate, 101) BirthDate_Gre            
  ,      CONVERT(VARCHAR(100),BirthDate,131) BirthDate_Ar                                                
  ,      BirthDate                                              
  ,      AgeGroupID                                             
  ,      KnowECouponID                                          
  ,      Address1                                               
  ,      Address2                                               
  ,      LTRIM(RTRIM(PrimaryMobile))  as PrimaryMobile                                         
  ,      LTRIM(RTRIM(SecondaryMobile)) as SecondaryMobile                                        
  ,      LTRIM(RTRIM(EmailID)) as EmailID                                                
  ,      FacebookID                
  ,      CityID                
  ,      CityID as UserSelectedCityID                                                 
  ,      CountryID  
  ,      (Select CountryID from coc_Consumers where ConsumerID=@RegistrationID) as ConsumerCountryID
  ,      NationalityID                                          
  ,      ImageFile                                              
  ,      OtpID                               
  ,      IsVerified                                             
  ,      VerificationDate              
  ,      IsActive                
  ,      AcceptedTerms                                          
  ,      HideApplicationTour                                    
  ,      IsFacebookUser                                         
  ,      LoyaltyPoint                                           
  ,      RedeemPoint                                            
  ,      BalancePoint                                           
  ,      NotificationCount                                      
  ,      MembershipNumber                                       
  ,      NationalityID                                          
  ,      IqamaNumber                                            
  ,      KnowECouponOthers                                      
  ,      ISNULL(DeviceToken,0)                   [DeviceToken]                
  ,      ThirdName                
  ,      OccupationID                 
  ,      JobNumber                 
  ,      Organization                 
  ,      MaritalStatusID                 
  ,      FamilyMember           
  ,     IsMobileVerified          
  ,     IsEmailVerified               
  ,     @AllowToEditProfile AllowToEditProfile      
  ,     @AdminApprovalPending AdminApprovalPending  
  ,     UserIdentityTypeID  
  ,     UserIdentityNumber  
  FROM coc_ConsumerProfileEdit (NOLOCK)   WHERE ConsumerID=@RegistrationID    
    
  end    
    
   else -- fetch from orifinal table    
     begin    
  SELECT ConsumerID     
  ,      MembershipNumber                                       
  ,      FirstName+' '+SecondName+' '+FamilyName [MemberName]                
  ,      FirstName 
  ,      FullName
  ,      SecondName                                             
  ,      FamilyName                                             
  ,      UserID                                                 
  ,      Gender               
  ,      CONVERT(VARCHAR(10), BirthDate, 101) BirthDate_Gre            
  ,      CONVERT(VARCHAR(100),BirthDate,131) BirthDate_Ar                                                
  ,      BirthDate                                              
  ,      AgeGroupID                                             
  ,      KnowECouponID                                          
  ,      Address1                                               
  ,      Address2                                               
  ,      LTRIM(RTRIM(PrimaryMobile))  as PrimaryMobile                                         
  ,      LTRIM(RTRIM(SecondaryMobile)) as SecondaryMobile                                        
  ,      LTRIM(RTRIM(EmailID)) as EmailID                                                
  ,      FacebookID                                             
  ,      CityID                
  ,      CityID as UserSelectedCityID                                                 
  ,      CountryID                                              
  ,      NationalityID                                          
  ,      ImageFile                                              
  ,      OtpID                               
  ,      IsVerified                                             
  ,      VerificationDate              
  ,      IsActive                
  ,      AcceptedTerms                                          
  ,      HideApplicationTour                                    
  ,      IsFacebookUser                                         
  ,      LoyaltyPoint                                           
  ,      RedeemPoint                                            
  ,      BalancePoint                                
  ,      NotificationCount                                      
  ,      MembershipNumber                                       
  ,      NationalityID                                          
  ,      IqamaNumber                                            
  ,      KnowECouponOthers                                      
  ,      ISNULL(DeviceToken,0)                   [DeviceToken]                
  ,      ThirdName                
  ,      OccupationID                 
  ,      JobNumber                 
  ,      Organization                 
  ,      MaritalStatusID                 
  ,      FamilyMember           
  ,  IsMobileVerified          
  ,     IsEmailVerified               
  ,  @AllowToEditProfile AllowToEditProfile  
  , UserIdentityTypeID  
  , UserIdentityNumber  
  FROM [coc_Consumers] (NOLOCK)                
                
  WHERE (@RegistrationID IS NULL OR ConsumerID=@RegistrationID) AND                
                
   (@Email IS NULL OR EmailID=@Email) AND                
                
   (@Mobile IS NULL OR PrimaryMobile=@Mobile) AND                
                
   (@MembershipNumber IS NULL OR MembershipNumber=@MembershipNumber)                
   and IsDeleted = 0                
     end    
   -- added isDeleted condition on 5th Aug 2018         
       
 END                
                
 ELSE     
 BEGIN                
                
  SELECT @CorporateID=@UserID                
                
  --SELECT @CorporateID=CorporateID FROM coc_CorporateUsers(NOLOCK)CU WHERE CU.UserID=@UserID                
                
  SELECT @ServiceCorporateID=EB.CorporateID                
  FROM coc_EServiceBarcodes (NOLOCK) EB                
  WHERE EB.Barcode=@TicketNo                
                
                
                
  IF (@CorporateID=@ServiceCorporateID)                
                
  BEGIN                
                
   SELECT TOP 1 @EServiceBarcodeID=EServiceBarcodeID                
   FROM coc_EServiceBarcodes(NOLOCK)                
   WHERE Barcode=@TicketNo AND IsUsed=1                
                
                
                
   SELECT TT.ConsumerID                                            
   ,      CC.FirstName
   ,      CC.FullName
   ,      CC.EmailID                                               
   ,      FORMAT(EE.EventDate,'dd/MM/yyyy')         [EventDate]                
   ,      FORMAT(EE.PurchaseStartDate,'dd/MM/yyyy') [PurchaseStartDate]                
   ,      EE.PurchaseEndDate                                       
   ,      TT.EServiceEventID                                       
   ,      CC.PrimaryMobile                                         
   ,      EE.EventDescription                                      
   ,      EServiceBarcodeID                                        
   ,      TT.TicketID                                              
   ,      EL.EService                               [EventName]                
   ,      TT.CustomerName                                          
   ,      TT.CustomerMobile                                        
   ,      TT.Isprinted                                             
  ,  @AllowToEditProfile AllowToEditProfile                      
   FROM       coc_Tickets(NOLOCK)        TT                        
                
   INNER JOIN coc_EServiceEvents(NOLOCK) EE         ON TT.EServiceEventID=EE.EServiceEventID                
                
   INNER JOIN coc_EServiceLanguages      EL(NOLOCK) ON EE.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID                
                
   INNER JOIN coc_Consumers(NOLOCK)      CC         ON TT.ConsumerID=CC.ConsumerID                
                
   WHERE EServiceBarcodeID=@EServiceBarcodeID                
                
                
                
  END                
                
  ELSE BEGIN                
                
   SELECT TT.ConsumerID                                            
   ,      CC.FirstName  
   ,      CC.FullName
   ,      CC.EmailID                                               
   ,      FORMAT(EE.EventDate,'dd/MM/yyyy')         [EventDate]                
   ,      FORMAT(EE.PurchaseStartDate,'dd/MM/yyyy') [PurchaseStartDate]                
   ,      EE.PurchaseEndDate                                       
   ,      TT.EServiceEventID                                       
   ,      CC.PrimaryMobile                                         
   ,      EE.EventDescription                                      
   ,      EServiceBarcodeID                       
   ,      TT.TicketID                                              
   ,      EL.EService                               [EventName]                
   ,      TT.CustomerName                                          
   ,      TT.CustomerMobile                                        
   ,      ISNULL(DeviceToken,0)                     [DeviceToken]                
   ,  @AllowToEditProfile AllowToEditProfile                  
   FROM       coc_Tickets(NOLOCK)        TT                        
                
   INNER JOIN coc_EServiceEvents(NOLOCK) EE         ON TT.EServiceEventID=EE.EServiceEventID                
                
   INNER JOIN coc_EServiceLanguages      EL(NOLOCK) ON EE.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID                
                
   INNER JOIN coc_Consumers(NOLOCK)      CC         ON TT.ConsumerID=CC.ConsumerID                
                
   WHERE EServiceBarcodeID=0                
          
  END             
        
        
           END                
                
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[cor_usp_GetConsumers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[cor_usp_GetConsumers]   
 @RegistrationID INTEGER     = NULL              
,@Email [Email]              = NULL              
,@Mobile [Mobile]            = NULL              
,@MembershipNumber [NullCode]= NULL              
,@TicketNo [NullDescription] = NULL              
,@UserID INTEGER              =NULL              
AS              
              
 SET NOCOUNT ON        
 DECLARE @AdminApprovalPending bit;  
 SET @AdminApprovalPending = 0;  
 DECLARE @AllowToEditProfile bit;-- set by default @AllowToEditProfile = 1    
 set @AllowToEditProfile = 1;    
 DECLARE @EServiceBarcodeID INTEGER              
              
 DECLARE @ConsumerID INTEGER              
              
 DECLARE @EServiceEventID INTEGER              
              
 DECLARE @CorporateID INTEGER              
              
 DECLARE @ServiceCorporateID INTEGER              
              
 DECLARE @LanguageID INTEGER              
  if (@UserID =0) set @UserID = null;            
 if @MembershipNumber = '0'              
              
  select @MembershipNumber = null              
              
 if @Email = ''              
              
  select @Email = null              
              
 SELECT @LanguageID =LanguageID              
 FROM coc_Languages (NOLOCK)             
 WHERE IsDefaultLanguage=1              
              
--validate consumer for profile edit    
print('>>>@RegistrationID: '+convert(varchar(100),@RegistrationID))    
if(@RegistrationID is not null and @RegistrationID  <> 0)    
  begin -- @RegistrationID null check if starts    
   Declare @ECouponID int = 0;    
   select top 1 @ECouponID = ECouponID from coc_ECouponParticipations (NOLOCK) where ConsumerID = @RegistrationID order by ECouponParticipationID desc;    
 print('>>>@ECouponID: '+convert(varchar(100),@ECouponID))      
   if(@ECouponID <> 0)    
     begin-- @@ECouponID null check if starts    
     
 Declare @FinalDrawDate datetime;    
  select @FinalDrawDate = max(drawdate)  from coc_ECouponDraw (NOLOCK) where ecouponid = @ECouponID;    
  print('>>>@FinalDrawDate: '+convert(varchar(100),@FinalDrawDate))      
  if(convert(date,getdate())<convert(date,@FinalDrawDate))    
  set @AllowToEditProfile = 0;    
    
  print('>>>@AllowToEditProfile: '+convert(varchar(100),@AllowToEditProfile))      
  end  -- @@ECouponID null check if ends    
    
  end -- @RegistrationID null check if ends    
    
 IF (@TicketNo IS NULL)              
              
 BEGIN              
   if exists(Select ConsumerID from coc_ConsumerProfileEdit (NOLOCK) where ConsumerID = @RegistrationID)  
    begin  
 SET @AdminApprovalPending = 1;  
  SELECT ConsumerID   
  ,      MembershipNumber                                     
  ,      FirstName+' '+SecondName+' '+FamilyName [MemberName]              
  ,      FirstName                                            
  ,      SecondName                                           
  ,      FamilyName                                           
  ,      UserID                                               
  ,      Gender             
  ,      CONVERT(VARCHAR(10), BirthDate, 101) BirthDate_Gre          
  ,      CONVERT(VARCHAR(100),BirthDate,131) BirthDate_Ar                                              
  ,      BirthDate                                            
  ,      AgeGroupID                                           
  ,      KnowECouponID                                        
  ,      Address1                                             
  ,      Address2                                             
  ,      LTRIM(RTRIM(PrimaryMobile))  as PrimaryMobile                                       
  ,      LTRIM(RTRIM(SecondaryMobile)) as SecondaryMobile                                      
  ,      LTRIM(RTRIM(EmailID)) as EmailID                                              
  ,      FacebookID                                           
  ,      CityID              
  ,      CityID as UserSelectedCityID                                               
  ,      CountryID                                            
  ,      NationalityID                                        
  ,      ImageFile                                            
  ,      OtpID                             
  ,      IsVerified                                           
  ,      VerificationDate            
  ,      IsActive              
  ,      AcceptedTerms                                        
  ,      HideApplicationTour                                  
  ,      IsFacebookUser                                       
  ,      LoyaltyPoint                                         
  ,      RedeemPoint                                          
  ,      BalancePoint                                         
  ,      NotificationCount                                    
  ,      MembershipNumber                                     
  ,      NationalityID                                        
  ,      IqamaNumber                                          
  ,      KnowECouponOthers                                    
  ,      ISNULL(DeviceToken,0)                   [DeviceToken]              
  ,      ThirdName              
  ,      OccupationID               
  ,      JobNumber               
  ,      Organization               
  ,      MaritalStatusID               
  ,      FamilyMember         
  ,  IsMobileVerified        
  ,     IsEmailVerified             
  ,  @AllowToEditProfile AllowToEditProfile    
  ,@AdminApprovalPending AdminApprovalPending
  ,     UserIdentityTypeID
  ,     UserIdentityNumber
  FROM coc_ConsumerProfileEdit (NOLOCK)   WHERE ConsumerID=@RegistrationID  
  
  end  
  
   else -- fetch from orifinal table  
     begin  
  SELECT ConsumerID   
  ,      MembershipNumber                                     
  ,      FirstName+' '+SecondName+' '+FamilyName [MemberName]              
  ,      FirstName                                            
  ,      SecondName                                           
  ,      FamilyName                                           
  ,      UserID                                               
  ,      Gender             
  ,      CONVERT(VARCHAR(10), BirthDate, 101) BirthDate_Gre          
  ,      CONVERT(VARCHAR(100),BirthDate,131) BirthDate_Ar                                              
  ,      BirthDate                                            
  ,      AgeGroupID                                           
  ,      KnowECouponID                                        
  ,      Address1                                             
  ,      Address2                                             
  ,      LTRIM(RTRIM(PrimaryMobile))  as PrimaryMobile                                       
  ,      LTRIM(RTRIM(SecondaryMobile)) as SecondaryMobile                                      
  ,      LTRIM(RTRIM(EmailID)) as EmailID                                              
  ,      FacebookID                                           
  ,      CityID              
  ,      CityID as UserSelectedCityID                                               
  ,      CountryID                                            
  ,      NationalityID                                        
  ,      ImageFile                                            
  ,      OtpID                             
  ,      IsVerified                                           
  ,      VerificationDate            
  ,      IsActive              
  ,      AcceptedTerms                                        
  ,      HideApplicationTour                                  
  ,      IsFacebookUser                                       
  ,      LoyaltyPoint                                         
  ,      RedeemPoint                                          
  ,      BalancePoint                                         
  ,      NotificationCount                                    
  ,      MembershipNumber                                     
  ,      NationalityID                                        
  ,      IqamaNumber                                          
  ,      KnowECouponOthers                                    
  ,      ISNULL(DeviceToken,0)                   [DeviceToken]              
  ,      ThirdName              
  ,      OccupationID               
  ,      JobNumber               
  ,      Organization               
  ,      MaritalStatusID               
  ,      FamilyMember         
  ,  IsMobileVerified        
  ,     IsEmailVerified             
  ,  @AllowToEditProfile AllowToEditProfile  
  , UserIdentityTypeID
  , UserIdentityNumber
  FROM [coc_Consumers] (NOLOCK)              
              
  WHERE (@RegistrationID IS NULL OR ConsumerID=@RegistrationID) AND              
              
   (@Email IS NULL OR EmailID=@Email) AND              
              
   (@Mobile IS NULL OR PrimaryMobile=@Mobile) AND              
              
   (@MembershipNumber IS NULL OR MembershipNumber=@MembershipNumber)              
   and IsDeleted = 0              
     end  
   -- added isDeleted condition on 5th Aug 2018       
     
 END              
              
 ELSE   
 BEGIN              
              
  SELECT @CorporateID=@UserID              
              
  --SELECT @CorporateID=CorporateID FROM coc_CorporateUsers(NOLOCK)CU WHERE CU.UserID=@UserID              
              
  SELECT @ServiceCorporateID=EB.CorporateID              
  FROM coc_EServiceBarcodes (NOLOCK) EB              
  WHERE EB.Barcode=@TicketNo              
              
              
              
  IF (@CorporateID=@ServiceCorporateID)              
              
  BEGIN              
              
   SELECT TOP 1 @EServiceBarcodeID=EServiceBarcodeID              
   FROM coc_EServiceBarcodes(NOLOCK)              
   WHERE Barcode=@TicketNo AND IsUsed=1              
              
              
              
   SELECT TT.ConsumerID                                          
   ,      CC.FirstName                                           
   ,      CC.EmailID                                             
   ,      FORMAT(EE.EventDate,'dd/MM/yyyy')         [EventDate]              
   ,      FORMAT(EE.PurchaseStartDate,'dd/MM/yyyy') [PurchaseStartDate]              
   ,      EE.PurchaseEndDate                                     
   ,      TT.EServiceEventID                                     
   ,      CC.PrimaryMobile                                       
   ,      EE.EventDescription                                    
   ,      EServiceBarcodeID                                      
   ,      TT.TicketID                                            
   ,      EL.EService                               [EventName]              
   ,      TT.CustomerName                                        
   ,      TT.CustomerMobile                                      
   ,      TT.Isprinted                                           
  ,  @AllowToEditProfile AllowToEditProfile                    
   FROM       coc_Tickets(NOLOCK)        TT                      
              
   INNER JOIN coc_EServiceEvents(NOLOCK) EE         ON TT.EServiceEventID=EE.EServiceEventID              
              
   INNER JOIN coc_EServiceLanguages      EL(NOLOCK) ON EE.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID              
              
   INNER JOIN coc_Consumers(NOLOCK)      CC         ON TT.ConsumerID=CC.ConsumerID              
              
   WHERE EServiceBarcodeID=@EServiceBarcodeID              
              
              
              
  END              
              
  ELSE BEGIN              
              
   SELECT TT.ConsumerID                                          
   ,      CC.FirstName                                           
   ,      CC.EmailID                                             
   ,      FORMAT(EE.EventDate,'dd/MM/yyyy')         [EventDate]              
   ,      FORMAT(EE.PurchaseStartDate,'dd/MM/yyyy') [PurchaseStartDate]              
   ,      EE.PurchaseEndDate                                     
   ,      TT.EServiceEventID                                     
   ,      CC.PrimaryMobile                                       
   ,      EE.EventDescription                                    
   ,      EServiceBarcodeID                                      
   ,      TT.TicketID                                            
   ,      EL.EService                               [EventName]              
   ,      TT.CustomerName                                        
   ,      TT.CustomerMobile                                      
   ,      ISNULL(DeviceToken,0)                     [DeviceToken]              
   ,  @AllowToEditProfile AllowToEditProfile                
   FROM       coc_Tickets(NOLOCK)        TT                      
              
   INNER JOIN coc_EServiceEvents(NOLOCK) EE         ON TT.EServiceEventID=EE.EServiceEventID              
              
   INNER JOIN coc_EServiceLanguages      EL(NOLOCK) ON EE.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID              
              
   INNER JOIN coc_Consumers(NOLOCK)      CC         ON TT.ConsumerID=CC.ConsumerID              
              
   WHERE EServiceBarcodeID=0              
        
  END           
      
      
           END              
              
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[cor_usp_GetConsumers_adminscreen]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[cor_usp_GetConsumers_adminscreen]     
 @Page INT = 1  
,@Size INT = 100  
,@RoleId int = 1  
AS                
 BEGIN               
 SET NOCOUNT ON          
 IF (@RoleId <> 1)  
   BEGIN  
   RETURN;  
   END  
      DECLARE @TotalCount int = 0;  
   SELECT @TotalCount  = COUNT(*) FROM coc_ConsumerProfileEdit (NOLOCK) WHERE IsActive=1;  
   SELECT ConsumerID     
  ,      MembershipNumber  
  ,      @TotalCount TotalCount   
  ,      FirstName+' '+SecondName+' '+FamilyName [MemberName]                
  ,      FirstName                                              
  ,      SecondName                                             
  ,      FamilyName                                             
  ,      UserID                                                 
  ,      Gender               
  ,      CONVERT(VARCHAR(10), BirthDate, 101) BirthDate_Gre            
  ,      CONVERT(VARCHAR(100),BirthDate,131) BirthDate_Ar                                                
  ,      BirthDate                                              
  ,      AgeGroupID                                             
  ,      KnowECouponID                                          
  ,      Address1                                               
  ,      Address2                                               
  ,      LTRIM(RTRIM(PrimaryMobile))  as PrimaryMobile                                         
  ,      LTRIM(RTRIM(SecondaryMobile)) as SecondaryMobile                                        
  ,      LTRIM(RTRIM(EmailID)) as EmailID                                                
  ,      FacebookID                                             
  ,      CityID                
  ,      CityID as UserSelectedCityID                                                 
  ,      CountryID                                              
  ,      NationalityID                                          
  ,      ImageFile                                              
  ,      OtpID                               
  ,      IsVerified                                             
  ,      VerificationDate              
  ,      IsActive                
  ,      AcceptedTerms                                          
  ,      HideApplicationTour                                    
  ,      IsFacebookUser                                         
  ,      LoyaltyPoint                                           
  ,      RedeemPoint                                            
  ,      BalancePoint                                           
  ,      NotificationCount                                      
  ,      MembershipNumber                                       
  ,      NationalityID                                          
  ,      IqamaNumber                                            
  ,      KnowECouponOthers                                      
  ,      ISNULL(DeviceToken,0) [DeviceToken]                
  ,      ThirdName                
  ,      OccupationID                 
  ,      JobNumber                 
  ,      Organization                 
  ,      MaritalStatusID                 
  ,      FamilyMember           
  ,  IsMobileVerified          
  ,     IsEmailVerified                 
  FROM coc_ConsumerProfileEdit (NOLOCK) --WHERE IsActive=1 
  ORDER BY ConsumerID DESC  
  OFFSET (@Page -1) * @Size ROWS  
  FETCH NEXT @Size ROWS ONLY;  
 END                              
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_coc_CheckParticpatedInVoucherPackage]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_coc_CheckParticpatedInVoucherPackage]               
 @VoucherPackageID bigint            
,@MobileNumber nvarchar(20)               
,@SpResponseStatus int  out                
AS                
 BEGIN                 
 set @SpResponseStatus=1;    
 Declare @ConsumerID int=0  


if exists(select * from coc_consumers(nolock) where PrimaryMobile=@MobileNumber and IsActive=1)  
Begin  
  Select @ConsumerID=ConsumerID from coc_consumers(nolock) where PrimaryMobile=@MobileNumber and IsActive=1  
if exists(select * from coc_core_VGP_Distributions(nolock) where VoucherPackageID=@VoucherPackageID and ConsumerID=@ConsumerID) 
and exists(select * from coc_core_Voucher_Gift_Package(nolock) where VoucherPackageID=@VoucherPackageID and isnull(ApplyRefferalCode,0)=0)
begin    
   Set @SpResponseStatus=0;                
end   
END  
End  
    
             
                
 SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[core_coc_CheckVoucherPackageReferralCode]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_coc_CheckVoucherPackageReferralCode]                 
 @VoucherPackageID bigint              
,@ReferralCode nvarchar(50)                 
,@SpResponseMessage nvarchar(500) out                  
AS                  
 BEGIN  
 if exists(select * from coc_core_VGP_RefferalCodes(nolock) where VoucherPackageID=@VoucherPackageID and VGPDistributionsID is null and RefferalCode=@ReferralCode)    
 begin    
     set @SpResponseMessage='true'  
 end  
 else if exists(select * from coc_core_VGP_RefferalCodes(nolock) where VoucherPackageID=@VoucherPackageID and RefferalCode=@ReferralCode)    
 begin  
    set @SpResponseMessage='ReferralCodeAlreadyUsed'  
 end  
 else  
 begin  
    set @SpResponseMessage='NoReferralCodeFound'  
 end  
End    
      
               
                  
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_coc_DistributePrivateVoucher]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_coc_DistributePrivateVoucher]           
  @EVoucherID int        
 ,@UploadType int        
 ,@MandatoryFieldID int=NULL        
,@ParticipationXML XML                       
,@InValidParticipationXML XML                
,@CorporateID int= NULL            
,@UploadedFileName nvarchar(500) =  NULL            
,@FileName nvarchar(500)         =  NULL            
,@NoOfRecordsInExcel bigint      =  NULL            
,@NoOfRecordsUploaded bigint     =  NULL    
,@CreatedBy int=NULL    
,@SpResponseStatus int            out            
,@SpResponseMessage nvarchar(max) out            
,@SpErrorDetails nvarchar(max)    out            
AS            
 BEGIN TRY            
 Set @SpResponseStatus=1;            
 Set @SpResponseMessage='Success';            
 Set @SpErrorDetails='Success';          
       
      
DECLARE @ServiceID INTEGER              
DECLARE @NotificationID INTEGER   
  
Declare @CorporateName nvarchar(200)  
Declare @ScheduleDate datetime= getdate()     
  --Declare @GenerateNotificationId bigint;          
Declare @NotificationSendID bigint;   
  
SELECT @ServiceID=EServiceID FROM coc_EVoucher(nolock)  WHERE EVoucherID=@EVoucherID              
SELECT @NotificationID=NotificationID FROM coc_Notifications(nolock) WHERE EServiceID=@ServiceID     
Select @CorporateName=(Case when CorporateName is null then isnull(FirstName,'')+' '+isnull(MiddleName,'')+' '+isnull(LastName,'') else CorporateName end) from coc_Corporates(nolock) where CorporateID=@CorporateID  
   
insert into coc_NotificationSends(NotificationID,SendingDate,SendingType,SearchCount,NotificationCount)    
         select @NotificationID, @ScheduleDate,4,0,0            
                   
 SELECT @NotificationSendID=SCOPE_IDENTITY()             
 insert into coc_NotificationSendLanguages(NotificationSendID,LanguageID,Subject,Message)   
        select  @NotificationSendID,1,'Congratulations','You have recieved a new voucher.'            
 insert into coc_NotificationSendLanguages(NotificationSendID,LanguageID,Subject,Message)   
         select  @NotificationSendID,2,N'Congratulations',N'You have recieved a new voucher.'      
  
      
declare @DistributeVoucherID bigint        
declare @Name nvarchar(100)        
declare @MobileNumber varchar(15)=NULL        
declare @EmailID nvarchar(100)=NULL        
declare @ConsumerID int=NULL        
declare @GuestID int=NULL        
declare @ECouponWinnerID bigint=NULL      
      
DECLARE @return_value int       
        
DECLARE @ReceivedDirectVouchers INTEGER          
  DECLARE @eServiceBarcodeID INTEGER              
  Declare @barcode nvarchar(100)        
  Declare @MessageText nvarchar(250)        
      
  DECLARE @PrivateVouchersTemp table (  
  CorporateName nvarchar(150),  
  Name           nvarchar(100) NOT NULL            
 ,Mobile         varchar(15) NULL            
 ,EmailID        nvarchar(100) NULL      
 ,Barcode nvarchar(100) not null      
 ,ConsumerID int null      
 ,GuestID int null)       
      
 if(@UploadType=1)      
 begin      
    -- excel upload      
 Declare  @ValidRecordsTemp table (         
  EVoucherID      int NOT NULL            
 ,Name           nvarchar(100) NOT NULL            
 ,Mobile         varchar(15) NULL            
 ,EmailID        nvarchar(100) NULL )          
         
 declare @AuditID bigint            
            
 insert into coc_DistributePrivateVoucherExcelAudit (FileName, Status, NoOfRecordsInExcel, NoOfRecordsUploaded, NoOfRecordsProcessed, UploadedBy, UploadedDate, UploadedFileName, CorporateID,UploadType,MandatoryFieldID )            
 select @FileName            
 ,1            
 ,@NoOfRecordsInExcel            
 ,@NoOfRecordsUploaded            
 ,0            
 ,NULL            
 ,getdate()            
 ,@UploadedFileName            
 ,@CorporateID        
 ,@UploadType        
 ,@MandatoryFieldID        
            
 set @AuditID=SCOPE_IDENTITY()            
            
            
 insert into @ValidRecordsTemp (EVoucherID, Name, Mobile, EmailID)            
 SELECT x.y.value('EVoucherID[1]', '[int]')    as  EVoucherID           
 ,x.y.value('Name[1]', 'nvarchar(100)')     as Name            
 ,x.y.value('Mobile[1]', 'varchar(15)')     as Mobile            
 ,x.y.value( 'EmailID[1]', 'VARCHAR(100)' ) AS EmailID              
 FROM @ParticipationXML.nodes('Participation/Details') x(y)            
            
            
 INSERT INTO coc_DistributePrivateVouchers (EVoucherID,Name,Mobile, EmailID,UploadDate, AuditID )             
 select EVoucherID            
 ,Name            
 ,Case When Mobile = '' then null else Mobile end              
 ,Case When EmailID = '' then null else EmailID end         
 ,getdate()        
 ,@AuditID            
 from @ValidRecordsTemp              
            
       
         
 DECLARE @DistributePrivateVouchersTemp table (         
  DistributeVoucherID      bigint NOT NULL         
 ,EVoucherID int not null        
 ,Name           nvarchar(100) NOT NULL            
 ,Mobile         varchar(15) NULL            
 ,EmailID        nvarchar(100) NULL)          
        
insert into @DistributePrivateVouchersTemp        
   select DistributeVoucherID,EVoucherID,Name,Mobile,EmailID from coc_DistributePrivateVouchers (NOLOCK) where AuditID=@AuditID        
        
        
WHILE exists(select * from @DistributePrivateVouchersTemp)                             
BEGIN      
  set @ConsumerID=NULL    
  set @GuestID=NULL    
 Select top 1 @DistributeVoucherID=DistributeVoucherID,@Name=Name,@MobileNumber=Mobile,@EmailID=EmailID from @DistributePrivateVouchersTemp         
        
 if exists(select * from coc_Consumers(nolock) where (PrimaryMobile=@MobileNumber and @MobileNumber is not null) or (EmailID=@EmailID and @EmailID is not null) and IsDeleted=0 and IsActive=1)        
 begin        
    select @ConsumerID=ConsumerID from coc_Consumers(nolock) where (PrimaryMobile=@MobileNumber and @MobileNumber is not null) or (EmailID=@EmailID and @EmailID is not null) and IsDeleted=0 and IsActive=1        
 end        
        
 if(@ConsumerID is null and exists(select * from coc_Guests(nolock) where (PrimaryMobile=@MobileNumber and @MobileNumber is not null) or (EmailID=@EmailID and @EmailID is not null) and IsActive=1))        
 begin        
   select @GuestID=GuestID from coc_Guests(nolock) where (PrimaryMobile=@MobileNumber and @MobileNumber is not null) or (EmailID=@EmailID and @EmailID is not null) and IsActive=1        
 end        
        
 if(@ConsumerID is null and @GuestID is null)        
 begin        
 INSERT INTO coc_Guests(FullName,PrimaryMobile,EmailID,IsActive,AddDate)          
   VALUES(@Name,@MobileNumber,@EmailID,1,GETDATE())          
          
   SET @GuestID=SCOPE_IDENTITY();          
        
 end        
  set @ReceivedDirectVouchers =0          
  set @eServiceBarcodeID =0              
  set @barcode=''        
  set @MessageText=''        
        
 if(@ConsumerID is not null)        
 begin        
              
 SELECT @ReceivedDirectVouchers=Count(*) FROM coc_EServiceBarcodes(nolock)  WHERE NotificationID=@NotificationID           
 AND ConsumerID =@ConsumerID AND IsDirectVoucher = 1 and  ISNULL(IsUsed,0)=0            
         
 if @ReceivedDirectVouchers > 0              
 SELECT @MessageText = 'You have already received a direct voucher'              
 ELSE              
 BEGIN              
              
  SELECT TOP 1 @eServiceBarcodeID = EServiceBarcodeID, @barcode =Barcode FROM coc_EServiceBarcodes(nolock) WHERE NotificationID=@NotificationID   AND EVoucherID IS NULL              
  if @eServiceBarcodeID is null              
   SELECT @MessageText = 'Sorry there are no more vouchers available for this type'              
  ELSE              
  BEGIN              
   UPDATE top (1) coc_EServiceBarcodes SET              
    ConsumerID = @ConsumerID              
    , GuestID = @GuestID              
    , EVoucherID = @EVoucherID              
    , IsDirectVoucher = 1 WHERE EServiceBarcodeID = @eServiceBarcodeID           
         
  insert into @PrivateVouchersTemp        
     select @CorporateName,@Name,@MobileNumber,@EmailID,@barcode,@ConsumerID,0        
                       
   EXEC @return_value = [dbo].[SaveNotificationForConsumer]               
       @TemplateID=NULL,              
       @MessageTitleText = "New Voucher",              
       @MessageText = "Dear @name, You have received new voucher from @corporate. The barcode is @barcode",              
       @ConsumerID = @ConsumerID,              
       @EServiceID = @ServiceID,              
       @Barcode = @barcode          
         
 -- send push notification code        
        
  --insert into coc_GeneralNotification             
    --select @ScheduleDate,@ScheduleDate,1,1, convert(varchar, @ScheduleDate,121),@CreatedBy,0,1          
       --SELECT @GenerateNotificationId=SCOPE_IDENTITY()     
      
      
    insert into coc_ConsumerNotifications(NotificationSendID,ConsumerID,SendDate,HasChecked,IsPushed,SendPushNotification)    
             select @NotificationSendID,@ConsumerID,getdate(),0,0,1    
      
              
   SELECT @MessageText='Your request has been processed successfully'              
 END                   
END        
end        
        
if(@GuestID is not null)        
begin        
    SELECT @ReceivedDirectVouchers=Count(*) FROM coc_EServiceBarcodes(nolock)  WHERE NotificationID=@NotificationID           
 AND GuestID =@GuestID AND IsDirectVoucher = 1 and  ISNULL(IsUsed,0)=0            
         
 if @ReceivedDirectVouchers > 0              
 SELECT @MessageText = 'You have already received a direct voucher'              
 ELSE              
 BEGIN     
     
 SELECT TOP 1 @eServiceBarcodeID = EServiceBarcodeID, @barcode =Barcode FROM coc_EServiceBarcodes(nolock) WHERE NotificationID=@NotificationID   AND EVoucherID IS NULL              
  if @eServiceBarcodeID is null              
   SELECT @MessageText = 'Sorry there are no more vouchers available for this type'              
  ELSE              
  BEGIN              
              
              
 UPDATE top (1) coc_EServiceBarcodes SET ConsumerID = @ConsumerID              
    , GuestID = @GuestID              
    , EVoucherID = @EVoucherID              
 , IsDirectVoucher = 1              
   WHERE EServiceBarcodeID = @eServiceBarcodeID             
         
  insert into @PrivateVouchersTemp        
      select @CorporateName,@Name,@MobileNumber,@EmailID,@barcode,0,@GuestID        
              
   SELECT @MessageText='Your request has been processed successfully'              
 END                   
END        
end        
        
update coc_DistributePrivateVouchers set Message=@MessageText,ConsumerID=@ConsumerID,GuestID=@GuestID where DistributeVoucherID=@DistributeVoucherID        
        
        
 delete @DistributePrivateVouchersTemp where DistributeVoucherID=@DistributeVoucherID         
END          
        
        
Select CorporateName,Name,Mobile,EmailID,Barcode,ConsumerID,GuestID from @PrivateVouchersTemp       
      
 end      
 else      
 begin      
    -- competition winners      
      
  Declare  @WinnersTemp table (ECouponWinnerID   bigint NOT NULL)          
         
            
 insert into @WinnersTemp (ECouponWinnerID)            
 SELECT x.y.value('ECouponWinnerID[1]', '[bigint]')    as  ECouponWinnerID              
 FROM @ParticipationXML.nodes('Participation/Details') x(y)            
            
            
 INSERT INTO coc_DistributePrivateVouchers (EVoucherID,Name,Mobile, EmailID,UploadDate,ECouponWinnerID)             
 select @EVoucherID            
 ,(select ConsumerName from coc_ECouponWinners(nolock) where ECouponWinnerID=wt.ECouponWinnerID)            
 ,(select MobileNumber from coc_ECouponWinners(nolock) where ECouponWinnerID=wt.ECouponWinnerID)              
 ,(select Email from coc_ECouponWinners(nolock) where ECouponWinnerID=wt.ECouponWinnerID)            
 ,getdate()        
 ,wt.ECouponWinnerID            
 from @WinnersTemp wt              
            
          
         
 DECLARE @DistributePrivateVouchersTemp2 table (         
  DistributeVoucherID      bigint NOT NULL         
 ,EVoucherID int not null       
 ,ECouponWinnerID bigint null      
 ,Name           nvarchar(100) NOT NULL            
 ,Mobile         varchar(15) NULL            
 ,EmailID        nvarchar(100) NULL)          
        
insert into @DistributePrivateVouchersTemp2        
   select DistributeVoucherID,EVoucherID,ECouponWinnerID,Name,Mobile,EmailID from coc_DistributePrivateVouchers (NOLOCK) where EVoucherID=@EVoucherID and ECouponWinnerID in(select ECouponWinnerID from @WinnersTemp)        
        
WHILE exists(select * from @DistributePrivateVouchersTemp2)                             
BEGIN       
      
 Set @ConsumerID=NULL    
 Set @GuestID=NULL    
 Select top 1 @DistributeVoucherID=DistributeVoucherID,@Name=Name,@MobileNumber=Mobile,@EmailID=EmailID,@ECouponWinnerID=ECouponWinnerID from @DistributePrivateVouchersTemp2         
        
  select @ConsumerID=ConsumerID,@GuestID=GuestID from coc_ECouponWinners(nolock) where ECouponWinnerID=@ECouponWinnerID      
        
  set @ReceivedDirectVouchers =0          
  set @eServiceBarcodeID =0              
  set @barcode=''        
  set @MessageText=''     
      
 if(@ConsumerID is not null)        
 begin        
              
 SELECT @ReceivedDirectVouchers=Count(*) FROM coc_EServiceBarcodes(nolock)  WHERE NotificationID=@NotificationID           
 AND ConsumerID =@ConsumerID AND IsDirectVoucher = 1 and  ISNULL(IsUsed,0)=0            
         
 if @ReceivedDirectVouchers > 0              
 SELECT @MessageText = 'You have already received a direct voucher'              
 ELSE              
 BEGIN              
              
  SELECT TOP 1 @eServiceBarcodeID = EServiceBarcodeID, @barcode =Barcode FROM coc_EServiceBarcodes(nolock) WHERE NotificationID=@NotificationID   AND EVoucherID IS NULL              
  if @eServiceBarcodeID is null              
   SELECT @MessageText = 'Sorry there are no more vouchers available for this type'              
  ELSE              
  BEGIN              
   UPDATE top (1) coc_EServiceBarcodes SET              
    ConsumerID = @ConsumerID              
    , GuestID = @GuestID              
    , EVoucherID = @EVoucherID              
    , IsDirectVoucher = 1 WHERE EServiceBarcodeID = @eServiceBarcodeID           
         
  insert into @PrivateVouchersTemp        
      select @CorporateName,@Name,@MobileNumber,@EmailID,@barcode,@ConsumerID,0        
               
  if(@ConsumerID is not null)    
  begin    
    EXEC @return_value = [dbo].[SaveNotificationForConsumer]               
     @TemplateID=NULL,              
     @MessageTitleText = "New Voucher",              
     @MessageText = "Dear @name, You have received new voucher from @corporate. The barcode is @barcode",              
     @ConsumerID = @ConsumerID,              
     @EServiceID = @ServiceID,              
     @Barcode = @barcode     
    
-- send push notification code          
  --insert into coc_GeneralNotification             
   --select @ScheduleDate,@ScheduleDate,1,1, convert(varchar,@ScheduleDate,121),@CreatedBy,0,1          
          
   --SELECT @GenerateNotificationId=SCOPE_IDENTITY()          
     
    insert into coc_ConsumerNotifications(NotificationSendID,ConsumerID,SendDate,HasChecked,IsPushed,SendPushNotification)    
             select @NotificationSendID,@ConsumerID,getdate(),0,0,1    
    
  end    
   SELECT @MessageText='Your request has been processed successfully'              
 END                   
END        
end        
        
if(@GuestID is not null)        
begin        
    SELECT @ReceivedDirectVouchers=Count(*) FROM coc_EServiceBarcodes(nolock)  WHERE NotificationID=@NotificationID           
 AND GuestID =@GuestID AND IsDirectVoucher = 1 and  ISNULL(IsUsed,0)=0            
         
 if @ReceivedDirectVouchers > 0              
 SELECT @MessageText = 'You have already received a direct voucher'              
 ELSE              
 BEGIN              
             
              
              
  SELECT TOP 1 @eServiceBarcodeID = EServiceBarcodeID, @barcode =Barcode FROM coc_EServiceBarcodes(nolock) WHERE NotificationID=@NotificationID   AND EVoucherID IS NULL              
  if @eServiceBarcodeID is null              
   SELECT @MessageText = 'Sorry there are no more vouchers available for this type'              
  ELSE              
  BEGIN              
              
              
 UPDATE top (1) coc_EServiceBarcodes SET ConsumerID = @ConsumerID              
    , GuestID = @GuestID              
    , EVoucherID = @EVoucherID              
 , IsDirectVoucher = 1              
   WHERE EServiceBarcodeID = @eServiceBarcodeID             
         
  insert into @PrivateVouchersTemp        
      select @CorporateName,@Name,@MobileNumber,@EmailID,@barcode,0,@GuestID        
              
   SELECT @MessageText='Your request has been processed successfully'              
 END                   
END        
end        
        
update coc_DistributePrivateVouchers set Message=@MessageText,ConsumerID=@ConsumerID,GuestID=@GuestID where DistributeVoucherID=@DistributeVoucherID        
        
        
 delete @DistributePrivateVouchersTemp2 where DistributeVoucherID=@DistributeVoucherID         
END         
        
        
Select CorporateName,Name,Mobile,EmailID,Barcode,ConsumerID,GuestID from @PrivateVouchersTemp       
 end      
          
        
        
 END TRY            
            
 BEGIN CATCH            
            
 Set @SpResponseStatus=0;               
 Set @SpResponseMessage='GenericError';                 
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                
 END CATCH            
            
 SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[core_coc_DistributeVoucherPackage]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_coc_DistributeVoucherPackage]                     
 @VoucherPackageID bigint                  
,@ConsumerID int       
,@ReferralCode nvarchar(250)=NULL 
,@InstantGift int
,@UserID int=NULL           
,@VGPDistributionsID bigint out          
,@SpResponseStatus int  out                      
,@SpResponseMessage nvarchar(max) out                      
,@SpErrorDetails nvarchar(max) out                      
AS                      
 BEGIN TRY  
 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
 set @VGPDistributionsID=0;  
 if(@ReferralCode='0' or @ReferralCode='')      
 begin      
   set @ReferralCode=NULL      
 end    
 if(@VoucherPackageID is null or @VoucherPackageID=0)        
 begin        
    Set @SpResponseStatus=0;                      
   Set @SpResponseMessage='GenericError';                      
   Set @SpErrorDetails='GenericError';           
   return;         
 end        
        
if @VoucherPackageID not in (7,8)
begin
if exists(select VoucherPackageID from coc_core_VGP_Distributions where VoucherPackageID=@VoucherPackageID and ConsumerID=@ConsumerID)   
and exists(select VoucherPackageID from coc_core_Voucher_Gift_Package where VoucherPackageID=@VoucherPackageID and isnull(ApplyRefferalCode,0)=0)         
begin          
   Set @SpResponseStatus=0;                      
   Set @SpResponseMessage='Already Participated';                      
   Set @SpErrorDetails='Already Participated';           
   return;          
end        
end      
if(@ReferralCode is not null and exists(select VoucherPackageID from coc_core_VGP_RefferalCodes where VoucherPackageID=@VoucherPackageID and RefferalCode=@ReferralCode and VGPDistributionsID is not null))          
begin          
   Set @SpResponseStatus=0;                      
   Set @SpResponseMessage='Referral code is already used';                      
   Set @SpErrorDetails='Referral code is already used';           
   return;          
end         
    
DECLARE @ReceivedDirectVouchers INTEGER                    
DECLARE @eServiceBarcodeID INTEGER                        
Declare @barcode nvarchar(100)                  
Declare @MessageText nvarchar(250)            
    
Declare @EVoucherID int=NULL     
DECLARE @ServiceID INTEGER                        
DECLARE @NotificationID INTEGER           
Declare @CorporateID int         
    
  set @ReceivedDirectVouchers =0                    
  set @eServiceBarcodeID =0                        
  set @barcode=''                  
  set @MessageText=''



DECLARE @EVoucherTemp Table (EVoucherID bigint)   
insert into @EVoucherTemp
  select VoucherID from coc_core_VGP_Vouchers vgpv where vgpv.VoucherPackageID=@VoucherPackageID
  
SELECT TOP 1 @eServiceBarcodeID = eb.EServiceBarcodeID, @barcode =eb.Barcode,@EVoucherID=ev.EVoucherID,@ServiceID=ns.EServiceID,@NotificationID=ns.NotificationID FROM coc_EServiceBarcodes eb    
inner join coc_Notifications ns on ns.NotificationID=eb.NotificationID    
inner join coc_EVoucher ev on ev.EServiceID=ns.EServiceID    
WHERE eb.EVoucherID IS NULL and ev.EVoucherID in  (select EVoucherID from @EVoucherTemp)   
ORDER BY NEWID()     
        
--SELECT top 1 @EVoucherID=VoucherID FROM coc_core_VGP_Vouchers  vgpv        
-- inner join coc_evoucher ev on ev.EVoucherID=vgpv.VoucherID        
-- inner join coc_Notifications ns on ns.EServiceID=ev.EServiceID        
--where VoucherPackageID=@VoucherPackageID and        
--((select count(*) from coc_EServiceBarcodes where NotificationID=NS.NotificationID and EVoucherID is null)>0)        
--ORDER BY NEWID()          
        
if (@EVoucherID is null or @EVoucherID=0)          
begin          
   Set @SpResponseStatus=0;                      
   Set @SpResponseMessage='No voucher found';                      
   Set @SpErrorDetails='No voucher found';           
   return;          
end          
        
        
Set @SpResponseStatus=1;                      
Set @SpResponseMessage='Success';                      
Set @SpErrorDetails='Success';            
           
Declare @CorporateName nvarchar(200)            
Declare @ScheduleDate datetime= getdate()               
  --Declare @GenerateNotificationId bigint;                    
Declare @NotificationSendID bigint;             
            
          
select @CorporateID=CorporateID from coc_eservices where eserviceid=@ServiceID                   
Select @CorporateName=(Case when CorporateName is null then isnull(FirstName,'')+' '+isnull(MiddleName,'')+' '+isnull(LastName,'') else CorporateName end) from coc_Corporates where CorporateID=@CorporateID            
             
               
                   
declare @Name nvarchar(100)                  
declare @MobileNumber varchar(15)=NULL                  
declare @EmailID nvarchar(100)=NULL                  
declare @GuestID int=NULL                 
                
 DECLARE @return_value int                 
                  
                 
                  
  Select @Name=(case when FullName is null then isnull(firstname,'')+isnull(SecondName,'')+isnull(FamilyName,'') else fullname end),          
  @MobileNumber=PrimaryMobile,@EmailID=EmailID from coc_consumers where consumerid=@ConsumerID           
            
                  
              
                
 if(@ConsumerID is not null)                  
 begin                  
                        
 SELECT @ReceivedDirectVouchers=Count(*) FROM coc_EServiceBarcodes  WHERE NotificationID=@NotificationID                     
 AND ConsumerID =@ConsumerID AND IsDirectVoucher = 1 and  ISNULL(IsUsed,0)=0                      
                   
 if @ReceivedDirectVouchers > 0  and exists(select * from coc_core_Voucher_Gift_Package where VoucherPackageID=@VoucherPackageID and isnull(ApplyRefferalCode,0)=0)                      
 begin
 Set @MessageText = 'You have already received a direct voucher';
  Set @SpResponseStatus=1;                      
  Set @SpResponseMessage=@MessageText;                      
  Set @SpErrorDetails='Success';
  return;
 end
 ELSE                        
 BEGIN                        
                        
  --SELECT TOP 1 @eServiceBarcodeID = EServiceBarcodeID, @barcode =Barcode FROM coc_EServiceBarcodes WHERE NotificationID=@NotificationID   AND EVoucherID IS NULL                        
  if @eServiceBarcodeID is null  
  begin
   SELECT @MessageText = 'Sorry there are no more vouchers available for this type'   
   Set @SpResponseStatus=1;                      
   Set @SpResponseMessage=@MessageText;                      
   Set @SpErrorDetails='Success';
   return;
  end
  ELSE                        
  BEGIN                 
    if @InstantGift=1
	begin
	   Declare @EServiceExternalBarcodeID bigint=NULL
	   Declare @BarcodeEServiceID int=0
	   Select @BarcodeEServiceID=EServiceID from coc_Ecoupons(nolock) where ECouponID in
	   (select top 1 ECouponID from coc_ECouponParticipations(nolock) where Barcode=@ReferralCode order by ECouponParticipationID desc)
	    Select top 1 @barcode=ExternalBarcode, @EServiceExternalBarcodeID=EServiceExternalBarcodeID from coc_EServiceExternalBarcodes(nolock) where EServiceID=@BarcodeEServiceID and IsUsed=0 and isnull(EServiceBarcodeID,0)=0 order by rand()
		if isnull(@EServiceExternalBarcodeID,0)>0
		    update coc_EServiceExternalBarcodes set IsUsed=1,EServiceBarcodeID=@eServiceBarcodeID  where EServiceExternalBarcodeID=@EServiceExternalBarcodeID
	end
   UPDATE top (1) coc_EServiceBarcodes SET                        
    ConsumerID = @ConsumerID                        
    , GuestID = @GuestID                        
    , EVoucherID = @EVoucherID                        
    , IsDirectVoucher = 1 WHERE EServiceBarcodeID = @eServiceBarcodeID                     
                   
  insert into coc_core_VGP_Distributions(VoucherPackageID,ConsumerID,DistributionDate,VoucherID,EServiceBarcodeID,CreatedOn,CreatedBy)                  
      select @VoucherPackageID,@ConsumerID,getdate(),@EVoucherID,@eServiceBarcodeID,getdate(),@UserID          
   Set @VGPDistributionsID=SCOPE_IDENTITY()       
	 if(@ReferralCode is not null)      
	 begin      
		update coc_core_VGP_RefferalCodes set VGPDistributionsID=@VGPDistributionsID,UpdatedBy=@UserID,UpdatedOn=getdate() where VoucherPackageID=@VoucherPackageID and RefferalCode=@ReferralCode      
	 end      
        
 insert into coc_NotificationSends(NotificationID,SendingDate,SendingType,SearchCount,NotificationCount)              
         select @NotificationID, @ScheduleDate,4,0,0                      
                             
 SELECT @NotificationSendID=SCOPE_IDENTITY()                       
 insert into coc_NotificationSendLanguages(NotificationSendID,LanguageID,Subject,Message)             
        select  @NotificationSendID,1,'Congratulations','You have recieved a new voucher please open eCopon app to check'                      
 insert into coc_NotificationSendLanguages(NotificationSendID,LanguageID,Subject,Message)             
         select  @NotificationSendID,2,N'Congratulations',N'You have recieved a new voucher please open eCopon app to check'     
    
  insert into coc_ConsumerNotifications(NotificationSendID,ConsumerID,SendDate,HasChecked,IsPushed,SendPushNotification)              
             select @NotificationSendID,@ConsumerID,getdate(),0,0,1 
	Declare @NotificationMsg nvarchar(1000)='Dear @name, You have received new voucher from @corporate. The barcode is @barcode'                       
	if @InstantGift=1
	begin
	   Set @NotificationMsg ='Dear @name, You have received new voucher from @corporate. The barcode is '+ @barcode                       
	end
    EXEC @return_value = [dbo].[SaveNotificationForConsumer]                              
	 @TemplateID=NULL,                        
     @MessageTitleText = "New Voucher",                        
     @MessageText = "Dear @name, You have received new voucher from @corporate. The barcode is @barcode",                        
     @ConsumerID = @ConsumerID,                        
     @EServiceID = @ServiceID,                        
     @Barcode = @barcode               
              
-- send push notification code                    
  --insert into coc_GeneralNotification                       
   --select @ScheduleDate,@ScheduleDate,1,1, convert(varchar,@ScheduleDate,121),@CreatedBy,0,1                    
                    
   --SELECT @GenerateNotificationId=SCOPE_IDENTITY()                    
             
   SELECT @MessageText='Your request has been processed successfully'       
   Set @SpResponseMessage=@MessageText
  END                             
 END                  
 end                  
                                   
 END TRY                      
                      
 BEGIN CATCH                      
 Set @VGPDistributionsID=0 ;                   
 Set @SpResponseStatus=0;                         
 Set @SpResponseMessage='GenericError';                           
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                          
 END CATCH                      
                      
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_coc_GetAllActiveCorporates]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  -- =============================================      
  
-- Author:  <Shaik Layeeqh>      
  
-- Create date: <Sept-19-2019>      
  
-- Description: GetAllActiveCorporates     
  
-- =============================================      
  
CREATE PROCEDURE [dbo].[core_coc_GetAllActiveCorporates]   
  
 @LanguageID int=1,           
  
 @UserID bigint=null,        
  
 @RoleID bigint=null,        
  
 @ImpersonationUserID bigint=null,        
  
 @SpResponseStatus int out,        
  
 @SpResponseMessage nvarchar(max) out,        
  
 @SpErrorDetails nvarchar(max)    out        
  
  AS    
  
  BEGIN TRY       
  
   if @LanguageID=0      
  
   begin      
  
   set @LanguageID=1      
  
   end      
  
  Set @SpResponseStatus=1;         
  
  Set @SpResponseMessage='Success';        
  
  Set @SpErrorDetails=NULL;        
  
  SELECT         
  
  CR.CorporateID,         
  
  (isnull(CR.FirstName,'')+' '+isnull(CR.CorporateName,'') ) FullName,      
  
  CR.EmailID,      
  
  iif(CR.CorporateName is null , CR.FirstName+' '+CR.CorporateName , CR.CorporateName)  as CorporateName      
  
 FROM coc_Corporates(NOLOCK) CR where CR.IsActive=1 and CR.CorporateName is not null      
  
    
  
  END TRY                    
  
  BEGIN CATCH             
  
 Set @SpResponseStatus=0;         
  
 Set @SpResponseMessage='GenericError';           
  
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorL
  
ine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';          
  
  END CATCH                    
  
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_coc_GetAllCompetitionNames]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_coc_GetAllCompetitionNames]          
 @CorporateID int = NULL ,           
 @LanguageID int=1,                 
 @UserID bigint=null,              
 @RoleID bigint=null,              
 @ImpersonationUserID bigint=null,              
 @SpResponseStatus int = null out,              
 @SpResponseMessage nvarchar(max) = null out,              
 @SpErrorDetails nvarchar(max) = null    out              
  AS          
  BEGIN TRY             
  if(@CorporateID =0) set @CorporateID = null;      
   if @LanguageID=0            
   begin            
   set @LanguageID=1            
   end            
  Set @SpResponseStatus=1;               
  Set @SpResponseMessage='Success';              
  Set @SpErrorDetails=NULL;              
  select ec.ECouponID,esl.EService from coc_EServices(nolock) es               
 inner join coc_ECoupons(nolock) ec on es.EServiceID = ec.EServiceID              
 inner join coc_EServiceLanguages(nolock) esl on esl.EServiceID = es.EServiceID and esl.LanguageID = @LanguageID                
 where -- es.IsActive = 1 and Convert(date,es.ToDate) >= Convert(date,GETDATE()) and         
 es.IsActive = 1  and (@CorporateID is null or es.CorporateID=@CorporateID) order by ec.ECouponID desc              
  END TRY                          
  BEGIN CATCH                   
 Set @SpResponseStatus=0;           
 Set @SpResponseMessage='GenericError';                 
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorL
ine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                
  END CATCH                          
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_coc_GetAllUploadParticipations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_coc_GetAllUploadParticipations]        
 @CorporateID int = NULL   
  AS        
  BEGIN          
     
     select UploadParticipationAuditID,CorporateID,UploadedFileName,FileName,NoOfRecordsInExcel,NoOfRecordsUploaded,UploadedDate,  
  (select count(*) from UploadParticipations(NOLOCK) where UploadParticipationAuditID=UploadParticipationAuditID and ECouponParticipationID is not null)NoOfRecordsProcessed,  
  (select UserName from coc_Users (NOLOCK) where userid=UploadedBy)UploadedBy,  
  (Case When (select count(*) from UploadParticipations(NOLOCK) where UploadParticipationAuditID=UploadParticipationAuditID and ECouponParticipationID is not null)>0 then 'Participated' else 'Not Participated' end )Status  
  from UploadParticipationAudit(NOLOCK) where CorporateID=@CorporateID order by UploadParticipationAuditID desc  
END  
   
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_coc_GetBannersList]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================        
    
-- Author:  <Shaik Layeeqh>        
    
-- Create date: <Oct-06-2019>        
    
-- Description: core_coc_GetBannersList       
    
-- =============================================        
    
CREATE PROCEDURE [dbo].[core_coc_GetBannersList]     
    
 @LanguageID int=1,             
    
 @UserID bigint=null,          
    
 @RoleID bigint=null,          
    
 @ImpersonationUserID bigint=null,          
    
 @SpResponseStatus int out,          
    
 @SpResponseMessage nvarchar(max) out,          
    
 @SpErrorDetails nvarchar(max)    out          
    
  AS      
  BEGIN TRY       
   if @LanguageID=0        
   begin      
   set @LanguageID=1      
   end        
    Select     
   BannerID    
  ,Title    
  ,Image    
  ,IsActive   
  ,[Order]  
  ,IsDeleted    
  ,CreatedBy    
  ,CreatedDate    
  ,ModifiedBy    
  ,ModifiedDate    
  From [dbo].[coc_Banner](Nolock) where IsActive=1 and IsDeleted=0  order by [Order] asc  
    Set @SpResponseStatus=1;           
 Set @SpResponseMessage='Success';      
 Set @SpErrorDetails=NULL;          
    
  END TRY                      
    
  BEGIN CATCH               
    
 Set @SpResponseStatus=0;           
    
 Set @SpResponseMessage='GenericError';             
    
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorL
ine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';            
    
  END CATCH                      
    
 SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[core_coc_GetCategoryData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_coc_GetCategoryData]   
 @CategoryID int   
AS    
 BEGIN     
      
    Select CategoryID,CategoryName,CategoryNameAR from coc_core_category(nolock)  where CategoryID=@CategoryID  
  
 select Convert(varchar(10),CONVERT(date,CreatedDate,106),103)  CreatedDate,   
 PromoCodeCount,FileName,Status,isnull(IsDownloaded,0) IsDownloaded,Convert(varchar(10),CONVERT(date,isnull(DownloadedDate,getdate()),106),103) DownloadedDate  
 from coc_core_PromoCodeBundle(nolock) where CategoryID=@CategoryID  
  
  
  End  
   
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_coc_GetCategoryList]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_coc_GetCategoryList]   
 @LanguageID int =  1    
AS    
 BEGIN     
      
    Select cc.CategoryID,  
     (Case when @LanguageID=2 then cc.CategoryNameAr else cc.CategoryName end)CategoryName,  
     Convert(varchar(10),CONVERT(date,cc.CreatedDate,106),103) as CreatedDate,   
  (select count(*) from coc_core_PromoCodes(nolock) where CategoryID=cc.CategoryID) TotalPromoCodes,  
  (select count(*) from coc_core_PromoCodes(nolock) where CategoryID=cc.CategoryID and IsUsed=1) UsedPromoCodes,  
  (select count(*) from coc_core_PromoCodes(nolock) where CategoryID=cc.CategoryID and ExpiryDate<getdate()) ExpiredPromoCodes,  
  (select count(*) from coc_core_PromoCodes(nolock) where CategoryID=cc.CategoryID and ExpiryDate>getdate() and IsUsed=0) AvailableBarcodes  
 from coc_core_category(nolock) cc  
  
    
  End  
   
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_coc_GetConfigParticipation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================        
-- Author:  <Shaik Layeeqh>        
-- Create date: <Sept-19-2019>        
-- Description: core_coc_GetConfigParticipation      
-- =============================================        
CREATE PROCEDURE [dbo].[core_coc_GetConfigParticipation]    
 @LanguageID int=1,             
 @UserID bigint=null,          
 @RoleID bigint=null,          
 @ImpersonationUserID bigint=null,          
 @SpResponseStatus int out,          
 @SpResponseMessage nvarchar(max) out,          
 @SpErrorDetails nvarchar(max)    out          
  AS      
  BEGIN TRY         
   if @LanguageID=0        
   begin        
   set @LanguageID=1        
   end        
    select [ConfigurationParticipationsID] as ConfigParticipationID,[ColumnName],[DisplayName],IsMandatory from coc_ConfigurationParticipations  (NOLOCK)   
 Set @SpResponseStatus=1;           
 Set @SpResponseMessage='Success';          
 Set @SpErrorDetails=NULL;       
  END TRY                      
  BEGIN CATCH               
 Set @SpResponseStatus=0;           
 Set @SpResponseMessage='GenericError';             
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorL
  
ine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';            
  END CATCH                      
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_coc_GetCorporateInformation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_coc_GetCorporateInformation]
@CorporateID INTEGER            =NULL  
,@UserID INTEGER                 =null  
,@LanguageID int                 =1  
,@RoleID bigint                  =null  
,@ImpersonationUserID bigint     =null  
,@SpResponseStatus int            out  
,@SpResponseMessage nvarchar(max) out  
,@SpErrorDetails nvarchar(max)    out  
AS  
 SET NOCOUNT ON  
 BEGIN TRY  
 IF (ISNULL(@CorporateID,0)>0)  
 BEGIN  
  SELECT CR.CorporateID  
  ,      CR.JCCICode  
  ,      CR.CRNumber  
  ,      CR.CorporateName  
  ,      CR.EmailID  
  ,      CR.MobileNumber  
  ,      CR.UserID  
  ,      CR.CountryID  
  ,      CR.BarcodePrefix  
  ,      CR.BarcodeSuffix  
  ,      CR.BarcodeLength  
  ,      CR.BarcodeTypeID  
  ,      CR.IsActive  
  FROM coc_Corporates(NOLOCK) CR  
  WHERE CR.CorporateID=@CorporateID  and CR.IsActive  = 1
 END  
 ELSE  
 BEGIN  
  SELECT CR.CorporateID  
  ,      CR.JCCICode  
  ,      CR.CRNumber  
  ,      CR.CorporateName  
  ,      CR.EmailID  
  ,      CR.MobileNumber  
  ,      CR.UserID  
  ,      CR.CountryID  
  ,      CR.BarcodePrefix  
  ,      CR.BarcodeSuffix  
  ,      CR.BarcodeLength  
  ,      CR.BarcodeTypeID  
  ,      CR.IsActive  
  FROM coc_Corporates(NOLOCK) CR    where CR.IsActive  = 1
 END  
 Set @SpResponseStatus=1;  
 Set @SpResponseMessage='Success';  
 Set @SpErrorDetails='Success';  
 END TRY  
 BEGIN CATCH  
  
 Set @SpResponseStatus=0;  
 Set @SpResponseMessage='GenericError';  
 Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';  
  
  
  
 END CATCH  
 SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[core_coc_GetCountryCode]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_coc_GetCountryCode]  
( 
 @CountryId int  
, @ErrorMessage varchar(10) OUTPUT  
--SELECT * FROM coc_Countries WHERE ISACTIVE = 1 AND COUNTRYID = @CountryId;  
--Declare @msg varchar(90);  
--EXEC USP_GETCOUNTRYCODE 108,@msg out  
)  
AS  
BEGIN  
  
 if Exists(SELECT CountryID,TelephoneCode,ValidationExpression,MobileNumberLength,PlaceHolderCode  
  FROM coc_Countries (NOLOCK)  
  WHERE ISACTIVE = 1 AND CountryID = @CountryId)  
 Begin  
  SELECT CountryID,TelephoneCode,ValidationExpression,MobileNumberLength,PlaceHolderCode 
  FROM coc_Countries  (NOLOCK)
  WHERE ISACTIVE = 1 AND CountryID = @CountryId;  
  SET @ErrorMessage = 1;  
 End  
 Else  
  SET @ErrorMessage =0;  
END  
GO
/****** Object:  StoredProcedure [dbo].[core_coc_GetEserviceNames]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  -- =============================================              
-- Author:  <Shaik Layeeqh>              
-- Create date: <Sept-19-2019>              
-- Description: Get Eservice Names               
-- =============================================              
CREATE PROCEDURE [dbo].[core_coc_GetEserviceNames]            
 @CorporateID int = NULL ,             
 @LanguageID int=1,                   
 @UserID bigint=null,                
 @RoleID bigint=null,                
 @ImpersonationUserID bigint=null,                
 @SpResponseStatus int = null out,                
 @SpResponseMessage nvarchar(max) = null out,                
 @SpErrorDetails nvarchar(max) = null    out                
  AS            
  BEGIN TRY               
  if(@CorporateID =0) set @CorporateID = null;        
   if @LanguageID=0              
   begin              
   set @LanguageID=1              
   end              
  Set @SpResponseStatus=1;                 
  Set @SpResponseMessage='Success';                
  Set @SpErrorDetails=NULL;                
  select ec.ECouponID,
  (case when cs.CompetitionOrderNumber is not null then esl.EService +'-'+ cs.CompetitionOrderNumber
 else esl.EService end) as EService 
  from coc_EServices es  (NOLOCK)               
 inner join coc_ECoupons ec (NOLOCK) on es.EServiceID = ec.EServiceID                
 inner join coc_EServiceLanguages esl (NOLOCK) on esl.EServiceID = es.EServiceID and esl.LanguageID = @LanguageID                  
 left join coc_competition_staging cs (NOLOCK) on cs.CompetitionId = ec.ECouponID
 where           
 -- es.IsActive = 1 and Convert(date,es.ToDate) >= Convert(date,GETDATE()) and           
 es.IsActive = 1 and 
 --ec.IsShowMobile = 1 and           
 (@CorporateID is null or es.CorporateID=@CorporateID) order by ec.ECouponID desc                
        
  END TRY                            
  BEGIN CATCH                     
 Set @SpResponseStatus=0;                 
 Set @SpResponseMessage='GenericError';                   
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                  
        
          
        
  END CATCH                            
        
          
        
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_coc_GetEserviceNamesForExternalBarcodes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[core_coc_GetEserviceNamesForExternalBarcodes]              
 @CorporateID int = NULL ,               
 @LanguageID int=1,                     
 @UserID bigint=null,                  
 @RoleID bigint=null,                  
 @ImpersonationUserID bigint=null,                  
 @SpResponseStatus int = null out,                  
 @SpResponseMessage nvarchar(max) = null out,                  
 @SpErrorDetails nvarchar(max) = null    out                  
  AS              
  BEGIN TRY                 
  if(@CorporateID =0) set @CorporateID = null;          
   if @LanguageID=0                
   begin                
   set @LanguageID=1                
   end                
  Set @SpResponseStatus=1;                   
  Set @SpResponseMessage='Success';                  
  Set @SpErrorDetails=NULL;                  
  select ec.ECouponID,esl.EService from coc_EServices es  (NOLOCK)                 
 inner join coc_ECoupons ec (NOLOCK) on es.EServiceID = ec.EServiceID                  
 inner join coc_EServiceLanguages esl (NOLOCK) on esl.EServiceID = es.EServiceID and esl.LanguageID = @LanguageID                    
 where             
 es.IsActive = 1 and Convert(date,es.ToDate) >= Convert(date,GETDATE()) and  es.AllowExternalBarcode=1  and          
 --ec.IsShowMobile = 1 and             
 (@CorporateID is null or es.CorporateID=@CorporateID) order by ec.ECouponID desc                  
          
  END TRY                              
  BEGIN CATCH                       
 Set @SpResponseStatus=0;                   
 Set @SpResponseMessage='GenericError';                     
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                    
END CATCH                              
SET NOCOUNT OFF   
GO
/****** Object:  StoredProcedure [dbo].[core_coc_GetRetailoutletByEcoupon]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================    
  
-- Author:  <Shaik Layeeqh>    
  
-- Create date: <Sept-19-2019>    
  
-- Description: Get Retailoutlet By Ecoupon   
  
-- =============================================    
  
CREATE PROCEDURE [dbo].[core_coc_GetRetailoutletByEcoupon]  
  
 @ECouponID int ,  
  
 @LanguageID int=1,         
  
 @UserID bigint=null,      
  
 @RoleID bigint=null,      
  
 @ImpersonationUserID bigint=null,      
  
 @SpResponseStatus int out,      
  
 @SpResponseMessage nvarchar(max) out,      
  
 @SpErrorDetails nvarchar(max)    out      
  
  AS  
  
  BEGIN TRY     
  
   if @LanguageID=0    
  
   begin    
  
   set @LanguageID=1    
  
   end    
  
  Set @SpResponseStatus=1;       
  
  Set @SpResponseMessage='Success';      
  
  Set @SpErrorDetails=NULL;      
  
   select RO.RetailOutletID,ROL.RetailOutlet from coc_RetailOutlets  RO (NOLOCK) inner join coc_RetailOutletLanguages  ROL (NOLOCK) on ROL.RetailOutletID = RO.RetailOutletID  and ROL.LanguageID=@LanguageID    
  
  inner join coc_ECouponOutlets EO (NOLOCK) on EO.RetailOutletID = RO.RetailOutletID      
  
  where EO.ECouponID = @ECouponID     
  
  
  
  END TRY                  
  
  BEGIN CATCH           
  
 Set @SpResponseStatus=0;       
  
 Set @SpResponseMessage='GenericError';         
  
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorL
  
ine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';        
  
  END CATCH                  
  
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_coc_GetRetailOutletInformation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_coc_GetRetailOutletInformation] @RetailOutletID INTEGER          =NULL
,                                                           @CorporateID INTEGER             =NULL
,                                                           @LanguageID INTEGER             
,                                                           @IsActive BIT                   = NULL
,                                                           @UserID INTEGER                 = null
,                                                           @RoleID bigint                  = null
,                                                           @ImpersonationUserID bigint     = null
,                                                           @SpResponseStatus int            out
,                                                           @SpResponseMessage nvarchar(max) out
,                                                           @SpErrorDetails nvarchar(max)    out

AS
	SET NOCOUNT ON
	BEGIN TRY
	if @CorporateID=0
	begin
		set @CorporateID=null
	end
	if @IsActive=0
	begin
		set @IsActive=null
	end
	--Table 1 [RetailOutlet]
	SELECT RO.RetailOutletID                                  
	,      RL.RetailOutlet                                    
	,      CR.CorporateID                                     
	,      CR.JCCICode                                        
	,      CR.CRNumber                                        
	,      ContactPerson                                      
	,      RO.Address1                                        
	,      RO.Address2                                        
	,      RO.CountryID                                       
	,      RO.CityID                                          
	,      Longitude                                          
	,      Latitude                                           
	,      Location                                           
	,      RO.IsActive                                        
	,      RO.AddDate                                         
	,      RO.AddUserID                                       
	,      RO.EditDate                                        
	,      RO.EditUserID                                      
	,      RO.LocationURL                                     
	,      RO.PlusCode                                        
	,      (SELECT RetailOutlet
	FROM coc_RetailOutletLanguages RL(NOLOCK)
	WHERE RL.RetailOutletID=@RetailOutletID and LanguageID=1 ) as RetailOutlet_EN
	,      (SELECT RetailOutlet
	FROM coc_RetailOutletLanguages RL(NOLOCK)
	WHERE RL.RetailOutletID=@RetailOutletID and LanguageID=2 ) as RetailOutlet_AR
	FROM       coc_RetailOutlets         RO(NOLOCK)
	INNER JOIN coc_Corporates            CR(NOLOCK) ON CR.CorporateID=RO.CorporateID
	INNER JOIN coc_RetailOutletLanguages RL(NOLOCK) ON RL.RetailOutletID=RO.RetailOutletID AND RL.LanguageID=@LanguageID
	WHERE (@RetailOutletID IS NULL OR RO.RetailOutletID=@RetailOutletID)
		AND (@CorporateID IS NULL OR CR.CorporateID=@CorporateID)
		AND (@IsActive IS NULL OR RO.IsActive=@IsActive)
	--Table 2[RetailOutletLanguage]


	Set @SpResponseStatus=1;
	Set @SpResponseMessage='Success';
	Set @SpErrorDetails='Success';
	END TRY
	BEGIN CATCH
	Set @SpResponseStatus=0;
	Set @SpResponseMessage='GenericError';
	Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';

	END CATCH
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_coc_GetRetailOutletList]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_coc_GetRetailOutletList] @LanguageID INTEGER             =1  
,  
--@HelpView BIT=NULL,  
                                                     @IsActive BIT                   =NULL  
,                                                    @UserID INTEGER                 =NULL  
,                                                    @RoleID bigint                  =null  
,                                                    @CorporateID INTEGER            =NULL  
,                                                    @ImpersonationUserID bigint     =null  
,                                                    @SpResponseStatus int            out  
,                                                    @SpResponseMessage nvarchar(max) out  
,                                                    @SpErrorDetails nvarchar(max)    out  
AS  
 SET NOCOUNT ON  
 BEGIN TRY  
  
 -- DECLARE @CorporateID INTEGER  
 SELECT @RoleID =RoleID  
 FROM coc_Users(NOLOCK)  
 WHERE UserID =@UserID  
 if (@CorporateID =0)  
  set @CorporateID = null;  
 else  
  SELECT @CorporateID=CorporateID  
  FROM coc_Corporates(NOLOCK)  
  WHERE UserID =@UserID  
  
 DECLARE @RetailOutlets TABLE ( ClientId      INTEGER IDENTITY PRIMARY KEY  
 ,                              UniqueID      INTEGER  
 ,                              CorporateID   INTEGER  
 ,                              RetailOutlet  [Description]  
 ,                              ContactPerson NVARCHAR(200)  
 ,                              CorporateName NVARCHAR(200)  
 ,                              CRNumber      NullCode  
 ,                              Country       NullDescription  
 ,                              City          NullDescription  
 ,                              IsActive      BIT )  
  
 INSERT INTO @RetailOutlets ( UniqueID, CorporateID, RetailOutlet, ContactPerson, CorporateName, CRNumber, Country, City, IsActive )  
 SELECT RT.RetailOutletID           
 ,      CP.CorporateID              
 ,      ISNULL(RL.RetailOutlet,'')RetailOutlet  
 ,      RT.ContactPerson            
 ,      CP.CorporateName            
 ,      CP.CRNumber                 
 ,      CL.Country                  
 ,      CT.City                     
 ,      RT.IsActive                 
 FROM       coc_RetailOutlets         RT(NOLOCK)  
 INNER JOIN coc_Corporates            CP(NOLOCK) ON RT.CorporateID=CP.CorporateID  
 LEFT JOIN  coc_RetailOutletLanguages RL(NOLOCK) ON RT.RetailOutletID=RL.RetailOutletID AND RL.LanguageID = @LanguageID  
 LEFT JOIN  coc_CountryLanguages      CL(NOLOCK) ON RT.CountryID=CL.CountryID AND CL.LanguageID=@LanguageID  
 LEFT JOIN  coc_CityLanguages         CT(NOLOCK) ON RT.CityID=CT.CityID AND CT.LanguageID=@LanguageID  
 WHERE 
 RT.RetailOutletID not in (1191,1192,1193,1194,876)
 and
 RT.CorporateID = CASE WHEN @RoleID=1 THEN RT.CorporateID  
                                         ELSE @CorporateID END  
 ORDER BY RT.RetailOutletID DESC  
  
 --IF ISNULL(@HelpView,0)=0  
 --BEGIN  
 SELECT ClientId  
 ,      UniqueID  
 ,      CorporateID  
 ,      RetailOutlet  
 ,      ContactPerson  
 ,      CorporateName  
 ,      CRNumber  
 ,      Country  
 ,      City  
 ,      IsActive  
 FROM @RetailOutlets  
  
 --END  
 END TRY  
  
 BEGIN CATCH  
  
 Set @SpResponseStatus=0;  
  
 Set @SpResponseMessage='GenericError';  
  
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';  
  
 END CATCH  
  
 SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[core_coc_GetSiteEserviceNames]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[core_coc_GetSiteEserviceNames]        
 @CorporateID int = NULL ,         
 @LanguageID int=1,               
 @UserID bigint=null,            
 @RoleID bigint=null,            
 @ImpersonationUserID bigint=null,            
 @SpResponseStatus int = null out,            
 @SpResponseMessage nvarchar(max) = null out,            
 @SpErrorDetails nvarchar(max) = null    out            
  AS        
  BEGIN TRY           
  if(@CorporateID =0) set @CorporateID = null;    
   if @LanguageID=0          
   begin          
   set @LanguageID=1          
   end          
  Set @SpResponseStatus=1;             
  Set @SpResponseMessage='Success';            
  Set @SpErrorDetails=NULL;            
  select ec.ECouponID,esl.EService from coc_EServices es (NOLOCK)            
 inner join coc_ECoupons ec (NOLOCK) on es.EServiceID = ec.EServiceID            
 inner join coc_EServiceLanguages esl (NOLOCK) on esl.EServiceID = es.EServiceID and esl.LanguageID = @LanguageID              
 where -- es.IsActive = 1 and Convert(date,es.ToDate) >= Convert(date,GETDATE()) and       
	es.IsActive = 1 and ISNULL(ec.IsShowMobile,1) = 1 and  --es.EServiceID not in (369) and
	(@CorporateID is null or es.CorporateID=@CorporateID) order by ec.ECouponID desc            
  END TRY                        
  BEGIN CATCH                 
 Set @SpResponseStatus=0;         
 Set @SpResponseMessage='GenericError';               
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';              
  END CATCH                        
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_coc_InsertExternalBarcodes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_coc_InsertExternalBarcodes]               
 @EcoponID bigint= NULL                                   
,@BarcodeXML XML                                    
,@CorporateID int= NULL              
,@RetailOutletID int= NULL             
,@UploadedFileName nvarchar(500) =  NULL             
,@FileName nvarchar(500) =  NULL            
--,@NoOfRecordsInExcel bigint      =  NULL                
--,@NoOfRecordsUploaded bigint     =  NULL                
,@LanguageID int                 =  1                
,@UserID bigint                  =  null                
,@RoleID bigint                  =  null                
,@ImpersonationUserID bigint     =  null                
,@SpResponseStatus int = NULL           out                
,@SpResponseMessage nvarchar(max) = NULL out                
,@SpErrorDetails nvarchar(max) = NULL    out          
,@ServiceKey nvarchar(500) = null          
,@BarcodeRejectedCount int    = null out          
AS      
  
if(@ServiceKey is not null) and Not Exists(Select EserviceId from coc_ServiceKeys(nolock) where ServiceKey = @ServiceKey)      
  begin  
  Set @SpResponseStatus=0;                
  Set @SpResponseMessage='Invalid Service Key';                
  Set @SpErrorDetails='Invalid Service Key';    
  Set @BarcodeRejectedCount=-1;  
  Return;  
 end  
  
  
 BEGIN TRY            
           
 Set @SpResponseStatus=1;                
 Set @SpResponseMessage='Success';                
 Set @SpErrorDetails='Success';               
 Set @BarcodeRejectedCount=0;           
 if(@RetailOutletID=0)          
   set @RetailOutletID=NULL          
 declare @UploadExternalBarcodeAuditID bigint            
 declare @EServiceID bigint            
          
 /*******API Call*******/     
  
 if(@ServiceKey is not null) and Exists(Select EserviceId from coc_ServiceKeys(nolock) where ServiceKey = @ServiceKey)          
   BEGIN          
                    
       select @EServiceID=EServiceID,@CorporateID=CorporateID from coc_eservices(nolock)            
       where EServiceID = (Select EserviceId from coc_ServiceKeys(nolock) where ServiceKey = @ServiceKey);          
       select @EcoponID= EcouponId from coc_Ecoupons(nolock)  where EServiceID = @EServiceID;          
       Set @UploadedFileName = 'APIUpload';          
       --Set @NoOfRecordsInExcel=@NoOfRecordsUploaded;          
   END          
          
 Else          
  begin          
     select @EServiceID=EServiceID from coc_ECoupons(nolock) where ECouponID=@EcoponID          
  end         
          
 DECLARE @Barcodes AS TABLE        
  (        
   UniqueID INTEGER IDENTITY(1,1),        
   Barcode VARCHAR(100)        
  )        
insert into @Barcodes (barcode)        
 SELECT x.y.value('Barcode[1]', 'VARCHAR(100)')          
   as  ExternalBarcode1 FROM @BarcodeXML.nodes('Barcodes/Data') x(y)        
        
         
  declare @duplicateCount int  ;      
  declare @TotalCount int  ;      
  declare @AfterDeleteTotalCount int  ;      
        
        
  select @TotalCount  = Count(*) from @Barcodes;      
      
     DELETE E      
    FROM @Barcodes E      
         INNER JOIN      
    (      
        SELECT *,       
               RANK() OVER(PARTITION BY Barcode ORDER BY UniqueID) rank      
        FROM @Barcodes      
    ) T ON E.UniqueID = t.UniqueID      
    WHERE rank > 1;      
        
  select @AfterDeleteTotalCount  = Count(*) from @Barcodes;      
  Set @BarcodeRejectedCount = @TotalCount-@AfterDeleteTotalCount;      
      
  select @duplicateCount = count(*) from coc_EServiceExternalBarcodes Ex         
  inner join @Barcodes B on B.Barcode = Ex.ExternalBarcode and Ex.EServiceID = @EServiceID ;      
       
 if @duplicateCount > 0         
 begin          
 delete B from @Barcodes B         
  inner join coc_EServiceExternalBarcodes EX on Ex.ExternalBarcode = B.Barcode and Ex.EServiceID = @EServiceID;        
  Set  @BarcodeRejectedCount = @duplicateCount+@BarcodeRejectedCount;      
  --select    @BarcodeRejectedCount ;      
 end        
        
 --else        
 begin        
  /*******API Call*******/           
  insert into COC_CORE_UploadExternalBarcodeAudit (ExcelFileName ,UploadOn, NumberOfRecordsInExcel, NumberOfRecordsSavedToDB)                
    select @UploadedFileName ,getdate(), NULL, Null             
                
  set @UploadExternalBarcodeAuditID=SCOPE_IDENTITY()                
                
  insert into coc_EServiceExternalBarcodes (EServiceID, CorporateID, RetailoutletID, ExternalBarcode, LoadedDate, IsBlocked, IsUsed, UploadExternalBarcodeAuditID )                
    SELECT @EServiceID,@CorporateID,@RetailOutletID,Barcode  as  ExternalBarcode,getdate(),0,0,@UploadExternalBarcodeAuditID FROM @Barcodes                
              
  exec Usp_Core_CheckECouponParticipationExternalBarcodes          
 end      
 select @BarcodeRejectedCount;      
 END TRY                  
 BEGIN CATCH    
  Set @BarcodeRejectedCount=-1;  
 Set @SpResponseStatus=0;               
 Set @SpResponseMessage='GenericError';                 
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                      
 END CATCH                
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_coc_InsertUploadParticipation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
    
-- Author:  <Shaik Layeeqh>    
    
-- Create date: <Sept-19-2019>    
    
-- Description: core_coc_InsertUploadParticipation    
    
-- <Participation><Details><ECouponID>21</ECouponID><Name>shaik</Name><Mobile>8885487848</Mobile></Details><Details><ECouponID>21</ECouponID><Name>MD</Name><Mobile>9866248961</Mobile></Details></Participation>    
    
-- =============================================    
    
CREATE PROCEDURE [dbo].[core_coc_InsertUploadParticipation]   
@EcoponID int                       
,@ParticipationXML XML               
,@InValidParticipationXML XML        
,@CorporateID int= NULL    
,@UploadedFileName nvarchar(500) =  NULL    
,@FileName nvarchar(500)         =  NULL    
,@NoOfRecordsInExcel bigint      =  NULL    
,@NoOfRecordsUploaded bigint     =  NULL    
,@LanguageID int                 =  1    
,@UserID bigint                  =  null    
,@RoleID bigint                  =  null    
,@ImpersonationUserID bigint     =  null    
,@SpResponseStatus int            out    
,@SpResponseMessage nvarchar(max) out    
,@SpErrorDetails nvarchar(max)    out    
AS    
 BEGIN TRY    
 Set @SpResponseStatus=1;    
 Set @SpResponseMessage='Success';    
 Set @SpErrorDetails='Success';    
 create table #UploadParticipationsTemp ( ECouponID      bigint NOT NULL    
 ,                                        Name           nvarchar(100) NOT NULL    
 ,                                        Mobile         varchar(15) NOT NULL    
 ,                                        EmailID        nvarchar(100) NULL    
 ,                                        RefNo          nvarchar(100) NULL    
 ,                                        Age            int NULL    
 ,                                        Gender         int NULL    
 ,                                        RetailOutletID int NULL )    
 create table #InvalidUploadParticipationsTemp ( ECouponID      bigint NOT NULL    
 ,                                               Name           nvarchar(100) NOT NULL    
 ,                                               Mobile         varchar(15) NOT NULL    
 ,                                               EmailID        nvarchar(100) NULL    
 ,                                               RefNo          nvarchar(100) NULL    
 ,                                               Age            int NULL    
 ,                                               Gender         int NULL    
 ,                                               RetailOutletID int NULL    
 ,                                               ErrorMessage   nvarchar(1000) NULL )    
    
 declare @UploadParticipationAuditID bigint    
    
 insert into UploadParticipationAudit ( FileName, Status, NoOfRecordsInExcel, NoOfRecordsUploaded, NoOfRecordsProcessed, UploadedBy, UploadedDate, UploadedFileName, CorporateID )    
 select @FileName    
 ,      1    
 ,      @NoOfRecordsInExcel    
 ,      @NoOfRecordsUploaded    
 ,      0    
 ,      @UserID    
 ,      getdate()    
 ,      @UploadedFileName    
 ,      @CorporateID    
    
 set @UploadParticipationAuditID=SCOPE_IDENTITY()    
    
    
 insert into #UploadParticipationsTemp ( ECouponID, Name, Mobile, EmailID, RefNo, Age, Gender, RetailOutletID )    
 SELECT x.y.value('ECouponID[1]', '[bigint]')    as  ECouponID   ,      x.y.value('Name[1]', 'nvarchar(100)')     as Name    
 ,      x.y.value('Mobile[1]', 'varchar(15)')     as Mobile    
 ,      x.y.value( 'EmailID[1]', 'VARCHAR(100)' ) AS EmailID    
 ,      x.y.value( 'RefNo[1]', 'VARCHAR(200)' )   AS RefNo    
 ,      x.y.value( 'Age[1]', '[int]' )            AS Age    
 ,      x.y.value( 'Gender[1]', '[int]' )         AS Gender    
 ,      x.y.value( 'RetailOutletID[1]', '[int]' ) AS RetailOutletID    
 FROM @ParticipationXML.nodes('Participation/Details') x(y)    
    
    
 --insert into #InvalidUploadParticipationsTemp ( ECouponID, Name, Mobile, EmailID, RefNo, Age, Gender, RetailOutletID, ErrorMessage )    
 --SELECT x.y.value('ECouponID[1]', '[bigint]')      as  ECouponID    
 --,      x.y.value('Name[1]', 'nvarchar(100)')            as Name    
 --,      x.y.value('Mobile[1]', 'varchar(15)')            as Mobile    
 --,      x.y.value( 'EmailID[1]', 'VARCHAR(100)' )        AS EmailID    
 --,      x.y.value( 'RefNo[1]', 'VARCHAR(200)' )          AS RefNo    
 --,      x.y.value( 'Age[1]', '[int]' )                   AS Age    
 --,      x.y.value( 'Gender[1]', '[int]' )                AS Gender    
 --,      x.y.value( 'RetailOutletID[1]', '[int]' )        AS RetailOutletID    
 --,      x.y.value( 'ErrorMessage[1]', 'nvarchar(1000)' ) AS ErrorMessage    
 --FROM @InValidParticipationXML.nodes('Participation/Details') x(y)    
    
    
 INSERT INTO UploadParticipations ( ECouponID, Name, Mobile, EmailID, RefNo, Age, Gender, RetailOutletID, UploadParticipationAuditID )    
    
 select ECouponID    
 ,      Name    
 ,      Mobile    
 ,      Case When EmailID = '' then null    
                               else EmailID end    
 ,      Case When RefNo = '' then null    
                             else RefNo end    
 ,      Case When Age = '' then null    
                           else Age end    
 ,      Case When Gender = '' then null    
                              else Gender end    
 ,      Case When RetailOutletID = '' then null    
                                      else RetailOutletID end    
 ,      @UploadParticipationAuditID    
 from #UploadParticipationsTemp    
    
 drop table #UploadParticipationsTemp    
    
    
 --INSERT INTO UploadParticipationInvalidData ( ECouponID, Name, Mobile, EmailID, RefNo, Age, Gender, RetailOutletID, UploadParticipationAuditID, UploadDate, ErrorMessage )    
    
 --select ECouponID    
 --,      Name    
 --,      Mobile    
 --,      Case When EmailID = '' then null    
 --                              else EmailID end    
 --,      Case When RefNo = '' then null    
 --                            else RefNo end    
 --,      Case When Age = '' then null    
 --                          else Age end    
 --,      Case When Gender = '' then null    
 --                             else Gender end    
 --,      Case When RetailOutletID = '' then null    
 --                                     else RetailOutletID end    
 --,      @UploadParticipationAuditID    
 --,      getdate()    
 --,      Case When ErrorMessage = '' then null    
 --                                   else ErrorMessage end    
 --from #InvalidUploadParticipationsTemp    
    
 drop table #InvalidUploadParticipationsTemp    
    
 END TRY    
    
 BEGIN CATCH    
    
 Set @SpResponseStatus=0;    
    
 Set @SpResponseMessage='GenericError';    
    
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';    
    
 drop table #UploadParticipationsTemp    
 drop table #InvalidUploadParticipationsTemp    
    
 END CATCH    
    
    
    
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_coc_InsertUploadParticipation_Bckup_12092021]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
    
-- Author:  <Shaik Layeeqh>    
    
-- Create date: <Sept-19-2019>    
    
-- Description: core_coc_InsertUploadParticipation    
    
-- <Participation><Details><ECouponID>21</ECouponID><Name>shaik</Name><Mobile>8885487848</Mobile></Details><Details><ECouponID>21</ECouponID><Name>MD</Name><Mobile>9866248961</Mobile></Details></Participation>    
    
-- =============================================    
    
CREATE PROCEDURE [dbo].[core_coc_InsertUploadParticipation_Bckup_12092021]   
@EcoponID int                       
,@ParticipationXML XML               
,@InValidParticipationXML XML        
,@CorporateID int= NULL    
,@UploadedFileName nvarchar(500) =  NULL    
,@FileName nvarchar(500)         =  NULL    
,@NoOfRecordsInExcel bigint      =  NULL    
,@NoOfRecordsUploaded bigint     =  NULL    
,@LanguageID int                 =  1    
,@UserID bigint                  =  null    
,@RoleID bigint                  =  null    
,@ImpersonationUserID bigint     =  null    
,@SpResponseStatus int            out    
,@SpResponseMessage nvarchar(max) out    
,@SpErrorDetails nvarchar(max)    out    
AS    
 BEGIN TRY    
 Set @SpResponseStatus=1;    
 Set @SpResponseMessage='Success';    
 Set @SpErrorDetails='Success';    
 create table #UploadParticipationsTemp ( ECouponID      bigint NOT NULL    
 ,                                        Name           nvarchar(100) NOT NULL    
 ,                                        Mobile         varchar(15) NOT NULL    
 ,                                        EmailID        nvarchar(100) NULL    
 ,                                        RefNo          nvarchar(100) NULL    
 ,                                        Age            int NULL    
 ,                                        Gender         int NULL    
 ,                                        RetailOutletID int NULL )    
 create table #InvalidUploadParticipationsTemp ( ECouponID      bigint NOT NULL    
 ,                                               Name           nvarchar(100) NOT NULL    
 ,                                               Mobile         varchar(15) NOT NULL    
 ,                                               EmailID        nvarchar(100) NULL    
 ,                                               RefNo          nvarchar(100) NULL    
 ,                                               Age            int NULL    
 ,                                               Gender         int NULL    
 ,                                               RetailOutletID int NULL    
 ,                                               ErrorMessage   nvarchar(1000) NULL )    
    
 declare @UploadParticipationAuditID bigint    
    
 insert into UploadParticipationAudit ( FileName, Status, NoOfRecordsInExcel, NoOfRecordsUploaded, NoOfRecordsProcessed, UploadedBy, UploadedDate, UploadedFileName, CorporateID )    
 select @FileName    
 ,      1    
 ,      @NoOfRecordsInExcel    
 ,      @NoOfRecordsUploaded    
 ,      0    
 ,      @UserID    
 ,      getdate()    
 ,      @UploadedFileName    
 ,      @CorporateID    
    
 set @UploadParticipationAuditID=SCOPE_IDENTITY()    
    
    
 --insert into #UploadParticipationsTemp ( ECouponID, Name, Mobile, EmailID, RefNo, Age, Gender, RetailOutletID )    
 --SELECT x.y.value('ECouponID[1]', '[bigint]')    as  ECouponID   ,      x.y.value('Name[1]', 'nvarchar(100)')     as Name    
 --,      x.y.value('Mobile[1]', 'varchar(15)')     as Mobile    
 --,      x.y.value( 'EmailID[1]', 'VARCHAR(100)' ) AS EmailID    
 --,      x.y.value( 'RefNo[1]', 'VARCHAR(200)' )   AS RefNo    
 --,      x.y.value( 'Age[1]', '[int]' )            AS Age    
 --,      x.y.value( 'Gender[1]', '[int]' )         AS Gender    
 --,      x.y.value( 'RetailOutletID[1]', '[int]' ) AS RetailOutletID    
 --FROM @ParticipationXML.nodes('Participation/Details') x(y) 
 
 DECLARE @hdoc int
 EXEC sp_xml_preparedocument @hdoc OUTPUT, @ParticipationXML

 INSERT INTO #UploadParticipationsTemp ( ECouponID, Name, Mobile, EmailID, RefNo, Age, Gender, RetailOutletID )     
 SELECT * FROM OPENXML (@hdoc, '/Participation/Details' , 2)
 WITH( ECouponID BIGINT, Name NVARCHAR(100),  Mobile varchar(15), EmailID VARCHAR(100), RefNo VARCHAR(200),
    Age INTEGER, Gender INTEGER, RetailOutletID INTEGER )

 EXEC sp_xml_removedocument @hdoc 
    
    
 --insert into #InvalidUploadParticipationsTemp ( ECouponID, Name, Mobile, EmailID, RefNo, Age, Gender, RetailOutletID, ErrorMessage )    
 --SELECT x.y.value('ECouponID[1]', '[bigint]')      as  ECouponID    
 --,      x.y.value('Name[1]', 'nvarchar(100)')            as Name    
 --,      x.y.value('Mobile[1]', 'varchar(15)')            as Mobile    
 --,      x.y.value( 'EmailID[1]', 'VARCHAR(100)' )        AS EmailID    
 --,      x.y.value( 'RefNo[1]', 'VARCHAR(200)' )          AS RefNo    
 --,      x.y.value( 'Age[1]', '[int]' )                   AS Age    
 --,      x.y.value( 'Gender[1]', '[int]' )                AS Gender    
 --,      x.y.value( 'RetailOutletID[1]', '[int]' )        AS RetailOutletID    
 --,      x.y.value( 'ErrorMessage[1]', 'nvarchar(1000)' ) AS ErrorMessage    
 --FROM @InValidParticipationXML.nodes('Participation/Details') x(y)    
    
    
 INSERT INTO UploadParticipations ( ECouponID, Name, Mobile, EmailID, RefNo, Age, Gender, RetailOutletID, UploadParticipationAuditID )    
    
 select ECouponID    
 ,      Name    
 ,      Mobile    
 ,      Case When EmailID = '' then null    
                               else EmailID end    
 ,      Case When RefNo = '' then null    
                             else RefNo end    
 ,      Case When Age = '' then null    
                           else Age end    
 ,      Case When Gender = '' then null    
                              else Gender end    
 ,      Case When RetailOutletID = '' then null    
                                      else RetailOutletID end    
 ,      @UploadParticipationAuditID    
 from #UploadParticipationsTemp    
    
 drop table #UploadParticipationsTemp    
    
    
 --INSERT INTO UploadParticipationInvalidData ( ECouponID, Name, Mobile, EmailID, RefNo, Age, Gender, RetailOutletID, UploadParticipationAuditID, UploadDate, ErrorMessage )    
    
 --select ECouponID    
 --,      Name    
 --,      Mobile    
 --,      Case When EmailID = '' then null    
 --                              else EmailID end    
 --,      Case When RefNo = '' then null    
 --                            else RefNo end    
 --,      Case When Age = '' then null    
 --                          else Age end    
 --,      Case When Gender = '' then null    
 --                             else Gender end    
 --,      Case When RetailOutletID = '' then null    
 --                                     else RetailOutletID end    
 --,      @UploadParticipationAuditID    
 --,      getdate()    
 --,      Case When ErrorMessage = '' then null    
 --                                   else ErrorMessage end    
 --from #InvalidUploadParticipationsTemp    
    
 drop table #InvalidUploadParticipationsTemp    
    
 END TRY    
    
 BEGIN CATCH    
    
 Set @SpResponseStatus=0;    
    
 Set @SpResponseMessage='GenericError';    
    
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';    
    
 drop table #UploadParticipationsTemp    
 drop table #InvalidUploadParticipationsTemp    
    
 END CATCH    
    
    
    
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_coc_InsertUploadParticipationAudit]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[core_coc_InsertUploadParticipationAudit]   
@CorporateID int= NULL    
,@UploadedFileName nvarchar(500) =  NULL    
,@FileName nvarchar(500)         =  NULL    
,@NoOfRecordsInExcel bigint      =  NULL    
,@NoOfRecordsUploaded bigint     =  NULL    
,@LanguageID int                 =  1    
,@UserID bigint                  =  null    
,@RoleID bigint                  =  null    
,@ImpersonationUserID bigint     =  null    
,@SpResponseStatus int            out    
,@SpResponseMessage nvarchar(max) out    
,@SpErrorDetails nvarchar(max)    out
,@UploadParticipationAuditID int out
AS    
 BEGIN TRY    
 Set @SpResponseStatus=1;    
 Set @SpResponseMessage='Success';    
 Set @SpErrorDetails='Success';    

    
 insert into UploadParticipationAudit ( FileName, Status, NoOfRecordsInExcel, NoOfRecordsUploaded, NoOfRecordsProcessed, UploadedBy, UploadedDate, UploadedFileName, CorporateID )    
 select @FileName    
 ,      1    
 ,      @NoOfRecordsInExcel    
 ,      @NoOfRecordsUploaded    
 ,      0    
 ,      @UserID    
 ,      getdate()    
 ,      @UploadedFileName    
 ,      @CorporateID    
    
 set @UploadParticipationAuditID=SCOPE_IDENTITY()  
    
 END TRY    
    
 BEGIN CATCH    
 Set @SpResponseStatus=0;    
 Set @SpResponseMessage='GenericError';    
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';    
 END CATCH    
    
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_coc_SaveCategoryData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_coc_SaveCategoryData]   
@CategoryID int=NULL                       
,@CategoryName nvarchar(250)               
,@CategoryNameAr nvarchar(250)          
,@NumberOfPromoCodes int= NULL    
,@LanguageID int                 =  1    
,@UserID bigint                  =  null    
,@RoleID bigint                  =  null    
,@ImpersonationUserID bigint     =  null    
,@SpResponseStatus int            out    
,@SpResponseMessage nvarchar(max) out    
,@SpErrorDetails nvarchar(max)    out    
AS    
 BEGIN TRY    
 Set @SpResponseStatus=1;    
 Set @SpResponseMessage='Success';    
 Set @SpErrorDetails='Success';    
  
  
 if(@CategoryID=0 or @CategoryID is null)  
 begin  
    if exists(select * from coc_core_Category(nolock) where (CategoryName=@CategoryName or CategoryNameAR=@CategoryNameAr) and IsActive=1)  
 begin  
    Set @SpResponseMessage='Category name already exists'  
    return;  
 end  
     INSERT INTO coc_core_Category(CategoryName, CategoryNameAR, IsActive, CreatedDate, CreatedBy)    
              Select @CategoryName,@CategoryNameAr,1,getdate(),@UserID  
  Set @CategoryID=SCOPE_IDENTITY()  
 end  
 else  
 begin  
    if exists(select * from coc_core_Category(nolock) where (CategoryName=@CategoryName or CategoryNameAR=@CategoryNameAr) and IsActive=1 and CategoryID!=@CategoryID)  
 begin  
    Set @SpResponseMessage='Category name already exists'  
    return;  
 end  
     update coc_core_Category set CategoryName=@CategoryName,CategoryNameAR=@CategoryNameAr where CategoryID=@CategoryID  
 end  
  
  
 if(@NumberOfPromoCodes!=0 and @NumberOfPromoCodes is not null and @NumberOfPromoCodes>0)  
 begin  
    insert into coc_core_PromoCodeBundle(CategoryID,PromoCodeCount,IsDownloaded,CreatedBy,CreatedDate,Status)  
    Select @CategoryID,@NumberOfPromoCodes,0,@UserID,getdate(),1  
 end      
 END TRY    
    
 BEGIN CATCH    
    
 Set @SpResponseStatus=0;    
    
 Set @SpResponseMessage='GenericError';    
    
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';    
    
 END CATCH   
   
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_coc_SaveRetailOutLetUploadData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ======================================================================
-- Author     :  Shaik  use eCoponTest2019July14
-- Create date    :  30-Sept-2019
-- Description    :  save RetailOutLetUpload  core_coc_SaveRetailOutLetUploadData
-- ======================================================================
CREATE PROCEDURE [dbo].[core_coc_SaveRetailOutLetUploadData] @XmlData XML                    
,                                                    @UserID INTEGER                 
,                                                    @RoleID bigint                  =null
,                                                    @ImpersonationUserID bigint     =null
,                                                    @SpResponseStatus int            out
,                                                    @SpResponseMessage nvarchar(max) out
,                                                    @SpErrorDetails nvarchar(max)    out
,                                                    @ErrorMessage [Remark]           OUTPUT
AS
	SET NOCOUNT ON
	BEGIN TRY
	BEGIN TRANSACTION TRN_SaveRetailOutLetUploadData

	DECLARE @RetailOutletID INTEGER
	DECLARE @CorporateID INTEGER
	DECLARE @RetailOutletEN [Description]
	DECLARE @RetailOutletAR [Description]
	DECLARE @Counter INTEGER

	DECLARE @outLet AS TABLE ( ID             INTEGER IDENTITY(1,1)
	,                          RetailOutletEN [Name]
	,                          RetailOutletAR [Name]
	,                          ContactPerson  [Description]
	,                          Address1       [Remark]
	,                          Address2       [Remark]
	,                          CountryID      INTEGER
	,                          CityID         INTEGER
	,                          CorporateID    INTEGER
	,                          LocationURL    [Description]
	,                          Location       [Description]
	,                          PlusCode       [Description]
	,                          LanguageID     INTEGER )

	INSERT INTO @outLet ( RetailOutletEN, RetailOutletAR, CorporateID, ContactPerson, Address1, CountryID, CityID, LocationURL, Location, PlusCode )
	SELECT CorporateUser.value('(@RetailOutletEN)', '[Name]')
	,      CorporateUser.value('(@RetailOutletAR)', '[Name]')
	,      CorporateUser.value('(@CorporateID)', 'INTEGER')
	,      CorporateUser.value('(@ContactPerson)', '[Description]')
	,      CorporateUser.value('(@Address1)', '[Remark]')
	,      CorporateUser.value('(@CountryID)', 'INTEGER')
	,      CorporateUser.value('(@CityID)', 'INTEGER')
	,      CorporateUser.value('(@LocationURL)', 'Description')
	,      CorporateUser.value('(@Location)', 'Description')
	,      CorporateUser.value('(@PlusCode)', 'Description')
	FROM @XmlData.nodes('/XML/Row') AS Data(CorporateUser)

	SELECT @Counter = MIN(ID)
	FROM @outLet
	WHILE @Counter IS NOT NULL
	BEGIN
		SELECT @CorporateID = CorporateID
		FROM @outLet
		WHERE ID=@Counter
		SELECT @RetailOutletEN=RetailOutletEN
		,      @RetailOutletAR=RetailOutletAR
		FROM @outLet
		WHERE ID=@Counter
		Set @SpResponseMessage = @CorporateID;

		IF NOT EXISTS(SELECT 1
			FROM       coc_RetailOutletLanguages(NOLOCK)RL
			INNER JOIN coc_RetailOutlets (NOLOCK)       RO ON RL.RetailOutletID=RO.RetailOutletID
			WHERE RetailOutlet=@RetailOutletEN AND RO.CorporateID=@CorporateID)
		BEGIN
			INSERT INTO coc_RetailOutlets ( CorporateID, ContactPerson, Address1, CountryID, CityID, AddUserID, AddDate, LocationURL, Location, PlusCode )
			SELECT CorporateID
			,      ContactPerson
			,      Address1
			,      CountryID
			,      CityID
			,      @UserID
			,      GETDATE()
			,      LocationURL
			,      Location
			,      PlusCode
			FROM @outLet
			WHERE ID=@Counter

			SET @RetailOutletID=SCOPE_IDENTITY()

			INSERT INTO coc_RetailOutletLanguages ( RetailOutletID, LanguageID, RetailOutlet )
			SELECT @RetailOutletID
			,      1
			,      RetailOutletEN
			FROM @outLet
			WHERE ID=@Counter
			INSERT INTO coc_RetailOutletLanguages ( RetailOutletID, LanguageID, RetailOutlet )
			SELECT @RetailOutletID
			,      2
			,      RetailOutletAR
			FROM @outLet
			WHERE ID=@Counter

		END

		SELECT @Counter = MIN(ID)
		FROM @outLet
		WHERE ID >@Counter
	END
	-- SELECT @ErrorMessage='';
	Set @SpResponseStatus=1;
	--Set @SpResponseMessage='Success';
	Set @SpErrorDetails='Success';
	COMMIT TRANSACTION TRN_SaveRetailOutLetUploadData
	END TRY
	BEGIN CATCH
	Rollback Transaction SaveRetailOutlet
	Set @SpResponseStatus=0;
	Set @SpResponseMessage='GenericError';
	Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';


	END CATCH
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_coc_UpdateEvoucherStatus]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_coc_UpdateEvoucherStatus] @EServiceID int                 
,                                                      @EVoucherID int                 
,                                                      @CurrentStatus int              
,                                                      @LanguageID int                 =1
,                                                      @UserID bigint                  =null
,                                                      @RoleID bigint                  =null
,                                                      @ImpersonationUserID bigint     =null
,                                                      @SpResponseStatus int            out
,                                                      @SpResponseMessage nvarchar(max) out
,                                                      @SpErrorDetails nvarchar(max)    out
AS
	BEGIN TRY
	Update coc_evoucher
	set CurrentStatus = @CurrentStatus
	where evoucherid = @EVoucherID
	Set @SpResponseStatus=1;
	Set @SpResponseMessage='Success';
	Set @SpErrorDetails='Success';

	END TRY

	BEGIN CATCH

	Set @SpResponseStatus=0;

	Set @SpResponseMessage='GenericError';

	Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';

	END CATCH
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_coc_UpdateVoucherCurrentStatus]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_coc_UpdateVoucherCurrentStatus] @EServiceID int                 
,                                                            @EVoucherID int                 
,                                                            @CurrentStatus int              
,                                                            @LanguageID int                 =1
,                                                            @UserID bigint                  =null
,                                                            @RoleID bigint                  =null
,                                                            @ImpersonationUserID bigint     =null
,                                                            @SpResponseStatus int            out
,                                                            @SpResponseMessage nvarchar(max) out
,                                                            @SpErrorDetails nvarchar(max)    out
AS
	BEGIN TRY
	Update coc_evoucher
	set CurrentStatus = @CurrentStatus
	where evoucherid = @EVoucherID
	Set @SpResponseStatus=1;
	Set @SpResponseMessage='Success';
	Set @SpErrorDetails='Success';

	END TRY

	BEGIN CATCH

	Set @SpResponseStatus=0;

	Set @SpResponseMessage='GenericError';

	Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';

	END CATCH
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_coc_ValidateUploadParticipation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_coc_ValidateUploadParticipation]      
 @ECouponID  int ,      
 @NoOfUploadedRecords bigint,      
 @EServiceID int=null ,      
 @RetailOutletID int=null,      
 @CorporateID int = NULL,         
 @LanguageID int=1,               
 @UserID bigint=null,            
 @RoleID bigint=null,            
 @ImpersonationUserID bigint=null,            
 @SpResponseStatus int out,            
 @SpResponseMessage nvarchar(max) out ,            
 @SpErrorDetails nvarchar(max) out                 
  AS        
  BEGIN TRY   
--here CompetitionTypeId 4 means Open Quantity
--if exists Conditition will check where this competition type is 
if exists(select * from coc_competition_staging_CompetitionTypes(nolock) 
where CompetitionTypeId=4 
and CompetitionStagingID=(select CompetitionStagingID from  coc_competition_staging(nolock) where CompetitionId=@ECouponID ))
begin
   print('Open Quantity Success');      
    Set @SpResponseStatus=1;             
    Set @SpResponseMessage='Success'; 
	RETURN 
end
 Declare @PurchasedBarcodeCount bigint;        
 Declare @BarcodesRemainingCount bigint;      
 Declare @UsedBarcodesCount bigint;      
 Declare @UnProcessedParticipationCount bigint;      
 Declare @ProcessedParticipationCount bigint;      
 Declare @AllowedParticipationCount bigint;    
 --set required       
  set @PurchasedBarcodeCount=(select SUM(NotificationCount) from coc_EServiceInvoices(Nolock) where EServiceID=(select EServiceID from coc_ECoupons (NOLOCK) where ECouponID=@ECouponID))        
  set @UnProcessedParticipationCount =(select Count(*) from UploadParticipations(Nolock) where ECouponID=@ECouponID and ParticipantAdded is null)        
  set @ProcessedParticipationCount =(select Count(*) from UploadParticipations(Nolock) where ECouponID=@ECouponID and ParticipantAdded=1)        
  set @BarcodesRemainingCount =(select Count(*) from coc_EServiceBarcodes(Nolock)   where [IsUsed]=0 and ([AsignedMoile]  is null OR AsignedEmailID is null)  and  
   NotificationID=(Select NotificationID from coc_Notifications(Nolock)  where EServiceID=(select EServiceID from coc_ECoupons (NOLOCK) where ECouponID=@ECouponID)))      
  set @UsedBarcodesCount =(select Count(*) from coc_EServiceBarcodes(Nolock)   where [IsUsed]=1 and ([AsignedMoile]  is not null OR AsignedEmailID is not null) and  
   NotificationID=(Select NotificationID from coc_Notifications(Nolock)  where EServiceID=(select EServiceID from coc_ECoupons (NOLOCK) where ECouponID=@ECouponID)))      
  set @AllowedParticipationCount= @PurchasedBarcodeCount-@UnProcessedParticipationCount-@ProcessedParticipationCount;       
  select  @UsedBarcodesCount    as UsedBarcodesCount      
  select  @PurchasedBarcodeCount      as PurchasedBarcodeCount       
  select  @UnProcessedParticipationCount   as UnProcessedParticipationCount      
  select  @ProcessedParticipationCount   as ProcessedParticipationCount      
  select  @BarcodesRemainingCount    as BarcodesRemainingCount      
  select  @AllowedParticipationCount    as AllowedParticipationCount      
  select  @BarcodesRemainingCount    as BarcodesRemainingCount   
   --b. number of entries in list should not exceed the purchased barcodes for this competition       
   if((@NoOfUploadedRecords <=  @AllowedParticipationCount) and (@NoOfUploadedRecords<=@PurchasedBarcodeCount-@UsedBarcodesCount-@UnProcessedParticipationCount) )      
   begin      
     print('Success b');      
    Set @SpResponseStatus=1;             
    Set @SpResponseMessage='Success';        
   end      
   else      
    begin       
       print('failed b. Number of entries in list should not exceed the purchased barcodes b');      
      Set @SpResponseStatus=0;            
      set @SpResponseMessage='Number of uploaded participation in excel file should not exceed the purchased barcodes for this competition';      
    end      
   --c. number of entries in list should not exceed barcodes remining for competition      
   if (@BarcodesRemainingCount >=@NoOfUploadedRecords+@UnProcessedParticipationCount  and @SpResponseStatus=1)      
   begin      
     print('Success c');      
     Set @SpResponseStatus=1;             
     Set @SpResponseMessage='Success';        
   end      
   else      
    begin       
       print('failed c Number of entries in list should not exceed barcodes remaining');      
      Set @SpResponseStatus=0;            
      set @SpResponseMessage='Number of uploaded participation in excel file should not exceed barcodes remaining for this competition';      
    end  
	Set @SpResponseStatus=1;             
	Set @SpResponseMessage='Success';            
	Set @SpErrorDetails=NULL;  
  END TRY                        
BEGIN CATCH                 
 Set @SpResponseStatus=0;             
 Set @SpResponseMessage='GenericError';               
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500),
 Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, 
 ErrorState : <'+convert(varchar(500), Error_state())+'> , 
 ErrorProcedure : <'+Error_procedure() +'> , 
 ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';              
  END CATCH                        
SET NOCOUNT OFF 




GO
/****** Object:  StoredProcedure [dbo].[core_usp_AdminGetAllVouchers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[core_usp_AdminGetAllVouchers]        
  @LanguageID  INTEGER=1,                
  @UserID INTEGER,                          
  @RoleID bigint=null,              
  @ImpersonationUserID bigint=null,              
  @SpResponseStatus int OUTPUT,              
  @SpResponseMessage nvarchar(max) OUTPUT,              
  @SpErrorDetails nvarchar(max) OUTPUT                   
      
AS                
 Set @SpResponseStatus=1;               
 Set @SpResponseMessage='Success';              
 Set @SpErrorDetails=NULL;              
      
 if(@RoleID <> 1)      
     begin      
  Set @SpResponseStatus=0;               
  Set @SpResponseMessage='UnSuccess';              
  Set @SpErrorDetails='Access denied';              
  return;      
  end      
      
BEGIN  TRY            
     BEGIN TRANSACTION EVoucherConfigurationList;             
  SELECT               
   es.EServiceID AS UniqueID,              
   esl.EService AS CompetitionName,              
   FromDate,              
   ToDate,              
   enmvl.EnumValue AS CompetitionType,              
   evl.ResourceValue AS VoucherName,              
   ev.EVoucherID,        
   es.EServiceID,      
  IsNull(ev.CurrentStatus,0) as CurrentStatus,                 
   ev.ReasonForReject,  
   co.CorporateName  
   FROM coc_EServices(Nolock) es              
   INNER JOIN coc_EnumValueLanguages(Nolock) enmvl ON enmvl.EnumValueID=es.ServiceSubTypeID AND enmvl.LanguageID=@LanguageID             
   INNER JOIN coc_EServiceLanguages(Nolock) esl ON esl.EServiceID=es.EServiceID AND esl.LanguageID=@LanguageID              
   LEFT JOIN coc_EVoucher(Nolock) ev ON ev.EServiceID=es.EServiceID               
   LEFT JOIN coc_EVoucherLanguages(Nolock) evl ON evl.EVoucherID=ev.EVoucherID AND evl.LanguageID=1 AND evl.ResourceKey='VoucherName'      
   left join coc_Corporates(Nolock)  co ON co.CorporateID=es.CorporateID  
   where ev.EVoucherID not in (101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,36)
   Order by  es.EServiceID desc                  
   SET NOCOUNT OFF                
   COMMIT TRANSACTION  EVoucherConfigurationList                      
                          
  END TRY                          
  BEGIN CATCH                
  ROLLBACK TRANSACTION SaveVoucherCreation              
  Set @SpResponseStatus=0;               
  Set @SpResponseMessage='GenericError';              
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(varchar,ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(varchar,ERROR_SEVERITY())+'>, ErrorState : <'+Convert(varchar,ERROR_STATE())+'> , ErrorProcedure : <'+Convert(varchar,ERROR_PROCEDURE())+'> , ErrorLine <'+Convert(varchar,ERROR_LINE())+'> ErrorMessage : <'+Convert(varchar,ERROR_MESSAGE())+'>';            
  END CATCH                          
 SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[core_usp_ApproveCompetition]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_ApproveCompetition]      
@CompetitionStagingID bigint,    
@LanguageID INTEGER=1,                    
@UserID bigint=NULL,                  
@RoleID bigint=NULL,                  
@ImpersonationUserID bigint,                  
@SpResponseStatus int OUTPUT,                  
@SpResponseMessage nvarchar(max) OUTPUT,                  
@SpErrorDetails nvarchar(max) OUTPUT     
AS        
      
BEGIN TRY                    
  Set @SpResponseStatus=1;                   
  Set @SpResponseMessage='Success';                  
  Set @SpErrorDetails=NULL;                  
  SET NOCOUNT ON;     
    
	 update coc_competition_staging  set IsAdminApproved=1 where CompetitionStagingID=@CompetitionStagingID

  select cs.CompetitionStagingID, 
   Convert(varchar(10),CONVERT(date,cs.StartDate,106),103) as StartDate,  
   Convert(varchar(10),CONVERT(date,cs.EndDate,106),103) as EndDate,  
   cs.NoOfCoupons,  
   (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=cs.CompetitionStagingID and ResourceKey='ContestName' and languageid=1) as ContestNameEn,  
   (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=cs.CompetitionStagingID and ResourceKey='ContestName' and languageid=2) as ContestNameArabic,  
   (select MobileNumber from coc_Corporates(nolock) where corporateID=cs.CorporateID) as MobileNumber,
   (select EmailID from coc_Corporates(nolock) where corporateID=cs.CorporateID) as CorporateEmailID
   from coc_competition_staging(nolock) cs where cs.CompetitionStagingID=@CompetitionStagingID
	 
     
  END TRY                              
  BEGIN CATCH                    
  Set @SpResponseStatus=0;                   
  Set @SpResponseMessage='GenericError';                  
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>, ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                      
                          
  END CATCH                              
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_ApprovePurchaseBarcode]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_ApprovePurchaseBarcode]         
  @PaymentID bigint,        
  @NoOfApprovalBarcodes bigint,        
  @CreatedBy int,                   
  @LanguageID int=1                   
 ,@UserID bigint=null                   
 ,@RoleID bigint=null                    
 ,@ImpersonationUserID bigint=null                     
 ,@SpResponseStatus int out      
 ,@OutBarcodePurchaseId bigint=null out
 ,@SpResponseMessage nvarchar(max) out                     
 ,@SpErrorDetails nvarchar(max)    out                       
 AS                        
 SET NOCOUNT ON                       
 BEGIN                         
  BEGIN TRY        
   declare @ActualTotalBarcodes bigint    
   declare @BarcodePurchaseId bigint     
   declare @TotalApprovalBarcodes bigint    
   declare @corporateId bigint    
    
  select @BarcodePurchaseId=BarcodePurchaseId from coc_BarcodePurchasePayment(nolock) where BarcodePurcahsePaymentId=@PaymentID      
  select @ActualTotalBarcodes=NoOfBarcodes from coc_BarcodePurchase(nolock) where BarcodePurchaseId=@BarcodePurchaseId    
  select @TotalApprovalBarcodes=sum(IsNull(NOfBarcodesApproved,0)) from coc_BarcodePurchasePayment(nolock) where BarcodePurchaseId=@BarcodePurchaseId and BarcodePurcahsePaymentId =@PaymentID    
  Set @OutBarcodePurchaseId=@BarcodePurchaseId  
  update coc_BarcodePurchasePayment set [Status]=4  where  BarcodePurchaseId=@BarcodePurchaseId  and BarcodePurcahsePaymentId=@PaymentID        
   if(@ActualTotalBarcodes>=@TotalApprovalBarcodes+@NoOfApprovalBarcodes)    
   begin    
  update coc_BarcodePurchasePayment set NOfBarcodesApproved=@NoOfApprovalBarcodes     
  where BarcodePurcahsePaymentId=@PaymentID      
    
       
  select @TotalApprovalBarcodes=sum(NOfBarcodesApproved) from coc_BarcodePurchasePayment(nolock) where BarcodePurchaseId=@BarcodePurchaseId    
       
  update coc_BarcodePurchase   
  set NoOfBarCodesApproved=@TotalApprovalBarcodes,  
      ApprovedAdminId=@CreatedBy,AdminApprovedDate=getdate()        
  where BarcodePurchaseId=@BarcodePurchaseId  
  
  --Make sure there is no record exists with the barcodepurcahsepaymentid    
  --If exists update the record (this is not likely to occur) else insert    
    
    
  if(exists(select BarcodeConsumptionID from coc_BarcodesConsumption (NOLOCK) where BarcodePurchasePaymentID=@PaymentID))    
  BEGIN    
   UPDATE coc_BarcodesConsumption SET NoOfBarcodesApproved = @NoOfApprovalBarcodes where BarcodePurchasePaymentID=@PaymentID    
  END    
  ELSE    
  BEGIN    
   select @corporateId = corporateId from coc_barcodepurchase (NOLOCK) where barcodepurchaseid=@barcodepurchaseId    
   insert into coc_BarcodesConsumption (CorporateId, BarcodePurchasePaymentId,Date, NoOfBarcodesApproved,BarcodeExpiryDate)    
   values (@corporateId,@PaymentID,getdate(), @NoOfApprovalBarcodes,(select DATEADD(year, 1,  getDate())) )    
    
  END    
  Set @SpErrorDetails='0';      
       
  select c.CorporateName as Name,              
  c.MobileNumber,c.EmailID              
  ,bp.Date as AddDate,bp.PurchaseNo as InvoiceID,bp.NoOfBarcodes as NumberOfBarcodes,cbp.Price as Rate,      
  bp.Amount as Total,bp.TotalAmount as TotalWithVat              
  ,bp.Tax as VatAmount,      
  (case when @LanguageID=1 then cc.CurrencySymbol_en else cc.CurrencySymbol_ar end) as Currency,      
  (Select sum(PaidAmount) from coc_BarcodePurchasePayment(nolock) where BarcodePurchaseId=bp.BarcodePurchaseId and Status!=5) AS TotalPaidAmount      
  from coc_BarcodePurchase(nolock) bp               
  inner join coc_BarcodePrices(nolock) cbp on cbp.BarcodePriceId=bp.BarcodePriceId      
  inner join Coc_Currency(nolock) cc on cc.CurrencyId=cbp.CurrencyId      
  inner join coc_Corporates(nolock) c on c.CorporateID=bp.CorporateID                  
  where bp.BarcodePurchaseId=@BarcodePurchaseId        
  end    
  else    
  begin    
      Set @SpResponseStatus=0;                           
                    
 Set @SpResponseMessage='approval barcodes are exceeded';       
  end    
    
    
  END TRY                    
                  
  BEGIN CATCH                  
           
  Set @SpResponseStatus=0;                           
                    
 Set @SpResponseMessage='GenericError';                             
           
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,     
 ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>,     
 ErrorState : <'+convert(varchar(500), Error_state())+'> ,     
 ErrorProcedure : <'+Error_procedure() +'> ,    
 ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                            
                  
  END CATCH                   
                  
 SET NOCOUNT OFF                     
                  
 END  

GO
/****** Object:  StoredProcedure [dbo].[core_usp_APPROVEREJECTVOUCHER]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_APPROVEREJECTVOUCHER] 
@EVoucherID INTEGER                 
,@UserID INTEGER                     
,@RoleID bigint                  =null    
,@VoucherStatus int                  
,@ReasonForReject nvarchar(max)  =null    
,@ReasonForInActive  nvarchar(max)  =null    
,@ImpersonationUserID bigint     =null    
,@SpResponseStatus int            OUTPUT    
,@SpResponseMessage nvarchar(500) OUTPUT    
,@SpErrorDetails nvarchar(500)    OUTPUT    
AS    
    
 if (@RoleID <> 1)    
 begin    
  Set @SpResponseStatus=0;    
  Set @SpResponseMessage='UnSuccess';    
  Set @SpErrorDetails='Access denied';    
  return;    
 end    
    
 BEGIN TRY    
 BEGIN TRANSACTION SaveEVoucherTermsData;    
 Set @SpResponseStatus=1;    
 Set @SpResponseMessage='Success';    
 Set @SpErrorDetails=NULL;    
    
 Declare @EServiceID int    
 Declare @xmldata nvarchar(max)    
 Declare @NotificationID bigint    
 Declare @NoOfBarcodes int=0    
 Declare @CorporateID int    
if (@VoucherStatus = 4)--43 for Inactive Voucher  
begin  
 UPDATE coc_EVoucher    
           SET IsActive        = 0    
  ,   LastInActiveDate        = getdate()    
  ,   LastInActiveDescription = @ReasonForInActive    
  WHERE EVoucherID = @EVoucherID    
end  
 else --for reject or approve ..etc   
 begin  
 if (@VoucherStatus = 3)--3 for approved    
 BEGIN    
    
  UPDATE coc_EVoucher    
  SET IsActive      = 1    
  ,   CurrentStatus = 3    
  ,   EditDate      = getdate()    
  ,   EditedUserID  = @UserID    
  WHERE EVoucherID = @EVoucherID    
    
 END    
 ELSE -- 2 for rejected    
  UPDATE coc_EVoucher    
  SET IsActive        = 0    
  ,   CurrentStatus   = 2    
  ,   EditDate        = getdate()    
  ,   EditedUserID    = @UserID    
  ,   ReasonForReject = @ReasonForReject    
  WHERE EVoucherID = @EVoucherID    
  end  
 COMMIT TRANSACTION SaveEVoucherTermsData    
 END TRY    
 BEGIN CATCH    
 ROLLBACK TRANSACTION SaveEVoucherTermsData    
 Set @SpResponseStatus=0;    
 Set @SpResponseMessage='GenericError';    
 Set @SpErrorDetails ='ErrorNumber : <' + Convert(varchar,ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(varchar,ERROR_SEVERITY())+'>, ErrorState : <'+Convert(varchar,ERROR_STATE())+'> , ErrorProcedure : <'+Convert(varchar,ERROR_PROCEDURE())+'> , ErrorLine <'+Convert(varchar,ERROR_LINE())+'> ErrorMessage : <'+Convert(varchar,ERROR_MESSAGE())+'>';    
 END CATCH;    
  
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_BroadcastGeneralNotification]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_BroadcastGeneralNotification]  
  @GeneralNotificationId bigint
 ,@IsBrodaCast   bit 
 ,@IsActive      bit
 ,@LanguageID int=1             
 ,@UserID int=null               
 ,@RoleID int=null                
 ,@ImpersonationUserID bigint=null                 
 ,@SpResponseStatus int out               
 ,@SpResponseMessage nvarchar(max) out                 
 ,@SpErrorDetails nvarchar(max)    out                   
 AS                    
 SET NOCOUNT ON                   
 BEGIN                     
  BEGIN TRY 
        update coc_GeneralNotification
	     set IsBrodaCast=@IsBrodaCast,
		     IsActive=@IsActive
		  where GeneralNotificationId=@GeneralNotificationId
	   Set @SpResponseStatus=1;   
       Set @SpResponseMessage='Success';   
	   set @SpErrorDetails='Success'; 
	     
  END TRY                
              
  BEGIN CATCH                
              
  Set @SpResponseStatus=0;  
  Set @SpResponseMessage='GenericError';    
  Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,
  ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, 
  ErrorState : <'+convert(varchar(500), Error_state())+'> , 
  ErrorProcedure : <'+Error_procedure() +'>,
  ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                        
              
  END CATCH               
              
 SET NOCOUNT OFF                 
              
 END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_ChangeCompetitionStagingStatus]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_ChangeCompetitionStagingStatus]                
@CompetitionStageID bigint=NULL,         
@StatusTypeID int=NULL,        
@EntryDate DATETIME,        
@Status nvarchar(10),        
@CheckLists XML=NULL,                      
@RejectionReason NVARCHAR(1000)=NULL,        
@IsAdminPartialRejection bit=NULL,        
@LanguageID INTEGER=1,                              
@UserID bigint=NULL,                            
@RoleID bigint=NULL,                            
@ImpersonationUserID bigint,                            
@SpResponseStatus int OUTPUT,                            
@SpResponseMessage nvarchar(max) OUTPUT,                            
@SpErrorDetails nvarchar(max) OUTPUT              
                  
AS                  
                
BEGIN TRY                              
  Set @SpResponseStatus=1;                             
  Set @SpResponseMessage='Success';                            
  Set @SpErrorDetails=NULL;     
  declare @EcouponID bigint  
  SET NOCOUNT ON;               
      if(@StatusTypeID=1)        
   begin        
      delete from coc_competition_staging_checklists where CompetitionStagingID=@CompetitionStageID    
      INSERT INTO coc_competition_staging_checklists                      
   SELECT @CompetitionStageID,                    
   CheckList.value('(@CheckListID)','INTEGER')                      
   FROM @CheckLists.nodes('/XML/Row') AS Data(CheckList)           
   if(@Status='1')        
  begin         
             
    if(exists(select * from coc_competition_staging_rejections(nolock) where CompetitionStagingID=@CompetitionStageID and type=1 and ApprovedOrRejectionDate is null))        
     begin        
        update coc_competition_staging_rejections set AdminStatus=1,Entrydate=@EntryDate,ApprovedOrRejectionDate=getdate() where CompetitionStagingID=@CompetitionStageID and type=1  and ApprovedOrRejectionDate is null        
        update coc_competition_staging set IsAdminApproved=1,IsAdminRejected=NULL,AdminRejectionReason=NULL,        
            AdminApprovedOn=getdate(),AdminRejectedOn=NULL,AdminEntryDate=@EntryDate,AdminApprovedUserID=@UserID,AdminRejectionUserID=NULL where CompetitionStagingID=@CompetitionStageID        
     end        
     else        
     begin        
        update coc_competition_staging set IsAdminApproved=1,IsAdminRejected=NULL,AdminRejectionReason=NULL,        
            AdminApprovedOn=getdate(),AdminRejectedOn=NULL,AdminEntryDate=@EntryDate,AdminApprovedUserID=@UserID,AdminRejectionUserID=NULL where CompetitionStagingID=@CompetitionStageID        
      insert into coc_competition_staging_rejections      
        select @CompetitionStageID,1,1,NULL,@EntryDate,getdate(),getdate(),NULL,1,@UserID      
     end        
  end        
  else if(@Status='0')        
  begin        
    if(exists(select * from coc_competition_staging_rejections(nolock) where CompetitionStagingID=@CompetitionStageID and type=1 and ApprovedOrRejectionDate is null))        
     begin        
        update coc_competition_staging_rejections set AdminStatus=0,ReasonForRejection=@RejectionReason,        
            Entrydate=@EntryDate,ApprovedOrRejectionDate=getdate(),IsAdminPartialRejection=@IsAdminPartialRejection,CreatedBy=@UserID where CompetitionStagingID=@CompetitionStageID and type=1  and ApprovedOrRejectionDate is null        
        update coc_competition_staging set IsAdminPartialRejection=@IsAdminPartialRejection where CompetitionStagingID=@CompetitionStageID        
     end        
     else        
     begin        
        update coc_competition_staging set IsAdminApproved=NULL,IsAdminRejected=1,AdminRejectionReason=@RejectionReason,        
            AdminApprovedOn=NULL,AdminRejectedOn=getdate(),AdminEntryDate=@EntryDate,AdminApprovedUserID=NULL,AdminRejectionUserID=@UserID,IsAdminPartialRejection=@IsAdminPartialRejection where CompetitionStagingID=@CompetitionStageID        
      insert into coc_competition_staging_rejections      
          select @CompetitionStageID,1,0,@RejectionReason,@EntryDate,getdate(),getdate(),@IsAdminPartialRejection,1,@UserID      
    end        
  end        
   end      
   else if(@StatusTypeID=2)        
   begin        
     if(@Status='1')        
  begin         
   if not exists(select * from coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStageID and IsChamberRejected=1)    
   begin    
     update coc_competition_staging set IsChamberApproved=1,IsChamberRejected=NULL,ChamberRejectionReason=NULL,        
                    ChamberApprovedOn=getdate(),ChamberRejectedOn=NULL,ChamberEntryDate=@EntryDate,ChamberApprovedUserID=@UserID,ChamberRejectionUserID=NULL     
     where CompetitionStagingID=@CompetitionStageID        
   end    
   else     
   begin    
     update coc_competition_staging set IsChamberApproved=1,IsChamberRejected=NULL,ChamberRejectionReason=NULL,        
      ChamberApprovedOn=getdate(),ChamberRejectedOn=NULL,ChamberEntryDate=@EntryDate,ChamberApprovedUserID=@UserID,ChamberRejectionUserID=NULL,    
      ChamberRevokeRejectionOn=getdate(),ChamberRevokeRejectionUserID=@UserID where CompetitionStagingID=@CompetitionStageID     
   end    
   if(exists(select * from coc_competition_staging_rejections(nolock) where CompetitionStagingID=@CompetitionStageID and type=2 and ApprovedOrRejectionDate is null))        
    begin     
        update coc_competition_staging_rejections set AdminStatus=1,Entrydate=@EntryDate,ApprovedOrRejectionDate=getdate() where CompetitionStagingID=@CompetitionStageID and type=2  and ApprovedOrRejectionDate is null        
    end    
    else    
    begin    
        insert into coc_competition_staging_rejections      
                     select @CompetitionStageID,1,1,NULL,@EntryDate,getdate(),getdate(),NULL,2,@UserID      
    end    
    
  end        
  else if(@Status='0')        
  begin        
    update coc_competition_staging 
	set		IsChamberApproved=NULL,
			IsChamberRejected=1,
			ChamberRejectionReason=@RejectionReason, 
			ChamberApprovedPDF=NULL,--Added because corporate can upload again
            ChamberApprovedOn=NULL,ChamberRejectedOn=getdate(),ChamberEntryDate=@EntryDate,ChamberApprovedUserID=NULL,ChamberRejectionUserID=@UserID where CompetitionStagingID=@CompetitionStageID     
       
    
          if(exists(select * from coc_competition_staging_rejections(nolock) where CompetitionStagingID=@CompetitionStageID and type=2 and ApprovedOrRejectionDate is null))        
    begin     
        update coc_competition_staging_rejections set AdminStatus=0,ReasonForRejection=@RejectionReason,        
                              Entrydate=@EntryDate,ApprovedOrRejectionDate=getdate(),IsAdminPartialRejection=@IsAdminPartialRejection,CreatedBy=@UserID     
         where CompetitionStagingID=@CompetitionStageID and type=2  and ApprovedOrRejectionDate is null       
    end    
    else    
    begin    
        insert into coc_competition_staging_rejections      
                      select @CompetitionStageID,1,0,@RejectionReason,@EntryDate,getdate(),getdate(),@IsAdminPartialRejection,2,@UserID      
    end    
  end        
        
   end        
   else if(@StatusTypeID=3)        
   begin         
        
     if(@Status='1')        
  begin         
     update coc_competition_staging set IsActive=1,IsOnHold=NULL,OnHoldReason=NULL,        
            FinalApprovedDate=getdate(),OnHoldDate=NULL,FinalEntryDate=@EntryDate,FinalApprovedUserID=@UserID,OnHoldUserID=NULL where CompetitionStagingID=@CompetitionStageID     
       
   if(exists(select * from coc_competition_staging_rejections(nolock) where CompetitionStagingID=@CompetitionStageID and type=3 and ApprovedOrRejectionDate is null))        
    begin     
        update coc_competition_staging_rejections set AdminStatus=1,Entrydate=@EntryDate,ApprovedOrRejectionDate=getdate() where CompetitionStagingID=@CompetitionStageID and type=3  and ApprovedOrRejectionDate is null        
    end    
    else    
    begin    
        insert into coc_competition_staging_rejections      
                     select @CompetitionStageID,1,1,NULL,@EntryDate,getdate(),getdate(),NULL,3,@UserID      
    end    
  
   
  
 select @EcouponID=CompetitionId from coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStageID  
  
 update coc_ECoupons set IsActive=1,IsApproved=1,ApprovalDate=getdate() where ECouponID=@EcouponID  
  
 update Coc_Core_DynamicLinks set IsActive=1 where EcouponID=@EcouponID  
  
  
-- Declare @EServiceID int  
-- Declare @xmldata nvarchar(max)  
-- Declare @NotificationID bigint  
-- Declare @NoOfBarcodes int=0  
-- Declare @CorporateID int  
-- Declare @TotalTaskBarcodes int  
-- Declare @GenerateBarcodeCount int  
-- Declare @BarcodesRemainingCount int  
-- Declare @UsedBarcodesCount int  
-- Declare @RequiredBarcodeCount int  
-- Declare @AllowedBarcodeCount int  
  
-- select @NotificationID=ns.NotificationID,@EServiceID=ec.EServiceID,@NoOfBarcodes=cs.NoOfCoupons,@CorporateID=cs.CorporateID  
--   from   coc_competition_staging(NOLOCK) cs  
--   inner join coc_ECoupons(nolock) ec on ec.ECouponID=cs.CompetitionId  
--   inner join coc_EServices(NOLOCK)     es on es.EServiceID=ec.EServiceID  
--   inner join coc_Notifications(NOLOCK) ns on ns.EServiceID=ec.EServiceID  
--   where cs.CompetitionStagingID=@CompetitionStageID  
--if not exists(select * from coc_ServiceTask(nolock) where uniqueid=@EServiceID)  
--begin  
--  set @xmldata=N'<?xml version="1.0" encoding="utf-16"?><BarcodeGenerateParams xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ServiceID>'+Convert(nvarchar(20),@EServiceID)+'</ServiceID><NoOfBarcodes>'+Convert(nvarchar(20),@NoOfBarcodes)+'</NoOfBarcodes><NotificationID>'+Convert(nvarchar(20),@NotificationID)+'</NotificationID><ServiceTypeID>52</ServiceTypeID><Prefix>0</Prefix><Suffix>0</Suffix><CorporateID>'+Convert(nvarchar(20),@CorporateID)+'</CorporateID><LanguageID>1</LanguageID><UserId>'+Convert(nvarchar(20),@UserID)+'</UserId></BarcodeGenerateParams>'  
--   insert into coc_ServiceTask(TaskTypeId, Date, ExecuteDate, UniqueId, Parameters, UserId, Status, RowStatus )  
--   select 1  
--   ,      getdate()  
--   ,      getdate()  
--   ,      @EServiceID  
--   ,      @xmldata  
--   ,      @UserID  
--   ,      1  
--   ,      1  
--end  
  
  end        
  else if(@Status='0')        
  begin        
    update coc_competition_staging set IsActive=NULL,IsOnHold=1,OnHoldReason=@RejectionReason,        
            FinalApprovedDate=NULL,OnHoldDate=getdate(),FinalEntryDate=@EntryDate,FinalApprovedUserID=NULL,OnHoldUserID=@UserID where CompetitionStagingID=@CompetitionStageID        
    
   if(exists(select * from coc_competition_staging_rejections(nolock) where CompetitionStagingID=@CompetitionStageID and type=3 and ApprovedOrRejectionDate is null))        
    begin     
        update coc_competition_staging_rejections set AdminStatus=0,ReasonForRejection=@RejectionReason,        
                              Entrydate=@EntryDate,ApprovedOrRejectionDate=getdate(),IsAdminPartialRejection=@IsAdminPartialRejection,CreatedBy=@UserID     
         where CompetitionStagingID=@CompetitionStageID and type=3  and ApprovedOrRejectionDate is null       
    end    
    else    
    begin    
  
        insert into coc_competition_staging_rejections      
                      select @CompetitionStageID,1,0,@RejectionReason,@EntryDate,getdate(),getdate(),@IsAdminPartialRejection,3,@UserID      
    end    
    
     
  
 select @EcouponID=CompetitionId from coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStageID  
  
 update coc_ECoupons set IsActive=0,IsApproved=0,ApprovalDate=NULL where ECouponID=@EcouponID  
  
 update Coc_Core_DynamicLinks set IsActive=0 where EcouponID=@EcouponID  
  
  end        
        
   end        
         
 select cs.CompetitionStagingID,           
    Convert(varchar(10),CONVERT(date,cs.StartDate,106),103) as StartDate,            
    Convert(varchar(10),CONVERT(date,cs.EndDate,106),103) as EndDate,            
    cs.NoOfCoupons,  
	cs.ChamberApprovedPDF,
    (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=cs.CompetitionStagingID and ResourceKey='ContestName' and languageid=1) as ContestNameEn,            
    (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=cs.CompetitionStagingID and ResourceKey='ContestName' and languageid=2) as ContestNameArabic,            
    (select isnull(MobileNumber,PhoneNumber) from coc_Corporates(nolock) where corporateID=cs.CorporateID) as MobileNumber,          
    (select EmailID from coc_Corporates(nolock) where corporateID=cs.CorporateID) as CorporateEmailID          
    from coc_competition_staging(nolock) cs where cs.CompetitionStagingID=@CompetitionStageID        
        
                
  END TRY                                        
  BEGIN CATCH                              
  Set @SpResponseStatus=0;                             
  Set @SpResponseMessage='GenericError';                            
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>, ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                                
                                    
  END CATCH                                        
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_ChangePassword]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Narender Gorige 
-- Create date: 08 April 2021 
-- Description: Change Password  
-- =============================================  
create PROCEDURE [dbo].[core_usp_ChangePassword]  
 -- Add the parameters for the stored procedure here  
 @MobileNumber nvarchar(15)     = NULL,  
 @EmailID nvarchar(100) = null,  
 @Password NVARCHAR(55),  
 @LanguageID INTEGER = 1,  
 @ImpersonationUserID bigint=null,  
 @SpResponseStatus int = null out,  
 @SpResponseMessage nvarchar(max) = null out,  
 @SpErrorDetails nvarchar(max) = null out,   
 @OldPassword NVARCHAR(55) = NULL  
AS  
 Begin Try     
  
  Set @SpResponseStatus=1;       
  Set @SpResponseMessage='Success';      
  Set @SpErrorDetails='Success';   
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
 declare @UserID int;
 DECLARE @isValidPassword bit = 0;
 IF (@EmailID is not null) AND EXISTS(SELECT EmailId    
  FROM COC_USERS (NOLOCK)    
  WHERE EmailID = @EmailID AND (IsActive = 1 and IsDeleted = 0))    
 BEGIN    
  select @UserID = UserID, @isValidPassword = case when [Password] = @OldPassword then 1 else 0 end
  FROM COC_USERS (NOLOCK)    
  WHERE EmailID = @EmailID AND (IsActive = 1 and IsDeleted = 0)
  
  if (@isValidPassword = 1)  
      UPDATE COC_USERS    
      SET [Password]    = @Password    
      ,   ResetRequired = 0    
      WHERE EmailID = @EmailID and userid = @userid  
   else
   begin
        Set @SpResponseStatus=8;       
        Set @SpResponseMessage='MsgIncorrectPassword';
        Set @SpErrorDetails='Incorrect Password';   
   end
    
 END    
 ELSE IF (@MobileNumber is not null) and EXISTS(SELECT MobileNumber    
   FROM COC_USERS (NOLOCK)    
   WHERE MobileNumber = @MobileNumber AND @MobileNumber IS NOT NULL and (IsActive = 1 and IsDeleted = 0))    
    
  BEGIN    
   select @UserID = UserID, @isValidPassword = case when [Password] = @OldPassword then 1 else 0 end    
   FROM COC_USERS (NOLOCK)    
   where MobileNumber = @MobileNumber and (IsActive = 1 and IsDeleted = 0)    
   if (@isValidPassword = 1)  
       UPDATE COC_USERS    
       SET [Password]    = @Password    
       ,   ResetRequired = 0    
       WHERE MobileNumber = @MobileNumber and userid = @userid 
   else
   begin
        Set @SpResponseStatus=8;       
        Set @SpResponseMessage='MsgIncorrectPassword';
        Set @SpErrorDetails='Incorrect Password';   
   end
  END    
      
END TRY                  
  BEGIN CATCH        
  Set @SpResponseStatus=0;       
  Set @SpResponseMessage='GenericError';      
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
  
  END CATCH                  
 SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_CheckNickName]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[Core_Usp_CheckNickName] @NickName nvarchar(250)
,                                               @KIoskLocationID int   =NULL
,                                               @IsExist bit            out
AS
	SET NOCOUNT ON
BEGIN
	if (@KIoskLocationID=0)
		set @KIoskLocationID=NULL;
	set @IsExist=0
	if exists (select *
		from coc_KioskLocations(nolock)
		where NickName=@NickName and (@KIoskLocationID is null or KioskLocationID!=@KIoskLocationID))
		set @IsExist=1
END
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_CheckUserName]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[Core_Usp_CheckUserName] @UserName nvarchar(250)
,                                               @KIoskLocationID int   =NULL
,                                               @IsExist bit            out
AS
	SET NOCOUNT ON
BEGIN
	if (@KIoskLocationID=0)
		set @KIoskLocationID=NULL;
	set @IsExist=0
	if exists (select *
		from coc_KioskLocations(nolock)
		where UserName=@UserName and (@KIoskLocationID is null or KioskLocationID!=@KIoskLocationID))
		set @IsExist=1
END
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_ConfirmConsumers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_ConfirmConsumers]    
 @ConsumerName [Name]=NULL,    
 @MobileNo [Mobile],    
 @Password NVARCHAR(125),    
 @VerificationCode [NullPin],    
 @ConsumerID INTEGER OUTPUT,    
 @ErrorMessage [Remark] OUTPUT     
AS     
SET NOCOUNT ON    
 DECLARE @IsVerified BIT=0    
 DECLARE @EmailID [Email]    
 DECLARE @UserID INTEGER    
 DECLARE @OtpID INTEGER    
    
 SET @ErrorMessage = ''    
 BEGIN TRY    
  SELECT @OtpID= OtpID FROM coc_OTP(NOLOCK) WHERE Otp=@VerificationCode    
    
  IF EXISTS(SELECT  NULL FROM [COC_Consumers](NOLOCK) WHERE PrimaryMobile = @MobileNo AND OtpID=@OtpID)--FirstName = @ConsumerName AND     
  BEGIN    
   SELECT  @IsVerified=ISNULL(IsVerified,0),@ConsumerID=ConsumerID,@EmailID=EmailID     
    FROM [COC_Consumers](NOLOCK)     
     WHERE PrimaryMobile = @MobileNo AND OtpID=@OtpID   --FirstName = @ConsumerName AND     
   IF(@IsVerified=0)    
   BEGIN    
    UPDATE [COC_Consumers]    
     SET IsVerified=1, VerificationDate=GETDATE()    
    WHERE  PrimaryMobile = @MobileNo AND OtpID=@OtpID --FirstName = @ConsumerName AND    
    
    IF EXISTS (SELECT USERID FROM [COC_Consumers](NOLOCK) WHERE ConsumerID = @ConsumerID AND USERID IS NULL)     
    BEGIN    
     INSERT INTO [COC_Users](UserName,Password,RoleID,MobileNumber,EmailID,PhoneNumber,ResetRequired,IsActive,CreatedDate)    
      SELECT @EmailID,@Password,5,@MobileNo,@EmailID,@MobileNo,0,1,GETDATE()      
     SET @UserID=SCOPE_IDENTITY()    
    
     UPDATE [COC_Consumers]    
     SET UserID = @UserID    
     WHERE ConsumerID=@ConsumerID    
    END    
   END    
   ELSE    
   BEGIN    
    SET @ErrorMessage = 'RegistrationalreadyVerified'    
   END    
  END    
  ELSE    
  BEGIN    
   SET @ErrorMessage = 'InvalidVerificationCode'    
  END    
  IF(@ErrorMessage='' AND @ConsumerID <> 0)
  BEGIN
   UPDATE coc_Consumers  set IsMobileVerified=1 where ConsumerID=@ConsumerID
  END      
 END TRY    
 BEGIN CATCH             
  SELECT @ErrorMessage=ERROR_MESSAGE()    
  RAISERROR(@ErrorMessage, 16, 1);       
 END CATCH    
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_ConsumerEditProfile]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_ConsumerEditProfile]
 @ConsumerID int
,@FirstName NVARCHAR(200)          
,@SecondName NVARCHAR(200) = NULL
,@FamilyName NVARCHAR(200) = NULL
,@BirthDate [datetime] = NULL
,@AgeGroupID [int] = NULL
,@KnowECouponID [int] = NULL
,@Address1 [dbo].[Address] = NULL
,@Address2 [dbo].[Address] = NULL
,@PrimaryMobile VARCHAR(15) = NULL      
,@SecondaryMobile VARCHAR(15) = NULL      
,@EmailID VARCHAR(100)           
,@CountryID INT  = Null                 
,@Gender    INT  =null               
,@ImageFile NVARCHAR(100)         = NULL
,@CityID [int] = NULL
,@NationalityID int = null
,@MembershipNumber [dbo].[NullCode] = NULL
,@IqamaNumber [dbo].[NullCode] = NULL
,@LanguageID int                 =  1
,@UserID bigint                  =  null
,@RoleID bigint                  =  null
,@ImpersonationUserID bigint     =  null
,@SpResponseStatus int            out
,@SpResponseMessage nvarchar(max) out
,@SpErrorDetails nvarchar(max)    out
AS

	BEGIN TRY
	if @LanguageID=0
	begin
		set @LanguageID=1
	end
	BEGIN TRANSACTION SaveConsumerUser

	IF EXISTS(SELECT ConsumerID FROM coc_ConsumerProfileEdit (NOLOCK) WHERE ConsumerID = @ConsumerID)
	  BEGIN
	   
	   UPDATE coc_ConsumerProfileEdit SET
	     FirstName = @FirstName
		,SecondName = @SecondName
		,FamilyName = @FamilyName 
		,BirthDate = @BirthDate 
		,AgeGroupID = @AgeGroupID
		,KnowECouponID = @KnowECouponID 
		,Address1 = @Address1 
		,Address2 = @Address2
		--,PrimaryMobile = @PrimaryMobile 
		,SecondaryMobile = @SecondaryMobile
		--,EmailID = @EmailID 
		,CountryID = @CountryID
		,Gender = @Gender    
		,ImageFile = @ImageFile 
		,CityID = @CityID 
		,NationalityID = @NationalityID 
		,MembershipNumber = @MembershipNumber
		,IqamaNumber = @IqamaNumber
		,EditDate = GETDATE()
		,StatusID = 5--pending
	   WHERE ConsumerID = @ConsumerID 
	   
	  END
	ELSE
	  BEGIN
	    Insert into coc_ConsumerProfileEdit (ConsumerID
	    ,FirstName 
		,SecondName 
		,FamilyName 
		,BirthDate 
		,AgeGroupID 
		,KnowECouponID 
		,Address1 
		,Address2 
		,PrimaryMobile 
		,SecondaryMobile 
		,EmailID 
		,CountryID 
		,Gender 
		,ImageFile 
		,CityID 
		,NationalityID 
		,MembershipNumber 
		,IqamaNumber 
		,AddDate
		,StatusID
		,UserID)
		select
		 @ConsumerID
		,@FirstName 
		,@SecondName 
		,@FamilyName 
		,@BirthDate 
		,@AgeGroupID 
		,@KnowECouponID 
		,@Address1 
		,@Address2 
		,@PrimaryMobile 
		,@SecondaryMobile 
		,@EmailID 
		,@CountryID 
		,@Gender 
		,@ImageFile 
		,@CityID 
		,@NationalityID 
		,@MembershipNumber 
		,@IqamaNumber 
		,GETDATE()
		,5--pending
		,@UserID
	  END

	Set @SpResponseStatus=1;
	Set @SpResponseMessage='Success';
	Set @SpErrorDetails='Success';
	COMMIT TRANSACTION SaveConsumerUser --end transaction
	END TRY
	BEGIN CATCH
	ROLLBACK TRANSACTION SaveConsumerUser
	Set @SpResponseStatus=0;
	Set @SpResponseMessage='GenericError';
	Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,
	 ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>,
	  ErrorState : <'+convert(varchar(500), Error_state())+'> ,
	   ErrorProcedure : <'+Error_procedure() +'> ,ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';

	END CATCH

	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_ConsumerEmailVerification]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================          
      
-- Author:  <Shaik Layeeqh>          
      
-- Create date: <Nov-07-2019>          
      
-- Description: core_usp_ConsumerEmailVerification         
      
-- =============================================          
      
CREATE PROCEDURE [dbo].[core_usp_ConsumerEmailVerification]
  @ConsumerID int 
 ,@IsEmailVerified bit=1
 ,@LanguageID int=null     
 ,@UserID bigint=null     
 ,@RoleID bigint=null      
 ,@ImpersonationUserID bigint=null       
 ,@SpResponseStatus int out     
 ,@SpResponseMessage nvarchar(max) out       
 ,@SpErrorDetails nvarchar(max)    out      
  AS  
  BEGIN TRY     
   if @LanguageID=0      
   begin     
   set @LanguageID=1        
   end          
    Update coc_Consumers   set  IsEmailVerified= @IsEmailVerified where ConsumerID=@ConsumerID
  Set @SpResponseStatus=1;      
  Set @SpResponseMessage='Success';     
  Set @SpErrorDetails=NULL;       
  END TRY                        
      
  BEGIN CATCH                 
      
 Set @SpResponseStatus=0;             
      
 Set @SpResponseMessage='GenericError';               
      
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';              
      
 END CATCH                        
      
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_ConsumerRegistration]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================

-- Author:  <Shaik Layeeqh>

-- Create date: <Oct-15-2019>

-- Description: core_usp_ConsumerRegistration

-- =============================================


CREATE PROCEDURE [dbo].[core_usp_ConsumerRegistration] @FirstName NVARCHAR(200)        
,                                             @SecondName NVARCHAR(200)       
,                                             @PrimaryMobile VARCHAR(15)      
,                                             @EmailID VARCHAR(100)           
,                                             @Password VARCHAR(200)          
,                                             @CountryID INT                  
,                                             @OtpID INT                      
,                                             @ImageFile NVARCHAR(100)         = NULL
,                                             @IsFromCompetitionLink bit       = null
,                                             @ErrorMessage VARCHAR(500)       OUTPUT
,                                             @LanguageID int                 =  1
,                                             @UserID bigint                  =  null
,                                             @RoleID bigint                  =  null
,                                             @ImpersonationUserID bigint     =  null
,                                             @SpResponseStatus int            out
,                                             @SpResponseMessage nvarchar(max) out
,                                             @SpErrorDetails nvarchar(max)    out
AS

	BEGIN TRY
	if @LanguageID=0
	begin
		set @LanguageID=1
	end
	BEGIN TRANSACTION SaveConsumerUser

	DECLARE @LoyaltyPoint INTEGER;
	DECLARE @MemberShipID NVARCHAR(40) = NEWID();
	DECLARE @yearDiff INTEGER;
	DECLARE @AgeGroupID INTEGER;
	DECLARE @ConsumerID INTEGER;
	DECLARE @cocUserID INT;
	DECLARE @cocConsumerID INT;
	DECLARE @cocOtpID INT;
	DECLARE @cocOtpExpiry DATETIME;

	--if email exists in consumer table and not verified :
	IF EXISTS (
		SELECT 1
		FROM coc_Consumers(NOLOCK)
		WHERE EmailID = @EmailID
			AND IsVerified = 0 and IsDeleted = 0
		) --if begin
	BEGIN
		SELECT @cocUserID = UserID
		,      @cocConsumerID = ConsumerID
		,      @cocOtpID = otpid
		FROM coc_Consumers (NOLOCK)
		WHERE EmailID = @EmailID
			AND IsVerified = 0 and IsDeleted = 0;

		SELECT @cocOtpExpiry = OtpExpity
		FROM coc_OTP (NOLOCK)
		WHERE otpID = @cocOtpID;

		IF (GetDate() > @cocOtpExpiry) --if begin
		BEGIN
			UPDATE coc_Consumers
			SET IsDeleted = 1
			,   IsActive  = 0
			WHERE ConsumerID = @cocConsumerID;

			UPDATE coc_Users
			SET IsDeleted = 1
			,   IsActive  = 0
			WHERE UserID = @cocUserID;
		END --end if
	END --end if

	--if mobile exists in consumer table and not verified:
	IF EXISTS (
		SELECT 1
		FROM coc_Consumers(NOLOCK)
		WHERE PrimaryMobile = @PrimaryMobile
			AND IsVerified = 0 and IsDeleted = 0
		) --if begin
	BEGIN
		SELECT @cocUserID = UserID
		,      @cocConsumerID = ConsumerID
		,      @cocOtpID = otpid
		FROM coc_Consumers (NOLOCK)
		WHERE PrimaryMobile = @PrimaryMobile
			AND IsVerified = 0 and IsDeleted = 0;

		SELECT @cocOtpExpiry = OtpExpity
		FROM coc_OTP (NOLOCK)
		WHERE otpID = @cocOtpID;

		IF (GetDate() > @cocOtpExpiry) --if begin
		BEGIN
			UPDATE coc_Consumers
			SET IsDeleted = 1
			,   IsActive  = 0
			WHERE ConsumerID = @cocConsumerID;

			UPDATE coc_Users
			SET IsDeleted = 1
			,   IsActive  = 0
			WHERE UserID = @cocUserID;
		END --end if
	END --end if

	--if email or mobile exists in Consumer or user table and not deleted
	IF EXISTS (
		SELECT 1
		FROM coc_Consumers(NOLOCK)
		WHERE (
			EmailID = @EmailID
			OR PrimaryMobile = @PrimaryMobile
			)
			AND (IsDeleted = 0 and IsActive = 1)
		)
		OR EXISTS (
		SELECT 1
		FROM coc_Users(NOLOCK)
		WHERE (
			EmailID = @EmailID
			OR MobileNumber = @PrimaryMobile
			)
			AND (IsDeleted = 0 and IsActive = 1)
		)
	BEGIN
		SET @ErrorMessage = 'EmailOrMobileAlreadyExists';
	END
	ELSE -- BEGIN ELSE
	BEGIN
		SELECT @LoyaltyPoint = SetupValue
		FROM coc_LoyaltyPointSetups(NOLOCK)
		WHERE LoyaltyPointSetupID = 101;

		--RoleID 5 is for consumer/Individual User
		INSERT INTO coc_Users ( UserName, [Password], RoleID, MobileNumber, EmailID, ResetRequired, CreatedDate )
		SELECT @EmailID
		,      @Password
		,      5
		,      @PrimaryMobile
		,      @EmailID
		,      0
		,      GETDATE()

		SET @USERID = SCOPE_IDENTITY()

		INSERT INTO COC_Consumers ( FirstName,  SecondName,  UserID,  PrimaryMobile,  EmailID,  CountryID,  IsActive, AddDate,   IsVerified, OtpID,  ImageFile,  LoyaltyPoint,  MembershipNumber,                     IsFromCompetitionLink,  IsEmailVerified )
		VALUES                    ( @FirstName, @SecondName, @USERID, @PrimaryMobile, @EmailID, @CountryID, 1,        GETDATE(), 0,          @OtpID, @ImageFile, @LoyaltyPoint, CONVERT(NVARCHAR(10), @MemberShipID), @IsFromCompetitionLink, 0               )

		SET @ConsumerID = SCOPE_IDENTITY()

		INSERT INTO coc_ConsumerPointDetails ( ConsumerID, PointDate, LoyaltyPoint, RedeemPoint, PointSource )
		SELECT @ConsumerID
		,      GETDATE()
		,      @LoyaltyPoint
		,      0
		,      101

		SET @ErrorMessage = @ConsumerID
	END --end else

	Set @SpResponseStatus=1;
	Set @SpResponseMessage='Success';
	Set @SpErrorDetails='Success';
	COMMIT TRANSACTION SaveConsumerUser --end transaction
	END TRY
	BEGIN CATCH
	ROLLBACK TRANSACTION SaveConsumerUser
	Set @SpResponseStatus=0;
	Set @SpResponseMessage='GenericError';
	Set @SpErrorDetails ='ErrorNumber';
	Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> ,ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';

	END CATCH

	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_usp_CountriesForRegistration]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_usp_CountriesForRegistration] 
(  
  @LanguageId int = 1 
 ,@UserID bigint=null 
 ,@RoleID bigint=null  
 ,@ImpersonationUserID bigint=null   
 ,@SpResponseStatus int out 
 ,@SpResponseMessage nvarchar(max) out   
 ,@SpErrorDetails nvarchar(max)    out   
)  
AS  
  
BEGIN  TRY
    if @LanguageID=0  
   begin 
   set @LanguageID=1    
   end  
		--coc_Countries order by c  
		--coc_CountryLanguages   
		SELECT cc.CountryID,cl.Country CountryName,cc.FlagImage, cc.ISOCode  
		from coc_Countries cc (NOLOCK) inner join coc_CountryLanguages cl (NOLOCK) on cc.CountryId = cl.CountryID  
		WHERE cl.LanguageId = @LanguageId and CC.IsActive = 1 and (cc.AllowRegistration = 1)  

		Set @SpResponseStatus=1;  
		Set @SpResponseMessage='Success'; 
		Set @SpErrorDetails=NULL;   
  END TRY                    
  
BEGIN CATCH             
  
 Set @SpResponseStatus=0;         
  
 Set @SpResponseMessage='GenericError';           
  
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';          
  
END CATCH                    
  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_CreateBarcodesForActiveCompetitions]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_CreateBarcodesForActiveCompetitions]
AS
	SET NOCOUNT ON
	Declare @EServiceID int
	Declare @xmldata nvarchar(max)
	Declare @NotificationID bigint
	Declare @NoOfBarcodes int=0
	Declare @CorporateID int
	Declare @TotalTaskBarcodes int
	Declare @GenerateBarcodeCount int
	Declare @BarcodesRemainingCount int
	Declare @UsedBarcodesCount int
	Declare @UserID int
	Declare @RequiredBarcodeCount int
	Declare @AllowedBarcodeCount int
	Declare @IsOpenQuantity bit

	
	Declare @CompetitionStagingID bigint

	declare @Competition table (NotificationID bigint,EServiceID int,NoOfBarcodes int,CorporateID int,IsOpenQuantity bit,CompetitionStagingID bigint)

	insert into @Competition
		select ns.NotificationID,ec.EServiceID,cs.NoOfCoupons,cs.CorporateID,isnull(cs.IsFromOpenQuantityLink,0),cs.CompetitionStagingID
			from   coc_competition_staging(NOLOCK) cs
			inner join coc_ECoupons(nolock) ec on ec.ECouponID=cs.CompetitionId
			inner join coc_EServices(NOLOCK)     es on es.EServiceID=ec.EServiceID
			inner join coc_Notifications(NOLOCK) ns on ns.EServiceID=ec.EServiceID
			where cs.IsActive=1 and ec.IsActive=1 and es.ToDate>=getdate()


	WHILE exists(select * from @Competition)
	BEGIN
		set @EServiceID=0
		set @xmldata=''
		set @NotificationID=0
		set @NoOfBarcodes=0
		set @CorporateID=0
		set @TotalTaskBarcodes=0
		set @GenerateBarcodeCount=0
		set @BarcodesRemainingCount=0
		set @UsedBarcodesCount=0
		set @UserID=0
		set @RequiredBarcodeCount=0
		set @AllowedBarcodeCount=0
		set @IsOpenQuantity=0
		set @CompetitionStagingID=0

		select top 1 @EServiceID=EServiceID
		,            @NoOfBarcodes=NoOfBarcodes
		,            @NotificationID=NotificationID
		,            @CorporateID=CorporateID
		,            @IsOpenQuantity=IsOpenQuantity
		,            @CompetitionStagingID=CompetitionStagingID
		from @Competition
		select @UserID=UserID
		from coc_corporates(NoLock)
		where CorporateID=@CorporateID


		print('ServiceID : '+Convert(nvarchar(20),@EServiceID));
		print('NotificationID : '+Convert(nvarchar(20),@NotificationID));
		
		if not exists(select * from coc_ServiceTask(nolock) where uniqueid=@EServiceID and (status=1 or status=3))
		begin
		     
			 if(@IsOpenQuantity=1 or exists(select * from coc_competition_staging_Services(nolock) where CompetitionStagingID=@CompetitionStagingID and CompetitionServiceId=9))
			 begin
			     declare @FirstTimeGenerateBarcodes int=500000
				 declare @SecondTimeGenerateBarcodes int=300000
				 declare @MinimumLimit int=200000
				 if exists(select * from coc_ServiceTask(nolock) where uniqueid=@EServiceID)
				 begin
				      set @BarcodesRemainingCount =(select Count(*) from coc_EServiceBarcodes(Nolock) where [IsUsed]=0 and ([AsignedMoile] is null OR AsignedEmailID is null) and NotificationID=@NotificationID)
					  if(@BarcodesRemainingCount<@MinimumLimit and not exists (select * from coc_ServiceTask(nolock) where uniqueid=@EServiceID and (status=1 or status=3)))   -- after 6 hours DATEDIFF(hour, ExecuteDate, getdate()) > 6 )
					  begin
					      set @xmldata=N'<?xml version="1.0" encoding="utf-16"?><BarcodeGenerateParams xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ServiceID>'+Convert(nvarchar(20),@EServiceID)+'</ServiceID><NoOfBarcodes>'+Convert(nvarchar(20),@SecondTimeGenerateBarcodes)+'</NoOfBarcodes><NotificationID>'+Convert(nvarchar(20),@NotificationID)+'</NotificationID><ServiceTypeID>52</ServiceTypeID><Prefix>0</Prefix><Suffix>0</Suffix><CorporateID>'+Convert(nvarchar(20),@CorporateID)+'</CorporateID><LanguageID>1</LanguageID><UserId>'+Convert(nvarchar(20),@UserID)+'</UserId></BarcodeGenerateParams>'  
    
						   insert into coc_ServiceTask(TaskTypeId, Date, ExecuteDate, UniqueId, Parameters, UserId, Status, RowStatus )  
						   select 1  
						   ,      getdate()  
						   ,      getdate()  
						   ,      @EServiceID  
						   ,      @xmldata  
						   ,      @UserID  
						   ,      1  
						   ,      1  
					  end
				 end
				 else 
				 begin

				    set @xmldata=N'<?xml version="1.0" encoding="utf-16"?><BarcodeGenerateParams xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ServiceID>'+Convert(nvarchar(20),@EServiceID)+'</ServiceID><NoOfBarcodes>'+Convert(nvarchar(20),@FirstTimeGenerateBarcodes)+'</NoOfBarcodes><NotificationID>'+Convert(nvarchar(20),@NotificationID)+'</NotificationID><ServiceTypeID>52</ServiceTypeID><Prefix>0</Prefix><Suffix>0</Suffix><CorporateID>'+Convert(nvarchar(20),@CorporateID)+'</CorporateID><LanguageID>1</LanguageID><UserId>'+Convert(nvarchar(20),@UserID)+'</UserId></BarcodeGenerateParams>'  
    
					   insert into coc_ServiceTask(TaskTypeId, Date, ExecuteDate, UniqueId, Parameters, UserId, Status, RowStatus )  
					   select 1  
					   ,      getdate()  
					   ,      getdate()  
					   ,      @EServiceID  
					   ,      @xmldata  
					   ,      @UserID  
					   ,      1  
					   ,      1  

				 end

			 end
			 else if not exists(select * from coc_ServiceTask(nolock) where uniqueid=@EServiceID)
			 begin
			      set @xmldata=N'<?xml version="1.0" encoding="utf-16"?><BarcodeGenerateParams xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ServiceID>'+Convert(nvarchar(20),@EServiceID)+'</ServiceID><NoOfBarcodes>'+Convert(nvarchar(20),@NoOfBarcodes)+'</NoOfBarcodes><NotificationID>'+Convert(nvarchar(20),@NotificationID)+'</NotificationID><ServiceTypeID>52</ServiceTypeID><Prefix>0</Prefix><Suffix>0</Suffix><CorporateID>'+Convert(nvarchar(20),@CorporateID)+'</CorporateID><LanguageID>1</LanguageID><UserId>'+Convert(nvarchar(20),@UserID)+'</UserId></BarcodeGenerateParams>'  
    
					   insert into coc_ServiceTask(TaskTypeId, Date, ExecuteDate, UniqueId, Parameters, UserId, Status, RowStatus )  
					   select 1  
					   ,      getdate()  
					   ,      getdate()  
					   ,      @EServiceID  
					   ,      @xmldata  
					   ,      @UserID  
					   ,      1  
					   ,      1 
			 end

		end

		delete @Competition where EServiceID=@EServiceID
	END
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_CreateBarcodesForActiveEvouchers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_CreateBarcodesForActiveEvouchers]
AS
	SET NOCOUNT ON
	Declare @EServiceID int
	Declare @xmldata nvarchar(max)
	Declare @NotificationID bigint
	Declare @NoOfBarcodes int=0
	Declare @CorporateID int
	Declare @GenerateExactNumberOfVouchers bit

	Declare @TotalTaskBarcodes int
	Declare @GenerateBarcodeCount int
	Declare @BarcodesRemainingCount int
	Declare @UsedBarcodesCount int
	Declare @UserID int
	Declare @RequiredBarcodeCount int
	Declare @AllowedBarcodeCount int

	declare @EVoucher table (NotificationID bigint
	,EServiceID     int
	,NoOfBarcodes   int
	,CorporateID    int
	,GenerateExactNumberOfVouchers bit)

	insert into @EVoucher
	select ns.NotificationID,ev.EServiceID,ev.NumberOfVouchers,es.CorporateID,isnull(ev.GenerateExactNumberOfVouchers,0)
	from       coc_EVoucher(NOLOCK)      ev
	inner join coc_EServices(NOLOCK)     es on es.EServiceID=ev.EServiceID
	inner join coc_Notifications(NOLOCK) ns on ns.EServiceID=ev.EServiceID
	where ev.IsActive=1 and ev.IsDeleted=0 and ev.CurrentStatus=3

	WHILE exists(select *
		from @EVoucher)
	BEGIN
		set @EServiceID=0
		set @xmldata=''
		set @NotificationID=0
		set @NoOfBarcodes=0
		set @CorporateID=0
		set @TotalTaskBarcodes=0
		set @GenerateBarcodeCount=0
		set @BarcodesRemainingCount=0
		set @UsedBarcodesCount=0
		set @UserID=0
		set @RequiredBarcodeCount=0
		set @AllowedBarcodeCount=0
		set @GenerateExactNumberOfVouchers=0

		select top 1 @EServiceID=EServiceID
		,            @NoOfBarcodes=NoOfBarcodes
		,            @NotificationID=NotificationID
		,            @CorporateID=CorporateID
		,@GenerateExactNumberOfVouchers=GenerateExactNumberOfVouchers
		from @EVoucher
		select @UserID=UserID
		from coc_corporates(NoLock)
		where CorporateID=@CorporateID

		if(@GenerateExactNumberOfVouchers=1)
		begin
		  set @GenerateBarcodeCount=@NoOfBarcodes

		  print('GenerateExactNumberOfVouchers');
		  print('ServiceID : '+Convert(nvarchar(20),@EServiceID));
		  print('NotificationID : '+Convert(nvarchar(20),@NotificationID));
		  print('GenerateBarcodeCount :'+Convert(nvarchar(20),@GenerateBarcodeCount));
		  print('AllowedBarcodeCount :'+Convert(nvarchar(20),@AllowedBarcodeCount));
		  print('BarcodesRemainingCount :'+Convert(nvarchar(20),@BarcodesRemainingCount));
		  print('RequiredBarcodeCount :'+Convert(nvarchar(20),@RequiredBarcodeCount));


			if (@GenerateBarcodeCount>0
				and ((select count(id)
				from coc_ServiceTask (NOLOCK)
				where UniqueId=@EServiceID and status=1)=0) and ((select Count(*) from coc_EServiceBarcodes(Nolock) where NotificationID=@NotificationID)=0))
			begin
				set @xmldata=N'<?xml version="1.0" encoding="utf-16"?><BarcodeGenerateParams xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ServiceID>'+Convert(nvarchar(20),@EServiceID)+'</ServiceID><NoOfBarcodes>'+Convert(nvarchar(20),@GenerateBarcodeCount)+'</NoOfBarcodes><NotificationID>'+Convert(nvarchar(20),@NotificationID)+'</NotificationID><ServiceTypeID>51</ServiceTypeID><Prefix /><Suffix /><CorporateID>'+Convert(nvarchar(20),@CorporateID)+'</CorporateID><LanguageID>1</LanguageID><UserId>'+Convert(nvarchar(20),@UserID)+'</UserId></BarcodeGenerateParams>'
				insert into coc_ServiceTask ( TaskTypeId, Date, ExecuteDate, UniqueId, Parameters, UserId, Status, RowStatus )
				select 1
				,      getdate()
				,      getdate()
				,      @EServiceID
				,      @xmldata
				,      @UserID
				,      1
				,      1
			end

		end
		else
		begin
		 set @GenerateBarcodeCount=FLOOR(@NoOfBarcodes/10)
		 if (@GenerateBarcodeCount>10)
			set @RequiredBarcodeCount=FLOOR(@GenerateBarcodeCount/10)
		 else
			set @RequiredBarcodeCount=@GenerateBarcodeCount
        
		set @BarcodesRemainingCount =(select Count(*)
		  from coc_EServiceBarcodes(Nolock)
		    where [IsUsed]=0 and ([AsignedMoile] is null OR AsignedEmailID is null) and NotificationID=@NotificationID)
		   --set @UsedBarcodesCount =(select Count(*) from coc_EServiceBarcodes(Nolock)   where [IsUsed]=1 and ([AsignedMoile]  is not null OR AsignedEmailID is not null) and NotificationID=@NotificationID)
		   --set @AllowedBarcodeCount= @NoOfBarcodes-@BarcodesRemainingCount-@UsedBarcodesCount;

		  print('ServiceID : '+Convert(nvarchar(20),@EServiceID));
		  print('NotificationID : '+Convert(nvarchar(20),@NotificationID));
		  print('GenerateBarcodeCount :'+Convert(nvarchar(20),@GenerateBarcodeCount));
		  print('AllowedBarcodeCount :'+Convert(nvarchar(20),@AllowedBarcodeCount));
		  print('BarcodesRemainingCount :'+Convert(nvarchar(20),@BarcodesRemainingCount));
		  print('RequiredBarcodeCount :'+Convert(nvarchar(20),@RequiredBarcodeCount));


			if (@GenerateBarcodeCount>0
				--and (@GenerateBarcodeCount <=  @AllowedBarcodeCount)
				and ((select count(id)
				from coc_ServiceTask (NOLOCK)
				where UniqueId=@EServiceID and status=1)=0) and @BarcodesRemainingCount<@RequiredBarcodeCount)
			begin
				set @xmldata=N'<?xml version="1.0" encoding="utf-16"?><BarcodeGenerateParams xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ServiceID>'+Convert(nvarchar(20),@EServiceID)+'</ServiceID><NoOfBarcodes>'+Convert(nvarchar(20),@GenerateBarcodeCount)+'</NoOfBarcodes><NotificationID>'+Convert(nvarchar(20),@NotificationID)+'</NotificationID><ServiceTypeID>51</ServiceTypeID><Prefix /><Suffix /><CorporateID>'+Convert(nvarchar(20),@CorporateID)+'</CorporateID><LanguageID>1</LanguageID><UserId>'+Convert(nvarchar(20),@UserID)+'</UserId></BarcodeGenerateParams>'
				insert into coc_ServiceTask ( TaskTypeId, Date, ExecuteDate, UniqueId, Parameters, UserId, Status, RowStatus )
				select 1
				,      getdate()
				,      getdate()
				,      @EServiceID
				,      @xmldata
				,      @UserID
				,      1
				,      1
			end

		end
		
		delete @EVoucher
		where EServiceID=@EServiceID
	END
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_CreateBarcodesForActiveEvouchers_bak]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_CreateBarcodesForActiveEvouchers_bak]  
AS  
 SET NOCOUNT ON  
 Declare @EServiceID int  
 Declare @xmldata nvarchar(max)  
 Declare @NotificationID bigint  
 Declare @NoOfBarcodes int=0  
 Declare @CorporateID int  
 Declare @TotalTaskBarcodes int  
 Declare @GenerateBarcodeCount int  
 Declare @BarcodesRemainingCount int  
 Declare @UsedBarcodesCount int  
 Declare @UserID int  
 Declare @RequiredBarcodeCount int  
 Declare @AllowedBarcodeCount int  
 declare @EVoucher table ( NotificationID bigint  
 ,                         EServiceID     int  
 ,                         NoOfBarcodes   int  
 ,                         CorporateID    int )  
 insert into @EVoucher  
 select ns.NotificationID  
 ,      ev.EServiceID  
 ,      ev.NumberOfVouchers  
 ,      es.CorporateID  
 from       coc_EVoucher(NOLOCK)      ev  
 inner join coc_EServices(NOLOCK)     es on es.EServiceID=ev.EServiceID  
 inner join coc_Notifications(NOLOCK) ns on ns.EServiceID=ev.EServiceID  
 where ev.IsActive=1 and ev.IsDeleted=0 and ev.CurrentStatus=3  
 WHILE exists(select *  
  from @EVoucher)  
 BEGIN  
  set @EServiceID=0  
  set @xmldata=''  
  set @NotificationID=0  
  set @NoOfBarcodes=0  
  set @CorporateID=0  
  set @TotalTaskBarcodes=0  
  set @GenerateBarcodeCount=0  
  set @BarcodesRemainingCount=0  
  set @UsedBarcodesCount=0  
  set @UserID=0  
  set @RequiredBarcodeCount=0  
  set @AllowedBarcodeCount=0  
  
  select top 1 @EServiceID=EServiceID  
  ,            @NoOfBarcodes=NoOfBarcodes  
  ,            @NotificationID=NotificationID  
  ,            @CorporateID=CorporateID  
  from @EVoucher  
  select @UserID=UserID  
  from coc_corporates(NoLock)  
  where CorporateID=@CorporateID  
  set @GenerateBarcodeCount=FLOOR(@NoOfBarcodes/10)  
  if (@GenerateBarcodeCount>10)  
   set @RequiredBarcodeCount=FLOOR(@GenerateBarcodeCount/10)  
  else  
   set @RequiredBarcodeCount=@GenerateBarcodeCount  
  
  set @BarcodesRemainingCount =(select Count(*)  
  from coc_EServiceBarcodes(Nolock)  
  where [IsUsed]=0 and ([AsignedMoile] is null OR AsignedEmailID is null) and NotificationID=@NotificationID)  
  --set @UsedBarcodesCount =(select Count(*) from coc_EServiceBarcodes(Nolock)   where [IsUsed]=1 and ([AsignedMoile]  is not null OR AsignedEmailID is not null) and NotificationID=@NotificationID)  
  --set @AllowedBarcodeCount= @NoOfBarcodes-@BarcodesRemainingCount-@UsedBarcodesCount;  
  
  print('ServiceID : '+Convert(nvarchar(20),@EServiceID));  
  print('NotificationID : '+Convert(nvarchar(20),@NotificationID));  
  print('GenerateBarcodeCount :'+Convert(nvarchar(20),@GenerateBarcodeCount));  
  print('AllowedBarcodeCount :'+Convert(nvarchar(20),@AllowedBarcodeCount));  
  print('BarcodesRemainingCount :'+Convert(nvarchar(20),@BarcodesRemainingCount));  
  print('RequiredBarcodeCount :'+Convert(nvarchar(20),@RequiredBarcodeCount));  
  
  
  if (@GenerateBarcodeCount>0  
   --and (@GenerateBarcodeCount <=  @AllowedBarcodeCount)  
   and ((select count(id)  
   from coc_ServiceTask (NOLOCK)  
   where UniqueId=@EServiceID and status=1)=0) and @BarcodesRemainingCount<@RequiredBarcodeCount)  
  begin  
   set @xmldata=N'<?xml version="1.0" encoding="utf-16"?><BarcodeGenerateParams xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ServiceID>'+Convert(nvarchar(20),@EServiceID)+'</ServiceID><NoOfBarcodes>'+Convert(nvarchar(20),@GenerateBarcodeCount)+'</NoOfBarcodes><NotificationID>'+Convert(nvarchar(20),@NotificationID)+'</NotificationID><ServiceTypeID>51</ServiceTypeID><Prefix /><Suffix /><CorporateID>'+Convert(nvarchar(20),@CorporateID)+'</CorporateID><LanguageID>1</LanguageID><UserId>'+Convert(nvarchar(20),@UserID)+'</UserId></BarcodeGenerateParams>'  
   insert into coc_ServiceTask ( TaskTypeId, Date, ExecuteDate, UniqueId, Parameters, UserId, Status, RowStatus )  
   select 1  
   ,      getdate()  
   ,      getdate()  
   ,      @EServiceID  
   ,      @xmldata  
   ,      @UserID  
   ,      1  
   ,      1  
  end  
  delete @EVoucher  
  where EServiceID=@EServiceID  
 END  
GO
/****** Object:  StoredProcedure [dbo].[core_usp_CustomerResetPassword]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  shaik Layeeqh  
-- Create date: 04 October 2020  
-- Description: New Design Customer Reset Password  
-- =============================================  
CREATE PROCEDURE [dbo].[core_usp_CustomerResetPassword]  
 -- Add the parameters for the stored procedure here  
 @MobileNumber nvarchar(15)     = NULL,  
 @EmailID nvarchar(100) = null,  
 @Password NVARCHAR(55),  
 @LanguageID INTEGER = 1,  
  @ImpersonationUserID bigint=null,  
 @SpResponseStatus int = null out,  
 @SpResponseMessage nvarchar(max) = null out,  
 @SpErrorDetails nvarchar(max) = null out    
AS  
 Begin Try     
  
  Set @SpResponseStatus=1;       
  Set @SpResponseMessage='Success';      
  Set @SpErrorDetails='Success';   
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
 declare @UserID int;    
 IF (@EmailID is not null) AND EXISTS(SELECT EmailId    
  FROM COC_USERS (NOLOCK)    
  WHERE EmailID = @EmailID AND (IsActive = 1 and IsDeleted = 0))    
 BEGIN    
  print('inside email')    
  select @UserID = UserID    
  FROM COC_USERS (NOLOCK)    
  WHERE EmailID = @EmailID AND (IsActive = 1 and IsDeleted = 0)    
    
  print @userid    
    
  UPDATE COC_USERS    
  SET [Password]    = @Password    
  ,   ResetRequired = 0    
  WHERE EmailID = @EmailID and userid = @userid    
  print ('email done')    
 END    
 ELSE IF (@MobileNumber is not null) and EXISTS(SELECT MobileNumber    
   FROM COC_USERS (NOLOCK)    
   WHERE MobileNumber = @MobileNumber AND @MobileNumber IS NOT NULL and (IsActive = 1 and IsDeleted = 0))    
    
  BEGIN    
   print('inside phone')    
   select @UserID = UserID    
   FROM COC_USERS (NOLOCK)    
   where MobileNumber = @MobileNumber and (IsActive = 1 and IsDeleted = 0)    
    
   UPDATE COC_USERS    
   SET [Password]    = @Password    
   ,   ResetRequired = 0    
   WHERE MobileNumber = @MobileNumber and userid = @userid    
   print ('phone done')    
  END    
      
END TRY                  
  BEGIN CATCH        
  Set @SpResponseStatus=0;       
  Set @SpResponseMessage='GenericError';      
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
  
  END CATCH                  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_DeleteMall]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE  [dbo].[core_usp_DeleteMall]   
  @MallID  int ,     
  @UserID bigint=null,  
  @RoleID bigint=null,  
  @ImpersonationUserID bigint=null,  
  @SpResponseStatus int out,  
  @SpResponseMessage nvarchar(max) out,  
  @SpErrorDetails nvarchar(max)    out            
AS   
 Begin Try    
	Set @SpResponseStatus=1;   
	Set @SpResponseMessage='Success';  
	Set @SpErrorDetails='Success';   

	  Delete core_coc_Mall 	Where MallID=@MallID
              
  END TRY              
  BEGIN CATCH    
  Set @SpResponseStatus=0;   
  Set @SpResponseMessage='GenericError';  
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';     
              
  END CATCH              
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_DeletePurchaseBarcode]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE  [dbo].[Core_Usp_DeletePurchaseBarcode]                
 @BarcodePurchaseId bigint,           
 @SpErrorDetails nvarchar(max)  out               
 AS                
 SET NOCOUNT ON               
 BEGIN                 
  BEGIN TRY             
 update coc_BarcodePurchase set IsDeleted=1 where BarcodePurchaseId=@BarcodePurchaseId
 Set @SpErrorDetails ='0'
                
  END TRY            
          
  BEGIN CATCH            
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                    
  END CATCH           
 SET NOCOUNT OFF             
          
 END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_DeleteVoucherImage]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author      : Rafeeq 
-- Create date : 09-Sep-2019  
-- Description : Delete Image from Vocher Images  
-- =============================================  
CREATE PROCEDURE [dbo].[core_usp_DeleteVoucherImage]  
 @EVoucherImagesID   INTEGER,  
 @EVoucherID     INTEGER,  
 @IsPrimaryImage    INTEGER,   
 @UserID INTEGER,     
 @LanguageID INT=1,     
 @RoleID BIGINT=0,     
 @ImpersonationUserID BIGINT=0,   
 @SpResponseStatus INT output,     
 @SpResponseMessage NVARCHAR(max) output,     
 @SpErrorDetails NVARCHAR(max) output 
AS  
BEGIN  
  begin try
  begin transaction deleteimage
 SET NOCOUNT ON;  
  
  DECLARE @NxtPrimaryImage INTEGER = 0;  
  
  BEGIN  
     
   IF(@IsPrimaryImage = 1 )  
    BEGIN  
     SELECT  
      @NxtPrimaryImage  = MAX(EVoucherImagesID)  
     FROM  
      coc_EVoucherImages(nolock)  
     WHERE  
      EVoucherID    = @EVoucherID  AND  
      EVoucherImagesID  <> @EVoucherImagesID  
    END  
   ELSE  
    BEGIN  
     SET @NxtPrimaryImage  = @EVoucherImagesID  
    END  
  
   BEGIN  
    DELETE  
    FROM  
     coc_EVoucherImages 
    WHERE  
     EVoucherImagesID   = @EVoucherImagesID  
  
  
    UPDATE  
     coc_EVoucherImages SET  
     IsPrimaryImage    = 1  
    WHERE  
     EVoucherImagesID   = @NxtPrimaryImage  
  
   END  
     
  END  
  SET @SpResponseStatus = 1;  
  commit transaction deleteimage
  end Try
 BEGIN catch     
          ROLLBACK TRANSACTION deleteimage;     
    
          SET @SpResponseStatus=0;     
          SET @SpResponseMessage='Failed';     
          SET @SpErrorDetails = convert(varchar(500), Error_number()) + 'ErrorNumber'     
                               + convert(varchar(500),Error_severity()) + 'ErrorSeverity'     
                               + 'ErrorState' +convert(varchar(500), Error_state())     
                               + 'ErrorProcedure' + Error_procedure()     
                               + 'ErrorLine' +convert(varchar(500), Error_line()) + 'ErrorMessage'     
                               + Error_message();     
      END catch;
END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_DeleteWinner]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_DeleteWinner]      
@ECouponWinnerID BIGINT, 
@ECouponID BIGINT = NULL, 
@MobileNumber VARCHAR(20), 
@EmailID  NVARCHAR(100)=NULL, 
@CorporateID BIGINT=NULL,
@isExclusion BIT=NULL,
@ImpersonationUserID BIGINT=NULL,            
@SpResponseStatus INT = NULL OUT,            
@SpResponseMessage NVARCHAR(MAX) = NULL OUT,            
@SpErrorDetails NVARCHAR(MAX) = NULL OUT
AS        
SET NOCOUNT ON
BEGIN TRY  
    BEGIN TRANSACTION TRN_DeleteWinner
    SET @SpResponseStatus=0;                 
    SET @SpResponseMessage='';                
    SET @SpErrorDetails='';
    IF @EmailID=''      
    BEGIN       
        SET @EmailID = NULL      
    END   
    IF @CorporateID=0  
    BEGIN       
        SET @CorporateID = NULL      
    END   
    IF (@isExclusion= 1)      
    BEGIN       
     INSERT INTO coc_ConsumerExclusions(ECouponID, PrimaryMobile,EmailID,CorporateID) VALUES (@ECouponID, @MobileNumber,@EmailID,@CorporateID)      
    END       
    --select * from coc_ConsumerExclusions order by ConsumerExclusionID desc      
    --select * from coc_ConsumerExclusions where PrimaryMobile= @MobileNumber order by ConsumerExclusionID desc      
    --select * from coc_ECouponWinners where ECouponWinnerID = @ECouponWinnerID      
    INSERT INTO coc_ECouponWinners_DeleteLog (
    [ECouponWinnerID],
    [ECouponPrizeID] ,
    [MobileNumber] ,
    [ConsumerID] ,
    [PrizeHeader] ,
    [PrizeDetail],
    [ImageFile] ,
    [ECouponDrawPrizeID],
    [ConsumerType] ,
    [ConsumerName] ,
    [Email],
    [MembershipID] ,
    [DrawDateTime] ,
    [GuestID] ,
    [ECouponParticipationID] ,
    [UserName] ,
    [DeleteDateTime],
    [DeleteComment] ) 
    SELECT 
    [ECouponWinnerID],
    [ECouponPrizeID] ,
    [MobileNumber] ,
    [ConsumerID] ,
    [PrizeHeader] ,
    [PrizeDetail],
    [ImageFile] ,
    [ECouponDrawPrizeID],
    [ConsumerType] ,
    [ConsumerName] ,
    [Email],
    [MembershipID] ,
    [DrawDateTime] ,
    [GuestID] ,
    [ECouponParticipationID] ,
    NULL ,
    GETDATE(),
    NULL
    FROM coc_ECouponWinners WHERE ECouponWinnerID = @ECouponWinnerID  

    DELETE FROM coc_ECouponWinners WHERE ECouponWinnerID = @ECouponWinnerID      
    print('delete');     
    Set @SpResponseStatus=1;                 
    Set @SpResponseMessage='Success';          
    Set @SpErrorDetails='Success'; 
    COMMIT TRANSACTION TRN_DeleteWinner
 END TRY                
 BEGIN CATCH  
    ROLLBACK TRANSACTION TRN_DeleteWinner      
    Set @SpResponseStatus=0;                 
    Set @SpResponseMessage='GenericError';                
    Set @SpErrorDetails ='ErrorNumber : <' + CONVERT(VARCHAR,ERROR_NUMBER())+ '>,       
    ErrorSeverity : <'+ CONVERT(VARCHAR,ERROR_SEVERITY())+'>,       
    ErrorState : <'+CONVERT(VARCHAR,ERROR_STATE())+'> ,       
    ErrorProcedure : <'+ERROR_PROCEDURE()+'> ,       
    ErrorLine <'+CONVERT(VARCHAR,ERROR_LINE())+'>       
    ErrorMessage : <'+ERROR_MESSAGE()+'>';          
 END CATCH  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_DisplayConsumerCompetitions]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[core_usp_DisplayConsumerCompetitions]        
 @ConsumerID INTEGER,    
 @LanguageID int=1,          
 @RoleID bigint=null,      
 @UserID int=NULL,      
 @ImpersonationUserID bigint=null,              
 @SpResponseStatus int out,              
 @SpResponseMessage nvarchar(max) out,              
 @SpErrorDetails nvarchar(max)    out         
AS        
SET NOCOUNT ON        
 BEGIN        
  BEGIN TRY      
      SELECT ROW_NUMBER() OVER(ORDER BY ECouponParticipationID)id,EP.ECouponParticipationID,EP.ECouponID,CO.CorporateID,CO.CRNumber,ES.ServiceNumber,CONVERT(NVARCHAR(12),EP.ParticipationDate,106)[ParticipationDate],EP.ConsumerID,      
     EL.EService,EV.BaseValue,CONVERT(NVARCHAR(12),ES.FromDate,106)[FromDate],CONVERT(NVARCHAR(12),ES.ToDate,106)[ToDate],CONVERT(NVARCHAR(12),EC.ResultDate,106)[ResultDate]       
    FROM coc_ECouponParticipations EP(NOLOCK)      
      LEFT JOIN coc_ECoupons EC(NOLOCK) ON EC.ECouponID=EP.ECouponID      
      LEFT JOIN coc_EnumValues EV(NOLOCK) ON EV.EnumValueID=EC.EntryTypeID AND EnumID=4      
      LEFT JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID=EC.EServiceID       
      INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON EL.EServiceID=ES.EServiceID AND EL.LanguageID=@LanguageID      
      LEFT JOIN coc_Corporates CO(NOLOCK) ON CO.CorporateID=ES.CorporateID      
    WHERE EP.ConsumerID=@ConsumerID      
 Set @SpResponseStatus=1;      
 Set @SpResponseMessage='Success';      
 Set @SpErrorDetails='Success';      
      
  END TRY        
      
  BEGIN CATCH   
	Set @SpResponseStatus=0;         
	Set @SpResponseMessage='GenericError';        
	Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                  
  END CATCH   
  END        
      
SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_DisplayVoucherDistribution]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_DisplayVoucherDistribution]          
 @VoucherID INTEGER=NULL,          
 @FromDate DATETIME=NULL,          
 @ToDate DATETIME=NULL,          
 @CorporateID INTEGER=NULL,          
 @LanguageID INTEGER=1,
 @UserID bigint=NULL,
 @RoleID bigint=NULL,
 @ImpersonationUserID bigint=NULL,
 @SpResponseStatus int Output,
 @SpResponseMessage nvarchar(max) Output,
 @SpErrorDetails nvarchar(max) Output
AS                  
 SET NOCOUNT ON;   
 BEGIN TRY
 DECLARE @EligibilityRecords AS TABLE          
 (          
   UniqueID INTEGER Identity(1,1),          
   EVoucherID INTEGER,          
  [EVoucherName] NVARCHAR(300),          
  [VoucherDistributed] INTEGER,          
  CorporateID INTEGER,          
  [CorporateName] NVARCHAR(300),        
  [VoucherDownloaded] INTEGER,        
  [VoucherUsed] INTEGER,        
  [VoucherRemaining] INTEGER ,       
  BundleName NVARCHAR(300)            
 )          
           
   INSERT INTO @EligibilityRecords              
   SELECT           
	 ev.EVoucherID AS [EVoucherID],          
	 evl.ResourceValue AS [EVoucherName],          
	 (select count(*) from coc_EServiceBarcodes(nolock) where NotificationID=ns.NotificationID) AS [VoucherDistributed],         
	  es.CorporateID AS [CorporateID],          
	 crs.CorporateName  ,        
	 (select count(*) from coc_EServiceBarcodes(nolock) where NotificationID=ns.NotificationID and ((ISNULL(ConsumerID,0)>0 or ISNULL(GuestID,0)>0))) AS [VoucherDownloaded],         
	 (select count(*) from coc_EServiceBarcodes(nolock) where NotificationID=ns.NotificationID and IsUsed=1 and ((ISNULL(ConsumerID,0)>0 or ISNULL(GuestID,0)>0))) AS [VoucherUsed],         
	 (select count(*) from coc_EServiceBarcodes(nolock) where NotificationID=ns.NotificationID and IsUsed=0 and ISNULL(ConsumerID,0)=0 and ISNULL(GuestID,0)=0) AS [VoucherRemaining]         
	  ,       
	 '' as BundleName      
	   From coc_EVoucher(nolock)  ev         
	   INNER JOIN coc_EVoucherLanguages(nolock) evl ON evl.EVoucherID=ev.EVoucherID AND evl.ResourceKey='VoucherName' AND evl.LanguageID=@LanguageID          
	  Inner join coc_EServices(nolock) es on es.EServiceID=ev.EServiceID         
	  Inner join coc_Notifications(nolock) ns on ns.EServiceID=ev.EServiceID         
	   INNER JOIN coc_Corporates(nolock) crs ON crs.CorporateID=es.CorporateID          
	   WHERE ev.IsActive=1          
	   AND(@VoucherID IS NULL OR ev.EVoucherID = @VoucherID)          
	  AND(@FromDate IS NULL OR (ev.AddDate >=@FromDate AND ev.AddDate  <=@ToDate))          
	  AND (@CorporateID IS NULL OR es.CorporateID=@CorporateID)          
             
   SELECT MAX([EVoucherID]) [EVoucherID],          
   MAX(CorporateID) [CorporateID],          
   MAX([CorporateName]) [CorporateName],          
   MAX(EVoucherName) EVoucherName,           
   SUM([VoucherDistributed]) [VoucherDistributed],        
   SUM([VoucherDownloaded])[VoucherDownloaded],        
   SUM([VoucherUsed])[VoucherUsed],        
   SUM([VoucherRemaining])[VoucherRemaining] ,      
  Max(BundleName) [BundleName]      
   FROM @EligibilityRecords           
   GROUP BY EVoucherID,CorporateID           
    
   SELECT           
 ev.EVoucherID,          
 evl.ResourceValue [EVoucherName],    esb.UsedDate,      
 esb.ConsumerID, isnull(esb.AsignedMoile, cns.PrimaryMobile) mobileNo,esb.InvoiceAmount, esb.InvoiceNumber,    
 isnull(cns.FirstName,'')+' '+isnull(cns.SecondName,'') AS [ConsumerName],          
 ev.ExpiryDate AS [DateAndTime],          
 cns.MembershipNumber AS [MembershipID],          
 es.CorporateID,          
 crs.CorporateName ,        
 kll.KioskLocation,        
 rol.RetailOutlet,      
 CASE          
  WHEN CONVERT(INT,esb.IsUsed)=1          
    THEN 'Yes'          
    ELSE 'No'          
  END AS [VoucherUsed]               
   FROM  coc_EVoucher(nolock) ev          
   INNER JOIN coc_EVoucherLanguages(nolock) AS evl ON evl.EVoucherID=ev.EVoucherID AND evl.ResourceKey='VoucherName' AND evl.LanguageID=@LanguageID          
   Inner join coc_EServices(nolock) es on es.EServiceID=ev.EServiceID         
   INNER JOIN coc_Corporates(nolock) AS crs ON crs.CorporateID=es.CorporateID          
   LEFT OUTER JOIN coc_EServiceBarcodes(nolock) esb ON esb.EVoucherID = ev.EVoucherID --AND esb.DistributorCorporateID = d.CorporateID          
   LEFT OUTER  JOIN coc_Consumers(nolock) AS cns ON cns.ConsumerID=esb.ConsumerID            
   LEFT OUTER  JOIN coc_EVoucherBundleEligibilityForConsumers(nolock) evbe ON evbe.EVoucherBundleEligibilityForConsumersID = esb.EVoucherBundleEligibilityForConsumersID          
   LEFT OUTER  JOIN coc_KioskLocationLanguages(nolock) kll on kll.KioskLocationID=esb.UsedAtKioskID and kll.LanguageID=@LanguageID        
    LEFT OUTER  JOIN coc_KioskLocationRetailOutlets(nolock) klr on klr.KioskLocationID=esb.UsedAtKioskID        
 LEFT OUTER  JOIN coc_RetailOutletLanguages(nolock) rol on rol.RetailOutletID=klr.RetailOutletID and rol.LanguageID=@LanguageID        
   WHERE  ev.IsActive=1        
  AND (@VoucherID IS NULL OR ev.EVoucherID = @VoucherID)          
  AND(@FromDate IS NULL OR (es.FromDate >=@FromDate AND es.ToDate <=@ToDate))          
  AND (@CorporateID IS NULL OR es.CorporateID=@CorporateID)          
             
    Set @SpResponseStatus=1;
	Set @SpResponseMessage='Success';
	Set @SpErrorDetails=NULL;

	END TRY

	BEGIN CATCH

	Set @SpResponseStatus=0;

	Set @SpResponseMessage='GenericError';

	Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';

	END CATCH

	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_eCopon_SaveAdminServiceTaskNotification]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_eCopon_SaveAdminServiceTaskNotification] 

@EmailID nvarchar(100),

@CRNumber nvarchar(100),

@ErrorMessage nvarchar(500) out

AS



BEGIN	

begin try

Declare @CorporateUserID bigint;

	SELECT TOP 1 @CorporateUserID = UserID FROM coc_Corporates (NOLOCK) where EmailID = @EmailID and CRNumber = @CRNumber;

	if(@CorporateUserID is not null)

	begin

		INSERT INTO coc_ServiceTaskNotification ( UserId,  [Date], [Message], [Result], [STATUS], RowStatus,  LanguageId ,RedirectPage ,RedirectParameter)

		SELECT  UserId, getdate(),  'New Corporate Registered',  'Success',  1,  1, 1,'CorporateRegistration.ascx',CAST(@CorporateUserID AS VARCHAR(100)) from coc_Users (NOLOCK) where RoleID = 1 and IsActive = 1;

		set @ErrorMessage = '';

	end

	Else

	set @ErrorMessage = 'NO Corporate selected';

end try

begin catch

set @ErrorMessage = Error_Message();

end catch

END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_Email_sending_log]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================  
-- Author:  Abdul Dayyan  
-- Create date: 13 October 2019  
-- Description: Email sending Log  
-- =============================================  
CREATE PROCEDURE [dbo].[core_usp_Email_sending_log]  
 -- Add the parameters for the stored procedure here  
 @MessageBody nvarchar(max),  
    @TemplateID bigint,  
    @Subject nvarchar(max),  
    @From varchar(100),  
    @To varchar(100),  
    @Cc varchar(100), 
    @ScreenName varchar(50),  
    @ProcessName varchar(50),  
    @Status int,  
    @LoggedInUser varchar(50),  
 @LanguageID INTEGER = 1,  
 @UserID bigint=null,  
 @RoleID bigint=null,  
  @ImpersonationUserID bigint=null,  
 @SpResponseStatus int = null out,  
 @SpResponseMessage nvarchar(max) = null out,  
 @SpErrorDetails nvarchar(max) = null out  
AS       
 Begin Try        
  Set @SpResponseStatus=1;       
  Set @SpResponseMessage='Success';      
  Set @SpErrorDetails='Success';   
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
    -- Insert statements for procedure here  
 INSERT INTO [dbo].[core_coc_Email_sending_log]([MessageBody],[TemplateID],[Subject],[From],[To],[Cc],[AddedDate],[ScreenName],[ProcessName],[Status],[SentDate],[LoggedInUser])   
 VALUES(@MessageBody,@TemplateID,@Subject,@From,@To,@Cc,getdate(),@ScreenName,@ProcessName,@Status,getdate(),@LoggedInUser)  
END TRY                  
  BEGIN CATCH        
  Set @SpResponseStatus=0;       
  Set @SpResponseMessage='GenericError';      
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
  
  END CATCH                  
 SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[core_usp_EnableDisableEcouponDraw]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================            
-- Author:  Narender Gorige           
-- Create date: 25 May 2021           
-- Description: Option to Admin to Enable/Disable Ecoupon Draws.           
-- =============================================         
CREATE PROCEDURE [dbo].[core_usp_EnableDisableEcouponDraw]       
 @EcouponDrawID int ,
 @IsDisable bit,
 @ImpersonationUserID bigint=null,            
 @SpResponseStatus int = null out,            
 @SpResponseMessage nvarchar(max) = null out,            
 @SpErrorDetails nvarchar(max) = null out      
AS                
 SET NOCOUNT ON                
 BEGIN TRY                 
    BEGIN TRANSACTION TRN_EnableOrDisableEcouponDraws
    SET @SpResponseStatus=0;                 
    SET @SpResponseMessage='';                
    SET @SpErrorDetails='';
    
    UPDATE [dbo].[coc_ECouponDraw]                
        SET IsDisable = @IsDisable     
        WHERE ECouponDrawID = @EcouponDrawID

    Set @SpResponseStatus=1;                 
    Set @SpResponseMessage='StatusUpdated';          
    Set @SpErrorDetails='StatusUpdated'; 
        
     COMMIT TRANSACTION TRN_EnableOrDisableEcouponDraws         
 END TRY                
 BEGIN CATCH                         
    ROLLBACK TRANSACTION TRN_EnableOrDisableEcouponDraws      
    Set @SpResponseStatus=0;                 
    Set @SpResponseMessage='GenericError';                
    Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>,       
    ErrorSeverity : <'+ ERROR_SEVERITY()+'>,       
    ErrorState : <'+ERROR_STATE()+'> ,       
    ErrorProcedure : <'+ERROR_PROCEDURE()+'> ,       
    ErrorLine <'+ERROR_LINE()+'>       
    ErrorMessage : <'+ERROR_MESSAGE()+'>';          
 END CATCH                
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_EVoucherConfigurationList]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[core_usp_EVoucherConfigurationList]            
  @CurrentPage INTEGER=1,              
  @PageSize INTEGER=1,              
  @LanguageID  INTEGER=1,              
  @UserID INTEGER,              
  @TotalRecords INTEGER OUTPUT,            
  @CompetitionName NVARCHAR(50)=NULL,              
  @FromDate DATETIME=NULL,              
  @ToDate DATETIME=NULL,              
  @CometitionType NVARCHAR(50)=NULL,              
  @VoucherName NVARCHAR(50)=NULL  ,            
  @RoleID bigint=null,            
  @ImpersonationUserID bigint=null,            
  @SpResponseStatus int OUTPUT,            
  @SpResponseMessage nvarchar(max) OUTPUT,            
  @SpErrorDetails nvarchar(max) OUTPUT              
               
AS              
             
BEGIN  TRY          
     BEGIN TRANSACTION EVoucherConfigurationList;        
 Set @SpResponseStatus=1;             
 Set @SpResponseMessage='Success';            
 Set @SpErrorDetails=NULL;             
  SELECT             
   es.EServiceID AS UniqueID,            
   esl.EService AS CompetitionName,            
   FromDate,            
   ToDate,            
   enmvl.EnumValue AS CompetitionType,            
   evl.ResourceValue AS VoucherName,            
   ev.EVoucherID,      
   es.EServiceID               
   FROM coc_EServices es  (NOLOCK)          
   INNER JOIN coc_EnumValueLanguages enmvl (NOLOCK) ON enmvl.EnumValueID=es.ServiceSubTypeID AND enmvl.LanguageID=@LanguageID           
   INNER JOIN coc_EServiceLanguages esl (NOLOCK) ON esl.EServiceID=es.EServiceID AND esl.LanguageID=@LanguageID            
   LEFT JOIN coc_EVoucher ev (NOLOCK) ON ev.EServiceID=es.EServiceID             
   LEFT JOIN coc_EVoucherLanguages evl (NOLOCK) ON evl.EVoucherID=ev.EVoucherID AND evl.LanguageID=@LanguageID AND evl.ResourceKey='VoucherName'        
   where es.AddUserId = @UserID    
   and ev.EVoucherID not in (101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,36,108)  
   Order by  UniqueID desc        
              
   SET NOCOUNT OFF              
   COMMIT TRANSACTION  EVoucherConfigurationList       
  END TRY                        
  BEGIN CATCH              
  ROLLBACK TRANSACTION SaveVoucherCreation            
  Set @SpResponseStatus=0;             
  Set @SpResponseMessage='GenericError';            
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
  
    
         
  END CATCH                        
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_usp_ExternalParticipation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_ExternalParticipation]                
 @Mobile VARCHAR(15),              
 @ExternalBarcode VARCHAR(200) = null,              
 @ECouponID INT,              
 @APIKey VARCHAR(200),              
 @ErrorCode VARCHAR(20) OUTPUT,              
 @ErrorMessage VARCHAR(500) OUTPUT,              
 @ParticipationBarcode NVARCHAR(100) = NULL OUTPUT, 
 @RetailoutletID INTEGER = 1049,
 @RequestType INTEGER = NULL
 AS              
SET @ErrorCode =''              
DECLARE @NumberOfConsumerParticipations INT              
DECLARE @NumberOfParticipations INT              
DECLARE @EServiceID INT              
DECLARE @ConsumerID INT              
DECLARE @UsedByAPI BIT              
DECLARE @Participations INT                  
DECLARE @ServiceBarcode NVARCHAR(100)              
DECLARE @NotificationID INT              
DECLARE @Email VARCHAR(200)              
DECLARE @ConsumerName NVARCHAR(200) 

IF (@ExternalBarcode ='')
BEGIN
    SET @ExternalBarcode = NULL
END
              
IF NOT EXISTS(SELECT 1 FROM COC_Consumers (NOLOCK) where PrimaryMobile=@Mobile) --and APIKey=@apiKey)              
BEGIN               
 SET @ErrorCode = 401              
 SET @ErrorMessage = 'Invalid_User_User_NotRegistered'              
END          
              
IF @ErrorCode <> ''              
BEGIN              
    RETURN            
END            
              
SELECT @EServiceID = EServiceID FROM coc_ECoupons(NOLOCK) WHERE EcouponID = @EcouponID                 

IF EXISTS(SELECT EServiceID FROM coc_EServices WHERE EServiceID = @EServiceID AND 
    IsActive = 1 AND  GETDATE() NOT BETWEEN FromDate AND ToDate)
BEGIN
    SET @ErrorCode = 403            
    SET @ErrorMessage = 'Competition is Inactive or Expired '            
END

IF @ErrorCode <> ''            
BEGIN            
    RETURN            
END 

DECLARE @TempBarcodeTable TABLE (Barcode NVARCHAR(100) ,EServiceBarcodeID INT,NotificationID INT);                 
              
  --select top 10 * from coc_consumers              
SELECT @ConsumerId = ConsumerID,@Email=EmailId, @ConsumerName = FirstName + ' ' + isnull(SecondName,'') +  isnull(familyname,'') from coc_consumers (NOLOCK) where primarymobile=@mobile  -- and APIKey=@APIKey             
SELECT @EServiceID = EServiceID                                                  
   ,@NumberOfConsumerParticipations = ISNULL(NumberOfConsumerParticipations, 0)                 
   ,@NumberOfParticipations = ISNULL(participationCount, 0)                  
  FROM coc_ECoupons(NOLOCK)  WHERE ECouponID = @EcouponID 
  
   --RegisterAndParticipatePepsi API
 IF(@RequestType = 108)
 BEGIN
    --Check if competition is eligible in the given RetailOutlet.
    IF NOT EXISTS(SELECT RetailOutletID FROM coc_ECouponOutlets where ECouponID = @ECouponID AND RetailOutletID = @RetailoutletID AND IsActive = 1)
    BEGIN
        SET @ErrorCode = 404              
        SET @ErrorMessage = 'Not_An_Eligible_Outlet_For_Competiton';
    END

    IF @ErrorCode <> ''              
    BEGIN              
        RETURN              
    END

    DECLARE @ParticipationsWithOutBarcode INTEGER;
    SELECT @ParticipationsWithOutBarcode = count(ECouponParticipationID) FROM coc_ECouponParticipations(NOLOCK) 
    WHERE ConsumerID = @ConsumerID AND ECouponID = @EcouponID AND EnteredStandardBarcode IS NULL
    PRINT 'Participations - '+ convert(varchar(50), @ParticipationsWithOutBarcode)
    --Consumer can participate in the given competition only once without entering ExternalBarcode
    IF(@ExternalBarcode IS NULL  AND @ParticipationsWithOutBarcode >= 1)              
    BEGIN              
        SET @ErrorCode = 405              
        SET @ErrorMessage = 'Participation_Allowed_Only_Once_Without_Barcode';                      
    END  

    IF @ErrorCode <> ''              
    BEGIN              
        RETURN              
    END
 END
              
  --Check participations with the same barcode              
 SELECT @Participations = count(*)                                                              
 FROM coc_ECouponParticipations(NOLOCK) CP                                                  
 WHERE ConsumerID = @ConsumerID AND                                                  
  ECouponID = @EcouponID AND EnteredStandardBarcode=@ExternalBarcode              
              
 IF (@Participations > 0)              
 BEGIN              
 SET @ErrorCode = 401              
 SET @ErrorMessage = 'You Already Participated with the same barcode';                      
 END            
       
 --DECLARE @NobarcodeParticipations int;      
 -- SELECT @NobarcodeParticipations = count(*)                                                              
 --FROM coc_ECouponParticipations(NOLOCK) CP                                                  
 --WHERE ConsumerID = @ConsumerID AND                                                  
 -- ECouponID = @EcouponID AND EnteredStandardBarcode IS NULL              
              
 --IF (@NobarcodeParticipations >= 1)              
 --BEGIN              
 --SET @ErrorCode = 401              
 --SET @ErrorMessage = 'You Already Participated';                      
 --END         
              
IF @ErrorCode <> ''              
 BEGIN              
    RETURN              
 END
 
 BEGIN TRANSACTION SaveExternalParticipation              
  BEGIN TRY                 
    select @NotificationID = NotificationID from coc_notifications(NOLOCK) where eserviceid = @EServiceID                                                
             
 INSERT INTO @TempBarcodeTable (                                                  
 Barcode                                  
 ,EServiceBarcodeID                                                 
 ,NotificationID)                          
 SELECT TOP (1)                                                   
 Barcode                                                  
 ,EServiceBarcodeID                                  
 ,NotificationID                                                  
 FROM coc_EServiceBarcodes(NOLOCK) --WITH(XLOCK, ROWLOCK)             
 WHERE Notificationid = @NotificationID                                 
 AND IsUsed = 0 AND AsignedMoile IS NULL                                                  
 ORDER BY Rand()                                                  
             
 SET @ServiceBarcode =(select top 1 Barcode from @TempBarcodeTable)            
            
 UPDATE EB SET ConsumerID = @ConsumerID ,AsignedMoile = @Mobile              
 ,IsUsed = 1 ,UsedDate = GETDATE() ,UsedByAPI=1 ,APIKey=@APIKey                                              
 FROM coc_EServiceBarcodes(NOLOCK) EB                              
 WHERE EServiceBarcodeID IN ( SELECT EServiceBarcodeID  FROM @TempBarcodeTable )  and IsUsed= 0 AND AsignedMoile IS NULL            
              
 INSERT INTO coc_ECouponParticipations (ECouponID                                                  
      ,ParticipationDate                                                  
      ,Barcode                             
      ,ParticipationMobile                                           
      ,ParticipationEmailID                                                  
      ,ConsumerID                                       
      ,GuestID                                                  
      ,ConsumerName                                                  
      ,RetailoutletID                                           
   ,RequestSourceType                                
      ,ReferenceNumber                                    
      ,UploadImagePath                              
      ,IsFromCompetitionLink                                               
      ,BranchName                              
      ,Question1                              
      ,Question2            
   ,EnteredStandardBarcode          
   )                 
                              
     SELECT @EcouponID                                                  
      ,GETDATE()                                                  
      ,Barcode                                                  
      ,@Mobile                                                  
      ,@Email                                                  
      ,@ConsumerID                                                  
      ,NULL                                                  
      ,@ConsumerName                                                  
      ,@RetailoutletID                                        
   ,null                                         
   ,null                                      
   ,null                                   
   ,0                                      
   ,null                              
   ,null                              
   ,null            
   ,@ExternalBarcode          
     FROM @TempBarcodeTable                                                  
    SELECT top 1 @ParticipationBarcode = Barcode FROM @TempBarcodeTable                                              
 COMMIT TRANSACTION SaveECouponConfiguration                                                  
END TRY                                                  
BEGIN CATCH                                                  
 ROLLBACK TRANSACTION SaveECouponConfiguration                   
 SELECT @ErrorMessage = ERROR_MESSAGE()  ;          
 SET @ErrorCode = 405;           
 RAISERROR (                                
   @ErrorMessage                                                  
   ,16                                                  
   ,1                                                  
   );                                                  
END CATCH                                         
SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_usp_ExternalParticipation_Bckup_30082021]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_ExternalParticipation_Bckup_30082021]                
 @Mobile VARCHAR(15),              
 @ExternalBarcode VARCHAR(200) = null,              
 @ECouponID INT,              
 @APIKey VARCHAR(200),              
 @ErrorCode VARCHAR(20) OUTPUT,              
 @ErrorMessage VARCHAR(500) OUTPUT,              
 @ParticipationBarcode NVARCHAR(100) = NULL OUTPUT                     
 AS              
SET @ErrorCode =''              
DECLARE @NumberOfConsumerParticipations INT              
DECLARE @NumberOfParticipations INT              
DECLARE @EServiceID INT              
DECLARE @ConsumerID INT              
DECLARE @UsedByAPI BIT              
DECLARE @Participations INT                  
DECLARE @ServiceBarcode NVARCHAR(100)              
DECLARE @NotificationID INT              
DECLARE @Email VARCHAR(200)              
DECLARE @ConsumerName NVARCHAR(200)              
              
IF NOT EXISTS(SELECT 1 FROM COC_Consumers (NOLOCK) where PrimaryMobile=@Mobile and APIKey=@apiKey)              
BEGIN               
 SET @ErrorCode = 401              
 SET @ErrorMessage = 'Invalid_User_User_NotRegistered'              
END              
              
              
IF @ErrorCode <> ''              
 BEGIN              
  RETURN            
 END              
              
              
SELECT @EServiceID = EServiceID FROM coc_ECoupons(NOLOCK) WHERE EcouponID = @EcouponID                 

IF EXISTS(SELECT EServiceID FROM coc_EServices WHERE EServiceID = @EServiceID AND 
    IsActive = 1 AND  GETDATE() NOT BETWEEN FromDate AND ToDate)
BEGIN
    SET @ErrorCode = 403            
    SET @ErrorMessage = 'Competition is Inactive or Expired '            
END

IF @ErrorCode <> ''            
BEGIN            
    RETURN            
END 

DECLARE @TempBarcodeTable TABLE (Barcode NVARCHAR(100) ,EServiceBarcodeID INT,NotificationID INT);                 
              
  --select top 10 * from coc_consumers              
SELECT @ConsumerId = ConsumerID,@Email=EmailId, @ConsumerName = FirstName + ' ' + isnull(SecondName,'') +  isnull(familyname,'') from coc_consumers (NOLOCK) where primarymobile=@mobile   and APIKey=@APIKey             
SELECT @EServiceID = EServiceID                                                  
   ,@NumberOfConsumerParticipations = ISNULL(NumberOfConsumerParticipations, 0)                 
   ,@NumberOfParticipations = ISNULL(participationCount, 0)                  
  FROM coc_ECoupons(NOLOCK)  WHERE ECouponID = @EcouponID              
              
  --Check participations with the same barcode              
 SELECT @Participations = count(*)                                                              
 FROM coc_ECouponParticipations(NOLOCK) CP                                                  
 WHERE ConsumerID = @ConsumerID AND                                                  
  ECouponID = @EcouponID AND EnteredStandardBarcode=@ExternalBarcode              
              
 IF (@Participations > 0)              
 BEGIN              
 SET @ErrorCode = 401              
 SET @ErrorMessage = 'You Already Participated with the same barcode';                      
 END            
       
 --DECLARE @NobarcodeParticipations int;      
 -- SELECT @NobarcodeParticipations = count(*)                                                              
 --FROM coc_ECouponParticipations(NOLOCK) CP                                                  
 --WHERE ConsumerID = @ConsumerID AND                                                  
 -- ECouponID = @EcouponID AND EnteredStandardBarcode IS NULL              
              
 --IF (@NobarcodeParticipations >= 1)              
 --BEGIN              
 --SET @ErrorCode = 401              
 --SET @ErrorMessage = 'You Already Participated';                      
 --END         
              
IF @ErrorCode <> ''              
 BEGIN              
 RETURN              
 END              
              
 BEGIN TRANSACTION SaveExternalParticipation              
  BEGIN TRY                 
    select @NotificationID = NotificationID from coc_notifications(NOLOCK) where eserviceid = @EServiceID                                                
             
 INSERT INTO @TempBarcodeTable (                                                  
 Barcode                                  
 ,EServiceBarcodeID                                                 
 ,NotificationID)                          
 SELECT TOP (1)                                                   
 Barcode                                                  
 ,EServiceBarcodeID                                  
 ,NotificationID                                                  
 FROM coc_EServiceBarcodes(NOLOCK) --WITH(XLOCK, ROWLOCK)             
 WHERE Notificationid = @NotificationID                                 
 AND IsUsed = 0 AND AsignedMoile IS NULL                                                  
 ORDER BY EServiceBarcodeID                                                  
             
 SET @ServiceBarcode =(select top 1 Barcode from @TempBarcodeTable)            
            
 UPDATE EB SET ConsumerID = @ConsumerID ,AsignedMoile = @Mobile              
 ,IsUsed = 1 ,UsedDate = GETDATE() ,UsedByAPI=1 ,APIKey=@APIKey                                              
 FROM coc_EServiceBarcodes(NOLOCK) EB                              
 WHERE EServiceBarcodeID IN ( SELECT EServiceBarcodeID  FROM @TempBarcodeTable )  and IsUsed= 0 AND AsignedMoile IS NULL            
              
 INSERT INTO coc_ECouponParticipations (ECouponID                                                  
      ,ParticipationDate                                                  
      ,Barcode                             
      ,ParticipationMobile                                           
      ,ParticipationEmailID                                                  
      ,ConsumerID                                       
      ,GuestID                                                  
      ,ConsumerName                                                  
      ,RetailoutletID                                           
   ,RequestSourceType                                
      ,ReferenceNumber                                    
      ,UploadImagePath                              
      ,IsFromCompetitionLink                                               
      ,BranchName                              
      ,Question1                              
      ,Question2            
   ,EnteredStandardBarcode          
   )                 
                              
     SELECT @EcouponID                                                  
      ,GETDATE()                                                  
      ,Barcode                                                  
      ,@Mobile                                                  
      ,@Email                                                  
      ,@ConsumerID                                                  
      ,NULL                                                  
      ,@ConsumerName                                                  
      ,1049                                        
   ,null                                         
   ,null                                      
   ,null                                   
   ,0                                      
   ,null                              
   ,null                              
   ,null            
   ,@ExternalBarcode          
     FROM @TempBarcodeTable                                                  
    SELECT top 1 @ParticipationBarcode = Barcode FROM @TempBarcodeTable                                              
 COMMIT TRANSACTION SaveECouponConfiguration                                                  
END TRY                                                  
BEGIN CATCH                                                  
 ROLLBACK TRANSACTION SaveECouponConfiguration                   
 SELECT @ErrorMessage = ERROR_MESSAGE()  ;          
 SET @ErrorCode = 405;           
 RAISERROR (                                
   @ErrorMessage                                                  
   ,16                                                  
   ,1                                                  
   );                                                  
END CATCH                                         
SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_usp_ExternalParticipationWithStandardBarcode]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_ExternalParticipationWithStandardBarcode]              
 @Mobile VARCHAR(15),            
 @Barcode VARCHAR(200) = null,            
 @ECouponID INT,            
 @APIKey VARCHAR(200),            
 @ErrorCode VARCHAR(20) OUTPUT,            
 @ErrorMessage VARCHAR(200) OUTPUT,            
 @ParticipationBarcode NVARCHAR(100) = NULL OUTPUT                   
 AS            
SET @ErrorCode =''            
DECLARE @NumberOfConsumerParticipations INT            
DECLARE @NumberOfParticipations INT            
DECLARE @EServiceID INT            
DECLARE @ConsumerID INT            
DECLARE @UsedByAPI BIT            
DECLARE @Participations INT                
DECLARE @ServiceBarcode NVARCHAR(100)            
DECLARE @NotificationID INT            
DECLARE @Email VARCHAR(200)            
DECLARE @ConsumerName NVARCHAR(200)            
            
IF NOT EXISTS(SELECT 1 FROM COC_Consumers (NOLOCK) where PrimaryMobile=@Mobile)            
BEGIN             
 SET @ErrorCode = 401            
 SET @ErrorMessage = 'Invalid_User_Mobile_From_API'            
END            
            
--IF NOT EXISTS(SELECT 1 FROM coc_ECouponStandardBarcodes where standardBarcode=@Barcode and ECouponOutletId = null)            
--BEGIN            
-- SET @ErrorCode = 402            
-- SET @ErrorMessage = 'Invalid_StandardBarcode_From_API'            
--END            
            
IF @ErrorCode <> ''            
 BEGIN            
  RETURN            
 END            
            
            
SELECT @EServiceID = EServiceID FROM coc_ECoupons(NOLOCK) WHERE EcouponID = @EcouponID

IF EXISTS(SELECT EServiceID FROM coc_EServices WHERE EServiceID = @EServiceID AND 
    IsActive = 1 AND  GETDATE() NOT BETWEEN FromDate AND ToDate)
BEGIN
    SET @ErrorCode = 403            
    SET @ErrorMessage = 'Competition is Inactive or Expired '            
END

IF @ErrorCode <> ''            
BEGIN            
    RETURN            
END 

DECLARE @TempBarcodeTable TABLE (Barcode NVARCHAR(100) ,EServiceBarcodeID INT,NotificationID INT);               
            
  --select top 10 * from coc_consumers            
SELECT @ConsumerId = ConsumerID,@Email=EmailId, @ConsumerName = FirstName + ' ' + isnull(SecondName,'') +  isnull(familyname,'') from coc_consumers (NOLOCK) where primarymobile=@mobile               
SELECT @EServiceID = EServiceID                                                
   ,@NumberOfConsumerParticipations = ISNULL(NumberOfConsumerParticipations, 0)               
   ,@NumberOfParticipations = ISNULL(participationCount, 0)                
  FROM coc_ECoupons(NOLOCK)  WHERE ECouponID = @EcouponID            
            
  --Check participations with the same barcode            
 SELECT @Participations = count(*)                                                            
 FROM coc_ECouponParticipations(NOLOCK) CP                                                
 WHERE ConsumerID = @ConsumerID                                                
 AND ECouponID = @EcouponID AND EnteredStandardBarcode is null      
            
 IF (@Participations >= @NumberOfConsumerParticipations or @Participations >=1)            
 BEGIN            
 SET @ErrorCode = 401            
 SET @ErrorMessage = 'You Already Participated';                    
 END           
            
IF @ErrorCode <> ''            
 BEGIN            
 RETURN            
 END            
            
 BEGIN TRANSACTION SaveExternalParticipation            
  BEGIN TRY               
    select @NotificationID = NotificationID from coc_notifications(NOLOCK) where eserviceid = @EServiceID                                              
    INSERT INTO @TempBarcodeTable (                                                
      Barcode                                
     ,EServiceBarcodeID                                               
     ,NotificationID)                                                
    SELECT TOP (1)                                                 
      Barcode                                                
     ,EServiceBarcodeID                                                
     ,NotificationID                                                
    FROM coc_EServiceBarcodes(NOLOCK) --WITH(XLOCK, ROWLOCK)                                                
    WHERE Notificationid = @NotificationID                               
     AND IsUsed = 0 AND AsignedMoile IS NULL                                                
    ORDER BY EServiceBarcodeID                                                
 set @ServiceBarcode =(select top 1 Barcode from @TempBarcodeTable)                
 UPDATE EB SET ConsumerID = @ConsumerID ,AsignedMoile = @Mobile            
 ,IsUsed = 1 ,UsedDate = GETDATE() ,UsedByAPI=1 ,APIKey=@APIKey                                 
 FROM coc_EServiceBarcodes(NOLOCK) EB                            
 WHERE EServiceBarcodeID IN ( SELECT EServiceBarcodeID  FROM @TempBarcodeTable )  and IsUsed= 0     AND AsignedMoile IS NULL                   
            
 INSERT INTO coc_ECouponParticipations (ECouponID                                                
      ,ParticipationDate                                                
      ,Barcode                                                
      ,ParticipationMobile                                         
      ,ParticipationEmailID                                                
      ,ConsumerID                                                
      ,GuestID                                                
      ,ConsumerName                                                
      ,RetailoutletID                                         
   ,RequestSourceType                              
      ,ReferenceNumber                                  
      ,UploadImagePath                            
      ,IsFromCompetitionLink                                             
      ,BranchName                            
      ,Question1                            
      ,Question2                            
   )               
                            
     SELECT @EcouponID                                                
      ,GETDATE()                                                
      ,Barcode                                                
      ,@Mobile                                                
      ,@Email                                                
      ,@ConsumerID                                                
      ,NULL                                                
      ,@ConsumerName                                                
      ,1049                                      
   ,null                                       
   ,null                                    
   ,null                                 
   ,0                                    
   ,null                            
   ,null                            
   ,null                            
     FROM @TempBarcodeTable                                                
    SELECT top 1 @ParticipationBarcode = Barcode FROM @TempBarcodeTable                                            
 COMMIT TRANSACTION SaveECouponConfiguration                                                
END TRY                                                
BEGIN CATCH                                                
 ROLLBACK TRANSACTION SaveECouponConfiguration                 
 SELECT @ErrorMessage = ERROR_MESSAGE()                                                
 RAISERROR (                              
   @ErrorMessage                                                
   ,16                                                
   ,1                                                
   );                                                
END CATCH                                       
SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GenerateOTP]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GenerateOTP] @OtpTypeID INTEGER
,                                    @UniqueID INTEGER  = NULL
AS
	SET NOCOUNT ON

	BEGIN TRY
	BEGIN TRANSACTION Trn_GenerateOTP

	DECLARE @OtpID INTEGER = NULL
	DECLARE @Otp INTEGER = NULL
	DECLARE @LanguageID INTEGER
	DECLARE @Upper INTEGER = 100000
	DECLARE @Lower INTEGER = 999999
	DECLARE @Minutes INTEGER
	DECLARE @SMSTemplate NVARCHAR(MAX)
	DECLARE @EmailTemplate NVARCHAR(MAX)
	DECLARE @NotificationTemplates NVARCHAR(MAX)
	DECLARE @EmailID NVARCHAR(100)
	DECLARE @MobileNumber NVARCHAR(30)
	DECLARE @Notificationtemplate TABLE ( EmailNotification [Remark] NULL
	,                                     SMSNotification   [Remark] NULL )

	SELECT @LanguageID = LanguageID
	FROM coc_Languages(NOLOCK)
	WHERE IsDefaultLanguage = 1

	SELECT @Otp = ROUND(((@Upper - @Lower - 1) * RAND() + @Lower), 0)

	WHILE (Exists(select *
		from coc_OTP(NOLOCK)
		where Otp=@Otp))
	begin
		SELECT @Otp = ROUND(((@Upper - @Lower - 1) * RAND() + @Lower), 0)
	end

	SELECT @Minutes = SetupValue
	FROM COC_SystemSetups(NOLOCK)
	WHERE SystemSetupID = 504

	IF ISNULL(@OtpID, 0) = 0
	BEGIN
		INSERT INTO coc_OTP ( OtpTypeID, Otp, OTPDate, OtpExpity, IsActive )
		SELECT @OtpTypeID
		,      @Otp
		,      GETDATE()
		,      DATEADD(minute, @Minutes, GETDATE())
		,      1

		SET @OtpID = SCOPE_IDENTITY();

		PRINT @OtpID
	END

	IF @OtpTypeID = 131
		AND @UniqueID IS NOT NULL
	BEGIN
		UPDATE coc_Consumers
		SET OtpID = @OtpID
		WHERE ConsumerID = @UniqueID
	END
	--ELSE IF @OtpTypeID=132 AND @UniqueID IS NOT NULL
	--BEGIN
	-- UPDATE coc_Users SET OtpID=@OtpID  WHERE UserID=@UniqueID
	--END
	ELSE IF @OtpTypeID = 133
			AND @UniqueID IS NOT NULL
		BEGIN
			UPDATE coc_ConsumerRedemptions
			SET OtpID = @OtpID
			WHERE ConsumerRedemptionID = @UniqueID
		END
		ELSE IF @OtpTypeID = 134
				AND @UniqueID IS NOT NULL
			BEGIN
				UPDATE coc_ContactChanges
				SET EmailOtpID = @OtpID
				WHERE ContactChangeID = @UniqueID
			END
			ELSE IF @OtpTypeID = 135
					AND @UniqueID IS NOT NULL
				BEGIN
					UPDATE coc_ContactChanges
					SET MobileOtpID = @OtpID
					WHERE ContactChangeID = @UniqueID
				END
				ELSE IF @OtpTypeID = 136
						AND @UniqueID IS NOT NULL
					BEGIN
						UPDATE coc_ResetPassword
						SET OtpID = @OtpID
						WHERE ResetPasswordID = @UniqueID
					END
					ELSE IF @OtpTypeID = 137
							AND @UniqueID IS NOT NULL
						BEGIN
							UPDATE coc_Consumers
							SET OtpID = @OtpID
							WHERE UserID = @UniqueID
						END
						ELSE IF @OtpTypeID = 138
								AND @UniqueID IS NOT NULL
							BEGIN
								UPDATE coc_GuestParticipations
								SET OtpID = @OtpID
								WHERE GuestParticipationID = @UniqueID
							END
							ELSE IF @OtpTypeID = 139
									AND @UniqueID IS NOT NULL
								BEGIN
									UPDATE coc_Tickets
									SET OtpID = @OtpID
									WHERE TicketID = @UniqueID
								END

	INSERT INTO @Notificationtemplate ( EmailNotification )
	SELECT NL.Template
	FROM       coc_GeneralNotificationTemplates(NOLOCK)         NT
	INNER JOIN coc_GeneralNotificationTemplateLanguages(NOLOCK) NL ON NL.GeneralNotificationTemplateID = NT.GeneralNotificationTemplateID
	WHERE NT.GeneralNotificationTemplateID IN (
		SELECT GeneralNotificationTemplateID
		FROM COC_SystemSetups(NOLOCK)
		WHERE SystemSetupID = 109
		)
		AND NL.LanguageID = @LanguageID

	UPDATE @Notificationtemplate
	SET SMSNotification = NL.Template
	FROM       coc_GeneralNotificationTemplates(NOLOCK)         NT
	INNER JOIN coc_GeneralNotificationTemplateLanguages(NOLOCK) NL ON NL.GeneralNotificationTemplateID = NT.GeneralNotificationTemplateID
	WHERE NT.GeneralNotificationTemplateID IN (
		SELECT GeneralNotificationTemplateID
		FROM COC_SystemSetups(NOLOCK)
		WHERE SystemSetupID = 108
		)
		AND NL.LanguageID = @LanguageID

	SELECT @SMSTemplate = NL.Template
	FROM       coc_GeneralNotificationTemplates(NOLOCK)         NT
	INNER JOIN coc_GeneralNotificationTemplateLanguages(NOLOCK) NL ON NL.GeneralNotificationTemplateID = NT.GeneralNotificationTemplateID
	WHERE NL.LanguageID = @LanguageID
		AND NT.TemplateTypeID = 144
		AND NT.SMSUsage = 1

	SELECT @NotificationTemplates = NL.Template
	FROM       coc_GeneralNotificationTemplates(NOLOCK)         NT
	INNER JOIN coc_GeneralNotificationTemplateLanguages(NOLOCK) NL ON NL.GeneralNotificationTemplateID = NT.GeneralNotificationTemplateID
	WHERE NL.LanguageID = @LanguageID
		AND NT.TemplateTypeID = 144
		AND NT.NotificatonUsage = 1

	SELECT @EmailTemplate = NL.Template
	FROM       coc_GeneralNotificationTemplates(NOLOCK)         NT
	INNER JOIN coc_GeneralNotificationTemplateLanguages(NOLOCK) NL ON NL.GeneralNotificationTemplateID = NT.GeneralNotificationTemplateID
	WHERE NL.LanguageID = @LanguageID
		AND NT.TemplateTypeID = 144
		AND NT.EmailUsage = 1

	SELECT @MobileNumber = Mobilenumber
	,      @EmailID = EmailID
	FROM coc_users(NOLOCK)
	WHERE userid = (
		SELECT TOP 1 userid
		FROM coc_consumers(NOLOCK)
		WHERE consumerid = @UniqueID
		)

	SELECT @Otp                   [Otp]
	,      @OtpID                 [OtpID]
	,      EmailNotification     
	,      SMSNotification       
	,      @SMSTemplate           [SMS]
	,      @NotificationTemplates [Notification]
	,      @EmailTemplate         [Email]
	,      @MobileNumber          [MobileNumber]
	,      @EmailID               [EmailID]
	FROM @Notificationtemplate

	COMMIT TRANSACTION Trn_GenerateOTP
	END TRY

	BEGIN CATCH
	ROLLBACK TRANSACTION Trn_GenerateOTP

	SELECT ERROR_MESSAGE()
	END CATCH

	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetActiveCities]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_GetActiveCities]  
	@CountryID INTEGER=NULL,
	@LanguageID INTEGER =1
AS 
 BEGIN 
	SELECT  CU.CityID,CL.City
		FROM [coc_Cities] CU(NOLOCK) 
			 INNER JOIN coc_CityLanguages CL(NOLOCK) ON CL.CityID=CU.CityID AND CL.LanguageID=@LanguageID
		WHERE CU.CountryID=@CountryID AND CU.IsActive=1 
			  order by CL.City	
 END
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetActiveRetailOutletList]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_GetActiveRetailOutletList] @LanguageID INTEGER             = 1
,                                                           @CityID INTEGER                  =NULL
,                                                           @CountryID INTEGER              = NULL
,                                                           @CorporateID INTEGER            = NULL
,                                                           @ImpersonationUserID bigint     = null
,                                                           @SpResponseStatus int            out
,                                                           @SpResponseMessage nvarchar(max) out
,                                                           @SpErrorDetails nvarchar(max)    out
AS
	SET NOCOUNT ON
	BEGIN TRY

	SELECT ROW_NUMBER() OVER(ORDER BY RO.RetailOutletID)[SNO]
	,      RO.RetailOutletID                            
	,      RO.Location                                  
	,      RL.RetailOutlet                              
	FROM       coc_RetailOutlets         RO(NOLOCK)
	INNER JOIN coc_RetailOutletLanguages RL(NOLOCK) ON RL.RetailOutletID=RO.RetailOutletID AND RL.LanguageID=@LanguageID
	WHERE (@CityID IS NULL OR RO.CityID=@CityID) AND (@CountryID IS NULL OR RO.CountryID=@CountryID)
		AND (@LanguageID IS NULL OR RL.LanguageID=@LanguageID)
		AND (@CorporateID IS NULL OR RO.CorporateID = @CorporateID)
	SET NOCOUNT OFF

	END TRY

	BEGIN CATCH
	Set @SpResponseStatus=0;
	Set @SpResponseMessage='GenericError';
	Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';
	END CATCH

	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetAdminAllPurchaseBarcode]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_GetAdminAllPurchaseBarcode]                    
  @CorporateID int=null,               
  @LanguageID int=1               
 ,@UserID bigint=null               
 ,@RoleID bigint=null                
 ,@ImpersonationUserID bigint=null                 
 ,@SpResponseStatus int out               
 ,@SpResponseMessage nvarchar(max) out                 
 ,@SpErrorDetails nvarchar(max)    out                   
 AS                    
 SET NOCOUNT ON                   
 BEGIN                     
  BEGIN TRY                 
 if @CorporateID =0  
  begin  
 set @CorporateID=null;  
 end  
 select 
 bp.BarcodePurchaseId,
  bp.PurchaseNo,
  bp.Date,  
 (case when @LanguageID =1 then (select CorporateName from coc_Corporates (NOLOCK) where CorporateID=bp.CorporateId) 
 else 
  (select CorporateNameAR from coc_Corporates (NOLOCK) where CorporateID=bp.CorporateId)  end) as CorporateName,  
 bp.NoOfBarcodes,
 bp.TotalAMount,    
 isnull(bp.InvoicePath,'') as InvoicePath,
 isnull(bp.NoOfBarCodesApproved,0) as NoOfBarCodesApproved,    
 (DATEADD(year, 1, bp.Date)-1) AS ExpiryDate,
 bp.Status,
 (CASE WHEN  @LanguageID=1 then (select CurrencySymbol_EN from  coc_Currency (NOLOCK) where CurrencyId =(select BaseCurrencyId from  coc_Settings (NOLOCK))) else (select CurrencySymbol_AR from  coc_Currency (NOLOCK) where CurrencyId =(select BaseCurrencyId from  coc_Settings (NOLOCK))) end)


 as CurrencySymbol,
 --and Status!=5 it means excluding rejected amount
 (Select sum(PaidAmount) from coc_BarcodePurchasePayment(nolock) where BarcodePurchaseId=bp.BarcodePurchaseId and Status!=5) AS TotalPaidAmount              
 from coc_BarcodePurchase(nolock) bp   
 WHERE(@CorporateID IS NULL OR bp.CorporateId=@CorporateID)  and bp.IsDeleted=0  
 order by bp.Status  , bp.BarcodePurchaseId    
           
                  
  END TRY                
              
  BEGIN CATCH                
  Set @SpResponseStatus=0;                       
 Set @SpResponseMessage='GenericError';                         
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+  
  convert(varchar(500),Error_severity())+'>, ErrorState : <'+  
  convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+  
  convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                        
  END CATCH               
 SET NOCOUNT OFF                 
              
 END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetAdvertisementInformation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetAdvertisementInformation]    
    @AdvertisementID INTEGER=NULL,
    @ImpersonationUserID BIGINT=NULL,              
    @SpResponseStatus INT = NULL OUT,              
    @SpResponseMessage NVARCHAR(MAX) = NULL OUT,              
    @SpErrorDetails NVARCHAR(MAX) = NULL OUT    
AS    
    SET NOCOUNT ON    
    BEGIN TRY      
        IF(@AdvertisementID IS NOT NULL AND @AdvertisementID > 0)    
        BEGIN    
            SELECT AD.AdvertisementID,AD.AdvertisementName,FORMAT(AD.StartDate,'dd/MM/yyyy')StartDate,ISNULL(AD.TargetURL,'')TargetURL,FORMAT(AD.Cost,'N2') Cost,AD.DisplayTypeID,AD.IsImage,AD.IsVideo,    
            AD.Duration,AD.PositionID,AD.IsActive,AD.TargetPlateform AS TargetPlateformID,AD.PopupHeight,AD.PopupWidth,FORMAT(DATEADD(dd,AD.Duration,AD.StartDate),'dd/MM/yyyy')EndDate,AD.HasNextVideo    
            FROM coc_Advertisements AD(NOLOCK)    
            WHERE AD.AdvertisementID=@AdvertisementID
            ORDER BY AD.IsActive , AD.AdvertisementID    
    
            SELECT FL.AdvertisementFileID,FL.AdvertisementID,FL.FilePath,FL.IsURL,AdvertisementText    
            FROM coc_AdvertisementFiles FL(NOLOCK)     
            WHERE FL.AdvertisementID=@AdvertisementID    
            ORDER BY FL.AdvertisementID    
    
            SELECT AP.AdvertisementPageID,AP.AdvertisementID,AP.PageID,AD.StartDate,DATEADD(dd,AD.Duration,AD.StartDate) AS EndDate    
            FROM coc_AdvertisementPages AP(NOLOCK)     
            INNER JOIN coc_Advertisements AD(NOLOCK) ON AP.AdvertisementID=AD.AdvertisementID     
            WHERE (@AdvertisementID is NULL OR AP.AdvertisementID=@AdvertisementID)    
            ORDER BY AP.AdvertisementID 
            
            Set @SpResponseStatus=1;                   
            Set @SpResponseMessage='Success';                  
            Set @SpErrorDetails ='Success'
        END    
    END TRY
    BEGIN CATCH
        Set @SpResponseStatus=0;                   
        Set @SpResponseMessage='GenericError';                  
        Set @SpErrorDetails ='ErrorNumber : <' + CONVERT(VARCHAR,ERROR_NUMBER())+ '>,         
        ErrorSeverity : <'+ CONVERT(VARCHAR,ERROR_SEVERITY())+'>,         
        ErrorState : <'+CONVERT(VARCHAR,ERROR_STATE())+'> ,         
        ErrorProcedure : <'+ERROR_PROCEDURE()+'> ,         
        ErrorLine <'+ CONVERT(VARCHAR, ERROR_LINE()) +'>         
        ErrorMessage : <'+ERROR_MESSAGE()+'>';
    END CATCH      
    SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetAllActiveChambers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE  [dbo].[Core_Usp_GetAllActiveChambers]      
  @LanguageID INTEGER=1,        
  @UserID bigint=NULL,      
  @RoleID bigint=NULL,      
  @ImpersonationUserID bigint,      
  @SpResponseStatus int OUTPUT,      
  @SpResponseMessage nvarchar(max) OUTPUT,      
  @SpErrorDetails nvarchar(max) OUTPUT                     
AS        
BEGIN TRY        
  Set @SpResponseStatus=1;       
  Set @SpResponseMessage='Success';      
  Set @SpErrorDetails=NULL;      
  SET NOCOUNT ON;       
    
      select c.ChamberID,cl.Name ChamberName from coc_chambers (nolock) c    
     inner join coc_ChamberLanguages(nolock)  cl on cl.ChamberID=c.ChamberID and cl.LanguageID=@LanguageId    
   where c.IsActive=1    
    
  END TRY                  
  BEGIN CATCH        
  Set @SpResponseStatus=0;       
  Set @SpResponseMessage='GenericError';      
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>, ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';          
              
  END CATCH                  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetAllActiveCities]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetAllActiveCities]            
 @EVoucherID int,        
 @LanguageID int        
AS           
 BEGIN           
   declare @CountryID int=0        
   select @CountryID=CountryID from coc_EVoucher(NOLOCK) where EVoucherID=@EVoucherID        
        
 SELECT  CU.CityID,CU.CountryID,CL.City,IsActive,CU.HasIntegration          
  FROM [coc_Cities] CU(NOLOCK)           
   INNER JOIN coc_CityLanguages CL(NOLOCK) ON CL.CityID=CU.CityID AND CL.LanguageID=@LanguageID          
  WHERE CU.CountryID=@CountryID AND IsActive=1          
  order by CU.displayorder, cl.city        
 END
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetAllActiveCompetitionMethods]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_GetAllActiveCompetitionMethods]  
  @IsFromOpenQuantityLink bit=0,
  @LanguageID INTEGER=1,        
  @UserID bigint=NULL,      
  @RoleID bigint=NULL,      
  @ImpersonationUserID bigint,      
  @SpResponseStatus int OUTPUT,      
  @SpResponseMessage nvarchar(max) OUTPUT,      
  @SpErrorDetails nvarchar(max) OUTPUT                     
AS        
BEGIN TRY        
  Set @SpResponseStatus=1;       
  Set @SpResponseMessage='Success';      
  Set @SpErrorDetails=NULL;      
  SET NOCOUNT ON;       
    if(@IsFromOpenQuantityLink=0)
	 begin
      select cm.CompetitionMethodID,cml.Name CompetitionMethodName,
	      cml.Description from coc_CompetitionMethods (nolock) cm    
                inner join coc_CompetitionMethodLanguages(nolock)  cml on cml.CompetitionMethodID=cm.CompetitionMethodID and cml.LanguageID=@LanguageId    
                 where cm.IsActive=1    
	 end
	 else
	 begin
	    select cm.CompetitionMethodID,cml.Name CompetitionMethodName,
		      cml.Description from coc_CompetitionMethods (nolock) cm    
                inner join coc_CompetitionMethodLanguages(nolock)  cml on cml.CompetitionMethodID=cm.CompetitionMethodID and cml.LanguageID=@LanguageId    
                 where cm.IsActive=1 and cm.CompetitionMethodID in(1,2,5) 
	 end
    
  END TRY                  
  BEGIN CATCH        
  Set @SpResponseStatus=0;       
  Set @SpResponseMessage='GenericError';      
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>, ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';          
              
  END CATCH                  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetAllActiveCompetitionParticipationTypes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_GetAllActiveCompetitionParticipationTypes]                
  @CompetitionMethodIDs XML,            
  @CompetitionTypeIDs XML,            
  @LanguageID INTEGER=1,                  
  @UserID bigint=NULL,                
  @RoleID bigint=NULL,                
  @ImpersonationUserID bigint,                
  @SpResponseStatus int OUTPUT,                
  @SpResponseMessage nvarchar(max) OUTPUT,                
  @SpErrorDetails nvarchar(max) OUTPUT                               
AS                  
BEGIN TRY                  
  Set @SpResponseStatus=1;                 
  Set @SpResponseMessage='Success';                
  Set @SpErrorDetails=NULL;                
  SET NOCOUNT ON;              
              
 DECLARE @CompetitionMethods AS TABLE (CompetitionMethodID INTEGER)              
  INSERT INTO @CompetitionMethods(CompetitionMethodID)                
    SELECT                  
  CompetitionMethod.value('(@CompetitionMethodID)', 'INTEGER')               
    FROM @CompetitionMethodIDs.nodes('/XML/Row') AS Data(CompetitionMethod)
    
 --DECLARE @CompetitionTypes AS TABLE (CompetitionTypeID INTEGER)              
 -- INSERT INTO @CompetitionTypes(CompetitionTypeID)                
 --   SELECT                  
 -- CompetitionType.value('(@CompetitionTypeID)', 'INTEGER')               
 --   FROM @CompetitionTypeIDs.nodes('/XML/Row') AS Data(CompetitionType)               
   
  
  --DECLARE @TempCompetitionMethodTypeIDs AS TABLE (CompetitionMethodTypeID INTEGER) 
  --DECLARE @TempCompetitionMethodIDs AS TABLE (CompetitionMethodID INTEGER) 

  --insert into @TempCompetitionMethodIDs
  --   Select CompetitionMethodID from coc_CompetitionMethod_Types(nolock) where CompetitionTypeID in(SELECT CompetitionTypeID from @CompetitionTypes) 
	   
  --insert into @TempCompetitionMethodTypeIDs 	   
	 --Select CompetitionMethodTypeID from coc_CompetitionMethod_Types(nolock) where CompetitionMethodID in (SELECT CompetitionMethodID from @TempCompetitionMethodIDs)

	 --DECLARE @CompetitionMethodTypes AS TABLE (CompetitionMethodID INTEGER,CompetitionTypeID INTEGER) 
		--insert into @CompetitionMethodTypes
		--select cm.CompetitionMethodID,ct.CompetitionTypeID from  @CompetitionMethods cm
		--   cross join @CompetitionTypes ct



 Select cpt.CompetitionParticipationTypeID,cptl.Name CompetitionParticipationTypeName from coc_CompetitionParticipationTypes (nolock) cpt                         
inner join coc_CompetitionParticipationTypeLanguages(nolock) cptl on cptl.CompetitionParticipationTypeID=cpt.CompetitionParticipationTypeID and cptl.LanguageID=@LanguageId                    
where cpt.IsActive=1 and                     
cpt.CompetitionParticipationTypeID in         
(select cmp.ParticipationTypeID from coc_CompetitionMethodParticipationTypes(nolock) cmp where cmp.IsActive=1 and CompetitionMethodID in 
  (SELECT CompetitionMethodID from @CompetitionMethods))          
              
  END TRY                            
  BEGIN CATCH                  
  Set @SpResponseStatus=0;                 
  Set @SpResponseMessage='GenericError';                
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>, ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                    
                        
  END CATCH                            
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetAllACtiveCompetitionServices]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_GetAllACtiveCompetitionServices]                   
  @CompetitionMethodIDs XML,                
  @CompetitionTypeIDs XML,                
  @LanguageID INTEGER=1,                      
  @UserID bigint=NULL,                    
  @RoleID bigint=NULL,                    
  @ImpersonationUserID bigint,                    
  @SpResponseStatus int OUTPUT,                    
  @SpResponseMessage nvarchar(max) OUTPUT,                    
  @SpErrorDetails nvarchar(max) OUTPUT                                   
AS                      
BEGIN TRY                      
  Set @SpResponseStatus=1;                     
  Set @SpResponseMessage='Success';                    
  Set @SpErrorDetails=NULL;                    
  SET NOCOUNT ON;                  
                  
 DECLARE @CompetitionMethods AS TABLE (CompetitionMethodID INTEGER)                  
  INSERT INTO @CompetitionMethods(CompetitionMethodID)                    
    SELECT                      
	  CompetitionMethod.value('(@CompetitionMethodID)', 'INTEGER')                   
		FROM @CompetitionMethodIDs.nodes('/XML/Row') AS Data(CompetitionMethod)                 
                
 --DECLARE @CompetitionTypes AS TABLE (CompetitionTypeID INTEGER)                  
 -- INSERT INTO @CompetitionTypes(CompetitionTypeID)                    
 --   SELECT                      
 -- CompetitionType.value('(@CompetitionTypeID)', 'INTEGER')                   
 --   FROM @CompetitionTypeIDs.nodes('/XML/Row') AS Data(CompetitionType)       
     
    
 --DECLARE @CompetitionMethodTypes AS TABLE (CompetitionMethodID INTEGER,CompetitionTypeID INTEGER) 
 --insert into @CompetitionMethodTypes
 --    select cm.CompetitionMethodID,ct.CompetitionTypeID from  @CompetitionMethods cm
	--	   cross join @CompetitionTypes ct
  
    select cs.CompetitionServiceID,csl.Name CompetitionServiceName from coc_CompetitionServices (nolock) cs                  
 inner join coc_CompetitionServiceLanguages(nolock) csl on csl.CompetitionServiceID=cs.CompetitionServiceID and csl.LanguageID=@LanguageId                
 where cs.IsActive=1 and cs.IsDisplayAsService=1 and                
 cs.CompetitionServiceID in (select cms.CompetitionServiceID from coc_CompetitionMethodServices(nolock) cms           
      where  cms.IsActive=1 and cms.CompetitionMethodID in (SELECT CompetitionMethodID from @CompetitionMethods))        
   
        
             
                  
  END TRY                                
  BEGIN CATCH                      
  Set @SpResponseStatus=0;                     
  Set @SpResponseMessage='GenericError';                    
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>,          
   ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>,           
   ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> ,           
   ErrorProcedure : <'+ERROR_PROCEDURE()+'> ,           
   ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                        
                            
  END CATCH                                
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetAllActiveCompetitionTypes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_GetAllActiveCompetitionTypes]              
  @CompetitionMethodIDs XML,
  @IsFromOpenQuantityLink bit=0,
  @LanguageID INTEGER=1,                
  @UserID bigint=NULL,              
  @RoleID bigint=NULL,              
  @ImpersonationUserID bigint,              
  @SpResponseStatus int OUTPUT,              
  @SpResponseMessage nvarchar(max) OUTPUT,              
  @SpErrorDetails nvarchar(max) OUTPUT                             
AS                
BEGIN TRY                
  Set @SpResponseStatus=1;               
  Set @SpResponseMessage='Success';              
  Set @SpErrorDetails=NULL;              
  SET NOCOUNT ON;               
       
 DECLARE @CompetitionMethods AS TABLE (CompetitionMethodID INTEGER)            
 INSERT INTO @CompetitionMethods(CompetitionMethodID)              
   SELECT                
    CompetitionMethod.value('(@CompetitionMethodID)', 'INTEGER')             
   FROM @CompetitionMethodIDs.nodes('/XML/Row') AS Data(CompetitionMethod)              
  
  if(@IsFromOpenQuantityLink=0)
  begin
	  select ct.CompetitionTypeID,ctl.Name CompetitionTypeName from coc_CompetitionTypes (nolock) ct            
		 inner join coc_CompetitionTypeLanguages(nolock) ctl on ctl.CompetitionTypeID=ct.CompetitionTypeID and ctl.LanguageID=@LanguageId   
	   where ct.IsActive=1 and             
	   ct.CompetitionTypeID  in  
	   (SELECT cmt.CompetitionTypeID from @CompetitionMethods cm  
		 inner join coc_CompetitionMethod_Types(nolock) cmt on cmt.CompetitionMethodID=cm.CompetitionMethodID  
		 where  cmt.IsActive=1  
		  group by cmt.CompetitionTypeID having count(cmt.CompetitionTypeID) = (SELECT count(CompetitionMethodID) from @CompetitionMethods) )    
  end
  else
  begin
     select ct.CompetitionTypeID,ctl.Name CompetitionTypeName from coc_CompetitionTypes (nolock) ct            
		 inner join coc_CompetitionTypeLanguages(nolock) ctl on ctl.CompetitionTypeID=ct.CompetitionTypeID and ctl.LanguageID=@LanguageId   
	   where ct.IsActive=1 and ct.CompetitionTypeID=4
  end
            
      
  END TRY                          
  BEGIN CATCH                
  Set @SpResponseStatus=0;               
  Set @SpResponseMessage='GenericError';              
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>, ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                  
                      
  END CATCH                          
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_USP_GetAllActiveCountries]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_USP_GetAllActiveCountries]
(
@LanguageId int = 1
)
AS
BEGIN


SELECT cc.CountryID,cl.Country CountryName,cc.FlagImage, cc.ISOCode

from coc_Countries cc (NOLOCK) inner join coc_CountryLanguages cl (NOLOCK) on cc.CountryId = cl.CountryID

WHERE cl.LanguageId = @LanguageId and CC.IsActive = 1 
--and (cc.AllowRegistration = 1)

END
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetAllGeneralNotification]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_GetAllGeneralNotification]                  
  @CorporateID int=null,             
  @LanguageID int=1             
 ,@UserID int=null             
 ,@RoleID int=null              
 ,@ImpersonationUserID bigint=null               
 ,@SpResponseStatus int out             
 ,@SpResponseMessage nvarchar(max) out               
 ,@SpErrorDetails nvarchar(max)    out                 
 AS                  
 SET NOCOUNT ON                 
 BEGIN                   
  BEGIN TRY           
  Select 
  GN.GeneralNotificationId,
  CONVERT(nvarchar, GN.CreatedDate, 23) as PushNotificationDate ,
  Convert(nvarchar,GN.ScheduleFromDate,23) as ScheduleFromDate,
  CONVERT(nvarchar,GN.ScheduleToDate,23)as ScheduleToDate ,
 (select  NSL.Subject from coc_NotificationSendLanguages(NOLOCK) NSL where NSL.NotificationSendID=NS.NotificationSendID and  NSL.LanguageID=1 )as MessageHeadingEN,
 (select  NSL.Subject from coc_NotificationSendLanguages(NOLOCK) NSL where NSL.NotificationSendID=NS.NotificationSendID and  NSL.LanguageID=2 )as MessageHeadingAR,
 (select count(*) from coc_ConsumerNotifications(NOLOCK) where NotificationSendID=NS.NotificationSendID  )as TotalConsumerNotification,
  GN.IsActive,
  GN.IsBrodaCast
  FROM coc_GeneralNotification(NOLOCK) GN
  inner join coc_NotificationSends NS (NOLOCK) on NS.GeneralNotificationId=GN.GeneralNotificationId
   order by  GN.GeneralNotificationId desc
  
  END TRY              
            
  BEGIN CATCH              
  Set @SpResponseStatus=0;                     
 Set @SpResponseMessage='GenericError';                       
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number()) + '>,
 ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, 
 ErrorState : <'+ convert(varchar(500), Error_state())+'> , 
 ErrorProcedure : <'+Error_procedure() +'> , 
 ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                      
  END CATCH             
 SET NOCOUNT OFF               
            
 END
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetAllPrivateVouchers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_GetAllPrivateVouchers] 
 @LanguageID INTEGER=1  
,@CorporateID INTEGER=NULL  
,@UserID INTEGER=NULL  
,@RoleID bigint=null  
,@ImpersonationUserID bigint=null  
,@SpResponseStatus int out  
,@SpResponseMessage nvarchar(max) out  
,@SpErrorDetails nvarchar(max)  out  
AS  
 SET NOCOUNT ON  
 BEGIN TRY  
 
 Select evl.ResourceValue as VoucherName,ev.EVoucherID from coc_EVoucher(nolock) ev
    inner join coc_EVoucherLanguages(nolock) evl on evl.EVoucherID=ev.EVoucherID and evl.LanguageID=@LanguageID 
	and evl.ResourceKey='VoucherName'
	inner join coc_EServices(nolock) es on es.EServiceID=ev.EServiceID
	where es.CorporateID=@CorporateID and ev.EVoucherTypeID=2 and ev.IsActive=1 and ev.IsDeleted=0


 Set @SpResponseStatus=1;  
 Set @SpResponseMessage='Success';  
  
 END TRY  
  
 BEGIN CATCH  
  
 Set @SpResponseStatus=0;  
  
 Set @SpResponseMessage='GenericError';  
  
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';  
  
 END CATCH  
  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetAllPurchaseBarcode]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_GetAllPurchaseBarcode]                  
 @CorporateID int,             
 @LanguageID int=1             
 ,@UserID bigint=null             
 ,@RoleID bigint=null              
 ,@ImpersonationUserID bigint=null               
 ,@SpResponseStatus int out             
 ,@SpResponseMessage nvarchar(max) out               
 ,@SpErrorDetails nvarchar(max)    out                 
 AS                  
 SET NOCOUNT ON                 
 BEGIN                   
  BEGIN TRY               
       
 select bp.BarcodePurchaseId, bp.PurchaseNo,bp.Date,c.FirstName as CorporateName,bp.NoOfBarcodes,bp.TotalAMount,  
 isnull(bp.InvoicePath,'') as InvoicePath,isnull(bp.NoOfBarCodesApproved,0) as NoOfBarCodesApproved,  
 (DATEADD(year, 1, bp.Date)-1) AS ExpiryDate,bp.Status,
 (case when @LanguageID=1 then cc.CurrencySymbol_en else cc.CurrencySymbol_ar end) as Currency,
 (Select sum(PaidAmount) from coc_BarcodePurchasePayment(nolock) where BarcodePurchaseId=bp.BarcodePurchaseId and coc_BarcodePurchasePayment.Status!=5) AS TotalPaidAmount
 from coc_BarcodePurchase(nolock) bp                
 inner join coc_Corporates(nolock) c on c.CorporateID=bp.CorporateID
 inner join coc_BarcodePrices(nolock) cbp on cbp.BarcodePriceId=bp.BarcodePriceId
 inner join Coc_Currency(nolock) cc on cc.CurrencyId=cbp.CurrencyId
 where c.CorporateID=@CorporateID  and bp.IsDeleted=0  order by bp.BarcodePurchaseId desc  
                  
  END TRY              
            
  BEGIN CATCH              
  Set @SpResponseStatus=0;                     
 Set @SpResponseMessage='GenericError';                       
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, 
 ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, 
 ErrorState : <'+convert(varchar(500), Error_state())+'> , 
 ErrorProcedure : <'+Error_procedure() +'> , 
 ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                      
  END CATCH             
 SET NOCOUNT OFF               
            
 END
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetAllSocialMediaNames]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_GetAllSocialMediaNames]
  @LanguageID INTEGER=1,                  
  @UserID bigint=NULL,                
  @RoleID bigint=NULL,     
  @ImpersonationUserID bigint,                
  @SpResponseStatus int OUTPUT,                
  @SpResponseMessage nvarchar(max) OUTPUT,                
  @SpErrorDetails nvarchar(max) OUTPUT                               
AS                  
BEGIN TRY                  
SET NOCOUNT ON;     
  Set @SpResponseStatus=1;                 
  Set @SpResponseMessage='Success';                
  Set @SpErrorDetails='Success';                
  
  
  SELECT SocialMediaID, SocialMediaName, SocialMediaNameAR, IsActive 
  FROM coc_SocialMedia 
  WHERE IsActive = 1
              
END TRY                            
BEGIN CATCH                  
  Set @SpResponseStatus=0;                 
  Set @SpResponseMessage='GenericError';                
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>, ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                    
                        
  END CATCH                            
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetAllVoucherPackages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetAllVoucherPackages]  
@LanguageID INTEGER=1                                                            
AS                                 
begin
  select vgp.VoucherPackageID,
  (select STRING_AGG(ResourceValue, ', ') from coc_EVoucherLanguages(nolock) where ResourceKey='VoucherName' and LanguageID=@LanguageID and EVoucherID in 
     (select VoucherID from coc_core_VGP_Vouchers(nolock) where VoucherPackageID=vgp.VoucherPackageID)) VoucherNames,
	 (case when @LanguageID=2 then vgp.VoucherPackageNameAr else vgp.VoucherPackageName end) VoucherPackageName,
	 Convert(varchar(10),CONVERT(date,vgp.StartDate,106),103) as StartDate,          
     Convert(varchar(10),CONVERT(date,vgp.EndDate,106),103) as EndDate,  
	 vgp.URL,
	 vgp.ImageName
  from coc_core_Voucher_Gift_Package(nolock) vgp where vgp.IsActive=1
       
	   
end
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetALLVoucherRetailOutlet]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_GetALLVoucherRetailOutlet] @VoucherID INTEGER=NULL
AS
begin
	SET NOCOUNT ON
	SELECT RetailOutletID
	FROM coc_EVoucherRetailOutlet(NOLOCK)
	WHERE EVoucherID= @VoucherID

	SET NOCOUNT OFF
end
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetAllVouchers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_GetAllVouchers]            
 @CorporateID INTEGER=NULL,            
 @LanguageID INTEGER=1  
AS                    
 SET NOCOUNT ON;     
 BEGIN   
  
    if(@CorporateID=0)  
    set @CorporateID=NULL  
  
    select ev.EVoucherID,evl.ResourceValue as VoucherName from coc_EVoucher(NOLOCK) ev  
 inner join coc_EServices(Nolock) es on es.EServiceID=ev.EServiceID  
 inner join coc_EVoucherLanguages(NOLOCK) evl on evl.EVoucherID=ev.EVoucherID and evl.LanguageID=@LanguageID and evl.ResourceKey='VoucherName'  
 where (@CorporateID is null or es.CorporateID=@CorporateID) and ev.IsDeleted=0  
 order by EVoucherID desc  
  
 END  
  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetAllVoucherTypes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetAllVoucherTypes]            
 @LanguageID int,   
 @UserID bigint,
 @RoleID bigint,
 @ImpersonationUserID bigint,
 @SpResponseStatus int OUTPUT,
 @SpResponseMessage nvarchar(500) OUTPUT,
 @SpErrorDetails nvarchar(500) OUTPUT
AS 
BEGIN TRY
  Set @SpResponseStatus=1; 
  Set @SpResponseMessage='Success';
  Set @SpErrorDetails=NULL;
    SELECT  VoucherTypeID,      
 (case when @LanguageID=1 then VoucherTypeEN else VoucherTypeAR end) VoucherType,      
 IsActive         
  FROM [coc_VoucherTypes]  (NOLOCK)

END TRY  
BEGIN CATCH  
  Set @SpResponseStatus=0; 
  Set @SpResponseMessage='GenericError';
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';
END CATCH;
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetAllWebNotification]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetAllWebNotification]           
 @WebNotificationID  bigint  =  null              
,@LanguageID INTEGER=1               
,@UserID bigint                  =  NULL              
,@RoleID bigint                  =  NULL              
,@ImpersonationUserID bigint     =  null              
,@SpResponseStatus int              out            
,@SpResponseMessage nvarchar(max)    out          
,@SpErrorDetails nvarchar(max)        out                
              
AS                
 SET NOCOUNT ON               
  BEGIN  TRY          
            
  --set if it is empty          
   if(@WebNotificationID=0)          
   begin          
    set @WebNotificationID =null          
   end          
          
  if(@RoleID =1)          
  begin          
  SELECT           
   wn.WebNotificationID           
  --,wn.WebNotificationDate  
  ,CONVERT(varchar, wn.WebNotificationDate,103) as WebNotificationDate          
  ,wn.WebNotificationTypeID           
  ,wn.RedirectionLink           
  ,wn.ParamValue           
  ,wn.AssignedToAdmin           
  ,wn.AssignedToCorporateID           
  ,wn.IsRead           
  ,wn.ReadOn           
  ,wn.ReadByUserID           
  ,wn.IsCompleted           
  ,wn.IsHide            
  ,IsNull(wn.NotificationFor,'') + '    '+ wnl.WebNotificationMessage   as WebNotificationMessage     
  ,(select LogoFile from coc_Corporates where UserID=wn.RequestedByUserID) as Logo  
  --,'iconsmall.png' as Logo        
  from   coc_core_WebNotifications wn             
  left join coc_WebNotificationLanguages wnl on wnl.WebNotificationID=wn.WebNotificationID and wnl.LanguageID=@LanguageID          
  where wn.AssignedToAdmin=1   and wn.IsRead is null  and ReadByUserID is null      
   order by wn.IsRead ,  wn.WebNotificationDate desc 
  end          
  else           
  begin          
           
  SELECT           
   wn.WebNotificationID           
  --,wn.WebNotificationDate  
  ,CONVERT(varchar, wn.WebNotificationDate,103) as WebNotificationDate          
  ,wn.WebNotificationTypeID           
  ,wn.RedirectionLink           
  ,wn.ParamValue           
  ,wn.AssignedToAdmin           
  ,wn.AssignedToCorporateID           
  ,wn.IsRead           
  ,wn.ReadOn           
  ,wn.ReadByUserID           
  ,wn.IsCompleted           
  ,wn.IsHide           
  ,IsNull(wn.NotificationFor,'') + '    '+ wnl.WebNotificationMessage   as WebNotificationMessage      
  --,(select LogoFile from coc_Corporates where UserID=@UserID) as Logo      
   ,'iconsmall.png' as Logo        
  from   coc_core_WebNotifications wn             
  left join coc_WebNotificationLanguages wnl on wnl.WebNotificationID=wn.WebNotificationID and wnl.LanguageID=@LanguageID          
  where wn.AssignedToCorporateID=@UserID  and  wn.IsRead is null  and ReadByUserID is null    
   order by wn.IsRead ,  wn.WebNotificationDate desc 
  end          
            
            
 Set @SpResponseStatus=1;              
 Set @SpResponseMessage='Success';              
 Set @SpErrorDetails='Success';              
 END TRY              
 BEGIN CATCH              
 Set @SpResponseStatus=0;              
 Set @SpResponseMessage='GenericError';              
 Set @SpErrorDetails ='ErrorNumber';              
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,             
 ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>,            
 ErrorState : <'+convert(varchar(500), Error_state())+'> ,             
 ErrorProcedure : <'+Error_procedure() +'> ,            
 ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';              
              
 END CATCH              
              
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetAllWebNotificationHistory]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetAllWebNotificationHistory]             
 @LanguageID INTEGER=1      
,@CorporateID    INTEGER=NULL      
,@UserID     bigint = NULL                      
,@RoleID     bigint = NULL                      
,@ImpersonationUserID  bigint = null                      
,@SpResponseStatus int              out                     
,@SpResponseMessage nvarchar(max)   out                      
,@SpErrorDetails nvarchar(max)     out          
AS                        
 SET NOCOUNT ON         
  if(@CorporateID=0)      
  begin      
   set @CorporateID=NULL      
  end      
  BEGIN  TRY        
  --if admin login      
  if(@RoleID=1)          
  begin          
    SELECT              
            
   wn.WebNotificationID                
  , IIF( (select count(*) from coc_Users where UserID=wn.RequestedByUserID and RoleID=3)=1        
  ,(select isnull(CorporateName, CorporateNameAR)  from coc_Corporates where UserID=wn.RequestedByUserID)        
  ,(select Isnull(FullName,UserName) from coc_Users where RoleID=1 and UserID=wn.RequestedByUserID))  AS RequestedBy        
  ,(Case When  wn.ReadByUserID is not null then         
  (IIF( (select count(*) from coc_Users where UserID=wn.ReadByUserID and RoleID=3)=1          
  ,(select IsNull(isnull(CorporateName, CorporateNameAR),'Not Read Yet')  from coc_Corporates where UserID=wn.ReadByUserID)        
  ,(select Isnull(FullName,UserName) from coc_Users where RoleID=1 and UserID=wn.ReadByUserID)) )          
  else        
   'Not yet Read' end)AS ReadByUser        
  , wn.RequestedByUserID            
  --,wn.WebNotificationDate  
  ,CONVERT(varchar, wn.WebNotificationDate,103) as WebNotificationDate                 
  ,wn.WebNotificationTypeID                   
  ,wn.RedirectionLink                   
  ,wn.ParamValue                   
  ,wn.AssignedToAdmin                   
  ,wn.AssignedToCorporateID                   
  ,wn.IsRead                   
  ,wn.ReadOn                   
  ,wn.ReadByUserID                   
  ,wn.IsCompleted                   
  ,wn.IsHide              
  ,wn.NotificationFor        
  ,IsNull(wn.NotificationFor,'') + '    '+ wnl.WebNotificationMessage   as WebNotificationMessage          
  from   coc_core_WebNotifications wn                     
  left join coc_WebNotificationLanguages wnl on wnl.WebNotificationID=wn.WebNotificationID and wnl.LanguageID=@LanguageID            
  order by wn.IsRead ,  wn.WebNotificationDate desc 
 end       
  --if corporate login      
  else if(@RoleID=3 AND (@UserID is not null AND @UserID<>0))      
   begin       
   SELECT      
   wn.WebNotificationID       
  ,wn.RequestedByUserID            
  --,wn.WebNotificationDate  
  ,CONVERT(varchar, wn.WebNotificationDate,103) as WebNotificationDate                  
  ,wn.WebNotificationTypeID                   
  ,wn.RedirectionLink                   
  ,wn.ParamValue                   
  ,wn.AssignedToAdmin                   
  ,wn.AssignedToCorporateID                   
  ,wn.IsRead                   
  ,wn.ReadOn                   
  ,wn.ReadByUserID                   
  ,wn.IsCompleted                   
  ,wn.IsHide              
  ,wn.NotificationFor        
  ,IsNull(wn.NotificationFor,'') + '    '+ wnl.WebNotificationMessage   as WebNotificationMessage          
  from   coc_core_WebNotifications wn                     
  left join coc_WebNotificationLanguages wnl on wnl.WebNotificationID=wn.WebNotificationID and wnl.LanguageID=@LanguageID            
  where wn.AssignedToCorporateID=@UserID  
  order by wn.IsRead ,  wn.WebNotificationDate desc
        
  END      
 Set @SpResponseStatus=1;                      
 Set @SpResponseMessage='Success';                      
 Set @SpErrorDetails='Success';            
             
 END TRY          
 BEGIN CATCH                      
 Set @SpResponseStatus=0;                      
 Set @SpResponseMessage='GenericError';                      
 Set @SpErrorDetails ='ErrorNumber';                      
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,                     
 ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>,                    
 ErrorState : <'+convert(varchar(500), Error_state())+'> ,                     
 ErrorProcedure : <'+Error_procedure() +'> ,            
 ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                      
                     END CATCH                      
                      
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetBarcodeAmount]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_GetBarcodeAmount]        
   @TotalBarcodes bigint
  ,@TotalBarcodesLenth int=null 
  ,@LanguageId int=1
  ,@CurrencyID bigint=1  
 ,@SpResponseStatus int out     
 ,@SpResponseMessage nvarchar(max) out       
 ,@SpErrorDetails nvarchar(max)    out      
AS        
    
SET NOCOUNT ON          
    
BEGIN TRY  
 if(@TotalBarcodesLenth >= 7)
 begin
  select top 1 
   Convert(nvarchar(20),Price) Amount,
   (select case when @LanguageId=1 then CurrencySymbol_en else CurrencySymbol_ar end from  coc_Currency (NOLOCK) where CurrencyId =(select top 1 BaseCurrencyId from  coc_Settings (NOLOCK))) Currency
   from Coc_BarcodePrices(NoLock)  order by  BarcodePriceId desc 
 end
else
begin
 if exists (select Price from Coc_BarcodePrices(NoLock) where CountFrom<=@TotalBarcodes and CountTo>=@TotalBarcodes)    
    
 begin    
    
   select 
   Convert(nvarchar(20),Price) Amount,
   (select case when @LanguageId=1 then CurrencySymbol_en else CurrencySymbol_ar end from  coc_Currency (NOLOCK) where CurrencyId =(select top 1 BaseCurrencyId from  coc_Settings (NOLOCK))) Currency
   from Coc_BarcodePrices(NoLock) where CountFrom<=@TotalBarcodes and CountTo>=@TotalBarcodes  
    
 end    
    
 else if exists (select Price from Coc_BarcodePrices(NoLock) where CountFrom>@TotalBarcodes)    
    
 begin    
    
   select top 1 
   Convert(nvarchar(20),Price) Amount,
   (select case when @LanguageId=1 then CurrencySymbol_en else CurrencySymbol_ar end from  coc_Currency (NOLOCK) where CurrencyId =(select top 1 BaseCurrencyId from  coc_Settings (NOLOCK))) Currency
   from Coc_BarcodePrices(NoLock) where CountFrom>@TotalBarcodes   
    
 end    
    
    else if exists (select Price from Coc_BarcodePrices(NoLock) where CountTo<@TotalBarcodes)    
    
 begin    
    
    select top 1 
	Convert(nvarchar(20),Price) Amount,
   (select case when @LanguageId=1 then CurrencySymbol_en else CurrencySymbol_ar end from  coc_Currency (NOLOCK) where CurrencyId =(select top 1 BaseCurrencyId from  coc_Settings (NOLOCK))) Currency
	from Coc_BarcodePrices(NoLock) where CountTo<@TotalBarcodes order by BarcodePriceId desc    
    
 end       
  end
  Set @SpResponseStatus=1;      
  Set @SpResponseMessage='Success';     
  Set @SpErrorDetails=NULL;       
 END TRY        
 BEGIN CATCH        
    
  SELECT ERROR_LINE()        
    
  SELECT ERROR_MESSAGE()        
  Set @SpResponseStatus=0;             
  Set @SpResponseMessage='GenericError';               
  Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,
   ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>,
    ErrorState : <'+convert(varchar(500), Error_state())+'> , 
	ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';              
    
    
 END CATCH         
    
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetCompetitionBarcodeDetails]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_GetCompetitionBarcodeDetails]                
  @CompetitionStagingID BIGINT=null, 
  @CorporateID INTEGER=null,                  
  @LanguageID INTEGER=1,    
  @UserID bigint=NULL,                      
  @RoleID bigint=NULL,                      
  @ImpersonationUserID bigint=null,                      
  @SpResponseStatus int out,                      
  @SpResponseMessage nvarchar(max) out,                      
  @SpErrorDetails nvarchar(max)  out                                     
AS                     
BEGIN TRY    	
	  declare @EcouponID bigint =null;
	  declare @EserviceID bigint =null;
	  declare @NotificationID bigint =null;
	  declare @CompetitionStagingCoupons bigint =null;
	  declare @TotalNotificationCount bigint =null;
	  if exists(select CompetitionId from coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID and CompetitionId is not null  )
	  begin
	      select @EcouponID=CompetitionId,@CompetitionStagingCoupons=NoOfCoupons from coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID
	      select @EserviceID=EServiceID from coc_ECoupons(nolock) where ECouponID=@EcouponID
		  select @NotificationID=NotificationID from coc_Notifications(nolock) where EServiceID=@EserviceID
		  select @TotalNotificationCount=NotificationCount from coc_eserviceinvoices(nolock) where EServiceID=@EserviceID
		  
		  SELECT
		  @CompetitionStagingCoupons as TotalPuchaseBarcodes,
		  (case when @TotalNotificationCount > @CompetitionStagingCoupons 
		  then 
		  		  CAST(@TotalNotificationCount as bigint)- CAST(@CompetitionStagingCoupons AS bigint)
		  else 
		      0
		  end) as TotalExtraBarcodes,
		(select count(esb.NotificationID) from coc_EServiceBarcodes (nolock) esb where esb.NotificationID= @NotificationID )as TotalGeneratedBarcodes,
		  (select count(esb.NotificationID) from coc_EServiceBarcodes (nolock) esb where esb.NotificationID= @NotificationID and esb.IsDownloaded = 1 AND esb.IsUsed= 1) as  DownloadedTotalBarcodes,
		  (select count(esb.NotificationID) from coc_EServiceBarcodes (nolock) esb where esb.NotificationID= @NotificationID and (esb.IsDownloaded=1 AND esb.IsUsed= 1 ) and (esb.AsignedMoile is not null OR esb.AsignedEmailID is not null  OR  esb.ConsumerID is not null )) as  TotalUsedBarcodesFromDownload,
		  --(select count(esb.NotificationID) from coc_EServiceBarcodes (nolock) esb where esb.NotificationID=@NotificationID and (esb.IsDownloaded is null AND esb.IsUsed= 1 ) and (esb.AsignedMoile is not null OR esb.AsignedEmailID is not null  OR  esb.ConsumerID is not null)) as  TotalUsedBarcodesFromUpload,
		  (select count(EP.ECouponParticipationID) from coc_ECouponParticipations  EP inner join UploadParticipations UP  ON UP.ECouponParticipationID=EP.ECouponParticipationID where EP.ECouponID=@EcouponID ) as  TotalUsedBarcodesFromUpload,
		  --(select count(esb.NotificationID) from coc_EServiceBarcodes (nolock) esb where esb.NotificationID=@NotificationID and  esb.IsUsed=1  and (esb.AsignedMoile is not null OR esb.AsignedEmailID is not null  OR  esb.ConsumerID is not null )) as  TotalUsedBarcodes,
		  (select count(*)  from coc_ECouponParticipations  where ECouponID=@EcouponID )as  TotalUsedBarcodes,
		  (select count(esb.NotificationID) from coc_EServiceBarcodes (nolock) esb where esb.NotificationID=@NotificationID and  IsNull(esb.IsUsed,0)=0 and (esb.AsignedMoile is null AND esb.AsignedEmailID is null  AND  esb.ConsumerID is null)) as  UnusedBarcodes,
		  (select count(esb.NotificationID) from coc_EServiceBarcodes (nolock) esb where esb.NotificationID=@NotificationID and (esb.IsDownloaded=1 AND esb.IsUsed = 1 ) and (esb.AsignedMoile is null AND esb.AsignedEmailID is null  AND  esb.ConsumerID is null)) as  UnusedDownloadBarcodes
	  end
	  else 
	  begin
      Select   
	          cs.noofcoupons as TotalPuchaseBarcodes
	          ,'Competition not Active' as TotalExtraBarcodes
			  ,'Competition not Active' as TotalGeneratedBarcodes
			  ,'Competition not Active' as DownloadedTotalBarcodes 
              ,'Competition not Active' as TotalUsedBarcodesFromDownload 
              ,'Competition not Active' as TotalUsedBarcodesFromUpload 
			  ,'Competition not Active' as TotalUsedBarcodes 
			  ,'Competition not Active' as UnusedBarcodes 
			  ,'Competition not Active' as UnusedDownloadBarcodes 
			  FROM coc_competition_staging (nolock) 
			  cs where cs.CompetitionStagingID=@CompetitionStagingID
	         end
   

    SET @SpResponseStatus=1; 
    SET @SpResponseMessage='Success'; 
    SET @SpErrorDetails='Success'; 
END try 

BEGIN catch 
    SET @SpResponseStatus=0; 
    SET @SpResponseMessage='GenericError'; 
    SET @SpErrorDetails ='ErrorNumber : <' 
                         + CONVERT(NVARCHAR(20), Error_number()) 
                         + '>,                  ErrorSeverity : <' 
                         + CONVERT(NVARCHAR(20), Error_severity()) 
                         + '>,                   ErrorState : <' 
                         + CONVERT(NVARCHAR(20), Error_state()) 
                         + '> ,                   ErrorProcedure : <' + Error_procedure() 
                         + '> ,                   ErrorLine <' 
                         + CONVERT(NVARCHAR(20), Error_line()) 
                         + '>                   ErrorMessage : <' + Error_message() + '>'; 
END catch
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetCompetitionCheckListData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetCompetitionCheckListData]                    
 @CompetitionStagingID bigint,              
 @LanguageID int=1              
AS                    
BEGIN                                 
  SET NOCOUNT ON;                    
     DECLARE @RejectTempTable TABLE (ID int IDENTITY(1,1),Reason nvarchar(1000),RejectDate datetime,AdminStatus bit,RejectionType int,UserName nvarchar(100));            
            
           
 insert into @RejectTempTable            
      select csr.ReasonForRejection,csr.ApprovedOrRejectionDate,csr.AdminStatus,csr.Type,    
   (select UserName from coc_users(nolock) where userid=csr.CreatedBy) UserName    
   from coc_competition_staging_rejections(nolock) csr where csr.CompetitionStagingID=@CompetitionStagingID and csr.AdminStatus is not null             
            
            
                
   select cs.CompetitionStagingID,isnull(CompetitionId,0) CompetitionID,       
   Convert(varchar(10),CONVERT(date,cs.StartDate,106),103) as StartDate,                
   Convert(varchar(10),CONVERT(date,cs.EndDate,106),103) as EndDate,       
   (Case  When cs.isSaved is null or cs.isSaved=0 then 'Draft'          
   When isnull(cs.IsActive,0)=1 then 'Active'              
  When isnull(cs.IsOnHold,0)=1 then 'On Hold' 
  When cs.SentRequestForActivation = 1 then 'Pending Request for Activation'  
   When isnull(cs.IsChamberApproved,0) =1 then 'Chamber Approval Document Approved'                    
     When isnull(cs.IsChamberRejected,0) = 1 then 'Chamber Approval Document Rejection'                
  When isnull(cs.IsAdminApproved,0) = 1 then 'eCopon Approved' 
   
  When exists(select * from coc_competition_staging_rejections(nolock) where CompetitionStagingID=cs.CompetitionStagingID and ApprovedOrRejectionDate is null) then 'Resubmitted for approval'            
  When isnull(cs.IsAdminRejected,0) = 1 then 'eCopon Rejected'            
 when  cs.SentForAdminApproval = 1 AND (cs.IsAdminApproved = 0 or cs.IsAdminApproved is null ) AND (cs.IsAdminRejected = 0 or cs.IsAdminRejected is null )  then 'eCopon Approval Pending'               
 When (cs.SentForAdminApproval = 0 or cs.SentForAdminApproval is null)  then 'Pending Request for Approval'                              
              
   end ) as [Status],             
   (select isnull(CorporateName,'') from coc_corporates(nolock) where corporateid=cs.corporateid) as CorporateName,              
   (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=@CompetitionStagingID and ResourceKey='ContestName' and languageid=@LanguageID) as ContestName,              
   isnull(SentForAdminApproval,0) as SentForAdminApproval,              
   isnull(IsAdminApproved,0) as IsAdminApproved,              
    Convert(varchar(10),CONVERT(date,isnull(AdminApprovedOn,getdate()),106),103) as AdminApprovedOn,              
              
(case when exists(select top 1 * from coc_competition_staging_rejections(nolock) cs where cs.CompetitionStagingID=@CompetitionStagingID and type=1 and cs.ApprovedOrRejectionDate is not null and AdminStatus=0 order by 1 desc) then 1              
 else isnull(IsAdminRejected,0) end)as IsAdminRejected,              
              
 (case when exists(select top 1  * from coc_competition_staging_rejections(nolock) cs where cs.CompetitionStagingID=@CompetitionStagingID and type=1 and cs.ApprovedOrRejectionDate is not null and AdminStatus=0 order by 1 desc) then               
   (select top 1 Convert(varchar(10),CONVERT(date,isnull(ApprovedOrRejectionDate,getdate()),106),103)  from coc_competition_staging_rejections(nolock) cs where cs.CompetitionStagingID=@CompetitionStagingID and type=1 and cs.ApprovedOrRejectionDate is not null and AdminStatus=0 order by 1 desc)              
 else Convert(varchar(10),CONVERT(date,isnull(AdminRejectedOn,getdate()),106),103) end)as AdminRejectedOn ,              
              
   (case when exists(select top 1 * from coc_competition_staging_rejections(nolock) cs where cs.CompetitionStagingID=@CompetitionStagingID and type=1 and cs.ApprovedOrRejectionDate is not null and AdminStatus=0 order by 1 desc) then               
   (select top 1 Convert(varchar(10),CONVERT(date,isnull(EntryDate,getdate()),106),103)  from coc_competition_staging_rejections(nolock) cs where cs.CompetitionStagingID=@CompetitionStagingID and type=1 and cs.ApprovedOrRejectionDate is not null and AdminStatus=0 order by 1 desc)              
 else Convert(varchar(10),CONVERT(date,isnull(AdminEntryDate,getdate()),106),103) end)as AdminEntryDate ,              
              
 (case when exists(select top 1 * from coc_competition_staging_rejections(nolock)cs where cs.CompetitionStagingID=@CompetitionStagingID and type=1 and cs.ApprovedOrRejectionDate is not null and AdminStatus=0 order by 1 desc) then               
   (select  top 1 ReasonForRejection from coc_competition_staging_rejections(nolock) cs where cs.CompetitionStagingID=@CompetitionStagingID and type=1 and cs.ApprovedOrRejectionDate is not null and AdminStatus=0 order by 1 desc)              
 else isnull(AdminRejectionReason,'') end)as AdminRejectionReason ,              
              
 (case when exists(select * from coc_competition_staging_rejections(nolock)cs where cs.CompetitionStagingID=@CompetitionStagingID and type=1) then 1              
 else 0 end)as IsMultipleRejection ,              
              
   Convert(varchar(10),CONVERT(date,isnull(AdminRevokeRejectionOn,getdate()),106),103) as AdminRevokeRejectionOn,              
   AdminRevokeRejectionUserID,              
   (case when ChamberApprovedPDF is null then 0 else 1 end) as SendChamberApproval,              
   IsChamberApproved,              
    Convert(varchar(10),CONVERT(date,isnull(ChamberApprovedOn,getdate()),106),103) as ChamberApprovedOn,              
   IsChamberRejected,              
   ChamberRejectionReason,              
   Convert(varchar(10),CONVERT(date,isnull(ChamberRejectedOn,getdate()),106),103) as ChamberRejectedOn,              
   Convert(varchar(10),CONVERT(date,isnull(ChamberRevokeRejectionOn,getdate()),106),103) as ChamberRevokeRejectionOn,              
   ChamberRevokeRejectionUserID,              
   Convert(varchar(10),CONVERT(date,isnull(ChamberEntryDate,getdate()),106),103) as ChamberEntryDate,              
   Convert(varchar(10),CONVERT(date,isnull(FinalApprovedDate,getdate()),106),103) as FinalApprovedDate,              
   IsActive,              
   IsOnHold,              
   OnHoldReason,              
   Convert(varchar(10),CONVERT(date,isnull(OnHoldDate,getdate()),106),103) as OnHoldDate,              
   Convert(varchar(10),CONVERT(date,isnull(FinalEntryDate,getdate()),106),103) as FinalEntryDate,              
   isnull(IsAdminPartialRejection,0) as IsAdminPartialRejection,
   isnull(SentRequestForActivation,0) as SentRequestForActivation
   from coc_competition_staging(nolock) cs where cs.CompetitionStagingID=@CompetitionStagingID                
                
                   
  select cc.CheckListID,
  (case when @LanguageID=1 then cc.Name else cc.ArabicName end) Name,              
  (case when exists(select ID from coc_competition_staging_checklists(nolock) where CompetitionStagingID =@CompetitionStagingID and CheckListID=cc.CheckListID) then 1 else 0 end) as IsSelected              
  from coc_CompetitionCheckLists(nolock) cc where cc.IsActive=1              
            
  select ID,Reason,Convert(nvarchar(30),RejectDate) RejectDate,AdminStatus,RejectionType,UserName from @RejectTempTable            
                   
                  
  END                                       
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetCompetitionDownloadPDF]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetCompetitionDownloadPDF]  
@CompetitionStagingID BIGINT,
@LanguageID INT=NULL
As
Begin
if(@LanguageID is NULL)
begin
set @LanguageID=1;
end
   select 
   cs.CompetitionStagingId,   
   cs.NoOfCoupons,
   cs.CompetitionOrderNumber,
   Convert(varchar(10),CONVERT(date,cs.StartDate,106),103)as StartDate,
   CONVERT(NVARCHAR(11),cs.StartDate,131) as StartDateAR,
   Convert(varchar(10),CONVERT(date,cs.EndDate,106),103)as EndDate,
    CONVERT(NVARCHAR(11),cs.EndDate,131) as EndDateAR,
   cs.NoOfPrizes,
   cs.NoOfprizeTypes,
   cs.NoOfBranches,
   --cs.DrawDays,
  (SELECT DATEDIFF(DAY, CONVERT(date,cs.StartDate,106), CONVERT(date,cs.EndDate,106))+1) as DrawDays,
  (select count(Distinct DrawDate) from coc_competition_staging_draws where CompetitionStagingID=@CompetitionStagingID)  as TotalDrawDays,
  c.CorporateName as CorporateNameEN,
  -- c.CorporateNameAR as CorporateName,
   (CASE 
      WHEN c.CorporateNameAR IS NULL OR c.CorporateNameAR ='' 
	  THEN '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' ELSE  c.CorporateNameAR
	  END
	) AS CorporateName,
   c.CRNumber,
   c.JCCICode,
   (select Name  from coc_ChamberLanguages (NOLOCK) where ChamberID=(select ChamberID from coc_competition_staging  (NOLOCK)  WHERE  CompetitionStagingId=@CompetitionStagingID) and LanguageID=2)as ChamberOfCommerce,
   (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=@CompetitionStagingID and ResourceKey='ContestName' and languageid=1) as ContestNameEnglish,  
   (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=@CompetitionStagingID and ResourceKey='ContestName' and languageid=2) as ContestNameArabic,
   (select count(*) from coc_competition_staging_draws (NOLOCK) where CompetitionStagingId=@CompetitionStagingID) as TotalDraws
   from coc_competition_staging(nolock) cs
   join coc_Corporates(nolock)  c on c.CorporateID=cs.CorporateID
   WHERE  CompetitionStagingId=@CompetitionStagingID

   --Static Terms
   
    select [TermAndConditionID]
	 ,[TermAndConditionTypeID]
	 ,[TermAndConditionTypeName]
	 , ConfigTemsEng
	 ,case when @LanguageID= 2 then '<div dir= ''rtl'' >'+ ConfigTemsArabic + '</div>' else ConfigTemsArabic end as ConfigTemsArabic
	 , ShortConfigTemsEng
	 ,case when @LanguageID= 2 then '<div dir= ''rtl'' >'+ ShortConfigTemsArabic + '</div>' else ShortConfigTemsArabic end  as ShortConfigTemsArabic
	 from core_coc_Terms (NOLOCK) where TermAndConditionTypeID=1 --1 is for Competition
   --Draw List
   select  dl.DrawID,csrdl.Name as DrawName ,Convert(varchar(10),CONVERT(date,csd.DrawDate,106),103) as DrawDate, 
   csd.WinnersCount as NoOfPrizes,csd.BranchesCount,csd.TypeOfPrizesCount from coc_competition_staging_draws(nolock) csd
        join coc_competition_staging_draws_languages(nolock)  csrdl on csrdl.CompetitionStagingDrawID=csd.CompetitionStagingDrawID and LanguageID=1
		join coc_DrawNameLanguages(nolock) dl on dl.Name=csrdl.Name and dl.LanguageID=1 
     where csd.CompetitionStagingId=@CompetitionStagingID order by csd.DrawDate
	
	--Method types 
	select CompetitionMethodID,Name as CompetitionMethodName 
	from coc_CompetitionMethodLanguages (NOLOCK)
	where LanguageID=2 and CompetitionMethodID in 
	(select CompetitionMethodID from 
	coc_competition_staging_CompetitionMethods(nolock) 
	where CompetitionStagingID=@CompetitionStagingID)

	----Types start 

		select CompetitionMethodID
		,Name as CompetitionMethodName from coc_CompetitionMethodLanguages(nolock) where CompetitionMethodId
		in(select CompetitionMethodId
		 from coc_competition_staging_CompetitionMethods (NOLOCK)
		 where CompetitionStagingID=@CompetitionStagingID) and LanguageID=2


		 select CompetitionTypeID
		,Name as CompetitionTypeName from coc_CompetitionTypeLanguages(nolock) where CompetitionTypeID
		in(select CompetitionTypeId
		 from coc_competition_staging_CompetitionTypes (NOLOCK)
		 where CompetitionStagingID=@CompetitionStagingID) and LanguageID=2


		 select CompetitionParticipationTypeID
		,Name as CompetitionParticipationTypeName  from coc_CompetitionParticipationTypeLanguages(nolock) where CompetitionParticipationTypeID
		in(select CompetitionParticipationTypeID from coc_competition_staging_ParticipationTypes(nolock)
		 where CompetitionStagingID=@CompetitionStagingID) and LanguageID=2


      select CompetitionServiceID
      ,Name as CompetitionServiceName from coc_CompetitionServiceLanguages(nolock) where CompetitionServiceID
      in(select CompetitionServiceId from coc_competition_staging_Services(nolock)
       where CompetitionStagingID=@CompetitionStagingID) and LanguageID=2

	--Types end

End
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetCompetitionDrawListByID]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetCompetitionDrawListByID] 
@CompetitionStagingID BIGINT,
@LanguageID int =null
As
Begin
if(@LanguageID is null)
begin
set @LanguageID=1
end
select		dl.DrawID,
			csrdl.Name as DrawName ,
		    (select NoOfPrizes from coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID) as  NoOfPrizes,
			Convert(varchar(10),CONVERT(date,csd.DrawDate,106),103) as DrawDate, 
			csd.WinnersCount,
			csd.BranchesCount,
			csd.TypeOfPrizesCount
   from coc_competition_staging_draws(nolock) csd
        join coc_competition_staging_draws_languages(nolock)  csrdl on csrdl.CompetitionStagingDrawID=csd.CompetitionStagingDrawID and LanguageID=@LanguageID
		join coc_DrawNameLanguages(nolock) dl on dl.Name=csrdl.Name and dl.LanguageID=@LanguageID 
     where csd.CompetitionStagingId=@CompetitionStagingID
End
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetCompetitionInvoiceData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetCompetitionInvoiceData]      
@CompetitionStagingID bigint,    
@LanguageID INTEGER=1,                    
@UserID bigint=NULL,                  
@RoleID bigint=NULL,                  
@ImpersonationUserID bigint,                  
@SpResponseStatus int OUTPUT,                  
@SpResponseMessage nvarchar(max) OUTPUT,                  
@SpErrorDetails nvarchar(max) OUTPUT     
AS        
      
BEGIN TRY                    


  select cs.CompetitionStagingID, 
   Convert(varchar(10),CONVERT(date,cs.StartDate,106),103) as StartDate,  
   Convert(varchar(10),CONVERT(date,cs.EndDate,106),103) as EndDate, 
    Convert(varchar(10),CONVERT(date,getdate(),106),103) as InvoiceDate,
   cs.NoOfCoupons,  
   cs.ChamberQRCode,
   cs.CompetitionOrderNumber,
   (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=cs.CompetitionStagingID and ResourceKey='ContestName' and languageid=2) as ContestName,  
   (select CorporateName from coc_Corporates(nolock) where corporateID=cs.CorporateID) as CorporateName,
   (select MobileNumber from coc_Corporates(nolock) where corporateID=cs.CorporateID) as MobileNumber,
   (select EmailID from coc_Corporates(nolock) where corporateID=cs.CorporateID) as CorporateEmailID,
   (select Address1 from coc_Corporates(nolock) where corporateID=cs.CorporateID) as CorporateAddress
   from coc_competition_staging(nolock) cs where cs.CompetitionStagingID=@CompetitionStagingID
  
  Set @SpResponseStatus=1;                   
  Set @SpResponseMessage='Success';                  
  Set @SpErrorDetails=NULL;                  
  SET NOCOUNT ON;      
     
  END TRY                              
  BEGIN CATCH                    
  Set @SpResponseStatus=0;                   
  Set @SpResponseMessage='GenericError';                  
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>, 
  ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>, 
  ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , 
  ErrorProcedure : <'+ERROR_PROCEDURE()+'> , 
  ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                      
                          
  END CATCH                              
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetCompetitionList]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[core_usp_GetCompetitionList]
 @LanguageID INTEGER=1                 
AS          
SET NOCOUNT ON          
 BEGIN          
        
  DECLARE @Counter INTEGER          
          
  DECLARE @ArchiveDays INTEGER = 30      
   --Table-> ECoupon          
   SELECT EC.ECouponID,EC.EServiceID,CONVERT(NVARCHAR(12),EC.ResultDate,106) ResultDate,EC.WinnerCount,EC.EntryTypeID,EC.MinInvoiceValue,EC.AdditionalCouponValue,EC.AllowMultipleInvoices,EC.CouponPerInvoice,          
     EC.CouponPerMember,EC.UserAurthorised,EC.QuestionCount,EC.ImageFile,          
     case when EL.LanguageID= 2 then '<div dir= ''rtl'' >'+ EL.UsesTerm +'<br/>'  
  +(select ShortConfigTemsEng+ConfigTemsEng from core_coc_Terms (NOLOCK) where TermAndConditionTypeID=1)    
  + '</div>' else EL.UsesTerm+' <br/> '+(select ShortConfigTemsArabic+ConfigTemsArabic from core_coc_Terms (NOLOCK) where TermAndConditionTypeID=1) end as UsesTerm          
     , ELDes.Value as  ECouponTemplate    
  ,EC.ParticipationByKiosk,SL.EService [ServiceName],          
     (case when es.eserviceid = 280 then '' else CONVERT(NVARCHAR(12),ES.FromDate,106) end )StartDate, CONVERT(NVARCHAR(12),ES.ToDate,106) EndDate,EC.MemberOnly,EC.DisplayImage,            
     case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)) THEN 1 else 0 end as IsActive,          
     ISNULL(AllowMobileParticipation, 1) as AllowMobileParticipation, ISNULL(AllowWebParticipation, 1) as AllowWebParticipation,          
     ISNULL((select sum(ISNULL(ep.PrizeCount,0)) from coc_ECouponPrizes(NOLOCK) EP where EP.ECouponID = EC.ECouponID),0) as PrizeCount,          
     (select count(*) from coc_ECouponDraw(NOLOCK) ED where ED.ECouponID = EC.ECouponID) as DrawsCount,          
     EC.Location, LocationURL,      
  case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE))       
  THEN 1--acitve       
  when (CAST(GETDATE() AS DATE) > CAST(ES.ToDate AS DATE))       
  THEN 2 -- completed      
  ELSE 3 -- comming soon      
  end as [CompetitionStatus]           
    FROM coc_ECoupons(NOLOCK) EC          
     INNER JOIN coc_EServices(NOLOCK) ES ON EC.EServiceID = ES.EServiceID          
     INNER JOIN coc_EServiceLanguages(NOLOCK) SL ON ES.EServiceID=SL.EServiceID AND SL.LanguageID = @LanguageID     
  INNER JOIN coc_ECouponLanguages(NOLOCK) EL ON EL.ECouponID=EC.ECouponID AND EL.LanguageID = @LanguageID     
  INNER JOIN coc_ECouponLanguages(NOLOCK) ELDes ON ELDes.ECouponID=EC.ECouponID AND ELDes.LanguageID = @LanguageID  and   ELDes.ResourceKey='Description'            
  
     --and ((@ArchiveFilter = 1 and convert(date,dateadd(day,@ArchiveDays,ES.ToDate)) <= convert(date,getdate())) or           
     --  ((@ArchiveFilter = 0 and convert(date,dateadd(day,@ArchiveDays,ES.ToDate)) >= convert(date,getdate()))))          
     --and isnull(EC.AllowMobileParticipation,0) = 1          
      and EC.EServiceID <> 183 -- added by shamim to hide SME Funnel      
   and ec.ECouponID not in (10193, 10194, 10195) -- added by shamim to hide 3 lipton competitions as told my othman    
   and ec.ECouponID not in (10206) -- added by shamim to hide lipton gold competition as told my othman    
   and ec.ECouponID not in (10219)    
  and (EC.IsShowMobile is null or EC.IsShowMobile=1)    
   ORDER BY (case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)) THEN 1 else 0 end ) DESC,  
   (case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) < CAST(ES.ToDate AS DATE))   THEN 1 else 0 end ) DESC, 
   ISNULL(EC.Priority,-1) desc, ES.FromDate desc           
   --ORDER BY EC.ECouponID DESC        
           
 END          
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetCompetitionPDF]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_GetCompetitionPDF]      
 @CompetitionStagingID bigint                      
,@UserID INTEGER                 =null            
,@LanguageID int                 =1           
,@RoleID bigint                  =null            
,@ImpersonationUserID bigint     =null            
,@SpResponseStatus int              out           
,@SpResponseMessage nvarchar(max)    out         
,@SpErrorDetails nvarchar(max)      out          
AS            
 SET NOCOUNT ON            
 BEGIN TRY            
 BEGIN  
select 
 cs.StartDate
,cs.EndDate
,cs.NoOfPrizes
,cs.DrawDays
,(select Name from coc_ChamberLanguages (NOLOCK) where  LanguageID=@LanguageID and ChamberID=cs.ChamberID) as ChamberName
,(select CorporateName from coc_Corporates (NOLOCK) where CorporateID=cs.CorporateID) as CorporateName
from coc_competition_staging cs (NOLOCK)
where cs.CompetitionStagingID=@CompetitionStagingID     

 Set @SpResponseStatus=1;            
 Set @SpResponseMessage='Success';            
 Set @SpErrorDetails='Success';    
      
 END             
 END TRY            
 BEGIN CATCH     
 Set @SpResponseStatus=0;            
 Set @SpResponseMessage='GenericError';            
 Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';       

      
 END CATCH            
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetCompetitionPriceDetailsByGuid]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_GetCompetitionPriceDetailsByGuid] 
  @CurrentRequestGUID nvarchar(max),
  @Vat int,
  @CorporateID int =null,
  @IsStepTwo bit =null,
  @IsForInvoiceData bit =null,
  @NoOfBranchesSelected int =null,
  @LanguageID INTEGER=1,        
  @UserID bigint=NULL,      
  @RoleID bigint=NULL,      
  @ImpersonationUserID bigint,      
  @SpResponseStatus int out,      
  @SpResponseMessage nvarchar(max) out ,      
  @SpErrorDetails nvarchar(max) out                       
AS        
BEGIN TRY
if(@IsForInvoiceData =1) 
begin
set @LanguageID=2
end
 
if(@IsStepTwo is null) 
begin
set @IsStepTwo=0
end
if(@NoOfBranchesSelected is null) 
begin
set @NoOfBranchesSelected=0
end
	declare @CurrentGUID nvarchar(max);
	declare @CurrencySymbol nvarchar(10); 
    set @CurrentGUID=@CurrentRequestGUID;
    --Check if any branch changes insert price in log table start
	if(@IsStepTwo=1 AND @NoOfBranchesSelected >=1)
	begin
	  print('if(@IsStepTwo=1 AND @NoOfBranchesSelected >=1) Started')
	    declare @BranchServicePrice decimal(18,2); 
		declare @BranchPricingSourceId int; 
		declare @FirstPricingSourceId int;
		set @BranchPricingSourceId=(select CompetitionServiceID from coc_CompetitionServiceLanguages (NOLOCK) where LanguageID=1 and Name='Mutiple Branches Facility') 
	    Delete from Coc_Pricing_log where [guid]=@CurrentRequestGUID and PricingSourceTypeId=4 and PricingSourceId=@BranchPricingSourceId
		set @BranchServicePrice=(SELECT dbo.GetCompetionPriceById(4,@BranchPricingSourceId,@NoOfBranchesSelected)); 
		if(@NoOfBranchesSelected>1)
		begin
		 print('if(@NoOfBranchesSelected>1)')
		   insert into Coc_Pricing_log([guid],[PricingSourceTypeId],[PricingSourceId],[Amount])
		   SELECT @CurrentRequestGUID,4,@BranchPricingSourceId,	@BranchServicePrice
		 end
		else if(@NoOfBranchesSelected=1)
		 begin
		  print('if(@NoOfBranchesSelected=1)')
		  insert into Coc_Pricing_log([guid],[PricingSourceTypeId],[PricingSourceId],[Amount])
		   SELECT @CurrentRequestGUID,4,@BranchPricingSourceId,	00.00
		 end  
	  end
	
	--calculation part
    print('calculation part');
		
	declare @TotalWithoutTax decimal(18,2); 
	declare @VatAmount decimal(18,2); 
	set @TotalWithoutTax=(Select Sum(Amount) from Coc_Pricing_log (NOLOCK) Where  [guid]=@CurrentGUID); 
	Set @VatAmount=Convert(decimal(18,2),(@TotalWithoutTax/100)*@Vat); 

	--Check if any branch changes insert price in log table end
	--Currency Symbol

  
	if(@LanguageID=1)
	begin
	select @CurrencySymbol=CurrencySymbol_EN from Coc_Currency (NOLOCK) where CurrencyId=(select BaseCurrencyId from coc_Settings (NOLOCK)) 
	end
	else
	begin 
	select @CurrencySymbol=CurrencySymbol_AR from Coc_Currency (NOLOCK) where CurrencyId=(select BaseCurrencyId from coc_Settings (NOLOCK)) 
	end




 select temp.guid,
 @CurrencySymbol as CurrencySymbol ,
 temp.PricingSourceTypeId,
 temp.PricingSourceId,
 temp.Amount as Amount,
 @Vat as VatPercentage,
 @TotalWithoutTax as TotalWithoutTax ,
 (@TotalWithoutTax+@VatAmount) as TotalWithTax ,
 @VatAmount as Vat,
 (case 
  when temp.PricingSourceTypeId=1 then 
  (select Name from coc_CompetitionMethodLanguages(NOLOCK) 
  where CompetitionMethodID=temp.PricingSourceId  and LanguageID=@LanguageID)
  when temp.PricingSourceTypeId=2 then
  (select Name from coc_CompetitionTypeLanguages (NOLOCK)  
  where CompetitionTypeID=temp.PricingSourceId and LanguageID=@LanguageID)
  when temp.PricingSourceTypeId=3 then
  (select Name from coc_CompetitionParticipationTypeLanguages (NOLOCK)  
  where CompetitionParticipationTypeID=temp.PricingSourceId and LanguageID=@LanguageID)
  when temp.PricingSourceTypeId=4 then
  (select Name from coc_CompetitionServiceLanguages  (NOLOCK)
  where CompetitionServiceID=temp.PricingSourceId and LanguageID=@LanguageID)
  end
  ) Name
 from Coc_Pricing_log  temp (NOLOCK)
 where temp.guid=@CurrentGUID
  Set @SpResponseStatus=1;       
  Set @SpResponseMessage='Success';      
  Set @SpErrorDetails='Success';
         
  END TRY                  
  BEGIN CATCH        
  Set @SpResponseStatus=0;       
  Set @SpResponseMessage='GenericError';      
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>,
   ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>, 
   ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , 
   ErrorProcedure : <'+ERROR_PROCEDURE()+'> , 
   ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> 
   ErrorMessage : <'+ERROR_MESSAGE()+'>';          
              
  END CATCH                  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetCompetitionPrizes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetCompetitionPrizes]            
@EserviceID INTEGER,            
@LanguageID INTEGER =1           
AS            
BEGIN            
  SELECT edp.ECouponDrawID,edp.ECouponPrizeID,edp.ECouponDrawPrizeID, epl.Value [PrizeResourceValue],edp.Frequency as PrizeCount ,edl.Value as DrawName           
  FROM coc_ECouponDrawPrizes edp(NOLOCK)               
   INNER JOIN coc_ECouponPrizes(NOLOCK) ep ON ep.ECouponPrizeID = edp.ECouponPrizeID            
   inner join coc_ECouponDraw(NOLOCK) ED on ED.ECouponDrawID = edp.ECouponDrawID      
   inner join coc_ECouponDrawLanguages(NOLOCK) edl on edl.ECouponDrawID=ed.ECouponDrawID and edl.LanguageID=@LanguageID and edl.ResourceKey='Name'      
   INNER JOIN coc_ECouponPrizesLanguages(NOLOCK) epl ON ep.ECouponPrizeID = epl.ECouponPrizeID  AND epl.LanguageID=@LanguageID AND epl.ResourceKey='Name'            
   WHERE ep.ECouponID = (select top 1 ECouponID from coc_ECoupons (NOLOCK)  where EServiceID=@EserviceID)--edp.ECouponDrawID = @DrawID            
   AND Frequency> (SELECT Count(*) FROM coc_ECouponWinners ew (NOLOCK) WHERE ew.ECouponDrawPrizeID = edp.ECouponDrawPrizeID)              
END 
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetCompetitionResults]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[core_usp_GetCompetitionResults]              
 @EServiceID INTEGER,                 
 @LanguageID INTEGER,                
 @DrawID INTEGER=0,                
 @DrawPrizeID INTEGER=0,                
 @UserId INTEGER,                
 @ReturnValue [Remark] OUTPUT,              
 @NumberOfWinners int = 1 ,          
 @RoleID bigint=null,                        
 @ImpersonationUserID bigint=null,                        
 @SpResponseStatus int = null out,                        
 @SpResponseMessage nvarchar(max) = null out,                        
 @SpErrorDetails nvarchar(max) = null   out               
AS              
begin              
              
SET NOCOUNT ON              
 BEGIN TRY              
              
 --DECLARE @EServiceID INTEGER               
 --DECLARE @LanguageID INTEGER              
 --DECLARE @DrawID INTEGER=0              
 --DECLARE @DrawPrizeID INTEGER=0              
 --DECLARE @UserId INTEGER              
 --DECLARE @ReturnValue [Remark]              
              
 --SET @EServiceID = 16670              
 --SET @LanaugageID = 1              
 --SET @DrawID = 1              
 --SET @DrawPrizeID = 1              
 --SET @UserID = 1              
 --SET @ReturnValue =''              
              
               
              
  DECLARE @EmailSubject [Remark]              
  DECLARE @EmailBody [Remark]              
  DECLARE @SMS [Remark]              
  DECLARE @Counter INTEGER              
  DECLARE @ECouponID INTEGER            
            
                
  DECLARE @CorporateID INTEGER              
              
  SELECT @CorporateID= CorporateID from coc_EServices(NOLOCK) where EServiceID=@EServiceID              
  SElECT @ECouponID = ECouponID FROM coc_ECoupons(NOLOCK) where EServiceID = @EServiceID            
  drop table if exists #ResultTable             
  IF OBJECT_ID('tempdb..#ResultTable') IS NULL            
 create table  #ResultTable             
 (            
  UniqueID INTEGER IDENTITY(1,1),              
  ECouponParticipationID bigint,              
  Barcode nvarchar(100),               
  ECouponID INTEGER,              
  EServiceID INTEGER,              
  ConsumerID INTEGER,              
  GuestID INTEGER,              
  ParticipationMobile varchar(15) ,              
  ParticipationEmailID varchar(100),              
  ConsumerName nvarchar(100),              
  CorporateID INTEGER,              
  MembershipNumber varchar(30),              
  EmailSubject NVARCHAR(1000),              
  EmailBody NVARCHAR(1000),              
  SMS NVARCHAR(1000),              
  TypeID TINYINT            
 )            
              
  --DECLARE @ResultTable AS TABLE              
  --(              
  -- UniqueID INTEGER IDENTITY(1,1),              
  -- ECouponParticipationID bigint,              
  -- Barcode nvarchar(100),               
  -- ECouponID INTEGER,              
  -- EServiceID INTEGER,              
  -- ConsumerID INTEGER,              
  -- GuestID INTEGER,              
  -- ParticipationMobile [Mobile],              
  -- ParticipationEmailID [Email],              
  -- ConsumerName [NullName],              
  -- CorporateID INTEGER,              
  -- MembershipNumber [NullCode],              
  -- EmailSubject NVARCHAR(1000),              
  -- EmailBody NVARCHAR(1000),              
  -- SMS NVARCHAR(1000),              
  -- TypeID TINYINT              
  --)              
  DECLARE @SelectedWinnerData AS TABLE              
  (              
   UniqueID INTEGER ,              
   ECouponParticipationID bigint,              
   Barcode nvarchar(100),               
   ECouponID INTEGER,              
   EServiceID INTEGER,              
   ConsumerID INTEGER,              
   GuestID INTEGER,              
   ParticipationMobile [Mobile],              
   ParticipationEmailID [Email],              
   ConsumerName [NullName],              
   CorporateID INTEGER,              
   MembershipNumber [NullCode],              
   EmailSubject NVARCHAR(1000),              
   EmailBody NVARCHAR(1000),              
   SMS NVARCHAR(1000),              
   TypeID TINYINT              
  )              
  DECLARE @AllWinners AS TABLE              
  (              
   UniqueID INTEGER IDENTITY(1,1),              
   EcouponID INTEGER,              
 EServiceID INTEGER,              
   DeclaredDate DATETIME,              
   ECouponWinnerID INTEGER              
  )              
                
  DECLARE @WinnerList AS TABLE              
  (              
   ECouponID INTEGER,              
   WinnerName NullName,              
  PrizeType NullDescription,              
   PrizeHeader NullDescription,              
   PrizeDetail Remark,              
   ImageFile NullDescription,              
   EService Remark              
  )              
              
  --Check winners count for the draw is already done              
  DECLARE @winnersCount INTEGER              
              
  SELECT  @winnersCount = Count(*) FROM coc_ECouponWinners(nolock) ew              
  INNER JOIN coc_ECouponDrawPrizes edp(NOLOCK) ON edp.ECouponDrawPrizeID= ew.ECouponDrawPrizeID              
  WHERE edp.ECouponDrawPrizeID = @DrawPrizeID               
              
  DECLARE @frequency INTEGER              
                
  SELECT @frequency= Frequency FROM coc_ECouponDrawPrizes(nolock) WHERE ECouponDrawPrizeID = @DrawPrizeID              
               
  PRINT @winnersCount              
  PRINT @frequency              
               
  IF(@winnersCount + @NumberOfWinners > @frequency)             
  BEGIN              
   SET @ReturnValue = '101'              
   SELECT UniqueID ,              
   ECouponID ,              
   EServiceID ,              
   ConsumerID ,              
   substring(ParticipationMobile,1,5)+ '*****'+ substring(ParticipationMobile,11,len(ParticipationMobile)) as ParticipationMobile ,              
   ParticipationEmailID ,              
   ConsumerName ,              
   CorporateID ,              
   MembershipNumber ,              
   EmailSubject ,              
   EmailBody ,              
   SMS ,              
   TypeID  FROM @SelectedWinnerData              
   return              
  END              
  IF(@NumberOfWinners > @frequency)              
  BEGIN              
   SET @ReturnValue = '102'              
   SELECT UniqueID ,              
   ECouponID ,              
   EServiceID ,              
   ConsumerID ,              
   substring(ParticipationMobile,1,5)+ '*****'+ substring(ParticipationMobile,11,len(ParticipationMobile)) as ParticipationMobile ,              
   ParticipationEmailID ,              
   ConsumerName ,              
   CorporateID ,              
   MembershipNumber ,              
   EmailSubject ,              
   EmailBody ,              
   SMS ,              
   TypeID  FROM @SelectedWinnerData              
   return              
  END              
                
              
 BEGIN TRANSACTION TRN_GetCompetitionResults              
                
  --Get RetailOutlets for the draw.              
  --Case 1              
  --When there is no retail outlet exits or the draw does nt mean for retailoutets (Eg:Questionaire)               
  --Check EServiceID              
  --Case 2              
  --When some or all retail outets are configured for the draw               
  --Check the list of retail outlets              
                
  --Check for case 1              
  --SELECT COUNT(*) from coc_eservices               
  DECLARE @retailOutletsCount INT              
  SELECT @retailOutletsCount = Count(*) FROM coc_ECouponDrawPrizes(nolock) edr WHERE edr.ECouponDrawID = @DrawID              
                
  --- Get Participants and save to @ResultTable              
              
  SELECT TOP 1 @EmailSubject=GT.TemplateTitle,@EmailBody=GT.Template               
   FROM coc_GeneralNotificationTemplates GN(NOLOCK)              
    INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID              
  WHERE TemplateTypeID=141 AND EmailUsage=1 AND LanguageID=@LanguageID    
                
                
  SELECT TOP 1 @SMS=GT.Template              
   FROM coc_GeneralNotificationTemplates GN(NOLOCK)              
    INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID              
  WHERE TemplateTypeID=141 AND SMSUsage=1 AND LanguageID=@LanguageID              
                
    drop table if exists #TempExclusionMobiles             
 IF OBJECT_ID('tempdb..#TempExclusionMobiles') IS NULL            
 create table  #TempExclusionMobiles             
 (            
  Mobile varchar(15)  not null,            
  ECouponID INTEGER            
 )            
            
    drop table if exists #TempExclusionEmails            
 IF OBJECT_ID('tempdb..#TempExclusionEmails') IS NULL             
 create table #TempExclusionEmails             
 (            
  EmailID varchar(100)  not null,            
  ECouponID INTEGER            
 )            
              
 delete from #TempExclusionMobiles where ECouponID= @ECouponID            
 delete from #TempExclusionEmails where ECouponID= @ECouponID            
            
 insert into #TempExclusionMobiles            
  SELECT PrimaryMobile, @ECouponID FROM coc_ConsumerExclusions(NOLOCK) CEx             
        WHERE ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL)             
         OR (CEx.ECouponID = @ECouponID OR CEx.CorporateID = @CorporateID))         
         and ISNULL(PrimaryMobile,'') <> ''            
            
 insert into #TempExclusionMobiles            
  select P_EW.MobileNumber, @ECouponID from coc_ECouponWinners(NOLOCK) P_EW             
         INNER JOIN coc_ECouponDrawPrizes(NOLOCK) P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID            
         INNER JOIN coc_ECouponDraw(NOLOCK) P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID            
        where (P_ED.ECouponID = @ECouponID )            
         and ISNULL(P_EW.MobileNumber,'') <> ''            
              
 insert into #TempExclusionEmails            
  SELECT EmailID, @ECouponID FROM coc_ConsumerExclusions(NOLOCK) CEx             
        WHERE ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL)             
         OR (CEx.ECouponID = @ECouponID OR CEx.CorporateID = @CorporateID))            
         and ISNULL(EmailID,'') <> ''            
            
 insert into #TempExclusionEmails            
  select P_EW.Email, @ECouponID from coc_ECouponWinners(NOLOCK) P_EW             
         INNER JOIN coc_ECouponDrawPrizes(NOLOCK) P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID            
         INNER JOIN coc_ECouponDraw(NOLOCK) P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID            
        where (P_ED.ECouponID = @ECouponID )            
         and ISNULL(P_EW.Email,'') <> ''            
            
-- from consumer table                
  INSERT INTO #ResultTable              
  SELECT DISTINCT EP.ECouponParticipationID, EP.Barcode, EC.ECouponID,EC.EServiceID,EP.ConsumerID, NULL as GuestID, ISNULL(EP.ParticipationMobile,CS.PrimaryMobile),              
    ISNULL(EP.ParticipationEmailID, CS.EmailID),ISNULL(EP.ConsumerName, ISNULL(CS.FirstName,'')+' '+ISNULL(CS.SecondName,'')+' '+ISNULL(CS.FamilyName,'')) ,ES.CorporateID,CS.MembershipNumber,              
   @EmailSubject,@EmailBody,@SMS,2              
   FROM coc_ECoupons EC(NOLOCK)              
    INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID              
    INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID              
    INNER JOIN coc_Consumers CS(NOLOCK) ON EP.ConsumerID=CS.ConsumerID              
  --WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0              
  WHERE ES.EServiceID = @EServiceID              
  --AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx WHERE CEx.PrimaryMobile =  ISNULL(EP.ParticipationMobile,CS.PrimaryMobile) OR              
  --                 CEx.PrimaryMobile =  CS.SecondaryMobile OR              
  --                 CEx.EmailID=ISNULL(EP.ParticipationEmailID, CS.EmailID) OR              
  --                 CEx.FacebookID= CS.FacebookID OR              
  --                 CEx.TwitterID = CS.TwitterID OR              
  --                 CEx.OutlookID = CS.OutlookID OR              
  --                 CEx.YahooID = CS.YahooID OR              
  --                 CEx.MembershipNumber = CS.MembershipNumber OR              
  --                 CEx.GmailID = CS.GmailID OR              
  --                 CEx.IqamaNumber = CS.IqamaNumber OR              
  --                 CEx.PrimaryMobile = ISNULL(EP.ParticipationMobile,CS.PrimaryMobile) OR               
  --                 CEx.EmailID = ISNULL(EP.ParticipationEmailID, CS.EmailID)              
  --                  AND              
  --                 ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR               
  --                     (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))              
  --AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = ISNULL(EP.ParticipationMobile,CS.PrimaryMobile)               
  --    OR  (ISNULL(EW.Email,'') <> '' and EW.Email = ISNULL(EP.ParticipationEmailID, CS.EmailID)) )              
  --AND Not Exists(select 1 from coc_ECouponWinners P_EW               
  --  INNER JOIN coc_ECouponDrawPrizes P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID              
  --  INNER JOIN coc_ECouponDraw P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID              
  --  where (P_EW.MobileNumber = ISNULL(EP.ParticipationMobile,CS.PrimaryMobile)               
  --    OR  (ISNULL(P_EW.Email,'') <> '' and P_EW.Email = ISNULL(EP.ParticipationEmailID, CS.EmailID))) and               
  --    P_ED.ECouponID = EP.ECouponID )              
  AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes(nolock) edr WHERE  edr.ECouponDrawID = @DrawID))              
  AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes(nolock) edr WHERE  edr.ECouponDrawID = @DrawID))              
                 
-- From Guest  Table (new)              
   INSERT INTO #ResultTable              
   SELECT DISTINCT EP.ECouponParticipationID, EP.Barcode, EC.ECouponID,EC.EServiceID, Null as ConsumerID, EP.GuestID,ISNULL(EP.ParticipationMobile,GS.PrimaryMobile),              
    ISNULL(EP.ParticipationEmailID, GS.EmailID),ISNULL(EP.ConsumerName, GS.FullName) ,ES.CorporateID,NULL,              
   @EmailSubject,@EmailBody,@SMS,1              
   FROM coc_ECoupons EC(NOLOCK)              
    INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID              
    INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID              
    INNER JOIN coc_Guests GS(NOLOCK) ON EP.GuestID=GS.GuestID              
  --WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0              
  WHERE ES.EServiceID = @EServiceID              
--  AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = ISNULL(EP.ParticipationMobile,GS.PrimaryMobile)               
--      OR  (ISNULL(EW.Email,'') <> '' and EW.Email = ISNULL(EP.ParticipationEmailID, GS.EmailID)) )              
   -- AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx WHERE CEx.PrimaryMobile =  EP.ParticipationMobile AND                 
   --                ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR               
   --                    (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))              
   --AND Not Exists(select 1 from coc_ECouponWinners P_EW               
   -- INNER JOIN coc_ECouponDrawPrizes P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID              
   -- INNER JOIN coc_ECouponDraw P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID              
   -- where (P_EW.MobileNumber = ISNULL(EP.ParticipationMobile,GS.PrimaryMobile)               
   --   OR  (ISNULL(P_EW.Email,'') <> '' and P_EW.Email = ISNULL(EP.ParticipationEmailID, GS.EmailID))) and               
   --   P_ED.ECouponID = EP.ECouponID )              
   AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes edr(NOLOCK) WHERE  edr.ECouponDrawID = @DrawID))              
              
---- From Guest Table (old)              
--  INSERT INTO @ResultTable              
--  SELECT DISTINCT null, null, EC.ECouponID,EC.EServiceID,EP.GuestParticipationID,EP.Mobile,NULL,EP.GuestName ,ES.CorporateID,NULL,              
--   @EmailSubject,@EmailBody,@SMS,1              
--   FROM coc_ECoupons EC(NOLOCK)              
--    INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID              
--    INNER JOIN coc_Notifications NF(NOLOCK) ON ES.EServiceID=NF.EServiceID              
--    INNER JOIN coc_EServiceBarcodes EB(NOLOCK) ON EB.NotificationID=NF.NotificationID              
--                AND EB.CorporateID=@CorporateID AND EB.ConsumerID IS NULL              
--    INNER JOIN coc_GuestParticipations EP(NOLOCK) ON EB.AsignedMoile=EP.Mobile              
--  --WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0              
--  WHERE ES.EServiceID = @EServiceID              
--   AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx WHERE CEx.PrimaryMobile =  EP.Mobile AND                 
--                   ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR               
--                       (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))              
--  AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = EP.Mobile)              
  --AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select RetailOutletID FROM coc_ECouponDrawRetailOutlets edr WHERE  edr.ECoponDrawID = @DrawID))              
                 
              
-- Related to invoices              
              
   --INSERT INTO @ResultTable              
   --SELECT DISTINCT EP.ECouponParticipationID, EP.Barcode, EC.ECouponID,EC.EServiceID,EI.AddUserID,EI.MobileNumber,EP.ParticipationEmailID,ED.InvoiceNumber,ES.CorporateID,EI.MobileNumber,              
   --@EmailSubject,@EmailBody,@SMS,0              
   --FROM coc_ECoupons EC(NOLOCK)              
   -- INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID              
   -- INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID              
   -- INNER JOIN coc_ECouponInvoices EI(NOLOCK) ON EP.ECouponID=EI.ECouponID AND EI.ConsumerID IS NULL              
   -- Inner JOIN  coc_ECouponInvoiceDetails ED(NOLOCK) ON EI.ECouponInvoiceID=ED.ECouponInvoiceID                 
   -- WHERE ES.EServiceID = @EServiceID              
   -- AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx WHERE CEx.PrimaryMobile =  EP.ParticipationMobile OR               
   --                  CEx.EmailID= EP.ParticipationEmailID AND                 
   --                        ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR               
   --                            (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))              
   -- AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = EP.ParticipationMobile              
   --     OR EW.Email = EP.ParticipationEmailID)              
    
if @EServiceID = 246 --or isnull(@ECouponID,0) = 10184    
 DELETE FROM  #ResultTable where ParticipationMobile is null or  len(ParticipationMobile) < 10    
else    
 DELETE FROM  #ResultTable where ParticipationMobile is null or  len(ParticipationMobile) <> 14    
      
              
  DELETE FROM  #ResultTable where ParticipationMobile is null or  len(ParticipationMobile) <> 14              
  DELETE FROM  #ResultTable where ConsumerName like '%?%' or ParticipationMobile like '%?%'              
  DELETE FROM  #ResultTable where ConsumerName like '%jjjj%'               
  DELETE FROM  #ResultTable where len(ConsumerName) <8              
  DELETE FROM  #ResultTable where ConsumerName like '%0%' or ConsumerName like '%1%' or ConsumerName like '%2%' or ConsumerName like '%3%' or ConsumerName like '%4%' or ConsumerName like '%5%' or ConsumerName like '%6%' or ConsumerName like '%7%' or ConsumerName like '%8%' or ConsumerName like '%9%'              
  DELETE FROM  #ResultTable where ParticipationMobile in (select Mobile from #TempExclusionMobiles)            
  DELETE FROM  #ResultTable where ParticipationEmailID in (select EmailID from #TempExclusionEmails)            
-- Need to remove              
--if @DrawPrizeID = 9              
-- delete from  @ResultTable where ParticipationMobile not in (select mobile from tmp_data)              
              
--select * from @ResultTable              
--Get count for the participants and select a random participant as winner.              
              
  DECLARE @participantsCount INT              
  DECLARE @winnersSelected int = 0              
  while @winnersSelected < @NumberOfWinners              
  begin              
                 
   SELECT @participantsCount = Count(*) FROM #ResultTable              
              
   --Generate random number between 1 and @participantsCount              
              
   DECLARE @Random INT;              
   DECLARE @Upper INT;              
   DECLARE @Lower INT              
              
   ---- This will create a random number between 1 and 999              
   SET @Lower = 1 ---- The lowest random number              
   SET @Upper = @participantsCount ---- The highest random number              
   SELECT @Random = ROUND(((@Upper - @Lower -1) * RAND() + @Lower), 0)              
                
   declare @uniqueID integer              
   select @uniqueID = UniqueID from (              
    Select ROW_NUMBER() OVER (ORDER BY UniqueID asc) as RowNum,*              
    from #ResultTable              
   ) temp where RowNum = @Random              
                
                
              
   --SELECT * INTO #WinnerTable              
   -- FROM @ResultTable where UniqueID= @uniqueID              
                 
   INSERT INTO @SelectedWinnerData               
    select *  FROM #ResultTable where UniqueID= @uniqueID              
                  
              
   --UniqueID, ECouponParticipationID,              
   --Barcode, ECouponID, EServiceID, ConsumerID, GuestID,              
   --ParticipationMobile, ParticipationEmailID, ConsumerName, CorporateID, MembershipNumber,              
   --EmailSubject, EmailBody, SMS, TypeID              
                  
   --DEC@ECouponDrawPrizeID INTEGER,              
   DECLARE @ConsumerID INTEGER = NULL              
   DECLARE @TypeID TINYINT = NULL              
   DECLARE @ConsumerName NVARCHAR(200)= NULL              
   DECLARE @Email NVARCHAR(200)= NULL              
   DECLARE @MembershipID NVARCHAR(20)= NULL              
   DECLARE @ParticipationMobile [Mobile]= NULL              
   DECLARE @GuestID INTEGER= NULL              
   DECLARE @ECouponParticipationID BIGINT= NULL              
                
   SELECT @ConsumerID = ConsumerID, @TypeID=TypeID, @ConsumerName = ConsumerName, @Email= ParticipationEmailID, @MembershipID=MembershipNumber,               
     @ParticipationMobile= ParticipationMobile, @GuestID = GuestID , @ECouponParticipationID = ECouponParticipationID               
    from @SelectedWinnerData              
    where UniqueID= @uniqueID              
              
              
   DECLARE @result [Remark]              
   print @ConsumerID         print @ConsumerName              
                  
   EXEC SaveResultDeclaration_New  @EServiceID, @UserId, @DrawPrizeID, @ConsumerID, @GuestID, @TypeID, @ECouponParticipationID, @ParticipationMobile, @ConsumerName, @Email, @MembershipID, @ReturnValue= @result OUTPUT              
                
 Print cast(@winnersSelected as varchar) + '-> '+ @result              
              
   IF(@result != '')              
   BEGIN              
    SET @ReturnValue = @result              
    print 'error saving'+ @result              
    break              
   END              
                 
   SELECT  @winnersCount = Count(*) FROM coc_ECouponWinners(nolock) ew              
    INNER JOIN coc_ECouponDrawPrizes edp(NOLOCK) ON edp.ECouponDrawPrizeID= ew.ECouponDrawPrizeID              
    WHERE edp.ECouponDrawPrizeID = @DrawPrizeID               
   IF(@winnersCount > @frequency)              
   BEGIN              
    print cast(@winnersCount as varchar)+ '>' + cast(@frequency as varchar)              
    SET @ReturnValue = '101'              
    print 'Exceeded frequency'              
    break              
   END              
   select @winnersSelected =  @winnersSelected + 1              
   DELETE FROM  #ResultTable where ConsumerID = @ConsumerID or GuestID = @GuestID or ParticipationMobile = @ParticipationMobile              
                 
  end              
  --   IF(@retailOutletsCount!=0)              
  --BEGIN              
  -- DECLARE @RetailOutlets AS TABLE              
  --(              
  -- SlNo INTEGER IDENTITY(1,1),              
  -- RetailOutletID INTEGER)              
              
  --INSERT INTO @RetailOutlets SELECT Retailoutletid from coc_ECouponDrawRetailOutlets WHERE ECoponDrawID = @DrawID              
              
  --DECLARE @count INTEGER              
  --SELECT @count = COUNT(SlNo) FROM @RetailOutlets               
  --DECLARE @slNo INTEGER              
  --DECLARE @retailOutletID INTEGER              
  --SET @slNo = 1              
  --DECLARE @retailOutletsString NVARCHAR(300)              
  --WHILE @slNo<=@count              
  --BEGIN              
  -- SELECT @retailOutletID= RetailOutletID FROM @RetailOutlets WHERE SlNo=@slno              
  -- SET @retailOutletsString = @retailOutletsString + @retailOutletID + ','              
  -- SET @slNo = @slNo + 1              
  --END              
              
  --UPDATE coc_ECouponDraw SET RetailOutlets = @retailOutletsString WHERE ECouponDrawID = @DrawID              
              
  --END              
              
   --Return Values          
                  
  --Table[0] Winner               
  SELECT UniqueID ,              
   ECouponID ,              
   EServiceID ,              
   ConsumerID ,              
   substring(ParticipationMobile,1,5)+ '*****'+ substring(ParticipationMobile,11,len(ParticipationMobile)) as ParticipationMobile ,              
   ParticipationEmailID ,              
   ConsumerName ,              
   CorporateID ,              
   MembershipNumber ,              
   EmailSubject ,              
   EmailBody ,              
   SMS ,                 
   TypeID,Barcode  FROM @SelectedWinnerData              
              
  ----Tables[1]  Prize Details              
     SELECT edp.ECouponDrawPrizeID,ep.ECouponPrizeID, edp.Frequency,edp.ECouponDrawID, ep.ImageFile from coc_ECouponDrawPrizes edp(NOLOCK)              
   join coc_ECouponPrizes ep(NOLOCK) on edp.ECouponPrizeID= ep.ECouponPrizeID               
  WHERE edp.ECouponDrawPrizeID = @DrawPrizeID              
              
              
  -- Table[2] All winners for the draw              
  SELECT edp.ECouponDrawPrizeID,edp.ECouponDrawID,edp.ECouponPrizeID,ew.*               
   FROM coc_ECouponWinners(nolock) ew               
    INNER JOIN coc_ECouponDrawPrizes(nolock) edp ON edp.ECouponDrawPrizeID= ew.ECouponDrawPrizeID              
   WHERE edp.ECouponDrawID = @DrawID               
              
  --Table[3] Pending Prizes              
               
  SELECT ECouponDrawPrizeID,  edp.ECouponPrizeID, epl.Value [PrizeResourceValue]              
    FROM coc_ECouponDrawPrizes edp(NOLOCK)                 
     INNER JOIN coc_ECouponPrizes(nolock) ep ON ep.ECouponPrizeID = edp.ECouponPrizeID              
     INNER JOIN coc_ECouponPrizesLanguages(nolock) epl ON ep.ECouponPrizeID = epl.ECouponPrizeID  AND epl.LanguageID=@LanguageID AND epl.ResourceKey='Name'              
    WHERE edp.ECouponDrawID = @DrawID              
     AND Frequency> (SELECT Count(*) FROM coc_ECouponWinners(nolock) ew WHERE ew.ECouponDrawPrizeID = edp.ECouponDrawPrizeID)              
  print @ReturnValue              
  if isnull(@ReturnValue,'') = ''              
  begin              
   print 'Commit'              
   commit TRANSACTION TRN_GetCompetitionResults              
  end              
  else              
  begin              
   print @ReturnValue           
   print ' rollback'              
              
   --SELECT @ReturnValue=ERROR_MESSAGE()              
   ROLLBACK TRANSACTION TRN_GetCompetitionResults              
  END               
  END TRY              
  BEGIN CATCH               
   print 'catch- rollback'              
              
   SELECT @ReturnValue=ERROR_MESSAGE()              
   SELECT @ReturnValue ReturnValue              
   ROLLBACK TRANSACTION TRN_GetCompetitionResults              
  END CATCH              
 SET NOCOUNT OFF              
end 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------



GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetCompetitionSocialMediaNames]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_GetCompetitionSocialMediaNames]
  @CompetitionStagingID bigint,    
  @LanguageID INTEGER=1,                  
  @UserID bigint=NULL,                
  @RoleID bigint=NULL,     
  @ImpersonationUserID bigint,                
  @SpResponseStatus int OUTPUT,                
  @SpResponseMessage nvarchar(max) OUTPUT,                
  @SpErrorDetails nvarchar(max) OUTPUT,
  @IsInsertion bit = 1 
AS                  
BEGIN TRY                  
SET NOCOUNT ON;     
  Set @SpResponseStatus=1;                 
  Set @SpResponseMessage='Success';                
  Set @SpErrorDetails='Success';                
  DECLARE @EcouponID BIGINT;
  IF(@IsInsertion=0)
  BEGIN
      SELECT CSM.SocialMediaID, SM.SocialMediaName, SM.SocialMediaNameAR 
      FROM coc_competition_staging_SocialMedia (NOLOCK) CSM
      INNER JOIN coc_SocialMedia (NOLOCK) SM ON SM.SocialMediaID = CSM.SocialMediaID AND SM.IsActive = 1
      WHERE CSM.CompetitionStagingID = @CompetitionStagingID
  END
  ELSE
  BEGIN
      SELECT @EcouponID = CompetitionId FROM coc_competition_staging WHERE CompetitionStagingID = @CompetitionStagingID

      SELECT CSM.SocialMediaID, SM.SocialMediaName, SM.SocialMediaNameAR 
      FROM coc_competition_staging_SocialMedia (NOLOCK) CSM
      INNER JOIN coc_SocialMedia (NOLOCK) SM ON SM.SocialMediaID = CSM.SocialMediaID AND SM.IsActive = 1
      WHERE CSM.CompetitionStagingID = @CompetitionStagingID AND 
      CSM.SocialMediaID NOT IN (SELECT SocialMediaID FROM Coc_Core_DynamicLinks WHERE EcouponID = @EcouponID)
  END

END TRY                            
BEGIN CATCH                  
  Set @SpResponseStatus=0;                 
  Set @SpResponseMessage='GenericError';                
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>, ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                    
                        
  END CATCH                            
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetCompetitionStageGUID]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[core_usp_GetCompetitionStageGUID]    
@CompetitionStagingID BIGINT,    
@Guid nvarchar(max) OUTPUT              
AS  
Begin
   select @Guid=guid  from coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID
End
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetCompetitionStagingBasicDetails]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetCompetitionStagingBasicDetails]                          
 @CompetitionStagingID bigint                      
AS                          
BEGIN                                       
  SET NOCOUNT ON;                          
   select SG.CompetitionStagingID,SG.Guid,                      
   Convert(varchar(10),CONVERT(date,SG.StartDate,106),103) as StartDate,                      
   Convert(varchar(10),CONVERT(date,SG.EndDate,106),103) as EndDate,                    
   isnull(SG.IsSaved,0) as IsSaved,                    
   isnull(SG.SentForAdminApproval,0) as SentForAdminApproval,                    
   SG.ChamberApprovedPDF,                    
   SG.GeneratedPDFFile,                    
   SG.Invoice,                    
   isnull(SG.IsAdminApproved,0) IsAdminApproved,                
   (case when exists(select top 1 * from coc_competition_staging_rejections(nolock) cs where cs.CompetitionStagingID=@CompetitionStagingID and Type=1 and cs.ApprovedOrRejectionDate is not null and cs.AdminStatus=0 order by 1 desc) then 1              
 else isnull(SG.IsAdminRejected,0) end)as IsAdminRejected ,              
   (case when exists(select top 1 * from coc_competition_staging_rejections(nolock) cs where cs.CompetitionStagingID=@CompetitionStagingID and Type=1 and cs.ApprovedOrRejectionDate is not null and cs.AdminStatus=0 order by 1 desc) then               
   (select  top 1 isnull(IsAdminPartialRejection,0) from coc_competition_staging_rejections(nolock) cs where cs.CompetitionStagingID=@CompetitionStagingID and Type=1 and cs.ApprovedOrRejectionDate is not null and cs.AdminStatus=0 order by 1 desc)         
  
    
     
   else isnull(SG.IsAdminPartialRejection,0) end)as IsAdminPartialRejection ,              
   (case when exists(select top 1 * from coc_competition_staging_rejections(nolock)cs where cs.CompetitionStagingID=@CompetitionStagingID and Type=1 and cs.ApprovedOrRejectionDate is not null and cs.AdminStatus=0 order by 1 desc) then               
   (select  top 1 ReasonForRejection from coc_competition_staging_rejections(nolock) cs where cs.CompetitionStagingID=@CompetitionStagingID and Type=1 and cs.ApprovedOrRejectionDate is not null and cs.AdminStatus=0 order by 1 desc)              
 else isnull(SG.AdminRejectionReason,'') end)as AdminRejectionReason ,              
   isnull(SG.IsChamberApproved,0) IsChamberApproved,                
   isnull(SG.IsChamberRejected,0) IsChamberRejected,        
   (case when not exists(select * from coc_CompetitionPayment(nolock) where CompetitionStagingID=@CompetitionStagingID) then 1 else 0 end)as IsPaymentPending,      
   SG.ChamberRejectionReason,                
   isnull(SG.IsActive,0) IsActive,                
   isnull(SG.IsOnHold,0) IsOnHold,                
   SG.OnHoldReason ,         
   isnull(SG.SentRequestForActivation,0) SentRequestForActivation,        
   (Case When exists(select * from coc_competition_staging_rejections(nolock) where CompetitionStagingID=@CompetitionStagingID and Type=1 and ApprovedOrRejectionDate is null) then 1 else 0 end) IsResubmitForAdminApproval,    
   (SELECT ChamberLogo FROM coc_Chambers WHERE ChamberID = (SG.ChamberId)) AS ChamberLogo  
   from coc_competition_staging SG(nolock) where CompetitionStagingID=@CompetitionStagingID                      
                      
                    
  END                                             
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetCompetitionStagingPage1]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetCompetitionStagingPage1]            
 @CompetitionStagingID bigint,        
 @CorporateID int=null        
AS            
BEGIN                         
  SET NOCOUNT ON;   
   if(@CorporateID=0 or @CorporateID is null)  
    begin  
    select @CorporateID=CorporateID from coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID      
 end  
   declare @CompetitionMethodIdList nvarchar(100)        
   declare @CompetitionTypeIdList nvarchar(100)    
   DECLARE @IsIntegralShopperCorporate BIT    
   declare @RemainingBalance bigint        
    
   select @RemainingBalance=sum(IsNull(NoOfBarcodesApproved,0)) from coc_BarcodesConsumption (NOLOCK) where CorporateID=@CorporateID and  BarcodeExpiryDate > getdate() and CompetitionStagingId is null       
   SELECT @IsIntegralShopperCorporate = IsIntegralShopperCorporate FROM coc_Corporates (NOLOCK) where CorporateID=@CorporateID
   if(@CompetitionStagingID=0)        
   begin        
   select @RemainingBalance as RemainingBalance,        
    (select count(*) from coc_RetailOutlets (NOLOCK) where CorporateID=@CorporateID) as RetailOutlets,
    @IsIntegralShopperCorporate AS IsIntegralShopperCorporate
          
   end        
   else        
   begin        
   select CompetitionStagingID,ChamberID,Guid,        
   Convert(varchar(10),CONVERT(date,StartDate,106),103) as StartDate,        
   Convert(varchar(10),CONVERT(date,EndDate,106),103) as EndDate,        
   NoOfCoupons,        
   NumberOfLinks,      
   NumberOfSpecialBarcodes, 
   IsFromOpenQuantityLink,
   (@RemainingBalance+NoOfCoupons) as RemainingBalance,        
   (select count(RetailOutletID) from coc_RetailOutlets (NOLOCK) where CorporateID=@CorporateID) as RetailOutlets,          
   (select top 1 ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=@CompetitionStagingID and ResourceKey='ContestName' and languageid=1) as ContestNameEn,        
   (select top 1 ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=@CompetitionStagingID and ResourceKey='ContestName' and languageid=2) as ContestNameArabic,        
   (select top 1 ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=@CompetitionStagingID and ResourceKey='Description' and languageid=1) as DescriptionEn,        
   (select top 1 ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=@CompetitionStagingID and ResourceKey='Description' and languageid=2) as DescriptionArabic,        
   (select STRING_AGG(CompetitionMethodId, ',')  from coc_Competition_Staging_CompetitionMethods(nolock) where CompetitionStagingID=@CompetitionStagingID) as CompetitionMethodIDs,        
   '' as CompetitionTypeIDs,        
   (select STRING_AGG(CompetitionParticipationTypeID, ',') from coc_Competition_Staging_ParticipationTypes(nolock) where CompetitionStagingID=@CompetitionStagingID) as CompetitionParticipationTypeIDs,        
   (select STRING_AGG(CompetitionServiceId, ',') from coc_Competition_Staging_Services(nolock) where CompetitionStagingID=@CompetitionStagingID) as CompetitionServiceIDs,
   @IsIntegralShopperCorporate AS IsIntegralShopperCorporate,
   (select STRING_AGG(SocialMediaID, ',') from coc_competition_staging_SocialMedia(nolock) where CompetitionStagingID=@CompetitionStagingID) as SocialMediaIDs
   from coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID        
          
    end        
  END                               
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetCompetitionStagingPage2]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetCompetitionStagingPage2]  
@Guid NVARCHAR(300), 
@CompetitionStagingID BIGINT,
@LanguageID int =null
As
Begin

   select CompetitionStagingId,CorporateID,NoOfPrizes,NoOfprizeTypes,NoOfBranches,DrawDays,IsSaved,ImageFile,GeneratedPDFFile,ChamberApprovedPDF,Invoice,
   (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=@CompetitionStagingID and ResourceKey='ContestName' and languageid=@LanguageID) as ContestName,  
   (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=@CompetitionStagingID and ResourceKey='Terms' and languageid=1) as TermsEnglish,  
   (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=@CompetitionStagingID and ResourceKey='Terms' and languageid=2) as TermsArabic,
   (select STRING_AGG(CountryID, ',') from coc_Competition_Staging_Countries(nolock) where CompetitionStagingId=@CompetitionStagingID) as CountryIDs,
   (select STRING_AGG(RetailOutletID, ',') from coc_Competition_Staging_RetailOutlets(nolock) where CompetitionStagingId=@CompetitionStagingID) as RetailOutletIDs,
   CreatedBy as 'CorporateUserID'
   from coc_competition_staging(nolock)
   WHERE guid = @Guid AND CompetitionStagingId=@CompetitionStagingID

   select ci.CountryID,sc.CityID from coc_competition_staging_cities(nolock) sc
    inner join coc_Cities(nolock) ci on ci.CityID=sc.CityID
   where sc.CompetitionStagingId=@CompetitionStagingID


   select csp.CompetitionStagingPrizeID,
   csplNameEn.ResourceValue as PrizeNameEnglish,
   csplNameAR.ResourceValue as PrizeNameArabic,
   csplDescriptionEn.ResourceValue as DescriptionEnglish,
   csplDescriptionAR.ResourceValue as DescriptionArabic,
   csp.PrizeCount as PrizeCount,
   (case when not exists(select cs.CompetitionID from coc_competition_staging(nolock) cs where cs.CompetitionStagingID=csp.CompetitionStagingID) then 0  
      when exists (select * from coc_ECouponWinners(nolock) ew where ew.ECouponPrizeID=csp.ECouponPrizeID) then 1
      else 0 end) as IsOver
   from coc_competition_staging_prizes(nolock) csp
   join coc_competition_staging_prizes_languages(nolock) csplNameEn on csplNameEn.competitionStagingPrizeID=csp.competitionStagingPrizeID and csplNameEn.languageid=1 and csplNameEn.ResourceKey='PrizeName'
   join coc_competition_staging_prizes_languages(nolock) csplNameAR on csplNameAR.competitionStagingPrizeID=csp.competitionStagingPrizeID and csplNameAR.languageid=2 and csplNameAR.ResourceKey='PrizeName'
   join coc_competition_staging_prizes_languages(nolock) csplDescriptionEn on csplDescriptionEn.competitionStagingPrizeID=csp.competitionStagingPrizeID and csplDescriptionEn.languageid=1 and csplDescriptionEn.ResourceKey='Description'
   join coc_competition_staging_prizes_languages(nolock) csplDescriptionAR on csplDescriptionAR.competitionStagingPrizeID=csp.competitionStagingPrizeID and csplDescriptionAR.languageid=2 and csplDescriptionAR.ResourceKey='Description'
   where csp.CompetitionStagingId=@CompetitionStagingID


   select  csd.CompetitionStagingDrawID, 
   dl.DrawID,csrdl.Name as DrawName ,Convert(varchar(10),CONVERT(date,csd.DrawDate,106),103) as DrawDate, 
   csd.WinnersCount,csd.BranchesCount,csd.TypeOfPrizesCount,
   (case when not exists(select cs.CompetitionID from coc_competition_staging(nolock) cs where cs.CompetitionStagingID=csd.CompetitionStagingID) then 0  
      when exists (select * from coc_ECouponWinners(nolock) ew where ew.ECouponDrawPrizeID in 
	      (select edp.ECouponDrawPrizeID from coc_ECouponDrawPrizes(nolock) edp where edp.ECouponDrawID=csd.ECouponDrawID)) then 1
      else 0 end) as IsOver
   from coc_competition_staging_draws(nolock) csd
        join coc_competition_staging_draws_languages(nolock)  csrdl on csrdl.CompetitionStagingDrawID=csd.CompetitionStagingDrawID and LanguageID=1
		join coc_DrawNameLanguages(nolock) dl on dl.Name=csrdl.Name and dl.LanguageID=1 
     where csd.CompetitionStagingId=@CompetitionStagingID

   select csdd.CometitionStagingDrawDetailID,
     dl.DrawID,csdd.RetailOutletID,csdd.CompetitionStagingPrizeID,
   (select csplNameEn.ResourceValue from coc_competition_staging_prizes(nolock) csp
          join coc_competition_staging_prizes_languages(nolock) csplNameEn on csplNameEn.competitionStagingPrizeID=csp.competitionStagingPrizeID 
		  and csplNameEn.languageid=1 and csplNameEn.ResourceKey='PrizeName'
	     where csp.CompetitionStagingPrizeID=csdd.CompetitionStagingPrizeID) as PrizeName,
    csdd.AvailableCount,csdd.ChoosenCount,
	(case when not exists(select cs.CompetitionID from coc_competition_staging(nolock) cs where cs.CompetitionStagingID=csd.CompetitionStagingID) then 0  
      when exists (select * from coc_ECouponWinners(nolock) ew where ew.ECouponDrawPrizeID=csdd.ECouponDrawPrizeID) then 1
      else 0 end) as IsOver
	from coc_competition_staging_draws_details(nolock) csdd
     join coc_competition_staging_draws(nolock) csd on csd.CompetitionStagingDrawID=csdd.CompetitionStagingDrawID
	 join coc_competition_staging_draws_languages(nolock)  csrdl on csrdl.CompetitionStagingDrawID=csd.CompetitionStagingDrawID and LanguageID=1
	 join coc_DrawNameLanguages(nolock) dl on dl.Name=csrdl.Name and dl.LanguageID=1 
	 where csd.CompetitionStagingId=@CompetitionStagingID
	 order by csdd.CompetitionStagingDrawID asc

	 select [TermAndConditionID]
	 ,[TermAndConditionTypeID]
	 ,[TermAndConditionTypeName]
	 , ConfigTemsEng
	 ,case when @LanguageID= 2 then '<div dir= ''rtl'' >'+ ConfigTemsArabic + '</div>' else ConfigTemsArabic end as ConfigTemsArabic
	 , ShortConfigTemsEng
	 ,case when @LanguageID= 2 then '<div dir= ''rtl'' >'+ ShortConfigTemsArabic + '</div>' else ShortConfigTemsArabic end  as ShortConfigTemsArabic
	 from core_coc_Terms (NOLOCK) where TermAndConditionTypeID=1 --1 is for Competition

End
GO
/****** Object:  StoredProcedure [dbo].[Core_USP_GetCompetitionsWithDraws]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_USP_GetCompetitionsWithDraws]              
 @CorporateID INTEGER ,              
 @UserID INTEGER=null,            
 @LanguageID int=1,            
 @RoleID bigint=null,                
 @ImpersonationUserID bigint=null,                
 @SpResponseStatus int out,                
 @SpResponseMessage nvarchar(max) out,                
 @SpErrorDetails nvarchar(max)    out         
AS              
SET NOCOUNT ON              
 BEGIN  TRY             
  SELECT ROW_NUMBER() OVER(ORDER BY ECouponID DESC) RowID,   ECouponID,EServiceID,EService [CompetitionName],           
  DrawName ,CONVERT(varchar, CONVERT(date,DrawDate)) DrawDate,        
  (case when (CONVERT(date,DrawDate) > CONVERT(date,GETDATE()))  then 'C' --Not active        
  when (CONVERT(date,DrawDate) <= CONVERT(date,GETDATE()) and (WinnerCount >= NoOfTotalPrizes )) then 'D' --Complete            
  when (CONVERT(date,DrawDate) = CONVERT(date,GETDATE()) and (WinnerCount < NoOfTotalPrizes )) then 'A' --Active            
  when (CONVERT(date,DrawDate) < CONVERT(date,GETDATE()) and (WinnerCount < NoOfTotalPrizes )) then 'B' --Waiting        
   End   ) [Status]  ,        
  ECouponDrawID,NoOfPrizeTypes,NoOfTotalPrizes,WinnerCount, EntryTypeID,EnumValue,        
  CONVERT(varchar,CONVERT(date,ResultDate))ResultDate, IsDisable, CompetitionOrderNumber      
  from (        
  select        
  ECdrawLanguage.value DrawName           
  , DrawDate ,EC.ECouponID,ES.EServiceID,EService        
  ,           
          
  (select Count(*) from coc_ECouponDrawPrizes EDP (NOLOCK) where EDP.ECouponDrawID = ECdraw.ECouponDrawID) as NoOfPrizeTypes   ,        
  (select sum(Frequency) from coc_ECouponDrawPrizes EDP (NOLOCK)        
  where EDP.ECouponDrawID = ECdraw.ECouponDrawID) as NoOfTotalPrizes   ,        
  (select Count(*) from coc_ECouponWinners EW_1 (NOLOCK) inner join coc_ECouponDrawPrizes EDW_1 (NOLOCK) ON EDW_1.ECouponDrawPrizeID= EW_1.ECouponDrawPrizeID         
   where EDW_1.ECouponDrawID = ECdraw.ECouponDrawID) as WinnerCount       ,        
  (select max(EW_1.DrawDateTime) from coc_ECouponWinners EW_1 (NOLOCK) inner join coc_ECouponDrawPrizes EDW_1 (NOLOCK) ON EDW_1.ECouponDrawPrizeID= EW_1.ECouponDrawPrizeID         
   where EDW_1.ECouponDrawID = ECdraw.ECouponDrawID) as ResultDate       ,        
  EC.EntryTypeID  ,EL.EnumValue     ,ECdraw.ECouponDrawID, ECdraw.IsDisable, ST.CompetitionOrderNumber            
  FROM coc_ECoupons EC(NOLOCK)                
 INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID                
 INNER JOIN coc_EServiceLanguages EG(NOLOCK) ON EC.EServiceID=EG.EServiceID AND EG.LanguageID=@LanguageID                
 INNER JOIN coc_EnumValues EV(NOLOCK) ON EV.EnumValueID=EC.EntryTypeID                  
 INNER JOIN coc_EnumValueLanguages EL(NOLOCK) ON EV.EnumValueID=EL.EnumValueID AND  EL.LanguageID=@LanguageID                    
 INNER JOIN coc_ECouponDraw ECdraw(NOLOCK) ON ECdraw.ECouponID= ec.ECouponID            
 INNER JOIN coc_ECouponDrawLanguages ECdrawLanguage (NOLOCK) ON ECdrawLanguage.ECouponDrawID = ECdraw.ECouponDrawID              
 INNER JOIN coc_competition_staging ST(NOLOCK) ON EC.ECouponID = ST.CompetitionId
  WHERE   EC.ResulltDeclared=0   AND   ES.CorporateID=@CorporateID     and ECdrawLanguage.ResourceKey = 'Name' AND ECdrawLanguage.LanguageID = @LanguageID           
  )   tbl 
  where ECouponDrawID not in (12823,  
12824,  
12825,  
10496,  
10497,  
10498,  
10499,  
10500,  
10501,  
10502,  
10503,  
10621,  
10622,  
10623,  
10624,  
10625,  
10626)
  ORDER BY [Status]        
  Set @SpResponseStatus=1;                 
  Set @SpResponseMessage='Success';                
  Set @SpErrorDetails='Success';           
  END TRY                            
  BEGIN CATCH           
          
  Set @SpResponseStatus=0;                 
  Set @SpResponseMessage='GenericError';                
  Set @SpErrorDetails ='ErrorNumber : <' +Convert(nvarchar(20),ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>, ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';            
        
          
            
  END CATCH                  
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetConsumerIdentity]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================              
-- Author:  Narender Gorige             
-- Create date: 07 June 2021             
-- Description: Retrieves IdentityTypeID and IdentityNumber for a consumer.             
-- =============================================           
CREATE PROCEDURE [dbo].[core_usp_GetConsumerIdentity]         
 @ConsumerID int ,  
 @ImpersonationUserID bigint=null,              
 @SpResponseStatus int = null out,              
 @SpResponseMessage nvarchar(max) = null out,              
 @SpErrorDetails nvarchar(max) = null out        
AS                  
 SET NOCOUNT ON                  
 BEGIN TRY   
    DECLARE @UserIdentityTypeID int
    DECLARE @UserIdentityNumber NVARCHAR(20)
    DECLARE @IsMobileVerified BIT

    SET @SpResponseStatus=0;                   
    SET @SpResponseMessage='';                  
    SET @SpErrorDetails=''; 

    SELECT @UserIdentityTypeID = UserIdentityTypeID, @UserIdentityNumber = UserIdentityNumber
    FROM coc_Consumers 
    WHERE ConsumerID = @ConsumerID AND IsActive = 1 AND IsVerified = 1 and IsDeleted = 0

    SELECT @IsMobileVerified = IsMobileVerified
    FROM coc_Consumers 
    WHERE ConsumerID = @ConsumerID AND IsActive = 1 AND IsDeleted = 0

    SELECT 1 AS [UserIdentityTypeID], '123' AS [UserIdentityNumber], 
    @IsMobileVerified AS [IsMobileVerified]
      
    Set @SpResponseStatus=1;                   
    Set @SpResponseMessage='Success';            
    Set @SpErrorDetails='Success';   
          
 END TRY                  
 BEGIN CATCH                           
    Set @SpResponseStatus=0;                   
    Set @SpResponseMessage='GenericError';                  
    Set @SpErrorDetails ='ErrorNumber : <' + CONVERT(VARCHAR,ERROR_NUMBER())+ '>,         
    ErrorSeverity : <'+ CONVERT(VARCHAR,ERROR_SEVERITY())+'>,         
    ErrorState : <'+CONVERT(VARCHAR,ERROR_STATE())+'> ,         
    ErrorProcedure : <'+ERROR_PROCEDURE()+'> ,         
    ErrorLine <'+ CONVERT(VARCHAR, ERROR_LINE()) +'>         
    ErrorMessage : <'+ERROR_MESSAGE()+'>';            
 END CATCH                  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetConsumerNotification]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetConsumerNotification]

	@ConsumerID INTEGER,
	@LanguageID INTEGER,
	@UserID bigint=null,
	@RoleID bigint=null,
 	@ImpersonationUserID bigint=null,
	@SpResponseStatus int = null out,
	@SpResponseMessage nvarchar(max) = null out,
	@SpErrorDetails nvarchar(max) = null out

AS     
 Begin Try      
	 Set @SpResponseStatus=1;     
	 Set @SpResponseMessage='Success';    
	 Set @SpErrorDetails='Success'; 
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		SELECT CN.ConsumerNotificationID,NS.NotificationSendID,ISNULL(NT.NotificationRead,0)NotificationRead,NS.NotificationID,Convert(nvarchar(20),FORMAT(NS.SendingDate,'dd MMM yyyy'))SendingDate,NS.SendingType,CONVERT(VARCHAR(8), SendingDate, 108)[Time],

			ISNULL(NL.[Subject],'')[Subject],ISNULL(NL.[Message],'')[Message],CU.FirstName+' '+CU.SecondName+' '+CU.FamilyName [FirstName],EB.Barcode,CN.HasChecked,ISNULL(ES.CompetitionID,0)CompetitionID,

			ES.EServiceID, Case when (ISNULL(ES.CompetitionID,0)= 43 and ISNULL(NL.[Message],'') not like '%@barcode%') or EB.Barcode IS null THEN 'B' else 'Q' END BarcodeType,

			CO.LogoFile,
			VT.LOGO as PromotionImage,
			VT.Position

		FROM coc_ConsumerNotifications (NOLOCK) CN

			INNER JOIN coc_Consumers (NOLOCK) CU ON CU.ConsumerID=CN.ConsumerID

			INNER JOIN coc_NotificationSends(NOLOCK) NS ON CN.NotificationSendID=NS.NotificationSendID

			INNER JOIN coc_NotificationSendLanguages(NOLOCK) NL ON NL.NotificationSendID=CN.NotificationSendID AND LanguageID=@LanguageID --AND SendingType != 4

			LEFT JOIN coc_Notifications(NOLOCK) NT ON NT.NotificationID=NS.NotificationID

			LEFT JOIN coc_EServiceBarcodes(NOLOCK) EB ON EB.NotificationID=NS.NotificationID AND CN.ConsumerID=EB.ConsumerID AND EB.ConsumerNotificationID=CN.ConsumerNotificationID

			LEFT JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID=NT.EServiceID

			LEFT JOIN coc_corporates(NOLOCK) CO ON CO.CorporateID =ES.CorporateID

			LEFT JOIN coc_EVoucher(NOLOCK) EV ON EV.EServiceID=ES.EServiceID

			LEFT JOIN coc_VoucherTemplate(NOLOCK) VT ON VT.VoucherID=EV.EVoucherID



		WHERE ISNULL(CN.ConsumerID,0)=@ConsumerID  AND NS.SendingDate<=GETDATE()

		ORDER BY NS.SendingDate DESC,CN.HasChecked ASC
END TRY                
  BEGIN CATCH      
  Set @SpResponseStatus=0;     
  Set @SpResponseMessage='GenericError';    
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
  END CATCH                
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_USP_GetConsumerNotificationByServiceType]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_USP_GetConsumerNotificationByServiceType]

	@ConsumerID INTEGER,

	@LanguageID INTEGER,

	@ServiceTypeID integer

AS

	SET NOCOUNT ON

	BEGIN

		SELECT CN.ConsumerNotificationID,NS.NotificationSendID,ISNULL(NT.NotificationRead,0)NotificationRead,NS.NotificationID,FORMAT(NS.SendingDate,'dd MMM yyyy' )SendingDate,NS.SendingType,CONVERT(VARCHAR(8), SendingDate, 108)[Time],

			ISNULL(NL.[Subject],'')[Subject],ISNULL(NL.[Message],'')[Message],CU.FirstName+' '+CU.SecondName+' '+CU.FamilyName [FirstName],EB.Barcode,CN.HasChecked,ISNULL(ES.CompetitionID,0)CompetitionID,

			ES.EServiceID, Case when (ISNULL(ES.CompetitionID,0)= 43 and ISNULL(NL.[Message],'') not like '%@barcode%') or EB.Barcode IS null THEN 'B' else 'Q' END BarcodeType,

			CO.LogoFile,
			VT.LOGO as PromotionImage,
			VT.Position

		FROM coc_ConsumerNotifications CN (NOLOCK)

			INNER JOIN coc_Consumers (NOLOCK) CU ON CU.ConsumerID=CN.ConsumerID

			INNER JOIN coc_NotificationSends(NOLOCK) NS ON CN.NotificationSendID=NS.NotificationSendID

			INNER JOIN coc_NotificationSendLanguages(NOLOCK) NL ON NL.NotificationSendID=CN.NotificationSendID AND LanguageID=@LanguageID --AND SendingType != 4

			LEFT JOIN coc_Notifications(NOLOCK) NT ON NT.NotificationID=NS.NotificationID

			LEFT JOIN coc_EServiceBarcodes(NOLOCK) EB ON EB.NotificationID=NS.NotificationID AND CN.ConsumerID=EB.ConsumerID AND EB.ConsumerNotificationID=CN.ConsumerNotificationID

			LEFT JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID=NT.EServiceID

			LEFT JOIN coc_corporates(NOLOCK) CO ON CO.CorporateID =ES.CorporateID

			LEFT JOIN coc_EVoucher(NOLOCK) EV ON EV.EServiceID=ES.EServiceID

			LEFT JOIN coc_VoucherTemplate(NOLOCK) VT ON VT.VoucherID=EV.EVoucherID

		WHERE ES.ServiceTypeID = @ServiceTypeID AND ISNULL(CN.ConsumerID,0)=@ConsumerID  AND NS.SendingDate<=GETDATE()

		ORDER BY NS.SendingDate DESC,CN.HasChecked ASC

	END

	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetConsumerProfileByAdmin]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetConsumerProfileByAdmin]     
  @ConsumerID bigint , 
  @UserID bigint=NULL,                      
  @RoleId int = 1 , 
  @LanguageID bigint=1,   
  @ImpersonationUserID bigint,                      
  @SpResponseStatus int out,                      
  @SpResponseMessage nvarchar(max) out,                      
  @SpErrorDetails nvarchar(max)  out     
AS                
 BEGIN  TRY            
 SET NOCOUNT ON       
 --get oldData from  Consumer 
   SELECT ConsumerID     
  ,      MembershipNumber  
  ,      FirstName+' '+SecondName+' '+FamilyName [MemberName]                
  ,      FirstName                                              
  ,      SecondName                                             
  ,      FamilyName                                             
  ,      UserID                                                 
  ,      Gender               
  ,      CONVERT(VARCHAR(10), BirthDate, 101) BirthDate_Gre            
  ,      CONVERT(VARCHAR(100),BirthDate,131) BirthDate_Ar                                                
  ,      BirthDate                                              
  ,      AgeGroupID                                             
  ,      KnowECouponID                                          
  ,      Address1                                               
  ,      Address2                                               
  ,      LTRIM(RTRIM(PrimaryMobile))  as PrimaryMobile                                         
  ,      LTRIM(RTRIM(SecondaryMobile)) as SecondaryMobile                                        
  ,      LTRIM(RTRIM(EmailID)) as EmailID                                                
  ,      FacebookID                                             
  ,      CityID                
  ,      CityID as UserSelectedCityID                                                 
  ,      CountryID                                              
  ,      NationalityID                                          
  ,      ImageFile                                              
  ,      OtpID                               
  ,      IsVerified                                             
  ,      VerificationDate              
  ,      IsActive                
  ,      AcceptedTerms                                          
  ,      HideApplicationTour                                    
  ,      IsFacebookUser                                         
  ,      LoyaltyPoint                                           
  ,      RedeemPoint                                            
  ,      BalancePoint                                           
  ,      NotificationCount                                      
  ,      MembershipNumber                                       
  ,      NationalityID                                          
  ,      IqamaNumber                                            
  ,      KnowECouponOthers                                      
  ,      ISNULL(DeviceToken,0) [DeviceToken]                
  ,      ThirdName                
  ,      OccupationID                 
  ,      JobNumber                 
  ,      Organization                 
  ,      MaritalStatusID                 
  ,      FamilyMember           
  ,     IsMobileVerified          
  ,     IsEmailVerified                 
  FROM coc_Consumers (NOLOCK)   WHERE  ConsumerID=@ConsumerID 
--get data from latest updated Data from temp table upd coc_ConsumerProfileEdit
 select 
  ConsumerID
 ,FirstName	
 ,SecondName	
 ,FamilyName	
 ,UserID	
 ,Gender	
 ,BirthDate	
 ,AgeGroupID	
 ,KnowECouponID	
 ,Address1	
 ,Address2	
 ,PrimaryMobile	
 ,SecondaryMobile	
 ,EmailID
 ,FacebookID	
 ,CityID	
 ,CountryID	
 ,ImageFile	
 ,IsVerified
 ,VerificationDate	
 ,IsActive	
 ,AcceptedTerms	
 ,HideApplicationTour	
 ,IsFacebookUser	
 ,LoyaltyPoint	
 ,RedeemPoint	
 ,BalancePoint	
 ,NotificationCount	
 ,AddDate	
 ,EditDate	
 ,NationalityID	
 ,OtpID	
 ,IsTwitterUser	
 ,IsGmailUser
 ,IsYahooUser	
 ,IsOutlookUser	
 ,TwitterID	
 ,OutlookID	
 ,YahooID	
 ,MembershipNumber	
 ,KnowECouponOthers	
 ,GmailID	
 ,IqamaNumber	
 ,DeviceToken	
 ,ChannelName	
 ,AndroidDeviceToken
 ,IsDeleted	
 ,ThirdName	
 ,OccupationID	
 ,JobNumber	
 ,Organization	
 ,MaritalStatusID	
 ,FamilyMember	
 ,IsFromCompetitionLink	
 ,ECouponID	
 ,IsMobileVerified	
 ,IsEmailVerified	
 ,AdminAttachFile	
 ,AdminRemarks	
 ,FullName	
 ,APIKEY	
 ,StatusID
 FROM coc_ConsumerProfileEdit (NOLOCK) WHERE  ConsumerID=@ConsumerID                             
    SET @SpResponseStatus=1; 
    SET @SpResponseMessage='Success'; 
    SET @SpErrorDetails='Success'; 
END try 

BEGIN catch 
    SET @SpResponseStatus=0; 
    SET @SpResponseMessage='GenericError'; 
    SET @SpErrorDetails ='ErrorNumber : <' 
                         + CONVERT(NVARCHAR(20), Error_number()) 
                         + '>,                  ErrorSeverity : <' 
                         + CONVERT(NVARCHAR(20), Error_severity()) 
                         + '>,                   ErrorState : <' 
                         + CONVERT(NVARCHAR(20), Error_state()) 
                         + '> ,                   ErrorProcedure : <' + Error_procedure() 
                         + '> ,                   ErrorLine <' 
                         + CONVERT(NVARCHAR(20), Error_line()) 
                         + '>                   ErrorMessage : <' + Error_message() + '>'; 
END catch
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetCorporateByCRNumber]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_GetCorporateByCRNumber]

 @EmailID nvarchar(100),  

 @CRNumber nvarchar(50)    

AS   

 SET NOCOUNT ON  

  BEGIN  

	

	SELECT 

	   [CorporateID]

      ,[JCCICode]

      ,[CRNumber]

      ,[EmailID]

      ,[MobileNumber]

      ,[UserID]

      ,[BarcodePrefix]

      ,[BarcodeSuffix]

      ,[BarcodeLength]

      ,[BarcodeTypeID]

      ,[IsActive]

      ,[AddDate]

      ,[LicenseExpiryDate]

      ,[CRDocumentFile]

      ,[IDSponsorFile]

      ,[LogoFile]

      ,[FirstName]

      ,[MiddleName]

      ,[LastName]

      ,[CountryID]

      ,[CityID]

      ,[Address1]

      ,[PhoneNumber]

      ,[FaxNumber]

      ,[Password]

      ,[IsEmailCommunication]

      ,[IsSMSCommunication]

      ,[IsMobileCommunication]

      ,[CanContactMorning]

      ,[CanContactEvening]

      ,[NewsLetterNotification]

      ,[PromotionNotification]

      ,[IsVerified]

      ,[CorporateName]

      ,[MerchantCode]

      ,[CorporateType]

  FROM coc_Corporates (NOLOCK) WHERE EmailID = @EmailID AND CRNumber = @CRNumber





  END  

 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetCorporateKioskLocations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[Core_Usp_GetCorporateKioskLocations] @CorporateID int
,                                                            @TotalRecords int out
AS
	SET NOCOUNT ON
BEGIN

	select @TotalRecords=count(KS.KioskLocationID)
	from       coc_KioskLocations             KS(NOLOCK) 
	inner join coc_KioskLocationRetailOutlets KLR(NOLOCK) on KLR.KioskLocationID=KS.KioskLocationID
	inner join coc_RetailOutlets              RO(NOLOCK)  on RO.RetailOutletID=KLR.RetailOutletID
	where RO.CorporateID=@CorporateID

END

	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetCorporateLogoList]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetCorporateLogoList] 
 @UserID INTEGER                 =null
,@LanguageID int                 =1
,@RoleID bigint                  =null
,@ImpersonationUserID bigint     =null
,@SpResponseStatus int            out
,@SpResponseMessage nvarchar(max) out
,@SpErrorDetails nvarchar(max)    out
AS
	SET NOCOUNT ON
	BEGIN TRY
			SELECT CR.CorporateID
		,      CR.JCCICode
		,      CR.LogoFile
		,      CR.CRNumber
		,      CR.CorporateName
		,      CR.EmailID
		,      CR.MobileNumber
		,      CR.UserID
		,      CR.CountryID
		,      CR.BarcodePrefix
		,      CR.BarcodeSuffix
		,      CR.BarcodeLength
		,      CR.BarcodeTypeID
		,      CR.IsActive
		FROM coc_Corporates(NOLOCK) CR where CR.IsActive=1

	Set @SpResponseStatus=1;
	Set @SpResponseMessage='Success';
	Set @SpErrorDetails='Success';
	END TRY
	BEGIN CATCH

	Set @SpResponseStatus=0;
	Set @SpResponseMessage='GenericError';  
  Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, 
  ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>,
  ErrorState : <'+convert(varchar(500), Error_state())+'> , 
  ErrorProcedure : <'+Error_procedure() +'> , 
  ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';          
  
	END CATCH
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_USP_GetCorporatePassword]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_USP_GetCorporatePassword]        
@CRNumber nvarchar(max)    = null  
,@SpResponseStatus int            = null OUTPUT            
,@SpResponseMessage nvarchar(max) = null OUTPUT            
,@SpErrorDetails nvarchar(max)    = null OUTPUT 
,@Password nvarchar(max)    = null OUTPUT 
AS            
SET NOCOUNT ON      
  
BEGIN  TRY   
	BEGIN TRANSACTION TRN_CorporatePassword 
  
    IF NOT EXISTS (SELECT UserID FROM coc_Users(NOLOCK)     
                    WHERE IsActive = 1 AND  IsDeleted = 0 and UserName = @CRNumber)       
    BEGIN   
        SET @SpResponseStatus = 1;              
        SET @SpResponseMessage = 'Success';              
        SET @SpErrorDetails = 'Success';  
		SET @Password = 'Corporate not exists';
    END    
    ELSE    
    BEGIN    
        SET @SpResponseStatus = 2;              
        SET @SpResponseMessage = 'CorporateUserAlreadyExists';              
        SET @SpErrorDetails = 'CorporateUserAlreadyExists';  
		SELECT @Password=[Password] FROM coc_Users(NOLOCK) where UserName = @CRNumber ; 
    END    
	COMMIT TRANSACTION TRN_CorporatePassword  
END TRY            
BEGIN CATCH       
ROLLBACK TRANSACTION TRN_CorporatePassword     
    Set @SpResponseStatus=0;            
    Set @SpResponseMessage='GenericError';            
    Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,       
                        ErrorSeverity :<'+ convert(varchar(500), Error_severity())+'>,       
                        ErrorState : <'+convert(varchar(500), Error_state())+'> ,       
                   ErrorProcedure : <'+Error_procedure() +'> ,      
                        ErrorLine <'+convert(varchar(500), Error_line())+'>       
                        ErrorMessage : <'+ERROR_MESSAGE()+'>';       
END CATCH      
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetCorporateRegistrationData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_GetCorporateRegistrationData]
@UserID INTEGER,
@SpResponseStatus int OUTPUT,      
@SpResponseMessage nvarchar(max) OUTPUT,      
@SpErrorDetails nvarchar(max) OUTPUT  

AS
SET NOCOUNT ON
BEGIN  TRY   
    
		BEGIN
		      Set @SpResponseStatus=1;       
	          Set @SpResponseMessage='Success';      
	          Set @SpErrorDetails=NULL;   

			SELECT CU.UserID,CU.UserName,CU.EmailID,CU.[Password],CU.MobileNumber,CC.FirstName,CC.JCCICode,CC.CRNumber,CC.UserID,CC.EmailID,CC.AddDate,CU.ResetRequired,

			    Convert(varchar(10),CONVERT(date,CC.LicenseExpiryDate,106),103) AS LicenseExpiryDate,CC.CRDocumentFile,CC.IDSponsorFile,CC.LogoFile,CC.LastName,CC.MiddleName,

				CC.CountryID,CC.CityID,CC.Address1,CC.PhoneNumber,CC.FaxNumber,CC.IsEmailCommunication,CC.IsSMSCommunication,CC.IsMobileCommunication,CanContactMorning,

				CC.CanContactEvening,CC.NewsLetterNotification,CC.PromotionNotification,CU.IsActive,CC.CorporateName,CC.MerchantCode, CC.CorporateNameAR, cc.VATNo as VATNumber

				FROM  coc_Users CU(NOLOCK)

					INNER JOIN coc_Corporates CC (NOLOCK) ON CU.UserID=CC.UserID

			    WHERE CC.UserID=@UserID

		END

END TRY                  
  BEGIN CATCH        
  Set @SpResponseStatus=0;       
  Set @SpResponseMessage='GenericError';      
   SET @SpErrorDetails = convert(varchar(500), Error_number()) + 'ErrorNumber'     
                               + convert(varchar(500),Error_severity()) + 'ErrorSeverity'     
                               + 'ErrorState' +convert(varchar(500), Error_state())     
                               + 'ErrorProcedure' + Error_procedure()     
                               + 'ErrorLine' +convert(varchar(500), Error_line()) + 'ErrorMessage'     
                               + Error_message();    
       
  END CATCH                  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetCorporateVouchers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================  
-- Author  : Shaik  
-- Create date : 28 Aug 2019 
-- Description : Get Bundles for Vouchers for particular Vouchers  
-- =============================================  
CREATE PROCEDURE  [dbo].[core_usp_GetCorporateVouchers]
 @CorporateId INTEGER,  
 @LanguageId INTEGER,  
 @eVoucherId INTEGER=0, 
  @UserID bigint=NULL,
  @RoleID bigint=NULL,
  @ImpersonationUserID bigint,
  @SpResponseStatus int OUTPUT,
  @SpResponseMessage nvarchar(max) OUTPUT,
  @SpErrorDetails nvarchar(max) OUTPUT               
AS  
BEGIN TRY  
		Set @SpResponseStatus=1; 
		Set @SpResponseMessage='Success';
		Set @SpErrorDetails=NULL;
		SET NOCOUNT ON; 
		SELECT   
		 evb.EVoucherBundleID,  
		 ev.EVoucherID,  
		 evl.ResourceValue AS [VoucherName],  
		 crs.CorporateID,  
		 crs.CorporateName,  
		 eva.IsApproved,  
		 ebl.ResourceValue AS [BundleName]  
		FROM coc_EVoucher ev(NOLOCK)  
		INNER JOIN coc_EVoucherLanguages evl(NOLOCK) ON evl.EVoucherID=ev.EVoucherID AND evl.ResourceKey='VoucherName' AND evl.LanguageID=@LanguageId  
		INNER JOIN coc_EVoucherBundle evb(NOLOCK) ON evb.EVoucherID=ev.EVoucherID  
		INNER JOIN coc_EServices es(NOLOCK) ON es.EServiceID=ev.EServiceID  
		INNER JOIN coc_Corporates crs(NOLOCK) ON crs.CorporateID=es.CorporateID  
		INNER JOIN coc_EVoucherApproval eva(NOLOCK) ON eva.EVoucherBundleID=evb.EVoucherBundleID  
		INNER JOIN coc_EBundle eb(NOLOCK) ON eb.EBundleID=evb.EBundleID  
		INNER JOIN coc_EBundleLanguages ebl(NOLOCK) ON ebl.EBundleID=eb.EBundleID AND ebl.ResourceKey='BundleName' AND ebl.LAnguageID=@LanguageId  
		WHERE crs.CorporateID=@CorporateId AND ev.EVoucherID=@eVoucherId  
  END TRY            
  BEGIN CATCH  
  Set @SpResponseStatus=0; 
  Set @SpResponseMessage='GenericError';
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';              
  END CATCH            
 SET NOCOUNT OFF             
GO
/****** Object:  StoredProcedure [dbo].[Core_usp_GetCountries]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_usp_GetCountries] 
(  
  @LanguageId int = 1 
 ,@UserID bigint=null 
 ,@RoleID bigint=null  
 ,@ImpersonationUserID bigint=null   
 ,@SpResponseStatus int out 
 ,@SpResponseMessage nvarchar(max) out   
 ,@SpErrorDetails nvarchar(max)    out   
)  
AS  
  
BEGIN  TRY
    if @LanguageID=0  
   begin 
   set @LanguageID=1    
   end  
		--coc_Countries order by c  
		--coc_CountryLanguages   
		SELECT cc.CountryID,cl.Country CountryName,cc.FlagImage, cc.ISOCode,cc.CountryCode  
		from coc_Countries cc (NOLOCK) inner join coc_CountryLanguages cl  (NOLOCK) on cc.CountryId = cl.CountryID  
		WHERE cl.LanguageId = @LanguageId and CC.IsActive = 1 and (cc.AllowRegistration = 1)  

		Set @SpResponseStatus=1;  
		Set @SpResponseMessage='Success'; 
		Set @SpErrorDetails=NULL;   
  END TRY                    
  
BEGIN CATCH             
  
 Set @SpResponseStatus=0;         
  
 Set @SpResponseMessage='GenericError';           
  
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';          
  
END CATCH                    
  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetCountryInformation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetCountryInformation] 
	@CountryID INTEGER=NULL,
	@IsActive BIT=NULL,
	@LanguageID int=1,       
	@UserID bigint=null,    
	@RoleID bigint=null,    
	@ImpersonationUserID bigint=null,    
	@SpResponseStatus int out,    
	@SpResponseMessage nvarchar(max) out,    
	@SpErrorDetails nvarchar(max)    out    
  AS
  BEGIN TRY   
		 if @LanguageID=0  
		 begin  
		 set @LanguageID=1  
		 end  
		Set @SpResponseStatus=1;     
		Set @SpResponseMessage='Success';    
		Set @SpErrorDetails=NULL;    

	--Table 1 [Country]
	SELECT CU.CountryID,CU.CountryCode,CL.Country,IsActive
		FROM [coc_Countries] CU(NOLOCK) 
			INNER JOIN [coc_CountryLanguages] CL(NOLOCK) ON CL.CountryID=CU.CountryID AND CL.LanguageID=@LanguageID
		WHERE (@CountryID IS NULL OR CU.CountryID=@CountryID) AND (@IsActive IS NULL OR CU.IsActive=@IsActive)
		order by CU.DisplayOrder, CL.Country

	--Table 1 [CountryLanguages]
	SELECT CountryID,LanguageID,Country 
		FROM [coc_CountryLanguages] CL(NOLOCK)
	WHERE (@CountryID IS NULL OR CL.CountryID=@CountryID) 
			--AND(@LanguageID IS NULL OR CL.LanguageID=@LanguageID)
  END TRY                
  BEGIN CATCH         
	Set @SpResponseStatus=0;     
	Set @SpResponseMessage='GenericError';       
	Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
  END CATCH                
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetDynamicCompetitionList]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_GetDynamicCompetitionList]                
  @CorporateID INTEGER=null,                  
  @LanguageID INTEGER=1,     
  --@VatPecentage INTEGER=0.15,                             
  @UserID bigint=NULL,                      
  @RoleID bigint=NULL,                      
  @ImpersonationUserID bigint=null,                      
  @SpResponseStatus int=null out,                      
  @SpResponseMessage nvarchar(max)=null out,                      
  @SpErrorDetails nvarchar(max)=null  out                                     
AS                     
BEGIN TRY    
    IF( @CorporateID IS NULL ) 
      BEGIN 
          SET @CorporateID=0; 
      END 

    DECLARE @VatPercentage DECIMAL(18, 2); 

    SELECT TOP 1 @VatPercentage = setupvalue 
    FROM   [dbo].[coc_systemsetups] (nolock) 
    WHERE  setupkey = 'VatPercentage' 

    SET @VatPercentage=Cast(@VatPercentage / 100 AS DECIMAL(10, 2)) 
	
    SELECT cs.competitionstagingid, 
           (SELECT dbo.Udf_core_getecoponordernumber(cs.competitionnumber))AS 
           EcoponOrderNumber, 
           (SELECT Isnull(corporatename, Isnull(CorporateNameAR, '')) 
            FROM   coc_corporates(nolock) 
            WHERE  corporateid = cs.corporateid)                           AS 
           CorporateFullName, 
           ( CASE 
               WHEN @LanguageID = 1 THEN (SELECT isnull(corporatename,'') 
                                          FROM   coc_corporates (nolock) 
                                          WHERE  corporateid = cs.corporateid) 
               ELSE (SELECT isnull(corporatenamear,'')
                     FROM   coc_corporates (nolock) 
                     WHERE  corporateid = cs.corporateid) 
             END )                                                         AS 
           CorporateName, 
           CONVERT(VARCHAR(10), CONVERT(DATE, Cs.startdate, 106), 103)     AS 
           StartDate, 
           CONVERT(VARCHAR(10), CONVERT(DATE, Cs.enddate, 106), 103)       AS 
           EndDate, 
           cs.noofprizes, 
           cs.noofbranches, 
           (SELECT Count(*) 
            FROM   coc_competition_staging_draws(nolock) 
            WHERE  competitionstagingid = cs.competitionstagingid) AS  NoOfDraws, 
		     (CASE WHEN Isnull(cs.isactive, 0) = 1  
		     THEN  
			(select Isnull(NotificationCount,0) from coc_eserviceinvoices  where eserviceID=cnf.eserviceid)
		    ELSE 0
		    END) TotalNotificationCount ,
		   (CASE WHEN Isnull(cs.isactive, 0) = 1 and ((select Isnull(NotificationCount,0) from coc_eserviceinvoices  where eserviceID=cnf.eserviceid) > (Isnull(cs.noofcoupons,0)))
		    THEN  (select Isnull(NotificationCount,0) from coc_eserviceinvoices  where eserviceID=cnf.eserviceid)-(cs.noofcoupons)
		    ELSE 0
		    END) NoOfExtraAddedCoupons ,
		   (select count(EServiceBarcodeID) from coc_EServiceBarcodes (nolock) esb where esb.NotificationID= cnf.NotificationID) NoOfCoupons,--TotalNoOfCopons
		   (select count(EServiceBarcodeID) from coc_EServiceBarcodes (nolock) esb where esb.NotificationID= cnf.NotificationID and esb.IsUsed= 1) NoOfCoponsUsed,
		   (select count(EServiceBarcodeID) from coc_EServiceBarcodes (nolock) esb where esb.NotificationID= cnf.NotificationID and isnull(esb.IsUsed,0) = 0) NoOfCoponsRemaining,        
           cs.drawdays, 
           cs.noofcoupons as CompetitionStagingCoupons ,--old TotalNoOfCopons column name noofcoupons 
           cs.isadminapproved, 
           cs.sentforadminapproval, 
           cs.chamberapprovedpdf, 
           cs.generatedpdffile, 
		   cs.isactive as Isactive,
		   cs.isonhold as Isonhold,
		   cs.issaved as Issaved,
		   cs.sentrequestforactivation as Sentrequestforactivation,
		   cs.ischamberapproved as Ischamberapproved,
		   cs.ischamberrejected as Ischamberrejected,
		   cs.isadminapproved as Isadminapproved,
		   cs.isadminrejected as Isadminrejected,
           ( CASE 
               WHEN cs.issaved IS NULL   
                     OR cs.issaved = 0  THEN 'Draft' 
               	   WHEN NOT EXISTS(SELECT *  FROM   coc_CompetitionPayment(nolock) 
                           WHERE  competitionstagingid = cs.competitionstagingid ) 
						  AND 
						   (SELECT Sum(amount) + ( Sum(amount) * @VatPercentage ) 
					FROM   coc_pricing_log (nolock) 
					WHERE  guid = cs.guid)!='0.00'  
						   THEN 
               'Waiting for uploading payment'
               WHEN Isnull(cs.isactive, 0) = 1 THEN 'Active' 
               WHEN Isnull(cs.isonhold, 0) = 1 THEN 'On Hold' 
               WHEN cs.sentrequestforactivation = 1 THEN 
               'Pending Request for Activation' 
               WHEN Isnull(cs.ischamberapproved, 0) = 1 THEN 
               'Chamber Approval Accepted' 
               WHEN Isnull(cs.ischamberrejected, 0) = 1 THEN 
               'Chamber Approval Rejected' 
               WHEN Isnull(cs.isadminapproved, 0) = 1 THEN 'eCopon Approved' 
               WHEN EXISTS(SELECT * 
                           FROM   coc_competition_staging_rejections(nolock) 
                           WHERE  competitionstagingid = cs.competitionstagingid 
                                  AND approvedorrejectiondate IS NULL) THEN 
               'Resubmitted for approval' 
               WHEN Isnull(cs.isadminrejected, 0) = 1 THEN 'eCopon Rejected' 
		 
               WHEN cs.sentforadminapproval = 1 
                    AND ( cs.isadminapproved = 0 
                           OR cs.isadminapproved IS NULL ) 
                    AND ( cs.isadminrejected = 0 
                           OR cs.isadminrejected IS NULL ) THEN 
               'Waiting eCopon approval' 
               WHEN ( cs.sentforadminapproval = 0 
                       OR cs.sentforadminapproval IS NULL ) THEN 
               'Waiting Request for Approval'

             END )                                                         AS 
           [Status], 
		   ( CASE 
               WHEN cs.issaved IS NULL 
                     OR cs.issaved = 0 THEN '#808080'  --Draft color
			  
			  WHEN NOT EXISTS(SELECT *  FROM   coc_CompetitionPayment(nolock) 
                           WHERE  competitionstagingid = cs.competitionstagingid 
						   ) 
						AND
			   		(SELECT Sum(amount) + ( Sum(amount) * @VatPercentage ) 
					FROM   coc_pricing_log (nolock) 
					WHERE  guid = cs.guid)!='0.00' 
						   THEN 
               '#EF5350'  --'Waiting for uploading payment' 
               WHEN Isnull(cs.isactive, 0) = 1 THEN '#A5D6A7'  --Active
               WHEN Isnull(cs.isonhold, 0) = 1 THEN  '#C8E6C9' --On Hold
               WHEN cs.sentrequestforactivation = 1 THEN '#FFFF66' --Pending Request for Activation  
               WHEN Isnull(cs.ischamberapproved, 0) = 1 THEN '#FFF176 '
               --Chamber Approval Document Accepted 
               WHEN Isnull(cs.ischamberrejected, 0) = 1 THEN  '#EF9A9A'
               --'Chamber Approval Document Rejected' 
               WHEN Isnull(cs.isadminapproved, 0) = 1 THEN  '#FFEE58'
			   --'eCopon Approved' 
               WHEN EXISTS(SELECT * 
                           FROM   coc_competition_staging_rejections(nolock) 
                           WHERE  competitionstagingid = cs.competitionstagingid 
                                  AND approvedorrejectiondate IS NULL) THEN '#FFFF66'
               --'Resubmitted for approval' 
               WHEN Isnull(cs.isadminrejected, 0) = 1 THEN '#FFFF66'  --'eCopon Rejected' 
               WHEN cs.sentforadminapproval = 1 
                    AND ( cs.isadminapproved = 0 
                           OR cs.isadminapproved IS NULL ) 
                    AND ( cs.isadminrejected = 0 
                           OR cs.isadminrejected IS NULL ) THEN 
                '#EF5350'  -- 'eCopon Approval Pending' 
		        WHEN ( cs.sentforadminapproval = 0 
                       OR cs.sentforadminapproval IS NULL ) THEN 
                 '#fccac74a'  --'Pending Request for Approval'
 
             END )                                                         AS 
           [ColorCode],
           (SELECT top 1 csl.resourcevalue 
            FROM   coc_competition_staging_languages(nolock) csl 
            WHERE  csl.languageid = @LanguageID 
                   AND csl.resourcekey = 'ContestName' 
                   AND csl.competitionstagingid = cs.competitionstagingid) AS 
           ContestName, 
           (SELECT Sum(amount) + ( Sum(amount) * @VatPercentage ) 
            FROM   coc_pricing_log (nolock) 
            WHERE  guid = cs.guid)                                         AS 
           InvoiceAmount 
    FROM   coc_competition_staging(nolock) cs 
		left join coc_ecoupons(nolock) ecpn on ecpn.EcouponID = cs.CompetitionId
		left join coc_Notifications cnf (nolock) on ecpn.eserviceid = cnf.eserviceid  
						
	     WHERE  ( @CorporateID = 0 
              OR (cs.corporateid = @CorporateID
			and isnull(cs.IsDeleted,0) = 0 ))
			  -- added above condition for IsDeleted on 21 April 2021 (by shamim)
			  -- Hiding deleted competition from corporate
           AND ( ( @RoleId = 1 
                   AND cs.issaved = 1 
                   AND cs.sentforadminapproval = 1 ) or @RoleId = 3) 
   
 --ORDER  BY cs.isadminrejected
 --          ,cs.isactive
	--	   ,cs.isadminapproved 
	--	   ,cs.CreatedDate desc
	--	   ,cs.ischamberrejected 
	--	   ,cs.ischamberapproved
	--	   ,cs.sentrequestforactivation

    SET @SpResponseStatus=1; 
    SET @SpResponseMessage='Success'; 
    SET @SpErrorDetails='Success'; 
END try 

BEGIN catch 
    SET @SpResponseStatus=0; 
    SET @SpResponseMessage='GenericError'; 
    SET @SpErrorDetails ='ErrorNumber : <' 
                         + CONVERT(NVARCHAR(20), Error_number()) 
                         + '>,                  ErrorSeverity : <' 
                         + CONVERT(NVARCHAR(20), Error_severity()) 
                         + '>,                   ErrorState : <' 
                         + CONVERT(NVARCHAR(20), Error_state()) 
                         + '> ,                   ErrorProcedure : <' + Error_procedure() 
                         + '> ,                   ErrorLine <' 
                         + CONVERT(NVARCHAR(20), Error_line()) 
                         + '>                   ErrorMessage : <' + Error_message() + '>'; 
END catch  
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetDynamicPriceOfSelectedTypes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
CREATE PROCEDURE  [dbo].[Core_Usp_GetDynamicPriceOfSelectedTypes]            
  @CompetitionMethodIDs XML=null,
  @CompetitionTypeIDs XML=null,        
  @ParticipationTypeIDs XML=null,       
  @ServiceIDs XML=null,      
  @CurrentRequestGUID nvarchar(max),      
  @Quantity bigint=null,     
  @ParticipationTypeQuantity int=0,    
  @Vat int,      
  @CorporateID int =null,      
  @LanguageID INTEGER=1,              
  @UserID bigint=3,            
  @RoleID bigint=NULL,            
  @ImpersonationUserID bigint,            
  @SpResponseStatus int out,            
  @SpResponseMessage nvarchar(max) out,            
  @SpErrorDetails nvarchar(max)    out                         
AS             
BEGIN TRY     
   declare @CompetitionBarcodePurchaseId bigint=NULL;    
   declare @LoginCorporateID int;    
    if(@CorporateID is not null AND @CorporateID <>0)    
   begin    
       set @LoginCorporateID=@CorporateID    
   end    
  if(@ParticipationTypeQuantity=0)    
   begin    
       set @ParticipationTypeQuantity=NULL    
   end    
    
--Remove Before isnerting data in to temp table      
-- set PuchaseBarcode flag to false if it is Competition Amount 0.00    
  if exists(select * from Coc_Pricing_log (NOLOCK)  where guid=@CurrentRequestGUID and BarcodePurchaseId is not null )      
  begin    
   update coc_BarcodePurchase set IsCompetitionFeeAapply=0 where BarcodePurchaseId=(select BarcodePurchaseId from Coc_Pricing_log (NOLOCK) where guid=@CurrentRequestGUID and BarcodePurchaseId is not null)    
  end    
  Delete from   Coc_Pricing_log  where guid=@CurrentRequestGUID      
    
 if(@Quantity is null)         
 begin      
 set @Quantity=0      
 end      
--If Admin Login get Price details      
if exists(select * from coc_competition_staging (NOLOCK) where guid = @CurrentRequestGUID)       
begin      
 set @CorporateID=(select CorporateID from coc_competition_staging (NOLOCK) where guid = @CurrentRequestGUID)      
end      
    
  SET NOCOUNT ON;          
  DECLARE @CompetitionAllTypes AS TABLE (Currentguid nvarchar(max),PricingSourceTypeId int,PricingSourceId int,Name nvarchar(200),Amount decimal(18,2), BarcodePurchaseId bigint null)          
  if(@CorporateID is not null)      
  begin        
   if exists(select * from coc_BarcodePurchase(nolock) where IsCompetitionFeeAapply=0 and corporateID=@CorporateID and ApprovedAdminId is not null and  CAST(DATEADD(year, 1, [date]) AS DATE) >= CAST(getdate() AS DATE))    
     begin -- purchase Cost of First Competition for Corporate (after every purchase of barcode) - 0 SAR,      
  select top 1 @CompetitionBarcodePurchaseId=BarcodePurchaseId from coc_BarcodePurchase(nolock)     
  where IsCompetitionFeeAapply=0 and corporateID=@CorporateID and ApprovedAdminId is not null     
  and  CAST(DATEADD(year, 1, [date]) AS DATE) >= CAST(getdate() AS DATE)    
  INSERT INTO @CompetitionAllTypes(currentguid, PricingSourceTypeId,PricingSourceId,Name,Amount,BarcodePurchaseId)       
  select @CurrentRequestGUID,4,      
  (select CompetitionServiceID from coc_CompetitionServiceLanguages(nolock) where LanguageID=1 and Name='Competition'),      
  null,      
  0.00,    
     @CompetitionBarcodePurchaseId    
  if exists(select * from coc_competition_staging (NOLOCK) where guid = @CurrentRequestGUID)       
  begin     
           update coc_BarcodePurchase set IsCompetitionFeeAapply=1 where BarcodePurchaseId=@CompetitionBarcodePurchaseId    
  end      
  end     
   else     --purchase Cost of First Competition for Corporate (after every purchase of barcode) -5000.00 SAR    
      begin     
   INSERT INTO @CompetitionAllTypes(currentguid, PricingSourceTypeId,PricingSourceId,Name,Amount,BarcodePurchaseId)       
   SELECT      
   @CurrentRequestGUID,      
   4, -- Enum  CompetitionMethod=1,CompetitionType=2,CompetitionParticipationType=3,CompetitionService=4             
   (select CompetitionServiceID from coc_CompetitionServiceLanguages (NOLOCK) where LanguageID=1 and Name='Competition'), --         
   null,       
   (SELECT dbo.GetCompetionPriceById(4,(select CompetitionServiceID from coc_CompetitionServiceLanguages (NOLOCK) where LanguageID=1 and Name='Competition'),@Quantity)),    
   NULL                
      
      end      
  end      
  --select * from @CompetitionAllTypes      
 if(@CompetitionMethodIDs is not null)      
 begin      
 INSERT INTO @CompetitionAllTypes(currentguid, PricingSourceTypeId,PricingSourceId,Name,Amount)           
    SELECT      
    @CurrentRequestGUID,      
    1, -- Enum  CompetitionMethod=1,CompetitionType=2,CompetitionParticipationType=3,CompetitionService=4      
     CompetitionMethod.value('(@CompetitionMethodID)', 'INTEGER'),      
  null,      
  (SELECT dbo.GetCompetionPriceById(1,CompetitionMethod.value('(@CompetitionMethodID)', 'INTEGER'),@Quantity))           
   FROM @CompetitionMethodIDs.nodes('/XML/Row') AS Data(CompetitionMethod)    
  end      
  declare @firstPriceSourceId int      
  --For the fist competition the amount will be zero.      
  if exists(select * from @CompetitionAllTypes where PricingSourceTypeId = 1)      
  begin      
       
 select top 1 @firstPriceSourceId= PricingSourceId from @CompetitionAllTypes where PricingSourceTypeId =1    
 if(@firstPriceSourceId is not null)      
 begin      
  update @CompetitionAllTypes set Amount=0.00 where PricingSourceTypeId = 1 and PricingSourceId = @firstPriceSourceId      
 end      
  end      
      
  set @firstPriceSourceId = null      
      
  if(@ParticipationTypeIDs is not null)      
  begin      
    INSERT INTO @CompetitionAllTypes(currentguid, PricingSourceTypeId,PricingSourceId,Name,Amount)       
    SELECT      
    @CurrentRequestGUID,      
    3,-- Enum  CompetitionMethod=1,CompetitionType=2,CompetitionParticipationType=3,CompetitionService=4                
       ParticipationType.value('(@CompetitionParticipationTypeID)', 'INTEGER'),        
    null,      
   (SELECT dbo.GetCompetionPriceById(3,ParticipationType.value('(@CompetitionParticipationTypeID)', 'INTEGER'),@Quantity))                
      FROM @ParticipationTypeIDs.nodes('/XML/Row') AS Data(ParticipationType)         
  end      
      
        
   --For the fist participation type the amount will be zero.      
  if exists(select * from @CompetitionAllTypes where PricingSourceTypeId = 3)      
  begin      
      
 select top 1 @firstPriceSourceId= PricingSourceId from @CompetitionAllTypes where PricingSourceTypeId =3 and PricingSourceId not in(4,19)      
 if(@firstPriceSourceId is not null)      
 begin      
  update @CompetitionAllTypes set Amount=0.00 where PricingSourceTypeId = 3 and PricingSourceId = @firstPriceSourceId      
 end      
    
 -- For SpecialBarcodes    
     declare @DynamicPriceSourceID int    
  declare @DynamicPriceSourceAmount decimal(18,2)    
  if(@ParticipationTypeQuantity is not null)    
  begin    
   select top 1 @DynamicPriceSourceID= PricingSourceId,@DynamicPriceSourceAmount=Amount from @CompetitionAllTypes where PricingSourceTypeId =3 and PricingSourceId=4     
   if(@DynamicPriceSourceID is not null)      
   begin      
    update @CompetitionAllTypes set Amount=(@DynamicPriceSourceAmount*@ParticipationTypeQuantity) where PricingSourceTypeId = 3 and PricingSourceId = @DynamicPriceSourceID      
   end     
  end    
  else    
  begin    
     select top 1 @DynamicPriceSourceID= PricingSourceId,@DynamicPriceSourceAmount=Amount from @CompetitionAllTypes where PricingSourceTypeId =3 and PricingSourceId=4     
   if(@DynamicPriceSourceID is not null)      
   begin      
    update @CompetitionAllTypes set Amount=0.00 where PricingSourceTypeId = 3 and PricingSourceId = @DynamicPriceSourceID      
   end     
  end    
    
   -- For Multi Link    
      set @DynamicPriceSourceID=NULL  
      set @DynamicPriceSourceAmount=NULL 
     if(@ParticipationTypeQuantity is not null)    
  begin    
   select top 1 @DynamicPriceSourceID= PricingSourceId,@DynamicPriceSourceAmount=Amount from @CompetitionAllTypes where PricingSourceTypeId =3 and PricingSourceId=19     
   if(@DynamicPriceSourceID is not null)      
   begin      
    --   if exists(select * from @CompetitionAllTypes where PricingSourceTypeId =3 and PricingSourceId!=19)    
    --begin    
    --  update @CompetitionAllTypes set Amount=(@DynamicPriceSourceAmount*@ParticipationTypeQuantity) where PricingSourceTypeId = 3 and PricingSourceId = @DynamicPriceSourceID      
    --end    
    --   else    
    --begin     
       update @CompetitionAllTypes set Amount=(@DynamicPriceSourceAmount*(@ParticipationTypeQuantity-1)) where PricingSourceTypeId = 3 and PricingSourceId = @DynamicPriceSourceID      
    --end    
   end     
  end    
 end      
     
    
  if(@ServiceIDs is not null)      
  begin      
   INSERT INTO @CompetitionAllTypes(currentguid, PricingSourceTypeId,PricingSourceId,Name,Amount)       
    SELECT      
    @CurrentRequestGUID,      
    4, -- Enum  CompetitionMethod=1,CompetitionType=2,CompetitionParticipationType=3,CompetitionService=4             
       ServiceType.value('(@CompetitionServiceID)', 'INTEGER'),         
    null,       
   (SELECT dbo.GetCompetionPriceById(4,ServiceType.value('(@CompetitionServiceID)', 'INTEGER'),@Quantity))                
    FROM @ServiceIDs.nodes('/XML/Row') AS Data(ServiceType)         
  end   
    
  insert into Coc_Pricing_log([guid],[PricingSourceTypeId],[PricingSourceId],[Amount],BarcodePurchaseId)      
  select Currentguid,PricingSourceTypeId,PricingSourceId,Amount,BarcodePurchaseId from @CompetitionAllTypes    
    
  --Check Weather Multiple Branch Facility is there or not   end      

    --Start Open Quantity Logic 
  --update Competition amount should be 0.00 if competition type is Open Quantity Task No :freedcamp TaskID=38435025  
 -- Enum for(PricingSourceTypeId)  CompetitionMethod=1,CompetitionType=2,CompetitionParticipationType=3,CompetitionService=4  
 -- Enum for(PricingSourceId)  --1=Questions 2=Survey 3=Barcode Reading 4=Open Quantity 5=Special Event  
 --Enum for(PricingSourceId for CompetitionService) 1=Campaign Management 2=New Branch of the Facility 3=Upload Data 4=Prizes Split 5=New customer service user (KIOSK) 6=Mutiple Branches Facility 7=Competition  
 -- 2,4 is for Open Quantity   
 -- 4,7 is for Competition   
 if exists(select guid from Coc_Pricing_log where PricingSourceTypeId=4 and PricingSourceId=(select CompetitionTypeID from coc_CompetitionTypeLanguages (nolock) where LanguageID=1 and Name='Open Quantity')  
 and guid=@CurrentRequestGUID)  
 begin  
  update Coc_Pricing_log set Amount='0.00'   
    where  PricingSourceTypeId=4   
    and PricingSourceId=(select CompetitionServiceID from coc_CompetitionServiceLanguages (nolock) where LanguageID=1 and Name='Competition')  
    and guid=@CurrentRequestGUID  
 end  
    --End Open Quantity Logic    
  
    --Check Weather Multiple Branch Facility is there or not start      
      declare @BranchServicePrice decimal(18,2);       
  declare @BranchPricingSourceId int;       
  declare @NoOfBranchesSelected int;      
  set @NoOfBranchesSelected=(select NoOfBranches from coc_competition_staging (NOLOCK) where guid = @CurrentRequestGUID)      
  set @BranchPricingSourceId=(select CompetitionServiceID from coc_CompetitionServiceLanguages (NOLOCK) where LanguageID=1 and Name='Mutiple Branches Facility')       
     Delete from Coc_Pricing_log where [guid]=@CurrentRequestGUID and PricingSourceTypeId=4 and PricingSourceId=@BranchPricingSourceId      
  set @BranchServicePrice=(SELECT dbo.GetCompetionPriceById(4,@BranchPricingSourceId,@NoOfBranchesSelected));       
  if(@NoOfBranchesSelected>1)      
  begin      
     insert into Coc_Pricing_log([guid],[PricingSourceTypeId],[PricingSourceId],[Amount])      
     SELECT @CurrentRequestGUID,4,@BranchPricingSourceId, @BranchServicePrice      
   end      
  else if(@NoOfBranchesSelected=1)      
   begin      
    insert into Coc_Pricing_log([guid],[PricingSourceTypeId],[PricingSourceId],[Amount])      
     SELECT @CurrentRequestGUID,4,@BranchPricingSourceId, 00.00      
   end        
      
     
        
--Declare  Total and Vat etc        
 declare @CurrencySymbol nvarchar(10);       
 declare @TotalWithoutTax decimal(18,2);       
 declare @VatAmount decimal(18,2);      
 declare @TotalAmount decimal(18,2);       
 set @TotalWithoutTax=(Select Sum(Amount) from Coc_Pricing_log (NOLOCK) where guid=@CurrentRequestGUID);       
 Set @VatAmount=Convert(decimal(18,2),(@TotalWithoutTax/100)*@Vat);       
 set @TotalAmount=(@TotalWithoutTax+@VatAmount);      
 --Currency Symbol      
 if(@LanguageID=1)      
 begin      
 set @CurrencySymbol =(select CurrencySymbol_EN from Coc_Currency (NOLOCK) where CurrencyId=(select BaseCurrencyId from coc_Settings (NOLOCK)))       
 end      
 else      
 begin       
 set @CurrencySymbol =(select CurrencySymbol_AR from Coc_Currency (NOLOCK) where CurrencyId=(select BaseCurrencyId from coc_Settings (NOLOCK)))       
 end      
 select temp.guid,      
 @CurrencySymbol as CurrencySymbol,      
 temp.PricingSourceTypeId,      
 temp.PricingSourceId,      
 (temp.Amount) as Amount,      
 (@TotalWithoutTax)as TotalWithoutTax ,      
 (@TotalAmount) as TotalWithTax ,      
 (@VatAmount) as Vat,      
 (case       
  when temp.PricingSourceTypeId=1 then       
  (select Name from coc_CompetitionMethodLanguages   (NOLOCK)    
  where CompetitionMethodID=temp.PricingSourceId  and LanguageID=@LanguageID)      
  --when temp.PricingSourceTypeId=2 then      
  --(select Name from coc_CompetitionTypeLanguages (NOLOCK)       
  --where CompetitionTypeID=temp.PricingSourceId and LanguageID=@LanguageID)      
  when temp.PricingSourceTypeId=3 then      
  (select Name from coc_CompetitionParticipationTypeLanguages (NOLOCK)        
  where CompetitionParticipationTypeID=temp.PricingSourceId and LanguageID=@LanguageID)      
  when temp.PricingSourceTypeId=4 then      
  (select Name from coc_CompetitionServiceLanguages (NOLOCK)        
  where CompetitionServiceID=temp.PricingSourceId and LanguageID=@LanguageID)      
end      
  ) Name      
 from Coc_Pricing_log  temp (NOLOCK) where temp.guid=@CurrentRequestGUID       
  Set @SpResponseStatus=1;             
  Set @SpResponseMessage='Success';            
  Set @SpErrorDetails='Success';      
               
  END TRY      
  BEGIN CATCH              
  Set @SpResponseStatus=0;             
  Set @SpResponseMessage='GenericError';            
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>,      
   ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>,       
   ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> ,       
   ErrorProcedure : <'+ERROR_PROCEDURE()+'> ,       
   ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'>       
   ErrorMessage : <'+ERROR_MESSAGE()+'>';                
                    
  END CATCH                        
 SET NOCOUNT OFF       
    
    
    
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetDynamicPriceOfSelectedTypes28072021_bckup]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
CREATE PROCEDURE  [dbo].[Core_Usp_GetDynamicPriceOfSelectedTypes28072021_bckup]            
  @CompetitionMethodIDs XML=null,        
  @CompetitionTypeIDs XML=null,        
  @ParticipationTypeIDs XML=null,       
  @ServiceIDs XML=null,      
  @CurrentRequestGUID nvarchar(max),      
  @Quantity bigint=null,     
  @ParticipationTypeQuantity int=0,    
  @Vat int,      
  @CorporateID int =null,      
  @LanguageID INTEGER=1,              
  @UserID bigint=3,            
  @RoleID bigint=NULL,            
  @ImpersonationUserID bigint,            
  @SpResponseStatus int out,            
  @SpResponseMessage nvarchar(max) out,            
  @SpErrorDetails nvarchar(max)    out                         
AS             
BEGIN TRY     
   declare @CompetitionBarcodePurchaseId bigint=NULL;    
   declare @LoginCorporateID int;    
    if(@CorporateID is not null AND @CorporateID <>0)    
   begin    
       set @LoginCorporateID=@CorporateID    
   end    
  if(@ParticipationTypeQuantity=0)    
   begin    
       set @ParticipationTypeQuantity=NULL    
   end    
    
--Remove Before isnerting data in to temp table      
-- set PuchaseBarcode flag to false if it is Competition Amount 0.00    
  if exists(select * from Coc_Pricing_log (NOLOCK)  where guid=@CurrentRequestGUID and BarcodePurchaseId is not null )      
  begin    
   update coc_BarcodePurchase set IsCompetitionFeeAapply=0 where BarcodePurchaseId=(select BarcodePurchaseId from Coc_Pricing_log (NOLOCK) where guid=@CurrentRequestGUID and BarcodePurchaseId is not null)    
  end    
  Delete from   Coc_Pricing_log  where guid=@CurrentRequestGUID      
    
 if(@Quantity is null)         
 begin      
 set @Quantity=0      
 end      
--If Admin Login get Price details      
if exists(select * from coc_competition_staging (NOLOCK) where guid = @CurrentRequestGUID)       
begin      
 set @CorporateID=(select CorporateID from coc_competition_staging (NOLOCK) where guid = @CurrentRequestGUID)      
end      
    
  SET NOCOUNT ON;          
  DECLARE @CompetitionAllTypes AS TABLE (Currentguid nvarchar(max),PricingSourceTypeId int,PricingSourceId int,Name nvarchar(200),Amount decimal(18,2), BarcodePurchaseId bigint null)          
  if(@CorporateID is not null)      
  begin        
   if exists(select * from coc_BarcodePurchase(nolock) where IsCompetitionFeeAapply=0 and corporateID=@CorporateID and ApprovedAdminId is not null and  CAST(DATEADD(year, 1, [date]) AS DATE) >= CAST(getdate() AS DATE))    
     begin -- purchase Cost of First Competition for Corporate (after every purchase of barcode) - 0 SAR,      
  select top 1 @CompetitionBarcodePurchaseId=BarcodePurchaseId from coc_BarcodePurchase(nolock)     
  where IsCompetitionFeeAapply=0 and corporateID=@CorporateID and ApprovedAdminId is not null     
  and  CAST(DATEADD(year, 1, [date]) AS DATE) >= CAST(getdate() AS DATE)    
  INSERT INTO @CompetitionAllTypes(currentguid, PricingSourceTypeId,PricingSourceId,Name,Amount,BarcodePurchaseId)       
  select @CurrentRequestGUID,4,      
  (select CompetitionServiceID from coc_CompetitionServiceLanguages(nolock) where LanguageID=1 and Name='Competition'),      
  null,      
  0.00,    
     @CompetitionBarcodePurchaseId    
  if exists(select * from coc_competition_staging (NOLOCK) where guid = @CurrentRequestGUID)       
  begin     
           update coc_BarcodePurchase set IsCompetitionFeeAapply=1 where BarcodePurchaseId=@CompetitionBarcodePurchaseId    
  end      
  end     
   else     --purchase Cost of First Competition for Corporate (after every purchase of barcode) -5000.00 SAR    
      begin     
   INSERT INTO @CompetitionAllTypes(currentguid, PricingSourceTypeId,PricingSourceId,Name,Amount,BarcodePurchaseId)       
   SELECT      
   @CurrentRequestGUID,      
   4, -- Enum  CompetitionMethod=1,CompetitionType=2,CompetitionParticipationType=3,CompetitionService=4             
   (select CompetitionServiceID from coc_CompetitionServiceLanguages (NOLOCK) where LanguageID=1 and Name='Competition'), --         
   null,       
   (SELECT dbo.GetCompetionPriceById(4,(select CompetitionServiceID from coc_CompetitionServiceLanguages (NOLOCK) where LanguageID=1 and Name='Competition'),@Quantity)),    
   NULL                
      
      end      
  end      
  --select * from @CompetitionAllTypes      
 if(@CompetitionMethodIDs is not null)      
 begin      
 INSERT INTO @CompetitionAllTypes(currentguid, PricingSourceTypeId,PricingSourceId,Name,Amount)           
    SELECT      
    @CurrentRequestGUID,      
    1, -- Enum  CompetitionMethod=1,CompetitionType=2,CompetitionParticipationType=3,CompetitionService=4      
     CompetitionMethod.value('(@CompetitionMethodID)', 'INTEGER'),      
  null,      
  (SELECT dbo.GetCompetionPriceById(1,CompetitionMethod.value('(@CompetitionMethodID)', 'INTEGER'),@Quantity))           
   FROM @CompetitionMethodIDs.nodes('/XML/Row') AS Data(CompetitionMethod)    
  end      
  declare @firstPriceSourceId int      
  --For the fist competition the amount will be zero.      
  if exists(select * from @CompetitionAllTypes where PricingSourceTypeId = 1)      
  begin      
       
 select top 1 @firstPriceSourceId= PricingSourceId from @CompetitionAllTypes where PricingSourceTypeId =1    
 if(@firstPriceSourceId is not null)      
 begin      
  update @CompetitionAllTypes set Amount=0.00 where PricingSourceTypeId = 1 and PricingSourceId = @firstPriceSourceId      
 end      
  end      
      
  set @firstPriceSourceId = null      
      
  if(@CompetitionTypeIDs is not null)      
  begin      
   INSERT INTO @CompetitionAllTypes(currentguid, PricingSourceTypeId,PricingSourceId,Name,Amount)       
    SELECT      
    @CurrentRequestGUID,      
    2,-- Enum  CompetitionMethod=1,CompetitionType=2,CompetitionParticipationType=3,CompetitionService=4                
      CompetitionType.value('(@CompetitionTypeID)', 'INTEGER'),          
   null,      
   (SELECT dbo.GetCompetionPriceById(2,CompetitionType.value('(@CompetitionTypeID)', 'INTEGER'),@Quantity))            
    FROM @CompetitionTypeIDs.nodes('/XML/Row') AS Data(CompetitionType)        
  end      
      
        
   --For the fist competition types the amount will be zero.      
  if exists(select * from @CompetitionAllTypes where PricingSourceTypeId = 2)      
  begin      
       
 select top 1 @firstPriceSourceId= PricingSourceId from @CompetitionAllTypes where PricingSourceTypeId =2  and PricingSourceId!=4   -- added for open Quntity    
 if(@firstPriceSourceId is not null)      
 begin      
  update @CompetitionAllTypes set Amount=0.00 where PricingSourceTypeId = 2 and PricingSourceId = @firstPriceSourceId      
 end      
  end      
      
  set @firstPriceSourceId = null      
      
  if(@ParticipationTypeIDs is not null)      
  begin      
    INSERT INTO @CompetitionAllTypes(currentguid, PricingSourceTypeId,PricingSourceId,Name,Amount)       
    SELECT      
    @CurrentRequestGUID,      
    3,-- Enum  CompetitionMethod=1,CompetitionType=2,CompetitionParticipationType=3,CompetitionService=4                
       ParticipationType.value('(@CompetitionParticipationTypeID)', 'INTEGER'),        
    null,      
   (SELECT dbo.GetCompetionPriceById(3,ParticipationType.value('(@CompetitionParticipationTypeID)', 'INTEGER'),@Quantity))                
      FROM @ParticipationTypeIDs.nodes('/XML/Row') AS Data(ParticipationType)         
  end      
      
        
   --For the fist participation type the amount will be zero.      
  if exists(select * from @CompetitionAllTypes where PricingSourceTypeId = 3)      
  begin      
      
 select top 1 @firstPriceSourceId= PricingSourceId from @CompetitionAllTypes where PricingSourceTypeId =3 and PricingSourceId not in(4,19)      
 if(@firstPriceSourceId is not null)      
 begin      
  update @CompetitionAllTypes set Amount=0.00 where PricingSourceTypeId = 3 and PricingSourceId = @firstPriceSourceId      
 end      
    
 -- For SpecialBarcodes    
     declare @DynamicPriceSourceID int    
  declare @DynamicPriceSourceAmount decimal(18,2)    
  if(@ParticipationTypeQuantity is not null)    
  begin    
   select top 1 @DynamicPriceSourceID= PricingSourceId,@DynamicPriceSourceAmount=Amount from @CompetitionAllTypes where PricingSourceTypeId =3 and PricingSourceId=4     
   if(@DynamicPriceSourceID is not null)      
   begin      
    update @CompetitionAllTypes set Amount=(@DynamicPriceSourceAmount*@ParticipationTypeQuantity) where PricingSourceTypeId = 3 and PricingSourceId = @DynamicPriceSourceID      
   end     
  end    
  else    
  begin    
     select top 1 @DynamicPriceSourceID= PricingSourceId,@DynamicPriceSourceAmount=Amount from @CompetitionAllTypes where PricingSourceTypeId =3 and PricingSourceId=4     
   if(@DynamicPriceSourceID is not null)      
   begin      
    update @CompetitionAllTypes set Amount=0.00 where PricingSourceTypeId = 3 and PricingSourceId = @DynamicPriceSourceID      
   end     
  end    
    
   -- For Multi Link    
      set @DynamicPriceSourceID=NULL  
      set @DynamicPriceSourceAmount=NULL 
     if(@ParticipationTypeQuantity is not null)    
  begin    
   select top 1 @DynamicPriceSourceID= PricingSourceId,@DynamicPriceSourceAmount=Amount from @CompetitionAllTypes where PricingSourceTypeId =3 and PricingSourceId=19     
   if(@DynamicPriceSourceID is not null)      
   begin      
    --   if exists(select * from @CompetitionAllTypes where PricingSourceTypeId =3 and PricingSourceId!=19)    
    --begin    
    --  update @CompetitionAllTypes set Amount=(@DynamicPriceSourceAmount*@ParticipationTypeQuantity) where PricingSourceTypeId = 3 and PricingSourceId = @DynamicPriceSourceID      
    --end    
    --   else    
    --begin     
       update @CompetitionAllTypes set Amount=(@DynamicPriceSourceAmount*(@ParticipationTypeQuantity-1)) where PricingSourceTypeId = 3 and PricingSourceId = @DynamicPriceSourceID      
    --end    
   end     
  end    
 end      
     
    
  if(@ServiceIDs is not null)      
  begin      
   INSERT INTO @CompetitionAllTypes(currentguid, PricingSourceTypeId,PricingSourceId,Name,Amount)       
    SELECT      
    @CurrentRequestGUID,      
    4, -- Enum  CompetitionMethod=1,CompetitionType=2,CompetitionParticipationType=3,CompetitionService=4             
       ServiceType.value('(@CompetitionServiceID)', 'INTEGER'),         
    null,       
   (SELECT dbo.GetCompetionPriceById(4,ServiceType.value('(@CompetitionServiceID)', 'INTEGER'),@Quantity))                
    FROM @ServiceIDs.nodes('/XML/Row') AS Data(ServiceType)         
  end   
    
  insert into Coc_Pricing_log([guid],[PricingSourceTypeId],[PricingSourceId],[Amount],BarcodePurchaseId)      
  select Currentguid,PricingSourceTypeId,PricingSourceId,Amount,BarcodePurchaseId from @CompetitionAllTypes    
    
  --Check Weather Multiple Branch Facility is there or not   end      

    --Start Open Quantity Logic 
  --update Competition amount should be 0.00 if competition type is Open Quantity Task No :freedcamp TaskID=38435025  
 -- Enum for(PricingSourceTypeId)  CompetitionMethod=1,CompetitionType=2,CompetitionParticipationType=3,CompetitionService=4  
 -- Enum for(PricingSourceId)  --1=Questions 2=Survey 3=Barcode Reading 4=Open Quantity 5=Special Event  
 --Enum for(PricingSourceId for CompetitionService) 1=Campaign Management 2=New Branch of the Facility 3=Upload Data 4=Prizes Split 5=New customer service user (KIOSK) 6=Mutiple Branches Facility 7=Competition  
 -- 2,4 is for Open Quantity   
 -- 4,7 is for Competition   
 if exists(select guid from Coc_Pricing_log where PricingSourceTypeId=2 and PricingSourceId=(select CompetitionTypeID from coc_CompetitionTypeLanguages (nolock) where LanguageID=1 and Name='Open Quantity')  
 and guid=@CurrentRequestGUID)  
 begin  
  update Coc_Pricing_log set Amount='0.00'   
    where  PricingSourceTypeId=4   
    and PricingSourceId=(select CompetitionServiceID from coc_CompetitionServiceLanguages (nolock) where LanguageID=1 and Name='Competition')  
    and guid=@CurrentRequestGUID  
 end  
    --End Open Quantity Logic    
  
    --Check Weather Multiple Branch Facility is there or not start      
      declare @BranchServicePrice decimal(18,2);       
  declare @BranchPricingSourceId int;       
  declare @NoOfBranchesSelected int;      
  set @NoOfBranchesSelected=(select NoOfBranches from coc_competition_staging (NOLOCK) where guid = @CurrentRequestGUID)      
  set @BranchPricingSourceId=(select CompetitionServiceID from coc_CompetitionServiceLanguages (NOLOCK) where LanguageID=1 and Name='Mutiple Branches Facility')       
     Delete from Coc_Pricing_log where [guid]=@CurrentRequestGUID and PricingSourceTypeId=4 and PricingSourceId=@BranchPricingSourceId      
  set @BranchServicePrice=(SELECT dbo.GetCompetionPriceById(4,@BranchPricingSourceId,@NoOfBranchesSelected));       
  if(@NoOfBranchesSelected>1)      
  begin      
     insert into Coc_Pricing_log([guid],[PricingSourceTypeId],[PricingSourceId],[Amount])      
     SELECT @CurrentRequestGUID,4,@BranchPricingSourceId, @BranchServicePrice      
   end      
  else if(@NoOfBranchesSelected=1)      
   begin      
    insert into Coc_Pricing_log([guid],[PricingSourceTypeId],[PricingSourceId],[Amount])      
     SELECT @CurrentRequestGUID,4,@BranchPricingSourceId, 00.00      
   end        
      
     
        
--Declare  Total and Vat etc        
 declare @CurrencySymbol nvarchar(10);       
 declare @TotalWithoutTax decimal(18,2);       
 declare @VatAmount decimal(18,2);      
 declare @TotalAmount decimal(18,2);       
 set @TotalWithoutTax=(Select Sum(Amount) from Coc_Pricing_log (NOLOCK) where guid=@CurrentRequestGUID);       
 Set @VatAmount=Convert(decimal(18,2),(@TotalWithoutTax/100)*@Vat);       
 set @TotalAmount=(@TotalWithoutTax+@VatAmount);      
 --Currency Symbol      
 if(@LanguageID=1)      
 begin      
 set @CurrencySymbol =(select CurrencySymbol_EN from Coc_Currency (NOLOCK) where CurrencyId=(select BaseCurrencyId from coc_Settings (NOLOCK)))       
 end      
 else      
 begin       
 set @CurrencySymbol =(select CurrencySymbol_AR from Coc_Currency (NOLOCK) where CurrencyId=(select BaseCurrencyId from coc_Settings (NOLOCK)))       
 end      
 select temp.guid,      
 @CurrencySymbol as CurrencySymbol,      
 temp.PricingSourceTypeId,      
 temp.PricingSourceId,      
 (temp.Amount) as Amount,      
 (@TotalWithoutTax)as TotalWithoutTax ,      
 (@TotalAmount) as TotalWithTax ,      
 (@VatAmount) as Vat,      
 (case       
  when temp.PricingSourceTypeId=1 then       
  (select Name from coc_CompetitionMethodLanguages   (NOLOCK)    
  where CompetitionMethodID=temp.PricingSourceId  and LanguageID=@LanguageID)      
  when temp.PricingSourceTypeId=2 then      
  (select Name from coc_CompetitionTypeLanguages (NOLOCK)       
  where CompetitionTypeID=temp.PricingSourceId and LanguageID=@LanguageID)      
  when temp.PricingSourceTypeId=3 then      
  (select Name from coc_CompetitionParticipationTypeLanguages (NOLOCK)        
  where CompetitionParticipationTypeID=temp.PricingSourceId and LanguageID=@LanguageID)      
  when temp.PricingSourceTypeId=4 then      
  (select Name from coc_CompetitionServiceLanguages (NOLOCK)        
  where CompetitionServiceID=temp.PricingSourceId and LanguageID=@LanguageID)      
end      
  ) Name      
 from Coc_Pricing_log  temp (NOLOCK) where temp.guid=@CurrentRequestGUID       
  Set @SpResponseStatus=1;             
  Set @SpResponseMessage='Success';            
  Set @SpErrorDetails='Success';      
               
  END TRY      
  BEGIN CATCH              
  Set @SpResponseStatus=0;             
  Set @SpResponseMessage='GenericError';            
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>,      
   ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>,       
   ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> ,       
   ErrorProcedure : <'+ERROR_PROCEDURE()+'> ,       
   ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'>       
   ErrorMessage : <'+ERROR_MESSAGE()+'>';                
                    
  END CATCH                        
 SET NOCOUNT OFF       
    
    
    
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetECoponDraws]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Abdul Dayyan
-- Create date: 07 October 2019
-- Description:	Get Ecoupon Draw by EcouponID
-- =============================================
CREATE PROCEDURE [dbo].[core_usp_GetECoponDraws]
	@LanguageID INTEGER = 1,
	@UserID bigint=null,
	@EcoponID INTEGER,
	@RoleID bigint=null,
 	@ImpersonationUserID bigint=null,
	@SpResponseStatus int = null out,
	@SpResponseMessage nvarchar(max) = null out,
	@SpErrorDetails nvarchar(max) = null    out  
AS
 BEGIN TRY

 SELECT ED.ECouponDrawID,EDL1.Value AS Name
  from coc_ECouponDraw ED (NOLOCK)
 INNER JOIN coc_ECouponDrawLanguages EDL1 (NOLOCK) ON ED.ECouponDrawID = EDL1.ECouponDrawID AND EDL1.LanguageID=@LanguageID AND EDL1.ResourceKey='Name' 
 WHERE ED.ECouponID = @EcoponID
 
 Set @SpResponseStatus=1;           
 Set @SpResponseMessage='Success';      
 Set @SpErrorDetails=NULL; 

 END TRY
 
 BEGIN CATCH               
    
 Set @SpResponseStatus=0;           
    
 Set @SpResponseMessage='GenericError';             
    
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorL
ine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';            
    
  END CATCH
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetECoponPrizes]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetECoponPrizes]  
 @LanguageID INTEGER = 1,  
 @UserID bigint=null,  
 @ECouponDrawID bigint,  
 @RoleID bigint=null,  
  @ImpersonationUserID bigint=null,  
 @SpResponseStatus int = null out,  
 @SpResponseMessage nvarchar(max) = null out,  
 @SpErrorDetails nvarchar(max) = null    out    
AS  
 BEGIN TRY  
  
 SELECT EP.ECouponPrizeID,EPL.Value AS Name  
  from coc_ECouponDrawPrizes(nolock) EDP 
  INNER JOIN coc_ECouponPrizes(nolock) EP ON EP.ECouponPrizeID=EDP.ECouponPrizeID
  INNER JOIN coc_ECouponPrizesLanguages(nolock) EPL ON EPL.ECouponPrizeID = EP.ECouponPrizeID AND EPL.LanguageID=@LanguageID AND EPL.ResourceKey='Name'   
 WHERE EDP.ECouponDrawID = @ECouponDrawID  
   
 Set @SpResponseStatus=1;             
 Set @SpResponseMessage='Success';        
 Set @SpErrorDetails=NULL;   
  
 END TRY  
   
 BEGIN CATCH                 
      
 Set @SpResponseStatus=0;             
      
 Set @SpResponseMessage='GenericError';               
      
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';              
      
  END CATCH
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetECoponPrizeWinners]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetECoponPrizeWinners]  
 @LanguageID INTEGER = 1,  
 @UserID bigint=null,  
 @ECouponPrizeID bigint,
 @EVoucherID int,
 @RoleID bigint=null,  
  @ImpersonationUserID bigint=null,  
 @SpResponseStatus int = null out,  
 @SpResponseMessage nvarchar(max) = null out,  
 @SpErrorDetails nvarchar(max) = null    out    
AS  
 BEGIN TRY  
  
 SELECT EW.ECouponWinnerID,EW.ConsumerName,EW.MobileNumber,EW.Email,
 (Case when exists(select * from coc_DistributePrivateVouchers(nolock) DPV where DPV.EVoucherID=@EVoucherID and DPV.ECouponWinnerID=EW.ECouponWinnerID) then 1 else 0 end) IsReceived
  from coc_ECouponWinners(nolock) EW 
 WHERE ECouponPrizeID = @ECouponPrizeID  
   
 Set @SpResponseStatus=1;             
 Set @SpResponseMessage='Success';        
 Set @SpErrorDetails=NULL;   
  
 END TRY  
   
 BEGIN CATCH                 
      
 Set @SpResponseStatus=0;             
      
 Set @SpResponseMessage='GenericError';               
      
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';              
      
  END CATCH
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetEcoponStatistics]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================        
    
-- Author:  <Shaik Layeeqh>        
    
-- Create date: <OCt-10-2019>        
    
-- Description: core_usp_GetEcoponStatistics    
    
-- =============================================        
    
CREATE PROCEDURE [dbo].[core_usp_GetEcoponStatistics]    
 @LanguageID int=1,      
 @UserID bigint=null,     
 @RoleID bigint=null,     
 @ImpersonationUserID bigint=null,     
 @SpResponseStatus int  out,    
 @SpResponseMessage nvarchar(max) out,       
 @SpErrorDetails nvarchar(max) out          
 AS      
  BEGIN TRY       
         
      declare @RegisteredCorporates bigint=null;   
      declare @CompetitionsCompleted bigint=null;     
   declare @TotalWinners bigint=null;    
   declare @CompetitionParticipations bigint=null;    
    declare @RegisteredCorporatesValue nvarchar(50)=null;   
      declare @CompetitionsCompletedValue nvarchar(50)=null;     
   declare @TotalWinnersValue nvarchar(50)=null;    
   declare @CompetitionParticipationsValue nvarchar(50)=null;    
   declare @ValueOfPrizes nvarchar(50)=null;    
  
   if @LanguageID=0      
   begin      
   set @LanguageID=1        
   end        
   set @RegisteredCorporates=(select count(*)  from coc_Corporates(nolock));    
   set @TotalWinners=  (select count(*) from coc_ECouponWinners(nolock));    
   set @CompetitionsCompleted=(Select Count(*) from coc_EServices(nolock)  where  Convert(date,ToDate) < Convert(date,Getdate()));    
   set @CompetitionParticipations=(select Count(*) from coc_ECouponParticipations(nolock))    
   set @ValueOfPrizes='+ 5 Million' --as of now its static    
   set  @RegisteredCorporatesValue =(SELECT dbo.NumbersCountInString(@RegisteredCorporates));  
   set  @CompetitionsCompletedValue =(SELECT dbo.NumbersCountInString(@CompetitionsCompleted));  
   set  @TotalWinnersValue =(SELECT dbo.NumbersCountInString(@TotalWinners));  
   set  @CompetitionParticipationsValue =(SELECT dbo.NumbersCountInString(@CompetitionParticipations));  
   select   @RegisteredCorporatesValue as RegisteredCorporates,    
         @CompetitionsCompletedValue as CompetitionsCompleted,    
          @TotalWinnersValue as TotalWinners,    
    @CompetitionParticipationsValue as CompetitionParticipations,    
    @ValueOfPrizes as ValueOfPrizes    
  
  Set @SpResponseStatus=1;       
  Set @SpResponseMessage='Success';      
  Set @SpErrorDetails=NULL;      
      
  END TRY     
  BEGIN CATCH      
  Set @SpResponseStatus=0;     
  Set @SpResponseMessage='GenericError';       
  Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , Error
Line <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';            
  END CATCH       
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetEnumInformation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[core_usp_GetEnumInformation] @EnumID INTEGER    =NULL
,                                            @LanguageID INTEGER
AS
	SET NOCOUNT ON
	SELECT EV.EnumValueID
	,      SL.EnumValue   [EnumValue]
	,      [EnumID]      
	,      [IsActive]    
	FROM       [coc_EnumValues]       EV(NOLOCK)
	INNER JOIN coc_EnumValueLanguages SL(NOLOCK) ON EV.EnumValueID=SL.EnumValueID AND SL.LanguageID = @LanguageID
	WHERE (@EnumID IS NULL OR EnumID = @EnumID) AND EV.IsActive=1
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetEServicesInformation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[core_usp_GetEServicesInformation]        
  @EServiceID INTEGER=NULL,        
  @CorporateID INTEGER=NULL,        
  @ServiceNumber [Code]=NULL,        
  @ServiceTypeID INTEGER=NULL,        
  @ServiceSubTypeID INTEGER=NULL,        
  @CompetitionID INTEGER=NULL,        
  @IsBarcodeUsed BIT=0,        
  @LanguageID INTEGER=1,        
  @IsExtension BIT=0,        
  @IsActive BIT=NULL ,  
  @UserID bigint=NULL,
  @RoleID bigint=NULL,
  @ImpersonationUserID bigint=NULL,
  @SpResponseStatus int OUTPUT,
  @SpResponseMessage nvarchar(max) OUTPUT,
  @SpErrorDetails nvarchar(max) OUTPUT                 
AS         
SET NOCOUNT ON         
if @CorporateID = -1        
 select @CorporateID = null        
  DECLARE @Counter INTEGER        
  DECLARE @UnReadCount INTEGER        
  DECLARE @ReadCount INTEGER        
  DECLARE @TotalNotifications INTEGER        
  DECLARE @CSUserID INTEGER        
  DECLARE @RetailOutlet INTEGER        
        
  DECLARE @Notifications AS TABLE        
  (        
   ClientId INTEGER IDENTITY PRIMARY KEY,        
   NotificationCount INTEGER,        
   --NotificationSendID INTEGER,        
   EServiceID INTEGER,        
   NotificationRead INTEGER NULL,        
   NotificationUnRead INTEGER NULL         
  )        
  DECLARE @EServiceNotifications AS TABLE        
  (        
   EServiceID INTEGER,        
   ServiceNumber [NullCode],        
   EService [Remark],        
   ServiceDate DATETIME,         
   FromDate VARCHAR(12),        
   ToDate VARCHAR(12),        
   CorporateID INTEGER,        
   ServiceTypeID INTEGER,        
   ServiceSubTypeID INTEGER,        
   CompetitionID INTEGER,        
   MessagePackID INTEGER,        
   IsActive BIT NOT NULL DEFAULT 0,        
   IsBarcodeUsed BIT,        
   HasCity BIT,        
   HasGender BIT,        
   HasAgeGroup BIT,        
   ResendCount BIT,        
   NotificationCount INTEGER,        
   PackageAmount [NullAmount],         
   MessagePackType [NullDescription],        
   InvoiceNumber [NullCode],        
   CanResend BIT        
  )        
  BEGIN TRY   
     BEGIN TRANSACTION GetEServicesInformation; 
		Set @SpResponseStatus=1; 
		Set @SpResponseMessage='Success';
		Set @SpErrorDetails=NULL;        
        
  INSERT INTO @Notifications(NotificationCount,EServiceID)--NotificationSendID)        
   SELECT  COUNT(ISNULL(CF.ConsumerNotificationID,0)) [NotificationCount],ES.EServiceID          
    FROM coc_Notifications NF(NOLOCK)        
     INNER JOIN coc_NotificationSends NS(NOLOCK) ON NF.NotificationID = NS.NotificationID  AND NS.SendingType != 4        
     INNER JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID=NF.EServiceID        
     INNER JOIN coc_ConsumerNotifications CF(NOLOCK) ON NS.NotificationSendID=CF.NotificationSendID         
    WHERE (@CorporateID IS NULL OR ES.CorporateID = @CorporateID ) AND (@EServiceID IS NULL OR ES.EServiceID=@EServiceID)         
    GROUP BY NS.NotificationID,NS.SendingDate,NS.SendingType,ES.EServiceID         
    ORDER BY ES.EServiceID   DESC         
           
  SELECT @Counter=MIN(ISNULL(EServiceID,0)) FROM @Notifications        
  WHILE @Counter>0        
          
        
   SELECT @UnReadCount=COUNT(CN.HasChecked) FROM coc_ConsumerNotifications(NOLOCK) CN        
    INNER JOIN coc_NotificationSends NS(NOLOCK) ON CN.NotificationSendID=NS.NotificationSendID AND NS.SendingType !=4        
    INNER JOIN coc_Notifications NF(NOLOCK) ON NS.NotificationID=NF.NotificationID AND NF.EServiceID=@Counter        
   WHERE CN.HasChecked=0          
        
   SELECT @ReadCount=COUNT(HasChecked) FROM coc_ConsumerNotifications CN(NOLOCK)         
    INNER JOIN coc_NotificationSends NS(NOLOCK) ON CN.NotificationSendID=NS.NotificationSendID  AND NS.SendingType !=4        
    INNER JOIN coc_Notifications NF(NOLOCK) ON  NF.NotificationID=NS.NotificationID AND NF.EServiceID=@Counter        
   WHERE HasChecked=1         
            
   UPDATE @Notifications        
    SET NotificationRead = ISNULL(@ReadCount,0),        
     NotificationUnRead = ISNULL(@UnReadCount,0),        
     NotificationCount = ISNULL(@ReadCount,0)+ISNULL(@UnReadCount,0)         
   WHERE EServiceID=@Counter        
   SELECT @Counter=MIN(ISNULL(EServiceID,0)) FROM @Notifications WHERE EServiceID> @Counter        
      
 --Tables[0] EServices        
 SELECT ES.EServiceID,ES.ServiceNumber,EL.EService+'-'+ES.ServiceNumber [EService],ES.ServiceDate, CONVERT(VARCHAR(12),ES.FromDate,103) [FromDate],CONVERT(VARCHAR(12),ES.ToDate,103) [ToDate],        
  ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.MessagePackTypeID [MessagePackID],ES.IsActive,ES.IsBarcodeUsed,MT.HasCity,        
  MT.HasGender,MT.HasAgeGroup,MT.ResendCount,EI.NotificationCount,EI.PackageAmount [PackageAmount], MT.MessagePackType [MessagePackType],EI.InvoiceNumber,MT.CanResend --EI.        
   FROM coc_EServices ES(NOLOCK)         
    left JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID        
    left JOIN coc_EServiceInvoices  EI(NOLOCK) ON EI.EServiceID=ES.EServiceID AND EI.IsExtension=@IsExtension        
    left JOIN coc_MessagePackTypes MT(NOLOCK) ON ES.MessagePackTypeID=MT.MessagePackTypeID        
   WHERE(@EServiceID IS NULL OR ES.EServiceID=@EServiceID) AND        
    (@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND        
    (@ServiceTypeID IS NULL OR ES.ServiceTypeID=@ServiceTypeID) AND        
    (@ServiceNumber IS NULL OR ES.ServiceNumber=@ServiceNumber) AND        
    (@ServiceSubTypeID IS NULL OR ES.ServiceSubTypeID=@ServiceSubTypeID) AND        
    (@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID) AND        
    (@IsBarcodeUsed IS NULL OR ES.IsBarcodeUsed=@IsBarcodeUsed) AND          
    (@IsActive IS NULL OR ES.IsActive=@IsActive) --AND ES.IsPaymentDone=1        
         
 --Tables[1] EServiceLocations        
 SELECT CASE WHEN EL.EServiceLocationID IS NULL THEN 0 ELSE 1 END [Selected],RO.RetailOutletID, RL.RetailOutlet [Outlet]        
  FROM coc_RetailOutlets RO(NOLOCK)        
   INNER JOIN coc_RetailOutletLanguages RL(NOLOCK) ON RO.RetailOutletID=RL.RetailOutletID AND RO.CorporateID=@CorporateID AND RL.LanguageID=@LanguageID        
 LEFT JOIN coc_EServiceLocations EL(NOLOCK) ON RO.RetailOutletID = EL.RetailOutletID AND EServiceID=@EServiceID        
        
 --Tables[2] Notifications        
 SELECT CN.EServiceID,CS.NotificationSendID,ISNULL(NF.NotificationRead ,0)+ISNULL(NF.NotificationUnRead,0) [NotificationSend], NF.NotificationRead ,--(ISNULL(CN.NotificationRead,0)) [NotificationRead] ,        
  ISNULL(ResendCounter,0) [Resent] ,NF.NotificationUnRead          
  FROM coc_Notifications CN(NOLOCK) --CN.EServiceID,        
   INNER JOIN coc_NotificationSends CS(NOLOCK) ON CN.NotificationID=CS.NotificationID AND CS.SendingType !=4        
   INNER JOIN coc_ConsumerNotifications CF(NOLOCK) ON CS.NotificationSendID=CF.NotificationSendID         
   INNER JOIN @Notifications NF ON NF.EServiceID=CN.EServiceID        
  WHERE (@EServiceID IS NULL OR CN.EServiceID=@EServiceID)        
          
 ----Tables[3] CouponEServices        
 SELECT ES.EServiceID,ES.ServiceNumber,EL.EService+'-'+ES.ServiceNumber [EService],CONVERT(VARCHAR(12),ES.ServiceDate,103) ServiceDate,CONVERT(VARCHAR(12),ES.FromDate,103) FromDate,CONVERT(VARCHAR(12),ES.ToDate,103) ToDate,        
   ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.MessagePackTypeID [MessagePackID],ES.IsActive,ES.IsBarcodeUsed         
   FROM coc_EServices ES(NOLOCK)         
   INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID        
 WHERE ES.EServiceID NOT IN(SELECT EC.EServiceID FROM coc_ECoupons EC(NOLOCK)) AND ES.CompetitionID IS NOT NULL AND        
    (@CorporateID IS NULL OR ES.CorporateID=@CorporateID)  AND ES.IsPaymentDone=1        
          
 ----Tables[4] ECoupons        
 SELECT COUNT(ES.EServiceID) [AvailableCount],EL.EService+'-'+ES.ServiceNumber  [EcouponName], ES.EServiceID ,NF.NotificationID        
  FROM coc_EServices ES(NOLOCK)        
   INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID        
   INNER JOIN coc_Notifications NF(NOLOCK) ON ES.EServiceID=NF.EServiceID        
   INNER JOIN coc_EServiceBarcodes EB(NOLOCK) ON NF.NotificationID=EB.NotificationID        
 WHERE ES.ServiceTypeID=@ServiceTypeID AND         
  (@CompetitionID IS NULL OR CompetitionID=@CompetitionID) AND         
  (@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND        
  EB.IsUsed=0 AND (@EServiceID IS NULL OR ES.EServiceID=@EServiceID)  AND ES.IsPaymentDone=1        
  GROUP BY ES.EServiceID,NF.NotificationID,EL.EService,ES.ServiceNumber         
          
 SELECT @CSUserID=CU.CorporateID,@RetailOutlet=RetailOutletID        
  FROM coc_CorporateUsers(NOLOCK) CU        
 WHERE CU.UserID=@CorporateID        
        
    --Tables[5] EServiceCoupons         
 SELECT EC.EServiceID,EC.ECouponID, EL.EService [EcouponName]        
  FROM coc_ECoupons EC(NOLOCK)        
   LEFT JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  AND ES.IsPaymentDone=1        
   INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID        
   INNER JOIN coc_ECouponOutlets EO(NOLOCK) ON EC.ECouponID=EO.ECouponID AND EO.RetailOutletID=@RetailOutlet        
 WHERE EntryTypeID=44 AND EC.IsActive=1 AND ES.CorporateID=@CSUserID AND  CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)        
        
 ----Table[6] EServiceLanguages        
  SELECT EL.EServiceID,EL.EService,EL.LanguageID FROM coc_EServiceLanguages(NOLOCK) EL WHERE EServiceID=@EServiceID        
        
 ----Table[7] ShowCount        
  SELECT SetupValue [ShowCount] fROM COC_SystemSetups (NOLOCK) WHERE SystemSetupID=502        
        
	SELECT @TotalNotifications=SUM(NotificationCount) FROM coc_EServiceInvoices(NOLOCK) WHERE EServiceID=@EServiceID        
	--Tables[8] EServicesNotification        
	INSERT INTO @EServiceNotifications        
  SELECT ES.EServiceID,ES.ServiceNumber,EL.EService+'-'+ES.ServiceNumber [EService],ES.ServiceDate, CONVERT(VARCHAR(12),ES.FromDate,103) [FromDate],CONVERT(VARCHAR(12),ES.ToDate,103) [ToDate],        
   ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.MessagePackTypeID [MessagePackID],ES.IsActive,ES.IsBarcodeUsed,MT.HasCity,        
   MT.HasGender,MT.HasAgeGroup,MT.ResendCount,0 ,EI.PackageAmount [PackageAmount], MT.MessagePackType [MessagePackType],EI.InvoiceNumber,MT.CanResend --,sUM(EV.NotificationCount)         
    FROM coc_EServices ES(NOLOCK)         
     INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID        
     INNER JOIN coc_EServiceInvoices  EI(NOLOCK) ON EI.EServiceID=ES.EServiceID AND EI.IsExtension=@IsExtension        
     INNER JOIN coc_MessagePackTypes MT(NOLOCK) ON ES.MessagePackTypeID=MT.MessagePackTypeID        
     --INNER JOIN coc_EServiceInvoices(NOLOCK) EV ON EV.EServiceID=ES.EServiceID         
    WHERE(@EServiceID IS NULL OR ES.EServiceID=@EServiceID) AND        
     (@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND        
     (@ServiceTypeID IS NULL OR ES.ServiceTypeID=@ServiceTypeID) AND        
     (@ServiceNumber IS NULL OR ES.ServiceNumber=@ServiceNumber) AND        
     (@ServiceSubTypeID IS NULL OR ES.ServiceSubTypeID=@ServiceSubTypeID) AND        
     (@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID) AND        
     (@IsBarcodeUsed IS NULL OR ES.IsBarcodeUsed=@IsBarcodeUsed) AND          
     (@IsActive IS NULL OR ES.IsActive=@IsActive)        
  SELECT  ES.EServiceID,ES.ServiceNumber,ES.EService,ES.ServiceDate,ES.FromDate,ES.ToDate,ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.MessagePackID,        
   ES.IsActive,ES.IsBarcodeUsed,ES.HasCity,ES.HasGender,ES.HasAgeGroup,ES.ResendCount,ES.PackageAmount, ES.MessagePackType,ES.InvoiceNumber,ES.CanResend,SUM(EV.NotificationCount)  AS [NotificationCount]        
    FROM @EServiceNotifications ES        
     INNER JOIN coc_EServiceInvoices(NOLOCK) EV ON EV.EServiceID=ES.EServiceID         
   GROUP BY ES.EServiceID,ES.ServiceNumber,ES.EService,ES.ServiceDate,ES.FromDate,ES.ToDate,ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.MessagePackID,        
   ES.IsActive,ES.IsBarcodeUsed,ES.HasCity,ES.HasGender,ES.HasAgeGroup,ES.ResendCount,ES.PackageAmount, ES.MessagePackType,ES.InvoiceNumber,ES.CanResend    
   
   COMMIT TRANSACTION  GetEServicesInformation        
            
  END TRY            
  BEGIN CATCH  
  ROLLBACK TRANSACTION GetEServicesInformation
  Set @SpResponseStatus=0; 
  Set @SpResponseMessage='GenericError';
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';              
                
  END CATCH            
 SET NOCOUNT OFF            
        
        
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetEVoucherDetailsByServiceID]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ======================================================================
-- Author     :  Shaik  use eCoponTest2019July14
-- Create date    :  28-Aug-2017
-- Description    :  Get Voucher Details By Service ID  GetEVoucherDetailsByServiceID 166,1
-- ======================================================================
CREATE PROCEDURE [dbo].[core_usp_GetEVoucherDetailsByServiceID] @EServiceID int                 
,                                                       @LanguageID int                 =1
,                                                       @UserID bigint                  =null
,                                                       @RoleID bigint                  =null
,                                                       @ImpersonationUserID bigint     =null
,                                                       @SpResponseStatus int            OUTPUT
,                                                       @SpResponseMessage nvarchar(max) OUTPUT
,                                                       @SpErrorDetails nvarchar(max)    OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @EVoucherID Int
	DECLARE @EVoucherCategoryID Int
	DECLARE @Type Int
	DECLARE @DiscountType int = null;
	DECLARE @DiscountAmount decimal(18,2)=null;
	DECLARE @DiscountPercentage decimal(18,2)=null;
	DECLARE @OriginalPrice decimal(18,2)=null;
	DECLARE @PriceAfterDiscount decimal(18,2)=null;
	DECLARE @PromotionAmount decimal(18,2)=null;
	DECLARE @VoucherAmount decimal(18,2)=null;
	DECLARE @NumberOfVouchers Int
	DECLARE @EVoucher AS TABLE ( EVoucherID         INTEGER
	,                            EVoucherCategoryID INTEGER
	,                            [Type]             integer
	,                            DiscountType       int
	,                            DiscountAmount     decimal(18,2)
	,                            DiscountPercentage decimal(18,2)
	,                            OriginalPrice      decimal(18,2)
	,                            PriceAfterDiscount decimal(18,2)
	,                            PromotionAmount    decimal(18,2)
	,                            VoucherAmount      decimal(18,2)
	,                            NumberOfVouchers   Int )

	-- Table [0] - Voucher Details


	Begin Try
	BEGIN TRANSACTION GetEVoucherDetailsByServiceID;
	INSERT INTO @EVoucher
	SELECT EVoucherID                   
	,      ISNULL( EVoucherCategoryID,0) AS EVoucherCategoryID
	,      [Type]                       
	,      DiscountType                 
	,      DiscountAmount               
	,      DiscountPercentage           
	,      OriginalPrice                
	,      PriceAfterDiscount           
	,      PromotionAmount              
	,      VoucherAmount                
	,      NumberOfVouchers             
	FROM coc_EVoucher (NOLOCK)
	WHERE EServiceID = @EServiceID
	SELECT @EVoucherID = EVoucherID
	,      @EVoucherCategoryID = EVoucherCategoryID
	,      @Type = [Type]
	,      @DiscountType =DiscountType
	,      @DiscountAmount =DiscountAmount
	,      @DiscountPercentage=DiscountPercentage
	,      @OriginalPrice =OriginalPrice
	,      @PriceAfterDiscount =PriceAfterDiscount
	,      @PromotionAmount =PromotionAmount
	,      @VoucherAmount =VoucherAmount
	,      @NumberOfVouchers =NumberOfVouchers
	FROM @EVoucher


	SELECT EVoucherID
	,      EVoucherCategoryID
	,      [Type]
	,      DiscountType
	,      DiscountAmount
	,      DiscountPercentage
	,      OriginalPrice
	,      PriceAfterDiscount
	,      PromotionAmount
	,      VoucherAmount
	,      NumberOfVouchers
	FROM @EVoucher

	--Table[1]  --

	SELECT CO.EmailID                                            
	,      (case when @LanguageID=1 then CO.CorporateName
	                                else CO.CorporateNameAR end )    FirstName
	,      isnull(CO.LastName,'')                                    LastName
	,      ELN.ResourceValue                                      AS VoucherName
	,      EL.ResourceValue                                       AS Description
	,      ES.FromDate                                           
	,      ES.ToDate                                             
	,      EN.NotificationCount                                  
	,      EC.EVoucherCategoryID                                 
	,      EL.LanguageID                                         
	FROM       coc_EVoucher          EC(NOLOCK) 
	left JOIN  coc_EServices         ES(NOLOCK)  ON EC.EServiceID = ES.EServiceID
	left JOIN  coc_Corporates        CO(NOLOCK)  ON CO.CorporateID = ES.CorporateID
	left JOIN coc_EVoucherLanguages EL(NOLOCK)  ON EL.EVoucherID=@EVoucherID AND EL.ResourceKey = 'Description'
	left JOIN --AND EL.LanguageID = @LanguageID INNER JOIN
		       coc_EVoucherLanguages ELN(NOLOCK) ON ELN.EVoucherID=@EVoucherID AND ELN.ResourceKey = 'VoucherName' AND ELN.LanguageID = @LanguageID
	left JOIN  coc_Notifications     EN(NOLOCK)  ON EN.EServiceID=ES.EServiceID


	WHERE EC.EVoucherID=@EVoucherID

	--Table[2]--

	SELECT EVoucherImagesID    
	,      IsPrimaryImage      
	,      ISNULL(ImageFile,'') AS ImageFile
	FROM coc_EVoucherImages (NOLOCK)
	WHERE EVoucherID = @EVoucherID
	--Table[3]--
	SELECT ELN.ResourceValue     AS VoucherName
	,      EL.ResourceValue      AS Description
	,      ES.FromDate          
	,      ES.ToDate            
	,      EN.NotificationCount 
	,      EC.EVoucherCategoryID
	,      EL.LanguageID        
	FROM      coc_EVoucher          EC(NOLOCK) 
	left JOIN coc_EServices         ES(NOLOCK)  ON EC.EServiceID = ES.EServiceID
	left JOIN coc_EVoucherLanguages EL(NOLOCK)  ON EL.EVoucherID=@EVoucherID AND EL.ResourceKey = 'WhatYouGet'
	left JOIN --AND EL.LanguageID = @LanguageID INNER JOIN
		      coc_EVoucherLanguages ELN(NOLOCK) ON ELN.EVoucherID=@EVoucherID AND ELN.ResourceKey = 'WhatYouGet' AND ELN.LanguageID = @LanguageID
	left JOIN coc_Notifications     EN(NOLOCK)  ON EN.EServiceID=ES.EServiceID
	WHERE EC.EVoucherID=@EVoucherID

	Set @SpResponseStatus=1;
	Set @SpResponseMessage='Success';
	Set @SpErrorDetails='Success';
	COMMIT TRANSACTION GetEVoucherDetailsByServiceID
	END TRY
	BEGIN CATCH
	ROLLBACK TRANSACTION GetEVoucherDetailsByServiceID
	Set @SpResponseStatus=0;
	Set @SpResponseMessage='GenericError';
	Set @SpErrorDetails ='ErrorNumber : <' +Convert(varchar,ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(varchar,ERROR_SEVERITY())+'>, ErrorState : <'+Convert(varchar,ERROR_STATE())+'> , ErrorProcedure : <'+Convert(varchar,ERROR_PROCEDURE())+'> , ErrorLine <'+Convert(varchar,ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';


	END CATCH
	SET NOCOUNT OFF

END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetEVoucherDetailsByVoucherID]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[core_usp_GetEVoucherDetailsByVoucherID]                    
@EVoucherID int,                    
@LanguageID int                    
AS                    
BEGIN                    
 SET NOCOUNT ON;                    
  BEGIN                    
  SELECT EV.EVoucherID,ELN.ResourceValue as VoucherName  -- + '-'+Convert(nvarchar(max), EV.EServiceID) as VoucherName          
  ,ISNULL( EV.EVoucherCategoryID,0) AS CategoryID  ,ISNULL( EV.VoucherTypeID,0) AS VoucherTypeID, EV.Type,          
  DescriptionEn.ResourceValue as DescriptionEnglish ,          
  DescriptionAr.ResourceValue as DescriptionArabic,          
  WhatYouGetEn.ResourceValue as WhatYouGetEnglish,          
  WhatYouGetAr.ResourceValue as WhatYouGetArabic,          
  WhatYouBuyEn.ResourceValue as WhatYouBuyEnglish,          
  WhatYouBuyAr.ResourceValue as WhatYouBuyArabic,          
  CONVERT(varchar(15),(case when EV.FromTime is null then EV.FromTime else   Left(CONVERT(varchar(15),EV.FromTime),5) end)) As FromTime,           
  CONVERT(varchar(15),(case when EV.ToTime is null then EV.ToTime else Left(CONVERT(varchar(15),EV.ToTime),5) end)) As ToTime,          
     EV.SelectedDays,          
     EV.VoucherAmount,          
     EV.DiscountAmount ,                  
     EV.PromotionAmount,          
     EV.DiscountPercentage ,                  
     EV.OriginalPrice as OriginalAmount ,                  
     EV.PriceAfterDiscount as FinalPrice,       
  EV.CurrentStatus,
  isnull(EV.AcceptExtraDiscount ,0) as AcceptExtraDiscount
    FROM  coc_EVoucher EV(NOLOCK)       
 left JOIN coc_EServices ES(NOLOCK) ON EV.EServiceID = ES.EServiceID       
 left JOIN coc_EVoucherLanguages DescriptionEn(NOLOCK) ON  DescriptionEn.EVoucherID=@EVoucherID AND DescriptionEn.ResourceKey = 'Description' and DescriptionEn.LanguageID=1        
 left JOIN coc_EVoucherLanguages DescriptionAr(NOLOCK) ON  DescriptionAr.EVoucherID=@EVoucherID AND DescriptionAr.ResourceKey = 'Description' and DescriptionAr.LanguageID=2        
 left JOIN coc_EVoucherLanguages ELN(NOLOCK) ON  ELN.EVoucherID=@EVoucherID AND ELN.ResourceKey = 'VoucherName' AND ELN.LanguageID = @LanguageID       
 left JOIN coc_EVoucherLanguages WhatYouGetEn(NOLOCK) ON  WhatYouGetEn.EVoucherID=@EVoucherID AND WhatYouGetEn.ResourceKey = 'WhatYouGet' AND WhatYouGetEn.LanguageID =1        
 left JOIN coc_EVoucherLanguages WhatYouGetAr(NOLOCK) ON  WhatYouGetAr.EVoucherID=@EVoucherID AND WhatYouGetAr.ResourceKey = 'WhatYouGet' AND WhatYouGetAr.LanguageID = 2        
 left JOIN coc_EVoucherLanguages WhatYouBuyEn(NOLOCK) ON  WhatYouBuyEn.EVoucherID=@EVoucherID AND WhatYouBuyEn.ResourceKey = 'WhatYouBuy' AND WhatYouBuyEn.LanguageID =1        
 left JOIN coc_EVoucherLanguages WhatYouBuyAr(NOLOCK) ON  WhatYouBuyAr.EVoucherID=@EVoucherID AND WhatYouBuyAr.ResourceKey = 'WhatYouBuy' AND WhatYouBuyAr.LanguageID = 2       
    WHERE EV.EVoucherID=@EVoucherID                        
  END                    
END
GO
/****** Object:  StoredProcedure [dbo].[core_Usp_GetEVoucherImageInfoById]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================================================  
-- Author      : Rafeeq  
-- Create date : 03-Sep-2019  
-- Description : Get Voucher Image details by Image Id  
-- =============================================================================  
CREATE PROCEDURE [dbo].[core_Usp_GetEVoucherImageInfoById]  
 @EVoucherImageID   INTEGER  
AS  
BEGIN  
 SET NOCOUNT ON;  
  
    
  BEGIN  
   SELECT  
    EVoucherImagesID, ImageFile, IsPrimaryImage  
   FROM  
    coc_EVoucherImages (NOLOCK)  
   WHERE  
    EVoucherImagesID = @EVoucherImageID    
  END  
  
END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetEVoucherLocations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[core_usp_GetEVoucherLocations]  
  @EVoucherID int,              
  @LanguageID int             
 AS                
 SET NOCOUNT ON                
 BEGIN                  
  BEGIN TRY               
    select evl.VoucherLocationID,evl.CityID,cl.City,        
 (select Location from coc_eVoucherLocationLanguages (NOLOCK) where VoucherLocationID=evl.VoucherLocationID and LanguageID=1) as LocationEN,        
 (select Location from coc_eVoucherLocationLanguages (NOLOCK) where VoucherLocationID=evl.VoucherLocationID and LanguageID=2) as LocationAR,        
 evl.MapLink ,    
 evl.PlusCode   
 from coc_EvoucherLocations evl  (NOLOCK)       
 left join coc_CityLanguages cl (NOLOCK) on cl.CityID=evl.CityID        
 where cl.LanguageID=@LanguageID and evl.EVoucherID=@EVoucherID        
           
  END TRY                
  BEGIN CATCH              
  print(Error_line())              
  SELECT Error_line()              
  print(Error_message())              
   SELECT Error_message()                
  END CATCH                
 SET NOCOUNT OFF                 
 END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetEVoucherPromoCodeDetails]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[core_usp_GetEVoucherPromoCodeDetails]                      
@EVoucherID int,                      
@LanguageID int                      
AS                      
BEGIN                      
 SET NOCOUNT ON;                      
  BEGIN                      
  Select EC.EVoucherCategoryID,
  (Case when @LanguageID=2 then C.CategoryNameAR else C.CategoryName end) CategoryName,
  convert(varchar(10),EC.Discount) Discount,
  EC.ImageName,
  EC.Description DescriptionEnglish,
  EC.DescriptionAR DescriptionArabic
  from coc_core_EVoucherCategories(nolock) EC
  inner join coc_core_Category(nolock) C on C.CategoryID=EC.CategoryID
    WHERE EC.EVoucherID=@EVoucherID and EC.IsDeleted=0                         
  END                      
END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetEVoucherTermsData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetEVoucherTermsData]  
  
 @EVoucherID INTEGER,         
 @UserID INTEGER=null,    
 @LanguageID int=1,    
 @RoleID bigint=null,  
 @ImpersonationUserID bigint=null,  
 @SpResponseStatus int OUTPUT,  
 @SpResponseMessage nvarchar(500) OUTPUT,  
 @SpErrorDetails nvarchar(500) OUTPUT  
AS   
BEGIN TRY  
  Set @SpResponseStatus=1;   
  Set @SpResponseMessage='Success';  
  Set @SpErrorDetails=NULL;  
   select     
      (select ResourceValue from coc_EVoucherLanguages (NOLOCK) where EVoucherID=@EVoucherID and ResourceKey='Terms' and LanguageID=1) as EnglishTerms,    
   (select ResourceValue from coc_EVoucherLanguages (NOLOCK) where EVoucherID=@EVoucherID and ResourceKey='Terms' and LanguageID=2) as ArabicTerms    
END TRY    
BEGIN CATCH      
  Set @SpResponseStatus=0;   
  Set @SpResponseMessage='GenericError';  
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';  
END CATCH;
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetGeneralNotificationById]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_GetGeneralNotificationById]  
  @GeneralNotificationId bigint 
 ,@LanguageID int=1           
 ,@UserID int=null               
 ,@RoleID int=null                
 ,@ImpersonationUserID bigint=null                 
 ,@SpResponseStatus int out               
 ,@SpResponseMessage nvarchar(max) out                 
 ,@SpErrorDetails nvarchar(max)    out                   
 AS                    
 SET NOCOUNT ON                   
 BEGIN                     
  BEGIN TRY   

       Select 
	     GN.GeneralNotificationId
	    ,CONVERT(nvarchar, GN.CreatedDate, 23) as PushNotificationDate 
		,Convert(nvarchar,GN.ScheduleFromDate,23) as ScheduleFromDate
		,CONVERT(nvarchar,GN.ScheduleToDate,23)as ScheduleToDate 
	    ,GN.IsActive
        ,GN.IsBrodaCast
		,GN.CreatedBy
		,GN.IsSendPushNotification
		,GN.IsShowAsAppNotification
		,(Select [Subject]  from coc_NotificationSendLanguages(NOLOCK) where  LanguageID=1 and NotificationSendID=(Select NotificationSendID from coc_NotificationSends(NOLOCK) where GeneralNotificationId=@GeneralNotificationId)) as MessageHeadingEN
	    ,(Select [Subject]  from coc_NotificationSendLanguages(NOLOCK) where  LanguageID=2 and NotificationSendID=(Select NotificationSendID from coc_NotificationSends(NOLOCK) where GeneralNotificationId=@GeneralNotificationId)) as MessageHeadingAR
		,(Select [Message]  from coc_NotificationSendLanguages(NOLOCK) where  LanguageID=1 and NotificationSendID=(Select NotificationSendID from coc_NotificationSends(NOLOCK) where GeneralNotificationId=@GeneralNotificationId)) as MessageEN
		,(Select [Message]  from coc_NotificationSendLanguages(NOLOCK) where  LanguageID=2 and NotificationSendID=(Select NotificationSendID from coc_NotificationSends(NOLOCK) where GeneralNotificationId=@GeneralNotificationId)) as MessageAR
		 FROM  coc_GeneralNotification (NOLOCK)GN where  GN.GeneralNotificationId=@GeneralNotificationId
       Set @SpResponseStatus=1;   
       Set @SpResponseMessage='Success';   
	   set @SpErrorDetails='Success';   
  END TRY                
              
  BEGIN CATCH                
              
  Set @SpResponseStatus=0;  
  Set @SpResponseMessage='GenericError';    
  Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,
  ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, 
  ErrorState : <'+convert(varchar(500), Error_state())+'> , 
  ErrorProcedure : <'+Error_procedure() +'>,
  ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                        
              
  END CATCH               
              
 SET NOCOUNT OFF                 
              
 END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetHomePageCompetitionList]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetHomePageCompetitionList] @UserID INTEGER    =NULL
,                                                   @RoleID INTEGER    =NULL
,                                                   @LanguageID INTEGER=1
AS
	SET NOCOUNT ON
BEGIN

	--Tables[0] ECoupon
	SELECT EC.ECouponID                           
	,      EC.EServiceID                          
	,      CONVERT(NVARCHAR(12),EC.ResultDate,106)    ResultDate
	,      EC.WinnerCount                         
	,      EC.EntryTypeID                         
	,      EC.MinInvoiceValue                     
	,      EC.AdditionalCouponValue               
	,      EC.AllowMultipleInvoices               
	,      EC.CouponPerInvoice                    
	,      EC.CouponPerMember                     
	,      EC.UserAurthorised                     
	,      ISNULL(EC.QuestionCount,0)                 QuestionCount
	,      EC.ImageFile                           
	,      EC.UsesTerm                            
	,      EC.ECouponTemplate                     
	,      EC.ParticipationByKiosk                
	,      SL.EService                             as [ServiceName]
	,--SL.EService [ServiceName],
	       CONVERT(NVARCHAR(12),ES.FromDate,106)      StatDate
	,      CONVERT(NVARCHAR(12),ES.ToDate,106)        EndDate
	,      EC.MemberOnly                          
	,      EC.ImageFile                            as DisplayImage
	,      EL.UsesTerm                            
	,      EL.[Value]                             
	FROM       coc_ECoupons(NOLOCK)  EC        
	INNER JOIN coc_EServices         ES(NOLOCK) ON EC.EServiceID = ES.EServiceID
	INNER JOIN coc_EServiceLanguages SL(NOLOCK) ON ES.EServiceID=SL.EServiceID AND SL.LanguageID = @LanguageID
	INNER JOIN coc_ECouponLanguages  EL(NOLOCK) ON EL.ECouponID=EC.ECouponID AND EL.LanguageID = @LanguageID -- added by Abdul Dayyan
	WHERE EC.IsActive=1 AND CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE) AND EC.ResulltDeclared=0
		and ES.EServiceID not in (125,127,128)
		and EC.EServiceID <> 183 -- added by rafeeq
		and isnull(EC.IsShowMobile, 1) = 1
	ORDER BY EC.ECouponID DESC
END
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetItemContent]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetItemContent]            
 @ItemTypeID int,        
 @LanguageID int     
 AS
 BEGIN           
     -- (27 July 2021) temporary fix by shamim to interchange values in parameters
	 
	 
SELECT  CIL_L1.ContentItem Heading, CIL_L2.ContentItem Content, CI_L1.ContentItemID HeaderID,CI_L2.ContentItemID ContentID 
  FROM [coc_ContentItems] CI_L1(NOLOCK)           
   INNER JOIN coc_ContentItemLanguages CIL_L1(NOLOCK) ON CIL_L1.ContentItemID = CI_L1.ContentItemID 
	AND CIL_L1.LanguageID = @ItemTypeID  
   LEFT JOIN [coc_ContentItems] CI_L2(NOLOCK)  ON CI_L1.ContentItemID = CI_L2.ParentContentItemID and CI_L1.IsActive= 1  
   LEFT JOIN coc_ContentItemLanguages CIL_L2(NOLOCK) ON CIL_L2.ContentItemID = CI_L2.ContentItemID 
	AND CIL_L2.LanguageID = @ItemTypeID   
  WHERE CI_L1.ContentItemTypeID=@LanguageID AND CI_L1.IsActive=1  and CI_L1.ParentContentItemID is null
  
 END
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetKioskLocationsInformation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_GetKioskLocationsInformation] @KioskLocationsID INTEGER
AS
BEGIN
	--Table 1 [KioskLocation]
	IF @KioskLocationsID = 0
		SET @KioskLocationsID = NULL
	SELECT KL.KioskLocationID      
	,      KLLEnglish.KioskLocation as KioskLocationEnglish
	,      KLLArabic.KioskLocation  as KioskLocationArabic
	,      KL.CountryID            
	,      KL.CityID               
	,      KLR.RetailOutletID      
	,      KL.Location             
	,      KL.LocationURL          
	,      KL.PlusCode             
	,      KL.Remarks              
	,      KL.IsActive             
	,      KL.UserName             
	,      KL.Password             
	,      KL.NickName             
	,      RO.CorporateID          
	FROM       [coc_KioskLocations]           KL(NOLOCK)        
	INNER JOIN coc_KioskLocationRetailOutlets KLR(NOLOCK)        ON KLR.KioskLocationID=KL.KioskLocationID
	INNER JOIN coc_RetailOutlets              RO(NOLOCK)         ON RO.RetailOutletID=KLR.RetailOutletID
	INNER JOIN coc_KioskLocationLanguages     KLLEnglish(NOLOCK) ON KLLEnglish.KioskLocationID=KL.KioskLocationID AND KLLEnglish.LanguageID=1
	INNER JOIN coc_KioskLocationLanguages     KLLArabic(NOLOCK)  ON KLLArabic.KioskLocationID=KL.KioskLocationID AND KLLArabic.LanguageID=2
	WHERE KL.KioskLocationID=@KioskLocationsID


	--Table 2 [KioskScreenMapping]
	SELECT KSM.KioskLocationID
	,      KSM.KioskScreenID
	FROM coc_KioskScreenMapping KSM(NOLOCK)
	WHERE KSM.KioskLocationID=@KioskLocationsID and KSM.IsActive =1


END
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetKioskScreens]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_GetKioskScreens] @LanguageID integer
AS
BEGIN
	SELECT KS.KioskScreenID  
	,      KL.KioskScreenName [Screen]
	,      KS.ImageFile      
	FROM       coc_KioskScreens         KS(NOLOCK)
	INNER JOIN coc_KioskScreenLanguages KL(NOLOCK) ON KL.KioskScreenID=KS.KioskScreenID AND KL.LanguageID=@LanguageID
END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetMallById]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[core_usp_GetMallById]                 

  @MallID int,   

  @LanguageID int=1,         

  @UserID bigint=null,      

  @RoleID bigint=null,      

  @ImpersonationUserID bigint=null,      

  @SpResponseStatus int out,      

  @SpResponseMessage nvarchar(max) out,      

  @SpErrorDetails nvarchar(max)    out                

AS       

 Begin Try        

 if @LanguageID=0    

 begin    

 set @LanguageID=1    

 end    

 Set @SpResponseStatus=1;       

 Set @SpResponseMessage='Success';      

 Set @SpErrorDetails=NULL;      

            

  select  MallID  ,MallName_EN, MallName_AR 

   ,MallImage    

   ,IsActive    

   ,TermsAndConditions_EN   

   ,TermsAndConditions_AR  

   ,[Description]    

   ,CountryID    

   ,CityID    

   ,LocationUrl  

   ,CreatedBy

   ,CreatedDate

   ,ModifiedBy

   ,ModifiedDate  

   from core_coc_Mall    (NOLOCK) 

        where MallID=@MallID   

                  

  END TRY                  

  BEGIN CATCH        

  ROLLBACK TRANSACTION GetEVoucherDetailsByServiceID      

		Set @SpResponseStatus=0;       

		Set @SpResponseMessage='GenericError';         

		Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , Error
Line <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';        

  END CATCH                  

 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetMalls]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ======================================================================                
-- Author     :  Shaik  use core_usp_GetMalls              
-- Create date    :  10-Sept-2019                
-- Description    :  Get List of Malls            
-- ======================================================================                
CREATE PROCEDURE  [dbo].[core_usp_GetMalls]               
    
  @LanguageID int=1,       
  @UserID bigint=null,    
  @RoleID bigint=null,    
  @ImpersonationUserID bigint=null,    
  @SpResponseStatus int out,    
  @SpResponseMessage nvarchar(max) out,    
  @SpErrorDetails nvarchar(max)    out              
AS     
 Begin Try      
 if @LanguageID=0  
 begin  
 set @LanguageID=1  
 end  
 Set @SpResponseStatus=1;     
 Set @SpResponseMessage='Success';    
 Set @SpErrorDetails=NULL;    
          
  select  MallID  
   ,(Case When @LanguageID=1 then MallName_EN else MallName_AR end)as MallName  
   ,MallImage  
   ,IsActive  
   ,TermsAndConditions_EN  
   ,TermsAndConditions_AR  
   ,Description  
   ,CountryID  
   ,CityID  
   ,LocationUrl  
   ,CreatedBy
   ,CreatedDate
   ,ModifiedBy
   ,ModifiedDate
   from core_coc_Mall (NOLOCK)  
        where IsActive=1  
                
  END TRY                
  BEGIN CATCH      
  ROLLBACK TRANSACTION GetEVoucherDetailsByServiceID    
  Set @SpResponseStatus=0;     
  Set @SpResponseMessage='GenericError';    
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
               
 END CATCH                
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetMessageTemplateByID]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Abdul Dayyan
-- Create date: 12 November 2019
-- Description:	Message Template by ID
-- =============================================
CREATE PROCEDURE [dbo].[core_usp_GetMessageTemplateByID]
-- Add the parameters for the stored procedure here
  @ConsumerID int
, @MessageTemplateID int
, @SpResponseStatus int out
, @SpResponseMessage nvarchar(max) out
, @SpErrorDetails nvarchar(max) out

AS
	BEGIN TRY
	Set @SpResponseStatus=1;
	Set @SpResponseMessage='Success';
	Set @SpErrorDetails=NULL;

	SET NOCOUNT ON;
	Declare @temp table ( CheckVersionID int
	,                     DeviceType     nvarchar(100)
	,                     LanguageID     int );
	Insert into @temp ( CheckVersionID, DeviceType )
	select max(CheckVersionID)CheckVersionID
	,      DeviceType         
	from coc_CheckVersion(nolock)
	where ConsumerID=147978
	group by DeviceType

	select MTL.*
	,      t.DeviceType
	from            coc_MessageTemplateLanguages(NOLOCK) MTL
	left outer join coc_CheckVersion                     v (NOLOCK)  on MTL.LanguageID=v.LanguageID
	inner join      @temp                                t    on t.CheckVersionID = v.CheckVersionID
	where MTL.MessageTemplateID=@MessageTemplateID and v.ConsumerID=@ConsumerID

	END TRY

	BEGIN CATCH

	Set @SpResponseStatus=0;

	Set @SpResponseMessage='GenericError';

	Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';

	END CATCH

	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetNationalityInformation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_GetNationalityInformation] @LanguageID INTEGER=1
AS
BEGIN

	SELECT Cl.NationalityID
	,      Nationality
	FROM       [coc_NationalityLanguages] CL(NOLOCK)
	inner join [coc_Nationalities]        CU(NOLOCK) ON CL.NationalityID=CU.NationalityID
	WHERE CL.LanguageID=@LanguageID
	order by CU.DisplayOrder
	,        CL.Nationality

END
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetPrivateVouchersCount]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_GetPrivateVouchersCount]   
@EVoucherID INTEGER=NULL    
,@TotalCount INTEGER OUTPUT    
AS    
 SET NOCOUNT ON    
   
 DECLARE @ServiceID INTEGER      
 DECLARE @NotificationID INTEGER      
 SELECT @ServiceID=EServiceID FROM coc_EVoucher(nolock)  WHERE EVoucherID=@EVoucherID      
 SELECT @NotificationID=NotificationID FROM coc_Notifications(nolock) WHERE EServiceID=@ServiceID    

 SELECT @TotalCount=count(*)  FROM coc_EServiceBarcodes(nolock) WHERE NotificationID=@NotificationID   AND EVoucherID IS NULL  


  
    
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetPromoCodeCategories]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetPromoCodeCategories]             
 @LanguageID int=1 ,
 @VoucherID int=NULL,
 @VoucherCategoryID bigint=NULL
AS              
Begin  
   
   if(@VoucherCategoryID=0)
      set @VoucherCategoryID=NULL
    select CategoryID,
	    (case when @LanguageID=2 then CategoryNameAR else CategoryName end)CategoryName 
   from coc_core_Category(nolock) where isactive=1  
   and CategoryID not in (select CategoryID from coc_core_EVoucherCategories(nolock) where EVoucherID=@VoucherID and IsDeleted=0 and (@VoucherCategoryID is null or EVoucherCategoryID!=@VoucherCategoryID))

   
End  
              
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetPurchaseBarcodeDetails]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_GetPurchaseBarcodeDetails]                  
  @BarcodePurchaseId bigint,
 @LanguageID int=1
 AS                  
 SET NOCOUNT ON                 
 BEGIN                                
  select    
      bp.BarcodePurchaseId,
	  bp.PurchaseNo,
	  bp.Date,
	  bp.NoOfBarcodes,
	  (select sum(NOfBarcodesApproved) from coc_BarcodePurchasePayment (NOLOCK) where  BarcodePurchaseId=bp.BarcodePurchaseId and Status=4)as TotalApprovedBarcodes,
	  bp.Amount,
	  bp.Tax ,
	  bp.TotalAmount ,
	  bp.Status ,
	  bp.IsDeleted,  
   p.Price,
   c.CorporateName as CorporateName , --- c.FirstName+c.MiddleName+c.LastName  this are nulls
   (case when c.CorporateName=null then c.FirstName+c.MiddleName+c.LastName else c.CorporateName end)as CorporateFullName,
    (case when @LanguageID=1 then cc.CurrencySymbol_en else cc.CurrencySymbol_ar end) as Currency
   from coc_BarcodePurchase(nolock) bp  
   inner join Coc_BarcodePrices(NoLock) p on p.BarcodePriceId=bp.BarcodePriceId  
   inner join Coc_Currency(nolock) cc on cc.CurrencyId=p.CurrencyId
   inner join coc_Corporates(NOLOCK) c on c.CorporateID=bp.CorporateId  
   
   where bp.BarcodePurchaseId=@BarcodePurchaseId  
                  
  END          
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetPurchaseBarcodeDetailsbyPaymentID]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_GetPurchaseBarcodeDetailsbyPaymentID]                    
 @PaymentID bigint,  
@LanguageID int=1  
 AS                    
 SET NOCOUNT ON                   
 BEGIN   
  declare @BarcodePurchaseId bigint;
  select bpp.BarcodePurcahsePaymentId as PaymentID,
   bpp.NOfBarcodesApproved as NoOfApprovalBarcodes,    
      bp.BarcodePurchaseId,
	  bp.PurchaseNo,
	  bp.Date,
	  bp.NoOfBarcodes,
	  (select sum(NOfBarcodesApproved) from coc_BarcodePurchasePayment (NOLOCK) where  BarcodePurchaseId=bp.BarcodePurchaseId and Status=4)as TotalApprovedBarcodes,
	  bp.Amount,
	  bp.Tax ,
	  bp.TotalAmount ,
	  bp.Status ,
	  bp.IsDeleted,    
   p.Price,c.CorporateName as CorporateName ,  
    (case when @LanguageID=1 then cc.CurrencySymbol_en else cc.CurrencySymbol_ar end) as Currency  
   from coc_BarcodePurchase(nolock) bp 
    inner join coc_BarcodePurchasePayment(nolock) bpp on bpp.BarcodePurchaseId=bp.BarcodePurchaseId
   inner join Coc_BarcodePrices(NoLock) p on p.BarcodePriceId=bp.BarcodePriceId    
   inner join Coc_Currency(nolock) cc on cc.CurrencyId=p.CurrencyId  
   inner join coc_Corporates(NOLOCK) c on c.CorporateID=bp.CorporateId    
   where bpp.BarcodePurcahsePaymentId=@PaymentID    
                    
  END            
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetRetailOutletsByCorporateId]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Abdul Dayyan
-- Create date: 01-12-2019
-- Description:	Get Retail Outlets by CorporateId
-- =============================================
CREATE PROCEDURE [dbo].[core_usp_GetRetailOutletsByCorporateId] @LanguageID INTEGER             =1
,
--@HelpView BIT=NULL,
                                                                @IsActive BIT                   =NULL
,                                                               @UserID INTEGER                 =NULL
,                                                               @RoleID bigint                  =null
,                                                               @CorporateID INTEGER            =NULL
,                                                               @ImpersonationUserID bigint     =null
,                                                               @SpResponseStatus int            out
,                                                               @SpResponseMessage nvarchar(max) out
,                                                               @SpErrorDetails nvarchar(max)    out
AS
	SET NOCOUNT ON
	BEGIN TRY

	SELECT @RoleID =RoleID
	FROM coc_Users(NOLOCK)
	WHERE UserID =@UserID
	if (@CorporateID =0)
		set @CorporateID = null;
	else
		SELECT @CorporateID=CorporateID
		FROM coc_Corporates(NOLOCK)
		WHERE UserID =@UserID

	DECLARE @RetailOutlets TABLE ( ClientId      INTEGER IDENTITY PRIMARY KEY
	,                              UniqueID      INTEGER
	,                              CorporateID   INTEGER
	,                              RetailOutlet  [Description]
	,                              ContactPerson NVARCHAR(200)
	,                              CorporateName NVARCHAR(200)
	,                              CRNumber      NullCode
	,                              Country       NullDescription
	,                              City          NullDescription
	,                              IsActive      BIT )

	INSERT INTO @RetailOutlets ( UniqueID, CorporateID, RetailOutlet, ContactPerson, CorporateName, CRNumber, Country, City, IsActive )
	SELECT RT.RetailOutletID         
	,      CP.CorporateID            
	,      ISNULL(RL.RetailOutlet,'')RetailOutlet
	,      RT.ContactPerson          
	,      CP.CorporateName          
	,      CP.CRNumber               
	,      CL.Country                
	,      CT.City                   
	,      RT.IsActive               
	FROM       coc_RetailOutlets         RT(NOLOCK)
	INNER JOIN coc_Corporates            CP(NOLOCK) ON RT.CorporateID=CP.CorporateID
	LEFT JOIN  coc_RetailOutletLanguages RL(NOLOCK) ON RT.RetailOutletID=RL.RetailOutletID AND RL.LanguageID = @LanguageID
	LEFT JOIN  coc_CountryLanguages      CL(NOLOCK) ON RT.CountryID=CL.CountryID AND CL.LanguageID=@LanguageID
	LEFT JOIN  coc_CityLanguages         CT(NOLOCK) ON RT.CityID=CT.CityID AND CT.LanguageID=@LanguageID
	WHERE RT.CorporateID = CASE WHEN @RoleID=1 AND @CorporateID is null THEN RT.CorporateID
		                                                                ELSE @CorporateID END
	ORDER BY RT.RetailOutletID DESC

	--IF ISNULL(@HelpView,0)=0
	--BEGIN
	SELECT ClientId
	,      UniqueID
	,      CorporateID
	,      RetailOutlet
	,      ContactPerson
	,      CorporateName
	,      CRNumber
	,      Country
	,      City
	,      IsActive
	FROM @RetailOutlets

	--END
	END TRY

	BEGIN CATCH

	Set @SpResponseStatus=0;

	Set @SpResponseMessage='GenericError';

	Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';

	END CATCH

	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetRetailOutletsForMobileService]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetRetailOutletsForMobileService]             
 @ECouponID  INTEGER,               
 @LanguageID INTEGER               
AS               
    SET nocount ON               
              
  BEGIN                          
              
      --Table[1]--               
      SELECT EO.ecouponoutletid,               
             EO.ecouponid,               
             EO.retailoutletid,               
             RL.retailoutlet [Outlet],               
             RO.address1     [Address]               
      FROM   coc_ecouponoutlets(nolock) EO               
             INNER JOIN coc_retailoutlets (nolock) RO               
                     ON EO.retailoutletid = RO.retailoutletid               
             LEFT JOIN coc_retailoutletlanguages RL(nolock)               
                    ON RO.retailoutletid = RL.retailoutletid               
                       AND RL.languageid = @LanguageID               
      WHERE  EO.ecouponid = @ECouponID               
   
  END               
              
    SET nocount OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_GetRetailOutletsForVoucher]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_GetRetailOutletsForVoucher] @LanguageID INTEGER             =1
,                                                            @CorporateID INTEGER            =NULL
,                                                            @VoucherID INTEGER              =NULL
,                                                            @IsActive BIT                   =NULL
,                                                            @UserID INTEGER                 =NULL
,                                                            @RoleID bigint                  =null
,                                                            @ImpersonationUserID bigint     =null
,                                                            @SpResponseStatus int            out
,                                                            @SpResponseMessage nvarchar(max) out
,                                                            @SpErrorDetails nvarchar(max)    out
AS
	SET NOCOUNT ON
	BEGIN TRY
	if (@CorporateID is null or @CorporateID=0)
	begin
		select @CorporateID=CO.CorporateID
		from       coc_EVoucher(NoLock)   EV
		inner join coc_Corporates(NOLOCK) CO on CO.UserID=EV.CreatedUserID
		where EV.EVoucherID=@VoucherID

		SELECT RT.RetailOutletID         
		,      ISNULL(RL.RetailOutlet,'')RetailOutlet
		FROM       coc_RetailOutlets         RT(NOLOCK)
		INNER JOIN coc_RetailOutletLanguages RL(NOLOCK) ON RT.RetailOutletID=RL.RetailOutletID AND RL.LanguageID = @LanguageID
		WHERE RT.CorporateID = @CorporateID AND RT.IsActive=1
		ORDER BY RT.RetailOutletID DESC
	end
	else
	begin
		SELECT RT.RetailOutletID         
		,      ISNULL(RL.RetailOutlet,'')RetailOutlet
		FROM       coc_RetailOutlets         RT(NOLOCK)
		INNER JOIN coc_RetailOutletLanguages RL(NOLOCK) ON RT.RetailOutletID=RL.RetailOutletID AND RL.LanguageID = @LanguageID
		WHERE RT.CorporateID = @CorporateID AND RT.IsActive=1
		ORDER BY RT.RetailOutletID DESC
	end
	Set @SpResponseStatus=1;
	Set @SpResponseMessage='Success';

	END TRY

	BEGIN CATCH

	Set @SpResponseStatus=0;

	Set @SpResponseMessage='GenericError';

	Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';

	END CATCH

	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetUserRole]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Abdul Dayyan
-- Create date: 23 October 2019
-- Description:	Get user role
-- =============================================
CREATE PROCEDURE [dbo].[core_usp_GetUserRole]
	@EmailID [Email] =NULL,
	@MobileNumber [Mobile] =NULL,
	@Password [NullName]=NULL,
	@TypeID INTEGER,
	@LanguageID INTEGER = 1,
 	@ImpersonationUserID bigint=null,
	@SpResponseStatus int = null out,
	@SpResponseMessage nvarchar(max) = null out,
	@SpErrorDetails nvarchar(max) = null out
AS
 Begin Try      
 DECLARE @UserID INTEGER  
 DECLARE @RoleID INTEGER  
 DECLARE @UniqueID INTEGER  
 DECLARE @ConsumerID INTEGER  
 DECLARE @FirstName [Name]  
 DECLARE @ByMobile BIT =0  
 DECLARE @ByEmail BIT =0 

	 Set @SpResponseStatus=1;     
	 Set @SpResponseMessage='Success';    
	 Set @SpErrorDetails='Success'; 
	
	SET NOCOUNT ON;

	 IF(@EmailID = '')  
 BEGIN  
  SET @EmailID = NULL  
  SET @ByMobile=1  
 END  
 IF(@MobileNumber = '')  
 BEGIN  
  SET @MobileNumber = NULL   
  SET @ByEmail=1  
 END  
 IF(@Password = '')  
 BEGIN  
  SET @Password = NULL  
 END  
 IF(@EmailID IS NOT NULL OR @MobileNumber IS NOT NULL )  
 BEGIN  
  SELECT @FirstName=FirstName FROM coc_Consumers(NOLOCK)   
   WHERE (@EmailID IS NULL OR EmailID = @EmailID) AND  
  (@MobileNumber IS NULL OR PrimaryMobile = @MobileNumber) AND IsVerified=1 and IsDeleted= 0  
  
  SELECT @RoleID=ISNULL(RoleID,0) ,@UserID=ISNULL(UserID,0) , @MobileNumber=[MobileNumber], @EmailID=[EmailID]  
   FROM coc_Users(NOLOCK)   
  WHERE (@EmailID IS NULL OR EmailID = @EmailID) AND  
   (@Password IS NULL OR [Password] = @Password) AND  
  (@MobileNumber IS NULL OR MobileNumber = @MobileNumber OR PhoneNumber= @MobileNumber) and IsDeleted= 0  
    
  IF @UserID IS NOT NULL  
  BEGIN  
   IF(@TypeID =1) -- RESET PASSWORD  
   BEGIN  
    INSERT INTO coc_ResetPassword(UserID,ByMobile,ByEmail,RequestTime,IsVerified)  
     SELECT @UserID,@ByMobile,@ByEmail,GETDATE(),0  
    SET @UniqueID=SCOPE_IDENTITY()  
   END  
   ELSE IF (@TypeID =2 AND @RoleID = 5)  
   BEGIN  
    SELECT  @ConsumerID = ConsumerID   
     FROM coc_Consumers(NOLOCK)   
    WHERE UserID=@UserID  
    INSERT INTO coc_ContactChanges(ConsumerID,MobileChange,EmailChange,RequestTime,IsVerified)   
     SELECT @ConsumerID,@ByMobile,@ByEmail,GETDATE(),0  
    SET @UniqueID=SCOPE_IDENTITY()  
   END  
   ELSE IF (@TypeID =2 AND @RoleID != 5)  
   BEGIN  
    INSERT INTO coc_ContactChanges(UserID,MobileChange,EmailChange,RequestTime,IsVerified)   
     SELECT @UserID,@ByMobile,@ByEmail,GETDATE(),0  
    SET @UniqueID=SCOPE_IDENTITY()  
   END  
   if @RoleID = 5 and @ConsumerID IS NULL  
    SELECT  @ConsumerID = ConsumerID   
     FROM coc_Consumers(NOLOCK)   
    WHERE UserID=@UserID  
  END  
  SELECT @UserID [UserID],@RoleID [RoleID],@UniqueID [UniqueID],@FirstName [FirstName], @ConsumerID [ConsumerID], @EmailID [EmailID],@MobileNumber [MobileNumber]  
   from coc_Users (NOLOCK) where UserID = @UserID  
         
  END  
    
END TRY                
  BEGIN CATCH      
  Set @SpResponseStatus=0;     
  Set @SpResponseMessage='GenericError';    
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
  END CATCH                
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetVoucherCategoryData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetVoucherCategoryData]   
 @VoucherID int,  
 @VoucherCategoryID bigint                  
AS                      
BEGIN                                   
  SET NOCOUNT ON;    
    
   Select CategoryID,ImageName,Convert(varchar,Discount) Discount,Description,DescriptionAR from coc_core_EVoucherCategories(nolock) 
   where EVoucherID=@VoucherID and IsDeleted=0 and EVoucherCategoryID=@VoucherCategoryID             
               
          
  END                                         
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetVoucherDetailsForPDF]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetVoucherDetailsForPDF]                  
 @VoucherID int              
AS                  
BEGIN                               
  SET NOCOUNT ON;                  
   select ev.EVoucherID,
   ev.Type,
   ev.NumberOfVouchers,
   Convert(varchar(10),ev.FromTime) as FromTime,
   Convert(varchar(10),ev.ToTime) as ToTime,
   ev.SelectedDays,
   Convert(varchar(10),CONVERT(date,es.FromDate,106),103)as StartDate,  
   Convert(varchar(10),CONVERT(date,es.ToDate,106),103)as EndDate, 
   (DATEDIFF(Day,CONVERT(date,es.FromDate,106), CONVERT(date,es.ToDate,106))+1) as TotalDays,
   evldesc.ResourceValue as Description,
   evl.ResourceValue as VoucherName,
   c.CorporateNameAR as CorporateName,  
   c.CRNumber,  
   c.JCCICode
   from coc_EVoucher(nolock) ev
   inner join coc_EVoucherLanguages(nolock) evl on evl.EVoucherID=ev.EVoucherID and evl.ResourceKey='VoucherName' and evl.LanguageID=2
   inner join coc_EVoucherLanguages(nolock) evldesc on evldesc.EVoucherID=ev.EVoucherID and evldesc.ResourceKey='Description' and evldesc.LanguageID=2
   inner join coc_EServices(nolock) es on es.EServiceID=ev.EServiceID
   inner join coc_Corporates(nolock) c on c.CorporateID=es.CorporateID
   where ev.EVoucherID= @VoucherID           
              
            
  END                                     
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_usp_GetVoucherImageList]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_usp_GetVoucherImageList]      
 @EVoucherID INTEGER      
 AS      
 BEGIN      
 SELECT EVoucherImagesID,ImageFile,IsPrimaryImage,EVoucherID FROM coc_EVoucherImages (NOLOCK) WHERE EVoucherID=@EVoucherID  order by  EVoucherImagesID desc  
 END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetVoucherIsActivated]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetVoucherIsActivated]

 @EVoucherID INTEGER,             
 @LanguageID int=1,   
 @UserID bigint=null,
 @RoleID bigint=null,
 @ImpersonationUserID bigint=null,
 @SpResponseStatus int OUTPUT,
 @SpResponseMessage nvarchar(500) OUTPUT,
 @SpErrorDetails nvarchar(500) OUTPUT
AS 
BEGIN TRY
  DECLARE @IsDesabled BIT = 0  
  Set @SpResponseStatus=1; 
  Set @SpResponseMessage='Success';
  Set @SpErrorDetails=NULL;
  IF(EXISTS(SELECT * FROM coc_EVoucherBundle EB (NOLOCK) INNER JOIN coc_EVoucherBundleDistribution EVD (NOLOCK) ON EB.EVoucherBundleID = EVD.EVoucherBundleID WHERE EB.EVoucherID = @EVoucherID))  
   BEGIN  
    SET @IsDesabled = 1  
   END  
  
  SELECT E.EVoucherID,E.IsAllowed, E.IsActive, @IsDesabled AS IsDesabled, E.IsAcceptedTC FROM coc_EVoucher  E  (NOLOCK)
  WHERE E.EVoucherID = @EVoucherID 

END TRY  
BEGIN CATCH  
  Set @SpResponseStatus=0; 
  Set @SpResponseMessage='GenericError';
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';
END CATCH;
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetVoucherPackageDetails]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetVoucherPackageDetails]    
@VoucherPackageID bigint                                                              
AS                                   
begin  
  select vgp.VoucherPackageID,  
  (select STRING_AGG(VoucherID, ', ') from coc_core_VGP_Vouchers(nolock) where VoucherPackageID=vgp.VoucherPackageID) VoucherIDs,  
  vgp.VoucherPackageName,  
  vgp.VoucherPackageNameAr,  
  Convert(varchar(10),CONVERT(date,vgp.StartDate,106),103) as StartDate,            
     Convert(varchar(10),CONVERT(date,vgp.EndDate,106),103) as EndDate,    
  vgp.URL,  
  vgp.ImageName,vgp.CssCode,vgp.VoucherPackageLogo,vgp.ButtonColorCode  
  from coc_core_Voucher_Gift_Package(nolock) vgp where vgp.IsActive=1 and vgp.VoucherPackageID=@VoucherPackageID  
         
      
end  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetVoucherPackageDetailsByDistributionsID]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetVoucherPackageDetailsByDistributionsID]            
@VGPDistributionsID bigint                                                                     
AS                                           
begin          
  select vgp.VoucherPackageID,          
  vgp.VoucherPackageName,          
  vgp.VoucherPackageNameAr,          
  Convert(varchar(10),CONVERT(date,vgp.StartDate,106),103) as StartDate,                    
     Convert(varchar(10),CONVERT(date,vgp.EndDate,106),103) as EndDate,            
  vgp.URL,          
  vgp.ImageName, 
   vgp.VoucherPackageLogo,
  vgp.CssCode,
  vgp.ButtonColorCode,
  vgp.CustomCssCode,
  (Case when convert(date,getdate()) between CONVERT(date,vgp.StartDate) and CONVERT(date,vgp.EndDate) then 1 else 0 end) IsValid,        
  ApplyRefferalCode        
  from coc_core_Voucher_Gift_Package(nolock) vgp  
  inner join coc_core_VGP_Distributions(nolock) vgpd on vgpd.VoucherPackageID=vgp.VoucherPackageID  
  where vgp.IsActive=1 and vgpd.VGPDistributionsID=@VGPDistributionsID         
                 
              
end          
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetVoucherPackageDetailsByID]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetVoucherPackageDetailsByID]          
@VoucherPackageID bigint                                                                   
AS                                         
begin        
  select vgp.VoucherPackageID,        
  vgp.VoucherPackageName,        
  vgp.VoucherPackageNameAr,        
  Convert(varchar(10),CONVERT(date,vgp.StartDate,106),103) as StartDate,                  
     Convert(varchar(10),CONVERT(date,vgp.EndDate,106),103) as EndDate,          
  vgp.URL,        
  vgp.ImageName, 
  vgp.VoucherPackageLogo,
  vgp.CssCode,
  vgp.ButtonColorCode,
  vgp.CustomCssCode,
  (Case when convert(date,getdate()) between CONVERT(date,vgp.StartDate) and CONVERT(date,vgp.EndDate) then 1 else 0 end) IsValid,      
  ApplyRefferalCode      
  from coc_core_Voucher_Gift_Package(nolock) vgp where vgp.IsActive=1 and vgp.VoucherPackageID=@VoucherPackageID       
               
            
end        
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetVoucherPackageDetailsFromUrl]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetVoucherPackageDetailsFromUrl]        
@VoucherPackageUrl nvarchar(500)                                                                  
AS                                       
begin      
  select vgp.VoucherPackageID,      
  vgp.VoucherPackageName,      
  vgp.VoucherPackageNameAr,      
  Convert(varchar(10),CONVERT(date,vgp.StartDate,106),103) as StartDate,                
     Convert(varchar(10),CONVERT(date,vgp.EndDate,106),103) as EndDate,        
  vgp.URL,      
  vgp.ImageName,
  vgp.VoucherPackageLogo,
  vgp.CssCode,
  vgp.ButtonColorCode,
  vgp.CustomCssCode,
  (Case when convert(date,getdate()) between CONVERT(date,vgp.StartDate) and CONVERT(date,vgp.EndDate) then 1 else 0 end) IsValid,    
  ApplyRefferalCode    
  from coc_core_Voucher_Gift_Package(nolock) vgp where vgp.IsActive=1 and Lower(vgp.URL)=Lower(@VoucherPackageUrl)      
             
          
end      
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetVoucherPackageDrawData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetVoucherPackageDrawData]  
@VGPDistributionsID bigint
AS                                 
begin
  select vgpd.VGPDistributionsID, vgpd.VoucherPackageID,vgpd.ConsumerID,vgpd.VoucherID,vgpd.EServiceBarcodeID,
  (select EmailID from coc_consumers(nolock) where consumerid=vgpd.ConsumerID) EmailID,
  (case when exists(select null from coc_EServiceExternalBarcodes(nolock) where EServiceBarcodeID=vgpd.EServiceBarcodeID)
  then (select ExternalBarcode from coc_EServiceExternalBarcodes(nolock) where EServiceBarcodeID=vgpd.EServiceBarcodeID) else
  (select Barcode from coc_EServiceBarcodes(nolock) where EServiceBarcodeID=vgpd.EServiceBarcodeID ) end) Barcode,
  (case when exists(select null from coc_EServiceExternalBarcodes(nolock) where EServiceBarcodeID=vgpd.EServiceBarcodeID)
  then 1 else 0 end) ExternalBarcodeValue,
  (select  top 1 ImageFile from coc_EVoucherImages(nolock) where EVoucherID=vgpd.VoucherID  and IsPrimaryImage=1) ImageName

        from coc_core_VGP_Distributions(nolock) vgpd where vgpd.VGPDistributionsID=@VGPDistributionsID
       
       
	   
end
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetVoucherPackageVouchersData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetVoucherPackageVouchersData]  
@VoucherPackageID bigint
AS                                 
begin
  select vgpv.VoucherID,
  (select  top 1 ImageFile from coc_EVoucherImages(nolock) where EVoucherID=vgpv.VoucherID  and IsPrimaryImage=1) ImageName
  from coc_core_VGP_Vouchers(nolock) vgpv
  inner join coc_core_Voucher_Gift_Package(nolock) vgp on vgp.VoucherPackageID=vgpv.VoucherPackageID
  where vgpv.VoucherPackageID=@VoucherPackageID and vgp.IsActive=1
       
	   
end
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[CORE_USP_GETVOUCHERTEMPLATEBYID]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ======================================================================                
-- Author     :  MOHAMMAD RAFEEQ SHAIK
-- Create date    :  09-SEP-2019                
-- Description    :  GET TEMPLATE BY ID 
-- ======================================================================   
CREATE PROCEDURE  [dbo].[CORE_USP_GETVOUCHERTEMPLATEBYID]
(
  @TemplateID int=0,
  @VoucherID    int
)
AS
BEGIN
SET NOCOUNT ON; 
SELECT  [TemplateID]
      ,[VoucherID]
      ,[Logo]
      ,[Position]
      ,[ContentType]
      ,[IsActive]
      ,[CreatedOn]
      ,[CreatedBy]
      ,[UpdatedOn]
      ,[UpdatedBy] FROM COC_VOUCHERTEMPLATE(nolock) where voucherid = @VoucherID

SET NOCOUNT OFF;

END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetWinnerByFilters]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Abdul Dayyan  
-- Create date: 06 October 2019  
-- Description: Getting Winner by filters.  
-- =============================================  
CREATE PROCEDURE [dbo].[core_usp_GetWinnerByFilters]   
 @LanguageID  INTEGER=1,  
 @UserID INTEGER,  
 @RoleID bigint=null,  
 @ImpersonationUserID bigint=null,  
 @SpResponseStatus int OUTPUT,  
 @SpResponseMessage nvarchar(max) OUTPUT,  
 @SpErrorDetails nvarchar(max) OUTPUT,  
 @ECouponID bigint = null
AS  
BEGIN  
       
select  EC.ECouponID, ECouponWinnerID, ConsumerName, MobileNumber, Email, DrawDateTime,  EPL.Value  from coc_ECoupons EC  (NOLOCK)
 inner join coc_ECouponPrizes ECP (NOLOCK) ON ECP.ECouponID= EC.ECouponID    
  inner join coc_ECouponWinners EW (NOLOCK) ON EW.ECouponPrizeID = ECP.ECouponPrizeID    
  inner join coc_ECouponPrizesLanguages EPL (NOLOCK) ON EPL.ECouponPrizeID = EW.ECouponPrizeID and EPL.ResourceKey= 'Name' and EPL.LanguageID= 1    
 where  ECouponDrawPrizeID in (select ECouponDrawPrizeID from coc_ECouponDrawPrizes EDP (NOLOCK) inner join coc_ECouponDraw ED (NOLOCK)
 ON EDP.ECouponDrawID  = ED.ECouponDrawID and (ED.ECouponID= @ECouponID or @ECouponID is null))    
END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetWinnerForDeletion]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetWinnerForDeletion]     
@LanguageID INT =1,  
@MobileNumber VARCHAR(20) = NULL,  
@ECouponID BIGINT = NULL, 
@Email NVARCHAR(200)=NULL, 
@Barcode NVARCHAR(100) = NULL,
@ImpersonationUserID BIGINT=NULL,            
@SpResponseStatus INT = NULL OUT,            
@SpResponseMessage NVARCHAR(MAX) = NULL OUT,            
@SpErrorDetails NVARCHAR(MAX) = NULL OUT
AS    
SET NOCOUNT ON    
BEGIN TRY       
    SET @SpResponseStatus=0;                 
    SET @SpResponseMessage='';                
    SET @SpErrorDetails='';

    IF @ECouponID=0 
    BEGIN 
        SET @ECouponID=NULL
    END
    IF @Email=''
    BEGIN 
        SET @Email=null
    END
    IF @MobileNumber=''
    BEGIN 
        SET @MobileNumber=null
    END
    IF @Barcode=''
    BEGIN 
        SET @Barcode=null
    END
    SELECT
    --ESB.EServiceBarcodeID,
    EP.Barcode,
    --ESB.NotificationID,
    ED.ECouponID, 
    EW.ECouponWinnerID, 
    EW.ConsumerName, 
    EW.MobileNumber, 
    EW.Email, 
    EW.DrawDateTime,  
    EPL.Value AS [PrizeName],
    EDL.Value AS [DrawName],
    ESL.EService AS [CompetitionName],
    ISNULL(CorporateName, CorporateNameAR) AS [CorporateName],
    ES.CorporateID
    FROM coc_ECouponWinners EW (NOLOCK)
    INNER JOIN coc_ECouponPrizesLanguages EPL(NOLOCK) ON EPL.ECouponPrizeID = EW.ECouponPrizeID 
    AND EPL.ResourceKey= 'Name' AND EPL.LanguageID= @LanguageID
    INNER JOIN coc_ECouponDrawPrizes EDP (NOLOCK) ON EW.ECouponDrawPrizeID = EDP.ECouponDrawPrizeID
    INNER JOIN coc_ECouponDraw ED (NOLOCK) ON EDP.ECouponDrawID = ED.ECouponDrawID
    INNER JOIN coc_ECouponDrawLanguages EDL (NOLOCK) ON ED.ECouponDrawID = EDL.ECouponDrawID
    AND EDL.ResourceKey= 'Name' AND EDL.LanguageID= @LanguageID
    LEFT JOIN coc_ECouponParticipations EP (NOLOCK) ON EP.ECouponParticipationID = EW.ECouponParticipationID 
    INNER JOIN coc_ECoupons EC (NOLOCK) ON EC.ECouponID = ED.ECouponID
    INNER JOIN coc_Notifications NF (NOLOCK) ON NF.EServiceID = EC.EServiceID
    INNER JOIN coc_EServices ES (NOLOCK) ON ES.EServiceID = NF.EServiceID
    --INNER JOIN coc_EServiceBarcodes ESB (NOLOCK) ON NF.NotificationID = ESB.NotificationID 
    --AND ESB.IsUsed = 1 AND ESB.AsignedMoile = @MobileNumber
    INNER JOIN coc_EServiceLanguages ESL (NOLOCK) ON NF.EServiceID = ESL.EServiceID 
    AND ESL.LanguageID = @LanguageID
    INNER JOIN coc_Corporates CO (NOLOCK) ON ES.CorporateID = CO.CorporateID
    WHERE  
    (EW.MobileNumber= @MobileNumber OR @MobileNumber IS NULL)   AND 
    (EW.Email= @Email OR @Email IS NULL) AND 
    (ED.ECouponID= @ECouponID OR @ECouponID IS NULL) AND 
    (EP.Barcode = @Barcode OR @Barcode IS NULL)

    Set @SpResponseStatus=1;                 
    Set @SpResponseMessage='Success';          
    Set @SpErrorDetails='Success'; 
 END TRY                
 BEGIN CATCH                         
    Set @SpResponseStatus=0;                 
    Set @SpResponseMessage='GenericError';                
    Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>,       
    ErrorSeverity : <'+ ERROR_SEVERITY()+'>,       
    ErrorState : <'+ERROR_STATE()+'> ,       
    ErrorProcedure : <'+ERROR_PROCEDURE()+'> ,       
    ErrorLine <'+ERROR_LINE()+'>       
    ErrorMessage : <'+ERROR_MESSAGE()+'>';          
 END CATCH  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetWinners]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Abdul Dayyan  
-- Create date: 06 October 2019  
-- Description: Get Winners.  
-- =============================================  
CREATE PROCEDURE [dbo].[core_usp_GetWinners]  
 -- Add the parameters for the stored procedure here@LanguageID  INTEGER=1,  
 @LanguageID  INTEGER=1,  
 @UserID bigint=null,   
 @RoleID bigint=null,  
 @ImpersonationUserID bigint=null,   
 @EServiceID INTEGER = NULL,  
 @ECouponID INTEGER = NULL,  
 @CorporateID INTEGER = 8,  
 @DrawID INTEGER = NULL,  
 @PageIndex INT = 1,  
 @IsReport bit = 0,  
 @SpResponseStatus int OUTPUT,  
 @SpResponseMessage nvarchar(max) OUTPUT,  
 @SpErrorDetails nvarchar(max) OUTPUT  
   
 AS SET NOCOUNT ON        
        
BEGIN TRY      
 DECLARE @TEMPTABLE TABLE (        
   DrawDateTime DATETIME NULL        
  ,[Location] NVARCHAR(500)        
  ,ConsumerID  NVARCHAR(100)        
  ,ConsumerName NVARCHAR(500)        
  ,PrizeDetail REMARK NULL        
  ,ECouponPrizeID BIGINT        
  ,FirstName NVARCHAR(500)        
  ,SecondName NVARCHAR(500)        
  );        
 DECLARE @SKIP INT;        
 DECLARE @TAKE INT;        
 DECLARE @NUMBEROFRECORDS INT;        
 DECLARE @TotalRecords int;        
        
 SET @NUMBEROFRECORDS = 200;        
  if(@DrawID is not null)
   set @NUMBEROFRECORDS=(select sum(frequency) from coc_ECouponDrawPrizes(nolock) where ECouponDrawID=@DrawID)
 if (@IsReport = 1)  
    SET @NUMBEROFRECORDS = POWER(2.,31)-1;        
  
 SET @TAKE = @NUMBEROFRECORDS;        
  
        
 IF (        
   @PageIndex = 0        
   OR @PageIndex = 1        
   )        
 BEGIN        
  SET @PageIndex = 1;        
  SET @SKIP = 0;        
 END        
 ELSE        
 BEGIN        
  SET @SKIP = @TAKE * (@PageIndex-1);        
 END        
 IF @DrawID = 0  SELECT @DrawID = NULL       
 IF @CorporateID = - 1        
  OR @CorporateID = 0        
  SELECT @CorporateID = NULL        
        
 INSERT INTO @TEMPTABLE        
 SELECT DrawDateTime        
  ,EDL.Value AS Location        
  ,CASE         
   WHEN @corporateID IS NULL        
    THEN ISNULL(cast(EW.MemberShipID AS VARCHAR), '-')        
   ELSE EW.MobileNumber        
   END AS ConsumerID        
  ,EW.ConsumerName --+ '['+ EW.MobileNumber  +']'           
  AS ConsumerName        
  ,ISNULL(EW.PrizeDetail, EPL.Value) AS PrizeDetail        
  ,EW.ECouponPrizeID        
  ,EW.ConsumerName --+ ' ['+ EW.MobileNumber  +']'           
  AS FirstName        
  ,'' AS SecondName        
 FROM coc_ECouponWinners EW   (NOLOCK)     
 LEFT JOIN coc_Consumers C (NOLOCK) ON C.ConsumerID = EW.ConsumerID        
 INNER JOIN coc_ECouponDrawPrizes EDP(NOLOCK) ON EDP.ECouponDrawPrizeID = EW.ECouponDrawPrizeID        
 INNER JOIN coc_ECouponPrizesLanguages EPL(NOLOCK) ON EPL.ECouponPrizeID = EDP.ECouponPrizeID        
  AND EPL.LanguageID = @LanguageID        
  AND EPL.ResourceKey = 'Name'        
 INNER JOIN coc_ECouponDraw ED(NOLOCK) ON ED.ECouponDrawID = EDP.ECouponDrawID        
 LEFT JOIN coc_ECouponDrawLanguages EDL(NOLOCK) ON EDL.ECouponDrawID = EDP.ECouponDrawID        
  AND EDL.LanguageID = @LanguageID        
  AND EDL.ResourceKey = 'LocationDescription'        
 INNER JOIN coc_ECoupons EC(NOLOCK) ON EC.ECouponID = ED.ECouponID        
 INNER JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID = EC.EServiceID        
 WHERE (        
   @ECouponID IS NULL        
   OR ED.ECouponID = @ECouponID        
   )        
  AND (        
   @CorporateID IS NULL        
   OR ES.CorporateID = @CorporateID        
   )        
  AND (        
   @DrawID IS NULL        
   OR ED.ECouponDrawID = @DrawID        
   )        
  AND NOT (        
   @corporateID IS NULL        
   AND @drawID IS NULL        
   AND @ecouponID IS NULL        
   )        
 ORDER BY convert(date,DrawDateTime) desc, EW.ECouponWinnerID asc -- ED.ECouponDrawID desc, EDP.ECouponPrizeID -- DrawDateTime desc, ED.ECouponDrawID desc          
  OFFSET @SKIP ROWS -- skip 10 rows        
 FETCH NEXT @TAKE ROWS ONLY;-- take 10 rows        
        
 SET @TotalRecords = (SELECT count(*) FROM coc_ECouponWinners EW   (NOLOCK)     
 LEFT JOIN coc_Consumers C (NOLOCK) ON C.ConsumerID = EW.ConsumerID        
 INNER JOIN coc_ECouponDrawPrizes EDP(NOLOCK) ON EDP.ECouponDrawPrizeID = EW.ECouponDrawPrizeID        
 INNER JOIN coc_ECouponPrizesLanguages EPL(NOLOCK) ON EPL.ECouponPrizeID = EDP.ECouponPrizeID        
  AND EPL.LanguageID = @LanguageID        
  AND EPL.ResourceKey = 'Name'        
 INNER JOIN coc_ECouponDraw ED(NOLOCK) ON ED.ECouponDrawID = EDP.ECouponDrawID        
 LEFT JOIN coc_ECouponDrawLanguages EDL(NOLOCK) ON EDL.ECouponDrawID = EDP.ECouponDrawID        
  AND EDL.LanguageID = @LanguageID        
  AND EDL.ResourceKey = 'LocationDescription'        
 INNER JOIN coc_ECoupons EC(NOLOCK) ON EC.ECouponID = ED.ECouponID        
 INNER JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID = EC.EServiceID        
 WHERE (@ECouponID IS NULL OR ED.ECouponID = @ECouponID ) AND ( @CorporateID IS NULL OR ES.CorporateID = @CorporateID ) AND ( @DrawID IS NULL OR ED.ECouponDrawID = @DrawID ) AND NOT ( @corporateID IS NULL AND @drawID IS NULL AND @ecouponID IS NULL ) );   
  
    
      
       
        
 SELECT DrawDateTime         
  ,[Location]         
  ,ConsumerID         
  ,ConsumerName        
  ,PrizeDetail         
  ,ECouponPrizeID         
  ,FirstName         
  ,SecondName         
  ,@TotalRecords TotalRecords        
 FROM @TEMPTABLE;        
  
  Set @SpResponseStatus=1;             
 Set @SpResponseMessage='Success';        
 Set @SpErrorDetails=NULL;   
  
 END TRY                        
      
  BEGIN CATCH                 
      
 Set @SpResponseStatus=0;             
      
 Set @SpResponseMessage='GenericError';               
      
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';              
      
  END CATCH                        
      
SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetWinnersList]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Abdul Dayyan
-- Create date: 06 October 2019
-- Description:	Getting Winner by filters.
-- =============================================
CREATE PROCEDURE [dbo].[core_usp_GetWinnersList] 
	-- Add the parameters for the stored procedure here@LanguageID  INTEGER=1,
	@UserID INTEGER,
	@RoleID bigint=null,
	@ImpersonationUserID bigint=null,
	@SpResponseStatus int OUTPUT,
	@SpResponseMessage nvarchar(max) OUTPUT,
	@SpErrorDetails nvarchar(max) OUTPUT,
	@eServiceID INTEGER
AS 
SET NOCOUNT ON
	BEGIN
		SELECT EW.ConsumerID fROM coc_ECouponWinners (NOLOCK) EW
			INNER JOIN coc_ECouponPrizes (NOLOCK) EP ON EW.ECouponPrizeID=EP.ECouponPrizeID
			INNER JOIN coc_ECoupons (NOLOCK) EC ON EP.ECouponID=EC.ECouponID
		WHERE EC.EServiceID=@eServiceID
	END
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_GetWinnersListForVoucher]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_GetWinnersListForVoucher] @LanguageID INTEGER             =  1
,                                                          @UserID bigint                  =  null
,                                                          @RoleID bigint                  =  null
,                                                          @ImpersonationUserID bigint     =  null
,                                                          @EServiceID INTEGER              = NULL
,                                                          @ECouponID INTEGER               = NULL
,                                                          @CorporateID INTEGER             = NULL
,                                                          @DrawID INTEGER                  = NULL
,                                                          @Type INTEGER                   =  NULL
,                                                          @PageIndex INT                   = 1
,                                                          @IsReport bit                    = 0
,                                                          @SpResponseStatus int            Output
,                                                          @SpResponseMessage nvarchar(max) Output
,                                                          @SpErrorDetails nvarchar(max)    Output
AS
	SET NOCOUNT ON
	BEGIN TRY
	DECLARE @TEMPTABLE TABLE ( ECouponWinnerID int
	,                          DrawDateTime    DATETIME NULL
	,                          [Location]      NVARCHAR(500)
	,                          MobileNumber    NVARCHAR(15)
	,                          Email           NVARCHAR(200)
	,                          ConsumerName    NVARCHAR(500)
	,                          PrizeDetail     REMARK NULL
	,                          ECouponPrizeID  BIGINT
	,                          FirstName       NVARCHAR(500)
	,                          SecondName      NVARCHAR(500)
	,                          VoucherID       int );
	DECLARE @SKIP INT;
	DECLARE @TAKE INT;
	DECLARE @NUMBEROFRECORDS INT;
	DECLARE @TotalRecords int;

	SET @NUMBEROFRECORDS = 200;

	if (@IsReport = 1)
		SET @NUMBEROFRECORDS = POWER(2.,31)-1;

	SET @TAKE = @NUMBEROFRECORDS;


	IF (
		@PageIndex = 0
		OR @PageIndex = 1
		)
	BEGIN
		SET @PageIndex = 1;
		SET @SKIP = 0;
	END
	ELSE
	BEGIN
		SET @SKIP = @TAKE * (@PageIndex-1);
	END
	IF @DrawID = 0
		SELECT @DrawID = NULL
	IF @CorporateID = - 1
		OR @CorporateID = 0
		SELECT @CorporateID = NULL

	IF (@Type=1)
	begin
		INSERT INTO @TEMPTABLE
		SELECT EW.ECouponWinnerID               
		,      EW.DrawDateTime                  
		,      EDL.Value                         AS Location
		,      EW.MobileNumber                  
		,      EW.Email                         
		,      EW.ConsumerName                  
		AS                                          ConsumerName
		,      ISNULL(EW.PrizeDetail, EPL.Value) AS PrizeDetail
		,      EW.ECouponPrizeID                
		,      EW.ConsumerName                  
		AS                                          FirstName
		,      ''                                AS SecondName
		,      WVM.VoucherID                    
		FROM       coc_ECouponWinners         EW(NOLOCK)         
		LEFT JOIN  coc_Consumers              C(NOLOCK)   ON C.ConsumerID = EW.ConsumerID
		INNER JOIN coc_ECouponDrawPrizes      EDP(NOLOCK) ON EDP.ECouponDrawPrizeID = EW.ECouponDrawPrizeID
		INNER JOIN coc_ECouponPrizesLanguages EPL(NOLOCK) ON EPL.ECouponPrizeID = EDP.ECouponPrizeID
				AND EPL.LanguageID = @LanguageID
				AND EPL.ResourceKey = 'Name'
		INNER JOIN coc_ECouponDraw            ED(NOLOCK)  ON ED.ECouponDrawID = EDP.ECouponDrawID
		LEFT JOIN  coc_ECouponDrawLanguages   EDL(NOLOCK) ON EDL.ECouponDrawID = EDP.ECouponDrawID
				AND EDL.LanguageID = @LanguageID
				AND EDL.ResourceKey = 'LocationDescription'
		INNER JOIN coc_ECoupons               EC(NOLOCK)  ON EC.ECouponID = ED.ECouponID
		INNER JOIN coc_EServices              ES(NOLOCK)  ON ES.EServiceID = EC.EServiceID
		left join  coc_WinnerVoucherMapping   WVM(NOLOCK) ON WVM.ECouponWinnerID=EW.ECouponWinnerID
		WHERE (
			@ECouponID IS NULL
			OR ED.ECouponID = @ECouponID
			)
			AND (
			@CorporateID IS NULL
			OR ES.CorporateID = @CorporateID
			)
			AND (
			@DrawID IS NULL
			OR ED.ECouponDrawID = @DrawID
			)
			AND NOT (
			@corporateID IS NULL
			AND @drawID IS NULL
			AND @ecouponID IS NULL
			)
			AND WVM.VoucherID is not null

		ORDER BY convert(date,DrawDateTime) desc
		,        EW.ECouponWinnerID asc -- ED.ECouponDrawID desc, EDP.ECouponPrizeID -- DrawDateTime desc, ED.ECouponDrawID desc
		OFFSET @SKIP ROWS -- skip 10 rows
		FETCH NEXT @TAKE ROWS ONLY;-- take 10 rows

		SET @TotalRecords = (SELECT count(*)
		FROM       coc_ECouponWinners         EW(NOLOCK)         
		LEFT JOIN  coc_Consumers              C(NOLOCK)   ON C.ConsumerID = EW.ConsumerID
		INNER JOIN coc_ECouponDrawPrizes      EDP(NOLOCK) ON EDP.ECouponDrawPrizeID = EW.ECouponDrawPrizeID
		INNER JOIN coc_ECouponPrizesLanguages EPL(NOLOCK) ON EPL.ECouponPrizeID = EDP.ECouponPrizeID
				AND EPL.LanguageID = @LanguageID
				AND EPL.ResourceKey = 'Name'
		INNER JOIN coc_ECouponDraw            ED(NOLOCK)  ON ED.ECouponDrawID = EDP.ECouponDrawID
		LEFT JOIN  coc_ECouponDrawLanguages   EDL(NOLOCK) ON EDL.ECouponDrawID = EDP.ECouponDrawID
				AND EDL.LanguageID = @LanguageID
				AND EDL.ResourceKey = 'LocationDescription'
		INNER JOIN coc_ECoupons               EC(NOLOCK)  ON EC.ECouponID = ED.ECouponID
		INNER JOIN coc_EServices              ES(NOLOCK)  ON ES.EServiceID = EC.EServiceID
		left join  coc_WinnerVoucherMapping   WVM(NOLOCK) ON WVM.ECouponWinnerID=EW.ECouponWinnerID
		WHERE (@ECouponID IS NULL OR ED.ECouponID = @ECouponID ) AND ( @CorporateID IS NULL OR ES.CorporateID = @CorporateID ) AND ( @DrawID IS NULL OR ED.ECouponDrawID = @DrawID ) AND NOT ( @corporateID IS NULL AND @drawID IS NULL AND @ecouponID IS NULL ) AND WVM.VoucherID is not null)

	end
	else if (@Type=2)
		begin
			INSERT INTO @TEMPTABLE
			SELECT EW.ECouponWinnerID               
			,      EW.DrawDateTime                  
			,      EDL.Value                         AS Location
			,      EW.MobileNumber                  
			,      EW.Email                         
			,      EW.ConsumerName                  
			AS                                          ConsumerName
			,      ISNULL(EW.PrizeDetail, EPL.Value) AS PrizeDetail
			,      EW.ECouponPrizeID                
			,      EW.ConsumerName                  
			AS                                          FirstName
			,      ''                                AS SecondName
			,      WVM.VoucherID                    
			FROM       coc_ECouponWinners         EW(NOLOCK)         
			LEFT JOIN  coc_Consumers              C(NOLOCK)   ON C.ConsumerID = EW.ConsumerID
			INNER JOIN coc_ECouponDrawPrizes      EDP(NOLOCK) ON EDP.ECouponDrawPrizeID = EW.ECouponDrawPrizeID
			INNER JOIN coc_ECouponPrizesLanguages EPL(NOLOCK) ON EPL.ECouponPrizeID = EDP.ECouponPrizeID
					AND EPL.LanguageID = @LanguageID
					AND EPL.ResourceKey = 'Name'
			INNER JOIN coc_ECouponDraw            ED(NOLOCK)  ON ED.ECouponDrawID = EDP.ECouponDrawID
			LEFT JOIN  coc_ECouponDrawLanguages   EDL(NOLOCK) ON EDL.ECouponDrawID = EDP.ECouponDrawID
					AND EDL.LanguageID = @LanguageID
					AND EDL.ResourceKey = 'LocationDescription'
			INNER JOIN coc_ECoupons               EC(NOLOCK)  ON EC.ECouponID = ED.ECouponID
			INNER JOIN coc_EServices              ES(NOLOCK)  ON ES.EServiceID = EC.EServiceID
			left join  coc_WinnerVoucherMapping   WVM(NOLOCK) ON WVM.ECouponWinnerID=EW.ECouponWinnerID
			WHERE (
				@ECouponID IS NULL
				OR ED.ECouponID = @ECouponID
				)
				AND (
				@CorporateID IS NULL
				OR ES.CorporateID = @CorporateID
				)
				AND (
				@DrawID IS NULL
				OR ED.ECouponDrawID = @DrawID
				)
				AND NOT (
				@corporateID IS NULL
				AND @drawID IS NULL
				AND @ecouponID IS NULL
				)
				AND WVM.VoucherID is null

			ORDER BY convert(date,DrawDateTime) desc
			,        EW.ECouponWinnerID asc -- ED.ECouponDrawID desc, EDP.ECouponPrizeID -- DrawDateTime desc, ED.ECouponDrawID desc
			OFFSET @SKIP ROWS -- skip 10 rows
			FETCH NEXT @TAKE ROWS ONLY;-- take 10 rows

			SET @TotalRecords = (SELECT count(*)
			FROM       coc_ECouponWinners         EW(NOLOCK)         
			LEFT JOIN  coc_Consumers              C(NOLOCK)   ON C.ConsumerID = EW.ConsumerID
			INNER JOIN coc_ECouponDrawPrizes      EDP(NOLOCK) ON EDP.ECouponDrawPrizeID = EW.ECouponDrawPrizeID
			INNER JOIN coc_ECouponPrizesLanguages EPL(NOLOCK) ON EPL.ECouponPrizeID = EDP.ECouponPrizeID
					AND EPL.LanguageID = @LanguageID
					AND EPL.ResourceKey = 'Name'
			INNER JOIN coc_ECouponDraw            ED(NOLOCK)  ON ED.ECouponDrawID = EDP.ECouponDrawID
			LEFT JOIN  coc_ECouponDrawLanguages   EDL(NOLOCK) ON EDL.ECouponDrawID = EDP.ECouponDrawID
					AND EDL.LanguageID = @LanguageID
					AND EDL.ResourceKey = 'LocationDescription'
			INNER JOIN coc_ECoupons               EC(NOLOCK)  ON EC.ECouponID = ED.ECouponID
			INNER JOIN coc_EServices              ES(NOLOCK)  ON ES.EServiceID = EC.EServiceID
			left join  coc_WinnerVoucherMapping   WVM(NOLOCK) ON WVM.ECouponWinnerID=EW.ECouponWinnerID
			WHERE (@ECouponID IS NULL OR ED.ECouponID = @ECouponID ) AND ( @CorporateID IS NULL OR ES.CorporateID = @CorporateID ) AND ( @DrawID IS NULL OR ED.ECouponDrawID = @DrawID ) AND NOT ( @corporateID IS NULL AND @drawID IS NULL AND @ecouponID IS NULL ) AND WVM.VoucherID is null)

		end
		else
		begin
			INSERT INTO @TEMPTABLE
			SELECT EW.ECouponWinnerID               
			,      EW.DrawDateTime                  
			,      EDL.Value                         AS Location
			,      EW.MobileNumber                  
			,      EW.Email                         
			,      EW.ConsumerName                  
			AS                                          ConsumerName
			,      ISNULL(EW.PrizeDetail, EPL.Value) AS PrizeDetail
			,      EW.ECouponPrizeID                
			,      EW.ConsumerName                  
			AS                                          FirstName
			,      ''                                AS SecondName
			,      WVM.VoucherID                    
			FROM       coc_ECouponWinners         EW(NOLOCK)         
			LEFT JOIN  coc_Consumers              C(NOLOCK)   ON C.ConsumerID = EW.ConsumerID
			INNER JOIN coc_ECouponDrawPrizes      EDP(NOLOCK) ON EDP.ECouponDrawPrizeID = EW.ECouponDrawPrizeID
			INNER JOIN coc_ECouponPrizesLanguages EPL(NOLOCK) ON EPL.ECouponPrizeID = EDP.ECouponPrizeID
					AND EPL.LanguageID = @LanguageID
					AND EPL.ResourceKey = 'Name'
			INNER JOIN coc_ECouponDraw            ED(NOLOCK)  ON ED.ECouponDrawID = EDP.ECouponDrawID
			LEFT JOIN  coc_ECouponDrawLanguages   EDL(NOLOCK) ON EDL.ECouponDrawID = EDP.ECouponDrawID
					AND EDL.LanguageID = @LanguageID
					AND EDL.ResourceKey = 'LocationDescription'
			INNER JOIN coc_ECoupons               EC(NOLOCK)  ON EC.ECouponID = ED.ECouponID
			INNER JOIN coc_EServices              ES(NOLOCK)  ON ES.EServiceID = EC.EServiceID
			left join  coc_WinnerVoucherMapping   WVM(NOLOCK) ON WVM.ECouponWinnerID=EW.ECouponWinnerID
			WHERE (
				@ECouponID IS NULL
				OR ED.ECouponID = @ECouponID
				)
				AND (
				@CorporateID IS NULL
				OR ES.CorporateID = @CorporateID
				)
				AND (
				@DrawID IS NULL
				OR ED.ECouponDrawID = @DrawID
				)
				AND NOT (
				@corporateID IS NULL
				AND @drawID IS NULL
				AND @ecouponID IS NULL
				)

			ORDER BY convert(date,DrawDateTime) desc
			,        EW.ECouponWinnerID asc -- ED.ECouponDrawID desc, EDP.ECouponPrizeID -- DrawDateTime desc, ED.ECouponDrawID desc
			OFFSET @SKIP ROWS -- skip 10 rows
			FETCH NEXT @TAKE ROWS ONLY;-- take 10 rows

			SET @TotalRecords = (SELECT count(*)
			FROM       coc_ECouponWinners         EW(NOLOCK)         
			LEFT JOIN  coc_Consumers              C(NOLOCK)   ON C.ConsumerID = EW.ConsumerID
			INNER JOIN coc_ECouponDrawPrizes      EDP(NOLOCK) ON EDP.ECouponDrawPrizeID = EW.ECouponDrawPrizeID
			INNER JOIN coc_ECouponPrizesLanguages EPL(NOLOCK) ON EPL.ECouponPrizeID = EDP.ECouponPrizeID
					AND EPL.LanguageID = @LanguageID
					AND EPL.ResourceKey = 'PrizeDetail'
			INNER JOIN coc_ECouponDraw            ED(NOLOCK)  ON ED.ECouponDrawID = EDP.ECouponDrawID
			LEFT JOIN  coc_ECouponDrawLanguages   EDL(NOLOCK) ON EDL.ECouponDrawID = EDP.ECouponDrawID
					AND EDL.LanguageID = @LanguageID
					AND EDL.ResourceKey = 'LocationDescription'
			INNER JOIN coc_ECoupons               EC(NOLOCK)  ON EC.ECouponID = ED.ECouponID
			INNER JOIN coc_EServices              ES(NOLOCK)  ON ES.EServiceID = EC.EServiceID
			left join  coc_WinnerVoucherMapping   WVM(NOLOCK) ON WVM.ECouponWinnerID=EW.ECouponWinnerID
			WHERE (@ECouponID IS NULL OR ED.ECouponID = @ECouponID ) AND ( @CorporateID IS NULL OR ES.CorporateID = @CorporateID ) AND ( @DrawID IS NULL OR ED.ECouponDrawID = @DrawID ) AND NOT ( @corporateID IS NULL AND @drawID IS NULL AND @ecouponID IS NULL ) )
		end


	SELECT ECouponWinnerID
	,      DrawDateTime   
	,      [Location]     
	,      MobileNumber   
	,      Email          
	,      ConsumerName   
	,      PrizeDetail    
	,      ECouponPrizeID 
	,      FirstName      
	,      SecondName     
	,      @TotalRecords   TotalRecords
	FROM @TEMPTABLE;

	select ev.EVoucherID    
	,      cvl.ResourceValue as VoucherName
	from       coc_EVoucher(nolock)          ev 
	inner join coc_EVoucherLanguages(nolock) cvl on cvl.EVoucherID=ev.EVoucherID
			and cvl.LanguageID=@LanguageID and cvl.ResourceKey='VoucherName'
	where ev.expirydate<=getdate() and ev.isactive=1 and ev.isdeleted=0

	Set @SpResponseStatus=1;
	Set @SpResponseMessage='Success';
	Set @SpErrorDetails=NULL;

	END TRY

	BEGIN CATCH

	Set @SpResponseStatus=0;

	Set @SpResponseMessage='GenericError';

	Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';

	END CATCH

	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_InsertContactUs]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Abdul Dayyan  
-- Create date: 13 October 2019  
-- Description: Insert Contact Details on ContactUs page  
-- =============================================  
CREATE PROCEDURE [dbo].[core_usp_InsertContactUs]  
 -- Add the parameters for the stored procedure here  
 @ContactType nvarchar(50),  
 @Subject nvarchar(100),  
 @Name varchar(200),  
 @Email nvarchar(100),  
 @City nvarchar(100),  
 @ContactNumber nvarchar(50),  
 @Question nvarchar(max),  
 @CreatedDate datetime=NULL,  
 @LanguageID INTEGER = 1,  
 @UserID bigint=null,  
 @RoleID bigint=null,  
  @ImpersonationUserID bigint=null,  
 @SpResponseStatus int = null out,  
 @SpResponseMessage nvarchar(max) = null out,  
 @SpErrorDetails nvarchar(max) = null out  
AS       
 Begin Try        
  Set @SpResponseStatus=1;       
  Set @SpResponseMessage='Success';      
  Set @SpErrorDetails='Success';   
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
  
 INSERT INTO [dbo].[core_coc_ContactUs]([ContactType],[Subject],[Name],[Email],[City],[ContactNumber],[Question],[CreatedDate]) VALUES  
           (  
     @ContactType,@Subject,@Name,@Email,@City,@ContactNumber,@Question,getdate()  
     )  
  
END TRY                  
  BEGIN CATCH        
  Set @SpResponseStatus=0;       
  Set @SpResponseMessage='GenericError';      
  Set @SpErrorDetails ='ErrorNumber : <' +Convert(nvarchar(50),ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(nvarchar(50),ERROR_SEVERITY())+'>, ErrorState : <'+Convert(nvarchar(50),ERROR_STATE())+'> , ErrorProcedure : <'+Convert(nvarchar(50),ERROR_PROCEDURE())+'> , ErrorLine <'+Convert(nvarchar(50),ERROR_LINE())+'> ErrorMessage : <'+Convert(nvarchar(50),ERROR_MESSAGE())+'>';      
  
  END CATCH                  
 SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_InsertGeneralNotification]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_InsertGeneralNotification]  
  @MessageHeadingEN nvarchar(max)
 ,@MessageHeadingAR nvarchar(max)
 ,@MessageEN nvarchar(max)
 ,@MessageAR nvarchar(max)
 ,@ScheduleFromDate varchar(100) 
 ,@ScheduleToDate varchar(100)
 ,@IsActive         bit
 ,@IsBrodaCast      bit 
 ,@PushNotificationDate  varchar(100) 
 ,@IsSendPushNotification bit 
 ,@IsShowAsAppNotification bit 
 ,@LanguageID int=1   
 ,@CreatedBy      int =null            
 ,@UserID int=null               
 ,@RoleID int=null                
 ,@ImpersonationUserID bigint=null                 
 ,@SpResponseStatus int out               
 ,@SpResponseMessage nvarchar(max) out                 
 ,@SpErrorDetails nvarchar(max)    out                   
 AS                    
 SET NOCOUNT ON                   
 BEGIN                     
  BEGIN TRY   
     Declare @GenerateNotificationId bigint;
	 Declare @NotificationSendID bigint;
	 BEGIN TRANSACTION GeneralNotification 
     --inserting in main table
      insert into coc_GeneralNotification   
	  select @ScheduleFromDate,@ScheduleToDate,@IsActive,
       @IsBrodaCast, convert(varchar,	@PushNotificationDate,121)
      ,@CreatedBy
      ,@IsSendPushNotification
      ,@IsShowAsAppNotification

	  SELECT @GenerateNotificationId=SCOPE_IDENTITY()

	  --Insert in sub tables sends and language table 
	   insert into coc_NotificationSends select null, @ScheduleFromDate,4,null,null,null,0,null,0,@GenerateNotificationId
       
	    SELECT @NotificationSendID=SCOPE_IDENTITY() 
		insert into coc_NotificationSendLanguages select  @NotificationSendID,1,@MessageHeadingEN,@MessageEN
		insert into coc_NotificationSendLanguages select  @NotificationSendID,2,@MessageHeadingAR,@MessageAR

       Set @SpResponseStatus=1;   
       Set @SpResponseMessage='Success';   
	   set @SpErrorDetails='Success';  
	    COMMIT TRANSACTION GeneralNotification 
  END TRY                
              
  BEGIN CATCH                
              
  Set @SpResponseStatus=0;  
  Set @SpResponseMessage='GenericError';    
  Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,
  ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, 
  ErrorState : <'+convert(varchar(500), Error_state())+'> , 
  ErrorProcedure : <'+Error_procedure() +'>,
  ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                        
    ROLLBACK TRANSACTION GeneralNotification            
  END CATCH               
              
 SET NOCOUNT OFF                 
              
 END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_InsertMall]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ======================================================================                
-- Author     :  Shaik  use eCoponTest2019July14              
-- Create date    :  10-Sept-2019                
-- Description    :  Get List of Malls core_usp_InsertMall             
-- ======================================================================                
CREATE PROCEDURE  [dbo].[core_usp_InsertMall]             
  @MallName_EN nvarchar(200),  
  @MallName_AR nvarchar(200),  
  @MallImage nvarchar(200),  
  @IsActive bit ,  
  @TermsAndConditions_EN nvarchar(max), 
  @TermsAndConditions_AR  nvarchar(max), 
  @Description nvarchar(max),  
  @CountryID int,  
  @CityID int,  
  @LocationUrl  nvarchar(200),  
  @LanguageID int=1,       
  @UserID bigint=null,    
  @RoleID bigint=null,    
  @ImpersonationUserID bigint=null,    
  @SpResponseStatus int out,    
  @SpResponseMessage nvarchar(max) out,    
  @SpErrorDetails nvarchar(max)    out              
AS     
 Begin Try      
	 Set @SpResponseStatus=1;     
	 Set @SpResponseMessage='Success';    
	 Set @SpErrorDetails='Success';     
     
	insert into core_coc_Mall(MallName_EN,MallName_AR,MallImage,IsActive,TermsAndConditions_EN,TermsAndConditions_AR,[Description],CountryID,CityID,LocationUrl,CreatedBy,CreatedDate)
	 Values(@MallName_EN,@MallName_AR,@MallImage,@IsActive,@TermsAndConditions_EN,@TermsAndConditions_AR,@Description,@CountryID,@CityID,@LocationUrl,@UserID,GETDATE())  
                
  END TRY                
  BEGIN CATCH      
  Set @SpResponseStatus=0;     
  Set @SpResponseMessage='GenericError';    
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
  END CATCH                
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_InsertWebNotification]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_InsertWebNotification]              
@WebNotificationTypeID int,            
@RedirectionLink Nvarchar(500)=null,           
@ParamValue bigint=null,          
@AssignedToAdmin bit=null,     
@AssignedToCorporateID bigint=null,    
@WebNotificationMessage  Nvarchar(max),              
@WebNotificationMessageAR  Nvarchar(max),      
@NotificationFor Nvarchar(200)=null,   
@LanguageID INTEGER=1             
,@UserID bigint                  =  null            
,@RoleID bigint                  =  null            
,@ImpersonationUserID bigint     =  null            
,@SpResponseStatus int            out            
,@SpResponseMessage nvarchar(max) out            
,@SpErrorDetails nvarchar(max)    out            
            
AS              
 SET NOCOUNT ON             
  BEGIN  TRY      
  if(@ParamValue=0)    
  begin     
  set @ParamValue=null    
  end    
   if(@AssignedToAdmin=0)    
  begin     
  set @AssignedToAdmin=null    
  end    
   if(@AssignedToCorporateID=0)    
  begin     
  set @AssignedToCorporateID=null    
  end   
  if(@NotificationFor='')    
  begin     
  set @NotificationFor=null    
  end   
    
    
  declare @WebNotificationID bigint=NULL;             
  insert into  coc_core_WebNotifications(WebNotificationDate,WebNotificationTypeID,RedirectionLink,ParamValue,AssignedToAdmin,AssignedToCorporateID,NotificationFor,RequestedByUserID)            
  Values(getdate(),@WebNotificationTypeID,@RedirectionLink,@ParamValue,@AssignedToAdmin,@AssignedToCorporateID,@NotificationFor,@UserID)            
  set @WebNotificationID=(SELECT SCOPE_IDENTITY())            
        
  --English Message        
  insert into coc_WebNotificationLanguages(WebNotificationID,LanguageID,WebNotificationMessage)             
  Values(@WebNotificationID,1,@WebNotificationMessage)          
   --Arabic  Message        
  insert into coc_WebNotificationLanguages(WebNotificationID,LanguageID,WebNotificationMessage)             
  Values(@WebNotificationID,2,@WebNotificationMessageAR)            
          
    Set @SpResponseStatus=1;            
 Set @SpResponseMessage='Success';            
 Set @SpErrorDetails='Success';            
 END TRY            
 BEGIN CATCH            
 Set @SpResponseStatus=0;            
 Set @SpResponseMessage='GenericError';            
 Set @SpErrorDetails ='ErrorNumber';            
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,           
 ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>,          
 ErrorState : <'+convert(varchar(500), Error_state())+'> ,           
 ErrorProcedure : <'+Error_procedure() +'> ,          
 ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';            
            
 END CATCH      
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_LoadVoucherCategory]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_LoadVoucherCategory]	

	 @LanguageID INTEGER=	1

AS

	SET NOCOUNT ON
		BEGIN

		--	--Table[0]--

		--	SELECT *

		--			FROM coc_EVoucherCategory (NOLOCK) 

		----Table[1]--

		--	SELECT *

		--			FROM coc_EVoucherCategoryLanguages (NOLOCK) 

		--		Updated By VIkram		28-Nov-2017				[START]

			SELECT
				coc_EVoucherCategory.EVoucherCategoryID AS VoucherCategoryID, coc_EVoucherCategoryLanguages.ResourceValue AS VoucherCategoryName
			FROM
				coc_EVoucherCategory(NOLOCK) INNER JOIN
				coc_EVoucherCategoryLanguages(NOLOCK) ON coc_EVoucherCategory.EVoucherCategoryID = coc_EVoucherCategoryLanguages.EVoucherCategoryID
			WHERE
				coc_EVoucherCategory.IsActive				=	1	AND
				coc_EVoucherCategoryLanguages.LanguageID	=	@LanguageID
		--		Updated By VIkram		28-Nov-2017				[END]
		END
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_Mobile_PreConsumerGenerateOTP]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_Mobile_PreConsumerGenerateOTP]        
  @OtpTypeID INTEGER          
 ,@PreMobileNumber [dbo].[Mobile] = null        
 ,@EmailID nvarchar(50) = null        
 ,@CountryID INT        
 ,@SpResponseStatus int=NULL  OUTPUT        
 ,@SpResponseMessage nvarchar(max)=NULL  OUTPUT        
 ,@SpErrorDetails nvarchar(max)=NULL  OUTPUT        
AS          
SET NOCOUNT ON    
        IF @PreMobileNumber = ''
            SET @PreMobileNumber = NULL

        if(@OtpTypeID = 3 or @OtpTypeID = 4)
         begin
           if(@PreMobileNumber is not null and not exists (select PrimaryMobile from coc_Consumers(nolock) where PrimaryMobile = @PreMobileNumber and IsActive = 1 and IsDeleted = 0 and UserID is not null ))
              begin

                     set  @SpResponseStatus=0;         
                     set  @SpResponseMessage= 'UserDoesNotExists';
                     set  @SpErrorDetails=  'User Does Not Exists';
                     select null as Otp,null as OtpID ,@PreMobileNumber as PrimaryMobile,@EmailID as EmailID, @CountryID as CountryID;
                     return;
              end
           else if(@EmailID is not null and not exists (select EmailID from coc_Consumers(nolock) where EmailID = @EmailID and IsActive = 1 and IsDeleted = 0 and UserID is not null ))
              begin

                     set  @SpResponseStatus=0;         
                     set  @SpResponseMessage= 'UserDoesNotExists';
                     set  @SpErrorDetails=  'User Does Not Exists';
                     select null as Otp,null as OtpID ,@PreMobileNumber as PrimaryMobile,@EmailID as EmailID, @CountryID as CountryID;
                     return;
              end         
            
         end

BEGIN TRY          
 BEGIN TRANSACTION Trn_PreGenerateOTP            
 DECLARE @OtpID INTEGER = NULL          
 DECLARE @Otp INTEGER = NULL          
 DECLARE @LanguageID INTEGER          
 DECLARE @Upper INTEGER = 1000          
 DECLARE @Lower INTEGER = 9999          
 DECLARE @Minutes INTEGER          
  /*OtyTypeID : 1 for New Registration verification,       
                2 for New Registration Resend OTPverification ,       
                3 for ForgOTPassword OTP verification,       
                4 for ResendForgOTPassword OTP verification*/      
 SELECT @LanguageID = LanguageID          
 FROM coc_Languages(NOLOCK)          
 WHERE IsDefaultLanguage = 1          
          
 SELECT @Otp = ROUND(((@Upper - @Lower - 1) * RAND() + @Lower), 0)          
          
 SELECT @Minutes = SetupValue          
 FROM COC_SystemSetups(NOLOCK)          
 WHERE SystemSetupID = 504          
        
          
 IF ISNULL(@OtpID, 0) = 0          
 BEGIN          
  INSERT INTO coc_OTP (OtpTypeID,Otp,OTPDate,OtpExpity,IsActive)          
  SELECT @OtpTypeID,@Otp,GETDATE(),DATEADD(minute, @Minutes, GETDATE()),1;      
        
  SET @OtpID = SCOPE_IDENTITY();          
      
  if @PreMobileNumber is not null and not exists(select PrimaryMobile from coc_PreConsumerRegister  WHERE PrimaryMobile = @PreMobileNumber)        
  begin        
    INSERT INTO coc_PreConsumerRegister(PrimaryMobile,CountryID,AddDate,OtpID)         
    select @PreMobileNumber,@CountryID,getdate(),@OtpID        
  end        
  
  else if @EmailID is not null and not exists(select EmailID from coc_PreConsumerRegister  WHERE EmailID = @EmailID)        
  begin        
    INSERT INTO coc_PreConsumerRegister(EmailID,CountryID,AddDate,OtpID)         
    select @EmailID,@CountryID,getdate(),@OtpID        
  end        
  
 END          
if @PreMobileNumber is not null          
UPDATE coc_PreConsumerRegister  SET OtpID = @OtpID, IsVerified=0,EditDate=GETDATE()  WHERE PrimaryMobile = @PreMobileNumber;  
  
else if @EmailID is not null          
UPDATE coc_PreConsumerRegister  SET OtpID = @OtpID, IsVerified=0,EditDate=GETDATE()  WHERE EmailID = @EmailID;  
      
select @Otp as Otp,@OtpID as OtpID ,@PreMobileNumber as PrimaryMobile,@EmailID as EmailID, @CountryID as CountryID        
        
 set  @SpResponseStatus= 1         
 set  @SpResponseMessage= 'success'         
 set  @SpErrorDetails=  'success'         
 COMMIT TRANSACTION Trn_PreGenerateOTP          
END TRY          
          
BEGIN CATCH          
 ROLLBACK TRANSACTION Trn_PreGenerateOTP          
 set  @SpResponseStatus= 1         
 set  @SpResponseMessage= 'Generic Error'         
 set  @SpErrorDetails= ERROR_MESSAGE()        
END CATCH          
          
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_MobileAndWebIsValidUser]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_MobileAndWebIsValidUser] 
 @LanguageID int                  = 1  
,@UserName NVARCHAR(500)           
,@SpResponseStatus int            = null OUTPUT  
,@SpResponseMessage nvarchar(max) = null OUTPUT  
,@SpErrorDetails nvarchar(max)    = null OUTPUT  
AS  
 SET NOCOUNT ON    
BEGIN    
    
 SELECT TOP (1) US.UserID                                                            
 ,              UserName                                                             
 ,              US.[Password]                                                        
 ,              US.IsActive                                                          
 ,              RoleID                                                               
 ,              US.MobileNumber                                                      
 ,              US.EmailID                                                           
 ,              LS.LoginTime                                                         
 ,              CASE WHEN ISNULL(CE.CorporateID, '') = '' THEN ISNULL(CR.CorporateID, '')    
                                                          ELSE CE.CorporateID END CorporateID    
 ,              CR.CRNumber                                                          
 ,              CR.CorporateName                                                     
 ,              cr.JCCICode                                                          
 ,              US.ResetRequired                                                     
 ,              ISNULL(CS.ConsumerID, 0)                                          [ConsumerID]    
 ,              ISNULL(CS.IsVerified,1)                                           [IsVerified]    
 ,              CS.OtpID                                                          [VerificationCode]    
 ,              (CASE WHEN ROLEID = 3 THEN ISNULL(CR.FirstName, isnull(CR.CorporateName,''))    
                                      ELSE CASE WHEN ROLEID = 1 THEN ISNULL(US.FullName, '')    
                                      ELSE ISNULL(CS.FirstName, '') end END ) FirstName    
 ,              ISNULL(US.FullName, '')                                           FullName    
 ,              ISNULL(CU.EmployeeName, '')                                       EmployeeName    
 ,              CASE WHEN ROLEID = 3 THEN CA.City    
                                     ELSE CL.City END                             [City]    
 ,              CASE WHEN ROLEID = 3 THEN SG.Country    
                                     ELSE CG.Country END                          [Country]    
 ,              CASE WHEN ISNULL(CS.Address1, '') = '' THEN 'Address'    
                                                       ELSE CS.Address1 END       Address1    
 ,              CASE WHEN ROLEID = 3 THEN ISNULL(CR.LastName, '')    
                                     ELSE CS.FamilyName END                       [FamilyName]    
 ,              CR.LogoFile                                                          
 ,              (select count(*) as NotificationCount    
 from (    
  SELECT CN.HasChecked ,ISNULL(ES.CompetitionID,0) CompetitionID    
 --, Case when (ISNULL(ES.CompetitionID,0)= 43 and ISNULL(NL.[Message],'') not like '%@barcode%') or EB.Barcode IS null THEN 'B'   else 'Q' END BarcodeType    
 , CO.LogoFile      
 FROM       coc_ConsumerNotifications(NOLOCK) CN    
 INNER JOIN coc_Consumers (NOLOCK)                CU ON CU.ConsumerID=CN.ConsumerID    
 INNER JOIN coc_NotificationSends(NOLOCK)         NS ON CN.NotificationSendID=NS.NotificationSendID    
 INNER JOIN coc_NotificationSendLanguages(NOLOCK) NL ON NL.NotificationSendID=CN.NotificationSendID AND LanguageID=1 --AND SendingType != 4    
 INNER JOIN coc_Notifications(NOLOCK)             NT ON NT.NotificationID=NS.NotificationID    
 --LEFT JOIN  coc_EServiceBarcodes(NOLOCK)          EB ON EB.NotificationID=NS.NotificationID AND CN.ConsumerID=EB.ConsumerID AND EB.ConsumerNotificationID=CN.ConsumerNotificationID    
 LEFT JOIN  coc_EServices(NOLOCK)                 ES ON ES.EServiceID=NT.EServiceID    
 LEFT JOIN  coc_corporates(NOLOCK)                CO ON CO.CorporateID =ES.CorporateID    
 WHERE ISNULL(CN.ConsumerID,0)=CS.ConsumerID) as a    
 where a.HasChecked=0)NotificationCount    
 FROM      [coc_Users]            US(NOLOCK)    
 LEFT JOIN [coc_LoginUsers]       LS(NOLOCK) ON LS.UserID = US.UserID AND LS.UserID IS NOT NULL    
 LEFT JOIN [coc_Corporates]       CR(NOLOCK) ON CR.UserID = US.UserID    
 LEFT JOIN [coc_CorporateUsers]   CE(NOLOCK) ON CE.UserID = US.UserID    
 LEFT JOIN [coc_Consumers]        CS(NOLOCK) ON CS.UserID = US.UserID    
 LEFT JOIN [coc_CorporateUsers]   CU(NOLOCK) ON CU.UserID = US.UserID    
 LEFT JOIN [coc_CityLanguages]    CL(NOLOCK) ON CS.CityID = CL.CityID  AND CL.LanguageID = 1    
 LEFT JOIN [coc_CountryLanguages] CG(NOLOCK) ON CS.CountryID = CG.CountryID  AND CG.LanguageID = 1    
 LEFT JOIN [coc_CityLanguages]    CA(NOLOCK) ON CR.CityID = CA.CityID  AND CA.LanguageID = 1    
 LEFT JOIN [coc_CountryLanguages] SG(NOLOCK) ON CR.CountryID = SG.CountryID  AND SG.LanguageID = 1    
 WHERE (US.EmailID = @UserName  OR US.MobileNumber = @UserName  OR CR.CRNumber = @UserName )  AND US.IsActive=1 and us.IsDeleted = 0    
 set @SpResponseStatus =1;    
 set @SpResponseMessage = 'Success';    
 set @SpErrorDetails = 'Success';    
 SET NOCOUNT OFF    
END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_MobileWebConsumerRegistration]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================                        
-- Author:  <Shaik Layeeqh>                        
-- Create date: <Oct-28-2020>                  
-- Description: core_usp_MobileWebConsumerRegistration                    
-- =============================================                    
                    
CREATE PROCEDURE [dbo].[core_usp_MobileWebConsumerRegistration]                    
 @FullName NVARCHAR(200)                      
,@PrimaryMobile VARCHAR(15)                          
,@EmailID VARCHAR(100)                 
,@Gender SMALLINT=NULL                
,@NationalityID int=NULL                
,@CountryID int=183                
,@CityID int=NULL                
,@IDType int=NULL                
,@IDNumber nvarchar(100)=NULL                
,@Password VARCHAR(200)                      
,@ErrorMessage VARCHAR(500)       OUTPUT                    
,@LanguageID int                 =  1                    
,@UserID bigint                  =  null                    
,@RoleID bigint                  =  null                    
,@ImpersonationUserID bigint     =  null                    
,@SpResponseStatus int            out                    
,@SpResponseMessage nvarchar(max) out                    
,@SpErrorDetails nvarchar(max)    out                    
,@UseExistingDetails bit = 0                
AS                    
                    
 BEGIN TRY                    
 if @LanguageID=0                    
 begin                    
  set @LanguageID=1                    
 end             
           
 if @Gender=0                    
 begin                    
  set @Gender=NULL                    
 end             
 if @NationalityID=0                    
 begin                    
  set @NationalityID=NULL                    
 end           
if @CountryID=0                    
 begin                    
  set @CountryID=NULL                    
 end          
if @CityID=0                    
 begin                    
  set @CityID=NULL                    
 end           
if @IDType=0                    
 begin                    
  set @IDType=NULL                    
 end          
if @IDNumber=''                    
 begin                    
  set @IDNumber=NULL;           
  set @IDType = null;        
 end          
          
 if exists(Select UserIdentityNumber From coc_Consumers(NoLock) where UserIdentityNumber = @IDNumber) ----if (UserIdentityNumber check)          
   begin            
  SET @ErrorMessage = 'AlreadyExistsUserIdentityNumber'                   
  Set @SpResponseStatus=0;                    
  Set @SpResponseMessage='AlreadyExistsUserIdentityNumber';                    
  Set @SpErrorDetails='Already Exists User Identity Number';                 
  Return;          
   end --end if (UserIdentityNumber check)          
          
 BEGIN TRANSACTION MobilWebConsumerRegistration                    
                    
 DECLARE @LoyaltyPoint INTEGER;                    
 DECLARE @MemberShipID NVARCHAR(40) = NEWID();                    
 DECLARE @yearDiff INTEGER;                    
 DECLARE @AgeGroupID INTEGER;                    
 DECLARE @ConsumerID INTEGER;                    
 DECLARE @cocUserID INT;                    
 DECLARE @cocConsumerID INT;                    
 DECLARE @cocOtpID INT;                    
 DECLARE @cocOtpExpiry DATETIME;                    
 select @cocOtpID=OtpID from coc_PreConsumerRegister where PrimaryMobile =@PrimaryMobile                   
                 
                
  --if user exists in consumer table but not in users table then                 
   IF EXISTS (SELECT PrimaryMobile FROM coc_Consumers(NOLOCK) WHERE PrimaryMobile=@PrimaryMobile AND UserID IS NULL AND  IsNUll(IsVerified,0) = 0 and IsNull(IsDeleted,0) = 0)                 
   BEGIN                
   SELECT @LoyaltyPoint = SetupValue FROM coc_LoyaltyPointSetups(NOLOCK) WHERE LoyaltyPointSetupID = 101;                  
   SELECT @ConsumerID = ConsumerID from coc_Consumers(nolock) where   PrimaryMobile=@PrimaryMobile AND UserID IS NULL AND  IsNUll(IsVerified,0) = 0 and IsNull(IsDeleted,0) = 0;                    
  INSERT INTO coc_Users (                      
      UserName                      
      ,[Password]                      
      ,RoleID                      
      ,MobileNumber                      
      ,EmailID                      
      ,ResetRequired                      
      ,CreatedDate                  
   ,IsActive                
   ,IsDeleted                
   ,FullName                
      )                      
     SELECT @EmailID                      
      ,@Password                      
      ,5                      
      ,@PrimaryMobile                      
      ,@EmailID                      
      ,0                      
      ,GETDATE()                      
      ,1                
   ,0                
   ,@FullName                
     SET @USERID = SCOPE_IDENTITY()                  
                
     if(@UseExistingDetails = 0)                
        Update coc_Consumers set MembershipNumber=IsNull(MembershipNumber,CONVERT(NVARCHAR(10), @MemberShipID)), UserID=@USERID,LoyaltyPoint=@LoyaltyPoint,OtpID=@cocOtpID,IsActive=1,IsVerified=1,IsDeleted=0                
        ,FullName=@FullName, EmailID=@EmailID,Gender=@Gender,NationalityID=@NationalityID,                
         CountryID=@CountryID,CityID=@CityID,UserIdentityTypeID=@IDType,UserIdentityNumber=@IDNumber                
         where ConsumerID=@ConsumerID;                
     else                
       begin                
    Update coc_Consumers set MembershipNumber=IsNull(MembershipNumber,CONVERT(NVARCHAR(10), @MemberShipID)),UserID=@USERID,LoyaltyPoint=@LoyaltyPoint,OtpID=@cocOtpID                
      ,FullName = @FullName                
    --,FirstName = @FullName                
    --,EmailID = @EmailID                
    ,IsActive=1                
    ,IsVerified=1                
    ,IsDeleted=0  
	,IsMobileVerified=1
    ,Gender=@Gender,NationalityID=@NationalityID,                
    CountryID=@CountryID,CityID=@CityID,UserIdentityTypeID=@IDType,UserIdentityNumber=@IDNumber                
    where ConsumerID=@ConsumerID;                
   end                
                     
     INSERT INTO coc_ConsumerPointDetails (                      
      ConsumerID                      
      ,PointDate                      
      ,LoyaltyPoint                      
      ,RedeemPoint                      
      ,PointSource              
      )                      
     SELECT @ConsumerID                      
      ,GETDATE()                      
      ,@LoyaltyPoint                      
      ,0                      
      ,101            
   if(@ConsumerID is not null and @ConsumerID != 0)            
     begin   
	 
	 SELECT TOP (1) US.UserID                                                                
 ,              UserName                                                                 
 ,              US.[Password]                                                            
 ,              US.IsActive                                                              
 ,              RoleID                                                                   
 ,              US.MobileNumber                                                          
 ,              US.EmailID                                                               
 ,              LS.LoginTime                                                             
 ,              US.ResetRequired                                                         
 ,              ISNULL(CS.ConsumerID, 0)                                          [ConsumerID]        
 ,              ISNULL(CS.IsVerified,1)                                           [IsVerified]        
 ,              CS.OtpID                                                          [VerificationCode]        
 ,              CS.FirstName        
 ,              COALESCE(CS.FullName, CS.FirstName,CS.SecondName,CS.FamilyName) FullName        
 ,              CL.City        
 ,              CG.Country       
 ,              CS.Address1        
 ,              CS.FamilyName       
 ,              CS.ImageFile       
      
 FROM      [coc_Users]            US(NOLOCK)        
 LEFT JOIN [coc_LoginUsers]       LS(NOLOCK) ON LS.UserID = US.UserID AND LS.UserID IS NOT NULL        
 LEFT JOIN [coc_Consumers]        CS(NOLOCK) ON CS.UserID = US.UserID        
 LEFT JOIN [coc_CityLanguages]    CL(NOLOCK) ON CS.CityID = CL.CityID  AND CL.LanguageID = 1        
 LEFT JOIN [coc_CountryLanguages] CG(NOLOCK) ON CS.CountryID = CG.CountryID  AND CG.LanguageID = 1        
 WHERE    CS.ConsumerID = @ConsumerID

   SET @ErrorMessage = @ConsumerID                   
   Set @SpResponseStatus=1;                    
   Set @SpResponseMessage='Success';                    
   Set @SpErrorDetails='Success';                 
  end            
   else            
     begin            
   SET @ErrorMessage = 'Data Not Saved'               
   Set @SpResponseStatus=0;            
   Set @SpResponseMessage='GenericError';                    
   Set @SpErrorDetails ='Data Not Saved';                
  end            
    COMMIT TRANSACTION MobilWebConsumerRegistration --end transaction                
 Return;                
  END                
                
                
                
   --if email exists in consumer table and not verified :                    
 IF EXISTS (                    
  SELECT 1                    
  FROM coc_Consumers(NOLOCK)                    
  WHERE EmailID = @EmailID                    
   AND IsVerified = 0 and IsDeleted = 0                    
  ) --if begin                    
 BEGIN                    
  SELECT @cocUserID = UserID                    
  ,      @cocConsumerID = ConsumerID                    
  ,      @cocOtpID = otpid                    
  FROM coc_Consumers (NOLOCK)                    
  WHERE EmailID = @EmailID                    
   AND IsVerified = 0 and IsDeleted = 0;                    
                     
  SELECT @cocOtpExpiry = OtpExpity                    
  FROM coc_OTP (NOLOCK)                    
  WHERE otpID = @cocOtpID;                    
                    
  IF (GetDate() > @cocOtpExpiry) --if begin                    
  BEGIN                    
   UPDATE coc_Consumers                    
   SET IsDeleted = 1                   
   ,   IsActive  = 0                   
   ,FullName=@FullName,PrimaryMobile=@PrimaryMobile,EmailID=@EmailID,Gender=@Gender,NationalityID=@NationalityID,                
    CountryID=@CountryID,CityID=@CityID,UserIdentityTypeID=@IDType,UserIdentityNumber=@IDNumber                
   WHERE ConsumerID = @cocConsumerID;                    
                    
   UPDATE coc_Users                    
   SET IsDeleted = 1                    
   ,   IsActive  = 0                 
   ,FullName=@FullName                
   WHERE UserID = @cocUserID;         
  END --end if                    
 END --end if                    
                    
 --if mobile exists in consumer table and not verified:                    
 IF EXISTS (                    
  SELECT 1                    
  FROM coc_Consumers(NOLOCK)                    
  WHERE PrimaryMobile = @PrimaryMobile                    
   AND IsVerified = 0 and IsDeleted = 0                    
  ) --if begin                    
 BEGIN                    
  SELECT @cocUserID = UserID                    
  ,      @cocConsumerID = ConsumerID                    
  ,      @cocOtpID = otpid                    
  FROM coc_Consumers (NOLOCK)                    
  WHERE PrimaryMobile = @PrimaryMobile                    
   AND IsVerified = 0 and IsDeleted = 0;                    
                    
  SELECT @cocOtpExpiry = OtpExpity                    
  FROM coc_OTP (NOLOCK)                    
  WHERE otpID = @cocOtpID;                    
                    
  IF (GetDate() > @cocOtpExpiry) --if begin                    
  BEGIN                    
   UPDATE coc_Consumers                    
   SET IsDeleted = 1                    
   ,   IsActive  = 0                  
   ,FullName=@FullName,PrimaryMobile=@PrimaryMobile,EmailID=@EmailID,Gender=@Gender,NationalityID=@NationalityID,                
    CountryID=@CountryID,CityID=@CityID,UserIdentityTypeID=@IDType,UserIdentityNumber=@IDNumber                
   WHERE ConsumerID = @cocConsumerID;                    
                    
   UPDATE coc_Users                    
   SET IsDeleted = 1                    
   ,   IsActive  = 0                  
   ,FullName=@FullName                
   WHERE UserID = @cocUserID;                    
  END --end if                    
 END --end if                    
                    
 --if email or mobile exists in Consumer or user table and not deleted                    
 IF EXISTS (                    
  SELECT 1                    
  FROM coc_Consumers(NOLOCK)                    
  WHERE (                    
   EmailID = @EmailID                    
   OR PrimaryMobile = @PrimaryMobile                    
   )                    
   AND (IsDeleted = 0 and IsActive = 1)                    
  )                    
  OR EXISTS (                    
  SELECT 1                    
  FROM coc_Users(NOLOCK)                    
  WHERE (                    
   EmailID = @EmailID                    
   OR MobileNumber = @PrimaryMobile                    
   )                    
   AND (IsDeleted = 0 and IsActive = 1)                    
  )                    
 BEGIN                    
  SET @ErrorMessage = 'EmailOrMobileAlreadyExists';       
  Set @SpResponseStatus=0;                    
  Set @SpResponseMessage='EmailOrMobileAlreadyExists';                    
  Set @SpErrorDetails='Email Or Mobile Already Exists';           
   ROLLBACK TRANSACTION MobilWebConsumerRegistration;      
  Return;        
 END                    
 ELSE -- BEGIN ELSE                    
 BEGIN                    
  SELECT @LoyaltyPoint = SetupValue                    
  FROM coc_LoyaltyPointSetups(NOLOCK)                    
  WHERE LoyaltyPointSetupID = 101;                    
                    
  --RoleID 5 is for consumer/Individual User                    
  INSERT INTO coc_Users ( UserName, [Password], RoleID, MobileNumber, EmailID, ResetRequired, CreatedDate ,IsActive,IsDeleted)                    
  SELECT @EmailID                    
  ,      @Password                    
  ,      5                    
  ,      @PrimaryMobile                    
  ,      @EmailID                    
  ,      0                    
  ,      GETDATE()       
  ,1                  
  ,0                  
  SET @USERID = SCOPE_IDENTITY()                    
                    
  INSERT INTO COC_Consumers (FirstName, FullName,  UserID,  PrimaryMobile,  EmailID,Gender,NationalityID,  CountryID,CityID ,  IsActive, AddDate,   IsVerified, OtpID,MembershipNumber,IsEmailVerified,IsDeleted,UserIdentityTypeID,UserIdentityNumber ,IsMobileVerified)       
 
  VALUES(@FullName, @FullName, @USERID, @PrimaryMobile, @EmailID,@Gender,@NationalityID, @CountryID,@CityID,  1,        GETDATE(), 1,          @cocOtpID,CONVERT(NVARCHAR(10), @MemberShipID), 0,0,@IDType,@IDNumber,1)                    
                    
  SET @ConsumerID = SCOPE_IDENTITY()           
                    
  SET @ErrorMessage = @ConsumerID                    
 END --end else                    
       SELECT TOP (1) US.UserID                                                                
 ,              UserName                                                                 
 ,              US.[Password]                                                            
 ,              US.IsActive                                                              
 ,              RoleID                                                                   
 ,              US.MobileNumber                                                          
 ,              US.EmailID                                                               
 ,              LS.LoginTime                                                             
 ,              US.ResetRequired                                                         
 ,              ISNULL(CS.ConsumerID, 0)                                          [ConsumerID]        
 ,              ISNULL(CS.IsVerified,1)                                           [IsVerified]        
 ,              CS.OtpID                                                          [VerificationCode]        
 ,              CS.FirstName        
 ,              COALESCE(CS.FullName, CS.FirstName,CS.SecondName,CS.FamilyName) FullName        
 ,              CL.City        
 ,              CG.Country       
 ,              CS.Address1        
 ,              CS.FamilyName       
 ,              CS.ImageFile       
      
 FROM      [coc_Users]            US(NOLOCK)        
 LEFT JOIN [coc_LoginUsers]       LS(NOLOCK) ON LS.UserID = US.UserID AND LS.UserID IS NOT NULL        
 LEFT JOIN [coc_Consumers]        CS(NOLOCK) ON CS.UserID = US.UserID        
 LEFT JOIN [coc_CityLanguages]    CL(NOLOCK) ON CS.CityID = CL.CityID  AND CL.LanguageID = 1        
 LEFT JOIN [coc_CountryLanguages] CG(NOLOCK) ON CS.CountryID = CG.CountryID  AND CG.LanguageID = 1        
 WHERE    CS.ConsumerID = @ConsumerID             
 Set @SpResponseStatus=1;                    
 Set @SpResponseMessage='Success';                    
 Set @SpErrorDetails='Success';                    
 COMMIT TRANSACTION MobilWebConsumerRegistration --end transaction                    
 END TRY                    
 BEGIN CATCH                    
 ROLLBACK TRANSACTION MobilWebConsumerRegistration                    
 Set @SpResponseStatus=0;                    
 Set @SpResponseMessage='GenericError';                    
 Set @SpErrorDetails ='ErrorNumber';                    
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> ,ine <'+
convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                    
                    
 END CATCH                    
                    
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_PreConsumerGenerateOTP]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_PreConsumerGenerateOTP]  
  @OtpTypeID INTEGER    
 ,@PreMobileNumber [dbo].[Mobile]   
 ,@CountryID INT  
 ,@SpResponseStatus int=NULL  OUTPUT  
 ,@SpResponseMessage nvarchar(max)=NULL  OUTPUT  
 ,@SpErrorDetails nvarchar(max)=NULL  OUTPUT  
AS    
SET NOCOUNT ON    
    
BEGIN TRY    
 BEGIN TRANSACTION Trn_PreGenerateOTP      
 DECLARE @OtpID INTEGER = NULL    
 DECLARE @Otp INTEGER = NULL    
 DECLARE @LanguageID INTEGER    
 DECLARE @Upper INTEGER = 100000    
 DECLARE @Lower INTEGER = 999999    
 DECLARE @Minutes INTEGER    
 DECLARE @EmailID NVARCHAR(100)    
 DECLARE @MobileNumber NVARCHAR(30)    
  
 SELECT @LanguageID = LanguageID    
 FROM coc_Languages(NOLOCK)    
 WHERE IsDefaultLanguage = 1    
    
 SELECT @Otp = ROUND(((@Upper - @Lower - 1) * RAND() + @Lower), 0)    
    
 SELECT @Minutes = SetupValue    
 FROM COC_SystemSetups(NOLOCK)    
 WHERE SystemSetupID = 504    
  
    
 IF ISNULL(@OtpID, 0) = 0    
 BEGIN    
  INSERT INTO coc_OTP (    
    OtpTypeID    
   ,Otp    
   ,OTPDate    
   ,OtpExpity    
   ,IsActive    
   )    
  SELECT @OtpTypeID    
   ,@Otp    
   ,GETDATE()    
   ,DATEADD(minute, @Minutes, GETDATE())    
   ,1    
    
  SET @OtpID = SCOPE_IDENTITY();    
  if not exists(select PrimaryMobile from coc_PreConsumerRegister  WHERE PrimaryMobile = @PreMobileNumber)  
  begin  
    INSERT INTO coc_PreConsumerRegister(PrimaryMobile,CountryID,AddDate,OtpID)   
    select @PreMobileNumber,@CountryID,getdate(),@OtpID  
  end  
 END    
    
 IF @OtpTypeID = 131    
  AND @PreMobileNumber IS NOT NULL    
 BEGIN    
  UPDATE coc_PreConsumerRegister    
  SET OtpID = @OtpID    
  WHERE PrimaryMobile = @PreMobileNumber    
 END    
     
ELSE IF @OtpTypeID = 137    
  AND @PreMobileNumber IS NOT NULL    
 BEGIN    
  UPDATE coc_PreConsumerRegister    
  SET OtpID = @OtpID    
 WHERE PrimaryMobile = @PreMobileNumber    
 END   
  
 select   @Otp as Otp,@OtpID as OtpID ,@PreMobileNumber as PrimaryMobile,@CountryID as CountryID  
  
 set  @SpResponseStatus= 1   
 set  @SpResponseMessage= 'success'   
 set  @SpErrorDetails=  'success'   
 COMMIT TRANSACTION Trn_PreGenerateOTP    
END TRY    
    
BEGIN CATCH    
 ROLLBACK TRANSACTION Trn_PreGenerateOTP    
 set  @SpResponseStatus= 1   
 set  @SpResponseMessage= 'Generic Error'   
 set  @SpErrorDetails= ERROR_MESSAGE()  
END CATCH    
    
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_PreConsumerVerifyOTP]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[core_usp_PreConsumerVerifyOTP]    
 @PreMobileNumber [dbo].[Mobile]            
        
,@otpTypeID INTEGER           
     
,@Otp INTEGER         
     
,@ReturnValue BIT      = NULL OUTPUT        
        
AS        
        
 SET NOCOUNT ON        
          
 DECLARE @RandomOtp INTEGER        
        
 DECLARE @OtpID INTEGER        
        
 DECLARE @Expity DATETIME        
           
 IF @OtpTypeID = 131           
 BEGIN        
        
  SELECT @OtpID = otpID        
        
  FROM coc_PreConsumerRegister (NOLOCK)        
        
  WHERE PrimaryMobile = @PreMobileNumber        
        
 END
 SELECT @RandomOtp = Otp        
        
 ,      @Expity = OtpExpity        
        
 FROM coc_OTP(NOLOCK)        
        
 WHERE OtpID = @OtpID        
        
 IF (@RandomOtp = @Otp AND GETDATE() < @Expity)        
        
 BEGIN        
        
  UPDATE coc_OTP        
        
  SET isVerified = 1        
        
  --WHERE otp = @RandomOtp      
   WHERE OtpID = @OtpID     
   -- updated where clause by Shamim (22 Aug 2020) 
  SET @ReturnValue = 1        
        
 END        
        
 ELSE        
        
 BEGIN        
        
  SET @ReturnValue = 0        
        
 END   
 IF @ReturnValue = 1        
        
    AND (        
        
    @OtpTypeID = 131        
        
    OR @otpTypeID = 137        
        
    )        
        
   BEGIN        
        
    UPDATE coc_PreConsumerRegister        
        
    SET IsVerified       = 1       
        
    ,   VerificationDate = GETDATE()        
        
    WHERE PrimaryMobile = @PreMobileNumber     
        
   END        
        
  ELSE IF @ReturnValue = 1        
        
     AND (@OtpTypeID = 138)        
        
    BEGIN        
        
      UPDATE coc_PreConsumerRegister        
        
    SET IsVerified       = 1  ,IsActive = 1      
        
    ,   VerificationDate = GETDATE()        
        
    WHERE PreConsumerID = (select top 1 PreConsumerID from coc_PreConsumerRegister(NOLOCK) where   PrimaryMobile = @PreMobileNumber)        
    END
       SELECT @ReturnValue [ReturnValue]    
  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_PromocodePercentages]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_PromocodePercentages]   
AS  
 SET NOCOUNT ON  
  BEGIN  
   SELECT PromoCodePercentageID as PromoCodePercentID,Convert(nvarchar(10),PercentageValue) AS PromoCodePercent  
   FROM coc_PromoCodePercentages(NOLOCK) WHERE IsActive    = 1  
  END  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_ReadNotificationDetail]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Abdul Dayyan	
-- Create date: 16 October 2019
-- Description:	ReadNotification 
-- =============================================
CREATE PROCEDURE [dbo].[core_usp_ReadNotificationDetail]
	-- Add the parameters for the stored procedure here
 @ConsumerNotificationID INTEGER,  
 @ConsumerID INTEGER,  
 @LanguageID INTEGER,  
 @ActionSource INTEGER=1,
 @RoleID bigint=null,
 @UserID bigint=null,
 @ImpersonationUserID bigint=null,
 @NotificationCount int = null OUTPUT,
 @SpResponseStatus int = null out,
 @SpResponseMessage nvarchar(max) = null out,
 @SpErrorDetails nvarchar(max) = null    out  


 AS
BEGIN try
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON
	Set @SpResponseStatus=1;
	Set @SpResponseMessage='Success';
	Set @SpErrorDetails=NULL;   

    DECLARE @NotificationSendID INTEGER  
  DECLARE @NotificationID INTEGER  
  
  IF EXISTS(SELECT 1 FROM coc_ConsumerNotifications(NOLOCK) WHERE HasChecked=0 AND ConsumerID=@ConsumerID)  
  BEGIN  
   UPDATE coc_ConsumerNotifications   
    SET HasChecked=1,  
     CheckedDate=GETDATE(),  
     ActionSource=@ActionSource  
   WHERE ConsumerNotificationID=@ConsumerNotificationID AND ConsumerID=@ConsumerID  
  
   SELECT @NotificationSendID=NotificationSendID FROM coc_ConsumerNotifications(NOLOCK) WHERE ConsumerNotificationID=@ConsumerNotificationID  
   SELECT @NotificationID=NotificationID FROM coc_NotificationSends(NOLOCK) WHERE NotificationSendID=@NotificationSendID  
  
   UPDATE coc_Notifications   
    SET NotificationRead = ISNULL(NotificationRead,0)+1  
   WHERE NotificationID=@NotificationID  

   set @NotificationCount =(SELECT COUNT(CN.ConsumerNotificationID)
		FROM coc_ConsumerNotifications (NOLOCK) CN

			INNER JOIN coc_Consumers (NOLOCK) CU ON CU.ConsumerID=CN.ConsumerID

			INNER JOIN coc_NotificationSends(NOLOCK) NS ON CN.NotificationSendID=NS.NotificationSendID

			INNER JOIN coc_NotificationSendLanguages(NOLOCK) NL ON NL.NotificationSendID=CN.NotificationSendID AND LanguageID=@LanguageID --AND SendingType != 4

			INNER JOIN coc_Notifications(NOLOCK) NT ON NT.NotificationID=NS.NotificationID

			LEFT JOIN coc_EServiceBarcodes(NOLOCK) EB ON EB.NotificationID=NS.NotificationID AND CN.ConsumerID=EB.ConsumerID AND EB.ConsumerNotificationID=CN.ConsumerNotificationID

			LEFT JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID=NT.EServiceID

			LEFT JOIN coc_corporates(NOLOCK) CO ON CO.CorporateID =ES.CorporateID

			LEFT JOIN coc_EVoucher(NOLOCK) EV ON EV.EServiceID=ES.EServiceID

			LEFT JOIN coc_VoucherTemplate(NOLOCK) VT ON VT.VoucherID=EV.EVoucherID
		WHERE ISNULL(CN.ConsumerID,0)=@ConsumerID  AND NS.SendingDate<=GETDATE() and CN.HasChecked=0)
  END  
END TRY
 
 BEGIN CATCH               
    
 Set @SpResponseStatus=0;           
    
 Set @SpResponseMessage='GenericError';             
    
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorL
ine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';            
    
  END CATCH 
  SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_RejectBarcodePurchase]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_RejectBarcodePurchase]
@BarcodePurchaseId BIGINT, 
@BarcodePurcahsePaymentId BIGINT,
@ReasonForReject nvarchar(500),
@LanguageID INTEGER=1,                  
@UserID bigint=NULL,                
@RoleID bigint=NULL,                
@ImpersonationUserID bigint=NULL,                
@SpResponseStatus int OUTPUT,                
@SpResponseMessage nvarchar(max) OUTPUT,                
@SpErrorDetails nvarchar(max) OUTPUT    
AS   
BEGIN TRY                    
                 
  SET NOCOUNT ON;
  update coc_BarcodePurchasePayment set ReasonForReject=@ReasonForReject , [Status]=5 where  
  BarcodePurchaseId=@BarcodePurchaseId  and BarcodePurcahsePaymentId=@BarcodePurcahsePaymentId

 select * from  coc_BarcodePurchasePayment(nolock)
  Set @SpResponseStatus=1;                   
  Set @SpResponseMessage='Success';                  
  Set @SpErrorDetails=NULL; 
  END TRY                              
  BEGIN CATCH                    
  Set @SpResponseStatus=0;                   
  Set @SpResponseMessage='GenericError';                  
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>,
   ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>, 
   ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , 
   ErrorProcedure : <'+ERROR_PROCEDURE()+'> , 
   ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                      
                          
  END CATCH
GO
/****** Object:  StoredProcedure [dbo].[core_usp_RejectCompetition]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_RejectCompetition]      
@CompetitionStagingID bigint,  
@rejectionReason NVARCHAR(200),  
@LanguageID INTEGER=1,                    
@UserID bigint=NULL,                  
@RoleID bigint=NULL,                  
@ImpersonationUserID bigint,                  
@SpResponseStatus int OUTPUT,                  
@SpResponseMessage nvarchar(max) OUTPUT,                  
@SpErrorDetails nvarchar(max) OUTPUT     
AS        
      
BEGIN TRY                    
  Set @SpResponseStatus=1;                   
  Set @SpResponseMessage='Success';                  
  Set @SpErrorDetails=NULL;                  
  SET NOCOUNT ON;     
    
	 update coc_competition_staging  set IsAdminRejected=1, AdminRejectionReason= @rejectionReason WHERE CompetitionStagingID=@CompetitionStagingID

  select cs.CompetitionStagingID, 
   Convert(varchar(10),CONVERT(date,cs.StartDate,106),103) as StartDate,  
   Convert(varchar(10),CONVERT(date,cs.EndDate,106),103) as EndDate,  
   cs.NoOfCoupons,  
   (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=cs.CompetitionStagingID and ResourceKey='ContestName' and languageid=1) as ContestNameEn,  
   (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=cs.CompetitionStagingID and ResourceKey='ContestName' and languageid=2) as ContestNameArabic,  
   (select MobileNumber from coc_Corporates(nolock) where corporateID=cs.CorporateID) as MobileNumber,
   (select EmailID from coc_Corporates(nolock) where corporateID=cs.CorporateID) as CorporateEmailID
   from coc_competition_staging(nolock) cs where cs.CompetitionStagingID=@CompetitionStagingID
	 
     
  END TRY                              
  BEGIN CATCH                    
  Set @SpResponseStatus=0;                   
  Set @SpResponseMessage='GenericError';                  
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>, ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                      
                          
  END CATCH                              
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_RequestForAdminApproval]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_RequestForAdminApproval]              
@CompetitionStagingID bigint,            
@LanguageID INTEGER=1,                            
@UserID bigint=NULL,                          
@RoleID bigint=NULL,                          
@ImpersonationUserID bigint,                          
@SpResponseStatus int OUTPUT,                          
@SpResponseMessage nvarchar(max) OUTPUT,                          
@SpErrorDetails nvarchar(max) OUTPUT             
AS                
              
BEGIN TRY                            
  Set @SpResponseStatus=1;                           
  Set @SpResponseMessage='Success';                          
  Set @SpErrorDetails=NULL;                          
  SET NOCOUNT ON;             
        
if(exists(select * from coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID and SentForAdminApproval=1))    
begin    
   insert into coc_competition_staging_rejections    
      select @CompetitionStagingID,1,NULL,NULL,NULL,NULL,getdate(),NULL,1,@UserID    
end    
else    
begin    
  update coc_competition_staging  set SentForAdminApproval=1 where CompetitionStagingID=@CompetitionStagingID       
end    
      
    
        
  select cs.CompetitionStagingID,         
   Convert(varchar(10),CONVERT(date,cs.StartDate,106),103) as StartDate,          
   Convert(varchar(10),CONVERT(date,cs.EndDate,106),103) as EndDate,          
   cs.NoOfCoupons,          
   (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=cs.CompetitionStagingID and ResourceKey='ContestName' and languageid=1) as ContestNameEn,          
   (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=cs.CompetitionStagingID and ResourceKey='ContestName' and languageid=2) as ContestNameArabic,          
   (select isnull(MobileNumber,PhoneNumber) from coc_Corporates(nolock) where corporateID=cs.CorporateID) as MobileNumber,        
   (select EmailID from coc_Corporates(nolock) where corporateID=cs.CorporateID) as CorporateEmailID        
   from coc_competition_staging(nolock) cs where cs.CompetitionStagingID=@CompetitionStagingID        
          
             
  END TRY                                      
  BEGIN CATCH                            
  Set @SpResponseStatus=0;                           
  Set @SpResponseMessage='GenericError';                          
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>, ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                              
                                  
  END CATCH                                      
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_RequestForAdminCompetitionActivation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_RequestForAdminCompetitionActivation]                
@CompetitionStagingID bigint,              
@LanguageID INTEGER=1,                              
@UserID bigint=NULL,                            
@RoleID bigint=NULL,                            
@ImpersonationUserID bigint,                            
@SpResponseStatus int OUTPUT,                            
@SpResponseMessage nvarchar(max) OUTPUT,                            
@SpErrorDetails nvarchar(max) OUTPUT               
AS                  
                
BEGIN TRY                              
  Set @SpResponseStatus=1;                             
  Set @SpResponseMessage='Success';                            
  Set @SpErrorDetails=NULL;                            
  SET NOCOUNT ON;               
          
     
  update coc_competition_staging  set SentRequestForActivation=1 where CompetitionStagingID=@CompetitionStagingID         
         
  select cs.CompetitionStagingID,           
   Convert(varchar(10),CONVERT(date,cs.StartDate,106),103) as StartDate,            
   Convert(varchar(10),CONVERT(date,cs.EndDate,106),103) as EndDate,            
   cs.NoOfCoupons,            
   (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=cs.CompetitionStagingID and ResourceKey='ContestName' and languageid=1) as ContestNameEn,            
   (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=cs.CompetitionStagingID and ResourceKey='ContestName' and languageid=2) as ContestNameArabic,            
   (select isnull(MobileNumber,PhoneNumber) from coc_Corporates(nolock) where corporateID=cs.CorporateID) as MobileNumber,          
   (select EmailID from coc_Corporates(nolock) where corporateID=cs.CorporateID) as CorporateEmailID          
   from coc_competition_staging(nolock) cs where cs.CompetitionStagingID=@CompetitionStagingID          
            
               
  END TRY                                        
  BEGIN CATCH                              
  Set @SpResponseStatus=0;                             
  Set @SpResponseMessage='GenericError';                            
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>, ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                                
                                    
  END CATCH                                        
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_usp_ResetPassword]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Abdul Dayyan
-- Create date: 23 October 2019
-- Description:	Reset Password
-- =============================================
CREATE PROCEDURE [dbo].[core_usp_ResetPassword]
	-- Add the parameters for the stored procedure here
	@MobileNumber nvarchar(15)     = NULL,
	@EmailID nvarchar(100) = null,
	@Password NVARCHAR(55),
	@LanguageID INTEGER = 1,
 	@ImpersonationUserID bigint=null,
	@SpResponseStatus int = null out,
	@SpResponseMessage nvarchar(max) = null out,
	@SpErrorDetails nvarchar(max) = null out  
AS
 Begin Try   

	 Set @SpResponseStatus=1;     
	 Set @SpResponseMessage='Success';    
	 Set @SpErrorDetails='Success'; 
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	declare @UserID int;  
 IF (@EmailID is not null) AND EXISTS(SELECT EmailId  
  FROM COC_USERS (NOLOCK)  
  WHERE EmailID = @EmailID AND (IsActive = 1 and IsDeleted = 0))  
 BEGIN  
  print('inside email')  
  select @UserID = UserID  
  FROM COC_USERS (NOLOCK)  
  WHERE EmailID = @EmailID AND (IsActive = 1 and IsDeleted = 0)  
  
  print @userid  
  
  UPDATE COC_USERS  
  SET [Password]    = @Password  
  ,   ResetRequired = 0  
  WHERE EmailID = @EmailID and userid = @userid  
  print ('email done')  
 END  
 ELSE IF (@MobileNumber is not null) and EXISTS(SELECT MobileNumber  
   FROM COC_USERS (NOLOCK)  
   WHERE MobileNumber = @MobileNumber AND @MobileNumber IS NOT NULL and (IsActive = 1 and IsDeleted = 0))  
  
  BEGIN  
   print('inside phone')  
   select @UserID = UserID  
   FROM COC_USERS (NOLOCK)  
   where MobileNumber = @MobileNumber and (IsActive = 1 and IsDeleted = 0)  
  
   UPDATE COC_USERS  
   SET [Password]    = @Password  
   ,   ResetRequired = 0  
   WHERE MobileNumber = @MobileNumber and userid = @userid  
   print ('phone done')  
  END  
    
END TRY                
  BEGIN CATCH      
  Set @SpResponseStatus=0;     
  Set @SpResponseMessage='GenericError';    
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
  END CATCH                
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_RevokeRejectCompetitionStagingStatus]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_RevokeRejectCompetitionStagingStatus]          
@CompetitionStageID bigint=NULL,   
@StatusTypeID int=NULL,  
@LanguageID INTEGER=1,                        
@UserID bigint=NULL,                      
@RoleID bigint=NULL,                      
@ImpersonationUserID bigint,                      
@SpResponseStatus int OUTPUT,                      
@SpResponseMessage nvarchar(max) OUTPUT,                      
@SpErrorDetails nvarchar(max) OUTPUT         
            
AS            
          
BEGIN TRY                        
  Set @SpResponseStatus=1;                       
  Set @SpResponseMessage='Success';                      
  Set @SpErrorDetails=NULL;                      
  SET NOCOUNT ON;         
      if(@StatusTypeID=1)  
   begin  
     if(exists(select * from coc_competition_staging_rejections(nolock) where CompetitionStagingID=@CompetitionStageID))  
  begin  
     update coc_competition_staging set IsAdminApproved=1,IsAdminRejected=NULL,AdminRejectionReason=NULL,  
            AdminApprovedOn=getdate(),AdminRejectedOn=NULL,AdminEntryDate=getdate(),AdminApprovedUserID=@UserID,  
      AdminRejectionUserID=NULL,AdminRevokeRejectionOn=getdate(),AdminRevokeRejectionUserID=@UserID,IsAdminPartialRejection=NULL where CompetitionStagingID=@CompetitionStageID  

	  update coc_competition_staging_rejections set AdminStatus=1,EntryDate=getdate(),ApprovedOrRejectionDate=getdate() where CompetitionStagingID=@CompetitionStageID  
  end  
  else  
  begin  
     update coc_competition_staging set IsAdminApproved=NULL,IsAdminRejected=NULL,AdminRejectionReason=NULL,  
            AdminApprovedOn=NULL,AdminRejectedOn=NULL,AdminEntryDate=NULL,AdminApprovedUserID=NULL,  
      AdminRejectionUserID=NULL,AdminRevokeRejectionOn=getdate(),AdminRevokeRejectionUserID=@UserID,IsAdminPartialRejection=NULL where CompetitionStagingID=@CompetitionStageID  
  end  
           
   end  
   else if(@StatusTypeID=2)  
   begin  
     update coc_competition_staging set IsChamberApproved=NULL,IsChamberRejected=NULL,ChamberRejectionReason=NULL,  
            ChamberApprovedOn=NULL,ChamberRejectedOn=NULL,ChamberEntryDate=NULL,ChamberApprovedUserID=NULL,  
      ChamberRejectionUserID=NULL,ChamberRevokeRejectionOn=getdate(),ChamberRevokeRejectionUserID=@UserID where CompetitionStagingID=@CompetitionStageID  
   end  
         
 select cs.CompetitionStagingID,     
    Convert(varchar(10),CONVERT(date,cs.StartDate,106),103) as StartDate,      
    Convert(varchar(10),CONVERT(date,cs.EndDate,106),103) as EndDate,      
    cs.NoOfCoupons,      
    (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=cs.CompetitionStagingID and ResourceKey='ContestName' and languageid=1) as ContestNameEn,      
    (select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=cs.CompetitionStagingID and ResourceKey='ContestName' and languageid=2) as ContestNameArabic,      
    (select MobileNumber from coc_Corporates(nolock) where corporateID=cs.CorporateID) as MobileNumber,    
    (select EmailID from coc_Corporates(nolock) where corporateID=cs.CorporateID) as CorporateEmailID    
    from coc_competition_staging(nolock) cs where cs.CompetitionStagingID=@CompetitionStageID   
  
  END TRY                                  
  BEGIN CATCH                        
  Set @SpResponseStatus=0;                       
  Set @SpResponseMessage='GenericError';                      
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>, ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                          
                              
  END CATCH                                  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveAdvertisement]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[core_usp_SaveAdvertisement]
	@AdvertisementID INTEGER,
	@AdvertisementName NVARCHAR(125)=NULL,
	@PopupHeight INTEGER,
	@PopupWidth INTEGER,
	@TargetPlateform INTEGER,
	@Cost DECIMAL(15,4),
	@DisplayTypeID INTEGER,
	@Duration INTEGER,
	@TargetURL NVARCHAR(125),
	@Files XML,
	@HasNextVideo BIT,
	@PositionID INTEGER= NULL,	 
	@StartDate NVARCHAR(10),
	@AddUserID INTEGER,
	@IsActive BIT,
	@Pages XML=NULL,
	@IsImage BIT,
	@IsVideo BIT,
    @ImpersonationUserID BIGINT=NULL,              
    @SpResponseStatus INT = NULL OUT,              
    @SpResponseMessage NVARCHAR(MAX) = NULL OUT,              
    @SpErrorDetails NVARCHAR(MAX) = NULL OUT
AS
	SET NOCOUNT ON
	BEGIN TRANSACTION Tranx_SaveAdvertisement
	BEGIN TRY

        IF(@PositionID = 0) 
            SET @PositionID = NULL

		DECLARE @FileName NVARCHAR(125)
		DECLARE @AdvertisementFiles TABLE
		(
			FilePath [NullName],
			IsURL BIT 
		)
		DECLARE @AdvertisementPage TABLE
		(
			PageID INTEGER
		)
		 
		INSERT INTO @AdvertisementFiles(FilePath,IsURL)
			SELECT advertismentImage.value('(FileName[1])', '[NullName]'),advertismentImage.value('(IsURL[1])', 'BIT')
				FROM @Files.nodes('/AdvertisementFiles/Files') AS Data(advertismentImage)

		INSERT INTO @AdvertisementPage(PageID)
			SELECT advertismentPage.value('(PageID[1])', 'INTEGER')
				FROM @Pages.nodes('/Advertisement/PageData') AS Data(advertismentPage)
				 
		IF(@AdvertisementID=0)
		BEGIN
			IF NOT EXISTS(SELECT 1 FROM coc_Advertisements (NOLOCK) WHERE  (DisplayTypeID=@DisplayTypeID AND PositionID=@PositionID AND (CONVERT(DATETIME, @StartDate, 103) BETWEEN StartDate AND DATEADD(day,Duration,StartDate)))) OR @DisplayTypeID=2
			BEGIN
				INSERT INTO coc_Advertisements(AdvertisementName,PopupHeight,PopupWidth,TargetPlateform,PositionID,DisplayTypeID,StartDate,Duration,Cost,AddUserID,AddDate,IsImage,IsVideo,TargetURL,HasNextVideo)
					SELECT @AdvertisementName,@PopupHeight,@PopupWidth,@TargetPlateform,@PositionID,@DisplayTypeID,CONVERT(DATETIME, @StartDate, 103),@Duration,@Cost,@AddUserID,GETDATE(),@IsImage,@IsVideo,@TargetURL,@HasNextVideo
			
				SET @AdvertisementID=SCOPE_IDENTITY()

				INSERT INTO coc_AdvertisementPages(AdvertisementID,PageID)
					SELECT @AdvertisementID,AP.PageID 
						FROM @AdvertisementPage AP 

				SELECT @FileName=FilePath FROM @AdvertisementFiles

				IF(ISNULL(@FileName,'')!='')
				BEGIN
					INSERT INTO coc_AdvertisementFiles(AdvertisementText,AdvertisementID,FilePath,IsURL)
						SELECT @AdvertisementName,@AdvertisementID,FL.FilePath,FL.IsURL 
							FROM @AdvertisementFiles FL 
				END
                SET @SpResponseStatus=1;                   
                SET @SpResponseMessage='InsertSuccess';            
                SET @SpErrorDetails='InsertSuccess';
			END
		    ELSE 
            BEGIN
                Set @SpResponseStatus=0;                   
                Set @SpResponseMessage='AdvertisementAlreadyExists';            
                Set @SpErrorDetails='AdvertisementAlreadyExists';
			 END
		END
		ELSE 
        BEGIN
				UPDATE coc_Advertisements 
					SET AdvertisementName=@AdvertisementName,
						PopupHeight=@PopupHeight,
						PopupWidth=@PopupWidth,
						TargetPlateform=@TargetPlateform,
						PositionID=@PositionID,
						DisplayTypeID=@DisplayTypeID,
						StartDate=CONVERT(DATETIME, @StartDate, 103),
						Duration=@Duration,
						Cost=@Cost,
						EditUserID=@AddUserID,
						EditDate=GETDATE(),
						IsImage=@IsImage,
						IsVideo=@IsVideo,
						IsActive=@IsActive,
						TargetURL=@TargetURL,
						HasNextVideo=@HasNextVideo
				WHERE AdvertisementID=@AdvertisementID

				DELETE FROM coc_AdvertisementPages WHERE AdvertisementID=@AdvertisementID

				INSERT INTO coc_AdvertisementPages(AdvertisementID,PageID)
					SELECT @AdvertisementID,AP.PageID 
						FROM @AdvertisementPage AP 

				DELETE FROM coc_AdvertisementFiles WHERE AdvertisementID=@AdvertisementID

				INSERT INTO coc_AdvertisementFiles(AdvertisementText,AdvertisementID,FilePath,IsURL)
					SELECT @AdvertisementName,@AdvertisementID,FL.FilePath,FL.IsURL 
						FROM @AdvertisementFiles FL 

                 SET @SpResponseStatus=1;                   
                 SET @SpResponseMessage='UpdateSuccess';            
                 SET @SpErrorDetails='UpdateSuccess';
		END
	COMMIT TRANSACTION Tranx_SaveAdvertisement
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION Tranx_SaveAdvertisement
        Set @SpResponseStatus=0;                   
        Set @SpResponseMessage='GenericError';                  
        Set @SpErrorDetails ='ErrorNumber : <' + CONVERT(VARCHAR,ERROR_NUMBER())+ '>,         
        ErrorSeverity : <'+ CONVERT(VARCHAR,ERROR_SEVERITY())+'>,         
        ErrorState : <'+CONVERT(VARCHAR,ERROR_STATE())+'> ,         
        ErrorProcedure : <'+ERROR_PROCEDURE()+'> ,         
        ErrorLine <'+ CONVERT(VARCHAR, ERROR_LINE()) +'>         
        ErrorMessage : <'+ERROR_MESSAGE()+'>';
	END CATCH
	SET NOCOUNT OFF

	 




GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveAndUpdateConsumers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_SaveAndUpdateConsumers]    
 @ConsumerId int,      
 @FullName nvarchar(250) = null,
 @ProfileImage  nvarchar(250) = null,
 @MembershipNumber varchar(50) = null,
 @BirthDate nvarchar(100) = null, 
 @Address2 nvarchar(100) = null,  
 @Address1 nvarchar(100) = null, 
 @SecondryMobile nvarchar(20) = null,  
 @KnowECouponID int=NUll,
 @Gender      int=null,
 @CountryID      int=null,
 @CityID      int=null,
 @NationalityID      int=null,
 @LanguageID INTEGER = 1,      
 @RoleID INTEGER = null,      
 @UserID bigint = null,      
 @ImpersonationUserID bigint=null,
 @ErrorMessage nvarchar(max) = null out,      
 @SpResponseStatus int = null out,      
 @SpResponseMessage nvarchar(max) = null out,      
 @SpErrorDetails nvarchar(max) = null out      
AS      
BEGIN      
SET NOCOUNT ON;      
Begin Transaction UpdateConsumer  
 Begin Try   
  print('after begin  Try');
   DECLARE @ConsumerUserID bigint; 

    UPDATE coc_Consumers  
   SET	 Address2 = @Address2  
        ,Address1 = @Address1  
		,CityID = @CityID  
    ,BirthDate = @BirthDate
    --,VerificationDate = IIF(@VerificationDate IS NULL, @VerificationDate, convert(DATETIME, @VerificationDate, 103))  
    ,FullName = @FullName  
	 ,FirstName = @FullName  
   -- ,SecondName = @SecondName  
   -- ,FamilyName = @FamilyName  
    --,PrimaryMobile = @PrimaryMobile  
    ,SecondaryMobile = @SecondryMobile  
    --,EmailID = @EmailID  
    --,IqamaNumber = @IqamaNumber  
    --,CountryID = @CountryID  
   -- ,OtpID = @OtpID  
    ,ImageFile = @ProfileImage  
    ,KnowECouponID = @KnowECouponID  
   -- ,KnowECouponOthers = @KnowECouponOthers  
    --,MembershipNumber = @MembershipNumber  
    ,NationalityID = @NationalityID  
    ,Gender = @Gender  
   -- ,ThirdName = @ThirdName  
   -- ,OccupationID = @OccupationID  
    --,JobNumber = @JobNumber  
    --,Organization = @Organization  
    --,MaritalStatusID = @MaritalStatusID  
    --,FamilyMember = @FamilyMember  
   WHERE ConsumerID = @ConsumerId;  
 Set @SpResponseStatus=1;           
 Set @SpResponseMessage='ProfileUpdateSuccess';          
 Set @SpErrorDetails='Profile updated successfully ';  
 Set @ErrorMessage=@ConsumerId
  Commit Transaction UpdateConsumer        
END TRY                      
BEGIN CATCH            
  RollBack Transaction UpdateConsumer  
 Set @SpResponseStatus=0;           
 Set @SpResponseMessage='GenericError';          
 Set @SpErrorDetails = Error_message()+' '+ERROR_STATE();  

END CATCH                      
END      
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveCompetition]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_SaveCompetition]  
@CompetitionStagingID bigint,           
@UserID bigint=NULL,             
@SpResponseStatus int OUTPUT,              
@SpResponseMessage nvarchar(max) OUTPUT,              
@SpErrorDetails nvarchar(max) OUTPUT,  
@CompetitionID bigint OUTPUT  
    
AS    
  
BEGIN TRY                
  Set @SpResponseStatus=1;               
  Set @SpResponseMessage='Success';              
  Set @SpErrorDetails=NULL;              
  SET NOCOUNT ON; 

INSERT INTO coc_competition 
(  
CorporateID, ChamberID,  StartDate,   EndDate,  NoOfCoupons, NoOfPrizes,NoOfPrizeTypes,NoOfBranches,DrawDays,CreatedBy,CreatedDate   
) 
SELECT  Corporateid, ChamberId, StartDate, EndDate, NoOfCoupons, NoOfPrizes, NoOfPrizeTypes, NoOfBranches,DrawDays,  @UserID,    
getdate() from coc_competition_staging(nolock) where CompetitionStagingID = @CompetitionStagingID

SET @CompetitionID = scope_identity()   
Update coc_competition_staging set CompetitionId = @CompetitionId where CompetitionStagingID = @CompetitionStagingID


  
  END TRY                          
  BEGIN CATCH                
  Set @SpResponseStatus=0;               
  Set @SpResponseMessage='GenericError';              
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>, ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                  
                      
  END CATCH                          
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveCompetitionAudit]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_SaveCompetitionAudit]                         
 @EServiceID BIGINT  
AS  
BEGIN TRY    
   begin transaction tran_CompetitionAudit 
	 
     Declare @FinalXML  XML 
     Declare @RootStartXML  XML 
	 Declare @RootEndXML  XML
     Declare @EserviceXML  XML
	 Declare @EserviceLanguagesXML XML
	 Declare @NotificationsXML  XML 
	 Declare @ServiceKeysXML XML
	 Declare @EServiceInvoicesXML XML 
	 Declare @ECouponsXML  XML
	 Declare @EcouponlanguagesXML  XML 
	 Declare @ECouponOutletsXML XML
	 Declare @ECouponStandardBarcodesXML XML
	 Declare @ECouponPrizesXML XML
	 Declare @ECouponPrizesLanguagesXML XML
	 Declare @ECouponDrawsXML XML
	 Declare @ECouponDrawLanguages XML
	 Declare @ECouponDrawRetailOutletsXML XML
	 Declare @ECouponDrawPrizesXML XML
     Declare @EcouponID  BIGINT

	 select @EcouponID=EcouponID from coc_ECoupons where EServiceID=@EServiceID

	 SET	@EserviceXML=(
		select  EServiceID,
				FromDate,
				ToDate,
				AllowExternalBarcode,
				BarcodePrefix,
				BarcodeLength,
				AllowExternalBarcodeAsPending 
				FROM coc_EServices
				where EserviceID=@EServiceID FOR XML PATH('EService'), ELEMENTS XSINIL) 

     SET	@EserviceLanguagesXML=(
	  select  EService,
			  languageid 
			  from coc_EServiceLanguages
	          where EserviceID=@EServiceID FOR XML PATH('EServiceLanguages'), ELEMENTS XSINIL)

     SET	@NotificationsXML=(
	   Select	NotificationID,
				NotificationCount
				From coc_Notifications 
				where EserviceID=@EServiceID For XML PATH ('Notification') ,ROOT('Notifications'))
   
     SET	@ServiceKeysXML=(
		select	IsActive,
				ServiceKey,
				ModifiedBy,
				ModifiedDate  
				from coc_ServiceKeys 
				where EServiceID=@EServiceID For XML PATH ('ServiceKeys'), ELEMENTS XSINIL
				)

     SET	@EServiceInvoicesXML=(
		select 
			EServiceInvoiceID,
			InvoiceNumber,
			InvoiceDate,
			IsExtension,
			NotificationCount,
			PackageAmount,
			PaymentTypeID,
			IsBarcodeGenerated
			from coc_EServiceInvoices 
			where EServiceID=@EServiceID  For XML PATH ('EServiceInvoices'), ELEMENTS XSINIL
		 )

     SET	@ECouponsXML=(select 
			 ECouponID
			,EServiceID
			,IsApproved
			,ApprovalDate
			,IsActive
			,ParticipationByKiosk
			,NumberOfConsumerParticipations
			,NumberOfGuestParticipations
			,AllowMobileParticipation
			,AllowWebParticipation
			,AllowStandardBarcode
			,StandardBarcodeValue
			,MultipleParticipation
			,ParticipationCount
			,IsShowMobile
			,Imagefile
			,Entrytypeid
			,Memberonly
			,RegistrationRequired
			,Location
			,Locationurl
			from coc_ECoupons 
			where EServiceID=@EServiceID  For XML PATH ('ECoupons'), ELEMENTS XSINIL)

	 SET	@EcouponlanguagesXML=(
		select 
			languageID
			,Value
			,UsesTerm
			,ResourceKey
			,languageID
			,Location
			from coc_Ecouponlanguages 
			where EcouponID=@EcouponID  For XML PATH ('Ecouponlanguage'), ROOT('Ecouponlanguages'), ELEMENTS XSINIL
	    )

	 SET	@ECouponOutletsXML=(
			 select
			 ECouponOutletID
			,RetailOutletID
			,TotalAllowedParticipationPerCustomer
			,TotalAllowedParticipationPerCustomerPerDay
			,TotalAllowedParticipationPerGuest
			,TotalAllowedParticipationPerGuestPerDay
			,IsActive
			,AddDate
			,AddUserID
			,TotalAllowedParticipationinOutlet
			,TotalAllowedParticipationPerBarcode
			,TotalAllowedParticipationPerBarcodePerDay
			from coc_ECouponOutlets 
			where EcouponID=@EcouponID  For XML PATH ('ECouponOutlet') ,ROOT('ECouponOutlets'), ELEMENTS XSINIL)

	 SET	@ECouponStandardBarcodesXML=(
		  select
			 ECouponStandardBarcodeID
			,ECouponOutletID
			,StandardBarcode
			,IsActive
			,EditDate
			,EditUserID    
			from coc_ECouponStandardBarcodes 
			where EcouponID=@EcouponID  For XML PATH ('ECouponStandardBarcode') ,ROOT('ECouponStandardBarcodes'), ELEMENTS XSINIL
		)

	 SET	@ECouponPrizesXML=(
		select 
			 ECouponPrizeID
			,PrizeTypeID
			,PrizeDetail
			,ImageFile
			,PrizeCount
			from coc_ECouponPrizes
			where EcouponID=@EcouponID  For XML PATH ('ECouponPrize') ,ROOT('ECouponPrizes'), ELEMENTS XSINIL
		)

	 SET	@ECouponPrizesLanguagesXML=(
		   select 
				 ECouponPrizeLanguageID
				,ECouponPrizeID
				,ResourceKey
				,Value
				,LanguageID 
				from coc_ECouponPrizesLanguages
				where ECouponPrizeID 
				in(select ECouponPrizeID from coc_ECouponPrizes where EcouponID=@EcouponID)  
				For XML PATH ('ECouponPrizesLanguage') ,ROOT('ECouponPrizesLanguages'), ELEMENTS XSINIL
	           )

	 SET	@ECouponDrawsXML=(
	   	select 
			 ECouponDrawID
			,DrawDate
			,Location
			,Latitude
			,Longitude
			,LocationURL
			from coc_ECouponDraw where EcouponID=@EcouponID
			For XML PATH ('ECouponDraw') ,ROOT('ECouponDraws'), ELEMENTS XSINIL)

	 SET	@ECouponDrawLanguages=(
			select 
			 ECouponDrawLanguageID	
			,ECouponDrawID	
			,LanguageID	
			,ResourceKey	
			,Value
			from coc_ECouponDrawLanguages
			where ECouponDrawID in (select ECouponDrawID from coc_ECouponDraw where ECouponID=@EcouponID)
			For XML PATH ('ECouponDrawLanguage') ,ROOT('ECouponDrawLanguages'), ELEMENTS XSINIL
			)

	 --SET	@ECouponDrawRetailOutletsXML=(
		--select 
		--	  ECoponDrawRetailOutletID
		--	 ,ECoponDrawID
		--	 ,RetailOutletID
		--	from coc_ECouponDrawRetailOutlets
		--	where ECoponDrawID in (select  ECouponDrawID from coc_ECouponDraw where ECouponID=@EcouponID)
		--	For XML PATH ('ECouponDrawRetailOutlet') ,ROOT('ECouponDrawRetailOutlets'), ELEMENTS XSINIL
	 --      )

	 SET	@ECouponDrawPrizesXML=(
		select 
		 ECouponDrawPrizeID
		,ECouponPrizeID
		,ECouponDrawID
		,Frequency
		,RetailOutlets
		from coc_ECouponDrawPrizes
		where ECouponDrawID in (select  ECouponDrawID from coc_ECouponDraw where ECouponID=@EcouponID)
		For XML PATH ('ECouponDrawPrize') ,ROOT('ECouponDrawPrizes'), ELEMENTS XSINIL
	 )

	 Insert into coc_CompleteCompetitionAudit(  	
			 EserviceID	
			,EcouponID	
			,EserviceXML	
			,EserviceLanguagesXML	
			,NotificationsXML	
			,ServiceKeysXML	
			,EServiceInvoicesXML	
			,ECouponsXML	
			,EcouponlanguagesXML	
			,ECouponOutletsXML	
			,ECouponStandardBarcodesXML	
			,ECouponPrizesXML	
			,ECouponPrizesLanguagesXML	
			,ECouponDrawsXML	
			,ECouponDrawLanguages	
			,ECouponDrawRetailOutletsXML	
			,ECouponDrawPrizesXML)

			 Values (
			 @EserviceID	
			,@EcouponID	
			,@EserviceXML	
			,@EserviceLanguagesXML	
			,@NotificationsXML	
			,@ServiceKeysXML	
			,@EServiceInvoicesXML	
			,@ECouponsXML	
			,@EcouponlanguagesXML	
			,@ECouponOutletsXML	
			,@ECouponStandardBarcodesXML	
			,@ECouponPrizesXML	
			,@ECouponPrizesLanguagesXML	
			,@ECouponDrawsXML	
			,@ECouponDrawLanguages	
			,@ECouponDrawRetailOutletsXML	
			,@ECouponDrawPrizesXML)
    
 commit transaction tran_CompetitionAudit          
          
  END TRY                                                
  BEGIN CATCH              
   ROLLBACK TRANSACTION tran_CompetitionAudit   
   
  END CATCH                                                
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveCompetitionDataFromStaging]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_SaveCompetitionDataFromStaging]                       
@CompetitionStagingID BIGINT,         
@PaymentType int=33,        
@ServiceTypeID int=52,        
@ServiceSubTypeID int=NULL,        
@CompetitionTypeID int=41,        
@MessagePackTypeID int=NULL,        
@InvoiceNumber nvarchar(20)=NULL,        
@IsParticipationbykiosk bit=0,        
@IsMemberOnly bit=0,        
@IsRegistrationRequired bit=0,        
@Location nvarchar(100)=NULL,        
@LocationUrl nvarchar(300)=NULL,        
@IsAllowStandardBarcode bit=NULL,        
@StandardBarcodeValue varchar(100)=NULL,        
@IsMultipleParticipation bit=NULL,        
@ParticipationCount int=NULL,        
@NumberOfConsumerParticipations int=NULL,        
@NumberOfGuestParticipations int=NULL,        
@LocationAR nvarchar(150)=NULL,        
@IsApproved bit=0,        
@IsActive bit=0,        
@LanguageID INTEGER=1,                                  
@UserID bigint=NULL,                                
@RoleID bigint=NULL,                                
@ImpersonationUserID bigint,                                
@SpResponseStatus int OUTPUT,                                
@SpResponseMessage nvarchar(max) OUTPUT,                                
@SpErrorDetails nvarchar(max) OUTPUT ,        
@AllowWebParticipation bit = null,        
@AllowMobileParticipation bit = null,        
@IsShowMobile bit = null,        
@OutEcouponID bigint = null out,
@AllowExternalBarcode bit null,
@BarcodePrefix nvarchar(10) null,
@BarcodeLength nvarchar(20) null,
@AllowExternalBarcodeAsPending bit null,
@ServiceKey nvarchar(50) null,
@AllowExternalValidation bit null,
@ExternalRedirectionURL nvarchar(300) null,
@BaseURL nvarchar(300) null,
@APIKey nvarchar(50) null,
@Password nvarchar(50) null
AS                                    
BEGIN TRY                                    
  Set @SpResponseStatus=1;                                   
  Set @SpResponseMessage='Success';                                  
  Set @SpErrorDetails=NULL;  
  
  Declare @GID int;
   DECLARE @RetailoutletTemp Table (ID int identity(1,1),RetailoutletID int)   

  DECLARE @ECouponID bigint = 0;    
  Declare @EServiceID int;
  DECLARE @CorporateID INT
  declare @VatPercentage decimal(18,2); 
  DECLARE @CompetitionMethodId BIGINT;
  select top 1 @VatPercentage=SetupValue from [dbo].[COC_SystemSetups](nolock) where SetupKey='VatPercentage'  
   set @VatPercentage=cast(@VatPercentage/100 as decimal(10,2))      
  --check CompetitionID is not null then update ecoupon table         
  SELECT @ECouponID = ISNULL(CompetitionID,0), @CorporateID = CorporateID from coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID;        
  SELECT @CompetitionMethodId = CompetitionMethodId FROM coc_competition_staging_CompetitionMethods 
    WHERE CompetitionStagingID=@CompetitionStagingID
  if(@ECouponID <> 0)        
   BEGIN  
    SELECT @EServiceID = EServiceID FROM coc_ECoupons(NOLOCK) WHERE ECouponID = @ECouponID;
     --CHECK ALLOWEXTERNAL BARCODE STARTS--
      if(@AllowExternalBarcode = 1)
        BEGIN--@AllowExternalBarcode
           UPDATE coc_EServices set AllowExternalBarcode = @AllowExternalBarcode ,
           BarcodePrefix =@BarcodePrefix ,
           BarcodeLength =@BarcodeLength ,
           AllowExternalBarcodeAsPending =@AllowExternalBarcodeAsPending where EServiceID = @EServiceID;
           IF EXISTS(SELECT EServiceID from coc_ServiceKeys(nolock) where EServiceID = @EServiceID)                                             
              begin
                update coc_ServiceKeys set ServiceKey = @ServiceKey , ModifiedBy=@UserID, ModifiedDate = GETDATE() 
                 where EServiceID = @EServiceID;                 
              end
            ELSE 
              BEGIN
                 INSERT INTO coc_ServiceKeys(EServiceID,IsAPIIntegrationEnabled,ServiceKey,IsActive,CreatedBy,CreatedDate)
                 SELECT @EServiceID,1,@ServiceKey,1,@UserID,GETDATE()
               END
         END--@AllowExternalBarcode
         --CHECK ALLOWEXTERNAL BARCODE ENDS--
  if(@RoleID=3)  
  begin  
      UPDATE coc_ECoupons          
			SET [NumberOfConsumerParticipations] = @NumberOfConsumerParticipations          
			,[NumberOfGuestParticipations] = @NumberOfGuestParticipations        
			,[AllowWebParticipation] = @AllowWebParticipation          
			,[AllowStandardBarcode] = @IsAllowStandardBarcode          
			,[StandardBarcodeValue] = @StandardBarcodeValue          
			,[MultipleParticipation] = @IsMultipleParticipation          
			,[ParticipationCount] = @ParticipationCount            
			WHERE ECouponID = @ECouponID ;   

                        

     end  
  else  
    begin  
        UPDATE coc_ECoupons          
			SET [ParticipationByKiosk] = @IsParticipationbykiosk          
			,[NumberOfConsumerParticipations] = @NumberOfConsumerParticipations          
			,[NumberOfGuestParticipations] = @NumberOfGuestParticipations          
			,[AllowMobileParticipation] = @AllowMobileParticipation          
			,[AllowWebParticipation] = @AllowWebParticipation          
			,[AllowStandardBarcode] = @IsAllowStandardBarcode          
			,[StandardBarcodeValue] = @StandardBarcodeValue          
			,[MultipleParticipation] = @IsMultipleParticipation          
			,[ParticipationCount] = @ParticipationCount          
			,[IsShowMobile] = @IsShowMobile          
			WHERE ECouponID = @ECouponID ; 
              
              
  end  
        
 Set @OutEcouponID = @ECouponID;       
 if(@IsAllowStandardBarcode=1)    
   begin   
   
   Declare @RetailoutletID int;
   Declare @ECouponOutletID int;

             
       
 insert into @RetailoutletTemp         
   select RetailOutletID from coc_Competition_Staging_RetailOutlets(nolock) where CompetitionStagingId = @CompetitionStagingID  

   WHILE exists(select * from @RetailoutletTemp)                     
   BEGIN 
     set @ECouponOutletID=0
    Select top 1 @GID=ID,@RetailoutletID=RetailoutletID from @RetailoutletTemp         

	Select top 1 @ECouponOutletID = ECouponOutletID from coc_ECouponOutlets(nolock) where ECouponID = @ECouponID and RetailOutletID = @RetailoutletID  
	IF (@ECouponOutletID = 0 or @ECouponOutletID is null)
	  Begin
	  INSERT INTO coc_ECouponOutlets              
           (ECouponID              
           ,RetailOutletID              
           ,TotalAllowedParticipationPerCustomer              
           ,TotalAllowedParticipationPerCustomerPerDay              
           ,TotalAllowedParticipationPerGuest              
           ,TotalAllowedParticipationPerGuestPerDay              
           ,IsActive              
           ,AddDate              
           ,AddUserID              
           ,TotalAllowedParticipationinOutlet              
           ,TotalAllowedParticipationPerBarcode              
           ,TotalAllowedParticipationPerBarcodePerDay              
           )              
     VALUES              
           (@ECouponID              
           ,@RetailoutletID              
           ,1              
           ,1              
           ,1              
           ,1              
           ,1              
           ,GETDATE()              
           ,@UserID              
           ,10000              
           ,10000              
           ,10000)           
		  Set @ECouponOutletID = Scope_identity();  
	

	End

	if(@GID=1)
	begin
	    Declare @EcouponStandardBarcodeID bigint=0;    
		select @EcouponStandardBarcodeID = EcouponStandardBarcodeID from coc_ECouponStandardBarcodes(nolock) where StandardBarcode = @StandardBarcodeValue and ECouponID = @ECouponID and ECouponOutletID = @ECouponOutletID
		 IF (@EcouponStandardBarcodeID = 0 or @EcouponStandardBarcodeID is null)    
		  BEGIN    
			Insert Into coc_ECouponStandardBarcodes(ECouponOutletID,StandardBarcode,IsActive,AddDate,AddUserID,ECouponID,Type)    
			Select @ECouponOutletID, @StandardBarcodeValue,1,GETDATE(),@UserID,@ECouponID,1   
		  END    
		  Else    
		  BEGIN    
				Update coc_ECouponStandardBarcodes set 
				StandardBarcode = @StandardBarcodeValue 
				,EditDate=GETDATE(),EditUserID=@UserID    
				where  EcouponStandardBarcodeID=@EcouponStandardBarcodeID     
		  END  
	end
	   

     delete from @RetailoutletTemp where ID=@GID

      end
    end
    --------------------------------Update Integral Shopper details starts-----------------------------------
    IF(@CompetitionMethodId = 6)
    BEGIN
        UPDATE coc_EServices 
        SET 
        AllowExternalValidation = @AllowExternalValidation ,
        ExternalRedirectionURL = @ExternalRedirectionURL
        WHERE EServiceID = @EServiceID;

        --Integral shopper
        IF EXISTS(SELECT BaseURL FROM coc_core_ECouponIntegralShoppers WHERE ECouponID = @ECouponID)
        BEGIN
            UPDATE coc_core_ECouponIntegralShoppers
            SET BaseURL = @BaseURL, ShowOnWeb = 1, ShowOnMobile = 1, UpdatedBy = @UserID, UpdatedOn = GETDATE()
            WHERE ECouponID = @ECouponID;
        END
        ELSE
        BEGIN
            INSERT INTO coc_core_ECouponIntegralShoppers(ECouponID, BaseURL, ShowOnWeb, ShowOnMobile, CreatedBy, CreatedOn)
            SELECT @ECouponID, @BaseURL, 1, 1, @UserID, GETDATE()
        END

        --Only Admin can provide ServiceKey and Corporate API Key
        IF(@RoleID=1)  
        BEGIN  
            --Service Key
            IF EXISTS(SELECT EServiceID from coc_ServiceKeys(nolock) where EServiceID = @EServiceID)                                             
            BEGIN
                UPDATE coc_ServiceKeys SET ServiceKey = @ServiceKey , ModifiedBy=@UserID, ModifiedDate = GETDATE() 
                where EServiceID = @EServiceID;                 
            END
            ELSE 
            BEGIN
                INSERT INTO coc_ServiceKeys(EServiceID,IsAPIIntegrationEnabled,ServiceKey,IsActive,CreatedBy,CreatedDate)
                SELECT @EServiceID,1,@ServiceKey,1,@UserID,GETDATE()
            END

            --Corporate API Key
            IF EXISTS(SELECT CorporateID FROM coc_CorporateAPIUser WHERE CorporateID = @CorporateID)
            BEGIN
                UPDATE coc_CorporateAPIUser SET APIKey = @APIKey,Password = @Password, IsActive = 1,
                ModifiedBy = @UserID, ModifiedDate = GETDATE()
                WHERE CorporateID = @CorporateID
            END
            ELSE
            BEGIN
                INSERT INTO coc_CorporateAPIUser (APIKey, Password, CorporateID, IsActive, CreatedBy, CreatedDate)
                SELECT @APIKey, @Password, @CorporateID, 1, @UserID, GETDATE()
            END
        END
    END
    --------------------------------Update Integral Shopper details ends-----------------------------------
      RETURN;        
   END        
        
   begin transaction tran_Save        
        
  SET NOCOUNT ON;           
   Declare @NotificationID INTEGER;        
        
   Declare @ServiceNumber [NullCode]   ;        
   Declare @PackageAmount decimal(18,2)=NULL;        
        
   SELECT @PackageAmount   =   sum(amount) + (sum(amount)*@VatPercentage) from Coc_Pricing_log (NOLOCK) where guid =         
   (select guid from coc_competition_staging(nolock) where CompetitionStagingID = @CompetitionStagingID );        
        
   select @ServiceNumber=CONVERT(NVARCHAR(20),ISNULL(max(convert(int,ServiceNumber)),0)+1) FROM coc_EServices(NOLOCK)            
           
   INSERT INTO coc_EServices(PaymentType,ServiceNumber,ServiceDate,FromDate,ToDate,CorporateID,ServiceTypeID,ServiceSubTypeID,CompetitionID,MessagePackTypeID,AddDate,AddUserID)            
       SELECT @PaymentType,@ServiceNumber,GETDATE(),StartDate,EndDate,CorporateID,  
    @ServiceTypeID,@ServiceSubTypeID,@CompetitionTypeID,@MessagePackTypeID,GETDATE(),@UserID   
    FROM coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID              
   SET @EServiceID=SCOPE_IDENTITY()           
         --CHECK ALLOWEXTERNAL BARCODE STARTS--
      if(@AllowExternalBarcode = 1)
        BEGIN--@AllowExternalBarcode
           UPDATE coc_EServices set AllowExternalBarcode = @AllowExternalBarcode ,
           BarcodePrefix =@BarcodePrefix ,
           BarcodeLength =@BarcodeLength ,
           AllowExternalBarcodeAsPending =@AllowExternalBarcodeAsPending where EServiceID = @EServiceID;
           IF EXISTS(SELECT EServiceID from coc_ServiceKeys(nolock) where EServiceID = @EServiceID)                                             
              begin
                update coc_ServiceKeys set ServiceKey = @ServiceKey , ModifiedBy=@UserID, ModifiedDate = GETDATE() 
                 where EServiceID = @EServiceID;                 
              end
            ELSE 
              BEGIN
                 INSERT INTO coc_ServiceKeys(EServiceID,IsAPIIntegrationEnabled,ServiceKey,IsActive,CreatedBy,CreatedDate)
                 SELECT @EServiceID,1,@ServiceKey,1,@UserID,GETDATE()
               END
         END--@AllowExternalBarcode
         --CHECK ALLOWEXTERNAL BARCODE ENDS--
   SELECT @NotificationID=NotificationID FROM coc_Notifications(NOLOCK) WHERE EServiceID=@EServiceID            
            
  DELETE FROM coc_EServiceLocations WHERE EServiceID=@EServiceID            
  DELETE FROM coc_EServiceInvoices WHERE EServiceID=@EServiceID            
  DELETE FROM coc_EServiceLanguages WHERE EServiceID=@EServiceID            
  DELETE FROM coc_NotificationSends WHERE NotificationID=@NotificationID            
  DELETE FROM coc_Notifications WHERE EServiceID=@EServiceID            
            
  INSERT INTO coc_EServiceLocations(EServiceID,RetailOutletID)            
  SELECT @EServiceID, RetailOutletID FROM coc_Competition_Staging_RetailOutlets(nolock) where CompetitionStagingId=@CompetitionStagingID            
             
  INSERT INTO coc_EServiceInvoices(InvoiceNumber, EServiceID,InvoiceDate,IsExtension,NotificationCount,PackageAmount,PaymentTypeID,IsBarcodeGenerated)            
   SELECT @InvoiceNumber,@EServiceID,GETDATE(),0,NoOfCoupons,@PackageAmount,@PaymentType,0            
    FROM coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID                 
              
  SET ANSI_WARNINGS  OFF;            
  INSERT INTO coc_EServiceLanguages(EServiceID,LanguageID,EService)            
   SELECT @EServiceID,EL.LanguageID,EL.ResourceValue FROM coc_competition_staging_languages(nolock) EL where EL.ResourceKey='ContestName' and CompetitionStagingID=@CompetitionStagingID            
  SET ANSI_WARNINGS ON;            
  INSERT INTO coc_Notifications(EServiceID,NotificationCount)            
   SELECT @EServiceID,NoOfCoupons FROM coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID              
        
        
   ---- step        
        
    Declare @UsesTermEN [RemarkBig]            
    Declare @UsesTermAr [RemarkBig]        
 --Declare @ECouponID bigint        
        
   if(@CompetitionTypeID=0)        
     set @CompetitionTypeID=NULL   
   if exists(select * from coc_competition_staging_CompetitionMethods(Nolock) 
          where CompetitionStagingID=@CompetitionStagingID and CompetitionMethodId=1)
   begin
       --ecoponAPP
	   if exists(select * from coc_competition_staging_ParticipationTypes(Nolock)
	            where CompetitionStagingID=@CompetitionStagingID and CompetitionParticipationTypeID=20)
	   begin
	      set @CompetitionTypeID=42
	   end
	   else
	   begin
	      set @CompetitionTypeID=41
	   end
   end
   else if exists(select * from coc_competition_staging_CompetitionMethods(Nolock) 
          where CompetitionStagingID=@CompetitionStagingID and CompetitionMethodId=2)
   begin
      --MicroLink 
	  set @CompetitionTypeID=46
   end
   else if exists(select * from coc_competition_staging_CompetitionMethods(Nolock) 
          where CompetitionStagingID=@CompetitionStagingID and CompetitionMethodId=3)
   begin
      --Customer Service (KIOSK) 
	  set @CompetitionTypeID=50
   end
   else if exists(select * from coc_competition_staging_CompetitionMethods(Nolock) 
          where CompetitionStagingID=@CompetitionStagingID and CompetitionMethodId=4)
   begin
      --POS 
	  set @CompetitionTypeID=52
   end
   else if exists(select * from coc_competition_staging_CompetitionMethods(Nolock) 
          where CompetitionStagingID=@CompetitionStagingID and CompetitionMethodId=5)
   begin
      --SocialMedia 
	  set @CompetitionTypeID=51
   end
   else if exists(select * from coc_competition_staging_CompetitionMethods(Nolock) 
          where CompetitionStagingID=@CompetitionStagingID and CompetitionMethodId=6)
   begin
      --IntegralShopper 
	  set @CompetitionTypeID=47
   end
   
 if(@RoleID=3)  
  begin  
      INSERT INTO coc_ecoupons (            
     eserviceid            
     ,entrytypeid            
     ,imagefile            
     ,memberonly            
     ,registrationrequired            
     ,location            
     ,locationurl            
     ,allowstandardbarcode            
     ,standardbarcodevalue            
     ,multipleparticipation            
     ,ParticipationCount            
     ,NumberOfConsumerParticipations                 
     ,NumberOfGuestParticipations            
     ,adduserid            
     ,adddate          
  ,AllowWebParticipation        
    ,AllowMobileParticipation         
     )            
    SELECT @EServiceID,        
   @CompetitionTypeID,        
   ImageFile,        
   @IsMemberOnly,        
   @IsRegistrationRequired,        
   @Location,        
   @LocationUrl,        
   @IsAllowStandardBarcode,        
   @StandardBarcodeValue,        
   @IsMultipleParticipation,        
   @ParticipationCount,        
   @NumberOfConsumerParticipations,        
   @NumberOfGuestParticipations,        
   @UserID,           
      Getdate()        
  ,@AllowWebParticipation        
     ,@AllowMobileParticipation         
    FROM coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID             
            
    SET @ECouponID = Scope_identity();   
  end  
  else  
  begin  
     INSERT INTO coc_ecoupons (            
     eserviceid            
     ,entrytypeid            
     ,imagefile            
     ,participationbykiosk            
     ,memberonly            
     ,registrationrequired            
     ,location            
     ,locationurl            
     ,allowstandardbarcode            
     ,standardbarcodevalue            
     ,multipleparticipation            
     ,ParticipationCount            
     ,NumberOfConsumerParticipations                 
     ,NumberOfGuestParticipations            
     ,adduserid            
     ,adddate          
  ,AllowWebParticipation        
    ,AllowMobileParticipation         
 ,IsShowMobile         
     )            
    SELECT @EServiceID,        
   @CompetitionTypeID,        
   ImageFile,        
   @IsParticipationbykiosk,        
   @IsMemberOnly,        
   @IsRegistrationRequired,        
   @Location,        
   @LocationUrl,        
   @IsAllowStandardBarcode,        
   @StandardBarcodeValue,        
   @IsMultipleParticipation,        
   @ParticipationCount,        
   @NumberOfConsumerParticipations,        
   @NumberOfGuestParticipations,        
   @UserID,           
      Getdate()        
  ,@AllowWebParticipation        
     ,@AllowMobileParticipation         
  ,@IsShowMobile        
    FROM coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID             
            
    SET @ECouponID = Scope_identity();   
  end  
    
 if(@IsAllowStandardBarcode=1)    
    begin    
 Declare @_EcouponStandardBarcodeID bigint=0;  
  Declare @_RetailoutletID int;
   Declare @_ECouponOutletID int;

       
 insert into @RetailoutletTemp         
   select RetailOutletID from coc_Competition_Staging_RetailOutlets(nolock) where CompetitionStagingId = @CompetitionStagingID  

   WHILE exists(select * from @RetailoutletTemp)                     
   BEGIN   
     set @_ECouponOutletID=0
	
    Select top 1 @GID=ID,@_RetailoutletID=RetailoutletID from @RetailoutletTemp     
	Select top 1 @_ECouponOutletID = ECouponOutletID from coc_ECouponOutlets(nolock) where ECouponID = @ECouponID and RetailOutletID = @_RetailoutletID  
	IF (@_ECouponOutletID = 0 or @_ECouponOutletID is null)
	  Begin
	  INSERT INTO coc_ECouponOutlets              
           (ECouponID              
           ,RetailOutletID              
           ,TotalAllowedParticipationPerCustomer              
           ,TotalAllowedParticipationPerCustomerPerDay              
           ,TotalAllowedParticipationPerGuest              
           ,TotalAllowedParticipationPerGuestPerDay              
           ,IsActive              
           ,AddDate              
           ,AddUserID              
           ,TotalAllowedParticipationinOutlet              
           ,TotalAllowedParticipationPerBarcode              
           ,TotalAllowedParticipationPerBarcodePerDay              
           )              
     VALUES              
           (@ECouponID              
           ,@_RetailoutletID              
           ,1              
           ,1              
           ,1              
           ,1              
           ,1              
           ,GETDATE()              
           ,@UserID              
           ,10000              
           ,10000              
           ,10000)
		   Set @_ECouponOutletID = Scope_identity();  
      End
	      if(@GID=1)
		  begin
			select @_EcouponStandardBarcodeID = EcouponStandardBarcodeID from coc_ECouponStandardBarcodes(nolock) where StandardBarcode = @StandardBarcodeValue and ECouponID = @ECouponID and ECouponOutletID=@_ECouponOutletID   
			 if (@_EcouponStandardBarcodeID = 0 or @_EcouponStandardBarcodeID is null)    
			  BEGIN    
				Insert Into coc_ECouponStandardBarcodes(ECouponOutletID,StandardBarcode,IsActive,AddDate,AddUserID,ECouponID,Type)    
				Select @_ECouponOutletID,@StandardBarcodeValue,1,GETDATE(),@UserID,@ECouponID,1    
			  END    
			  Else    
			    BEGIN    
					Update coc_ECouponStandardBarcodes set StandardBarcode = @StandardBarcodeValue ,EditDate=GETDATE(),EditUserID=@UserID    
					where  EcouponStandardBarcodeID=@_EcouponStandardBarcodeID     
			    END  
		   end
		   delete from @RetailoutletTemp where ID=@GID
	  end



    end    
    
    Set @OutEcouponID = @ECouponID;        
                
    INSERT INTO coc_ecouponlanguages (            
     ecouponid            
     ,languageid            
     ,resourcekey           
     ,value            
     ,location            
     )            
    SELECT @ECouponID,EL.LanguageID,'Description',EL.ResourceValue,@Location FROM coc_competition_staging_languages(nolock) EL         
 where EL.ResourceKey='Description' and LanguageID=1 and CompetitionStagingID=@CompetitionStagingID          
         
 update coc_ecouponlanguages set UsesTerm=(select EL.ResourceValue from coc_competition_staging_languages(nolock) EL where EL.ResourceKey='Terms' and LanguageID=1 and CompetitionStagingID=@CompetitionStagingID)         
 where  ecouponid=@ECouponID and LanguageID=1        
            
    INSERT INTO coc_ecouponlanguages (            
     ecouponid            
     ,languageid            
     ,resourcekey            
     ,value            
     ,location            
     )            
    SELECT @ECouponID,EL.LanguageID,'Description',EL.ResourceValue,@LocationAR FROM coc_competition_staging_languages(nolock) EL         
 where EL.ResourceKey='Description' and LanguageID=2 and CompetitionStagingID=@CompetitionStagingID           
        
 update coc_ecouponlanguages set UsesTerm=(select '<div dir= ''rtl'' >'+EL.ResourceValue+ '</div>'  from coc_competition_staging_languages(nolock) EL where EL.ResourceKey='Terms' and LanguageID=2 and CompetitionStagingID=@CompetitionStagingID)         
 where  ecouponid=@ECouponID and LanguageID=2        
          
 -- stage        
Declare @EcouponPrizeId bigint        
        
DECLARE @PrizeTemp Table (ID int identity(1,1),PrizeID int)         
      
insert into @PrizeTemp         
select CompetitionStagingPrizeId from coc_competition_staging_prizes(nolock) where CompetitionStagingID=@CompetitionStagingID        
      
DECLARE @StagingPrizeTemp Table (ID int identity(1,1),PrizeID int,StagingPrizeID int)           
DECLARE @SID INT        
DECLARE @PrizeID INT       
      
WHILE exists(select * from @PrizeTemp)                     
BEGIN               
Select top 1 @SID=ID,@PrizeID=PrizeID from @PrizeTemp       
      
INSERT INTO coc_ECouponPrizes(ECouponID,PrizeCount,ImageFile)          
      SELECT @ECouponID,PrizeCount,NULL FROM coc_competition_staging_prizes(nolock) where CompetitionStagingPrizeId=@PrizeID        
        
      SET @EcouponPrizeId=SCOPE_IDENTITY()  

 Update coc_competition_staging_prizes set ECouponPrizeID=@EcouponPrizeId where CompetitionStagingPrizeId=@PrizeID    
        
 insert into @StagingPrizeTemp        
   select @EcouponPrizeId,@PrizeID        
        
    INSERT INTO coc_ECouponPrizesLanguages(ECouponPrizeID,ResourceKey,Value,LanguageID)          
      SELECT @EcouponPrizeId,'Name',ResourceValue,LanguageId from coc_competition_staging_prizes_languages(nolock) where ResourceKey='PrizeName' and CompetitionStagingPrizeId=@PrizeID        
        
    INSERT INTO coc_ECouponPrizesLanguages(ECouponPrizeID,ResourceKey,Value,LanguageID)          
      SELECT @EcouponPrizeId,'PrizeDetail',ResourceValue,LanguageId from coc_competition_staging_prizes_languages(nolock) where ResourceKey='Description' and CompetitionStagingPrizeId=@PrizeID        
                
     delete @PrizeTemp where ID=@SID       
end        
        
        
-- stage        
        
        
declare @ECouponDrawID bigint     
 DECLARE @DrawTemp Table (ID int identity(1,1),DrawID int)             
       
 insert into @DrawTemp         
   select CompetitionStagingDrawID from coc_competition_staging_draws(nolock) where CompetitionStagingID=@CompetitionStagingID        
         
        
DECLARE @SDID INT        
DECLARE @DrawID INT
Declare @DrawDetailTemp Table(CompetitionStagingDrawDetailID bigint,PrizeID bigint,ChoosenCount int,RetailOutletID int)
Declare @DrawDetailID bigint=NULL  
Declare @ECouponDrawDetailID bigint=NULL
WHILE exists(select * from @DrawTemp)                     
BEGIN               
Select top 1 @SDID=ID,@DrawID=DrawID from @DrawTemp         
      
INSERT INTO coc_ECouponDraw(ECouponID,DrawDate,Location,Latitude,Longitude)          
    SELECT @EcouponID,DrawDate,NULL,NULL,NULL        
    FROM coc_competition_staging_draws(nolock)  where CompetitionStagingDrawID=@DrawID        
        
    SET @ECouponDrawID=SCOPE_IDENTITY();   
	
Update coc_competition_staging_draws set ECouponDrawID=@ECouponDrawID where CompetitionStagingDrawID=@DrawID  
       
INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,ResourceKey,Value,LanguageID)          
  SELECT @ECouponDrawID,'Name',Name,LanguageID           
  FROM coc_competition_staging_draws_languages(nolock) where CompetitionStagingDrawID=@DrawID          
          
    INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,ResourceKey,Value,LanguageID)          
    SELECT @ECouponDrawID,'DrawDetail','',1           
            
          
    INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,ResourceKey,Value,LanguageID)          
    SELECT @ECouponDrawID,'DrawDetail','',2          
        
 INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,LanguageID,ResourceKey,value)          
      SELECT @ECouponDrawID,1,'LocationDescription',''          
        
 INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,LanguageID,ResourceKey,value)          
      SELECT @ECouponDrawID,2,'LocationDescription',''        
            
               
 --INSERT INTO coc_ECouponDrawRetailOutlets(ECoponDrawID,RetailOutletID)          
 --   SELECT @ECouponDrawID,RetailOutletID           
 --   FROM coc_competition_staging_draws_details(nolock) where CompetitionStagingDrawID= @DrawID          
 
 --INSERT INTO coc_ECouponDrawPrizes(ECouponDrawID,ECouponPrizeID,Frequency,RetailOutlets)          
 -- SELECT @ECouponDrawID,      
 -- (select PrizeID from @StagingPrizeTemp where StagingPrizeID=CompetitionStagingPrizeID),Sum(choosenCount),RetailOutletId        
 --  from coc_competition_staging_draws_details(nolock) csdd where csdd.CompetitionStagingDrawID= @DrawID          
 --    GROUP BY CompetitionStagingPrizeID,RetailOutletID   

insert into @DrawDetailTemp(CompetitionStagingDrawDetailID,PrizeID,ChoosenCount,RetailOutletID)
    Select csdd.CometitionStagingDrawDetailID,(select PrizeID from @StagingPrizeTemp where StagingPrizeID=csdd.CompetitionStagingPrizeID),csdd.choosenCount,csdd.RetailOutletId        
	   from coc_competition_staging_draws_details(nolock) csdd where csdd.CompetitionStagingDrawID= @DrawID          
		 --GROUP BY CompetitionStagingPrizeID,RetailOutletID   

while exists(select * from @DrawDetailTemp)
begin
   Set @DrawDetailID=NULL
   Set @ECouponDrawDetailID=NULL
   select top 1 @DrawDetailID=CompetitionStagingDrawDetailID from @DrawDetailTemp
   INSERT INTO coc_ECouponDrawPrizes(ECouponDrawID,ECouponPrizeID,Frequency,RetailOutlets)          
         SELECT @ECouponDrawID,PrizeID,ChoosenCount,RetailOutletID from @DrawDetailTemp where CompetitionStagingDrawDetailID= @DrawDetailID    
  SET @ECouponDrawDetailID=SCOPE_IDENTITY();  
  update coc_competition_staging_draws_details set ECouponDrawPrizeID=@ECouponDrawDetailID where CometitionStagingDrawDetailID=@DrawDetailID
  delete from @DrawDetailTemp where CompetitionStagingDrawDetailID=@DrawDetailID
end
delete @DrawTemp where ID=@SDID end      

--------------------------------Update Integral Shopper details starts-----------------------------------
    IF(@CompetitionMethodId = 6)
    BEGIN
        UPDATE coc_EServices 
        SET 
        AllowExternalValidation = @AllowExternalValidation ,
        ExternalRedirectionURL  =@ExternalRedirectionURL
        WHERE EServiceID = @EServiceID;

        --Integral Shoppers
        INSERT INTO coc_core_ECouponIntegralShoppers(ECouponID, BaseURL, ShowOnWeb, ShowOnMobile, 
        CreatedBy, CreatedOn)
        SELECT @ECouponID, @BaseURL, 1, 1, @UserID, GETDATE()

        --Only Admin can provide ServiceKey and Corporate API Key
        IF(@RoleID=1)  
        BEGIN  
            --Service Key
            IF(@ServiceKey IS NOT NULL)
            BEGIN
                INSERT INTO coc_ServiceKeys(EServiceID,IsAPIIntegrationEnabled,ServiceKey,IsActive,CreatedBy,CreatedDate)
                SELECT @EServiceID,1,@ServiceKey,1,@UserID,GETDATE()
            END

            --Corporate API Key
            IF(@APIKey IS NOT NULL)
            BEGIN
                INSERT INTO coc_CorporateAPIUser (APIKey, Password, CorporateID, IsActive, CreatedBy, CreatedDate)
                SELECT @APIKey, @Password, @CorporateID, 1, @UserID, GETDATE()
            END
        END
    END

    --------------------------------Update Integral Shopper details ends-----------------------------------
       
-- stage        
UPDATE coc_ECoupons set IsApproved = @IsApproved,ApprovalDate=GETDATE(), isactive = @IsActive WHERE ECouponID = @EcouponID         
        
update coc_competition_staging set CompetitionId= @ECouponID where CompetitionStagingID=@CompetitionStagingID              
 commit transaction tran_Save        
        
  END TRY                                              
  BEGIN CATCH            
   ROLLBACK TRANSACTION tran_Save          
  Set @SpResponseStatus=0;                                   
  Set @SpResponseMessage='GenericError';                                  
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>,                 
  ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>,                 
  ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> ,                 
  ErrorProcedure : <'+ERROR_PROCEDURE()+'> ,                
  ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                                      
                                          
  END CATCH                                              
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveCompetitionDataFromStaging27072021]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_SaveCompetitionDataFromStaging27072021]                       
@CompetitionStagingID BIGINT,         
@PaymentType int=33,        
@ServiceTypeID int=52,        
@ServiceSubTypeID int=NULL,        
@CompetitionTypeID int=41,        
@MessagePackTypeID int=NULL,        
@InvoiceNumber nvarchar(20)=NULL,        
@IsParticipationbykiosk bit=0,        
@IsMemberOnly bit=0,        
@IsRegistrationRequired bit=0,        
@Location nvarchar(100)=NULL,        
@LocationUrl nvarchar(300)=NULL,        
@IsAllowStandardBarcode bit=NULL,        
@StandardBarcodeValue varchar(100)=NULL,        
@IsMultipleParticipation bit=NULL,        
@ParticipationCount int=NULL,        
@NumberOfConsumerParticipations int=NULL,        
@NumberOfGuestParticipations int=NULL,        
@LocationAR nvarchar(150)=NULL,        
@IsApproved bit=0,        
@IsActive bit=0,        
@LanguageID INTEGER=1,                                  
@UserID bigint=NULL,                                
@RoleID bigint=NULL,                                
@ImpersonationUserID bigint,                                
@SpResponseStatus int OUTPUT,                                
@SpResponseMessage nvarchar(max) OUTPUT,                                
@SpErrorDetails nvarchar(max) OUTPUT ,        
@AllowWebParticipation bit = null,        
@AllowMobileParticipation bit = null,        
@IsShowMobile bit = null,        
@OutEcouponID bigint = null out,
@AllowExternalBarcode bit null,
@BarcodePrefix nvarchar(10) null,
@BarcodeLength nvarchar(20) null,
@AllowExternalBarcodeAsPending bit null,
@ServiceKey nvarchar(50) null
AS                                    
BEGIN TRY                                    
  Set @SpResponseStatus=1;                                   
  Set @SpResponseMessage='Success';                                  
  Set @SpErrorDetails=NULL;  
  
  Declare @GID int;
   DECLARE @RetailoutletTemp Table (ID int identity(1,1),RetailoutletID int)   

  DECLARE @ECouponID bigint = 0;    
  Declare @EServiceID int;    
    declare @VatPercentage decimal(18,2);  
 select top 1 @VatPercentage=SetupValue from [dbo].[COC_SystemSetups](nolock) where SetupKey='VatPercentage'  
   set @VatPercentage=cast(@VatPercentage/100 as decimal(10,2))      
  --check CompetitionID is not null then update ecoupon table         
  SELECT @ECouponID = ISNULL(CompetitionID,0) from coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID;        
  if(@ECouponID <> 0)        
   BEGIN        
    SELECT @EServiceID = EServiceID FROM coc_ECoupons(NOLOCK) WHERE ECouponID = @ECouponID;
     --CHECK ALLOWEXTERNAL BARCODE STARTS--
      if(@AllowExternalBarcode = 1)
        BEGIN--@AllowExternalBarcode
           UPDATE coc_EServices set AllowExternalBarcode = @AllowExternalBarcode ,
           BarcodePrefix =@BarcodePrefix ,
           BarcodeLength =@BarcodeLength ,
           AllowExternalBarcodeAsPending =@AllowExternalBarcodeAsPending where EServiceID = @EServiceID;
           IF EXISTS(SELECT EServiceID from coc_ServiceKeys(nolock) where EServiceID = @EServiceID)                                             
              begin
                update coc_ServiceKeys set ServiceKey = @ServiceKey , ModifiedBy=@UserID, ModifiedDate = GETDATE() 
                 where EServiceID = @EServiceID;                 
              end
            ELSE 
              BEGIN
                 INSERT INTO coc_ServiceKeys(EServiceID,IsAPIIntegrationEnabled,ServiceKey,IsActive,CreatedBy,CreatedDate)
                 SELECT @EServiceID,1,@ServiceKey,1,@UserID,GETDATE()
               END
         END--@AllowExternalBarcode
         --CHECK ALLOWEXTERNAL BARCODE ENDS--
  if(@RoleID=3)  
  begin  
      UPDATE coc_ECoupons          
			SET [NumberOfConsumerParticipations] = @NumberOfConsumerParticipations          
			,[NumberOfGuestParticipations] = @NumberOfGuestParticipations        
			,[AllowWebParticipation] = @AllowWebParticipation          
			,[AllowStandardBarcode] = @IsAllowStandardBarcode          
			,[StandardBarcodeValue] = @StandardBarcodeValue          
			,[MultipleParticipation] = @IsMultipleParticipation          
			,[ParticipationCount] = @ParticipationCount            
			WHERE ECouponID = @ECouponID ;   

                        

     end  
  else  
    begin  
        UPDATE coc_ECoupons          
			SET [ParticipationByKiosk] = @IsParticipationbykiosk          
			,[NumberOfConsumerParticipations] = @NumberOfConsumerParticipations          
			,[NumberOfGuestParticipations] = @NumberOfGuestParticipations          
			,[AllowMobileParticipation] = @AllowMobileParticipation          
			,[AllowWebParticipation] = @AllowWebParticipation          
			,[AllowStandardBarcode] = @IsAllowStandardBarcode          
			,[StandardBarcodeValue] = @StandardBarcodeValue          
			,[MultipleParticipation] = @IsMultipleParticipation          
			,[ParticipationCount] = @ParticipationCount          
			,[IsShowMobile] = @IsShowMobile          
			WHERE ECouponID = @ECouponID ; 
              
              
  end  
        
 Set @OutEcouponID = @ECouponID;       
 if(@IsAllowStandardBarcode=1)    
   begin   
   
   Declare @RetailoutletID int;
   Declare @ECouponOutletID int;

             
       
 insert into @RetailoutletTemp         
   select RetailOutletID from coc_Competition_Staging_RetailOutlets(nolock) where CompetitionStagingId = @CompetitionStagingID  

   WHILE exists(select * from @RetailoutletTemp)                     
   BEGIN 
     set @ECouponOutletID=0
    Select top 1 @GID=ID,@RetailoutletID=RetailoutletID from @RetailoutletTemp         

	Select top 1 @ECouponOutletID = ECouponOutletID from coc_ECouponOutlets(nolock) where ECouponID = @ECouponID and RetailOutletID = @RetailoutletID  
	IF (@ECouponOutletID = 0 or @ECouponOutletID is null)
	  Begin
	  INSERT INTO coc_ECouponOutlets              
           (ECouponID              
           ,RetailOutletID              
           ,TotalAllowedParticipationPerCustomer              
           ,TotalAllowedParticipationPerCustomerPerDay              
           ,TotalAllowedParticipationPerGuest              
           ,TotalAllowedParticipationPerGuestPerDay              
           ,IsActive              
           ,AddDate              
           ,AddUserID              
           ,TotalAllowedParticipationinOutlet              
           ,TotalAllowedParticipationPerBarcode              
           ,TotalAllowedParticipationPerBarcodePerDay              
           )              
     VALUES              
           (@ECouponID              
           ,@RetailoutletID              
           ,1              
           ,1              
           ,1              
           ,1              
           ,1              
           ,GETDATE()              
           ,@UserID              
           ,10000              
           ,10000              
           ,10000)           
		  Set @ECouponOutletID = Scope_identity();  
	

	End

	if(@GID=1)
	begin
	    Declare @EcouponStandardBarcodeID bigint=0;    
		select @EcouponStandardBarcodeID = EcouponStandardBarcodeID from coc_ECouponStandardBarcodes(nolock) where StandardBarcode = @StandardBarcodeValue and ECouponID = @ECouponID and ECouponOutletID = @ECouponOutletID
		 IF (@EcouponStandardBarcodeID = 0 or @EcouponStandardBarcodeID is null)    
		  BEGIN    
			Insert Into coc_ECouponStandardBarcodes(ECouponOutletID,StandardBarcode,IsActive,AddDate,AddUserID,ECouponID,Type)    
			Select @ECouponOutletID, @StandardBarcodeValue,1,GETDATE(),@UserID,@ECouponID,1   
		  END    
		  Else    
		  BEGIN    
				Update coc_ECouponStandardBarcodes set 
				StandardBarcode = @StandardBarcodeValue 
				,EditDate=GETDATE(),EditUserID=@UserID    
				where  EcouponStandardBarcodeID=@EcouponStandardBarcodeID     
		  END  
	end
	   

     delete from @RetailoutletTemp where ID=@GID

      end
    end     
      RETURN;        
   END        
        
   begin transaction tran_Save        
        
  SET NOCOUNT ON;           
   Declare @NotificationID INTEGER;        
        
   Declare @ServiceNumber [NullCode]   ;        
   Declare @PackageAmount decimal(18,2)=NULL;        
        
   SELECT @PackageAmount   =   sum(amount) + (sum(amount)*@VatPercentage) from Coc_Pricing_log (NOLOCK) where guid =         
   (select guid from coc_competition_staging(nolock) where CompetitionStagingID = @CompetitionStagingID );        
        
   select @ServiceNumber=CONVERT(NVARCHAR(20),ISNULL(max(convert(int,ServiceNumber)),0)+1) FROM coc_EServices(NOLOCK)            
           
   INSERT INTO coc_EServices(PaymentType,ServiceNumber,ServiceDate,FromDate,ToDate,CorporateID,ServiceTypeID,ServiceSubTypeID,CompetitionID,MessagePackTypeID,AddDate,AddUserID)            
       SELECT @PaymentType,@ServiceNumber,GETDATE(),StartDate,EndDate,CorporateID,  
    @ServiceTypeID,@ServiceSubTypeID,@CompetitionTypeID,@MessagePackTypeID,GETDATE(),@UserID   
    FROM coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID              
   SET @EServiceID=SCOPE_IDENTITY()           
         --CHECK ALLOWEXTERNAL BARCODE STARTS--
      if(@AllowExternalBarcode = 1)
        BEGIN--@AllowExternalBarcode
           UPDATE coc_EServices set AllowExternalBarcode = @AllowExternalBarcode ,
           BarcodePrefix =@BarcodePrefix ,
           BarcodeLength =@BarcodeLength ,
           AllowExternalBarcodeAsPending =@AllowExternalBarcodeAsPending where EServiceID = @EServiceID;
           IF EXISTS(SELECT EServiceID from coc_ServiceKeys(nolock) where EServiceID = @EServiceID)                                             
              begin
                update coc_ServiceKeys set ServiceKey = @ServiceKey , ModifiedBy=@UserID, ModifiedDate = GETDATE() 
                 where EServiceID = @EServiceID;                 
              end
            ELSE 
              BEGIN
                 INSERT INTO coc_ServiceKeys(EServiceID,IsAPIIntegrationEnabled,ServiceKey,IsActive,CreatedBy,CreatedDate)
                 SELECT @EServiceID,1,@ServiceKey,1,@UserID,GETDATE()
               END
         END--@AllowExternalBarcode
         --CHECK ALLOWEXTERNAL BARCODE ENDS--
   SELECT @NotificationID=NotificationID FROM coc_Notifications(NOLOCK) WHERE EServiceID=@EServiceID            
            
  DELETE FROM coc_EServiceLocations WHERE EServiceID=@EServiceID            
  DELETE FROM coc_EServiceInvoices WHERE EServiceID=@EServiceID            
  DELETE FROM coc_EServiceLanguages WHERE EServiceID=@EServiceID            
  DELETE FROM coc_NotificationSends WHERE NotificationID=@NotificationID            
  DELETE FROM coc_Notifications WHERE EServiceID=@EServiceID            
            
  INSERT INTO coc_EServiceLocations(EServiceID,RetailOutletID)            
  SELECT @EServiceID, RetailOutletID FROM coc_Competition_Staging_RetailOutlets(nolock) where CompetitionStagingId=@CompetitionStagingID            
             
  INSERT INTO coc_EServiceInvoices(InvoiceNumber, EServiceID,InvoiceDate,IsExtension,NotificationCount,PackageAmount,PaymentTypeID,IsBarcodeGenerated)            
   SELECT @InvoiceNumber,@EServiceID,GETDATE(),0,NoOfCoupons,@PackageAmount,@PaymentType,0            
    FROM coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID                 
              
  SET ANSI_WARNINGS  OFF;            
  INSERT INTO coc_EServiceLanguages(EServiceID,LanguageID,EService)            
   SELECT @EServiceID,EL.LanguageID,EL.ResourceValue FROM coc_competition_staging_languages(nolock) EL where EL.ResourceKey='ContestName' and CompetitionStagingID=@CompetitionStagingID            
  SET ANSI_WARNINGS ON;            
  INSERT INTO coc_Notifications(EServiceID,NotificationCount)            
   SELECT @EServiceID,NoOfCoupons FROM coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID              
        
        
   ---- step        
        
    Declare @UsesTermEN [RemarkBig]            
    Declare @UsesTermAr [RemarkBig]        
 --Declare @ECouponID bigint        
        
   if(@CompetitionTypeID=0)        
     set @CompetitionTypeID=NULL   
    
 if(@RoleID=3)  
  begin  
      INSERT INTO coc_ecoupons (            
     eserviceid            
     ,entrytypeid            
     ,imagefile            
     ,memberonly            
     ,registrationrequired            
     ,location            
     ,locationurl            
     ,allowstandardbarcode            
     ,standardbarcodevalue            
     ,multipleparticipation            
     ,ParticipationCount            
     ,NumberOfConsumerParticipations                 
     ,NumberOfGuestParticipations            
     ,adduserid            
     ,adddate          
  ,AllowWebParticipation        
    ,AllowMobileParticipation         
     )            
    SELECT @EServiceID,        
   @CompetitionTypeID,        
   ImageFile,        
   @IsMemberOnly,        
   @IsRegistrationRequired,        
   @Location,        
   @LocationUrl,        
   @IsAllowStandardBarcode,        
   @StandardBarcodeValue,        
   @IsMultipleParticipation,        
   @ParticipationCount,        
   @NumberOfConsumerParticipations,        
   @NumberOfGuestParticipations,        
   @UserID,           
      Getdate()        
  ,@AllowWebParticipation        
     ,@AllowMobileParticipation         
    FROM coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID             
            
    SET @ECouponID = Scope_identity();   
  end  
  else  
  begin  
     INSERT INTO coc_ecoupons (            
     eserviceid            
     ,entrytypeid            
     ,imagefile            
     ,participationbykiosk            
     ,memberonly            
     ,registrationrequired            
     ,location            
     ,locationurl            
     ,allowstandardbarcode            
     ,standardbarcodevalue            
     ,multipleparticipation            
     ,ParticipationCount            
     ,NumberOfConsumerParticipations                 
     ,NumberOfGuestParticipations            
     ,adduserid            
     ,adddate          
  ,AllowWebParticipation        
    ,AllowMobileParticipation         
 ,IsShowMobile         
     )            
    SELECT @EServiceID,        
   @CompetitionTypeID,        
   ImageFile,        
   @IsParticipationbykiosk,        
   @IsMemberOnly,        
   @IsRegistrationRequired,        
   @Location,        
   @LocationUrl,        
   @IsAllowStandardBarcode,        
   @StandardBarcodeValue,        
   @IsMultipleParticipation,        
   @ParticipationCount,        
   @NumberOfConsumerParticipations,        
   @NumberOfGuestParticipations,        
   @UserID,           
      Getdate()        
  ,@AllowWebParticipation        
     ,@AllowMobileParticipation         
  ,@IsShowMobile        
    FROM coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID             
            
    SET @ECouponID = Scope_identity();   
  end  
    
 if(@IsAllowStandardBarcode=1)    
    begin    
 Declare @_EcouponStandardBarcodeID bigint=0;  
  Declare @_RetailoutletID int;
   Declare @_ECouponOutletID int;

       
 insert into @RetailoutletTemp         
   select RetailOutletID from coc_Competition_Staging_RetailOutlets(nolock) where CompetitionStagingId = @CompetitionStagingID  

   WHILE exists(select * from @RetailoutletTemp)                     
   BEGIN   
     set @_ECouponOutletID=0
	
    Select top 1 @GID=ID,@_RetailoutletID=RetailoutletID from @RetailoutletTemp     
	Select top 1 @_ECouponOutletID = ECouponOutletID from coc_ECouponOutlets(nolock) where ECouponID = @ECouponID and RetailOutletID = @_RetailoutletID  
	IF (@_ECouponOutletID = 0 or @_ECouponOutletID is null)
	  Begin
	  INSERT INTO coc_ECouponOutlets              
           (ECouponID              
           ,RetailOutletID              
           ,TotalAllowedParticipationPerCustomer              
           ,TotalAllowedParticipationPerCustomerPerDay              
           ,TotalAllowedParticipationPerGuest              
           ,TotalAllowedParticipationPerGuestPerDay              
           ,IsActive              
           ,AddDate              
           ,AddUserID              
           ,TotalAllowedParticipationinOutlet              
           ,TotalAllowedParticipationPerBarcode              
           ,TotalAllowedParticipationPerBarcodePerDay              
           )              
     VALUES              
           (@ECouponID              
           ,@_RetailoutletID              
           ,1              
           ,1              
           ,1              
           ,1              
           ,1              
           ,GETDATE()              
           ,@UserID              
           ,10000              
           ,10000              
           ,10000)
		   Set @_ECouponOutletID = Scope_identity();  
      End
	      if(@GID=1)
		  begin
			select @_EcouponStandardBarcodeID = EcouponStandardBarcodeID from coc_ECouponStandardBarcodes(nolock) where StandardBarcode = @StandardBarcodeValue and ECouponID = @ECouponID and ECouponOutletID=@_ECouponOutletID   
			 if (@_EcouponStandardBarcodeID = 0 or @_EcouponStandardBarcodeID is null)    
			  BEGIN    
				Insert Into coc_ECouponStandardBarcodes(ECouponOutletID,StandardBarcode,IsActive,AddDate,AddUserID,ECouponID,Type)    
				Select @_ECouponOutletID,@StandardBarcodeValue,1,GETDATE(),@UserID,@ECouponID,1    
			  END    
			  Else    
			    BEGIN    
					Update coc_ECouponStandardBarcodes set StandardBarcode = @StandardBarcodeValue ,EditDate=GETDATE(),EditUserID=@UserID    
					where  EcouponStandardBarcodeID=@_EcouponStandardBarcodeID     
			    END  
		   end
		   delete from @RetailoutletTemp where ID=@GID
	  end



    end    
    
    Set @OutEcouponID = @ECouponID;        
                
    INSERT INTO coc_ecouponlanguages (            
     ecouponid            
     ,languageid            
     ,resourcekey           
     ,value            
     ,location            
     )            
    SELECT @ECouponID,EL.LanguageID,'Description',EL.ResourceValue,@Location FROM coc_competition_staging_languages(nolock) EL         
 where EL.ResourceKey='Description' and LanguageID=1 and CompetitionStagingID=@CompetitionStagingID          
         
 update coc_ecouponlanguages set UsesTerm=(select EL.ResourceValue from coc_competition_staging_languages(nolock) EL where EL.ResourceKey='Terms' and LanguageID=1 and CompetitionStagingID=@CompetitionStagingID)         
 where  ecouponid=@ECouponID and LanguageID=1        
            
    INSERT INTO coc_ecouponlanguages (            
     ecouponid            
     ,languageid            
     ,resourcekey            
     ,value            
     ,location            
     )            
    SELECT @ECouponID,EL.LanguageID,'Description',EL.ResourceValue,@LocationAR FROM coc_competition_staging_languages(nolock) EL         
 where EL.ResourceKey='Description' and LanguageID=2 and CompetitionStagingID=@CompetitionStagingID           
        
 update coc_ecouponlanguages set UsesTerm=(select '<div dir= ''rtl'' >'+EL.ResourceValue+ '</div>'  from coc_competition_staging_languages(nolock) EL where EL.ResourceKey='Terms' and LanguageID=2 and CompetitionStagingID=@CompetitionStagingID)         
 where  ecouponid=@ECouponID and LanguageID=2        
          
 -- stage        
Declare @EcouponPrizeId bigint        
        
DECLARE @PrizeTemp Table (ID int identity(1,1),PrizeID int)         
      
insert into @PrizeTemp         
select CompetitionStagingPrizeId from coc_competition_staging_prizes(nolock) where CompetitionStagingID=@CompetitionStagingID        
      
DECLARE @StagingPrizeTemp Table (ID int identity(1,1),PrizeID int,StagingPrizeID int)           
DECLARE @SID INT        
DECLARE @PrizeID INT       
      
WHILE exists(select * from @PrizeTemp)                     
BEGIN               
Select top 1 @SID=ID,@PrizeID=PrizeID from @PrizeTemp       
      
INSERT INTO coc_ECouponPrizes(ECouponID,PrizeCount,ImageFile)          
      SELECT @ECouponID,PrizeCount,NULL FROM coc_competition_staging_prizes(nolock) where CompetitionStagingPrizeId=@PrizeID        
        
      SET @EcouponPrizeId=SCOPE_IDENTITY()  

 Update coc_competition_staging_prizes set ECouponPrizeID=@EcouponPrizeId where CompetitionStagingPrizeId=@PrizeID    
        
 insert into @StagingPrizeTemp        
   select @EcouponPrizeId,@PrizeID        
        
    INSERT INTO coc_ECouponPrizesLanguages(ECouponPrizeID,ResourceKey,Value,LanguageID)          
      SELECT @EcouponPrizeId,'Name',ResourceValue,LanguageId from coc_competition_staging_prizes_languages(nolock) where ResourceKey='PrizeName' and CompetitionStagingPrizeId=@PrizeID        
        
    INSERT INTO coc_ECouponPrizesLanguages(ECouponPrizeID,ResourceKey,Value,LanguageID)          
      SELECT @EcouponPrizeId,'PrizeDetail',ResourceValue,LanguageId from coc_competition_staging_prizes_languages(nolock) where ResourceKey='Description' and CompetitionStagingPrizeId=@PrizeID        
                
     delete @PrizeTemp where ID=@SID       
end        
        
        
-- stage        
        
        
declare @ECouponDrawID bigint     
 DECLARE @DrawTemp Table (ID int identity(1,1),DrawID int)             
       
 insert into @DrawTemp         
   select CompetitionStagingDrawID from coc_competition_staging_draws(nolock) where CompetitionStagingID=@CompetitionStagingID        
         
        
DECLARE @SDID INT        
DECLARE @DrawID INT
Declare @DrawDetailTemp Table(CompetitionStagingDrawDetailID bigint,PrizeID bigint,ChoosenCount int,RetailOutletID int)
Declare @DrawDetailID bigint=NULL  
Declare @ECouponDrawDetailID bigint=NULL
WHILE exists(select * from @DrawTemp)                     
BEGIN               
Select top 1 @SDID=ID,@DrawID=DrawID from @DrawTemp         
      
INSERT INTO coc_ECouponDraw(ECouponID,DrawDate,Location,Latitude,Longitude)          
    SELECT @EcouponID,DrawDate,NULL,NULL,NULL        
    FROM coc_competition_staging_draws(nolock)  where CompetitionStagingDrawID=@DrawID        
        
    SET @ECouponDrawID=SCOPE_IDENTITY();   
	
Update coc_competition_staging_draws set ECouponDrawID=@ECouponDrawID where CompetitionStagingDrawID=@DrawID  
       
INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,ResourceKey,Value,LanguageID)          
  SELECT @ECouponDrawID,'Name',Name,LanguageID           
  FROM coc_competition_staging_draws_languages(nolock) where CompetitionStagingDrawID=@DrawID          
          
    INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,ResourceKey,Value,LanguageID)          
    SELECT @ECouponDrawID,'DrawDetail','',1           
            
          
    INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,ResourceKey,Value,LanguageID)          
    SELECT @ECouponDrawID,'DrawDetail','',2          
        
 INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,LanguageID,ResourceKey,value)          
      SELECT @ECouponDrawID,1,'LocationDescription',''          
        
 INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,LanguageID,ResourceKey,value)          
      SELECT @ECouponDrawID,2,'LocationDescription',''        
            
               
 --INSERT INTO coc_ECouponDrawRetailOutlets(ECoponDrawID,RetailOutletID)          
 --   SELECT @ECouponDrawID,RetailOutletID           
 --   FROM coc_competition_staging_draws_details(nolock) where CompetitionStagingDrawID= @DrawID          
 
 --INSERT INTO coc_ECouponDrawPrizes(ECouponDrawID,ECouponPrizeID,Frequency,RetailOutlets)          
 -- SELECT @ECouponDrawID,      
 -- (select PrizeID from @StagingPrizeTemp where StagingPrizeID=CompetitionStagingPrizeID),Sum(choosenCount),RetailOutletId        
 --  from coc_competition_staging_draws_details(nolock) csdd where csdd.CompetitionStagingDrawID= @DrawID          
 --    GROUP BY CompetitionStagingPrizeID,RetailOutletID   

insert into @DrawDetailTemp(CompetitionStagingDrawDetailID,PrizeID,ChoosenCount,RetailOutletID)
    Select csdd.CometitionStagingDrawDetailID,(select PrizeID from @StagingPrizeTemp where StagingPrizeID=csdd.CompetitionStagingPrizeID),csdd.choosenCount,csdd.RetailOutletId        
	   from coc_competition_staging_draws_details(nolock) csdd where csdd.CompetitionStagingDrawID= @DrawID          
		 --GROUP BY CompetitionStagingPrizeID,RetailOutletID   

while exists(select * from @DrawDetailTemp)
begin
   Set @DrawDetailID=NULL
   Set @ECouponDrawDetailID=NULL
   select top 1 @DrawDetailID=CompetitionStagingDrawDetailID from @DrawDetailTemp
   INSERT INTO coc_ECouponDrawPrizes(ECouponDrawID,ECouponPrizeID,Frequency,RetailOutlets)          
         SELECT @ECouponDrawID,PrizeID,ChoosenCount,RetailOutletID from @DrawDetailTemp where CompetitionStagingDrawDetailID= @DrawDetailID    
  SET @ECouponDrawDetailID=SCOPE_IDENTITY();  
  update coc_competition_staging_draws_details set ECouponDrawPrizeID=@ECouponDrawDetailID where CometitionStagingDrawDetailID=@DrawDetailID
  delete from @DrawDetailTemp where CompetitionStagingDrawDetailID=@DrawDetailID
end
delete @DrawTemp where ID=@SDID end        
       
-- stage        
UPDATE coc_ECoupons set IsApproved = @IsApproved,ApprovalDate=GETDATE(), isactive = @IsActive WHERE ECouponID = @EcouponID         
        
update coc_competition_staging set CompetitionId= @ECouponID where CompetitionStagingID=@CompetitionStagingID              
 commit transaction tran_Save        
        
  END TRY                                              
  BEGIN CATCH            
   ROLLBACK TRANSACTION tran_Save          
  Set @SpResponseStatus=0;                                   
  Set @SpResponseMessage='GenericError';                                  
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>,                 
  ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>,                 
  ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> ,                 
  ErrorProcedure : <'+ERROR_PROCEDURE()+'> ,                
  ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                                      
                                          
  END CATCH                                              
 SET NOCOUNT OFF


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------


GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveCompetitionStagingPage1]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_SaveCompetitionStagingPage1]              
@CompetitionStageID bigint=NULL,            
@Guid NVARCHAR(300),                
@CorporateID BIGINT,                
@ChamberId INT,                
@CompetitionMethodIDs XML,                    
@CompetitionTypeIDs XML=NULL,                   
@ParticipationTypeIDs XML,                
@ServiceIDs XML=NULL,                
@StartDate DATETIME,                
@ContestName VARCHAR(200),                
@ContestNameArabic NVARCHAR(200),                
@Description NVARCHAR(1000),                
@DescriptionArabic NVARCHAR(1000),                
@EndDate DATETIME,                
@NoOfCoupons INT,       
@NumberOfLinks INT=NULL,      
@NumberOfSpecialBarcodes INT=NULL,    
@IsFromOpenQuantityLink bit=0,  
@LanguageID INTEGER=1,                            
@UserID bigint=NULL,                          
@RoleID bigint=NULL,                          
@ImpersonationUserID bigint,                          
@SpResponseStatus int OUTPUT,                          
@SpResponseMessage nvarchar(max) OUTPUT,                          
@SpErrorDetails nvarchar(max) OUTPUT,              
@CompetitionStagingID bigint OUTPUT,
@SocialMediaIDs XML=NULL                
AS                
              
BEGIN TRY  
Declare @MaxCompetitionNumber bigint  
  Set @SpResponseStatus=1;                           
  Set @SpResponseMessage='Success';                          
  Set @SpErrorDetails=NULL; 
  
  SET NOCOUNT ON;             
 if(@CompetitionStageID=0)            
    set @CompetitionStageID=NULL            
  if(@NumberOfLinks=0)      
    set @NumberOfLinks=NULL      
  if(@NumberOfSpecialBarcodes=0)      
    set @NumberOfSpecialBarcodes=NULL 
    
 set @EndDate=dateadd(second, -1, dateadd(day, datediff(day, 0, @EndDate)+1, 0))
Declare @UpdateConsumeTable bit=1     
if(@CompetitionStageID is null)            
begin           
 INSERT INTO coc_competition_staging                
  (Guid,                
  CorporateID,                
  ChamberID,                
  StartDate,                
  EndDate,                
  NoOfCoupons,                
  CreatedBy,                
  ModifiedBy,                
  CreatedDate,                
  ModifiedDate,      
  NumberOfLinks,      
  NumberOfSpecialBarcodes,  
  IsFromOpenQuantityLink,
  CompetitionNumber
  )                
  values                
  (                
  @Guid,                
  @CorporateID,                
  @ChamberID,                
  @StartDate,                
  @EndDate,                
  @NoOfCoupons,                
  @UserID,                
  NULL,                
  getdate(),                
  NULL,      
  @NumberOfLinks,      
  @NumberOfSpecialBarcodes,  
  @IsFromOpenQuantityLink , 
  (select  max(CompetitionNumber)+1 from coc_competition_staging (NOLOCK)) 
  )
  SET @CompetitionStageID = scope_identity()          
  --Insert ChamberQRCode by stageID         
   update coc_competition_staging set ChamberQRCode= [dbo].UDF_coc_GetChamberQRCode(@ChamberID,@CompetitionStageID) where CompetitionStagingID=@CompetitionStageID           
   if exists(select CompetitionNumber from coc_competition_staging (NOLOCK) where CompetitionStagingID=@CompetitionStageID)
   begin
    set @MaxCompetitionNumber=(select CompetitionNumber from coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStageID)
    update coc_competition_staging set CompetitionOrderNumber=dbo.UDF_Core_GetEcoponOrderNumber(@MaxCompetitionNumber) where CompetitionStagingID=@CompetitionStageID           
   end
   --Update the IsCompetitionFeeAapplyto true  purchase Cost of First Competition for Corporate (after every purchase of barcode) - 0 SAR
   if exists(select top 1 BarcodePurchaseId from coc_BarcodePurchase (NOLOCK) where IsCompetitionFeeAapply=0 and corporateID=@CorporateID)
	begin
	update coc_BarcodePurchase set IsCompetitionFeeAapply=1 where BarcodePurchaseId=(select top 1 BarcodePurchaseId from coc_BarcodePurchase (NOLOCK) where IsCompetitionFeeAapply=0 and corporateID=@CorporateID)
	end              
end            
else            
begin
 --Competition Ordernumber Set if it is null
 if exists(select CompetitionNumber from coc_competition_staging (NOLOCK) where CompetitionStagingID=@CompetitionStageID)
   begin
    if exists(select * from coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStageID and CompetitionOrderNumber is null)
     begin
		set @MaxCompetitionNumber=(select CompetitionNumber from coc_competition_staging (NOLOCK) where CompetitionStagingID=@CompetitionStageID)
		update coc_competition_staging set CompetitionOrderNumber=dbo.UDF_Core_GetEcoponOrderNumber(@MaxCompetitionNumber) where CompetitionStagingID=@CompetitionStageID           
     end
   end
    
   if exists(select * from coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStageID and NoOfCoupons=@NoOfCoupons)    
   begin    
     set @UpdateConsumeTable=0    
   end    
  update coc_competition_staging set ChamberID=@ChamberID,StartDate=@StartDate,EndDate=@EndDate,NoOfCoupons=@NoOfCoupons,      
  ModifiedBy=@UserID,ModifiedDate=getdate(),NumberOfLinks=@NumberOfLinks,NumberOfSpecialBarcodes=@NumberOfSpecialBarcodes where CompetitionStagingID=@CompetitionStageID         
        
   --Update ChamberQRCode by stageID         
    update coc_competition_staging set ChamberQRCode=[dbo].UDF_coc_GetChamberQRCode(@ChamberID,@CompetitionStageID) where CompetitionStagingID=@CompetitionStageID           
           
end         
      
 if exists(select * from Coc_Pricing_log(nolock)  where guid=@Guid and BarcodePurchaseId is not null )  
  begin
   update coc_BarcodePurchase set IsCompetitionFeeAapply=1 where BarcodePurchaseId=(select BarcodePurchaseId from Coc_Pricing_log (NOLOCK)  where guid=@Guid and BarcodePurchaseId is not null)
  end       
 --   if exists(select top 1 BarcodePurchaseId from coc_BarcodePurchase where IsCompetitionFeeAapply=0 and corporateID=@CorporateID)
	--begin
	--update coc_BarcodePurchase set IsCompetitionFeeAapply=1 where BarcodePurchaseId=(select top 1 BarcodePurchaseId from coc_BarcodePurchase where IsCompetitionFeeAapply=0 and corporateID=@CorporateID)
	--end 
   delete coc_competition_staging_languages where CompetitionStagingID=@CompetitionStageID  and (ResourceKey='ContestName' or ResourceKey='Description')            
   --Contest name english                
INSERT INTO coc_competition_staging_languages                
    select @CompetitionStageID,1,'ContestName',@ContestName                
                
--Contest name Arabic                
INSERT INTO coc_competition_staging_languages                
  select @CompetitionStageID,2,'ContestName',@ContestNameArabic                        
                
  --Description English                 
INSERT INTO coc_competition_staging_languages                
  select @CompetitionStageID,1,'Description',@Description                
                
 --Description English                 
INSERT INTO coc_competition_staging_languages                
  select @CompetitionStageID,2,'Description',@DescriptionArabic              
              
  SET @CompetitionStagingID =@CompetitionStageID    

   delete coc_Competition_Staging_CompetitionMethods where CompetitionStagingID=@CompetitionStageID            
   --delete coc_Competition_Staging_CompetitionTypes where CompetitionStagingID=@CompetitionStageID            
   delete coc_Competition_Staging_ParticipationTypes where CompetitionStagingID=@CompetitionStageID            
   delete coc_Competition_Staging_Services where CompetitionStagingID=@CompetitionStageID            
   delete coc_competition_staging_SocialMedia where CompetitionStagingID=@CompetitionStageID
            
  INSERT INTO coc_Competition_Staging_CompetitionMethods                   
     SELECT @CompetitionStageID,                         
     CompetitionMethod.value('(@CompetitionMethodID)', 'INTEGER')                       
     FROM @CompetitionMethodIDs.nodes('/XML/Row') AS Data(CompetitionMethod)               
                  
                
                
 --INSERT INTO coc_Competition_Staging_CompetitionTypes                     
 --   SELECT   @CompetitionStageID,                        
 --    CompetitionType.value('(@CompetitionTypeID)', 'INTEGER')                       
 --    FROM @CompetitionTypeIDs.nodes('/XML/Row') AS Data(CompetitionType)                 
                   
                
 INSERT INTO coc_Competition_Staging_ParticipationTypes                   
    SELECT @CompetitionStageID,                          
    CompetitionParticipation.value('(@CompetitionParticipationTypeID)', 'INTEGER')                       
    FROM @ParticipationTypeIDs.nodes('/XML/Row') AS Data(CompetitionParticipation)   
	
if exists(select * from coc_competition_staging_ParticipationTypes(nolock)
            where CompetitionStagingID=@CompetitionStageID and CompetitionParticipationTypeID=21)
begin
   update coc_Competition_Staging set NumberOfLinks=1 where CompetitionStagingID=@CompetitionStageID
end

--Social Media 
if exists(select * from coc_competition_staging_ParticipationTypes(nolock)
            where CompetitionStagingID=@CompetitionStageID and CompetitionParticipationTypeID=22)
begin
     INSERT INTO coc_competition_staging_SocialMedia                   
     SELECT @CompetitionStageID AS CompetitionStagingID,                         
     SocialMedia.value('(@SocialMediaID)', 'INTEGER') AS SocialMediaID                     
     FROM @SocialMediaIDs.nodes('/XML/Row') AS Data(SocialMedia)               
end
                 
 if(@ServiceIDs is not null)          
begin          
INSERT INTO coc_Competition_Staging_Services                    
   SELECT  @CompetitionStageID,                             
    CompetitionService.value('(@CompetitionServiceID)', 'INTEGER')                       
    FROM @ServiceIDs.nodes('/XML/Row') AS Data(CompetitionService)             
end          
                   
                
          
 
if(isnull(@CompetitionStageID,0)<>0)
 begin
     Declare @ECouponID bigint=0
	 Declare @EServiceID int=0
	 Declare @CompetitionTypeID int=NULL
	 select @ECouponID=isnull(CompetitionId,0) from coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStageID
	 if(@ECouponID<>0)
	 begin
	    if exists(select * from coc_competition_staging_CompetitionMethods(Nolock) 
          where CompetitionStagingID=@CompetitionStagingID and CompetitionMethodId=1)
        begin
			   --ecoponAPP
			   if exists(select * from coc_competition_staging_ParticipationTypes(Nolock)
						where CompetitionStagingID=@CompetitionStagingID and CompetitionParticipationTypeID=20)
			   begin
				  set @CompetitionTypeID=42
			   end
			   else
			   begin
				  set @CompetitionTypeID=41
			   end
         end
   else if exists(select * from coc_competition_staging_CompetitionMethods(Nolock) 
          where CompetitionStagingID=@CompetitionStagingID and CompetitionMethodId=2)
   begin
      --MicroLink 
	  set @CompetitionTypeID=46
   end
   else if exists(select * from coc_competition_staging_CompetitionMethods(Nolock) 
          where CompetitionStagingID=@CompetitionStagingID and CompetitionMethodId=3)
   begin
      --Customer Service (KIOSK) 
	  set @CompetitionTypeID=50
   end
   else if exists(select * from coc_competition_staging_CompetitionMethods(Nolock) 
          where CompetitionStagingID=@CompetitionStagingID and CompetitionMethodId=4)
   begin
      --POS 
	  set @CompetitionTypeID=52
   end
   else if exists(select * from coc_competition_staging_CompetitionMethods(Nolock) 
          where CompetitionStagingID=@CompetitionStagingID and CompetitionMethodId=5)
   begin
      --SocialMedia 
	  set @CompetitionTypeID=51
   end
   else if exists(select * from coc_competition_staging_CompetitionMethods(Nolock) 
          where CompetitionStagingID=@CompetitionStagingID and CompetitionMethodId=6)
   begin
      --IntegralShopper 
	  set @CompetitionTypeID=47
   end
        if not exists(Select ECouponID from coc_ECoupons(nolock) where ECouponID=@ECouponID and EntryTypeID in (48,49))
           update coc_Ecoupons set EntryTypeID=@CompetitionTypeID where ECouponID=@ECouponID
	    update coc_ecouponlanguages set value=@Description where ECouponID=@ECouponID and languageid=1 and resourcekey='Description'
		update coc_ecouponlanguages set value=@DescriptionArabic where ECouponID=@ECouponID and languageid=2 and resourcekey='Description'
	    select @EServiceID=EServiceID from coc_ECoupons(nolock) where ECouponID=@ECouponID
		update coc_EServices set FromDate=@StartDate,ToDate=@EndDate where EServiceID=@EServiceID
		update coc_Notifications set NotificationCount=@NoOfCoupons where EServiceID=@EServiceID
		update coc_EServiceLanguages set EService=@ContestName where EServiceID=@EServiceID and languageid=1
		update coc_EServiceLanguages set EService=@ContestNameArabic where EServiceID=@EServiceID and languageid=2
	 end
 end

if(@UpdateConsumeTable=1)    
begin    
    Declare @BarcodeConsumptionID bigint    
 WHILE Exists(select BarcodeConsumptionID from coc_BarcodesConsumption (NOLOCK) where CompetitionStagingId=@CompetitionStagingID)                 
 BEGIN       
   select top 1 @BarcodeConsumptionID=BarcodeConsumptionID from coc_BarcodesConsumption(nolock) where CompetitionStagingId=@CompetitionStagingID    
   if exists(select * from coc_BarcodesConsumption(nolock) where BaseConsumptionID=@BarcodeConsumptionID)    
   begin    
  delete from coc_BarcodesConsumption where BaseConsumptionID=@BarcodeConsumptionID    
   end    
   UPDATE coc_BarcodesConsumption SET CompetitionStagingId = NULL,NoOfBarcodesUsed=NULL where  BarcodeConsumptionID=@BarcodeConsumptionID     
 End    
    
     
 Declare @AvailableBarcodes bigint    
 Declare @ExpireDate datetime    
 While @NoOfCoupons>0    
 begin     
    select top 1 @BarcodeConsumptionID=BarcodeConsumptionID,
	@AvailableBarcodes=NoOfBarcodesApproved,
	@ExpireDate=BarcodeExpiryDate 
	from coc_BarcodesConsumption (NOLOCK) where CorporateID=@CorporateID 
	and  BarcodeExpiryDate > getdate() 
	and	 CompetitionStagingId is null order by BarcodeExpiryDate     
    if(@NoOfCoupons>=@AvailableBarcodes)    
    begin    
       UPDATE coc_BarcodesConsumption SET CompetitionStagingId = @CompetitionStagingID,NoOfBarcodesUsed=@AvailableBarcodes where  BarcodeConsumptionID=@BarcodeConsumptionID     
    set @NoOfCoupons=@NoOfCoupons-@AvailableBarcodes    
    end    
    else    
    begin    
       UPDATE coc_BarcodesConsumption SET CompetitionStagingId = @CompetitionStagingID,NoOfBarcodesUsed=@NoOfCoupons where  BarcodeConsumptionID=@BarcodeConsumptionID     
    
       insert into coc_BarcodesConsumption(CorporateId, BaseConsumptionID,Date, NoOfBarcodesApproved,BarcodeExpiryDate)      
                select @CorporateID,@BarcodeConsumptionID,getdate(), (@AvailableBarcodes-@NoOfCoupons),@ExpireDate     
    
       SET @NoOfCoupons=0    
    end    
  end     
end    
       

 


  END TRY                                      
  BEGIN CATCH                            
  Set @SpResponseStatus=0;                           
  Set @SpResponseMessage='GenericError';                          
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>,
   ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>,
    ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , 
	ErrorProcedure : <'+ERROR_PROCEDURE()+'> , 
	ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                              
                                  
  END CATCH                       
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveCompetitionStagingPage2]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_SaveCompetitionStagingPage2]                        
@Guid NVARCHAR(300),                        
@CompetitionStagingID BIGINT,                        
@CountryIDs XML,                    
@CityIDs XML,                    
@RetailOutlets XML,                        
@Prizes XML,                        
@Draws XML,                        
@DrawsDetails XML,                        
@NoOfPrizes INT,                        
@NoOfPrizeTypes INT,                        
@NoOfBranches INT,                        
@DrawDays INT,     
@IsSaved BIT,                    
@ImageFile nvarchar(100),                  
@PdfFile nvarchar(200),               
@InvoiceFile nvarchar(200)=NULL,               
@TermsEnglish nvarchar(max),                
@TermsArabic nvarchar(max),    
@ErrorMessage nvarchar(200) OUTPUT,      
@LanguageID INTEGER=1,                                    
@UserID bigint=NULL,                                  
@RoleID bigint=NULL,                                  
@ImpersonationUserID bigint,                                  
@SpResponseStatus int OUTPUT,                                  
@SpResponseMessage nvarchar(max) OUTPUT,                                  
@SpErrorDetails nvarchar(max) OUTPUT                      
AS          
BEGIN TRY 
  if(@CompetitionStagingID=4557)
  begin
     Set @SpResponseStatus=1;                                     
	 Set @SpResponseMessage='Success';                                    
	 Set @SpErrorDetails=NULL;     
	 Set @ErrorMessage=NULL; 
	 return;
  end
  Begin Transaction CompetitionDrawDetails
  Set @SpResponseStatus=1;                                     
  Set @SpResponseMessage='Success';                                    
  Set @SpErrorDetails=NULL;     
  Set @ErrorMessage=NULL; 
  SET NOCOUNT ON;      
  declare @NumberOfPreviousOfDrawCount int =0    
  declare @NumberOfNewDrawCount int =0    
  declare @comptitionID bigint  
  declare @CreatedDate datetime
  Declare @CanEditLiveTables int=0
 --Below conditions is written for do not allow user to enter less draws after competition active start    
if exists(select * from coc_competition_staging(nolock) where guid = @Guid AND CompetitionStagingID=@CompetitionStagingID and IsActive=1 )    
 begin     
  select @comptitionID=CompetitionId from coc_competition_staging(nolock) where guid = @Guid AND CompetitionStagingID=@CompetitionStagingID and IsActive=1    
  set @NumberOfPreviousOfDrawCount=(select count(*) from coc_ECouponDraw(nolock) where ECouponID=@comptitionID)    
  set @NumberOfNewDrawCount=@DrawDays-@NumberOfPreviousOfDrawCount;    
    if( @DrawDays < @NumberOfPreviousOfDrawCount)    
    begin    
      set @ErrorMessage='CantAllowLessDrawsMsg'    
      return     
    end    
 end      
  --Below conditions is written for do not allow user to enter less draws after competition active  end    
    
if(exists(select * from coc_competition_staging(nolock) where guid = @Guid AND CompetitionStagingID=@CompetitionStagingID and IsSaved=1 ))            
begin            
   set @IsSaved=1            
end            
            
Update coc_competition_staging                        
SET NoOfPrizes = @NoOfPrizes,                        
 NoOfprizeTypes = @NoOfPrizeTypes,                        
 NoOfBranches = @NoOfBranches,                        
 DrawDays = @DrawDays,                        
 IsSaved = @IsSaved,                    
 ImageFile=@ImageFile,                    
 GeneratedPDFFile=@PdfFile,              
 Invoice=@InvoiceFile              
WHERE guid = @Guid AND CompetitionStagingID=@CompetitionStagingID                
            
 Declare @ECouponID bigint=NULL    
 select @ECouponID=CompetitionId,@CreatedDate=Convert(date,CreatedDate) from coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID and CompetitionId is not null         
 if(Convert(date,@CreatedDate)>=CONVERT(date,'2021-04-05 10:17:15.040') or @ECouponID in (10391,10373))
 begin
     set @CanEditLiveTables=1
 end
                
delete coc_competition_staging_languages where CompetitionStagingID=@CompetitionStagingID and ResourceKey='Terms'                
                
INSERT INTO coc_competition_staging_languages                      
    select @CompetitionStagingID,1,'Terms',@TermsEnglish                  
INSERT INTO coc_competition_staging_languages                      
    select @CompetitionStagingID,2,'Terms',@TermsArabic                  
                        
--Prizes Temp table                        
DECLARE @PrizesTemp Table (ID int identity(1,1),CompetitionStagingPrizeID int,                        
      PrizeName varchar(100), PrizeNameArabic nvarchar(100), [Description] varchar(1000), DescriptionArabic nvarchar(1000), PrizeCount int)                        
--Draws Temp table                        
DECLARE @DrawsTemp Table (ID int identity(1,1),CompetitionStagingDrawID int,                        
      DrawID int, DrawDate datetime, Winners int, Branches int, TypeOfPrizes int)                       
--DrawDetail Temp Table                    
DECLARE @DrawDetailsTemp Table (ID int identity(1,1),CometitionStagingDrawDetailID int,DrawID int,RetailOutletID int,PrizeName varchar(100),AvailableCount int,ChoosenCount int)                         
                    
DECLARE @StagingPrizeIDs Table (CompetitionStagingPrizeId bigint)                  
                        
                  
delete coc_Competition_Staging_Countries where CompetitionStagingId=@CompetitionStagingID                
   --Countries                        
  INSERT INTO coc_Competition_Staging_Countries                            
   SELECT @CompetitionStagingID,                                
    Country.value('(@CountryId)', 'INTEGER')                               
    FROM @CountryIDs.nodes('/XML/Row') AS Data(Country)                         
                  
  delete coc_competition_staging_cities where CompetitionStagingId=@CompetitionStagingID                
  INSERT INTO coc_competition_staging_cities (CompetitionStagingId,CityID)                           
   SELECT @CompetitionStagingID,                            
    City.value('(@CityId)', 'INTEGER')                               
    FROM @CityIDs.nodes('/XML/Row') AS Data(City)                       
            
                        
   --RetailOutlets                  
   delete coc_Competition_Staging_RetailOutlets where CompetitionStagingId=@CompetitionStagingID                
   INSERT INTO coc_Competition_Staging_RetailOutlets                            
   SELECT   @CompetitionStagingID,                                   
    RetailOutlet.value('(@RetailOutletID)', 'INTEGER')                               
    FROM @RetailOutlets.nodes('/XML/Row') AS Data(RetailOutlet)                         
                          
                           
 INSERT INTO @PrizesTemp                         
  SELECT Prize.value('(@CompetitionStagingPrizeID)','INTEGER'),     
  Prize.value('(@PrizeName)','NVARCHAR(500)'),                         
  Prize.value('(@PrizeNameArabic)','NVARCHAR(500)'),                        
  Prize.value('(@Description)','NVARCHAR(1000)'),                        
 Prize.value('(@DescriptionArabic)','NVARCHAR(1000)'),                        
  Prize.value('(@PrizeCount)','INTEGER')                        
  FROM @Prizes.nodes('/XML/Row') AS Data(Prize)                        
                        
 DECLARE @prizeName varchar(100)                        
 DECLARE @prizeNameArabic NVARCHAR(100)                        
 DECLARE @description varchar(100)                        
 DECLARE @descriptionArabic nvarchar(1000)                        
 DECLARE @prizeCount INT                        
 DECLARE @competitionStagingPrizeID INT     
 Declare @ECouponPrizeID int    
                        
 DECLARE @maxId INT                        
 DECLARE @slNo INT                        
 SELECT @maxId =max(ID) from @PrizesTemp                        
 set @slNo=1;                        
                 
 --delete coc_competition_staging_draws_details where CompetitionStagingDrawID in (select CompetitionStagingDrawID from coc_competition_staging_draws(nolock) where CompetitionStagingId=@CompetitionStagingID)                
 --delete coc_competition_staging_draws_languages where CompetitionStagingDrawID in (select CompetitionStagingDrawID from coc_competition_staging_draws(nolock) where CompetitionStagingId=@CompetitionStagingID)                
 --delete coc_competition_staging_draws where CompetitionStagingId=@CompetitionStagingID                
                
 --delete coc_competition_staging_prizes_languages where CompetitionStagingPrizeId in (select CompetitionStagingPrizeId from coc_competition_staging_prizes(nolock) where CompetitionStagingId=@CompetitionStagingID)                
--delete coc_competition_staging_prizes where CompetitionStagingId=@CompetitionStagingID      
  INSERT INTO @DrawsTemp                        
   SELECT Draw.value('(@CompetitionStagingDrawID)','INTEGER'),     
   Draw.value('(@DrawID)','INTEGER'),                      
   convert(datetime,Draw.value('(@DrawDate)','nvarchar(20)'),105),                    
   Draw.value('(@Winners)','INTEGER'),                     
   Draw.value('(@Branches)','INTEGER'),                        
   Draw.value('(@TypeOfPrizes)','INTEGER')                        
   FROM @Draws.nodes('/XML/Row') AS Data(Draw)                        
                    
 INSERT INTO @DrawDetailsTemp                        
    SELECT DrawsDetails.value('(@CometitionStagingDrawDetailID)','INTEGER'),        
   DrawsDetails.value('(@DrawID)','INTEGER'),                        
   DrawsDetails.value('(@RetailOutletID)','INTEGER'),                        
   DrawsDetails.value('(@PrizeName)','NVARCHAR(100)'),                        
   DrawsDetails.value('(@AvailableCount)','INTEGER'),                        
   DrawsDetails.value('(@ChoosenCount)','INTEGER')                        
   FROM @DrawsDetails.nodes('/XML/Row') AS Data(DrawsDetails)       
    
 DECLARE @drawname_en NVARCHAR(200)                     
 DECLARE @drawname_ar NVARCHAR(200)                     
  DECLARE @drawid int                     
 DECLARE @DrawDate DATETIME                        
 DECLARE @Winners INT                        
 DECLARE @Branches INT                        
 DECLARE @TypeOfPrizes INT                        
 DECLARE @CompetitionStagingDrawID INT        
 DECLARE @CometitionStagingDrawDetailID INT      
                       
 Declare @ECouponDrawID bigint    
 Declare @ECouponDrawPrizeID bigint    
 Declare @DrawDetailID int    
 Declare @RetailOutletID int    
 DECLARE @DrawPrizeName varchar(100)     
 Declare @AvailableCount int    
 Declare @ChoosenCount int    
    
 DECLARE @DrawDetailDeleteTemp Table (ID int identity(1,1),CometitionStagingDrawDetailID int)    
 insert into @DrawDetailDeleteTemp    
    select csdd.CometitionStagingDrawDetailID from coc_competition_staging_draws_details(nolock) csdd    
         inner join coc_competition_staging_draws(nolock) csd on csd.CompetitionStagingDrawID=csdd.CompetitionStagingDrawID    
            where csd.CompetitionStagingID=@CompetitionStagingID and  csdd.CometitionStagingDrawDetailID not in (select CometitionStagingDrawDetailID from @DrawDetailsTemp)    
    
Declare @DeleteDrawDetailID int    
while exists(select * from @DrawDetailDeleteTemp)    
begin  
   set @DeleteDrawDetailID=NULL
   set @ECouponDrawPrizeID=NULL
   Set @CometitionStagingDrawDetailID=NULL
   select top 1 @DeleteDrawDetailID=ID,@CometitionStagingDrawDetailID=CometitionStagingDrawDetailID from @DrawDetailDeleteTemp    
   select @ECouponDrawPrizeID=ECouponDrawPrizeID from coc_competition_staging_draws_details(nolock) where CometitionStagingDrawDetailID=@CometitionStagingDrawDetailID    
    
   if(@ECouponDrawPrizeID is not null and @ECouponDrawPrizeID<>0 and @CanEditLiveTables=1)    
   begin    
        if exists(select ECouponWinnerID from coc_ECouponWinners(nolock) where ECouponDrawPrizeID=@ECouponDrawPrizeID)
		begin
		  set @ErrorMessage='Winner exists in this draw prize. Please enter correct data'    
		  Rollback Transaction CompetitionDrawDetails   
          return   
		end
		else
		begin
          delete from coc_ECouponDrawPrizes where ECouponDrawPrizeID=@ECouponDrawPrizeID    
          delete coc_competition_staging_draws_details where CometitionStagingDrawDetailID=@CometitionStagingDrawDetailID 
	   end
   end    
   else    
   begin    
      delete coc_competition_staging_draws_details where CometitionStagingDrawDetailID=@CometitionStagingDrawDetailID    
   end    
   delete from @DrawDetailDeleteTemp where ID=@DeleteDrawDetailID    
end    
set @ECouponDrawPrizeID=NULL    
set @CometitionStagingDrawDetailID=NULL    
    
DECLARE @DrawDeleteTemp Table (ID int identity(1,1),CompetitionStagingDrawID int)    
 insert into @DrawDeleteTemp    
   select CompetitionStagingDrawID from coc_competition_staging_draws(nolock) csd    
         where CompetitionStagingID=@CompetitionStagingID and CompetitionStagingDrawID not in (Select CompetitionStagingDrawID from @DrawsTemp)    
Declare @DeleteDrawID int    
while exists(select * from @DrawDeleteTemp)    
begin   
   Set @DeleteDrawID=NULL
   Set @ECouponDrawID=NULL
   Set @CompetitionStagingDrawID=NULL
   select top 1 @DeleteDrawID=ID,@CompetitionStagingDrawID=CompetitionStagingDrawID from @DrawDeleteTemp    
   select @ECouponDrawID=ECouponDrawID from coc_competition_staging_draws(nolock) where CompetitionStagingDrawID=@CompetitionStagingDrawID    
   if(@ECouponDrawID is not null and @ECouponDrawID<>0 and @CanEditLiveTables=1)    
   begin    
       if exists(select ECouponWinnerID from coc_ECouponWinners(nolock) where ECouponDrawPrizeID in (select ECouponDrawPrizeID from coc_ECouponDrawPrizes(nolock) where ECouponDrawID=@ECouponDrawID))
	   begin
		  set @ErrorMessage='Winner exists in this draw. Please enter correct data'   
		  Rollback Transaction CompetitionDrawDetails   
          return   
	   end
	   else
	   begin
        delete from coc_ECouponDrawPrizes where ECouponDrawID=@ECouponDrawID    
        delete from coc_ECouponDrawLanguages where ECouponDrawID=@ECouponDrawID    
        delete from coc_ECouponDraw where ECouponDrawID=@ECouponDrawID    
        delete coc_competition_staging_draws_details where CompetitionStagingDrawID =@CompetitionStagingDrawID    
        delete coc_competition_staging_draws_languages where CompetitionStagingDrawID=@CompetitionStagingDrawID    
        delete coc_competition_staging_draws where CompetitionStagingDrawID=@CompetitionStagingDrawID  
	   end
   end    
   else    
    begin    
      delete coc_competition_staging_draws_details where CompetitionStagingDrawID =@CompetitionStagingDrawID    
      delete coc_competition_staging_draws_languages where CompetitionStagingDrawID=@CompetitionStagingDrawID    
      delete coc_competition_staging_draws where CompetitionStagingDrawID=@CompetitionStagingDrawID    
    end    
   delete from @DrawDeleteTemp where ID=@DeleteDrawID    
end    
set @CompetitionStagingDrawID=NULL    
set @ECouponDrawID=NULL    
    
 DECLARE @PrizesDeleteTemp Table (ID int identity(1,1),CompetitionStagingPrizeID int)    
 insert into @PrizesDeleteTemp    
   select CompetitionStagingPrizeID from coc_competition_staging_prizes(nolock) where CompetitionStagingID=@CompetitionStagingID and CompetitionStagingPrizeID not in (select CompetitionStagingPrizeID from @PrizesTemp)    
Declare @DeletePrizeID int    
while exists(select * from @PrizesDeleteTemp)    
begin    
   Set @DeletePrizeID=NULL
   Set @CompetitionStagingPrizeID=NULL
   Set @ECouponPrizeID=NULL
   select top 1 @DeletePrizeID=ID,@CompetitionStagingPrizeID=CompetitionStagingPrizeID from @PrizesDeleteTemp    
   select @ECouponPrizeID=ECouponPrizeID from coc_competition_staging_prizes(nolock) where CompetitionStagingPrizeID=@CompetitionStagingPrizeID    
   if(@ECouponPrizeID is not null and @ECouponPrizeID<>0 and @CanEditLiveTables=1)    
   begin  
         if exists(select ECouponWinnerID from coc_ECouponWinners(nolock) where ECouponPrizeID=@ECouponPrizeID)
	     begin
		   set @ErrorMessage='Winner exists in this prize. Please enter correct data' 
		   Rollback Transaction CompetitionDrawDetails  
           return   
	     end 
		 else
		 begin
           delete from coc_ECouponDrawPrizes where ECouponPrizeID =@ECouponPrizeID    
           delete from coc_ECouponPrizesLanguages where ECouponPrizeID=@ECouponPrizeID    
           delete from coc_ECouponPrizes where ECouponPrizeID=@ECouponPrizeID    
           delete coc_competition_staging_draws_details where CompetitionStagingPrizeID =@CompetitionStagingPrizeID    
           delete coc_competition_staging_prizes_languages where CompetitionStagingPrizeID =@CompetitionStagingPrizeID    
           delete coc_competition_staging_prizes where CompetitionStagingPrizeID =@CompetitionStagingPrizeID   
		 end
   end    
   else    
    begin    
      delete coc_competition_staging_draws_details where CompetitionStagingPrizeID =@CompetitionStagingPrizeID    
      delete coc_competition_staging_prizes_languages where CompetitionStagingPrizeID =@CompetitionStagingPrizeID    
      delete coc_competition_staging_prizes where CompetitionStagingPrizeID =@CompetitionStagingPrizeID    
    end    
   delete from @PrizesDeleteTemp where ID=@DeletePrizeID    
end    
set @CompetitionStagingPrizeID=NULL    
set @ECouponPrizeID=NULL    
    
 WHILE @slNo<= @maxId                        
 BEGIN   
   set @CompetitionStagingPrizeID=NULL    
   set @ECouponPrizeID=NULL  
   Set @prizeName=NULL
   Set @prizeNameArabic=NULL
   Set @description=NULL
   Set @descriptionArabic=NULL
   Set @prizeCount=NULL
  SELECT @competitionStagingPrizeID=CompetitionStagingPrizeID, @prizeName= prizename, @prizeNameArabic= prizenamearabic, @description = [Description], @descriptionArabic=DescriptionArabic, @prizeCount=PrizeCount                        
  from @PrizesTemp WHERE ID=@slNo                        
      
  if(isnull(@competitionStagingPrizeID,0)<>0 and exists(Select CompetitionStagingPrizeID from coc_competition_staging_prizes(nolock) where CompetitionStagingPrizeID=@competitionStagingPrizeID ))    
  begin    
     update coc_competition_staging_prizes set PrizeCount=@prizeCount where CompetitionStagingPrizeID=@competitionStagingPrizeID    
     update coc_competition_staging_prizes_languages set ResourceValue=@prizeName where CompetitionStagingPrizeId=@competitionStagingPrizeID and LanguageId=1 and ResourceKey='PrizeName'    
     update coc_competition_staging_prizes_languages set ResourceValue=@prizeNameArabic where CompetitionStagingPrizeId=@competitionStagingPrizeID and LanguageId=2 and ResourceKey='PrizeName'    
     update coc_competition_staging_prizes_languages set ResourceValue=@description where CompetitionStagingPrizeId=@competitionStagingPrizeID and LanguageId=1 and ResourceKey='Description'    
     update coc_competition_staging_prizes_languages set ResourceValue=@descriptionArabic where CompetitionStagingPrizeId=@competitionStagingPrizeID and LanguageId=2 and ResourceKey='Description'    
     select @ECouponPrizeID=ECouponPrizeID from coc_competition_staging_prizes(nolock) where CompetitionStagingPrizeID=@competitionStagingPrizeID    

  if(isnull(@ECouponPrizeID,0)<>0)    
  begin    
     update coc_ECouponPrizes set PrizeCount=@prizeCount where ECouponPrizeID=@ECouponPrizeID    
     update coc_ECouponPrizesLanguages set Value=@prizeName where ECouponPrizeID=@ECouponPrizeID and ResourceKey='Name' and LanguageID=1    
     update coc_ECouponPrizesLanguages set Value=@prizeNameArabic where ECouponPrizeID=@ECouponPrizeID and ResourceKey='Name' and LanguageID=2    
     update coc_ECouponPrizesLanguages set Value=@description where ECouponPrizeID=@ECouponPrizeID and ResourceKey='PrizeDetail' and LanguageID=1    
     update coc_ECouponPrizesLanguages set Value=@descriptionArabic where ECouponPrizeID=@ECouponPrizeID and ResourceKey='PrizeDetail' and LanguageID=2    
  end    
  insert into @StagingPrizeIDs                  
      select @competitionStagingPrizeID      
  end    
  else    
  begin    
     INSERT INTO coc_competition_staging_prizes(CompetitionStagingId,PrizeCount)                      
         select @CompetitionStagingID, @prizeCount                        
     SET @competitionStagingPrizeID = SCOPE_IDENTITY()   
    Insert into @StagingPrizeIDs                  
      select @competitionStagingPrizeID                  
    INSERT INTO coc_competition_staging_prizes_languages(CompetitionStagingPrizeId,LanguageId,ResourceKey,ResourceValue)                       
      select @competitionStagingPrizeID, 1, 'PrizeName', @prizeName                       
                        
   INSERT INTO coc_competition_staging_prizes_languages(CompetitionStagingPrizeId,LanguageId,ResourceKey,ResourceValue)                       
    select @competitionStagingPrizeID, 2, 'PrizeName', @prizeNameArabic                        
                          
   INSERT INTO coc_competition_staging_prizes_languages(CompetitionStagingPrizeId,LanguageId,ResourceKey,ResourceValue)                        
    select @competitionStagingPrizeID, 1, 'Description', @description                        
                        
   INSERT INTO coc_competition_staging_prizes_languages(CompetitionStagingPrizeId,LanguageId,ResourceKey,ResourceValue)                      
   select @competitionStagingPrizeID, 2, 'Description', @descriptionArabic       
  if(isnull(@ECouponID,0)<>0 and @CanEditLiveTables=1)    
  begin    
   INSERT INTO coc_ECouponPrizes(ECouponID,PrizeCount,ImageFile)                
        SELECT @ECouponID,@prizeCount,NULL          
   SET @ECouponPrizeID=SCOPE_IDENTITY()      
   update coc_competition_staging_prizes set EcouponPrizeId=@ECouponPrizeID where CompetitionStagingPrizeId=@competitionStagingPrizeID      
   INSERT INTO coc_ECouponPrizesLanguages(ECouponPrizeID,ResourceKey,Value,LanguageID)                
                 SELECT @ECouponPrizeID,'Name',@prizeName,1      
   INSERT INTO coc_ECouponPrizesLanguages(ECouponPrizeID,ResourceKey,Value,LanguageID)                
                 SELECT @ECouponPrizeID,'Name',@prizeNameArabic,2     
              
   INSERT INTO coc_ECouponPrizesLanguages(ECouponPrizeID,ResourceKey,Value,LanguageID)                
              SELECT @ECouponPrizeID,'PrizeDetail',@description,1    
   INSERT INTO coc_ECouponPrizesLanguages(ECouponPrizeID,ResourceKey,Value,LanguageID)                
              SELECT @ECouponPrizeID,'PrizeDetail',@descriptionArabic,2    
  end    
  end    
  set @slNo= @slNo + 1                        
 END                        
     
 SELECT @maxId =max(ID) from @DrawsTemp      
 set @slNo=1;      
 WHILE @slNo<= @maxId                        
 BEGIN   
   Set @CompetitionStagingDrawID=NULL
   Set @drawid=NULL
   Set @DrawDate=NULL
   Set @winners=NULL
   Set @branches=NULL
   Set @TypeOfPrizes=NULL

  SELECT @CompetitionStagingDrawID=CompetitionStagingDrawID,@drawid= DrawID, @DrawDate= drawdate ,@winners = winners , @branches= branches , @TypeOfPrizes = typeofprizes from @DrawsTemp WHERE ID=@slNo                        
  Select @drawname_en=Name from coc_DrawNameLanguages(nolock) where DrawID=@drawid and LanguageID=1                  
  Select @drawname_ar=Name from coc_DrawNameLanguages(nolock) where DrawID=@drawid and LanguageID=2       
  if isnull(@CompetitionStagingDrawID,0)<>0 and exists(select CompetitionStagingDrawID from coc_competition_staging_draws(nolock) where CompetitionStagingDrawID=@CompetitionStagingDrawID)    
  begin    
      update coc_competition_staging_draws set DrawDate=@DrawDate,WinnersCount=@Winners,BranchesCount=@Branches,TypeOfPrizesCount=@TypeOfPrizes where CompetitionStagingDrawID=@CompetitionStagingDrawID    
      update coc_competition_staging_draws_languages set Name=@drawname_en where CompetitionStagingDrawID=@CompetitionStagingDrawID and LanguageID=1     
      update coc_competition_staging_draws_languages set Name=@drawname_ar where CompetitionStagingDrawID=@CompetitionStagingDrawID and LanguageID=2    
    
      select @ECouponDrawID=ECouponDrawID from coc_competition_staging_draws(nolock) where CompetitionStagingDrawID=@CompetitionStagingDrawID    
      if(isnull(@ECouponDrawID,0)<>0)    
      begin    
        update coc_ECouponDraw set DrawDate=@DrawDate where ECouponDrawID=@ECouponDrawID    
        update coc_ECouponDrawLanguages set Value=@drawname_en where ECouponDrawID=@ECouponDrawID and LanguageID=1 and ResourceKey='Name'    
        update coc_ECouponDrawLanguages set Value=@drawname_ar where ECouponDrawID=@ECouponDrawID and LanguageID=2 and ResourceKey='Name'    
      end    
  end    
  else    
  begin    
      INSERT INTO coc_competition_staging_draws(CompetitionStagingID,DrawDate,WinnersCount,BranchesCount,TypeOfPrizesCount)                       
         select @CompetitionStagingID, @DrawDate, @Winners, @Branches, @TypeOfPrizes                        
                        
     SET @CompetitionStagingDrawID = SCOPE_IDENTITY()                        
                          
     INSERT INTO coc_competition_staging_draws_languages(CompetitionStagingDrawID,LanguageID,Name)                        
            select @CompetitionStagingDrawID, 1, @drawname_en                       
     INSERT INTO coc_competition_staging_draws_languages(CompetitionStagingDrawID,LanguageID,Name)                        
           select @CompetitionStagingDrawID, 2, @drawname_ar      
 if(isnull(@ECouponID,0)<>0 and @CanEditLiveTables=1)    
  begin    
      INSERT INTO coc_ECouponDraw(ECouponID,DrawDate,Location,Latitude,Longitude)                
          SELECT @EcouponID,@DrawDate,NULL,NULL,NULL              
      SET @ECouponDrawID=SCOPE_IDENTITY();       
      update coc_competition_staging_draws set ECouponDrawID=@ECouponDrawID where CompetitionStagingDrawID=@CompetitionStagingDrawID        
       
     INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,ResourceKey,Value,LanguageID)                
        SELECT @ECouponDrawID,'Name',@drawname_en,1     
     INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,ResourceKey,Value,LanguageID)                
        SELECT @ECouponDrawID,'Name',@drawname_ar,2       
                
     INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,ResourceKey,Value,LanguageID)                
        SELECT @ECouponDrawID,'DrawDetail','',1                 
     INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,ResourceKey,Value,LanguageID)                
       SELECT @ECouponDrawID,'DrawDetail','',2                
              
     INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,LanguageID,ResourceKey,value)                
        SELECT @ECouponDrawID,1,'LocationDescription',''                
     INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,LanguageID,ResourceKey,value)                
        SELECT @ECouponDrawID,2,'LocationDescription',''      
   end          
  end    
    SET @slNo = @slNo + 1                        
 END      
     
 While exists( select * from @DrawDetailsTemp)    
 begin  
     Set @DrawDetailID=NULL
	 Set @CometitionStagingDrawDetailID=NULL
	 Set @drawid=NULL
	 Set @RetailOutletID=NULL
	 Set @DrawPrizeName=NULL
	 Set @AvailableCount=NULL
	 Set @ChoosenCount=NULL

     select top 1 @DrawDetailID=ID,@CometitionStagingDrawDetailID=CometitionStagingDrawDetailID,@drawid=DrawID,@RetailOutletID=RetailOutletID,@DrawPrizeName=PrizeName,@AvailableCount=AvailableCount,@ChoosenCount=ChoosenCount from @DrawDetailsTemp    
    
     select @CompetitionStagingDrawID=CompetitionStagingDrawID from coc_competition_staging_draws_languages(nolock) where LanguageID=1 and Name=(select Name from coc_DrawNameLanguages(nolock) where DrawID=@drawid and LanguageID=1) and CompetitionStagingDrawID in (select CompetitionStagingDrawID from coc_competition_staging_draws(nolock) where CompetitionStagingID=@CompetitionStagingID)     
    
    if isnull(@CometitionStagingDrawDetailID,0)<>0 and exists(select * from coc_competition_staging_draws_details(nolock) where CometitionStagingDrawDetailID=@CometitionStagingDrawDetailID)    
  begin    
     update coc_competition_staging_draws_details set CompetitionStagingDrawID=@CompetitionStagingDrawID,RetailOutletID=@RetailOutletID,    
       CompetitionStagingPrizeID=(Select CompetitionStagingPrizeID from coc_competition_staging_prizes_languages(nolock) where LanguageId=1 and ResourceKey='PrizeName' and ResourceValue=@DrawPrizeName and CompetitionStagingPrizeId in (select CompetitionStagingPrizeId from @StagingPrizeIDs)),    
       AvailableCount=@AvailableCount,ChoosenCount=@ChoosenCount where CometitionStagingDrawDetailID=@CometitionStagingDrawDetailID   
	   
     Select @ECouponDrawPrizeID=ECouponDrawPrizeID from coc_competition_staging_draws_details(nolock) where CometitionStagingDrawDetailID=@CometitionStagingDrawDetailID    
     if(isnull(@ECouponDrawPrizeID,0)<>0)    
     begin    
	   Select @ECouponPrizeID=ECouponPrizeID from coc_competition_staging_prizes(nolock) where CompetitionStagingPrizeID=(Select CompetitionStagingPrizeID from coc_competition_staging_prizes_languages(nolock) where LanguageId=1 and ResourceKey='PrizeName' and ResourceValue=@DrawPrizeName and CompetitionStagingPrizeId in (select CompetitionStagingPrizeId from @StagingPrizeIDs)) 
       update coc_ECouponDrawPrizes set ECouponDrawID=(select ECouponDrawID from coc_competition_staging_draws(nolock) where CompetitionStagingDrawID=@CompetitionStagingDrawID),    
         ECouponPrizeID=@ECouponPrizeID,Frequency=@ChoosenCount,RetailOutlets=@RetailOutletID where ECouponDrawPrizeID=@ECouponDrawPrizeID    
     end    
  end    
  else    
  begin    
     INSERT INTO coc_competition_staging_draws_details(CompetitionStagingDrawID,RetailOutletID,CompetitionStagingPrizeID,AvailableCount,ChoosenCount)                      
      Select @CompetitionStagingDrawID,@RetailOutletID, CompetitionStagingPrizeID,@AvailableCount,@ChoosenCount from coc_competition_staging_prizes_languages(nolock)                  
            where LanguageId=1 and ResourceKey='PrizeName' and ResourceValue=@DrawPrizeName and CompetitionStagingPrizeId in (select CompetitionStagingPrizeId from @StagingPrizeIDs)                   
            
      Set @CometitionStagingDrawDetailID=SCOPE_IDENTITY()    

    if(@ECouponID is not null and @ECouponID!=0 and @CanEditLiveTables=1)    
    begin    
      select @ECouponDrawID=ECouponDrawID from coc_competition_staging_draws(nolock) where CompetitionStagingDrawID=@CompetitionStagingDrawID    
      select @ECouponPrizeID=ECouponPrizeID from coc_competition_staging_prizes(nolock) where CompetitionStagingPrizeID=(Select CompetitionStagingPrizeID from coc_competition_staging_prizes_languages(nolock)                  
               where LanguageId=1 and ResourceKey='PrizeName' and ResourceValue=@DrawPrizeName and CompetitionStagingPrizeId in (select CompetitionStagingPrizeId from @StagingPrizeIDs))    
      INSERT INTO coc_ECouponDrawPrizes(ECouponDrawID,ECouponPrizeID,Frequency,RetailOutlets)                
        SELECT @ECouponDrawID,@ECouponPrizeID,ChoosenCount,RetailOutletID from coc_competition_staging_draws_details(nolock) where CometitionStagingDrawDetailID=@CometitionStagingDrawDetailID    
         
      set @ECouponDrawPrizeID=SCOPE_IDENTITY()      
         update coc_competition_staging_draws_details set ECouponDrawPrizeID=@ECouponDrawPrizeID where CometitionStagingDrawDetailID= @CometitionStagingDrawDetailID      
           
    end  
  end    
    
  
  delete from @DrawDetailsTemp where ID=@DrawDetailID    
 end    
      
    
if(@CompetitionStagingID is not null     
 and exists (select * from coc_competition_staging(nolock) where CompetitionStagingID=@CompetitionStagingID and CompetitionId is not null))    
 begin    
  if(isnull(@ECouponID,0)<>0  and @CanEditLiveTables=1)    
  begin    
     --select @EServiceID=EServiceID from coc_ECoupons(nolock) where ECouponID=@ECouponID    
     update coc_ecouponlanguages set UsesTerm=@TermsEnglish           
          where  ecouponid=@ECouponID and LanguageID=1    
    
     update coc_ecouponlanguages set UsesTerm='<div dir= ''rtl'' >'+@TermsArabic+ '</div>'      
             where  ecouponid=@ECouponID and LanguageID=2     
    
     update coc_ecoupons set imagefile=@ImageFile where ECouponID=@ECouponID      
  end    
 end    
   Commit Transaction CompetitionDrawDetails                        
  END TRY                                                
  BEGIN CATCH      
      Rollback Transaction CompetitionDrawDetails   
	  Set @SpResponseStatus=0;                                     
	  Set @SpResponseMessage='GenericError';                                    
	  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>,                   
	  ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>,                   
	  ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> ,                   
	  ErrorProcedure : <'+ERROR_PROCEDURE()+'> ,                  
	  ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                                        
                                      
  END CATCH                                                
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveConsumers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_SaveConsumers] 
  @ConsumerID INTEGER, 
  @ConsumerXML XML, 
  @ProfileImage NVARCHAR(2000)=NULL, 
  @VerificationCode [NULLPIN], 
  @InvitationCode [NULLPIN], 
  @IntrestedCityXml XML=NULL, 
  @InviteeID INTEGER=NULL, 
  @ErrorMessage [REMARK] output ,
  @UserIdentityTypeID int = null,
  @UserIdentityNumber nvarchar(100)=null
AS 
  SET nocount ON 
  BEGIN try 
    IF @ProfileImage='' 
    SET @ProfileImage =NULL 
    DECLARE @LoyaltyPoint INTEGER 
    DECLARE @MemberShipID NVARCHAR(40)=Newid() 
    DECLARE @yearDiff     INTEGER 
    DECLARE @AgeGroupID   INTEGER 
    DECLARE @CONSUMERINTRESTEDCITIES TABLE 
                                           ( 
                                                                                  cityid INTEGER
                                           ) 
    DECLARE @Consumers AS TABLE ( consumerid INTEGER, firstname [NAME], secondname [NULLNAME], familyname [NULLNAME], userid INTEGER, gender SMALLINT, birthdate DATETIME NULL, agegroupid INTEGER, knowecouponid INTEGER, address1 ADDRESS, address2 ADDRESS, primarymobile [MOBILE], secondarymobile [MOBILE], emailid [EMAIL], facebookid [EMAIL], cityid INTEGER, countryid INTEGER, imagefile [NULLDESCRIPTION], otpid [NULLPIN], isverified BIT, verificationdate DATETIME, isactive BIT, acceptedterms BIT, hideapplicationtour BIT, isfacebookuser BIT, loyaltypoint INTEGER, redeempoint INTEGER, balancepoint INTEGER, notificationcount INTEGER, [Password] [NULLNAME], membershipnumber [NULLCODE], knowecouponothers [NULLDESCRIPTION], iqama [NULLCODE], nationalityid INTEGER, devicetoken [NULLDESCRIPTION] )
    INSERT INTO @Consumers 
                ( 
                            consumerid, 
                            firstname, 
                            secondname, 
                            familyname, 
                            userid, 
                            gender, 
                            birthdate, 
                            agegroupid, 
                            knowecouponid, 
                            address1, 
                            address2, 
                            primarymobile, 
                            secondarymobile, 
                            emailid, 
                            facebookid, 
                            cityid, 
                            countryid, 
                            imagefile, 
                            otpid, 
                            isverified, 
                            verificationdate, 
                            isactive, 
                            acceptedterms, 
                            hideapplicationtour, 
                            isfacebookuser, 
                            loyaltypoint, 
                            redeempoint, 
                            balancepoint, 
                            notificationcount, 
                            [Password], 
                            membershipnumber, 
                            knowecouponothers, 
                            iqama, 
                            nationalityid, 
                            devicetoken 
                ) 
    SELECT Isnull(@ConsumerID,0), 
           consumers.value('(FirstName[1])', '[Name]'), 
           consumers.value('(SecondName[1])', '[NullName]'), 
           consumers.value('(FamilyName[1])', '[NullName]'), 
           consumers.value('(UserID[1])', '[INTEGER]'), 
           consumers.value('(Gender[1])', '[SMALLINT]'), 
           CASE 
                  WHEN consumers.value('(BirthDate[1])', '[NullName]')!='0' THEN CONVERT(DATETIME, consumers.value('(BirthDate[1])', '[NullName]'),101)
                  ELSE NULL 
           END, 
           consumers.value('(AgeGroupID[1])', '[INTEGER]'), 
           CASE 
                  WHEN @VerificationCode IS NOT NULL 
                  AND    @VerificationCode <> 0 THEN 21 
                  ELSE consumers.value('(KnowECouponID[1])', '[INTEGER]') 
           END, 
           consumers.value('(Address1[1])', '[Address]'), 
           consumers.value('(Address2[1])', '[Address]'), 
           consumers.value('(PrimaryMobile[1])', '[Mobile]'), 
           consumers.value('(SecondaryMobile[1])', '[Mobile]'), 
           consumers.value('(EmailID[1])', '[Email]'), 
           consumers.value('(FacebookID[1])', '[Email]'), 
           CASE 
                  WHEN @VerificationCode IS NOT NULL 
                  AND    @VerificationCode <> 0 THEN 1 
                  ELSE consumers.value('(CityID[1])', '[INTEGER]') 
           END, 
           CASE 
                  WHEN @VerificationCode IS NOT NULL 
                  AND    @VerificationCode <> 0 THEN 183 
                  ELSE consumers.value('(CountryID[1])', '[INTEGER]') 
           END, 
           @ProfileImage, 
           -- Consumers.value('(ImageFile[1])', '[NullDescription]'), 
           consumers.value('(OtpID[1])', '[INTEGER]'), 
           consumers.value('(IsVerified[1])', '[BIT]'), 
           CASE 
                  WHEN @VerificationCode IS NOT NULL 
                  AND    @VerificationCode <> 0 THEN Getdate() 
                  ELSE NULL 
           END, 
           --Consumers.value('(VerificationDate[1])', '[DATETIME]'), 
           consumers.value('(IsActive[1])', '[BIT]'), 
           consumers.value('(AcceptedTerms[1])', '[BIT]'), 
           consumers.value('(HideApplicationTour[1])', '[BIT]'), 
           consumers.value('(IsFacebookUser[1])', '[BIT]'), 
           consumers.value('(LoyaltyPoint[1])', '[INTEGER]'), 
           consumers.value('(RedeemPoint[1])', '[INTEGER]'), 
           consumers.value('(BalancePoint[1])', '[INTEGER]'), 
           consumers.value('(NotificationCount[1])', '[INTEGER]'), 
           consumers.value('(Password[1])', 'NVARCHAR'), 
           CONVERT(NVARCHAR(10),@MemberShipID) , 
           consumers.value('(HowYouknowText[1])', '[NullDescription]'), 
           consumers.value('(Iqama[1])', '[NullCode]'), 
           consumers.value('(NationalityID[1])', '[INTEGER]'), 
           consumers.value('(DeviceToken[1])', 'NVARCHAR') 
    FROM   @ConsumerXML.nodes('/Registrations/RegistrationData') AS ecoupons(consumers); 
     
    SET @ErrorMessage ='' 
    INSERT INTO @ConsumerIntrestedCities 
    SELECT intrestedcity.value('(CityID[1])', '[INTEGER]') 
    FROM   @IntrestedCityXml.nodes('/IntrestedCity/City') AS ecoupons(intrestedcity); 
     
    SELECT @yearDiff=Datediff(yy,birthdate,Getdate()) 
    FROM   @Consumers 
    IF(@yearDiff >= 7 
    AND 
    @yearDiff <=17) 
    SET @AgeGroupID=11 
    ELSE 
    IF(@yearDiff>=18 
    AND 
    @yearDiff<=25) 
    SET @AgeGroupID=12 
    ELSE 
    IF(@yearDiff>=26 
    AND 
    @yearDiff<=35) 
    SET @AgeGroupID=13 
    ELSE 
    IF(@yearDiff>=36 
    AND 
    @yearDiff<=45) 
    SET @AgeGroupID=14 
    ELSE 
    IF(@yearDiff>45) 
    SET @AgeGroupID=15 
    ELSE 
    SET @AgeGroupID=11 
    SELECT @LoyaltyPoint=setupvalue 
    FROM   Coc_loyaltypointsetups(nolock) 
    WHERE  loyaltypointsetupid=101 
    BEGIN TRANSACTION trn_saveconsumers 
    IF (Isnull(@ConsumerID,0) = 0 ) 
    BEGIN 
      --IF NOT EXISTS(SELECT NULL FROM coc_Consumers(NOLOCK) WHERE IsVerified=1 AND (EmailID IN(SELECT EmailID FROM @Consumers) OR PrimaryMobile IN(SELECT PrimaryMobile FROM @Consumers)) OR (FacebookID IN (SELECT FacebookID FROM @Consumers WHERE IsFacebookUser=1))) 
IF NOT EXISTS 
( 
       SELECT NULL 
       FROM   Coc_consumers(nolock) 
       WHERE  ( 
                     emailid IN 
                     ( 
                            SELECT emailid 
                            FROM   @Consumers) 
              OR     primarymobile IN 
                     ( 
                            SELECT primarymobile 
                            FROM   @Consumers)) 
       OR     ( 
                     facebookid IN 
                     ( 
                            SELECT facebookid 
                            FROM   @Consumers 
                            WHERE  isfacebookuser=1))) 
BEGIN 
  INSERT INTO coc_consumers 
              ( 
                          firstname, 
                          secondname, 
                          familyname, 
                          userid, 
                          gender, 
                          birthdate, 
                          agegroupid, 
                          knowecouponid, 
                          address1, 
                          address2, 
                          primarymobile, 
                          secondarymobile, 
                          emailid, 
                          facebookid, 
                          cityid, 
                          countryid, 
                          imagefile, 
                          otpid, 
                          isverified, 
                          verificationdate, 
                          isactive, 
                          acceptedterms, 
                          hideapplicationtour, 
                          isfacebookuser, 
                          loyaltypoint, 
                          redeempoint, 
                          notificationcount, 
                          adddate, 
                          membershipnumber, 
                          knowecouponothers, 
                          nationalityid, 
                          iqamanumber, 
                          devicetoken 
              ) 
  SELECT firstname, 
         secondname, 
         familyname, 
         NULL, 
         gender, 
         birthdate, 
         @AgeGroupID, 
         knowecouponid, 
         address1, 
         address2, 
         primarymobile, 
         secondarymobile, 
         emailid, 
         facebookid, 
         cityid, 
         countryid, 
         imagefile, 
         otpid, 
         isverified, 
         verificationdate, 
         isactive, 
         acceptedterms, 
         hideapplicationtour, 
         isfacebookuser, 
         @LoyaltyPoint, 
         0, 
         notificationcount, 
         Getdate(), 
         membershipnumber, 
         knowecouponothers, 
         nationalityid, 
         iqama, 
         devicetoken 
  FROM   @Consumers 
  SET @ConsumerID=Scope_identity() 
  INSERT INTO coc_consumerpointdetails 
              ( 
                          consumerid, 
                          pointdate, 
                          loyaltypoint, 
                          redeempoint, 
                          pointsource 
              ) 
  SELECT @ConsumerID, 
         Getdate(), 
         @LoyaltyPoint, 
         0,101 
  INSERT INTO coc_consumerinterestedcities 
              ( 
                          consumerid, 
                          cityid 
              ) 
  SELECT @ConsumerID, 
         ci.cityid 
  FROM   @ConsumerIntrestedCities CI 
  SET @ErrorMessage=@ConsumerID 
END 
ELSE 
BEGIN 
  UPDATE coc_consumers 
  SET    otpid= 
         ( 
                SELECT otpid 
                FROM   @Consumers) 
  WHERE  consumerid= 
         ( 
                SELECT consumerid 
                FROM   Coc_consumers(nolock) 
                WHERE  emailid IN 
                       ( 
                              SELECT emailid 
                              FROM   @Consumers) 
                OR     primarymobile IN 
                       ( 
                              SELECT primarymobile 
                              FROM   @Consumers)) 
  SELECT @ErrorMessage= consumerid 
  FROM   Coc_consumers(nolock) 
  WHERE  emailid IN 
         ( 
                SELECT emailid 
                FROM   @Consumers) 
  OR     primarymobile IN 
         ( 
                SELECT primarymobile 
                FROM   @Consumers) 
  SET @ErrorMessage=@ErrorMessage 
END 
END 
else 
BEGIN 
  UPDATE cr 
  SET    cr.firstname=cs.firstname, 
         cr.secondname=cs.secondname, 
         cr.familyname=cs.familyname, 
         cr.gender=cs.gender, 
         cr.birthdate=cs.birthdate, 
         cr.agegroupid=@AgeGroupID, 
         cr.knowecouponid=cs.knowecouponid, 
         cr.address1=cs.address1, 
         cr.address2=cs.address2, 
         cr.primarymobile=cs.primarymobile, 
         cr.secondarymobile=cs.secondarymobile, 
         cr.emailid=cs.emailid, 
         -- CR.FacebookID=CS.FacebookID, 
         cr.cityid=cs.cityid, 
         cr.countryid=cs.countryid, 
         cr.imagefile=cs.imagefile, 
         cr.otpid=cs.otpid, 
         cr.isverified=1, 
         cr.verificationdate=cs.verificationdate, 
         cr.isactive=cs.isactive, 
         cr.acceptedterms=cs.acceptedterms, 
         cr.hideapplicationtour=cs.hideapplicationtour, 
         --CR.IsFacebookUser=CS.IsFacebookUser, 
         cr.loyaltypoint=@LoyaltyPoint, 
         --CR.RedeemPoint=CS.RedeemPoint, 
         cr.notificationcount=cs.notificationcount, 
         cr.knowecouponothers=cs.knowecouponothers, 
         cr.nationalityid=cs.nationalityid, 
         cr.iqamanumber=cs.iqama, 
         cr.devicetoken=cs.devicetoken,
		 cr.UserIdentityTypeID = @UserIdentityTypeID,
		 cr.UserIdentityNumber = @UserIdentityNumber
  FROM   coc_consumers CR, 
         @Consumers CS 
  WHERE  cr.consumerid = cs.consumerid 
  DELETE 
  FROM   coc_consumerinterestedcities 
  WHERE  consumerid=@ConsumerID 
  --updating image 
  IF(@ProfileImage!=NULL) 
  BEGIN 
    UPDATE coc_consumers 
    SET    imagefile=@ProfileImage 
    WHERE  consumerid=@ConsumerID 
  END 
  INSERT INTO coc_consumerinterestedcities 
              ( 
                          consumerid, 
                          cityid 
              ) 
  SELECT @ConsumerID, 
         ci.cityid 
  FROM   @ConsumerIntrestedCities CI 
  IF(@InviteeID IS NOT NULL) 
  BEGIN 
    SELECT @LoyaltyPoint=Isnull(setupvalue,0) 
    FROM   Coc_loyaltypointsetups(nolock) 
    WHERE  loyaltypointsetupid=102 
    INSERT INTO coc_consumerpointdetails 
                ( 
                            consumerid, 
                            pointdate, 
                            loyaltypoint, 
                            redeempoint, 
                            pointsource 
                ) 
    SELECT @InviteeID, 
           Getdate(), 
           @LoyaltyPoint, 
           0,102 
    UPDATE coc_consumers 
    SET    loyaltypoint = Isnull(loyaltypoint,0) + @LoyaltyPoint 
    WHERE  consumerid=@InviteeID 
  END 
END 
--IF(@InvitationCode!=0) 
-- BEGIN 
--  SELECT @ConsumerID =ConsumerID FROM coc_InviteFriends(NOLOCK) WHERE InvitationCode=@InvitationCode
--  SELECT @LoyaltyPoint=SetupValue FROM coc_LoyaltyPointSetups(NOLOCK) WHERE LoyaltyPointSetupID=102
--  INSERT INTO coc_ConsumerPointDetails(ConsumerID,PointDate,LoyaltyPoint,RedeemPoint) 
--   SELECT @ConsumerID,GETDATE(),@LoyaltyPoint,0 
--  UPDATE coc_Consumers SET LoyaltyPoint = LoyaltyPoint+@LoyaltyPoint WHERE ConsumerID=@ConsumerID
-- END 
SET @ErrorMessage = CONVERT(NVARCHAR,@ConsumerID) 
COMMIT TRANSACTION trn_saveconsumers 
END try 
BEGIN catch 
  ROLLBACK TRANSACTION 
  trn_saveconsumers 
  SELECT @ErrorMessage=Error_message() RAISERROR(@ErrorMessage, 16, 1); 

END catch 
SET nocount OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_SaveCorporateOrAgency]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_SaveCorporateOrAgency] 
@UserID INTEGER       
,@CorporateUserXml XML 
,@Password [Remark]  
,@CountryID bigint 
,@CityID  bigint 
,@ErrorMessage [Remark] = null OUTPUT

AS

	SET NOCOUNT ON
	BEGIN TRANSACTION TRN_Corporates
	BEGIN TRY

	DECLARE @CorporateRegistration TABLE ( CorporateID            INTEGER

	,                                      JCCICode               [Code]

	,                                      CrNumber               [NullCode]

	,                                      EmailID                [Email]

	,                                      UserID                 INT

	,                                      [Password]             NVARCHAR(55)

	,                                      PhoneNumber            [Mobile]

	,                                      IsActive               BIT

	,                                      IsEmailCommunication   BIT

	,                                      IsSMSCommunication     BIT

	,                                      IsMobileCommunication  BIT

	,                                      CanContactMorning      BIT

	,                                      CanContactEvening      BIT

	,                                      NewsLetterNotification BIT

	,                                      PromotionNotification  BIT

	,                                      CorporateName          [NullDescription]

	,                                      CorporateNameAR        [NullDescription]


	,                                      CorporateType          INT )

	SET @ErrorMessage = ''
	INSERT INTO @CorporateRegistration ( 
	 JCCICode
	 ,CRNumber
	 ,EmailID
	 , UserID
	 , [Password]
	, PhoneNumber
	, IsActive
	, IsEmailCommunication
	, IsSMSCommunication
	, IsMobileCommunication
	, CanContactMorning
	, CanContactEvening
	, NewsLetterNotification
	, PromotionNotification
	, CorporateName
	, CorporateNameAR
	, CorporateType )

	SELECT CorporateRegistration.value('JCCICode[1]', '[Code]')

	,      CorporateRegistration.value('CRNumber[1]', '[NullCode]')

	,      CorporateRegistration.value('EmailID[1]', '[Email]')

	,      CorporateRegistration.value('UserID[1]', 'INT')

	,      CorporateRegistration.value('Password[1]', '[CODE]')

	,      CorporateRegistration.value('PhoneNumber[1]', '[Mobile]')

	,      CorporateRegistration.value('IsActive[1]', 'BIT')

	,      CorporateRegistration.value('IsEmailCommunication[1]', 'BIT')

	,      CorporateRegistration.value('IsSMSCommunication[1]', 'BIT')

	,      CorporateRegistration.value('IsMobileCommunication[1]', 'BIT')

	,      CorporateRegistration.value('CanContactMorning[1]', 'BIT')

	,      CorporateRegistration.value('CanContactEvening[1]', 'BIT')

	,      CorporateRegistration.value('NewsLetterNotification[1]', 'BIT')

	,      CorporateRegistration.value('PromotionNotification[1]', 'BIT')

	,      CorporateRegistration.value('CorporateName[1]', '[NullDescription]')

	,      CorporateRegistration.value('CorporateNameAR[1]', '[NullDescription]')

	,      CorporateRegistration.value('CorporateType[1]', 'INT')

	FROM @CorporateUserXml.nodes('/Coorporates/CorporateData') AS ECoupons(CorporateRegistration);







	IF (ISNULL(@UserID, 0) = 0)

	BEGIN
		IF EXISTS (SELECT NULL	FROM coc_Users(NOLOCK) WHERE EmailID IN (SELECT EmailID FROM @CorporateRegistration))
		  BEGIN
		  SET @ErrorMessage = 'EmailID already Exists';
		  RETURN @ErrorMessage;
		  END
		 IF NOT EXISTS (

			SELECT NULL

			FROM coc_Users(NOLOCK)

			WHERE IsActive = 1 

				AND (

				EmailID IN (

				SELECT EmailID

				FROM @CorporateRegistration

				)

				)

			)

		BEGIN
		 


			print('insert coc_Users');

			INSERT INTO coc_Users ( UserName, EmailID, [Password]

			, RoleID, IsActive, ResetRequired, CreatedDate )

			SELECT CrNumber

			,      EmailID

			,      @Password

			,      3

			,      0

			,      0

			,      GETDATE()

			FROM @CorporateRegistration



			SET @UserID = SCOPE_IDENTITY()

			print('insert coc_Users after: userid  = '+convert(varchar,@userid));



			--auto generate 8 digit uniqu character for MerchantCode

			DECLARE @UniqueID uniqueidentifier

			DECLARE @MerchantCode nvarchar(100)

			SET @UniqueID = NEWID()

			set @MerchantCode = LEFT(@UniqueID,8);



			INSERT INTO coc_Corporates ( 
			JCCICode
			, CRNumber
			, UserID
			, EmailID
			, AddDate
			--, LicenseExpiryDate
			, PhoneNumber
			, CountryID
			,CityID
			, IsEmailCommunication
			, IsSMSCommunication
			, IsMobileCommunication
			, CanContactMorning
			, CanContactEvening
			, NewsLetterNotification
			, PromotionNotification
			, CorporateName
			, CorporateNameAR
			,MerchantCode
			,CorporateType 
			)

			SELECT JCCICode

			,      CRNumber

			,      @UserID

			,      EmailID

			,      GETDATE()

			--,      GETDATE()

			,      PhoneNumber
			,      @CountryID
			,      @CityID

			,      IsEmailCommunication

			,      IsMobileCommunication

			,      IsSMSCommunication

			,      CanContactMorning

			,      CanContactEvening

			,      NewsLetterNotification

			,      PromotionNotification

			,      CorporateName

			,      CorporateNameAR

			,      @MerchantCode

			,      CorporateType

			FROM @CorporateRegistration

			print('insert CorporateRegistration after');

			--SET @ErrorMessage = @UserID

			SET @ErrorMessage = ''

		END

		
	END

	ELSE

	BEGIN

		UPDATE CT

		SET

		-- CT.JCCICode               = CR.JCCICode

		--,   CT.CRNumber               = CR.CrNumber

		--,   CT.UserID                 = CR.UserID

		--,   CT.EmailID                = CR.EmailID

		--,   CT.MobileNumber           = CR.MobileNumber

		--,   CT.LicenseExpiryDate      = CR.LicenceExpiryDate

		--,   CT.CountryID              = CR.CountryID

		--,   CT.IsActive               = CR.IsActive

		--,   CT.CityID                 = CR.CityID

		--,   CT.Address1               = CR.Address

		--,   CT.PhoneNumber            = CR.PhoneNumber

		--,   CT.FaxNumber              = CR.FaxNumber

		--,   CT.IsEmailCommunication   = CR.IsEmailCommunication

		--,   CT.IsSMSCommunication     = CR.IsSMSCommunication

		--,   CT.IsMobileCommunication  = CR.IsMobileCommunication

		--,   CT.CanContactMorning      = CR.CanContactMorning

		--,   CT.CanContactEvening      = CR.CanContactEvening

		--,   CT.NewsLetterNotification = CR.NewsLetterNotification

		--,   CT.PromotionNotification  = CR.PromotionNotification

		--,   CT.CorporateName          = CR.CorporateName

		--,   CT.MerchantCode           = CR.MerchantCode



		CT.IsActive = CR.IsActive --modified by rafeeq

		FROM coc_Corporates         CT

		,    @CorporateRegistration CR

		WHERE CT.UserID = CR.UserID

		print('b4 coc_Users');

		UPDATE CU

		SET

		--CU.UserName = CR.EmailID

		--,CU.MobileNumber = CASE

		-- WHEN CR.MobileNumber = ''

		--  THEN NULL

		--  ELSE CR.MobileNumber

		-- END

		--,   CU.[Password]   = @Password

		--,   CU.IsActive     = CR.IsActive
		  CU.[Password] = @Password

		, CU.IsActive   = CR.IsActive --modified by rafeeq

		FROM coc_Users              CU

		,    @CorporateRegistration CR

		WHERE CU.UserID = CR.UserID



		--SET @ErrorMessage = @UserID

		SET @ErrorMessage = ''

	END



	COMMIT TRANSACTION TRN_Corporates

	END TRY



	BEGIN CATCH

	ROLLBACK TRANSACTION TRN_Corporates



	SELECT @ErrorMessage = ERROR_MESSAGE()



	RAISERROR (

	@ErrorMessage

	,16

	,1

	);

	END CATCH



	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_SaveCorporateProfile]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_SaveCorporateProfile] @UserID INTEGER       
,                                                              @CorporateUserXml XML 
,                                                              @Password [Remark]    
,                                                              @ErrorMessage [Remark] = null OUTPUT

AS

	SET NOCOUNT ON
	BEGIN TRANSACTION TRN_Corporates
	BEGIN TRY

	DECLARE @CorporateRegistration TABLE ( CorporateID            INTEGER

	,                                      JCCICode               [Code]

	,                                      CrNumber               [NullCode]

	,                                      EmailID                [Email]

	--,MobileNumber           [Phone]

	,                                      UserID                 INT

	,                                      [Password]             NVARCHAR(55)

	--,LicenceExpiryDate      DATETIME

	,                                      CRDocumentFile         [NullDescription]

	,                                      IDSponserFile          [NullDescription]

	,                                      LogoFile               [NullDescription]

	,									   FirstName              [NullName]
										   
	,									   LastName               [NullName]
										   
	,									   MiddleName             [NullName]

	,                                      CountryID              INT

	,                                      CityID                 INT NULL

   ,								       [Address]              [Address]

	,                                      PhoneNumber            [Mobile]

	,                                      FaxNumber              [Mobile]

	,                                      IsActive               BIT

	,                                      IsEmailCommunication   BIT

	,                                      IsSMSCommunication     BIT

	,                                      IsMobileCommunication  BIT

	,                                      CanContactMorning      BIT

	,                                      CanContactEvening      BIT

	,                                      NewsLetterNotification BIT

	,                                      PromotionNotification  BIT

	,                                      CorporateName          [NullDescription]

	,                                      CorporateNameAR        [NullDescription]

	,                                      MerchantCode           [NullDescription]

	,                                      CorporateType          INT )

	SET @ErrorMessage = ''



	INSERT INTO @CorporateRegistration ( JCCICode, CRNumber, EmailID
	
	--,MobileNumber

	, UserID, [Password]

	--,LicenceExpiryDate

	, CRDocumentFile, IDSponserFile, LogoFile

	,FirstName

	,LastName

	,MiddleName

	, CountryID, CityID

	,[Address]

	, PhoneNumber, FaxNumber, IsActive, IsEmailCommunication, IsSMSCommunication, IsMobileCommunication, CanContactMorning, CanContactEvening, NewsLetterNotification, PromotionNotification, CorporateName, CorporateNameAR, MerchantCode, CorporateType )

	SELECT CorporateRegistration.value('JCCICode[1]', '[Code]')

	,      CorporateRegistration.value('CRNumber[1]', '[NullCode]')

	,      CorporateRegistration.value('EmailID[1]', '[Email]')


	--,CorporateRegistration.value('MobileNumber[1]', '[Mobile]')

	,      CorporateRegistration.value('UserID[1]', 'INT')

	,      CorporateRegistration.value('Password[1]', '[CODE]')

	--,CorporateRegistration.value('LicenceExpiryDate[1]', 'DATETIME')

	,      CorporateRegistration.value('CRDocumentFile[1]', '[NullDescription]')

	,      CorporateRegistration.value('IDSponserFile[1]', '[NullDescription]')

	,      CorporateRegistration.value('LogoFile[1]', '[NullDescription]')

	,CorporateRegistration.value('FirstName[1]', '[NullName]')

	,CorporateRegistration.value('LastName[1]', '[NullName]')

	,CorporateRegistration.value('MiddleName[1]', '[NullName]')

	,      CorporateRegistration.value('CountryID[1]', 'INT')

	,      CorporateRegistration.value('CityID[1]', 'INT')

	,CorporateRegistration.value('Address[1]', '[Address]')

	,      CorporateRegistration.value('PhoneNumber[1]', '[Mobile]')

	,      CorporateRegistration.value('FaxNumber[1]', '[Mobile]')

	,      CorporateRegistration.value('IsActive[1]', 'BIT')

	,      CorporateRegistration.value('IsEmailCommunication[1]', 'BIT')

	,      CorporateRegistration.value('IsSMSCommunication[1]', 'BIT')

	,      CorporateRegistration.value('IsMobileCommunication[1]', 'BIT')

	,      CorporateRegistration.value('CanContactMorning[1]', 'BIT')

	,      CorporateRegistration.value('CanContactEvening[1]', 'BIT')

	,      CorporateRegistration.value('NewsLetterNotification[1]', 'BIT')

	,      CorporateRegistration.value('PromotionNotification[1]', 'BIT')

	,      CorporateRegistration.value('CorporateName[1]', '[NullDescription]')

	,      CorporateRegistration.value('CorporateNameAR[1]', '[NullDescription]')

	,      CorporateRegistration.value('MerchantCode[1]', '[NullDescription]')

	,      CorporateRegistration.value('CorporateType[1]', 'INT')

	FROM @CorporateUserXml.nodes('/Coorporates/CorporateData') AS ECoupons(CorporateRegistration);

	BEGIN

		UPDATE CT

		SET

		 CT.JCCICode               = CR.JCCICode

		,   CT.CRNumber               = CR.CrNumber

		,   CT.UserID                 = CR.UserID

		,   CT.EmailID                = CR.EmailID

		--,   CT.MobileNumber           = CR.MobileNumber

		--,   CT.LicenseExpiryDate      = CR.LicenceExpiryDate

		,   CT.CRDocumentFile         = CR.CRDocumentFile

		,   CT.IDSponsorFile          = CR.IDSponserFile

		,   CT.LogoFile               = CR.LogoFile

		,   CT.FirstName              = CR.FirstName

		,   CT.LastName               = CR.LastName

		,   CT.MiddleName             = CR.MiddleName

		,   CT.CountryID              = CR.CountryID

		,   CT.CityID                 = CR.CityID

		,   CT.Address1               = CR.Address

		,   CT.PhoneNumber            = CR.PhoneNumber

		,   CT.FaxNumber              = CR.FaxNumber

		,   CT.IsEmailCommunication   = CR.IsEmailCommunication

		,   CT.IsSMSCommunication     = CR.IsSMSCommunication

		,   CT.IsMobileCommunication  = CR.IsMobileCommunication

		,   CT.CanContactMorning      = CR.CanContactMorning

		,   CT.CanContactEvening      = CR.CanContactEvening

		,   CT.NewsLetterNotification = CR.NewsLetterNotification

		,   CT.PromotionNotification  = CR.PromotionNotification

		,   CT.CorporateName          = CR.CorporateName

		,   CT.MerchantCode           = CR.MerchantCode

		, CT.IsActive = CR.IsActive 
		 
		 FROM coc_Corporates (nolock)        CT
		,@CorporateRegistration CR
		WHERE CT.UserID = CR.UserID

		print('b4 coc_Users');

		UPDATE CU

		SET

		   CU.UserName = CR.EmailID

		  --,CU.MobileNumber = CASE 

		  -- WHEN CR.MobileNumber = ''

		  -- THEN NULL

		  -- ELSE CR.MobileNumber

		  --END

		,CU.[Password]   = @Password
		,CU.IsActive     = CR.IsActive

		FROM coc_Users              CU

		,    @CorporateRegistration CR

		WHERE CU.UserID = CR.UserID



		--SET @ErrorMessage = @UserID

		SET @ErrorMessage = ''

	END



	COMMIT TRANSACTION TRN_Corporates

	END TRY
	BEGIN CATCH

	ROLLBACK TRANSACTION TRN_Corporates
	SELECT @ErrorMessage = ERROR_MESSAGE()
	RAISERROR (
	@ErrorMessage

	,16

	,1

	);
	END CATCH
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_SaveCorporateProfileData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_SaveCorporateProfileData] 
                                       @UserID INTEGER
									  ,@UserName             [NullCode]      
,                                      @JCCICode               [Code]
,                                      @CrNumber               [NullCode]
,                                      @EmailID                [Email]
,                                      @CRDocumentFile         [NullDescription]
,                                      @IDSponserFile          [NullDescription]
,                                      @LogoFile               [NullDescription]
,									   @FirstName              [NullName]
,									   @LastName               [NullName]
,									   @MiddleName             [NullName]
,                                      @CountryID              INT
,                                      @CityID                 INT NULL
,   								   @Address                [Address]
,                                      @PhoneNumber            [Mobile]
,                                      @FaxNumber              [Mobile]
,                                      @IsActive               BIT
,                                      @CorporateName          [NullDescription]
,                                      @CorporateNameAR        [NullDescription]
,                                      @MerchantCode           [NullDescription] 
,                                      @Password [Remark]    
,                                      @ErrorMessage [Remark] = null OUTPUT

AS
SET NOCOUNT ON
BEGIN TRY
	update coc_Corporates  
    SET 
            JCCICode               = @JCCICode
										
		,   CRNumber               = @CrNumber
										
		,   EmailID                = @EmailID
										
		,   CRDocumentFile         = @CRDocumentFile
										
		,   IDSponsorFile          = @IDSponserFile
										
		,  LogoFile               = @LogoFile
										
		,   FirstName              = @FirstName
										
		,   LastName               = @LastName
										
		,   MiddleName             = @MiddleName
										
		,   CountryID              = @CountryID
										
		,  CityID                 = @CityID
										
		,   Address1               = @Address
										
		,   PhoneNumber            = @PhoneNumber
										
		,   FaxNumber              = @FaxNumber
										
		--,   IsEmailCommunication   = @IsEmailCommunication
										
		--,   IsSMSCommunication     = @IsSMSCommunication
									
		--,   IsMobileCommunication  = @IsMobileCommunication
									
		--,   CanContactMorning      = @CanContactMorning
									
		--,   CanContactEvening      = @CanContactEvening
									
		--,   NewsLetterNotification = @NewsLetterNotification
									
		--,   PromotionNotification  = @PromotionNotification
									
		,   CorporateName          = @CorporateName
									 
		,   MerchantCode           = @MerchantCode

		--,   IsActive = @IsActive  
	
	where UserID=@UserID
	UPDATE coc_Users
	SET 
	   UserName=@UserName
	 ,[Password]=@Password
	 --,IsActive=@IsActive
	 ,EmailID=@EmailID

	where UserID=@UserID
	 

	SET @ErrorMessage = ''
END TRY                  
  BEGIN CATCH        
  SET @ErrorMessage = 'Error'
  END CATCH                  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_USP_SaveCorporateRegistration]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_USP_SaveCorporateRegistration]        
@CorporateUserXml XML    
,@SpResponseStatus int            = null OUTPUT            
,@SpResponseMessage nvarchar(max) = null OUTPUT            
,@SpErrorDetails nvarchar(max)    = null OUTPUT            
AS            
SET NOCOUNT ON      
BEGIN TRANSACTION TRN_Corporates    
BEGIN  TRY    
    DECLARE @UserID INTEGER    
    DECLARE @UniqueID uniqueidentifier      
    DECLARE @MerchantCode nvarchar(100)   
    DECLARE @CorporateNameEN [NullDescription]
    
    DECLARE @CorporateRegistration TABLE (    
    CorporateNameEN     [NullDescription],    
    CorporateNameAR     [NullDescription],    
    CountryId           INT,    
    CityId              INT NULL,    
    CRNumber            [NullCode],    
    ChamberMembershipId [Code],    
    EmailId             [Email],    
    PhoneNumber         [Mobile],    
    [Password]          NVARCHAR(MAX),    
    [Type]              INT NULL)             
    
    INSERT INTO @CorporateRegistration (     
    CorporateNameEN,    
    CorporateNameAR,    
    CountryID,    
    CityID,    
    CRNumber,    
    ChamberMembershipId,     
    EmailID,    
    PhoneNumber,    
    [Password],    
    [Type])    
    SELECT     
    CorporateRegistration.value('CorporateNameEN[1]', '[NullDescription]'),    
    CorporateRegistration.value('CorporateNameAR[1]', '[NullDescription]'),    
    CorporateRegistration.value('CountryId[1]', 'INT'),    
    CorporateRegistration.value('CityId[1]', 'INT'),    
    CorporateRegistration.value('CRNumber[1]', '[NullCode]'),    
    CorporateRegistration.value('ChamberMembershipId[1]', '[Code]'),    
    CorporateRegistration.value('EmailId[1]', '[Email]'),    
    CorporateRegistration.value('PhoneNumber[1]', '[Mobile]'),    
    CorporateRegistration.value('Password[1]', 'NVARCHAR(MAX)'),    
    CorporateRegistration.value('Type[1]', 'INT')    
    FROM @CorporateUserXml.nodes('/Coorporates/CorporateData') AS ECoupons(CorporateRegistration);  
    
    IF NOT EXISTS (SELECT UserID FROM coc_Users(NOLOCK)     
                    WHERE IsActive = 1 AND  IsDeleted = 0 and  
                    UserName = (SELECT CRNumber FROM @CorporateRegistration))    
                    --EmailID IN (SELECT EmailID FROM @CorporateRegistration) AND     
                    --MobileNumber IN (SELECT PhoneNumber FROM @CorporateRegistration)     
    BEGIN     
        INSERT INTO coc_Users (UserName, EmailID, [Password], MobileNumber, RoleID, IsActive, ResetRequired, CreatedDate )      
        SELECT CRNumber, EmailID, [Password], PhoneNumber, 3, 0, 0,GETDATE()    
        FROM @CorporateRegistration     
                
        SET @UserID = SCOPE_IDENTITY()     
        SET @UniqueID = NEWID()      
        SET @MerchantCode = LEFT(@UniqueID,8);    
    
        INSERT INTO coc_Corporates (CorporateName, CorporateNameAR, CountryID, CityID, CRNumber, JCCICode, EmailID, PhoneNumber, UserID, AddDate, MerchantCode, CorporateType)      
        SELECT  CorporateNameEN, CorporateNameAR, CountryId, CityId, CRNumber,ChamberMembershipId, EmailId, PhoneNumber, @UserID, GETDATE(), @MerchantCode, [Type]       
        FROM @CorporateRegistration

        --Send Notification to Admin.
        SELECT @CorporateNameEN = CorporateNameEN FROM @CorporateRegistration
        DECLARE @SpResponseStatusL INT, @SpResponseMessageL nvarchar(max), @SpErrorDetailsL nvarchar(max)
        Exec [dbo].[core_usp_InsertWebNotification] 2, 'Corporate/Edit/', @UserID, 1, NULL, 'Corporate Activation Pending', 
        'Corporate Activation Pending', @CorporateNameEN, 1, @UserID, NULL, NULL, @SpResponseStatus = @SpResponseStatusL, 
        @SpResponseMessage = @SpResponseMessageL, @SpErrorDetails = @SpErrorDetailsL
    
        SET @SpResponseStatus = 1;              
        SET @SpResponseMessage = 'Success';              
        SET @SpErrorDetails = 'Success';    
    END    
    ELSE    
    BEGIN    
        SET @SpResponseStatus = 2;              
        SET @SpResponseMessage = 'CorporateUserAlreadyExists';              
        SET @SpErrorDetails = 'CorporateUserAlreadyExists';    
    END    
COMMIT TRANSACTION TRN_Corporates     
END TRY            
BEGIN CATCH       
ROLLBACK TRANSACTION TRN_Corporates      
    Set @SpResponseStatus=0;            
    Set @SpResponseMessage='GenericError';            
    Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,       
                        ErrorSeverity :<'+ convert(varchar(500), Error_severity())+'>,       
                        ErrorState : <'+convert(varchar(500), Error_state())+'> ,       
                   ErrorProcedure : <'+Error_procedure() +'> ,      
                        ErrorLine <'+convert(varchar(500), Error_line())+'>       
                        ErrorMessage : <'+ERROR_MESSAGE()+'>';       
END CATCH      
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_SaveCorporateUserRegistration]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_SaveCorporateUserRegistration] @UserID INTEGER       
,                                                              @CorporateUserXml XML 
,                                                              @Password [Remark]    
,                                                              @ErrorMessage [Remark] = null OUTPUT

AS
	SET NOCOUNT ON
	BEGIN TRANSACTION TRN_Corporates
	BEGIN TRY

	DECLARE @CorporateRegistration TABLE ( CorporateID            INTEGER
	,                                      JCCICode               [Code]
	,                                      CrNumber               [NullCode]
	,                                      EmailID                [Email]
	,                                      MobileNumber           [Phone]
	,                                      UserID                 INT
	,                                      [Password]             NVARCHAR(55)
	,                                      LicenceExpiryDate      DATETIME
	,                                      CRDocumentFile         [NullDescription]
	,                                      IDSponserFile          [NullDescription]
	,                                      LogoFile               [NullDescription]
	,                                      FirstName              [NullName]
	,                                      LastName               [NullName]
	,                                      MiddleName             [NullName]
	,                                      CountryID              INT
	,                                      CityID                 INT NULL
	,                                      [Address]              [Address]
	,                                      PhoneNumber            [Mobile]
	,                                      FaxNumber              [Mobile]
	,                                      IsActive               BIT
	,                                      IsEmailCommunication   BIT
	,                                      IsSMSCommunication     BIT
	,                                      IsMobileCommunication  BIT
	,                                      CanContactMorning      BIT
	,                                      CanContactEvening      BIT
	,                                      NewsLetterNotification BIT
	,                                      PromotionNotification  BIT
	,                                      CorporateName          [NullDescription]
	,                                      CorporateNameAR        [NullDescription]
	,                                      MerchantCode           [NullDescription]
	,                                      CorporateType          INT 
    ,                                      VATNo                  [NullDescription]
    ,                                      UserName               [Description] 
    )

	SET @ErrorMessage = ''

	INSERT INTO @CorporateRegistration ( JCCICode, CRNumber, EmailID
	,MobileNumber
	, UserID, [Password]
	,LicenceExpiryDate
	, CRDocumentFile, IDSponserFile, LogoFile
	,FirstName
	,LastName
	,MiddleName
	, CountryID, CityID
	,[Address]
	, PhoneNumber, FaxNumber, IsActive, IsEmailCommunication, IsSMSCommunication, IsMobileCommunication, CanContactMorning, CanContactEvening, NewsLetterNotification, PromotionNotification, CorporateName, CorporateNameAR, MerchantCode, CorporateType, VATNo, UserName)

	SELECT CorporateRegistration.value('JCCICode[1]', '[Code]')
	,      CorporateRegistration.value('CRNumber[1]', '[NullCode]')
	,      CorporateRegistration.value('EmailID[1]', '[Email]')
	,      CorporateRegistration.value('MobileNumber[1]', '[Mobile]')
	,      CorporateRegistration.value('UserID[1]', 'INT')
	,      CorporateRegistration.value('Password[1]', '[CODE]')
	,      CorporateRegistration.value('LicenceExpiryDate[1]', 'DATETIME')
	,      CorporateRegistration.value('CRDocumentFile[1]', '[NullDescription]')
	,      CorporateRegistration.value('IDSponserFile[1]', '[NullDescription]')
	,      CorporateRegistration.value('LogoFile[1]', '[NullDescription]')
	,      CorporateRegistration.value('FirstName[1]', '[NullName]')
	,      CorporateRegistration.value('LastName[1]', '[NullName]')
	,      CorporateRegistration.value('MiddleName[1]', '[NullName]')
	,      CorporateRegistration.value('CountryID[1]', 'INT')
	,      CorporateRegistration.value('CityID[1]', 'INT')
	,      CorporateRegistration.value('Address[1]', '[Address]')
	,      CorporateRegistration.value('PhoneNumber[1]', '[Mobile]')
	,      CorporateRegistration.value('FaxNumber[1]', '[Mobile]')
	,      CorporateRegistration.value('IsActive[1]', 'BIT')
	,      CorporateRegistration.value('IsEmailCommunication[1]', 'BIT')
	,      CorporateRegistration.value('IsSMSCommunication[1]', 'BIT')
	,      CorporateRegistration.value('IsMobileCommunication[1]', 'BIT')
	,      CorporateRegistration.value('CanContactMorning[1]', 'BIT')
	,      CorporateRegistration.value('CanContactEvening[1]', 'BIT')
	,      CorporateRegistration.value('NewsLetterNotification[1]', 'BIT')
	,      CorporateRegistration.value('PromotionNotification[1]', 'BIT')
	,      CorporateRegistration.value('CorporateName[1]', '[NullDescription]')
	,      CorporateRegistration.value('CorporateNameAR[1]', '[NullDescription]')
	,      CorporateRegistration.value('MerchantCode[1]', '[NullDescription]')
	,      CorporateRegistration.value('CorporateType[1]', 'INT')
    ,      CorporateRegistration.value('VATNumber[1]', '[NullDescription]')
    ,      CorporateRegistration.value('UserName[1]', '[Description]')
	FROM @CorporateUserXml.nodes('/Coorporates/CorporateData') AS ECoupons(CorporateRegistration);
	
    IF (ISNULL(@UserID, 0) = 0)
	BEGIN
		IF NOT EXISTS (
			SELECT NULL
			FROM coc_Users(NOLOCK)
			WHERE IsActive = 1
				AND (
				EmailID IN (
				SELECT EmailID
				FROM @CorporateRegistration
				)
				)

			--AND (
			--MobileNumber IN (
			--SELECT MobileNumber
			--FROM @CorporateRegistration
			--)
			--)

			)

		BEGIN

			print('insert coc_Users');

			INSERT INTO coc_Users ( UserName, EmailID, [Password]

			--,MobileNumber

			, RoleID, IsActive, ResetRequired, CreatedDate )

			SELECT CrNumber

			,      EmailID

			,      @Password

			--,      MobileNumber

			,      3

			,      0

			,      0

			,      GETDATE()

			FROM @CorporateRegistration



			SET @UserID = SCOPE_IDENTITY()

			print('insert coc_Users after: userid  = '+convert(varchar,@userid));



			--auto generate 8 digit uniqu character for MerchantCode

			DECLARE @UniqueID uniqueidentifier

			DECLARE @MerchantCode nvarchar(100)

			SET @UniqueID = NEWID()

			set @MerchantCode = LEFT(@UniqueID,8);



			INSERT INTO coc_Corporates ( JCCICode, CRNumber, UserID, EmailID

			--,MobileNumber

			, AddDate

			--,LicenseExpiryDate

			, CRDocumentFile, IDSponsorFile, LogoFile

			--,FirstName

			--,LastName

			--,MiddleName

			, CountryID, CityID

			--,Address1

			, PhoneNumber, FaxNumber, IsEmailCommunication, IsSMSCommunication, IsMobileCommunication, CanContactMorning, CanContactEvening, NewsLetterNotification, PromotionNotification, CorporateName, CorporateNameAR, MerchantCode, CorporateType )

			SELECT JCCICode

			,      CRNumber

			,      @UserID

			,      EmailID

			--,      MobileNumber

			,      GETDATE()

			--,      LicenceExpiryDate

			,      CRDocumentFile

			,      IDSponserFile

			,      LogoFile

			--,      FirstName

			--,      LastName

			--,      MiddleName

			,      CountryID

			,      CityID

			--,      [Address]

			,      PhoneNumber

			,      FaxNumber

			,      IsEmailCommunication

			,      IsMobileCommunication

			,      IsSMSCommunication

			,      CanContactMorning

			,      CanContactEvening

			,      NewsLetterNotification

			,      PromotionNotification

			,      CorporateName

			,      CorporateNameAR

			,      @MerchantCode

			,      CorporateType

			FROM @CorporateRegistration

			print('insert CorporateRegistration after');

			--SET @ErrorMessage = @UserID

			SET @ErrorMessage = ''

		END

	END

	ELSE

	BEGIN
        
    
        DECLARE @CRNumber NVARCHAR(20);
        DECLARE @EmailID VARCHAR(100);
        DECLARE @MobileNumber VARCHAR(15);
        DECLARE @JCCICode NVARCHAR(20);
        DECLARE @UserName NVARCHAR(100);

        SELECT @CRNumber = CrNumber, @EmailID = EmailID, @MobileNumber = MobileNumber,
        @JCCICode = JCCICode, @UserName = UserName
        FROM @CorporateRegistration

        IF EXISTS (SELECT NULL FROM coc_Users(NOLOCK) WHERE IsActive = 1 AND UserID <> @UserID 
        AND EmailID = @EmailID)
        BEGIN
            SET @ErrorMessage = 'Corporate_Exists_With_EmailID'
            ROLLBACK TRANSACTION TRN_Corporates
            RETURN;
        END
        ELSE IF EXISTS(SELECT NULL FROM coc_Users(NOLOCK) WHERE IsActive = 1 AND UserID <> @UserID 
        AND MobileNumber = @MobileNumber)
        BEGIN
            SET @ErrorMessage = 'Corporate_Exists_With_MobileNumber'
            ROLLBACK TRANSACTION TRN_Corporates
            RETURN;
        END
        ELSE IF EXISTS(SELECT NULL FROM coc_Corporates(NOLOCK) WHERE IsActive = 1 AND UserID <> @UserID 
        AND CRNumber = @CRNumber)
        BEGIN
            SET @ErrorMessage = 'Corporate_Exists_With_CRNumber'
            ROLLBACK TRANSACTION TRN_Corporates
            RETURN;
        END
        ELSE IF EXISTS(SELECT NULL FROM coc_Corporates(NOLOCK) WHERE IsActive = 1 AND UserID <> @UserID 
        AND JCCICode = @JCCICode)
        BEGIN
            SET @ErrorMessage = 'Corporate_Exists_With_JCCICode'
            ROLLBACK TRANSACTION TRN_Corporates
            RETURN;
        END
        ELSE IF EXISTS(SELECT NULL FROM coc_Users(NOLOCK) WHERE IsActive = 1 AND UserID <> @UserID 
        AND UserName = @UserName)
        BEGIN
            SET @ErrorMessage = 'Corporate_Exists_With_UserName'
            ROLLBACK TRANSACTION TRN_Corporates
            RETURN;
        END
		UPDATE CT
		SET
		    CT.JCCICode               = CR.JCCICode
		,   CT.CRNumber               = CR.CrNumber
		,   CT.UserID                 = CR.UserID
		,   CT.EmailID                = CR.EmailID
		,   CT.MobileNumber           = CR.MobileNumber
		,   CT.LicenseExpiryDate      = CR.LicenceExpiryDate
		,   CT.CRDocumentFile         = CR.CRDocumentFile
		,   CT.IDSponsorFile          = CR.IDSponserFile
		,   CT.LogoFile               = CR.LogoFile
		,   CT.FirstName              = CR.FirstName
		,   CT.LastName               = CR.LastName
		,   CT.MiddleName             = CR.MiddleName
		,   CT.CountryID              = CR.CountryID
		,   CT.CityID                 = CR.CityID
		,   CT.Address1               = CR.Address
		,   CT.PhoneNumber            = CR.PhoneNumber
		,   CT.FaxNumber              = CR.FaxNumber
		--,   CT.IsEmailCommunication   = CR.IsEmailCommunication
		--,   CT.IsSMSCommunication     = CR.IsSMSCommunication
		--,   CT.IsMobileCommunication  = CR.IsMobileCommunication
		--,   CT.CanContactMorning      = CR.CanContactMorning
		--,   CT.CanContactEvening      = CR.CanContactEvening
		--,   CT.NewsLetterNotification = CR.NewsLetterNotification
		--,   CT.PromotionNotification  = CR.PromotionNotification
		,   CT.CorporateName          = CR.CorporateName
        ,   CT.CorporateNameAR        = CR.CorporateNameAR
		,   CT.MerchantCode           = CR.MerchantCode
		,   CT.IsActive = CR.IsActive 
        ,   CT.VATNo = CR.VATNo 
		FROM coc_Corporates         CT
		,    @CorporateRegistration CR
		WHERE CT.UserID = CR.UserID

		print('b4 coc_Users');

		UPDATE CU
		SET
		  CU.MobileNumber = CR.MobileNumber
		, CU.[Password] = @Password
		, CU.IsActive   = CR.IsActive
        , CU.EmailID = CR.EmailID
        , CU.UserName = CR.UserName
		FROM coc_Users              CU
		,    @CorporateRegistration CR
		WHERE CU.UserID = CR.UserID
		
        --SET @ErrorMessage = @UserID
		SET @ErrorMessage = ''

	END
	COMMIT TRANSACTION TRN_Corporates
	END TRY
	BEGIN CATCH
	    ROLLBACK TRANSACTION TRN_Corporates
	    SELECT @ErrorMessage = ERROR_MESSAGE()
	    RAISERROR (@ErrorMessage,16,1);
	END CATCH
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_SaveCorporateUserRegistration_Bckup_29092021]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_SaveCorporateUserRegistration_Bckup_29092021] @UserID INTEGER       
,                                                              @CorporateUserXml XML 
,                                                              @Password [Remark]    
,                                                              @ErrorMessage [Remark] = null OUTPUT

AS

	SET NOCOUNT ON
	BEGIN TRANSACTION TRN_Corporates
	BEGIN TRY

	DECLARE @CorporateRegistration TABLE ( CorporateID            INTEGER

	,                                      JCCICode               [Code]

	,                                      CrNumber               [NullCode]

	,                                      EmailID                [Email]

	--,MobileNumber           [Phone]

	,                                      UserID                 INT

	,                                      [Password]             NVARCHAR(55)

	--,LicenceExpiryDate      DATETIME

	,                                      CRDocumentFile         [NullDescription]

	,                                      IDSponserFile          [NullDescription]

	,                                      LogoFile               [NullDescription]

	--,FirstName              [NullName]

	--,LastName               [NullName]

	--,MiddleName             [NullName]

	,                                      CountryID              INT

	,                                      CityID                 INT NULL

	--,[Address]              [Address]

	,                                      PhoneNumber            [Mobile]

	,                                      FaxNumber              [Mobile]

	,                                      IsActive               BIT

	,                                      IsEmailCommunication   BIT

	,                                      IsSMSCommunication     BIT

	,                                      IsMobileCommunication  BIT

	,                                      CanContactMorning      BIT

	,                                      CanContactEvening      BIT

	,                                      NewsLetterNotification BIT

	,                                      PromotionNotification  BIT

	,                                      CorporateName          [NullDescription]

	,                                      CorporateNameAR        [NullDescription]

	,                                      MerchantCode           [NullDescription]

	,                                      CorporateType          INT )

	SET @ErrorMessage = ''



	INSERT INTO @CorporateRegistration ( JCCICode, CRNumber, EmailID

	--,MobileNumber

	, UserID, [Password]

	--,LicenceExpiryDate

	, CRDocumentFile, IDSponserFile, LogoFile

	--,FirstName

	--,LastName

	--,MiddleName

	, CountryID, CityID

	--,[Address]

	, PhoneNumber, FaxNumber, IsActive, IsEmailCommunication, IsSMSCommunication, IsMobileCommunication, CanContactMorning, CanContactEvening, NewsLetterNotification, PromotionNotification, CorporateName, CorporateNameAR, MerchantCode, CorporateType )

	SELECT CorporateRegistration.value('JCCICode[1]', '[Code]')

	,      CorporateRegistration.value('CRNumber[1]', '[NullCode]')

	,      CorporateRegistration.value('EmailID[1]', '[Email]')

	--,CorporateRegistration.value('MobileNumber[1]', '[Mobile]')

	,      CorporateRegistration.value('UserID[1]', 'INT')

	,      CorporateRegistration.value('Password[1]', '[CODE]')

	--,CorporateRegistration.value('LicenceExpiryDate[1]', 'DATETIME')

	,      CorporateRegistration.value('CRDocumentFile[1]', '[NullDescription]')

	,      CorporateRegistration.value('IDSponserFile[1]', '[NullDescription]')

	,      CorporateRegistration.value('LogoFile[1]', '[NullDescription]')

	--,CorporateRegistration.value('FirstName[1]', '[NullName]')

	--,CorporateRegistration.value('LastName[1]', '[NullName]')

	--,CorporateRegistration.value('MiddleName[1]', '[NullName]')

	,      CorporateRegistration.value('CountryID[1]', 'INT')

	,      CorporateRegistration.value('CityID[1]', 'INT')

	--,CorporateRegistration.value('Address[1]', '[Address]')

	,      CorporateRegistration.value('PhoneNumber[1]', '[Mobile]')

	,      CorporateRegistration.value('FaxNumber[1]', '[Mobile]')

	,      CorporateRegistration.value('IsActive[1]', 'BIT')

	,      CorporateRegistration.value('IsEmailCommunication[1]', 'BIT')

	,      CorporateRegistration.value('IsSMSCommunication[1]', 'BIT')

	,      CorporateRegistration.value('IsMobileCommunication[1]', 'BIT')

	,      CorporateRegistration.value('CanContactMorning[1]', 'BIT')

	,      CorporateRegistration.value('CanContactEvening[1]', 'BIT')

	,      CorporateRegistration.value('NewsLetterNotification[1]', 'BIT')

	,      CorporateRegistration.value('PromotionNotification[1]', 'BIT')

	,      CorporateRegistration.value('CorporateName[1]', '[NullDescription]')

	,      CorporateRegistration.value('CorporateNameAR[1]', '[NullDescription]')

	,      CorporateRegistration.value('MerchantCode[1]', '[NullDescription]')

	,      CorporateRegistration.value('CorporateType[1]', 'INT')

	FROM @CorporateUserXml.nodes('/Coorporates/CorporateData') AS ECoupons(CorporateRegistration);







	IF (ISNULL(@UserID, 0) = 0)

	BEGIN

		IF NOT EXISTS (

			SELECT NULL

			FROM coc_Users(NOLOCK)

			WHERE IsActive = 1

				AND (

				EmailID IN (

				SELECT EmailID

				FROM @CorporateRegistration

				)

				)

			--AND (
			--MobileNumber IN (
			--SELECT MobileNumber
			--FROM @CorporateRegistration
			--)
			--)

			)

		BEGIN

			print('insert coc_Users');

			INSERT INTO coc_Users ( UserName, EmailID, [Password]

			--,MobileNumber

			, RoleID, IsActive, ResetRequired, CreatedDate )

			SELECT CrNumber

			,      EmailID

			,      @Password

			--,      MobileNumber

			,      3

			,      0

			,      0

			,      GETDATE()

			FROM @CorporateRegistration



			SET @UserID = SCOPE_IDENTITY()

			print('insert coc_Users after: userid  = '+convert(varchar,@userid));



			--auto generate 8 digit uniqu character for MerchantCode

			DECLARE @UniqueID uniqueidentifier

			DECLARE @MerchantCode nvarchar(100)

			SET @UniqueID = NEWID()

			set @MerchantCode = LEFT(@UniqueID,8);



			INSERT INTO coc_Corporates ( JCCICode, CRNumber, UserID, EmailID

			--,MobileNumber

			, AddDate

			--,LicenseExpiryDate

			, CRDocumentFile, IDSponsorFile, LogoFile

			--,FirstName

			--,LastName

			--,MiddleName

			, CountryID, CityID

			--,Address1

			, PhoneNumber, FaxNumber, IsEmailCommunication, IsSMSCommunication, IsMobileCommunication, CanContactMorning, CanContactEvening, NewsLetterNotification, PromotionNotification, CorporateName, CorporateNameAR, MerchantCode, CorporateType )

			SELECT JCCICode

			,      CRNumber

			,      @UserID

			,      EmailID

			--,      MobileNumber

			,      GETDATE()

			--,      LicenceExpiryDate

			,      CRDocumentFile

			,      IDSponserFile

			,      LogoFile

			--,      FirstName

			--,      LastName

			--,      MiddleName

			,      CountryID

			,      CityID

			--,      [Address]

			,      PhoneNumber

			,      FaxNumber

			,      IsEmailCommunication

			,      IsMobileCommunication

			,      IsSMSCommunication

			,      CanContactMorning

			,      CanContactEvening

			,      NewsLetterNotification

			,      PromotionNotification

			,      CorporateName

			,      CorporateNameAR

			,      @MerchantCode

			,      CorporateType

			FROM @CorporateRegistration

			print('insert CorporateRegistration after');

			--SET @ErrorMessage = @UserID

			SET @ErrorMessage = ''

		END

	END

	ELSE

	BEGIN

		UPDATE CT

		SET

		-- CT.JCCICode               = CR.JCCICode

		--,   CT.CRNumber               = CR.CrNumber

		--,   CT.UserID                 = CR.UserID

		--,   CT.EmailID                = CR.EmailID

		--,   CT.MobileNumber           = CR.MobileNumber

		--,   CT.LicenseExpiryDate      = CR.LicenceExpiryDate

		--,   CT.CRDocumentFile         = CR.CRDocumentFile

		--,   CT.IDSponsorFile          = CR.IDSponserFile

		--,   CT.LogoFile               = CR.LogoFile

		--,   CT.FirstName              = CR.FirstName

		--,   CT.LastName               = CR.LastName

		--,   CT.MiddleName             = CR.MiddleName

		--,   CT.CountryID              = CR.CountryID

		--,   CT.IsActive               = CR.IsActive

		--,   CT.CityID                 = CR.CityID

		--,   CT.Address1               = CR.Address

		--,   CT.PhoneNumber            = CR.PhoneNumber

		--,   CT.FaxNumber              = CR.FaxNumber

		--,   CT.IsEmailCommunication   = CR.IsEmailCommunication

		--,   CT.IsSMSCommunication     = CR.IsSMSCommunication

		--,   CT.IsMobileCommunication  = CR.IsMobileCommunication

		--,   CT.CanContactMorning      = CR.CanContactMorning

		--,   CT.CanContactEvening      = CR.CanContactEvening

		--,   CT.NewsLetterNotification = CR.NewsLetterNotification

		--,   CT.PromotionNotification  = CR.PromotionNotification

		--,   CT.CorporateName          = CR.CorporateName

		--,   CT.MerchantCode           = CR.MerchantCode



		CT.IsActive = CR.IsActive --modified by rafeeq

		FROM coc_Corporates         CT

		,    @CorporateRegistration CR

		WHERE CT.UserID = CR.UserID

		print('b4 coc_Users');

		UPDATE CU

		SET

		--CU.UserName = CR.EmailID

		--,CU.MobileNumber = CASE

		-- WHEN CR.MobileNumber = ''

		--  THEN NULL

		--  ELSE CR.MobileNumber

		-- END

		--,   CU.[Password]   = @Password

		--,   CU.IsActive     = CR.IsActive
		  CU.[Password] = @Password

		, CU.IsActive   = CR.IsActive --modified by rafeeq

		FROM coc_Users              CU

		,    @CorporateRegistration CR

		WHERE CU.UserID = CR.UserID



		--SET @ErrorMessage = @UserID

		SET @ErrorMessage = ''

	END



	COMMIT TRANSACTION TRN_Corporates

	END TRY



	BEGIN CATCH

	ROLLBACK TRANSACTION TRN_Corporates



	SELECT @ErrorMessage = ERROR_MESSAGE()



	RAISERROR (

	@ErrorMessage

	,16

	,1

	);

	END CATCH



	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveCustomerRegister]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_SaveCustomerRegister] 
											  @FullName NVARCHAR(200)          
,                                             @PrimaryMobile VARCHAR(15)      
,                                             @EmailID VARCHAR(100)           
,                                             @Password VARCHAR(200)          
,                                             @CountryID INT  =null                
,                                             @OtpID INT  
,											  @Gender    INT  =null  
,                                             @ImageFile NVARCHAR(100)         = NULL
,                                             @IsFromCompetitionLink bit       = null
,                                             @ErrorMessage VARCHAR(500)       OUTPUT
,                                             @LanguageID int                 =  1
,                                             @UserID bigint                  =  null
,                                             @RoleID bigint                  =  null
,                                             @ImpersonationUserID bigint     =  null
,                                             @SpResponseStatus int            out
,                                             @SpResponseMessage nvarchar(max) out
,                                             @SpErrorDetails nvarchar(max)    out
AS

	BEGIN TRY
	if @LanguageID=0
	begin
		set @LanguageID=1
	end
	BEGIN TRANSACTION SaveConsumerUser

	DECLARE @LoyaltyPoint INTEGER;
	DECLARE @MemberShipID NVARCHAR(40) = NEWID();
	DECLARE @yearDiff INTEGER;
	DECLARE @AgeGroupID INTEGER;
	DECLARE @ConsumerID INTEGER;
	DECLARE @cocUserID INT;
	DECLARE @cocConsumerID INT;
	DECLARE @cocOtpID INT;
	DECLARE @cocOtpExpiry DATETIME;

	--if email exists in consumer table and not verified :
	IF EXISTS (
		SELECT 1
		FROM coc_Consumers(NOLOCK)
		WHERE EmailID = @EmailID
			AND IsVerified = 0 and IsDeleted = 0
		) --if begin
	BEGIN
		SELECT @cocUserID = UserID
		,      @cocConsumerID = ConsumerID
		,      @cocOtpID = otpid
		FROM coc_Consumers (NOLOCK)
		WHERE EmailID = @EmailID
			AND IsVerified = 0 and IsDeleted = 0;

		SELECT @cocOtpExpiry = OtpExpity
		FROM coc_OTP (NOLOCK)
		WHERE otpID = @cocOtpID;

		IF (GetDate() > @cocOtpExpiry) --if begin
		BEGIN
			UPDATE coc_Consumers
			SET IsDeleted = 1
			,   IsActive  = 0
			WHERE ConsumerID = @cocConsumerID;

			UPDATE coc_Users
			SET IsDeleted = 1
			,   IsActive  = 0
			WHERE UserID = @cocUserID;
		END --end if
	END --end if

	--if mobile exists in consumer table and not verified:
	IF EXISTS (
		SELECT 1
		FROM coc_Consumers(NOLOCK)
		WHERE PrimaryMobile = @PrimaryMobile
			AND IsVerified = 0 and IsDeleted = 0
		) --if begin
	BEGIN
		SELECT @cocUserID = UserID
		,      @cocConsumerID = ConsumerID
		,      @cocOtpID = otpid
		FROM coc_Consumers (NOLOCK)
		WHERE PrimaryMobile = @PrimaryMobile
			AND IsVerified = 0 and IsDeleted = 0;

		SELECT @cocOtpExpiry = OtpExpity
		FROM coc_OTP (NOLOCK)
		WHERE otpID = @cocOtpID;

		IF (GetDate() > @cocOtpExpiry) --if begin
		BEGIN
			UPDATE coc_Consumers
			SET IsDeleted = 1
			,   IsActive  = 0
			WHERE ConsumerID = @cocConsumerID;

			UPDATE coc_Users
			SET IsDeleted = 1
			,   IsActive  = 0
			WHERE UserID = @cocUserID;
		END --end if
	END --end if

	--if email or mobile exists in Consumer or user table and not deleted
	IF EXISTS (SELECT 1 FROM coc_Consumers(NOLOCK) WHERE (EmailID = @EmailID OR PrimaryMobile = @PrimaryMobile) AND (IsDeleted = 0 and IsActive = 1))  
  OR EXISTS (SELECT 1 FROM coc_Users(NOLOCK) WHERE (EmailID = @EmailID OR MobileNumber = @PrimaryMobile) AND (IsDeleted = 0 and IsActive = 1))  
	BEGIN
		SET @ErrorMessage = 'EmailOrMobileAlreadyExists';
	END
	ELSE -- BEGIN ELSE
	BEGIN
		SELECT @LoyaltyPoint = SetupValue
		FROM coc_LoyaltyPointSetups(NOLOCK)
		WHERE LoyaltyPointSetupID = 101;

		--RoleID 5 is for consumer/Individual User
		INSERT INTO coc_Users ( UserName, [Password], RoleID, MobileNumber, EmailID, ResetRequired, CreatedDate )
		SELECT @EmailID
		,      @Password
		,      5
		,      @PrimaryMobile
		,      @EmailID
		,      0
		,      GETDATE()

		SET @USERID = SCOPE_IDENTITY()

		INSERT INTO COC_Consumers (FirstName, FullName,  UserID, Gender,CountryID, PrimaryMobile,  EmailID,  IsActive, AddDate,   IsVerified, OtpID,  ImageFile,  LoyaltyPoint,  MembershipNumber,IsFromCompetitionLink,  IsEmailVerified )  
          VALUES (@FullName, @FullName, @USERID,@Gender,@CountryID, @PrimaryMobile, @EmailID, 1,        GETDATE(), 0,          @OtpID, @ImageFile, @LoyaltyPoint, CONVERT(NVARCHAR(10), @MemberShipID), @IsFromCompetitionLink, 0)  

		SET @ConsumerID = SCOPE_IDENTITY()

		INSERT INTO coc_ConsumerPointDetails ( ConsumerID, PointDate, LoyaltyPoint, RedeemPoint, PointSource )
		SELECT @ConsumerID
		,      GETDATE()
		,      @LoyaltyPoint
		,      0
		,      101

		SET @ErrorMessage = @ConsumerID
	END --end else

	Set @SpResponseStatus=1;
	Set @SpResponseMessage='Success';
	Set @SpErrorDetails='Success';
	COMMIT TRANSACTION SaveConsumerUser --end transaction
	END TRY
	BEGIN CATCH
	ROLLBACK TRANSACTION SaveConsumerUser
	Set @SpResponseStatus=0;
	Set @SpResponseMessage='GenericError';
	Set @SpErrorDetails ='ErrorNumber';
	Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,
	 ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>,
	  ErrorState : <'+convert(varchar(500), Error_state())+'> ,
	   ErrorProcedure : <'+Error_procedure() +'> ,ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';

	END CATCH

	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveECouponPurchases]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_SaveECouponPurchases] @Barcode [NullDescription]       = NULL
,                                              @EcouponID INTEGER              
,                                              @ConsumerID INTEGER              = null
,                                              @GuestID int                     = null
,                                              @Mobile [Mobile]                 = NULL
,                                              @Email [Email]                   = NULL
,                                              @EligibleCoupons INTEGER         = NULL
,                                              @WrongAnswer INTEGER             = NULL
,                                              @ErrorMessage [Remark]           = NULL OUTPUT
,                                              @UserID bigint                  =  null
,                                              @RoleID bigint                  =  null
,                                              @LanguageID int                  = null
,                                              @ImpersonationUserID bigint     =  null
,                                              @SpResponseStatus int            = null OUTPUT
,                                              @SpResponseMessage nvarchar(max) = null OUTPUT
,                                              @SpErrorDetails nvarchar(max)    = null OUTPUT
AS

	SET XACT_ABORT ON;
BEGIN
	Set @SpResponseStatus=1;
	Set @SpResponseMessage='';
	Set @SpErrorDetails='';
	if (@ConsumerID = 0)
		set @ConsumerID = null;

	if (@GuestID = 0)
		set @GuestID = null
	DECLARE @NumberOfConsumerParticipations_N INT
	DECLARE @NumberOfGuestParticipations_N INT
	DECLARE @Participations_N INT
	DECLARE @NoOfCoponsLeft INT;
	DECLARE @NumberOfCopons INT;
	set @NumberOfCopons = 1;

	IF @ConsumerID IS NOT NULL
	BEGIN
		SELECT @NumberOfConsumerParticipations_N = ISNULL(NumberOfConsumerParticipations, 0)
		FROM coc_ECoupons(NOLOCK)
		WHERE ECouponID = @EcouponID
		SELECT @Participations_N = count(*)
		FROM coc_ECouponParticipations(NOLOCK) CP
		WHERE ConsumerID = @ConsumerID AND ECouponID = @EcouponID
		IF (@NumberOfConsumerParticipations_N < (@NumberOfCopons + @Participations_N))
		BEGIN

			SET @ErrorMessage = '101ConsumerParticipationLimitExceeded';
			Set @SpResponseStatus=0;
			Set @SpResponseMessage='101ConsumerParticipationLimitExceeded';
			Set @SpErrorDetails='Consumer Participation Limit Exceeded';
			RETURN;
		END
	END
	ELSE
	BEGIN
		SELECT @NumberOfGuestParticipations_N = ISNULL(NumberOfGuestParticipations, 0)
		FROM coc_ECoupons(NOLOCK)
		WHERE ECouponID = @EcouponID
		SELECT @Participations_N = count(*)
		FROM coc_ECouponParticipations(NOLOCK) CP
		WHERE GuestID = @GuestID AND ECouponID = @EcouponID ;
		IF (@NumberOfGuestParticipations_N < (@NumberOfCopons + @Participations_N))
		BEGIN
			SET @ErrorMessage = 'Number of coupons exceeds Number of guest participations count';
			Set @SpResponseStatus=0;
			Set @SpResponseMessage='Number of coupons exceeds Number of guest participations count';
			Set @SpErrorDetails='Number of coupons exceeds Number of guest participations count';
			RETURN;
		END
	END

	BEGIN TRANSACTION SaveECouponPurchases
	BEGIN TRY
	DECLARE @EserviceTypeID INTEGER
	DECLARE @EServiceBarcodeID INTEGER
	--DECLARE @Points INTEGER
	DECLARE @QuestionOptionID INTEGER
	DECLARE @SelectedAnswer INTEGER
	DECLARE @EServiceID INTEGER
	DECLARE @NotificationID INTEGER
	--DECLARE @NotificationSendID INTEGER
	DECLARE @CompetitionName NVARCHAR(200)
	DECLARE @EnteredStandardBarcode [NullDescription]
	DECLARE @LoyaltyPointSetupID int = 103
	DECLARE @GeneralNotificationTemplateID int = 14

	SET @ErrorMessage = ''

	if (@ConsumerID is not null)
	begin
		IF @Email IS NULL
			SELECT @Email = EmailID
			FROM coc_Consumers(NOLOCK)
			WHERE ConsumerID = @ConsumerID

		IF @Mobile IS NULL
			SELECT @Mobile = PrimaryMobile
			FROM coc_Consumers(NOLOCK)
			WHERE ConsumerID = @ConsumerID
	end
	else if (@GuestID is not null)
		begin
			IF @Email IS NULL
				SELECT @Email = EmailID
				FROM coc_guests(NOLOCK)
				WHERE GuestID = @GuestID

			IF @Mobile IS NULL
				SELECT @Mobile = PrimaryMobile
				FROM coc_guests(NOLOCK)
				WHERE GuestID = @GuestID
		end


	IF @EcouponID = 10066 and (@Mobile IS NULL
		OR len(@Mobile) <> 14
		OR (SUBSTRING(@Mobile, 1, 6) <> '009627' and SUBSTRING(@Mobile, 1, 6) <> '009665'))
	BEGIN
		SET @ErrorMessage = 'InvalidMobile'
		Set @SpResponseStatus=0;
		Set @SpResponseMessage='InvalidMobile';
		set @SpErrorDetails='InvalidMobile';
	END
	ELSE IF @EcouponID = 10100 and (@Mobile IS NULL
			OR len(@Mobile) <> 14
			OR (SUBSTRING(@Mobile, 1, 6) <> '009715' and SUBSTRING(@Mobile, 1, 6) <> '009665'))
		BEGIN
			SET @ErrorMessage = 'InvalidMobile'
			Set @SpResponseStatus=0;
			Set @SpResponseMessage='InvalidMobile';
			set @SpErrorDetails='InvalidMobile';
		END
		ELSE IF @EcouponID <> 10100 and @EcouponID <> 10066 and @EcouponID <> 10184 and (@Mobile IS NULL
				OR len(@Mobile) <> 14
				OR SUBSTRING(@Mobile, 1, 6) <> '009665')
			BEGIN
				SET @ErrorMessage = 'InvalidMobile'
				Set @SpResponseStatus=0;
				Set @SpResponseMessage='InvalidMobile';
				set @SpErrorDetails='InvalidMobile';
			END
			ELSE IF @Email IS NULL
				BEGIN
					SET @ErrorMessage = 'InvalidEmail'
					Set @SpResponseStatus=0;
					Set @SpResponseMessage='InvalidMobile';
					set @SpErrorDetails='InvalidMobile';
				END
				ELSE
				BEGIN
					IF (ISNULL(@EligibleCoupons, 0) = 0)
						SET @EligibleCoupons = 1

					DECLARE @BarCodes TABLE ( EServiceBarcodeID INTEGER
					,                         AsignedMoile      [Mobile]
					,                         Barcode           [NullDescription]
					,                         NotificationID    INTEGER
					,                         IsUsed            BIT )

					--//----------------------------------------------------------------
					SELECT @EServiceID = EServiceID
					FROM coc_ECoupons(NOLOCK)
					WHERE EcouponID = @EcouponID

					DECLARE @errortext [Remark]
					DECLARE @return_value INT
					if (@ConsumerId is not null)
					begin
						EXEC @return_value = [dbo].[ValidateConsumerForECouponVoucher] @ConsumerId = @ConsumerID
						,                                                              @EserviceId = @EServiceID
						,                                                              @errortext  = @errortext OUTPUT

						PRINT @ConsumerId
						PRINT @EserviceId
						PRINT @errortext

						IF (@errortext != '0')
						BEGIN
							SET @ErrorMessage = @errortext
							SELECT @ErrorMessage ;
							set @SpResponseStatus=0;
							Set @SpResponseMessage=@errortext;
							set @SpErrorDetails=@errortext;
							ROLLBACK TRANSACTION SaveECouponPurchases
							RETURN
						END
					end
					SET XACT_ABORT ON;


					DECLARE @AllowStandardBarcode BIT
					DECLARE @StandardBarcodeValue [NullDescription]
					DECLARE @NumberOfConsumerParticipations INT
					DECLARE @StandardBarcodeByRetailOutlet BIT
					DECLARE @StandardBarcodeByQuestionBank BIT
					DECLARE @TotalAllowedParticipationPerCustomer INT
					DECLARE @TotalAllowedParticipationPerCustomerPerDay INT
					DECLARE @AllowedParticipationPerBarcodePerCustomer INT
					DECLARE @AllowedParticipationPerBarcodePerCustomerPerDay INT
					--declare @TotalAllowedParticipationPerGuest int
					--declare @TotalAllowedParticipationPerGuestPerDay int
					DECLARE @ECouponStandardBarcodeID BIGINT
					DECLARE @Outlet_TotalAllowedParticipationPerCustomer INT
					DECLARE @Outlet_TotalAllowedParticipationPerCustomerPerDay INT
					DECLARE @Outlet_TotalAllowedParticipationInOutlet INT
					DECLARE @Outlet_TotalAllowedParticipationPerBarcode INT
					DECLARE @RetailOutletID INT

					DECLARE @cnt_TotalCompetitionParticipation INTEGER
					DECLARE @cnt_TotalCompetitionParticipationToday INTEGER
					DECLARE @cnt_TotalCompetitionBarcodeParticipation INTEGER
					DECLARE @cnt_TotalCompetitionParticipationForOutlet INTEGER
					DECLARE @cnt_TotalCustParticipation INTEGER
					DECLARE @cnt_TotalCustParticipationToday INTEGER
					DECLARE @cnt_TotalCustBarcodeParticipation INTEGER
					DECLARE @cnt_TotalCustBarcodeParticipationToday INTEGER
					DECLARE @cnt_TotalOutletParticipation INTEGER
					DECLARE @cnt_TotalCustOutletParticipation INTEGER
					DECLARE @cnt_TotalCustOutletParticipationToday INTEGER

					--Recursive
					DECLARE @RecursiveHoursParticipationDuration INTEGER
					DECLARE @RecursiveHoursNumberOfParticipations INTEGER
					--Recursive
					DECLARE @RecursiveHoursLastParticipatedOn datetime
					DECLARE @RecursiveHoursNumberOfParticipationsCount INTEGER

					--StandardBarcode-Recursive
					DECLARE @StandardBarcodeRecursiveHoursParticipationDuration INTEGER
					DECLARE @StandardBarcodeRecursiveHoursNumberOfParticipations INTEGER
					DECLARE @StandardBarcodeRecursiveHoursNumberOfParticipationsCount INTEGER

					SELECT @EServiceID = EServiceID
					,      @AllowStandardBarcode = ISNULL(AllowStandardBarcode, 0)
					,      @StandardBarcodeValue = ISNULL(StandardBarcodeValue, '')
					,      @NumberOfConsumerParticipations = ISNULL(NumberOfConsumerParticipations, 1)
					,      @StandardBarcodeByRetailOutlet = ISNULL(StandardBarcodeByRetailOutlet, 0)
					,      @StandardBarcodeByQuestionBank = ISNULL(StandardBarcodeByQuestionBank,0)
					,      @TotalAllowedParticipationPerCustomer = ISNULL(TotalAllowedParticipationPerCustomer, 0)
					,      @TotalAllowedParticipationPerCustomerPerDay = ISNULL(TotalAllowedParticipationPerCustomerPerDay, ISNULL(TotalAllowedParticipationPerCustomer, 0))
					,      @AllowedParticipationPerBarcodePerCustomer = ISNULL(AllowedParticipationPerBarcodePerCustomer, 0)
					,      @AllowedParticipationPerBarcodePerCustomerPerDay = ISNULL(AllowedParticipationPerBarcodePerCustomerPerDay, ISNULL(AllowedParticipationPerBarcodePerCustomer, 0))
					,
					--@TotalAllowedParticipationPerGuest = ISNULL(TotalAllowedParticipationPerGuest, 0),
					--@TotalAllowedParticipationPerGuestPerDay = ISNULL(TotalAllowedParticipationPerGuestPerDay, 0),
					       @EserviceTypeID = EntryTypeID
					,      @RecursiveHoursParticipationDuration = isnull(RecursiveHoursParticipationDuration,0)
					,      @RecursiveHoursNumberOfParticipations = ISNULL(RecursiveHoursNumberOfParticipations,0)
					FROM coc_ECoupons(NOLOCK)
					WHERE ECouponID = @EcouponID

					IF @EserviceTypeID = 41
						AND @AllowStandardBarcode = 0

						-- commented by shamim on 1st Sept 2019 as it looks meaningless. value for @EserviceTypeID already selected above
						--SELECT @EserviceTypeID = EC.EntryTypeID
						--FROM coc_ECoupons EC(NOLOCK)
						--INNER JOIN coc_Notifications NS(NOLOCK) ON NS.EServiceID = EC.EServiceID
						--LEFT JOIN coc_EServiceBarcodes BC(NOLOCK) ON BC.NotificationID = NS.NotificationID
						--WHERE (
						--  @EcouponID IS NULL
						--  OR EC.ECouponID = @EcouponID
						--  )
						-- AND (
						--  @BarCode IS NULL
						--  OR BC.Barcode = @BarCode
						--  )

						----Recursive Get latest participation datetime
						--   IF ( @RecursiveHoursParticipationDuration <> 0 )
						--    begin
						-- SELECT @RecursiveHoursNumberOfParticipationsCount = count(*) FROM coc_ECouponParticipations(NOLOCK)
						--  WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID) AND ECouponID = @EcouponID
						--  AND (ParticipationDate >= DATEADD(hh,-(@RecursiveHoursParticipationDuration),GETDATE()))

						--  IF(@RecursiveHoursNumberOfParticipationsCount+1) > @RecursiveHoursNumberOfParticipations
						--   begin
						--   SET @ErrorMessage = '105ConsumerParticipationLimitExceeded'
						--   ROLLBACK TRANSACTION SaveECouponPurchases
						--   RETURN
						--   end
						--      end

						PRINT '@EserviceTypeID'
					PRINT @EserviceTypeID

					IF (@EserviceTypeID = 41)
					BEGIN
						IF @AllowStandardBarcode = 1
							SELECT @EnteredStandardBarcode = @Barcode
						declare @IsCorrectAnswer int

						IF @AllowStandardBarcode = 1
							AND @StandardBarcodeByQuestionBank = 1
						BEGIN
							SELECT @ECouponStandardBarcodeID = ECB.ECouponStandardBarcodeID
							,      @RetailOutletID = ECO.RetailOutletID
							,      @RetailOutletID = ECO.RetailOutletID
							,      @IsCorrectAnswer = QO.IsCorrect
							FROM       coc_ECouponStandardBarcodes(NOLOCK) ECB
							INNER JOIN coc_ECoupons(NOLOCK)                EC  ON ECB.ECouponID = EC.ECouponID
							INNER JOIN coc_QuestionBanks(NOLOCK)           QB  ON QB.ECouponID = EC.ECouponID
							INNER JOIN coc_QuestionOptions(NOLOCK)         QO  ON QO.QuestionBankID = QB.QuestionBankID and ECB.QuestionOptionID = QO.QuestionOptionID
							LEFT JOIN  coc_ECouponOutlets(NOLOCK)          ECO ON ECO.ECouponOutletID = ECB.ECouponOutletID
									AND ((ECO.ECouponOutletID IS not NULL and ISNULL(ECO.IsActive,1) = 1) or ECO.ECouponOutletID IS NULL)
							WHERE ECB.ECouponID = @EcouponID
								AND ECB.StandardBarcode = @Barcode
								AND ECB.IsActive = 1

							IF @ECouponStandardBarcodeID IS NULL
							begin
								SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid';
								set @SpResponseStatus=0;
								Set @SpResponseMessage='BarcodeAlreadyUsedORInvalid';
								set @SpErrorDetails='BarcodeAlreadyUsedORInvalid';
							end
							ELSE
							BEGIN

								SELECT @cnt_TotalCompetitionParticipation = count(*)
								FROM coc_ECouponParticipations(NOLOCK)
								WHERE ECouponID = @EcouponID

								SELECT @cnt_TotalCompetitionParticipation = @cnt_TotalCompetitionParticipation+ count(*)
								FROM coc_ECouponParticipationsInvalid(NOLOCK)
								WHERE ECouponID = @EcouponID

								SELECT @cnt_TotalCompetitionParticipationToday = count(*)
								FROM coc_ECouponParticipations(NOLOCK)
								WHERE ECouponID = @EcouponID
									AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)

								SELECT @cnt_TotalCompetitionParticipationToday = @cnt_TotalCompetitionParticipationToday + count(*)
								FROM coc_ECouponParticipationsInvalid(NOLOCK)
								WHERE ECouponID = @EcouponID
									AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)

								SELECT @cnt_TotalCustParticipation = count(*)
								FROM coc_ECouponParticipations(NOLOCK)
								WHERE (ConsumerID = @ConsumerID or GuestID = @GuestID)
									AND ECouponID = @EcouponID

								SELECT @cnt_TotalCustParticipation = @cnt_TotalCustParticipation+ count(*)
								FROM coc_ECouponParticipationsInvalid(NOLOCK)
								WHERE (ConsumerID = @ConsumerID)
									AND ECouponID = @EcouponID

								SELECT @cnt_TotalCustParticipationToday = count(*)
								FROM coc_ECouponParticipations(NOLOCK)
								WHERE (ConsumerID = @ConsumerID or GuestID = @GuestID)
									AND ECouponID = @EcouponID
									AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)

								SELECT @cnt_TotalCustParticipationToday = @cnt_TotalCustParticipationToday + count(*)
								FROM coc_ECouponParticipationsInvalid(NOLOCK)
								WHERE (ConsumerID = @ConsumerID)
									AND ECouponID = @EcouponID
									AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)

								IF @cnt_TotalCustParticipation >= @TotalAllowedParticipationPerCustomer
								begin
									SET @ErrorMessage = '101ConsumerParticipationLimitExceeded' ;
									set @SpResponseStatus=0;
									Set @SpResponseMessage=@ErrorMessage;
									set @SpErrorDetails=@ErrorMessage;
								end
								ELSE IF @cnt_TotalCustParticipationToday >= @TotalAllowedParticipationPerCustomerPerDay
									begin
										SET @ErrorMessage = '102DailyParticipationLimitExceeded'
										set @SpResponseStatus=0;
										Set @SpResponseMessage=@ErrorMessage;
										set @SpErrorDetails=@ErrorMessage;
									end
									ELSE IF @cnt_TotalCustOutletParticipation >= @Outlet_TotalAllowedParticipationPerCustomer
										begin
											SET @ErrorMessage = '105ConsumerParticipationLimitExceeded'
											set @SpResponseStatus=0;
											Set @SpResponseMessage=@ErrorMessage;
											set @SpErrorDetails=@ErrorMessage;
										end
										ELSE IF @cnt_TotalCustOutletParticipationToday >= @Outlet_TotalAllowedParticipationPerCustomerPerDay
											begin
												SET @ErrorMessage = '106DailyParticipationLimitExceeded'
												set @SpResponseStatus=0;
												Set @SpResponseMessage=@ErrorMessage;
												set @SpErrorDetails=@ErrorMessage;
											end
											ELSE
											BEGIN
												select @EServiceBarcodeID = null
												SELECT TOP 1 @EServiceBarcodeID = EServiceBarcodeID
												,            @Barcode = Barcode
												,            @NotificationID = NT.NotificationID
												FROM       coc_EServiceBarcodes EB(NOLOCK)
												INNER JOIN coc_Notifications    NT(NOLOCK) ON EB.NotificationID = NT.NotificationID
														AND NT.EServiceID = @EServiceID
												WHERE IsUsed = 0
													AND EB.AsignedMoile IS NULL
												order by NEWID()
												--ORDER BY EServiceBarcodeID
												-- changed order to NEWID() on 6th Aug 2019 by Shamim to improve performance
												print @EServiceBarcodeID
												if @EServiceBarcodeID is null
												begin
													SET @ErrorMessage = 'CompetitionBarcodesFinished'
													set @SpResponseStatus=0;
													Set @SpResponseMessage=@ErrorMessage;
													set @SpErrorDetails=@ErrorMessage;
												end
												else
												begin

													if (@IsCorrectAnswer = 1)

														INSERT INTO coc_ECouponParticipations ( ECouponID, ParticipationDate, Barcode, ParticipationMobile, ParticipationEmailID, ConsumerID, GuestID, RetailOutletID, EnteredStandardBarcode )
														SELECT @EcouponID
														,      GETDATE()
														,      @Barcode
														,      @Mobile
														,      @Email
														,      @ConsumerID
														,      @GuestID
														,      @RetailOutletID
														,      @EnteredStandardBarcode
													else
														INSERT INTO coc_ECouponParticipationsInvalid ( ECouponID, ParticipationDate, Barcode, ParticipationMobile, ParticipationEmailID, ConsumerID, RetailOutletID, EnteredStandardBarcode, Reason )
														SELECT @EcouponID
														,      GETDATE()
														,      @Barcode
														,      @Mobile
														,      @Email
														,      @ConsumerID
														,      @RetailOutletID
														,      @EnteredStandardBarcode
														,      'W'

													UPDATE coc_EServiceBarcodes
													SET AsignedMoile         = @Mobile
													,   IsUsed               = 1
													,   UsedDate             = GETDATE()
													,   ConsumerID           = @ConsumerID
													,   GuestID              = @GuestID
													,   StandardBarcodeValue = @StandardBarcodeValue
													WHERE EServiceBarcodeID = @EServiceBarcodeID

													if (@ConsumerID is not null)
													begin
														EXEC AddCustomerLoyaltyPoints @EcouponID
														,                             @ConsumerID
														,                             @LoyaltyPointSetupID
														,                             @ErrorMessage OUTPUT

														EXEC SaveNotificationSending @NotificationID
														,                            @EcouponID
														,                            @ConsumerID
														,                            @GeneralNotificationTemplateID
														,                            @EServiceID
														,                            @Barcode
														,                            @ErrorMessage OUTPUT
													end
												end
											END
							END
						END
						ELSE IF @AllowStandardBarcode = 1
								AND @StandardBarcodeByRetailOutlet = 1
							BEGIN

								SELECT @ECouponStandardBarcodeID = ECB.ECouponStandardBarcodeID
								,      @RetailOutletID = ECO.RetailOutletID
								,      @Outlet_TotalAllowedParticipationPerCustomer = ISNULL(ECO.TotalAllowedParticipationPerCustomer, EC.TotalAllowedParticipationPerCustomer)
								,      @Outlet_TotalAllowedParticipationPerCustomerPerDay = ISNULL(ECO.TotalAllowedParticipationPerCustomerPerDay, EC.TotalAllowedParticipationPerCustomerPerDay)
								,      @Outlet_TotalAllowedParticipationInOutlet = ISNULL(ECO.TotalAllowedParticipationinOutlet, EC.NumberOfConsumerParticipations)
								,      @Outlet_TotalAllowedParticipationPerBarcode = ISNULL(ECO.TotalAllowedParticipationPerBarcode, EC.AllowedParticipationPerBarcodePerCustomer)
								,      @StandardBarcodeRecursiveHoursParticipationDuration = ECB.RecursiveHoursParticipationDuration
								,      @StandardBarcodeRecursiveHoursNumberOfParticipations = ECB.RecursiveHoursNumberOfParticipations
								FROM       coc_ECouponStandardBarcodes(NOLOCK) ECB
								inner join coc_ECoupons(NOLOCK)                EC  ON ECB.ECouponID = EC.ECouponID
								LEFT JOIN  coc_ECouponOutlets(NOLOCK)          ECO ON ECO.ECouponOutletID = ECB.ECouponOutletID
										AND ((ECO.ECouponOutletID IS not NULL and ISNULL(ECO.IsActive,1) = 1) or ECO.ECouponOutletID IS NULL)
								--inner join coc_RetailOutlets RO ON RO.RetailOutletID = ECO.RetailOutletID
								WHERE ECB.ECouponID = @EcouponID
									AND ECB.StandardBarcode = @Barcode
									AND ECB.IsActive = 1

								IF @ECouponStandardBarcodeID IS NULL
								begin
									SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'
									set @SpResponseStatus=0;
									Set @SpResponseMessage=@ErrorMessage;
									set @SpErrorDetails=@ErrorMessage;
								end
								ELSE
								BEGIN

									SELECT @cnt_TotalCompetitionParticipation = count(*)
									FROM coc_ECouponParticipations(NOLOCK)
									WHERE ECouponID = @EcouponID

									SELECT @cnt_TotalCompetitionParticipationToday = count(*)
									FROM coc_ECouponParticipations(NOLOCK)
									WHERE ECouponID = @EcouponID
										AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)

									SELECT @cnt_TotalCompetitionBarcodeParticipation = count(*)
									FROM coc_ECouponParticipations(NOLOCK)
									WHERE ECouponID = @EcouponID
										AND EnteredStandardBarcode = @EnteredStandardBarcode

									SELECT @cnt_TotalCompetitionParticipationForOutlet = count(*)
									FROM coc_ECouponParticipations(NOLOCK)
									WHERE ECouponID = @EcouponID
										AND RetailOutletID = @RetailOutletID

									SELECT @cnt_TotalCustParticipation = count(*)
									FROM coc_ECouponParticipations(NOLOCK)
									WHERE (ConsumerID = @ConsumerID or GuestID = @GuestID)
										AND ECouponID = @EcouponID

									SELECT @cnt_TotalCustParticipationToday = count(*)
									FROM coc_ECouponParticipations(NOLOCK)
									WHERE (ConsumerID = @ConsumerID or GuestID = @GuestID)
										AND ECouponID = @EcouponID
										AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)

									SELECT @cnt_TotalCustBarcodeParticipation = count(*)
									FROM coc_ECouponParticipations(NOLOCK)
									WHERE (ConsumerID = @ConsumerID or GuestID = @GuestID)
										AND ECouponID = @EcouponID
										AND EnteredStandardBarcode = @EnteredStandardBarcode

									SELECT @cnt_TotalCustBarcodeParticipationToday = count(*)
									FROM coc_ECouponParticipations(NOLOCK)
									WHERE (ConsumerID = @ConsumerID or GuestID = @GuestID)
										AND ECouponID = @EcouponID
										AND EnteredStandardBarcode = @EnteredStandardBarcode
										AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)

									SELECT @cnt_TotalOutletParticipation = count(*)
									FROM coc_ECouponParticipations(NOLOCK)
									WHERE ECouponID = @EcouponID
										AND RetailOutletID = @RetailOutletID and (ConsumerID = @ConsumerID or GuestID = @GuestID)


									SELECT @cnt_TotalCustOutletParticipation = count(*)
									FROM coc_ECouponParticipations(NOLOCK)
									WHERE (ConsumerID = @ConsumerID or GuestID = @GuestID)
										AND ECouponID = @EcouponID
										AND RetailOutletID = @RetailOutletID

									SELECT @cnt_TotalCustOutletParticipationToday = count(*)
									FROM coc_ECouponParticipations(NOLOCK)
									WHERE (ConsumerID = @ConsumerID or GuestID = @GuestID)
										AND ECouponID = @EcouponID
										AND RetailOutletID = @RetailOutletID
										AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)

									--StandardBarcode-Recursive
									IF ( @StandardBarcodeRecursiveHoursParticipationDuration <> 0 )
									begin
										SELECT @StandardBarcodeRecursiveHoursNumberOfParticipationsCount = count(*)
										FROM coc_ECouponParticipations(NOLOCK)
										WHERE (ConsumerID = @ConsumerID or GuestID = @GuestID) AND ECouponID = @EcouponID
											AND (ParticipationDate >= DATEADD(hh,-(@StandardBarcodeRecursiveHoursParticipationDuration),GETDATE()))

										IF (@StandardBarcodeRecursiveHoursNumberOfParticipationsCount+1) > @StandardBarcodeRecursiveHoursNumberOfParticipations
										begin
											SET @ErrorMessage = '105ConsumerParticipationLimitExceeded'
											set @SpResponseStatus=0;
											Set @SpResponseMessage=@ErrorMessage;
											set @SpErrorDetails=@ErrorMessage;
											ROLLBACK TRANSACTION SaveECouponPurchases
											RETURN
										end
									end
									select @cnt_TotalCustBarcodeParticipation
									,      @AllowedParticipationPerBarcodePerCustomer
									IF @cnt_TotalCustParticipation >= @TotalAllowedParticipationPerCustomer
									begin
										SET @ErrorMessage = '101ConsumerParticipationLimitExceeded'
										set @SpResponseStatus=0;
										Set @SpResponseMessage=@ErrorMessage;
										set @SpErrorDetails=@ErrorMessage;
									end
									ELSE IF @cnt_TotalCustParticipationToday >= @TotalAllowedParticipationPerCustomerPerDay
										begin
											SET @ErrorMessage = '102DailyParticipationLimitExceeded'
											set @SpResponseStatus=0;
											Set @SpResponseMessage=@ErrorMessage;
											set @SpErrorDetails=@ErrorMessage;
										end
										ELSE IF @cnt_TotalCustBarcodeParticipation >= @AllowedParticipationPerBarcodePerCustomer
											begin
												SET @ErrorMessage = '103ConsumerParticipationLimitExceeded'
												set @SpResponseStatus=0;
												Set @SpResponseMessage=@ErrorMessage;
												set @SpErrorDetails=@ErrorMessage;
											end
											ELSE IF @cnt_TotalCustBarcodeParticipationToday >= @AllowedParticipationPerBarcodePerCustomerPerDay
												begin
													SET @ErrorMessage = '104DailyParticipationLimitExceeded'
													set @SpResponseStatus=0;
													Set @SpResponseMessage=@ErrorMessage;
													set @SpErrorDetails=@ErrorMessage;
												end
												ELSE IF @cnt_TotalCustOutletParticipation >= @Outlet_TotalAllowedParticipationPerCustomer
													begin
														SET @ErrorMessage = '105ConsumerParticipationLimitExceeded'
														set @SpResponseStatus=0;
														Set @SpResponseMessage=@ErrorMessage;
														set @SpErrorDetails=@ErrorMessage;
													end
													ELSE IF @cnt_TotalCustOutletParticipationToday >= @Outlet_TotalAllowedParticipationPerCustomerPerDay
														begin
															SET @ErrorMessage = '106DailyParticipationLimitExceeded'
															set @SpResponseStatus=0;
															Set @SpResponseMessage=@ErrorMessage;
															set @SpErrorDetails=@ErrorMessage;
														end
														ELSE IF @cnt_TotalOutletParticipation >= @Outlet_TotalAllowedParticipationInOutlet
															begin
																SET @ErrorMessage = '107ConsumerParticipationLimitExceeded'
																set @SpResponseStatus=0;
																Set @SpResponseMessage=@ErrorMessage;
																set @SpErrorDetails=@ErrorMessage;
															end
															ELSE IF @cnt_TotalCustBarcodeParticipation >= @Outlet_TotalAllowedParticipationPerBarcode
																begin
																	SET @ErrorMessage = '108ConsumerParticipationLimitExceeded'
																	set @SpResponseStatus=0;
																	Set @SpResponseMessage=@ErrorMessage;
																	set @SpErrorDetails=@ErrorMessage;
																end
																ELSE BEGIN
																	select @EServiceBarcodeID = null
																	SELECT TOP 1 @EServiceBarcodeID = EServiceBarcodeID
																	,            @Barcode = Barcode
																	,            @NotificationID = NT.NotificationID
																	FROM       coc_EServiceBarcodes EB(NOLOCK)
																	INNER JOIN coc_Notifications    NT(NOLOCK) ON EB.NotificationID = NT.NotificationID
																			AND NT.EServiceID = @EServiceID
																	WHERE IsUsed = 0
																		AND EB.AsignedMoile IS NULL
																	order by NEWID()
																	--ORDER BY EServiceBarcodeID
																	-- changed order to NEWID() on 6th Aug 2019 by Shamim to improve performance
																	print @EServiceBarcodeID
																	if @EServiceBarcodeID is null
																	begin
																		print 565656
																		SET @ErrorMessage = 'CompetitionBarcodesFinished' ;
																		set @SpResponseStatus=0;
																		Set @SpResponseMessage=@ErrorMessage;
																		set @SpErrorDetails=@ErrorMessage;
																	end
																	else
																	begin

																		INSERT INTO coc_ECouponParticipations ( ECouponID, ParticipationDate, Barcode, ParticipationMobile, ParticipationEmailID, ConsumerID, GuestID, RetailOutletID, EnteredStandardBarcode )
																		SELECT @EcouponID
																		,      GETDATE()
																		,      @Barcode
																		,      @Mobile
																		,      @Email
																		,      @ConsumerID
																		,      @GuestID
																		,      @RetailOutletID
																		,      @EnteredStandardBarcode

																		UPDATE coc_EServiceBarcodes
																		SET AsignedMoile         = @Mobile
																		,   IsUsed               = 1
																		,   UsedDate             = GETDATE()
																		,   ConsumerID           = @ConsumerID
																		,   GuestID              = @GuestID
																		,   StandardBarcodeValue = @StandardBarcodeValue
																		WHERE EServiceBarcodeID = @EServiceBarcodeID

																		if (@ConsumerID is not null)
																		begin
																			EXEC AddCustomerLoyaltyPoints @EcouponID
																			,                             @ConsumerID
																			,                             @LoyaltyPointSetupID
																			,                             @ErrorMessage OUTPUT

																			EXEC SaveNotificationSending @NotificationID
																			,                            @EcouponID
																			,                            @ConsumerID
																			,                            @GeneralNotificationTemplateID
																			,                            @EServiceID
																			,                            @Barcode
																			,                            @ErrorMessage OUTPUT

																		end
																	end
																END
								END
							END
							ELSE IF @AllowStandardBarcode = 1
									AND @StandardBarcodeValue <> @Barcode
								BEGIN
									SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'
									set @SpResponseStatus=0;
									Set @SpResponseMessage=@ErrorMessage;
									set @SpErrorDetails=@ErrorMessage;
								END
								ELSE IF @AllowStandardBarcode = 1
										AND @StandardBarcodeValue = @Barcode
									BEGIN
										DECLARE @cnt INTEGER

										SELECT @cnt = count(*)
										FROM coc_ECouponParticipations(NOLOCK)
										WHERE (ConsumerID = @ConsumerID or GuestID = @GuestID)
											AND ECouponID = @EcouponID
										select @EServiceBarcodeID= null
										SELECT TOP 1 @EServiceBarcodeID = EServiceBarcodeID
										,            @Barcode = Barcode
										,            @NotificationID = NT.NotificationID
										FROM       coc_EServiceBarcodes EB(NOLOCK)
										INNER JOIN coc_Notifications    NT(NOLOCK) ON EB.NotificationID = NT.NotificationID
												AND NT.EServiceID = @EServiceID
										WHERE IsUsed = 0
											AND EB.AsignedMoile IS NULL
										order by NEWID()
										--ORDER BY EServiceBarcodeID
										-- changed order to NEWID() on 6th Aug 2019 by Shamim to improve performance
										print @EServiceBarcodeID
										if @EServiceBarcodeID is null
										begin
											print 565656
											SET @ErrorMessage = 'CompetitionBarcodesFinished'
											set @SpResponseStatus=0;
											Set @SpResponseMessage=@ErrorMessage;
											set @SpErrorDetails=@ErrorMessage;
										end
										else
										begin
											IF @cnt >= @NumberOfConsumerParticipations
											begin
												SET @ErrorMessage = 'ConsumerParticipationDepleted'
												set @SpResponseStatus=0;
												Set @SpResponseMessage=@ErrorMessage;
												set @SpErrorDetails=@ErrorMessage;
											end
											ELSE
											BEGIN
												INSERT INTO coc_ECouponParticipations ( ECouponID, ParticipationDate, Barcode, ParticipationMobile, ParticipationEmailID, ConsumerID, GuestID, EnteredStandardBarcode )
												SELECT @EcouponID
												,      GETDATE()
												,      @Barcode
												,      @Mobile
												,      @Email
												,      @ConsumerID
												,      @GuestID
												,      @EnteredStandardBarcode

												UPDATE coc_EServiceBarcodes
												SET AsignedMoile         = @Mobile
												,   IsUsed               = 1
												,   UsedDate             = GETDATE()
												,   ConsumerID           = @ConsumerID
												,   GuestID              = @GuestID
												,   StandardBarcodeValue = @StandardBarcodeValue
												WHERE EServiceBarcodeID = @EServiceBarcodeID
												if (@ConsumerID is not null)
												begin
													EXEC AddCustomerLoyaltyPoints @EcouponID
													,                             @ConsumerID
													,                             @LoyaltyPointSetupID
													,                             @ErrorMessage OUTPUT

													EXEC SaveNotificationSending @NotificationID
													,                            @EcouponID
													,                            @ConsumerID
													,                            @GeneralNotificationTemplateID
													,                            @EServiceID
													,                            @Barcode
													,                            @ErrorMessage OUTPUT
												end
											end
										END
									END
									ELSE
									-- commented this condtion on September 1 2019 by shamim
									--IF NOT EXISTS (
									-- SELECT NULL
									--     FROM coc_EServiceBarcodes(NOLOCK)
									--     WHERE Barcode = @BarCode

									--      AND @EserviceTypeID IN (41)
									--     )
									--    AND @AllowStandardBarcode = 0 --AND ConsumerID=@ConsumerID
									--   BEGIN
									--    SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'
									--   END
									--   ELSE
									BEGIN
										IF NOT EXISTS (
											SELECT NULL
											FROM coc_ECouponParticipations(NOLOCK)
											WHERE Barcode = @Barcode
												AND (ConsumerID = @ConsumerID or GuestID = @GuestID)
												AND ECouponID = @EcouponID
											)
										BEGIN
											select @EServiceBarcodeID = null
											SELECT TOP 1 @EServiceBarcodeID = EServiceBarcodeID
											,            @NotificationID = NT.NotificationID
											FROM       coc_EServiceBarcodes EB(NOLOCK)
											INNER JOIN coc_Notifications    NT(NOLOCK) ON EB.NotificationID = NT.NotificationID
													AND NT.EServiceID = @EServiceID
											WHERE IsUsed = 1
												AND EB.AsignedMoile IS NULL
												AND Barcode = @Barcode
											--order by NEWID()
											--ORDER BY EServiceBarcodeID
											-- changed order to NEWID() on 6th Aug 2019 by Shamim to improve performance

											print @EServiceBarcodeID
											if @EServiceBarcodeID is null
											begin
												print 565656
												SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'
												set @SpResponseStatus=0;
												Set @SpResponseMessage=@ErrorMessage;
												set @SpErrorDetails=@ErrorMessage;
											end
											else
											begin
												INSERT INTO coc_ECouponParticipations ( ECouponID, ParticipationDate, Barcode, ParticipationMobile, ParticipationEmailID, ConsumerID, GuestID )
												SELECT @EcouponID
												,      GETDATE()
												,      @Barcode
												,      @Mobile
												,      @Email
												,      @ConsumerID
												,      @GuestID
												SELECT TOP (1) @EServiceBarcodeID = EServiceBarcodeID
												FROM coc_EServiceBarcodes(NOLOCK)
												WHERE Barcode = @BarCode

												UPDATE coc_EServiceBarcodes
												SET AsignedMoile = @Mobile
												,   IsUsed       = 1
												,   UsedDate     = GETDATE()
												WHERE EServiceBarcodeID = @EServiceBarcodeID
												if (@ConsumerID is not null)
												begin
													EXEC AddCustomerLoyaltyPoints @EcouponID
													,                             @ConsumerID
													,                             @LoyaltyPointSetupID
													,                             @ErrorMessage OUTPUT

													EXEC SaveNotificationSending @NotificationID
													,                            @EcouponID
													,                            @ConsumerID
													,                            @GeneralNotificationTemplateID
													,                            @EServiceID
													,                            @Barcode
													,                            @ErrorMessage OUTPUT
												end
											end
										END
										ELSE
										BEGIN
											SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'
											set @SpResponseStatus=0;
											Set @SpResponseMessage=@ErrorMessage;
											set @SpErrorDetails=@ErrorMessage;
										END
									END
					END
					ELSE IF (@EserviceTypeID = 42)
						BEGIN

							select @EServiceBarcodeID = null
							SELECT TOP 1 @EServiceBarcodeID = EServiceBarcodeID
							,            @Barcode = Barcode
							,            @NotificationID = NT.NotificationID
							FROM       coc_EServiceBarcodes EB(NOLOCK)
							INNER JOIN coc_Notifications    NT(NOLOCK) ON EB.NotificationID = NT.NotificationID
									AND NT.EServiceID = @EServiceID
							WHERE IsUsed = 0
								AND EB.AsignedMoile IS NULL
							order by NEWID()
							--ORDER BY EServiceBarcodeID
							-- changed order to NEWID() on 6th Aug 2019 by Shamim to improve performanceORDER BY EServiceBarcodeID

							DECLARE @Participations INT
							DECLARE @ParticipationsInvalid INT

							--select @Participations = count(*) from coc_EServiceBarcodes(NOLOCK)BC
							--  INNER JOIN coc_Notifications NT(NOLOCK) ON BC.NotificationID=NT.NotificationID AND NT.EServiceID =@EServiceID
							-- where ConsumerID=@ConsumerID
							SELECT @Participations = count(*)
							FROM coc_ECouponParticipations(NOLOCK) CP
							WHERE (ConsumerID = @ConsumerID or GuestID = @GuestID)
								AND ECouponID = @EcouponID

							SELECT @ParticipationsInvalid = count(*)
							FROM coc_ECouponParticipationsInvalid(NOLOCK) CP
							WHERE (ConsumerID = @ConsumerID)
								AND ECouponID = @EcouponID

							SELECT @Participations = ISNULL(@Participations, 0) + ISNULL(@ParticipationsInvalid, 0)

							IF ISNULL(@Participations, 0) = 0
							BEGIN
								IF (@ConsumerID) is not null AND NOT EXISTS ( SELECT 1
									FROM coc_ConsumerPointDetails(NOLOCK) CP
									WHERE CP.ConsumerID = @ConsumerID AND CP.ECouponID = @EcouponID )
								BEGIN
									INSERT INTO @BarCodes ( EServiceBarcodeID, AsignedMoile, Barcode, NotificationID, IsUsed )
									SELECT TOP (@EligibleCoupons) BC.EServiceBarcodeID
									,                             @Mobile
									,                             BC.Barcode
									,                             BC.NotificationID
									,                             1
									FROM coc_EServiceBarcodes(NOLOCK) BC
									WHERE BC.IsUsed = 0

									--SELECT TOP(1) @EServiceBarcodeID=EServiceBarcodeID FROM coc_EServiceBarcodes(NOLOCK) WHERE Barcode=@BarCode AND NotificationID=@NotificationID
									IF (@WrongAnswer = 0)
									BEGIN
										UPDATE EB
										SET ConsumerID   = @ConsumerID
										,   GuestID      = @GuestID
										,   AsignedMoile = @Mobile
										,   IsUsed       = 1
										,   UsedDate     = GETDATE()
										FROM coc_EServiceBarcodes EB
										WHERE EServiceBarcodeID = @EServiceBarcodeID


										IF (ISNULL(@Barcode, '0') != '0')
										BEGIN
											INSERT INTO coc_ECouponParticipations ( ECouponID, ParticipationDate, Barcode, ParticipationMobile, ParticipationEmailID, ConsumerID, GuestID )
											SELECT @EcouponID
											,      GETDATE()
											,      @Barcode
											,      @Mobile
											,      @Email
											,      @ConsumerID
											,      @GuestID
											if (@ConsumerID is not null)
											begin
												EXEC AddCustomerLoyaltyPoints @EcouponID
												,                             @ConsumerID
												,                             @LoyaltyPointSetupID
												,                             @ErrorMessage OUTPUT

												EXEC SaveNotificationSending @NotificationID
												,                            @EcouponID
												,                            @ConsumerID
												,                            @GeneralNotificationTemplateID
												,                            @EServiceID
												,                            @Barcode
												,                            @ErrorMessage OUTPUT
											end
										END
										ELSE
										BEGIN
											SET @ErrorMessage = 'Barcode is Not There to Asign'
											set @SpResponseStatus=0;
											Set @SpResponseMessage=@ErrorMessage;
											set @SpErrorDetails=@ErrorMessage;
										END
									END
									ELSE
									BEGIN

										if (@ConsumerID is not null)
										begin
											INSERT INTO coc_ECouponParticipationsInvalid ( ECouponID, ParticipationDate, Barcode, ParticipationMobile, ParticipationEmailID, ConsumerID, Reason )
											SELECT @EcouponID
											,      GETDATE()
											,      @Barcode
											,      @Mobile
											,      @Email
											,      @ConsumerID
											,      'W'

											EXEC AddCustomerLoyaltyPoints @EcouponID
											,                             @ConsumerID
											,                             @LoyaltyPointSetupID
											,                             @ErrorMessage OUTPUT

											EXEC SaveNotificationSending @NotificationID
											,                            @EcouponID
											,                            @ConsumerID
											,                            @GeneralNotificationTemplateID
											,                            @EServiceID
											,                            @Barcode
											,                            @ErrorMessage OUTPUT
										end
									END
								END
								ELSE
								BEGIN
									IF (@WrongAnswer = 0)
									BEGIN
										UPDATE EB
										SET ConsumerID   = @ConsumerID
										,   GuestID      = @GuestID
										,   AsignedMoile = @Mobile
										,   IsUsed       = 1
										,   UsedDate     = GETDATE()
										FROM coc_EServiceBarcodes EB
										WHERE EServiceBarcodeID = @EServiceBarcodeID

										IF (ISNULL(@Barcode, '0') != '0')
										BEGIN
											INSERT INTO coc_ECouponParticipations ( ECouponID, ParticipationDate, Barcode, ParticipationMobile, ParticipationEmailID, ConsumerID, GuestID )
											SELECT @EcouponID
											,      GETDATE()
											,      @Barcode
											,      @Mobile
											,      @Email
											,      @ConsumerID
											,      @GuestID
											if (@ConsumerID is not null)
											begin
												EXEC AddCustomerLoyaltyPoints @EcouponID
												,                             @ConsumerID
												,                             @LoyaltyPointSetupID
												,                             @ErrorMessage OUTPUT

												EXEC SaveNotificationSending @NotificationID
												,                            @EcouponID
												,                            @ConsumerID
												,                            @GeneralNotificationTemplateID
												,                            @EServiceID
												,                            @Barcode
												,                            @ErrorMessage OUTPUT
											end
										END
									END
								END
							END
							ELSE
							BEGIN
								if (@ConsumerID is not null)
								begin
									INSERT INTO coc_ECouponParticipationsInvalid ( ECouponID, ParticipationDate, Barcode, ParticipationMobile, ParticipationEmailID, ConsumerID, Reason )
									SELECT @EcouponID
									,      GETDATE()
									,      @Barcode
									,      @Mobile
									,      @Email
									,      @ConsumerID
									,      'P'
								end
								SET @ErrorMessage = 'YouAlreadyParticipated'
								set @SpResponseStatus=0;
								Set @SpResponseMessage=@ErrorMessage;
								set @SpErrorDetails=@ErrorMessage;
							END

						END
						ELSE IF (@EserviceTypeID = 43)
							BEGIN
								IF NOT EXISTS (
									SELECT NULL
									FROM coc_EServiceBarcodes(NOLOCK)
									WHERE Barcode = @BarCode
										AND @EserviceTypeID IN (43)
										AND UsedDate IS NULL
									) -- IsUsed=0 )-- AND AsignedMoile IS NULL)
								BEGIN
									SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'
									set @SpResponseStatus=0;
									Set @SpResponseMessage=@ErrorMessage;
									set @SpErrorDetails=@ErrorMessage;
								END
								ELSE
								BEGIN
									SELECT TOP (1) @EServiceBarcodeID = EServiceBarcodeID
									,              @NotificationID = NotificationID
									FROM coc_EServiceBarcodes(NOLOCK)
									WHERE Barcode = @BarCode
										AND UsedDate IS NULL --IsUsed=0 -- AsignedMoile IS NULL

									INSERT INTO coc_ECouponParticipations ( ECouponID, ParticipationDate, Barcode, ParticipationMobile, ParticipationEmailID, ConsumerID, GuestID )
									SELECT @EcouponID
									,      GETDATE()
									,      @Barcode
									,      @Mobile
									,      @Email
									,      @ConsumerID
									,      @GuestID

									UPDATE coc_EServiceBarcodes
									SET AsignedMoile = @Mobile
									,   IsUsed       = 1
									,   UsedDate     = GETDATE()
									,   ConsumerID   = @ConsumerID
									,   GuestID      = @GuestID
									WHERE EServiceBarcodeID = @EServiceBarcodeID
									if (@ConsumerID is not null)
									begin
										EXEC AddCustomerLoyaltyPoints @EcouponID
										,                             @ConsumerID
										,                             @LoyaltyPointSetupID
										,                             @ErrorMessage OUTPUT

										EXEC SaveNotificationSending @NotificationID
										,                            @EcouponID
										,                            @ConsumerID
										,                            @GeneralNotificationTemplateID
										,                            @EServiceID
										,                            @Barcode
										,                            @ErrorMessage OUTPUT
									end
								END
							END
							ELSE IF (@EserviceTypeID = 44)
								BEGIN
									INSERT INTO @BarCodes ( EServiceBarcodeID, AsignedMoile, Barcode, NotificationID, IsUsed )
									SELECT TOP (@EligibleCoupons) BC.EServiceBarcodeID
									,                             @Mobile
									,                             BC.Barcode
									,                             BC.NotificationID
									,                             1
									FROM       coc_EServiceBarcodes(NOLOCK) BC        
									INNER JOIN coc_Notifications            NT(NOLOCK) ON BC.NotificationID = NT.NotificationID
											AND NT.EServiceID = @EServiceID
									WHERE BC.IsUsed = 0

									SELECT @NotificationID = NotificationID
									,      @Barcode = Barcode
									FROM @BarCodes

									UPDATE EB
									SET EB.AsignedMoile = BC.AsignedMoile
									,   EB.IsUsed       = BC.IsUsed
									,   EB.UsedDate     = GETDATE()
									,   EB.ConsumerID   = @ConsumerID
									,   GuestID         = @GuestID
									FROM       coc_EServiceBarcodes EB
									INNER JOIN @BarCodes            BC ON BC.EServiceBarcodeID = EB.EServiceBarcodeID

									IF (@ConsumerID IS NOT NULL OR @GuestID is not null)
									BEGIN

										if (@ConsumerID is not null)
											EXEC AddCustomerLoyaltyPoints @EcouponID
											,                             @ConsumerID
											,                             @LoyaltyPointSetupID
											,                             @ErrorMessage OUTPUT


										SELECT @EServiceBarcodeID = MIN(EServiceBarcodeID)
										FROM @BarCodes

										WHILE (@EServiceBarcodeID IS NOT NULL)
										BEGIN
											SELECT @Barcode = Barcode
											FROM @BarCodes
											WHERE EServiceBarcodeID = @EServiceBarcodeID

											if (@ConsumerID is not null)
												EXEC SaveNotificationSending @NotificationID
												,                            @EcouponID
												,                            @ConsumerID
												,                            @GeneralNotificationTemplateID
												,                            @EServiceID
												,                            @Barcode
												,                            @ErrorMessage OUTPUT

											INSERT INTO coc_ECouponParticipations ( ECouponID, ParticipationDate, Barcode, ParticipationMobile, ParticipationEmailID, ConsumerID, GuestID )
											SELECT @EcouponID
											,      GETDATE()
											,      @Barcode
											,      @Mobile
											,      @Email
											,      @ConsumerID
											,      @GuestID
											SELECT @EServiceBarcodeID = MIN(EServiceBarcodeID)
											FROM @BarCodes
											WHERE EServiceBarcodeID > @EServiceBarcodeID


										END
									END


								END
								ELSE
								BEGIN
									SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid' ---'Barcode is Already Used OR Invalid Barcode'
									set @SpResponseStatus=0;
									Set @SpResponseMessage=@ErrorMessage;
									set @SpErrorDetails=@ErrorMessage;
								END

					IF @ErrorMessage = ''
					BEGIN
						set @SpResponseStatus=1;
						DECLARE @return_value1 INT
						if (@ConsumerID is not null)
							EXEC @return_value1 = [dbo].[SaveEServiceAddOnConsumers] @ConsumerID = @ConsumerID
							,                                                        @EServiceID = @EServiceID

						PRINT '@return_value1'
						PRINT @return_value1
						--------------------------------------------------------------------//
					END

				END
	SELECT @ErrorMessage

	Set @SpResponseMessage=@ErrorMessage;
	set @SpErrorDetails=@ErrorMessage;
	COMMIT TRANSACTION SaveECouponPurchases
	END TRY

	BEGIN CATCH
	ROLLBACK TRANSACTION SaveECouponPurchases
	SELECT @ErrorMessage = ERROR_MESSAGE();
	set @SpResponseStatus=0;
	Set @SpResponseMessage=@ErrorMessage;
	set @SpErrorDetails=@ErrorMessage;
	declare @error int; select @error = ERROR_NUMBER();
	Raiserror ('SaveECouponPurchases: %d: %s', 16, 1, @error, @ErrorMessage) ;
	END CATCH

END
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveEmailSubscription]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_SaveEmailSubscription]          
@EmailID nvarchar(200),
@LanguageID INTEGER=1,                          
@UserID bigint=NULL,                        
@RoleID bigint=NULL,                        
@ImpersonationUserID bigint=NULL,                        
@SpResponseStatus int OUTPUT,                        
@SpResponseMessage nvarchar(max) OUTPUT,                        
@SpErrorDetails nvarchar(max) OUTPUT  
AS              
            
 BEGIN TRY              
    INSERT INTO  coc_core_NewsLetterSubscription(EmailId,SubscribeDate,IsVerified,SubscribeStatus)
	Values(@EmailID,getdate(),0,'Unsubscribed')
		 
	Set @SpResponseStatus=1;                         
	Set @SpResponseMessage='Success';                        
	Set @SpErrorDetails='Success'; 
  
  END TRY                                    
  BEGIN CATCH                          
  Set @SpResponseStatus=0;                         
  Set @SpResponseMessage='GenericError';                        
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>,
   ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>,
   ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> ,
   ErrorProcedure : <'+ERROR_PROCEDURE()+'> ,
   ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                            
                                
  END CATCH                                    
GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveEVoucherConfiguration]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_SaveEVoucherConfiguration]     
  
@LanguageID INT=1,       
  
@RoleID BIGINT,       
  
@ImpersonationUserID BIGINT=0,            
  
@EVoucherID   INTEGER  = 0,            
  
@EVoucherDescriptionXml  XML = NULL,            
  
@UserID INTEGER=NULL,            
  
@EVoucherCategoryID  INTEGER,            
  
--added new columns--          
  
@VoucherTypeID int = null,          
  
@DiscountAmount decimal(18,2)=null,          
  
@DiscountPercentage decimal(18,2)=null,          
  
@OriginalPrice decimal(18,2)=null,          
  
@PriceAfterDiscount decimal(18,2)=null,          
  
@PromotionAmount decimal(18,2)=null,          
  
@VoucherAmount  decimal(18,2)=null,          
  
@WhatYouGetEn  nvarchar(250)=null,          
  
@WhatYouGetAr  nvarchar(250)=null,    
  
@WhatYouBuyEn nvarchar(250)=null,   
         
@WhatYouBuyAr nvarchar(250)=null,   
  
@FromTime Time=null,  
  
@ToTime Time=null,  

@SelectedDays  nvarchar(250) =null,  
  
--added new columns--          
  
@BundleXml    XML   = NULL,            
  
@SpResponseStatus INT output,   
      
@SpResponseMessage NVARCHAR(max) output,    
     
@SpErrorDetails NVARCHAR(max) output             
  
AS            
  
  SET NOCOUNT ON;   
 BEGIN            
    if(@VoucherTypeID=2)
       Set @VoucherAmount=0;
    BEGIN TRY               
         Declare @EServiceID   INTEGER  
   SELECT            
  
    @EServiceID = EServiceID            
  
   FROM            
  
    coc_EVoucher   (NOLOCK)          
  
   WHERE            
  
    EVoucherID  = @EVoucherID    
  
  -- Arya [31-01-2018] [START]            
  
  DECLARE @ExpiryDate DATETIME            
  
  SELECT @ExpiryDate = ToDate FROM coc_EServices (NOLOCK) WHERE  EServiceID = @EServiceID            
  
  -- [END]            
  
             
  
                           
  
  IF(@EVoucherID = 0)  -- Insert Data to coc_EVoucher Table            
  
   BEGIN    
    INSERT INTO coc_EVoucher            
  
     (EServiceID,EVoucherCategoryID,AddDate,VoucherType,CreatedUserID,IsActive,IsDeleted,ExpiryDate,SelectedDays) -- Updated by Arya [31-01-2018]            
  
     SELECT @EServiceID,@EVoucherCategoryID,GETDATE(),'true',@UserID,'false','false',@ExpiryDate ,@SelectedDays -- Updated by Arya [31-01-2018]            
  
    SET @EVoucherID  = SCOPE_IDENTITY();    
    -- Insert VoucherName to coc_EVoucherLanguages Table  [START]    
    INSERT INTO coc_EVoucherLanguages             
  
     (EVoucherID, AddDate, CreatedUserId, LanguageID, [ResourceKey], [ResourceValue])            
  
     SELECT @EVoucherID, GETDATE(), @UserID, coc_EServiceLanguages.LanguageID, 'VoucherName',  coc_EServiceLanguages.EService            
  
     FROM coc_EServices (NOLOCK) INNER JOIN            
  
     coc_EServiceLanguages (NOLOCK) ON coc_EServices.EServiceID = coc_EServiceLanguages.EServiceID            
  
     WHERE coc_EServices.EServiceID  = @EServiceID            
  
            
  
    -- Insert VoucherName to coc_EVoucherLanguages Table  [END]            
  
            
  
    -- Insert Description to coc_EVoucherLanguages Table  [START]            
  
            
  
    INSERT INTO coc_EVoucherLanguages             
  
     (EVoucherID, AddDate, CreatedUserId, [ResourceKey], LanguageID,[ResourceValue])            
  
     SELECT @EVoucherID, GETDATE(), @UserID, 'Description',voucherDescription.value('(Language[1])','INTEGER'),                
  
     voucherDescription.value('(Description[1])','NVARCHAR(MAX)')            
  
     FROM @EVoucherDescriptionXml.nodes('/Xml/EVoucherData') AS Data(voucherDescription)            
  
            
  
    -- Insert Description to coc_EVoucherLanguages Table  [END]            
         
  
   END            
  
  ELSE       -- Update Data to coc_EVoucher Table            
  
   BEGIN            
  
            
  
    UPDATE coc_EVoucher SET             
  
     EVoucherCategoryID  = @EVoucherCategoryID,            
  
     EditDate    = GetDATE(),            
  
     EditedUserID   = @UserID,          
  
  ExpiryDate    = @ExpiryDate, -- Arya [31-01-2018]            
  
  VoucherTypeID = @VoucherTypeID,          
  
  DiscountAmount = @DiscountAmount ,          
  
  DiscountPercentage = @DiscountPercentage,          
  
  OriginalPrice =@OriginalPrice,          
  
  PriceAfterDiscount =@PriceAfterDiscount,          
  
  PromotionAmount =@PromotionAmount ,          
  
  VoucherAmount  =@VoucherAmount ,  
  
  FromTime=@FromTime,  
  
  SelectedDays=@SelectedDays,
  
  ToTime=@ToTime
   WHERE  EVoucherID    = @EVoucherID            
  
            
  
            
  
    DELETE FROM coc_EVoucherLanguages WHERE EVoucherID=@EVoucherID AND(ResourceKey='Description')      
  
    INSERT INTO coc_EVoucherLanguages (EVoucherID, CreatedUserId, EditedUserId, AddDate, EditDate, [ResourceKey], LanguageID,[ResourceValue])            
  
    SELECT @EVoucherID, @UserID, @UserID, GETDATE(), GETDATE(), 'Description',voucherDescription.value('(Language[1])','INTEGER'),                
  
    voucherDescription.value('(Description[1])','NVARCHAR(MAX)')            
  
    FROM @EVoucherDescriptionXml.nodes('/Xml/EVoucherData') AS Data(voucherDescription)           
  
         
  
         
  
 DELETE FROM coc_EVoucherLanguages WHERE EVoucherID=@EVoucherID AND(ResourceKey='WhatYouGet')            
  
    INSERT INTO coc_EVoucherLanguages (EVoucherID, CreatedUserId, EditedUserId, AddDate, EditDate, [ResourceKey], LanguageID,[ResourceValue])            
  
    SELECT @EVoucherID, @UserID, @UserID, GETDATE(), GETDATE(), 'WhatYouGet',1,@WhatYouGetEn           
  
 INSERT INTO coc_EVoucherLanguages (EVoucherID, CreatedUserId, EditedUserId, AddDate, EditDate, [ResourceKey], LanguageID,[ResourceValue])            
  
    SELECT @EVoucherID, @UserID, @UserID, GETDATE(), GETDATE(), 'WhatYouGet',2,@WhatYouGetAr       
   
   
 DELETE FROM coc_EVoucherLanguages WHERE EVoucherID=@EVoucherID AND(ResourceKey='WhatYouBuy')            
  
    INSERT INTO coc_EVoucherLanguages (EVoucherID, CreatedUserId, EditedUserId, AddDate, EditDate, [ResourceKey], LanguageID,[ResourceValue])            
  
    SELECT @EVoucherID, @UserID, @UserID, GETDATE(), GETDATE(), 'WhatYouBuy',1,@WhatYouBuyEn           
  
 INSERT INTO coc_EVoucherLanguages (EVoucherID, CreatedUserId, EditedUserId, AddDate, EditDate, [ResourceKey], LanguageID,[ResourceValue])            
  
    SELECT @EVoucherID, @UserID, @UserID, GETDATE(), GETDATE(), 'WhatYouBuy',2,@WhatYouBuyAr         
         
  
            
  
   END            
  
            
  
  IF(@BundleXml IS NOT NULL AND @BundleXml.exist('/BundleXml/BundleData') = 1)            
  
  BEGIN            
  
   UPDATE coc_EvoucherApproval SET IsApproved=1,ApprovedDate=GETDATE() WHERE EVoucherBundleID IN (SELECT voucherBundle.value('(VoucherBundleId[1])','INTEGER') FROM @BundleXml.nodes('/BundleXml/BundleData') AS Data(voucherBundle))            
  
            
  
  END            
  
  SET @SpResponseStatus = 1;              
  END TRY                      
  BEGIN CATCH                    
    
    SET @SpResponseStatus=0;       
          SET @SpResponseMessage='Failed';       
          SET @SpErrorDetails = convert(varchar(500), Error_number()) + 'ErrorNumber'       
                               + convert(varchar(500),Error_severity()) + 'ErrorSeverity'       
                               + 'ErrorState' +convert(varchar(500), Error_state())       
                               + 'ErrorProcedure' + Error_procedure()       
                               + 'ErrorLine' +convert(varchar(500), Error_line()) + 'ErrorMessage'       
                               + Error_message();                       
  END CATCH       
            
  
SET NOCOUNT OFF            
  
END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveEVoucherLocation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[core_usp_SaveEVoucherLocation]                    
  @EVoucherID int,                    
  @UserID int,                      
  @CityID int,                     
  @LocationEN nvarchar(max),                    
  @LocationAR nvarchar(max),                    
  @MapURL nvarchar(max),   
  @PlusCode  nvarchar(200),                   
  @EVoucherLocationID int,                      
  @LanguageID INT=1,       
  @RoleID BIGINT=0,       
  @ImpersonationUserID BIGINT=0,     
  @SpResponseStatus INT output,       
  @SpResponseMessage NVARCHAR(max) output,       
  @SpErrorDetails NVARCHAR(max) output                    
 AS                      
 SET NOCOUNT ON                      
 BEGIN                        
  BEGIN TRY                     
         begin transaction savelocation          
    if @EVoucherLocationID=0              
    begin              
        declare @LocationID int=0;              
     insert into coc_EvoucherLocations(EVoucherID,CityID,MapLink,PlusCode,CreatedBy,CreatedDate)              
    select @EVoucherID,@CityID,@MapURL,@PlusCode,@UserID,getdate()              
    set @LocationID=SCOPE_IDENTITY()              
            
     insert into coc_eVoucherLocationLanguages(VoucherLocationID,LanguageID,Location)              
      select @LocationID,1,@LocationEN              
            
     insert into coc_eVoucherLocationLanguages(VoucherLocationID,LanguageID,Location)              
      select @LocationID,2,@LocationAR              
    end                 
     else              
     begin              
                    
   update coc_EvoucherLocations set CityID=@CityID,MapLink=@MapURL,PlusCode=@PlusCode,ModifiedBy=@Userid,ModifiedDate=getdate() where VoucherLocationID=@EVoucherLocationID              
              
   update coc_eVoucherLocationLanguages set Location=@LocationEN where VoucherLocationID=@EVoucherLocationID and LanguageID=1              
              
   update coc_eVoucherLocationLanguages set Location=@LocationAR where VoucherLocationID=@EVoucherLocationID and LanguageID=2              
              
  end                
                
 --   select evl.VoucherLocationID,evl.CityID,cl.City,              
 --(select Location from coc_eVoucherLocationLanguages where VoucherLocationID=evl.VoucherLocationID and LanguageID=1) as LocationEN,              
 --(select Location from coc_eVoucherLocationLanguages where VoucherLocationID=evl.VoucherLocationID and LanguageID=2) as LocationAR,              
 --evl.MapLink              
 --from coc_EvoucherLocations evl              
 --left join coc_CityLanguages cl on cl.CityID=evl.CityID              
 --where cl.LanguageID=@LanguageID and evl.EVoucherID=@EVoucherID     
            
 commit transaction savelocation  
 SET @SpResponseStatus = 1;              
  END TRY                      
  BEGIN CATCH                    
  rollback transaction savelocation  
    SET @SpResponseStatus=0;       
          SET @SpResponseMessage='Failed';       
          SET @SpErrorDetails = convert(varchar(500), Error_number()) + 'ErrorNumber'       
                               + convert(varchar(500),Error_severity()) + 'ErrorSeverity'       
                               + 'ErrorState' +convert(varchar(500), Error_state())       
                               + 'ErrorProcedure' + Error_procedure()       
                               + 'ErrorLine' +convert(varchar(500), Error_line()) + 'ErrorMessage'       
                               + Error_message();                       
  END CATCH                      
 SET NOCOUNT OFF                       
 END
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_SaveEVoucherPackage]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_SaveEVoucherPackage]   
 @EVoucherPackageID bigint=NULL  
,@VoucherPackageName nvarchar(500)  
,@VoucherPackageNameAr nvarchar(500)  
,@UrlName nvarchar(500)  
,@StartDate datetime  
,@EndDate datetime  
,@ImageName nvarchar(300) 
,@CssCode nvarchar(1000)
,@ButtonColorCode nvarchar(100)
,@LogoName nvarchar(300)
,@VoucherData XML                        
,@UserID int                         
,@LanguageID INT=1    
,@RoleID BIGINT=0    
,@ImpersonationUserID BIGINT=0    
,@SpResponseStatus INT output    
,@SpResponseMessage NVARCHAR(max) output    
,@SpErrorDetails NVARCHAR(max) output    
AS    
 SET NOCOUNT ON    
BEGIN    
 BEGIN TRY   
   
  
  if(@EVoucherPackageID=0 or  @EVoucherPackageID is null)  
  begin  
  
     insert into coc_core_Voucher_Gift_Package(VoucherPackageName,VoucherPackageNameAr,StartDate,EndDate,IsActive,URL,CreatedOn,CreatedBy,ImageName,VoucherPackageLogo,CssCode,ButtonColorCode)  
      Select @VoucherPackageName,@VoucherPackageNameAr,@StartDate,@EndDate,1,@UrlName,getdate(),@UserID,@ImageName,@LogoName,@CssCode,@ButtonColorCode  
  
     set @EVoucherPackageID=SCOPE_IDENTITY()  
  
   INSERT INTO coc_core_VGP_Vouchers(VoucherPackageID,CreatedOn,CreatedBy,VoucherID)                       
     SELECT @EVoucherPackageID,getdate(),@UserID,                             
        VoucherMethod.value('(@VoucherID)', 'INTEGER')                           
          FROM @VoucherData.nodes('/XML/Row') AS Data(VoucherMethod)     
  end  
  else  
  begin   
        
   update coc_core_Voucher_Gift_Package set VoucherPackageName=@VoucherPackageName,VoucherPackageNameAr=@VoucherPackageNameAr,StartDate=@StartDate,  
      EndDate=@EndDate,URL=@UrlName,ImageName=@ImageName,VoucherPackageLogo=@LogoName,CssCode=@CssCode,ButtonColorCode=@ButtonColorCode ,UpdatedOn=getdate(),UpdatedBy=@UserID where VoucherPackageID=@EVoucherPackageID  
  
 delete from coc_core_VGP_Vouchers where VoucherPackageID=@EVoucherPackageID  
    
   INSERT INTO coc_core_VGP_Vouchers(VoucherPackageID,CreatedOn,CreatedBy,VoucherID)                       
     SELECT @EVoucherPackageID,getdate(),@UserID,                             
        VoucherMethod.value('(@VoucherID)', 'INTEGER')                           
          FROM @VoucherData.nodes('/XML/Row') AS Data(VoucherMethod)     
  
  end  
 SET @SpResponseStatus = 1;    
 SET @SpResponseMessage='SUCCESS';    
 END TRY    
 BEGIN CATCH    
 SET @SpResponseStatus=0;    
 SET @SpResponseMessage='Failed';    
 SET @SpErrorDetails = convert(varchar(500), Error_number()) + 'ErrorNumber'    
 + convert(varchar(500),Error_severity()) + 'ErrorSeverity'    
 + 'ErrorState' +convert(varchar(500), Error_state())    
 + 'ErrorProcedure' + Error_procedure()    
 + 'ErrorLine' +convert(varchar(500), Error_line()) + 'ErrorMessage'    
 + Error_message();    
 END CATCH    
 SET NOCOUNT OFF    
END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveEVoucherPromoCodeCategory]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_SaveEVoucherPromoCodeCategory]                 
@EVoucherCategoryID  bigint=NULL,
@EVoucherID   INTEGER, 
@CategoryID  INTEGER, 
@Discount decimal(18,2)=null, 
@ImageName  nvarchar(250)=null,   
@DescriptionEnglish  nvarchar(2000)=null,             
@DescriptionArabic  nvarchar(2000)=null,  
@UserID INTEGER,
@SpResponseStatus INT output,     
@SpResponseMessage NVARCHAR(max) output,      
@SpErrorDetails NVARCHAR(max) output               
    
AS              
    
  SET NOCOUNT ON;     
 BEGIN              
    
  BEGIN TRY                 
       if(@EVoucherCategoryID=0)
	       set @EVoucherCategoryID=NULL
	    if(@ImageName='')
		     set @ImageName=NULL
   update coc_EVoucher set AcceptExtraDiscount=1 where EVoucherID=@EVoucherID
   if(@EVoucherCategoryID is null)
   begin
      Insert into coc_core_EVoucherCategories(EVoucherID,CategoryID,ImageName,Discount,Description,DescriptionAr,CreatedBy,CreatedDate,IsDeleted)
        select @EVoucherID,@CategoryID,@ImageName,@Discount,@DescriptionEnglish,@DescriptionArabic,@UserID,getdate(),0
   end
   else
   begin
       update coc_core_EVoucherCategories set CategoryID=@CategoryID,ImageName=@ImageName,
	         Discount=@Discount,Description=@DescriptionEnglish,DescriptionAr=@DescriptionArabic,ModifiedBy=@UserID,ModifiedDate=getdate() Where EVoucherCategoryID=@EVoucherCategoryID
   end
    
  SET @SpResponseStatus = 1;                
  END TRY                        
  BEGIN CATCH                      
      
    SET @SpResponseStatus=0;         
          SET @SpResponseMessage='Failed';         
          SET @SpErrorDetails = convert(varchar(500), Error_number()) + 'ErrorNumber'         
                               + convert(varchar(500),Error_severity()) + 'ErrorSeverity'         
                               + 'ErrorState' +convert(varchar(500), Error_state())         
                               + 'ErrorProcedure' + Error_procedure()         
                               + 'ErrorLine' +convert(varchar(500), Error_line()) + 'ErrorMessage'         
                               + Error_message();                         
  END CATCH         
              
    
SET NOCOUNT OFF              
    
END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveEVoucherRetailOutlet]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_SaveEVoucherRetailOutlet] @EVoucherID int                 
,                                                          @XMLData XML                    
,                                                          @UserID int                     
,                                                          @LanguageID INT                 =1
,                                                          @RoleID BIGINT                  =0
,                                                          @ImpersonationUserID BIGINT     =0
,                                                          @SpResponseStatus INT            output
,                                                          @SpResponseMessage NVARCHAR(max) output
,                                                          @SpErrorDetails NVARCHAR(max)    output
AS
	SET NOCOUNT ON
BEGIN
	BEGIN TRY

	DECLARE @Value TABLE ( VoucherID      INTEGER
	,                      RetailOutletID INTEGER )
	INSERT INTO @Value ( VoucherID, RetailOutletID )
	SELECT @EVoucherID
	,      XmlTable.value('@Value','INTEGER')
	FROM @XMLData.nodes('/Xml/Row') AS Data(XmlTable)

	delete from coc_EVoucherRetailOutlet
	where EVoucherID=@EVoucherID
	insert into coc_EVoucherRetailOutlet
	select VoucherID
	,      RetailOutletID
	from @Value


	SET @SpResponseStatus = 1;
	SET @SpResponseMessage='SUCCESS';
	END TRY
	BEGIN CATCH
	rollback transaction savelocation
	SET @SpResponseStatus=0;
	SET @SpResponseMessage='Failed';
	SET @SpErrorDetails = convert(varchar(500), Error_number()) + 'ErrorNumber'
	+ convert(varchar(500),Error_severity()) + 'ErrorSeverity'
	+ 'ErrorState' +convert(varchar(500), Error_state())
	+ 'ErrorProcedure' + Error_procedure()
	+ 'ErrorLine' +convert(varchar(500), Error_line()) + 'ErrorMessage'
	+ Error_message();
	END CATCH
	SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveEVoucherTermsData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_SaveEVoucherTermsData] @EVoucherID INTEGER             
,
--@TermsXML XML=NULL,
                                                       @UserID INTEGER                 
,                                                      @IsActive BIT                   
,                                                      @IsAllowed BIT                  
,                                                      @IsAcceptedTC BIT               
,                                                      @EnglishTerms NVARCHAR(2000)    
,                                                      @ArabicTerms NVARCHAR(2000)     
,                                                      @LanguageID int                 =1
,                                                      @RoleID bigint                  =null
,                                                      @ImpersonationUserID bigint     =null
,                                                      @SpResponseStatus int            OUTPUT
,                                                      @SpResponseMessage nvarchar(500) OUTPUT
,                                                      @SpErrorDetails nvarchar(500)    OUTPUT
AS
	BEGIN TRY

	BEGIN TRANSACTION SaveEVoucherTermsData;

	Set @SpResponseStatus=1;
	Set @SpResponseMessage='Success';
	Set @SpErrorDetails=NULL;
	BEGIN

		IF (@IsAcceptedTC <> 0 )
		BEGIN
			UPDATE [coc_EVoucher]
			SET IsAcceptedTC = @IsAcceptedTC
			WHERE EVoucherID = @EVoucherID

			IF (@IsAllowed=0 OR @IsActive=0 )
			BEGIN
				IF (NOT EXISTS(SELECT *
					FROM       coc_EVoucherBundle             EB (NOLOCK)
					INNER JOIN coc_EVoucherBundleDistribution EVD (NOLOCK) ON EB.EVoucherBundleID = EVD.EVoucherBundleID
					WHERE EB.EVoucherID = @EVoucherID))
				BEGIN
					UPDATE [coc_EVoucher]
					SET IsAllowed = @IsAllowed
					WHERE EVoucherID = @EVoucherID
					UPDATE [coc_EVoucher]
					SET IsActive = @IsActive
					WHERE EVoucherID = @EVoucherID
				END
			END
			ELSE
			BEGIN
				UPDATE [coc_EVoucher]
				SET IsAllowed = @IsAllowed
				WHERE EVoucherID = @EVoucherID
				UPDATE [coc_EVoucher]
				SET IsActive = @IsActive
				WHERE EVoucherID = @EVoucherID
			END

			if not exists(select EVoucherLanguageID
				from coc_EVoucherLanguages (NOLOCK)
				where EVoucherID=@EVoucherID and ResourceKey='Terms' and LanguageID=1)
			begin
				insert into coc_EVoucherLanguages
				select @EVoucherID
				,      1
				,      'Terms'
				,      N''+@EnglishTerms
				,      getdate()
				,      null
				,      @UserID
				,      null
			end
			else
			begin
				update coc_EVoucherLanguages
				set ResourceValue = N''+@EnglishTerms
				where EVoucherID=@EVoucherID and ResourceKey='Terms' and LanguageID=1
			end

			if not exists(select EVoucherLanguageID
				from coc_EVoucherLanguages (NOLOCK)
				where EVoucherID=@EVoucherID and ResourceKey='Terms' and LanguageID=2)
			begin
				insert into coc_EVoucherLanguages
				select @EVoucherID
				,      2
				,      'Terms'
				,      N''+@ArabicTerms
				,      getdate()
				,      null
				,      @UserID
				,      null
			end
			else
			begin
				update coc_EVoucherLanguages
				set ResourceValue = N''+@ArabicTerms
				where EVoucherID=@EVoucherID and ResourceKey='Terms' and LanguageID=2
			end

		END
	END

	COMMIT TRANSACTION SaveEVoucherTermsData

	END TRY
	BEGIN CATCH
	ROLLBACK TRANSACTION SaveEVoucherTermsData
	Set @SpResponseStatus=0;
	Set @SpResponseMessage='GenericError';
	Set @SpErrorDetails ='ErrorNumber : <' +CONVERT(nvarchar(100), ERROR_NUMBER())+ '>, ErrorSeverity : <'+ CONVERT(nvarchar(100),ERROR_SEVERITY())+'>, ErrorState : <'+CONVERT(nvarchar(100),ERROR_STATE())+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+CONVERT(nvarchar(100),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';
	END CATCH;
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_SaveKioskLocations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_SaveKioskLocations] @KioskLocationsID INTEGER       
,                                                    @Location [Remark]              
,                                                    @CountryID INTEGER              
,                                                    @CityID INTEGER                 
,                                                    @Remarks [Remark]               =  NULL
,                                                    @IsActive BIT                   =  NULL
,                                                    @UserName nvarchar(250)         
,                                                    @Password nvarchar(250)         
,                                                    @NickName nvarchar(250)         
,                                                    @DynamicQuery XML               
,                                                    @strXML XML                     
,                                                    @screenXML XML                  
,                                                    @LocationURL nvarchar(1000)      = null
,                                                    @PlusCode nvarchar(1000)        =  null
,                                                    @ReturnValue [Remark]            OUTPUT
,                                                    @LanguageID int                 =  1
,                                                    @RoleID bigint                  =  null
,                                                    @UserID int                     =  NULL
,                                                    @ImpersonationUserID bigint     =  null
,                                                    @SpResponseStatus int            out
,                                                    @SpResponseMessage nvarchar(max) out
,                                                    @SpErrorDetails nvarchar(max)    out
AS
	SET NOCOUNT ON
BEGIN

	BEGIN TRANSACTION TRN_KioskLocation
	BEGIN TRY
	DECLARE @Value TABLE ( LanguageID INTEGER
	,                      Value      [Remark] )
	--DECLARE @RetailOutletID TABLE
	--(
	-- RetailOutletID INTEGER
	--)
	INSERT INTO @Value ( LanguageID, Value )
	SELECT XmlTable.value('@LanguageID','INTEGER')
	,      XmlTable.value('@Value','[Remark]')
	FROM @DynamicQuery.nodes('/Xml/Row') AS Data(XmlTable)

	IF (ISNULL(@KioskLocationsID,0)=0)
	BEGIN
		INSERT INTO coc_KioskLocations ( Location, CountryID, CityID, Remarks, IsActive, AddDate, AddUserID, LocationURL, PlusCode, UserName, Password, NickName )
		SELECT @Location
		,      @CountryID
		,      @CityID
		,      @Remarks
		,      1
		,      GETDATE()
		,      1
		,      @LocationURL
		,      @PlusCode
		,      @UserName
		,      @Password
		,      @NickName

		SET @KioskLocationsID=SCOPE_IDENTITY()
		INSERT INTO coc_KioskLocationLanguages ( KioskLocationID, LanguageID, KioskLocation )
		SELECT @KioskLocationsID
		,      LanguageID
		,      Value
		FROM @Value


	END ELSE
	BEGIN
		UPDATE coc_KioskLocations
		SET PlusCode    = @PlusCode
		,   Location    = @Location
		,   CountryID   = @CountryID
		,   CityID      = @CityID
		,   Remarks     = @Remarks
		,   IsActive    = @IsActive
		,   EditDate    = GETDATE()
		,   EditUserID  = 1
		,   LocationURL = @LocationURL
		,   UserName    = @UserName
		,   Password    = @Password
		,   NickName    = @NickName
		WHERE KioskLocationID=@KioskLocationsID

		DELETE FROM coc_KioskLocationLanguages
		WHERE KioskLocationID=@KioskLocationsID
		INSERT INTO coc_KioskLocationLanguages ( KioskLocationID, LanguageID, KioskLocation )
		SELECT @KioskLocationsID
		,      LanguageID
		,      Value
		FROM @Value
	END

	DELETE FROM coc_KioskLocationRetailOutlets
	where KioskLocationID=@KioskLocationsID
	INSERT INTO coc_KioskLocationRetailOutlets ( KioskLocationID, RetailOutletID )
	SELECT @KioskLocationsID
	,      XmlTable.value('@RetailOutletID[1]','INTEGER')
	FROM @strXML.nodes('/XML/Row') AS Data(XmlTable)

	-----------------------------

	DELETE FROM coc_KioskScreenMapping
	where KioskLocationID=@KioskLocationsID
	INSERT INTO coc_KioskScreenMapping ( KioskLocationID, KioskScreenID, IsActive )
	SELECT @KioskLocationsID
	,      Xmlscreen.value('KioskScreenID[1]','INTEGER')
	,      1
	FROM @screenXML.nodes('/XML/KioskScreen') AS Data(Xmlscreen)

	------------------------------

	SET @ReturnValue =''
	Set @SpResponseStatus=1;
	Set @SpResponseMessage='Success';
	Set @SpErrorDetails='Success';
	COMMIT TRANSACTION TRN_KioskLocation

	END TRY
	BEGIN CATCH
	SELECT @ReturnValue= ERROR_MESSAGE()
	Set @SpResponseStatus=0;
	Set @SpResponseMessage='GenericError';
	Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';
	ROLLBACK TRANSACTION TRN_KioskLocation
	END CATCH
END
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveNotificationMessageData]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Abdul Dayyan
-- Create date: 10 November 2019
-- Description:	Save Notification Message Data
-- =============================================
CREATE PROCEDURE [dbo].[core_usp_SaveNotificationMessageData] @NotificationID INTEGER         
,                                                             @ServiceID INTEGER              
,                                                             @NotificationSend INTEGER       
,                                                             @NotificationSendXML XML        
,                                                             @SaveFullData BIT                =1
,                                                             @NotificationSending INTEGER     =0
,                                                             @NotificationSendID INTEGER      OUTPUT
,                                                             @SpResponseStatus int            out
,                                                             @SpResponseMessage nvarchar(max) out
,                                                             @SpErrorDetails nvarchar(max)    out

AS
	SET NOCOUNT ON

	--When subsequent calls @SaveFullData should be zero since it need not update the tables in the given condition below.

	DECLARE @Counter INTEGER
	DECLARE @ConsumerNotificationID INTEGER=0
	DECLARE @EServiceBarcodeID INTEGER=0

	DECLARE @IsSave BIT=1

	DECLARE @Notifications AS TABLE ( EServiceID        INTEGER
	,                                 NotificationCount INTEGER
	,                                 NotificationSend  INTEGER
	,                                 NotificationRead  INTEGER NULL
	,                                 ResendCounter     INTEGER NULL )

	DECLARE @NotificationSends AS TABLE ( NotificationID    BIGINT
	,                                     SendingDate       DATETIME
	,                                     SendingType       TINYINT
	,                                     CityID            INTEGER
	,                                     AgeGroupID        INTEGER
	,                                     Gender            TINYINT
	,                                     SearchCount       INTEGER
	,                                     ScheduleDate      DATETIME
	,                                     NotificationCount INTEGER )

	DECLARE @NotificationSendLanguage AS TABLE ( LanguageID INTEGER
	,                                            Subject    [Remark]
	,                                            Message    [Remark] )

	IF (@SaveFullData=1)
	BEGIN
		INSERT INTO @NotificationSends
		SELECT ISNULL(@NotificationID,0)
		,      NotificationSends.value('(SendingDate[1])', 'DATETIME')
		,      NotificationSends.value('(SendingType[1])', '[NullName]')
		,      NotificationSends.value('(CityID[1])', 'INTEGER')
		,      NotificationSends.value('(AgeGroupID[1])', 'INTEGER')
		,      NotificationSends.value('(Gender[1])', 'TINYINT')
		,      NotificationSends.value('(SearchCount[1])', 'INTEGER')
		,      NotificationSends.value('(ScheduleDate[1])', 'DATETIME')
		,      NotificationSends.value('(NotificationCount[1])', '[INTEGER]')
		FROM @NotificationSendXML.nodes('/Registrations/RegistrationData') AS ECoupons(NotificationSends);

		INSERT INTO @NotificationSendLanguage
		SELECT NotificationSends.value('(LanguageID[1])', 'INTEGER')
		,      NotificationSends.value('(Subject[1])', '[Remark]')
		,      NotificationSends.value('(Message[1])', '[Remark]')
		FROM @NotificationSendXML.nodes('/Registrations/RegistrationData/Messages/Row') AS ECoupons(NotificationSends);
	END


	BEGIN TRY
	BEGIN TRANSACTION TRN_QueueNotifications

	SELECT @NotificationID = NotificationID
	FROM coc_Notifications(NOLOCK)
	WHERE EServiceID=@ServiceID
	UPDATE coc_Notifications
	SET NotificationSend = ISNULL(NotificationSend,0)+@NotificationSending
	WHERE EServiceID = @ServiceID


	IF (@SaveFullData=1)
	BEGIN
		INSERT INTO coc_NotificationSends ( NotificationID, SendingDate, SendingType, CityID, AgeGroupID, Gender, SearchCount, ScheduleDate, NotificationCount )
		SELECT @NotificationID
		,      CAST (SendingDate AS datetime)
		,      SendingType
		,      CASE WHEN CityID=0 THEN NULL
		                          ELSE CityID END
		,      CASE WHEN AgeGroupID=0 THEN NULL
		                              ELSE AgeGroupID END
		,      Gender
		,      SearchCount
		,      ScheduleDate
		,      NotificationCount
		FROM @NotificationSends

		SET @NotificationSendID = SCOPE_IDENTITY()
		INSERT INTO coc_NotificationSendLanguages
		SELECT @NotificationSendID
		,      LanguageID
		,      [Subject]
		,      [Message]
		FROM @NotificationSendLanguage
	END
	Set @SpResponseStatus=1;
	Set @SpResponseMessage='Success';
	Set @SpErrorDetails=NULL;

	COMMIT TRANSACTION TRN_QueueNotifications
	END TRY
	BEGIN CATCH
	ROLLBACK TRANSACTION TRN_QueueNotifications

	Set @SpResponseStatus=0;
	Set @SpResponseMessage='GenericError';
	Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';

	END CATCH

	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_SavePurchaseBarcode]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_SavePurchaseBarcode]           
 @BarcodePurchaseId bigint,          
 @CorporateID int,                     
 @Quantity bigint,                    
 @Vat decimal(18,2),            
 @InvoicePath nvarchar(500),          
 @CreatedBy int,                     
 @LanguageID int=1                     
 ,@UserID bigint=null                     
 ,@RoleID bigint=null                      
 ,@ImpersonationUserID bigint=null       
 ,@SpResponseStatus int out                     
 ,@SpResponseMessage nvarchar(max) out                       
 ,@SpErrorDetails nvarchar(max)    out                         
 AS                          
 SET NOCOUNT ON                         
 BEGIN                           
  BEGIN TRY                       
   declare @Rate decimal(18,2)                      
                    
   declare @Total decimal(18,2)                    
                    
   declare @VatAmount decimal(18,2)                   
                    
   declare @TotalWithVat decimal(18,2)              
                    
    declare @LastPurchaseNO bigint =0                    
                    
   declare @PriceId int                       
                    
                      
                    
   if exists (select Price from Coc_BarcodePrices(NoLock) where CountFrom<=@Quantity and CountTo>=@Quantity)                      
    begin                      
      select @Rate=Price,@PriceId=BarcodePriceId from Coc_BarcodePrices(NoLock) where CountFrom<=@Quantity and CountTo>=@Quantity                     
    end                      
    else if exists (select Price from Coc_BarcodePrices(NoLock) where CountFrom>@Quantity)                      
    begin                      
      select top 1 @Rate=Price,@PriceId=BarcodePriceId from Coc_BarcodePrices(NoLock) where CountFrom>@Quantity                    
    end                      
    else if exists (select Price from Coc_BarcodePrices(NoLock) where CountTo<@Quantity)                      
    begin                      
       select top 1 @Rate=Price,@PriceId=BarcodePriceId from Coc_BarcodePrices(NoLock) where CountTo<@Quantity order by BarcodePriceId desc                     
 end                      
                   
    set @Total=@Quantity*@Rate                      
                    
    set @VatAmount=(@Total/100)*@Vat                      
                    
    set @TotalWithVat=@Total+@VatAmount                
               
 if(@BarcodePurchaseId=0)          
  begin          
    select @LastPurchaseNO=Isnull(Max(PurchaseNo),0) from coc_BarcodePurchase(nolock)           
 set @InvoicePath=REPLACE(@InvoicePath,'InvoiceID',Convert(nvarchar(1000),@LastPurchaseNO+1))        
        
        
       insert into coc_BarcodePurchase(        
     PurchaseNo         
    ,CorporateId         
    ,[Date]         
    ,NoOfBarcodes         
    ,BarcodePriceId         
    ,Amount         
    ,TaxApplicable         
    ,Tax         
    ,TotalAmount         
    ,[Status]         
    ,NoOfBarCodesApproved         
    ,ApprovedAdminId         
    ,UserId         
    ,CreatedDate         
    ,AdminApprovedDate         
    ,IsDeleted         
    ,InvoicePath         
    ,ReasonForReject         
    ,IsCompetitionFeeAapply)            
      select (@LastPurchaseNO+1),        
   @CorporateID,        
   getdate(),        
   @Quantity,        
   @PriceId,        
   @Total,        
   1,        
   @VatAmount,        
   @TotalWithVat,        
   1,        
   NULL,        
   NULL,        
   @CreatedBy,        
   getdate(),        
   NULL,        
   0,        
   @InvoicePath ,        
   NULL,        
   0  --For this condition Cost of First Competition for Agency or Corporate (after every purchase of barcode) - 0 SAR         
    set @BarcodePurchaseId=SCOPE_IDENTITY()         
    set @BarcodePurchaseId=SCOPE_IDENTITY()          
  end          
else          
 begin          
    select @LastPurchaseNO=PurchaseNo from coc_BarcodePurchase(nolock) where BarcodePurchaseId=@BarcodePurchaseId        
 set @InvoicePath=REPLACE(@InvoicePath,'InvoiceID',Convert(nvarchar(1000),@LastPurchaseNO))          
    update coc_BarcodePurchase set Date=getdate(),NoOfBarcodes=@Quantity,BarcodePriceId=@PriceId,Amount=@Total,Tax=@VatAmount,TotalAmount=@TotalWithVat,          
 CreatedDate=getdate(),InvoicePath=@InvoicePath where BarcodePurchaseId=@BarcodePurchaseId          
 end          
 select isnull(c.CorporateName,isnull(c.CorporateNameAR,isnull(c.FirstName,''))) as Name,                
   isnull(c.PhoneNumber,u.MobileNumber) as MobileNumber,c.EmailID  ,@BarcodePurchaseId as  BarcodePurchaseId          
   ,bp.Date as AddDate,bp.PurchaseNo as InvoiceID,@Quantity as NumberOfBarcodes,@Rate as Rate,@Total as Total,@TotalWithVat as TotalWithVat                
   ,@VatAmount as VatAmount,        
   (case when @LanguageID=1 then cc.CurrencySymbol_en else cc.CurrencySymbol_ar end) as Currency,        
   (Select sum(PaidAmount) from coc_BarcodePurchasePayment(nolock) where BarcodePurchaseId=bp.BarcodePurchaseId) AS TotalPaidAmount        
   from coc_BarcodePurchase(nolock) bp                 
    inner join coc_BarcodePrices(nolock) cbp on cbp.BarcodePriceId=bp.BarcodePriceId        
    inner join Coc_Currency(nolock) cc on cc.CurrencyId=cbp.CurrencyId        
    inner join coc_Corporates(nolock) c on c.CorporateID=bp.CorporateID 
	inner join coc_Users(nolock) u on u.UserID=c.UserID
    where bp.BarcodePurchaseId=@BarcodePurchaseId              
           
 Set @SpResponseStatus=1;             
 Set @SpResponseMessage='Success';           
 Set @SpErrorDetails ='Success';                  
                    
  END TRY                
                  
  BEGIN CATCH                      
                    
  Set @SpResponseStatus=0;                             
                      
 Set @SpResponseMessage='GenericError';                               
                      
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,  
 ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>,    
 ErrorState : <'+convert(varchar(500), Error_state())+'> ,   
 ErrorProcedure : <'+Error_procedure() +'> ,         
 ErrorLine <'+convert(varchar(500), Error_line())+'>         
 ErrorMessage : <'+ERROR_MESSAGE()+'>';                              
                    
  END CATCH                     
                    
 SET NOCOUNT OFF                       
                    
 END
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_SavePurchaseBarcode_bak]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_SavePurchaseBarcode_bak]              
 @CorporateID int,         
 @Quantity int,        
 @Vat decimal(18,2),        
 @InvoiceNumber nvarchar(20),          
 @CreatedBy int,         
 @LanguageID int=1         
 ,@UserID bigint=null         
 ,@RoleID bigint=null          
 ,@ImpersonationUserID bigint=null           
 ,@SpResponseStatus int out         
 ,@SpResponseMessage nvarchar(max) out           
 ,@SpErrorDetails nvarchar(max)    out             
 AS              
 SET NOCOUNT ON             
 BEGIN               
  BEGIN TRY           
   declare @Rate dbo.Amount=0          
        
   declare @Total dbo.Amount=0          
        
   declare @VatAmount dbo.Amount=0          
        
   declare @TotalWithVat dbo.Amount=0          
        
    declare @InvoiceID bigint         
        
   declare @PriceId int              
        
   declare @EserviceID int        
        
          
        
   if exists (select MessageRate from coc_BarcodePackagePricings (NOLOCK) where PackFrom<=@Quantity and PackTo>=@Quantity and IsActive=1)          
        
    begin          
        
      select @Rate=MessageRate,@PriceId=BarcodePackagePricingsID from coc_BarcodePackagePricings (NOLOCK) where PackFrom<=@Quantity and PackTo>=@Quantity and IsActive=1          
        
    end          
        
    else if exists (select MessageRate from coc_BarcodePackagePricings (NOLOCK) where PackFrom>@Quantity and IsActive=1)          
        
    begin          
        
      select top 1 @Rate=MessageRate,@PriceId=BarcodePackagePricingsID from coc_BarcodePackagePricings (NOLOCK) where PackFrom>@Quantity and IsActive=1          
        
    end          
        
    else if exists (select MessageRate from coc_BarcodePackagePricings (NOLOCK) where PackTo<@Quantity and IsActive=1)          
        
    begin          
        
       select top 1 @Rate=MessageRate,@PriceId=BarcodePackagePricingsID from coc_BarcodePackagePricings (NOLOCK) where PackTo<@Quantity and IsActive=1 order by BarcodePackagePricingsID desc          
        
                end          
        
          
        
    set @Total=@Quantity*@Rate          
        
    set @VatAmount=(@Total/100)*@Vat          
        
    set @TotalWithVat=@Total+@VatAmount          
        
          
        
    insert into core_coc_Invoices(InvoiceNumber,CorporateID,TotalAmount,VatAmount,Status,AddUserID,AddDate,EditUserID,EditDate)           
        
    values(@InvoiceNumber,@CorporateID,@TotalWithVat,@VatAmount,1,@CreatedBy,getdate(),NULL,NULL)          
        
    set @InvoiceID=SCOPE_IDENTITY()          
        
   insert into core_coc_InvoiceDetails(InvoiceID,ServiceTypeID,BarcodePackagePricingsID,NumberOfBarcodes,UnitCost,VatAmount,TotalAmount,EServiceID)           
        
   values(@InvoiceID,NULL,@PriceId,@Quantity,@Rate,@VatAmount,@TotalWithVat,NULL)          
        
          
        
          
        
   select c.FirstName as Name,  
   c.MobileNumber,c.EmailID  
   ,ci.AddDate,ci.InvoiceID,cid.NumberOfBarcodes,@Rate as Rate,@Total as Total,@TotalWithVat as TotalWithVat  
   ,@VatAmount as VatAmount  
        
   from core_coc_Invoices ci   (NOLOCK)       
        
   inner join coc_Corporates c (NOLOCK) on c.CorporateID=ci.CorporateID      
       
   inner join core_coc_InvoiceDetails cid (NOLOCK) on cid.InvoiceID=ci.InvoiceID    
        
    where ci.InvoiceID=@InvoiceID          
        
             
        
             
        
          
        
  END TRY          
        
  BEGIN CATCH          
        
  SELECT Error_line()          
        
  SELECT Error_message()          
  Set @SpResponseStatus=0;                 
          
 Set @SpResponseMessage='GenericError';                   
          
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                  
        
  END CATCH         
        
 SET NOCOUNT OFF           
        
 END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveRetailOutlet]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 -- ======================================================================                          
-- Author     :  Shaik  use eCoponTest2019July14                        
-- Create date    :  29-Sept-2019                          
-- Description    :  save RetailOutlet core_usp_SaveRetailOutlet                       
-- ======================================================================                          
CREATE PROCEDURE  [dbo].[core_usp_SaveRetailOutlet]           
 @RetailOutletID INTEGER,          
 @CorporateID INTEGER,          
 @DynamicQuery XML,           
 @Address1 [NullName] =NULL,          
 @Address2 [NullName] =NULL,          
 @ContactPerson [NullName],          
 @CountryID [NullName] =NULL,          
 @CityID [NullName] =NULL,          
 --@Latitude [NullName],          
 --@Longitude [NullName],          
 @Location [Remark],          
 @LocationURL [Remark] = null,          
 @UserID INTEGER,          
 @IsActive BIT,          
 @PlusCode [NullName] =NULL,          
 @ReturnValue [Remark] OUTPUT,         
 @LanguageID int=1,          
 @RoleID bigint=null,              
 @ImpersonationUserID bigint=null,              
 @SpResponseStatus int out,              
 @SpResponseMessage nvarchar(max) out,              
 @SpErrorDetails nvarchar(max)    out                        
AS               
 Begin Try           
         
       
 SET NOCOUNT ON          
             
 DECLARE @RetailOutlet [Description]          
 DECLARE @Counter INTEGER          
 DECLARE @Value TABLE          
 (           
  UniqueID INTEGER IDENTITY(1,1),          
  LanguageID INTEGER,           
  Value [Remark]          
 )          
          
 INSERT INTO @Value (LanguageID,Value)          
 SELECT XmlTable.value('@LanguageID','INTEGER'),          
   XmlTable.value('@Value','[Remark]')          
   FROM @DynamicQuery.nodes('/Xml/Row') AS Data(XmlTable)          
        
 if(@RetailOutletID = 0 and exists(select RetailOutlet from coc_RetailOutletLanguages RO (NOLOCK)
 inner join coc_retailoutlets R (NOLOCK) on R.RetailOutletID=RO.RetailOutletID
 inner join @Value tm on tm.Value = RO.RetailOutlet where ro.LanguageID=1 and tm.LanguageID=1 and R.CorporateID= @CorporateID))    
 begin     
              
    Set @SpResponseStatus=0;               
    Set @SpResponseMessage='Retail Outlet Name Already Exits.. !!!';     
 return     
 end     
  Begin Transaction SaveRetailOutlet     
  IF(@RetailOutletID=0)          
  BEGIN          
   --INSERT INTO coc_RetailOutlets(CorporateID, ContactPerson,Address1,Address2,CountryID,CityID,Longitude,Latitude,Location,IsActive,AddUserID,AddDate,LocationURL)          
   -- SELECT @CorporateID,@ContactPerson,@Addressline,@SecondaryAddressline,@CountryID,@CityID,@Longitude,@Latitude,@Location,@IsActive,@UserID,GETDATE(),@LocationURL          
          
   INSERT INTO coc_RetailOutlets(CorporateID, ContactPerson,Address1,Address2,CountryID,CityID,Location,IsActive,AddUserID,AddDate,LocationURL,PlusCode)          
    SELECT @CorporateID,@ContactPerson,@Address1,@Address2,@CountryID,@CityID,@Location,@IsActive,@UserID,GETDATE(),@LocationURL,@PlusCode          
          
     SET @RetailOutletID=SCOPE_IDENTITY()            
  END          
  ELSE          
  BEGIN          
   UPDATE coc_RetailOutlets          
    SET CorporateID=@CorporateID,           
     ContactPerson=@ContactPerson,          
     Address1=@Address1,          
     Address2=@Address2,          
     CountryID=@CountryID,          
     CityID=@CityID,          
     --Longitude=@Longitude,          
     --Latitude=@Latitude,          
     Location=@Location,          
     IsActive=@IsActive,          
     EditUserID=@UserID,          
     EditDate=GETDATE()  ,          
     LocationURL = @LocationURL  ,        
  PlusCode=@PlusCode        
    WHERE RetailOutletID=@RetailOutletID          
 DELETE FROM coc_RetailOutletLanguages WHERE RetailOutletID=@RetailOutletID        
  END          
          
          
  SELECT @Counter=MIN(UniqueID) FROM @Value          
  WHILE @Counter IS NOT NULL           
  BEGIN          
   SELECT @RetailOutlet=Value,@LanguageID=LanguageID FROM @Value  WHERE UniqueID=@Counter          
   IF NOT EXISTS(SELECT 1 FROM coc_RetailOutletLanguages(NOLOCK)RL INNER JOIN coc_RetailOutlets (NOLOCK)RO ON RL.RetailOutletID=RO.RetailOutletID WHERE RL.RetailOutlet=@RetailOutlet AND RO.CorporateID=@CorporateID)          
   BEGIN          
    INSERT INTO coc_RetailOutletLanguages (RetailOutletID,LanguageID,RetailOutlet)          
     SELECT @RetailOutletID,@LanguageID,@RetailOutlet           
   END          
   SELECT @Counter=MIN(UniqueID) FROM @Value WHERE UniqueID>@Counter          
  END          
  SET @ReturnValue=''          
  SET NOCOUNT OFF         
        
  Set @SpResponseStatus=1;               
  Set @SpResponseMessage='Success';              
  Set @SpErrorDetails='Success';         
  Commit Transaction SaveRetailOutlet          
                 
  END TRY                          
  BEGIN CATCH         
   Rollback Transaction SaveRetailOutlet               
  Set @SpResponseStatus=0;               
  Set @SpResponseMessage='GenericError';          
  Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                  
        
          
  END CATCH 
GO
/****** Object:  StoredProcedure [dbo].[CORE_USP_SAVEUPDATE_VOUCHERTEMPLATE]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ======================================================================                  
-- Author     :  MOHAMMAD RAFEEQ SHAIK  
-- Create date    :  09-SEP-2019                  
-- Description    :  SAVE OR UPDATE COC_VOUCHERTEMPLATE TABLE                
-- ======================================================================     
CREATE PROCEDURE  [dbo].[CORE_USP_SAVEUPDATE_VOUCHERTEMPLATE]  
(  
  @TemplateID int,  
  @VoucherID    int,         
  @Logo NVARCHAR(1000),  
  @Position int,  
  @IsActive bit = 1,  
  @ContentType varchar(50),  
  @LanguageID int,         
  @UserID bigint=null,      
  @RoleID bigint=null,      
  @ImpersonationUserID bigint=null,      
  @SpResponseStatus int OUTPUT,      
  @SpResponseMessage nvarchar(max) OUTPUT,      
  @SpErrorDetails nvarchar(max) OUTPUT     
)  
AS  
BEGIN  
SET NOCOUNT ON;    
  
Set @SpResponseStatus=1;       
Set @SpResponseMessage='Success';      
Set @SpErrorDetails=NULL;      
  
BEGIN TRY      
  
BEGIN TRANSACTION VOUCHERTEMPLATE;       
  
IF(@TemplateID=0)  
BEGIN  
  
INSERT INTO coc_VoucherTemplate  
           (VoucherID  
           ,Logo  
           ,Position  
           ,IsActive  
		   ,ContentType  
           ,CreatedOn  
           ,CreatedBy)  
     VALUES  
           (@VoucherID  
           ,@Logo  
           ,@Position  
           ,@IsActive  
		   ,@ContentType  
           ,GETDATE()  
           ,@UserID)  
  
END--IF END  
  
ELSE  
BEGIN  
UPDATE coc_VoucherTemplate SET VoucherID = @VoucherID  
          ,Logo = @Logo  
          ,Position = @Position  
          ,IsActive = @IsActive  
          ,ContentType=@ContentType  
          ,UPDATEDON = GETDATE()  
          ,UPDATEDBY = @UserID WHERE TemplateID = @TemplateID  
END--ELSE END  
  
COMMIT TRANSACTION  VOUCHERTEMPLATE              
END TRY   
  
 BEGIN CATCH        
  ROLLBACK TRANSACTION VOUCHERTEMPLATE      
  Set @SpResponseStatus=0;       
  Set @SpResponseMessage='GenericError';      
  Set @SpErrorDetails ='ErrorNumber : <' +Convert(varchar,ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(varchar,ERROR_SEVERITY())+'>, ErrorState : <'+Convert(varchar,ERROR_STATE())+'> , ErrorProcedure : <'+Convert(varchar,ERROR_PROCEDURE())+'> , ErrorLine <'+Convert(varchar,ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';        
 END CATCH                  
   
 SET NOCOUNT OFF  
  
END  
GO
/****** Object:  StoredProcedure [dbo].[core_usp_SaveVoucherCreation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_SaveVoucherCreation]       
 @PromotionNameEN nvarchar(2000)           
,@PromotionNameAR nvarchar(2000)          
,@UpdateEVoucherID int=null        
,@Type int                                 
,@NumberOfVouchers int                     
,@FromDate datetime                        
,@Todate datetime                          
,@CorporateID int       
,@TypeID int      
,@AdminID     int    =null                     
,@CreatedBy int                            
,@LanguageID int                 =NULL          
,@UserID bigint                  =NULL          
,@RoleID bigint                  =NULL          
,@ImpersonationUserID bigint     =NULL          
,@EServiceID int                  out          
,@SpResponseStatus int            OUTPUT          
,@SpResponseMessage nvarchar(max) OUTPUT          
,@SpErrorDetails nvarchar(max)    OUTPUT          
,@EVoucherID int                  OUTPUT          
AS          
 SET NOCOUNT ON          
BEGIN          
 BEGIN TRY          
 BEGIN TRANSACTION SaveVoucherCreation;          
 DECLARE @ServiceNumber [NullCode]          
 Set @SpResponseStatus=1;          
 Set @SpResponseMessage='Success';          
 Set @SpErrorDetails=NULL;          
 SELECT @ServiceNumber= CONVERT(NVARCHAR(20),ISNULL(Max(ESERVICEID),0)+1)          
 FROM coc_EServices(NOLOCK)          
 --if @UpdateEVoucherID > 0 or not null update else insert        
if @UpdateEVoucherID =0        
begin         
set @UpdateEVoucherID=null;        
end        
if(@UpdateEVoucherID is null)   --INSERT voucher        
begin         
 INSERT INTO coc_EServices ( PaymentType, ServiceNumber, ServiceDate, FromDate, ToDate, CorporateID, ServiceTypeID, ServiceSubTypeID, CompetitionID, MessagePackTypeID, AddDate, AddUserID )          
          
 SELECT 33          
 ,      @ServiceNumber          
 ,      GETDATE()          
 ,      @FromDate          
 ,      @Todate          
 ,      @CorporateID          
 ,      51          
 ,      63          
 ,      null          
 ,      null          
 ,      GETDATE()          
 ,      @CreatedBy          
 SET @EServiceID=SCOPE_IDENTITY()          
 Insert into coc_EVoucher ( EServiceID, VoucherType, AddDate, CreatedUserID, IsActive, IsDeleted, IsAllowed, Type, NumberOfVouchers, CountryID, CurrentStatus,EVoucherTypeID,GenerateExactNumberOfVouchers)          
 select @EServiceID          
 ,      1          
 ,      getdate()          
 ,      @CreatedBy          
 ,      0          
 ,      0          
 ,      1          
 ,      @Type          
 ,      @NumberOfVouchers          
 ,      183          
 ,      0       
 ,@TypeID    
 ,(case when @TypeID=2 then 1 else 0 end)    
          
 set @EVoucherID=SCOPE_IDENTITY()          
 Insert into coc_EServiceLanguages ( EServiceID, LanguageID, EService )          
 select @EServiceID          
 ,      1          
 ,      @PromotionNameEN          
          
 Insert into coc_EServiceLanguages ( EServiceID, LanguageID, EService )          
 select @EServiceID          
 ,      2          
 ,      @PromotionNameAR          
          
 INSERT INTO coc_EVoucherLanguages ( EVoucherID, AddDate, CreatedUserId, LanguageID, [ResourceKey], [ResourceValue] )          
 SELECT @EVoucherID          
 ,      GETDATE()          
 ,      @CreatedBy          
 ,      coc_EServiceLanguages.LanguageID          
 ,      'VoucherName'          
 ,      coc_EServiceLanguages.EService          
 FROM       coc_EServices    (NOLOCK)              
 INNER JOIN coc_EServiceLanguages (NOLOCK) ON coc_EServices.EServiceID = coc_EServiceLanguages.EServiceID          
 WHERE coc_EServices.EServiceID = @EServiceID          
          
          
 INSERT INTO coc_Notifications ( EServiceID, NotificationCount, ResendCounter )          
 select @EServiceID          
 ,      @NumberOfVouchers          
 ,      0          
         
 end        
else if(@UpdateEVoucherID is not null) --update voucher        
 begin         
 set @EServiceID=(select EServiceID from coc_EVoucher (NOLOCK) where EVoucherID=@UpdateEVoucherID)        
 set @EVoucherID=@UpdateEVoucherID        
 update coc_EServices set FromDate=@FromDate, ToDate=@Todate,EditDate=Getdate(),EditUserID=@AdminID where EServiceID=@EServiceID        
 update coc_EVoucher set EditDate=getdate(),EditedUserID=@AdminID,Type=@Type, NumberOfVouchers=@NumberOfVouchers,EVoucherTypeID=@TypeID where EVoucherID=@UpdateEVoucherID          
 update coc_EServiceLanguages set EService=@PromotionNameEN where EServiceID=@EServiceID and LanguageID=1         
 update coc_EServiceLanguages set EService=@PromotionNameAR where EServiceID=@EServiceID and LanguageID=2        
 select * from coc_EVoucherLanguages (NOLOCK) where EVoucherID=51      
 Update coc_EVoucherLanguages set ResourceValue=@PromotionNameEN  where ResourceKey= 'VoucherName' and EVoucherID=@UpdateEVoucherID and LanguageID=1       
 Update coc_EVoucherLanguages set ResourceValue=@PromotionNameAR  where ResourceKey= 'VoucherName' and EVoucherID=@UpdateEVoucherID and LanguageID=2        
 update coc_Notifications set   NotificationCount=@NumberOfVouchers where EServiceID= @EServiceID        
 end         
 COMMIT TRANSACTION SaveVoucherCreation          
 END TRY          
 BEGIN CATCH          
 ROLLBACK TRANSACTION SaveVoucherCreation          
 Set @SpResponseStatus=0;          
 Set @SpResponseMessage='GenericError';          
 SET @SpErrorDetails = convert(varchar(500), Error_number()) + 'ErrorNumber'          
 + convert(varchar(500),Error_severity()) + 'ErrorSeverity'          
 + 'ErrorState' +convert(varchar(500), Error_state())          
 + 'ErrorProcedure' + Error_procedure()          
 + 'ErrorLine' +convert(varchar(500), Error_line()) + 'ErrorMessage'          
 + Error_message();          
 set @EServiceID=0          
 END CATCH          
 SET NOCOUNT OFF          
END          
        
        
GO
/****** Object:  StoredProcedure [dbo].[Core_usp_setevoucherprimaryimage]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ======================================================================       
-- Author     : Rafeeq       
-- Create date    : 03-Sep-2019       
-- Description    : Set Primary Image from EVoucher Images       
-- Updated date    :03-Sep-2019 | 03-Sep-2019       
-- Updated By    : Rafeeq       
-- ======================================================================       
CREATE PROCEDURE [dbo].[Core_usp_setevoucherprimaryimage]     
@LanguageID INT=1,     
@RoleID BIGINT,     
@ImpersonationUserID BIGINT=0,     
@EVoucherID INTEGER,     
@EVoucherImageID INTEGER,     
@ImageFile nVARCHAR(1000)=null,     
@IsPrimaryImage INTEGER,     
@UserID INTEGER,     
@SpResponseStatus INT output,     
@SpResponseMessage NVARCHAR(max) output,     
@SpErrorDetails NVARCHAR(max) output     
AS     
  BEGIN     
      BEGIN try     
          BEGIN TRANSACTION savevoucherimage     
    
          SET nocount ON;     
    
          DECLARE @ImageID INTEGER     
          DECLARE @ImageCount INTEGER     
    
          BEGIN     
              IF ( @EVoucherImageID <> 0 )     
                BEGIN     
                    -- added by Arya [17-01-2018]       
                    UPDATE coc_evoucherimages     
                    SET    imagefile = @ImageFile     
                    WHERE  evoucherimagesid = @EVoucherImageID     
    
                    -----------------//       
                    SELECT @ImageCount = Count(evoucherimagesid)     
                    FROM   coc_evoucherimages (NOLOCK)    
                    WHERE  evoucherid = @EVoucherID     
    
                    IF( @ImageCount <= 1 )     
                      BEGIN     
                          SET @IsPrimaryImage = 1     
                      END     
    
                    IF( @IsPrimaryImage = 0 )     
                      BEGIN     
                          SELECT @ImageID = Max(evoucherimagesid)     
                          FROM   coc_evoucherimages   (NOLOCK)  
                          WHERE  evoucherid = @EVoucherID     
                      END     
                    ELSE     
                      BEGIN     
                          SET @ImageID = @EVoucherImageID     
                      END     
    
                    UPDATE coc_evoucherimages     
                    SET    isprimaryimage = 1,     
                           editeduserid = @UserID,     
                           editdate = Getdate()     
                    WHERE  evoucherimagesid = @ImageID     
    
                    UPDATE coc_evoucherimages     
                    SET    isprimaryimage = 0,     
                           editeduserid = @UserID,     
                           editdate = Getdate()     
                    WHERE  evoucherimagesid <> @ImageID     
                           AND evoucherid = @EVoucherID     
                END     
              ELSE     
                BEGIN     
                    SELECT @ImageCount = Count(evoucherimagesid)     
                    FROM   coc_evoucherimages     (NOLOCK)
                    WHERE  evoucherid = @EVoucherID     
    
                    IF( @ImageCount = 0 )     
                      BEGIN     
                          SET @IsPrimaryImage = 1     
                      END     
    
                    INSERT INTO coc_evoucherimages     
                                (evoucherid,     
                                 imagefile,     
                                 adddate,     
                                 createduserid,     
                                 isprimaryimage)     
                    VALUES      (@EVoucherID,     
                                 @ImageFile,     
                                 Getdate(),     
                                 @UserID,     
                                 @IsPrimaryImage)     
    
                    SET @ImageID = Scope_identity()     
    
                    IF( @IsPrimaryImage = 1 )     
                      BEGIN     
                          UPDATE coc_evoucherimages     
                          SET    isprimaryimage = 0,     
                  editeduserid = @UserID,     
                                 editdate = Getdate()     
                          WHERE  evoucherimagesid <> @ImageID     
                                 AND evoucherid = @EVoucherID     
                      END     
                END                   
          END     
    
    SET @SpResponseStatus = 1;     
          COMMIT TRANSACTION savevoucherimage     
      END try     
    
      BEGIN catch     
          ROLLBACK TRANSACTION savevoucherimage;     
    
          SET @SpResponseStatus=0;     
          SET @SpResponseMessage='Failed';     
          SET @SpErrorDetails = convert(varchar(500), Error_number()) + 'ErrorNumber'     
                               + convert(varchar(500),Error_severity()) + 'ErrorSeverity'     
                               + 'ErrorState' +convert(varchar(500), Error_state())     
                               + 'ErrorProcedure' + Error_procedure()     
                               + 'ErrorLine' +convert(varchar(500), Error_line()) + 'ErrorMessage'     
                               + Error_message();     
      END catch;     
  END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_ShowAdvertisements]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_ShowAdvertisements]     
 @ImpersonationUserID BIGINT=NULL,              
 @SpResponseStatus INT = NULL OUT,              
 @SpResponseMessage NVARCHAR(MAX) = NULL OUT,              
 @SpErrorDetails NVARCHAR(MAX) = NULL OUT
 AS        
 SET NOCOUNT ON
 BEGIN TRY 
 
    SELECT AD.AdvertisementID AS AdvertisementID,AD.AdvertisementName AS AdvertisementName,AD.Duration AS Duration,
    FORMAT(AD.Cost,'N2') AS Cost,EV.BaseValue AS SiteLocation,
    CASE ad.DisplayTypeID WHEN 1 THEN 'Permanent' ELSE 'Random' END AS DisplayType,      
    CASE AD.TargetPlateform WHEN 1 THEN 'Mobile' WHEN 2 THEN 'Web'ELSE 'Both' END AS TargetPlateform,
    AD.IsActive AS Active     
    FROM coc_Advertisements (NOLOCK) AD       
    LEFT JOIN coc_EnumValues(NOLOCK) EV ON EV.EnumValueID=AD.PositionID      
    ORDER BY  AD.IsActive  desc ,AD.AdvertisementID desc

    Set @SpResponseStatus=1;                   
    Set @SpResponseMessage='Success';            
    Set @SpErrorDetails='Success';   

 END TRY                  
 BEGIN CATCH                           
    Set @SpResponseStatus=0;                   
    Set @SpResponseMessage='GenericError';                  
    Set @SpErrorDetails ='ErrorNumber : <' + CONVERT(VARCHAR,ERROR_NUMBER())+ '>,         
    ErrorSeverity : <'+ CONVERT(VARCHAR,ERROR_SEVERITY())+'>,         
    ErrorState : <'+CONVERT(VARCHAR,ERROR_STATE())+'> ,         
    ErrorProcedure : <'+ERROR_PROCEDURE()+'> ,         
    ErrorLine <'+ CONVERT(VARCHAR, ERROR_LINE()) +'>         
    ErrorMessage : <'+ERROR_MESSAGE()+'>';            
 END CATCH

 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_ShowCorporateUserRegistration]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_ShowCorporateUserRegistration] 
 @CurrentPage INTEGER                
,@PageSize INTEGER               =0    
,@LanguageID INTEGER                 
,@CorporateID INTEGER            =NULL    
,@FirstName [NullName]           =NULL    
,@MobileNumber [Mobile]          =NULL    
,@EmailID [Email]                =NULL    
,@UserID INTEGER                 =NULL    
,@JCCICode [Code]                =NULL    
,@CRNumber [NullCode]            =NULL    
,@HelpView BIT                   =NULL    
,@IsActive BIT                   =NULL    
,@TotalRecords INTEGER            OUTPUT    
,@SpResponseStatus int            OUTPUT    
,@SpResponseMessage nvarchar(max) OUTPUT    
,@SpErrorDetails nvarchar(max)    OUTPUT    
AS    
 BEGIN TRY    
 SET NOCOUNT ON    
 Set @SpResponseStatus=1;    
 Set @SpResponseMessage='Success';    
 Set @SpErrorDetails=NULL;    
 DECLARE @FirstRecord INTEGER    
    
 DECLARE @LastRecord INTEGER    
    
 DECLARE @RoleID INTEGER    
    
 DECLARE @CorporateRegisterID INTEGER    
    
 SELECT @RoleID =RoleID    
 From coc_Users(NOLOCK)    
 WHERE UserID=@UserID    
    
 SELECT @CorporateRegisterID =CorporateID    
 From coc_Corporates(NOLOCK)    
 WHERE UserID=@UserID    
    
 SELECT @LanguageID =LanguageID    
 FROM coc_Languages(NOLOCK)    
 WHERE IsDefaultLanguage=1    
    
 SET @FirstRecord = (@CurrentPage - 1) * @PageSize    
    
 SET @LastRecord = (@CurrentPage * @PageSize + 1)    
    
 DECLARE @coc_CorporateUserRegistration TABLE ( CorporateUserRegisterID INTEGER IDENTITY(1,1)    
 ,                                              UniqueID                INTEGER    
 ,                                              FirstName               NVARCHAR(200)    
 ,                                              EmailID                 NVARCHAR(100)    
 ,                                              MobileNumber            NVARCHAR(100)    
 ,                                              JCCICode                NVARCHAR(20)    
 ,                                              MerchantCode            NVARCHAR(100)   
 ,                                              RegistrationDate        VARCHAR(15)
  ,                                             RegistrationTime        NVARCHAR(20) 
 ,                                              DateOfActivation        datetime   
 ,                                              CorporateName           NVARCHAR(100)   
 ,                                              CRNumber                NVARCHAR(20)    
 ,                                              IsActive                BIT )    
    
 INSERT INTO @coc_CorporateUserRegistration ( UniqueID, FirstName, EmailID, MobileNumber, JCCICode, CRNumber, IsActive ,MerchantCode,RegistrationDate,RegistrationTime,DateOfActivation,CorporateName)    
 SELECT CU.UserID    
 ,      CU.UserName    
 ,      CU.EmailID    
 ,      CC.PhoneNumber    
 ,      CC.JCCICode    
 ,      CC.CRNumber    
 ,      CU.IsActive   
  ,      CC.MerchantCode   
  ,    convert(varchar, CC.AddDate, 105)
   ,   CONVERT(VARCHAR(5), CC.AddDate,8)  
   ,      CC.DateOfActivation  
   ,      (case when @LanguageID=1 then CC.CorporateName else CC.CorporateNameAR end)as CorporateName  
        
 FROM       coc_Users      CU(NOLOCK)    
 INNER JOIN coc_Corporates CC  (NOLOCK)       ON CU.UserID=CC.UserID    
 WHERE (@CorporateID IS NULL OR CorporateID=@CorporateID) AND    
  (@FirstName IS NULL OR CU.UserName LIKE +'%'+@FirstName+'%') AND    
  (@MobileNumber IS NULL OR CU.MobileNumber LIKE + '%'+@MobileNumber+'%') AND    
  (@JCCICode IS NULL OR CC.JCCICode LIKE + '%'+@JCCICode+'%') AND    
  (@CRNumber IS NULL OR CC.CRNumber LIKE + '%'+@CRNumber+'%') AND    
  (@EmailID IS NULL OR CU.EmailID LIKE + '%'+@EmailID+'%') AND    
  (@IsActive IS NULL OR CU.IsActive=@IsActive)    
 ORDER BY CC.CorporateID DESC    
 IF ISNULL(@HelpView,0)=0    
 BEGIN    
  IF (@PageSize=0)    
  BEGIN    
   SELECT CorporateUserRegisterID    
   ,      UniqueID    
   ,      FirstName    
   ,      EmailID    
   ,      MobileNumber    
   ,      JCCICode    
   ,      CRNumber    
   ,      IsActive    
   ,      MerchantCode   
   ,      RegistrationDate  
   ,      RegistrationTime
   ,       DateOfActivation  
   ,       CorporateName  
   FROM @coc_CorporateUserRegistration    
  END ELSE    
  BEGIN    
   SELECT CorporateUserRegisterID    
   ,      UniqueID    
   ,      FirstName    
   ,      EmailID    
   ,      MobileNumber    
   ,      JCCICode    
   ,      CRNumber    
   ,      IsActive    
   ,      MerchantCode   
   ,      RegistrationDate 
   ,      RegistrationTime
   ,       DateOfActivation  
   ,       CorporateName  
   FROM @coc_CorporateUserRegistration    
   WHERE CorporateUserRegisterID > @FirstRecord AND CorporateUserRegisterID < @LastRecord    
  END    
 END ELSE    
 BEGIN    
  IF (@PageSize=0)    
  BEGIN    
   SELECT UniqueID    
   ,      FirstName    
   ,      EmailID    
   ,      MobileNumber    
   ,      JCCICode    
   ,      CRNumber    
   ,      IsActive    
   ,      MerchantCode   
   ,      RegistrationDate 
   ,     RegistrationTime 
   ,      DateOfActivation  
   ,      CorporateName  
   FROM @coc_CorporateUserRegistration    
  END ELSE    
  BEGIN    
   SELECT CorporateUserRegisterID    
   ,      UniqueID    
   ,      FirstName    
   ,      EmailID    
   ,      MobileNumber    
   ,      JCCICode    
   ,      CRNumber    
   ,      IsActive    
   ,      MerchantCode   
   ,      RegistrationDate  
   ,      RegistrationTime
   ,      DateOfActivation  
   ,      CorporateName  
   FROM @coc_CorporateUserRegistration    
   WHERE CorporateUserRegisterID > @FirstRecord AND CorporateUserRegisterID < @LastRecord    
  END    
 END    
 SELECT @TotalRecords=COUNT(CorporateUserRegisterID)    
 FROM @coc_CorporateUserRegistration    
 SET NOCOUNT OFF    
 END TRY    
 BEGIN CATCH    
 Set @SpResponseStatus=0;    
 Set @SpResponseMessage='GenericError';    
 SET @SpErrorDetails = convert(varchar(500), Error_number()) + 'ErrorNumber'    
 + convert(varchar(500),Error_severity()) + 'ErrorSeverity'    
 + 'ErrorState' +convert(varchar(500), Error_state())    
 + 'ErrorProcedure' + Error_procedure()    
 + 'ErrorLine' +convert(varchar(500), Error_line()) + 'ErrorMessage'    
 + Error_message();    
    
 END CATCH    
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_ShowKioskLocations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_ShowKioskLocations] @CorporateID INTEGER             = NULL
,                                                    @LanguageID INTEGER              = 1
,                                                    @UserID int                     =  NULL
,                                                    @RoleID bigint                  =  null
,                                                    @ImpersonationUserID bigint     =  null
,                                                    @SpResponseStatus int            out
,                                                    @SpResponseMessage nvarchar(max) out
,                                                    @SpErrorDetails nvarchar(max)    out
AS
	SET NOCOUNT ON
	BEGIN TRY
	if (@CorporateID=0)
		set @CorporateID=NULL
	DECLARE @coc_KioskLocations TABLE ( ClientId        INTEGER IDENTITY PRIMARY KEY
	,                                   UniqueID        INTEGER
	,                                   KioskLocation   [Description]
	,                                   Address1        [Address]
	,                                   Remarks         [Remark]
	,                                   Country         Description
	,                                   City            Description
	,                                   IsActive        BIT
	,                                   KioskLocationID int
	,                                   UserName        nvarchar(250)
	,                                   Password        nvarchar(250)
	,                                   NickName        nvarchar(250)
	,                                   RetailOutlet    [Description] )
	INSERT INTO @coc_KioskLocations ( UniqueID, KioskLocation, Address1, Remarks, Country, City, IsActive, KioskLocationID, UserName, Password, NickName, RetailOutlet )
	SELECT KL.KioskLocationID
	,      KC.KioskLocation
	,      KL.Address1
	,      KL.Remarks
	,      CL.Country
	,      CT.City
	,      KL.IsActive
	,      KL.KioskLocationID
	,      KL.UserName
	,      KL.Password
	,      KL.NickName
	,      ROL.RetailOutlet
	FROM       [coc_KioskLocations]           KL(NOLOCK) 
	INNER JOIN [coc_KioskLocationLanguages]   KC(NOLOCK)  ON KC.KioskLocationID = KL.KioskLocationID AND KC.LanguageID = @LanguageID
	INNER JOIN coc_KioskLocationRetailOutlets KLR(NOLOCK) ON KLR.KioskLocationID=KL.KioskLocationID
	INNER JOIN coc_RetailOutlets              RO(NOLOCK)  ON RO.RetailOutletID=KLR.RetailOutletID
	INNER JOIN coc_RetailOutletLanguages      ROL(NOLOCK) ON ROL.RetailOutletID=RO.RetailOutletID and ROL.LanguageID=@LanguageID
	LEFT JOIN  coc_CountryLanguages           CL(NOLOCK)  ON KL.CountryID = CL.CountryID AND CL.LanguageID = @LanguageID
	LEFT JOIN  coc_CityLanguages              CT(NOLOCK)  ON KL.CityID = CT.CityID AND CT.LanguageID = @LanguageID
	WHERE (@CorporateID IS NULL OR RO.CorporateID = @CorporateID)
	ORDER BY KL.KioskLocationID DESC

	SELECT UniqueID
	,      KioskLocation
	,      Address1
	,      Remarks
	,      Country
	,      City
	,      IsActive
	,      KioskLocationID
	,      UserName
	,      Password
	,      NickName
	,      RetailOutlet
	FROM @coc_KioskLocations

	END TRY
	BEGIN CATCH
	Set @SpResponseStatus=0;
	Set @SpResponseMessage='GenericError';
	Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';
	END CATCH

	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_updateChamberApproval]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_updateChamberApproval]  
@CompetitionStagingID BIGINT, 
@ChamberApprovedPDF nvarchar(200)=null,  
@IsPdfUpload bit=null, 
@LanguageID INTEGER=1,                  
@UserID bigint=NULL,                
@RoleID bigint=NULL,                
@ImpersonationUserID bigint,                
@SpResponseStatus int OUTPUT,                
@SpResponseMessage nvarchar(max) OUTPUT,                
@SpErrorDetails nvarchar(max) OUTPUT    
AS   
BEGIN TRY                    
  Set @SpResponseStatus=1;                   
  Set @SpResponseMessage='Success';                  
  Set @SpErrorDetails=NULL;                  
  SET NOCOUNT ON;
    if(@IsPdfUpload=1 AND @IsPdfUpload is not null)   
	begin
		Update coc_competition_staging      
		SET ChamberApprovedPDF = @ChamberApprovedPDF,
		SentForAdminApproval=1
		WHERE   CompetitionStagingID=@CompetitionStagingID   
	end
  END TRY                              
  BEGIN CATCH                    
  Set @SpResponseStatus=0;                   
  Set @SpResponseMessage='GenericError';                  
  Set @SpErrorDetails ='ErrorNumber : <' + Convert(nvarchar(20),ERROR_NUMBER())+ '>,
   ErrorSeverity : <'+ Convert(nvarchar(20),ERROR_SEVERITY())+'>, 
   ErrorState : <'+Convert(nvarchar(20),ERROR_STATE())+'> , 
   ErrorProcedure : <'+ERROR_PROCEDURE()+'> , 
   ErrorLine <'+Convert(nvarchar(20),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                      
                          
  END CATCH                              
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_UpdateConsumerIdentity]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================              
-- Author:  Narender Gorige             
-- Create date: 07 June 2021             
-- Description: Updates consumer Identity Details.             
-- =============================================           
CREATE PROCEDURE [dbo].[core_usp_UpdateConsumerIdentity]         
 @ConsumerID int ,  
 @UserIdentityTypeID INT,      
 @UserIdentityNumber NVARCHAR(100),      
 @ImpersonationUserID bigint=null,              
 @SpResponseStatus int = null out,              
 @SpResponseMessage nvarchar(max) = null out,              
 @SpErrorDetails nvarchar(max) = null out        
AS                  
 SET NOCOUNT ON                  
 BEGIN TRY   
    BEGIN TRANSACTION TRN_UpdateConsumerIdentity
    SET @SpResponseStatus=0;                   
    SET @SpResponseMessage='';                  
    SET @SpErrorDetails='';

    --Check if a consumer already exists with UserIdentityNumber.
    IF EXISTS(SELECT UserIdentityNumber from coc_consumers where ConsumerID <> @ConsumerID AND 
    UserIdentityNumber = @UserIdentityNumber and IsDeleted = 0)            
    BEGIN          
        SET @SpResponseStatus=0;                   
        SET @SpResponseMessage='IdentityNumberAlreadyExists';                  
        SET @SpErrorDetails='UserIdentityNumberAlreadyExists'; 
        ROLLBACK TRANSACTION TRN_UpdateConsumerIdentity      
        RETURN;
    END
    ELSE
    BEGIN
        UPDATE [dbo].[coc_Consumers]                
        SET 
        UserIdentityTypeID = @UserIdentityTypeID,
        UserIdentityNumber = @UserIdentityNumber
        WHERE ConsumerID = @ConsumerID AND IsDeleted = 0

        SET @SpResponseStatus=1;                   
        SET @SpResponseMessage='Success';                  
        SET @SpErrorDetails='Success';   
        COMMIT TRANSACTION TRN_UpdateConsumerIdentity 
    END
      
           
 END TRY                  
 BEGIN CATCH
    ROLLBACK TRANSACTION TRN_UpdateConsumerIdentity      
    Set @SpResponseStatus=0;                   
    Set @SpResponseMessage='GenericError';                  
    Set @SpErrorDetails ='ErrorNumber : <' + CONVERT(VARCHAR,ERROR_NUMBER())+ '>,         
    ErrorSeverity : <'+ CONVERT(VARCHAR,ERROR_SEVERITY())+'>,         
    ErrorState : <'+CONVERT(VARCHAR,ERROR_STATE())+'> ,         
    ErrorProcedure : <'+ERROR_PROCEDURE()+'> ,         
    ErrorLine <'+ CONVERT(VARCHAR, ERROR_LINE()) +'>         
    ErrorMessage : <'+ERROR_MESSAGE()+'>';            
 END CATCH                  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_usp_UpdateConsumerProfile]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_usp_UpdateConsumerProfile] (  
  @Address1 NVARCHAR(255) = NULL  
 ,@CityID INT = NULL  
 ,@ConsumerID INT  
 ,@BirthDate VARCHAR(100) = NULL  
 ,@VerificationDate VARCHAR(100) = NULL  
 ,@FirstName NVARCHAR(200)  
 ,@SecondName NVARCHAR(200)  
 ,@FamilyName NVARCHAR(255)  
 ,@PrimaryMobile VARCHAR(15)  
 ,@SecondaryMobile VARCHAR(15) = NULL  
 ,@EmailID VARCHAR(100)  
 ,@IqamaNumber NVARCHAR(20) = NULL  
 ,@CountryID INT  
 ,@OtpID INT = NULL  
 ,@ImageFile NVARCHAR(100) = NULL  
 ,@KnowECouponID INT = NULL  
 ,@KnowECouponOthers NVARCHAR(100) = NULL  
 ,@MembershipNumber NVARCHAR(20) = NULL  
 ,@NationalityID INT = NULL  
 ,@Gender SMALLINT  
 ,@ThirdName NVARCHAR(200) = NULL  
 ,@OccupationID INT = NULL  
 ,@JobNumber NVARCHAR(50) = NULL  
 ,@Organization NVARCHAR(150) = NULL  
 ,@MaritalStatusID INT = NULL  
 ,@FamilyMember NVARCHAR(50) = NULL  
 ,@ErrorMessage NVARCHAR(4000) OUTPUT  
 )  
AS  
BEGIN  
 BEGIN TRY  
  --set @ErrorMessage = 'before if condition';  
  IF EXISTS (  
    SELECT ConsumerID  
    FROM coc_Consumers(NOLOCK)  
    WHERE ConsumerID = @ConsumerID  
    )  
  BEGIN --begin if  
   UPDATE coc_Consumers  
   SET Address1 = @Address1  
    ,CityID = @CityID  
    ,BirthDate = IIF(@BirthDate IS NULL, @BirthDate, convert(DATETIME, @BirthDate, 103))  
    ,VerificationDate = IIF(@VerificationDate IS NULL, @VerificationDate, convert(DATETIME, @VerificationDate, 103))  
    ,FirstName = @FirstName  
    ,SecondName = @SecondName  
    ,FamilyName = @FamilyName  
    --,PrimaryMobile = @PrimaryMobile  
    ,SecondaryMobile = @SecondaryMobile  
    --,EmailID = @EmailID  
    ,IqamaNumber = @IqamaNumber  
    --,CountryID = @CountryID  
    ,OtpID = @OtpID  
    ,ImageFile = @ImageFile  
    ,KnowECouponID = @KnowECouponID  
    ,KnowECouponOthers = @KnowECouponOthers  
    --,MembershipNumber = @MembershipNumber  
    ,NationalityID = @NationalityID  
    ,Gender = @Gender  
    ,ThirdName = @ThirdName  
    ,OccupationID = @OccupationID  
    ,JobNumber = @JobNumber  
    ,Organization = @Organization  
    ,MaritalStatusID = @MaritalStatusID  
    ,FamilyMember = @FamilyMember  
   WHERE ConsumerID = @ConsumerID;  
  
   SET @ErrorMessage = 'Success';  
  
   SELECT @ErrorMessage;  
  END --end if  
  ELSE  
  BEGIN -- begin else  
   SET @ErrorMessage = 'ConsumerId not exists';  
  
   SELECT @ErrorMessage;  
  END -- end else     
 END TRY  
  
 BEGIN CATCH  
  SET @ErrorMessage = ERROR_MESSAGE();  
  SET @ErrorMessage = ERROR_MESSAGE() + ' Error occurred';  
  
  SELECT @ErrorMessage;  
 END CATCH;  
END
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_UpdateGeneralNotification]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[Core_Usp_UpdateGeneralNotification]  
  @GeneralNotificationId bigint
 ,@MessageHeadingEN nvarchar(max)
 ,@MessageHeadingAR nvarchar(max)
 ,@MessageEN nvarchar(max)
 ,@MessageAR nvarchar(max)
 ,@ScheduleFromDate varchar(100) 
 ,@ScheduleToDate varchar(100)
 ,@IsActive         bit
 ,@IsBrodaCast      bit 
 ,@PushNotificationDate  varchar(100) 
 ,@IsSendPushNotification bit 
 ,@IsShowAsAppNotification bit 
 ,@LanguageID int=1   
 ,@CreatedBy      int =null            
 ,@UserID int=null               
 ,@RoleID int=null                
 ,@ImpersonationUserID bigint=null                 
 ,@SpResponseStatus int out               
 ,@SpResponseMessage nvarchar(max) out                 
 ,@SpErrorDetails nvarchar(max)    out                   
 AS                    
 SET NOCOUNT ON                   
 BEGIN                     
  BEGIN TRY 
    declare   @CheckIsBrodaCast bit;
	select @CheckIsBrodaCast=IsBrodaCast  from  coc_GeneralNotification(NOLOCK) where GeneralNotificationId=@GeneralNotificationId
    if(@CheckIsBrodaCast=0)
	begin
	 --Update in main table
         update coc_GeneralNotification
	     set	ScheduleFromDate=@ScheduleFromDate
			,ScheduleToDate=@ScheduleToDate
			,IsActive=@IsActive
			,IsBrodaCast=@IsBrodaCast
			,CreatedDate=convert(varchar,@PushNotificationDate,121)
			,CreatedBy=@CreatedBy
			,IsSendPushNotification=@IsSendPushNotification
			,IsShowAsAppNotification=@IsShowAsAppNotification
			where GeneralNotificationId=@GeneralNotificationId

		--Insert in sub tables sends and language table 
		   update coc_NotificationSends set SendingDate=@ScheduleFromDate where GeneralNotificationId=@GeneralNotificationId
		
		   declare @NotificationSendID bigint;
		   select @NotificationSendID=NotificationSendID from coc_NotificationSends(NOLOCK) where GeneralNotificationId=@GeneralNotificationId
		   Update coc_NotificationSendLanguages set [Subject]=@MessageHeadingEN,[Message]=@MessageEN where LanguageID=1 and NotificationSendID=@NotificationSendID
		   Update coc_NotificationSendLanguages set [Subject]=@MessageHeadingAR,[Message]=@MessageAR where LanguageID=2 and NotificationSendID=@NotificationSendID
       
	   end
	   else 
	   begin
	     update coc_GeneralNotification set IsActive=@IsActive where GeneralNotificationId=@GeneralNotificationId
	   end
	   Set @SpResponseStatus=1;   
       Set @SpResponseMessage='Success';   
	   set @SpErrorDetails='Success'; 
	     
  END TRY                
              
  BEGIN CATCH                
              
  Set @SpResponseStatus=0;  
  Set @SpResponseMessage='GenericError';    
  Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,
  ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, 
  ErrorState : <'+convert(varchar(500), Error_state())+'> , 
  ErrorProcedure : <'+Error_procedure() +'>,
  ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                        
              
  END CATCH               
              
 SET NOCOUNT OFF                 
              
 END
GO
/****** Object:  StoredProcedure [dbo].[core_usp_UpdateMall]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[core_usp_UpdateMall]     
  @MallID  int ,       
  @MallName_EN nvarchar(200),  
  @MallName_AR nvarchar(200),  
  @MallImage nvarchar(200),  
  @IsActive bit ,  
  @TermsAndConditions_EN nvarchar(max),  
  @TermsAndConditions_AR nvarchar(max),  
  @Description nvarchar(max),  
  @CountryID int,  
  @CityID int,  
  @LocationUrl  nvarchar(200),  
  @LanguageID int=1,       
  @UserID bigint=null,    
  @RoleID bigint=null,    
  @ImpersonationUserID bigint=null,    
  @SpResponseStatus int out,    
  @SpResponseMessage nvarchar(max) out,    
  @SpErrorDetails nvarchar(max)    out              
AS     
 Begin Try      
 Set @SpResponseStatus=1;     
 Set @SpResponseMessage='Success';    
 Set @SpErrorDetails='Success';     
  select * from core_coc_Mall
   update core_coc_Mall   
   set MallName_EN=@MallName_EN,  
   MallName_AR=@MallName_AR,  
   MallImage=@MallImage,  
   IsActive=@IsActive,  
   TermsAndConditions_EN=@TermsAndConditions_EN,  
   TermsAndConditions_AR=@TermsAndConditions_AR,  
   [Description]=@Description,  
   CountryID=@CountryID,  
   CityID=@CityID,  
   LocationUrl=@LocationUrl,  
   ModifiedBy=@UserID,
   ModifiedDate=GetDate()
   Where MallID=@MallID  
                
  END TRY                
  BEGIN CATCH      
  Set @SpResponseStatus=0;     
  Set @SpResponseMessage='GenericError';    
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
       
  END CATCH                
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_UpdateWebNotificationAsRead]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_UpdateWebNotificationAsRead]      
 @WebNotificationID bigint
,@LanguageID INTEGER=1     
,@UserID bigint                  =  null    
,@RoleID bigint                  =  null    
,@ImpersonationUserID bigint     =  null    
,@SpResponseStatus int            out    
,@SpResponseMessage nvarchar(max) out    
,@SpErrorDetails nvarchar(max)    out    
    
AS      
 SET NOCOUNT ON     
  BEGIN  TRY       
  
  Update coc_core_WebNotifications set 
  IsRead=1,
  ReadOn=getdate(),
  ReadByUserID=@UserID
  where WebNotificationID=@WebNotificationID
   
    
 Set @SpResponseStatus=1;    
 Set @SpResponseMessage='Success';    
 Set @SpErrorDetails='Success';    
 END TRY    
 BEGIN CATCH    
 Set @SpResponseStatus=0;    
 Set @SpResponseMessage='GenericError';    
 Set @SpErrorDetails ='ErrorNumber';    
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,   
 ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>,  
 ErrorState : <'+convert(varchar(500), Error_state())+'> ,   
 ErrorProcedure : <'+Error_procedure() +'> ,  
 ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';    
    
 END CATCH    
    
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_UploadKioskLocations]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_UploadKioskLocations] @StrXML XML                     
,                                                      @LanguageID int                 =1
,                                                      @RoleID bigint                  =null
,                                                      @UserID int                     =NULL
,                                                      @ImpersonationUserID bigint     =null
,                                                      @SpResponseStatus int            out
,                                                      @SpResponseMessage nvarchar(max) out
,                                                      @SpErrorDetails nvarchar(max)    out
AS
	SET NOCOUNT ON
BEGIN
	BEGIN TRY

	DECLARE @Counter int
	Declare @KioskLocationsID int

	Declare @KioskLocationEN nvarchar(100)

	Declare @KioskLocationAR nvarchar(100)

	Declare @CountryID int

	Declare @CityID int

	Declare @RetailOutletID int

	Declare @CorporateID int

	Declare @LocationURL nvarchar(1000)

	Declare @Location nvarchar(1000)

	Declare @PlusCode nvarchar(1000)

	Declare @Remarks nvarchar(1000)

	Declare @CoponSending nvarchar(10)

	Declare @CoponScanning nvarchar(10)

	Declare @VoucherScanning nvarchar(10)

	Declare @UserName nvarchar(250)
	Declare @Password nvarchar(250)
	Declare @NickName nvarchar(250)



	DECLARE @KioskData AS TABLE ( ID              INTEGER IDENTITY(1,1)
	,                             KioskLocationEN [Name]
	,                             KioskLocationAR [Name]
	,                             CountryID       INTEGER
	,                             CityID          INTEGER
	,                             RetailOutletID  INTEGER
	,                             CorporateID     INTEGER
	,                             LocationURL     [Description]
	,                             Location        [Description]
	,                             PlusCode        [Description]
	,                             Remarks         [Description]
	,                             CoponSending    [Name]
	,                             CoponScanning   [Name]
	,                             VoucherScanning [Name]
	,                             UserName        [Name]
	,                             Password        [Name]
	,                             NickName        [Name] )



	INSERT INTO @KioskData ( KioskLocationEN, KioskLocationAR, CountryID, CityID, RetailOutletID, CorporateID, LocationURL, Location, PlusCode, Remarks, CoponSending, CoponScanning, VoucherScanning, UserName, Password, NickName )

	SELECT CorporateUser.value('(@KioskLocationEN)', '[Name]')
	,      CorporateUser.value('(@KioskLocationAR)', '[Name]')
	,      CorporateUser.value('(@CountryID)', 'INTEGER')
	,      CorporateUser.value('(@CityID)', 'INTEGER')
	,      CorporateUser.value('(@RetailOutletID)', 'INTEGER')
	,      CorporateUser.value('(@CorporateID)', 'INTEGER')
	,      CorporateUser.value('(@LocationURL)', 'Description')
	,      CorporateUser.value('(@Location)', 'Description')
	,      CorporateUser.value('(@PlusCode)', 'Description')
	,      CorporateUser.value('(@Remarks)', 'Description')
	,      CorporateUser.value('(@CoponSending)', '[Name]')
	,      CorporateUser.value('(@CoponScanning)', '[Name]')
	,      CorporateUser.value('(@VoucherScanning)', '[Name]')
	,      CorporateUser.value('(@UserName)', '[Name]')
	,      CorporateUser.value('(@Password)', '[Name]')
	,      CorporateUser.value('(@NickName)', '[Name]')


	FROM @StrXML.nodes('/XML/Row') AS Data(CorporateUser)



	SELECT @Counter = MIN(ID)
	FROM @KioskData

	WHILE @Counter IS NOT NULL

	BEGIN

		SELECT @CorporateID = CorporateID
		,      @KioskLocationEN=KioskLocationEN
		,      @KioskLocationAR=KioskLocationAR
		,      @CountryID=CountryID
		,      @CityID=CityID
		,      @RetailOutletID=RetailOutletID
		,      @LocationURL=LocationURL
		,      @Location=Location
		,      @PlusCode=PlusCode
		,      @Remarks=Remarks
		,      @CoponSending=CoponSending
		,      @CoponScanning=CoponScanning
		,      @VoucherScanning=VoucherScanning
		,      @UserName=UserName
		,      @Password=Password
		,      @NickName=NickName
		FROM @KioskData
		WHERE ID=@Counter


		INSERT INTO coc_KioskLocations ( Location, CountryID, CityID, Remarks, IsActive, AddDate, AddUserID, LocationURL, PlusCode, UserName, Password, NickName )

		SELECT @Location
		,      @CountryID
		,      @CityID
		,      @Remarks
		,      1
		,      GETDATE()
		,      1
		,      @LocationURL
		,      @PlusCode
		,      @UserName
		,      @Password
		,      @NickName



		SET @KioskLocationsID=SCOPE_IDENTITY()

		INSERT INTO coc_KioskLocationLanguages ( KioskLocationID, LanguageID, KioskLocation )
		SELECT @KioskLocationsID
		,      1
		,      @KioskLocationEN
		INSERT INTO coc_KioskLocationLanguages ( KioskLocationID, LanguageID, KioskLocation )
		SELECT @KioskLocationsID
		,      2
		,      @KioskLocationAR

		DELETE FROM coc_KioskLocationRetailOutlets
		where KioskLocationID=@KioskLocationsID

		INSERT INTO coc_KioskLocationRetailOutlets ( KioskLocationID, RetailOutletID )
		SELECT @KioskLocationsID
		,      @RetailOutletID

		DELETE FROM coc_KioskScreenMapping
		where KioskLocationID=@KioskLocationsID
		if (Lower(@CoponSending)='true' or @CoponSending='1')
		begin
			INSERT INTO coc_KioskScreenMapping ( KioskLocationID, KioskScreenID, IsActive )
			SELECT @KioskLocationsID
			,      1
			,      1
		end
		if (Lower(@CoponScanning)='true' or @CoponScanning='1')
		begin
			INSERT INTO coc_KioskScreenMapping ( KioskLocationID, KioskScreenID, IsActive )
			SELECT @KioskLocationsID
			,      2
			,      1
		end
		if (Lower(@VoucherScanning)='true' or @VoucherScanning='1')
		begin
			INSERT INTO coc_KioskScreenMapping ( KioskLocationID, KioskScreenID, IsActive )
			SELECT @KioskLocationsID
			,      3
			,      1
		end

		SELECT @Counter = MIN(ID)
		FROM @KioskData
		WHERE ID >@Counter

	END


	Set @SpResponseStatus=1;

	Set @SpResponseMessage='Success';

	Set @SpErrorDetails='Success';

	END TRY

	BEGIN CATCH

	Set @SpResponseStatus=0;

	Set @SpResponseMessage='GenericError';

	Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';

	END CATCH

END

	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_UseBarcode]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================              
-- Author:  Narender Gorige             
-- Create date: 07 May 2021             
-- Description: Use Barcode              
-- =============================================           
Create PROCEDURE [dbo].[core_usp_UseBarcode]         
 @UserId INTEGER,        
 @ConsumerID INTEGER= NULL,                  
 @BarCode [NullDescription],                  
 @LanguageID INTEGER,                  
 @BarcodeID BIGINT ,                  
 @EServiceID BIGINT ,                 
 @InvoiceNumber nvarchar(100)=NULL,                        
 @InvoiceAmount  decimal(18,2)=NULL,                   
 @ImpersonationUserID bigint=null,              
 @SpResponseStatus int = null out,              
 @SpResponseMessage nvarchar(max) = null out,              
 @SpErrorDetails nvarchar(max) = null out        
AS                  
 SET NOCOUNT ON                  
 BEGIN TRY                   
    BEGIN TRANSACTION TRN_UseBarcodeAtKiosk                  
    DECLARE @l_RegistrationRequired BIT                  
    DECLARE @l_IsUsed BIT                  
    DECLARE @l_BarcodeID BIGINT                  
    DECLARE @l_EServiceID BIGINT                  
    DECLARE @IsAllowToParticipate INT        
    DECLARE @NotificationID INTEGER                  
    DECLARE @NotificationSendID INTEGER         
    SET @SpResponseStatus=0;                   
    SET @SpResponseMessage='';                  
    SET @SpErrorDetails='';             
          
    IF @ConsumerID IS NOT NULL              
    BEGIN              
        SELECT @IsAllowToParticipate =  dbo.Core_ValidateAllowParticipation(@ConsumerID);          
        IF(@IsAllowToParticipate = 0)           
        BEGIN           
            SET @SpResponseStatus=0;                   
            SET @SpResponseMessage='IsEmailNotVerifiedLbl';            
            SET @SpErrorDetails='IsEmailNotVerifiedLbl';        
            RETURN;             
        END                     
    END              
                  
    IF (ISNULL(@SpResponseMessage,'') = '')                  
    BEGIN                  
                
        SELECT @l_BarcodeID = EB.EServiceBarcodeID, @l_RegistrationRequired = EC.RegistrationRequired,                  
        @l_IsUsed = EB.IsUsed, @l_EServiceID = ES.EServiceID                  
        FROM coc_EServiceBarcodes EB(NOLOCK)                   
        INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID=NT.NotificationID                   
        INNER JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID=NT.EServiceID                  
        INNER JOIN coc_EServiceLanguages ESL (NOLOCK) ON ESL.EServiceID = ES.EServiceID AND         
        ESL.LanguageID = @LanguageID                  
        LEFT JOIN coc_ECoupons EC(NOLOCK) ON NT.EServiceID=EC.EServiceID                  
        WHERE EB.Barcode=@BarCode and ISNULL(EC.IsActive,1) = 1 and ES.IsActive = 1 and                   
        CONVERT(DATETIME,CONVERT(VARCHAR,GETDATE(),101),101) >=  CONVERT(DATETIME,CONVERT(VARCHAR,ES.FromDate,101),101) AND                  
        CONVERT(DATETIME,CONVERT(VARCHAR,GETDATE(),101),101) <=  CONVERT(DATETIME,CONVERT(VARCHAR,ES.ToDate,101),101)         
                
        IF EXISTS(SELECT EVoucherID FROM coc_EVoucher WHERE Type=3 and EServiceID=@EServiceID)                    
        BEGIN                     
            IF((@InvoiceNumber = '' OR @InvoiceNumber IS NULL) AND         
            (@InvoiceAmount = 0 OR @InvoiceAmount IS  NULL))        
            BEGIN        
                SET @SpResponseStatus=0;                   
                SET @SpResponseMessage='InvoiceNumberAndAmountReqLbl';            
                SET @SpErrorDetails='InvoiceNumberAndAmountReqLbl';        
                ROLLBACK TRANSACTION TRN_UseBarcodeAtKiosk                   
                RETURN;        
            END                    
            IF(@InvoiceNumber ='' OR @InvoiceNumber IS  NULL )                    
            BEGIN        
                SET @SpResponseStatus=0;                   
                SET @SpResponseMessage='InvoiceNumberReqLbl';            
                SET @SpErrorDetails='InvoiceNumberReqLbl';        
                ROLLBACK TRANSACTION TRN_UseBarcodeAtKiosk                   
                RETURN;                      
            END                     
            IF(@InvoiceAmount = 0 OR @InvoiceAmount IS  NULL )                    
            BEGIN        
                SET @SpResponseStatus=0;                   
                SET @SpResponseMessage='InvoiceAmountReqLbl';            
                SET @SpErrorDetails='InvoiceAmountReqLbl';                    
                ROLLBACK TRANSACTION TRN_UseBarcodeAtKiosk                      
                RETURN;                  
            END                  
        END               
        IF ((@l_BarcodeID IS NULL) OR (@l_BarcodeID <> @BarcodeID))                 
        BEGIN        
            Set @SpResponseStatus=0;                   
            Set @SpResponseMessage='InvalidBarcodeLbl';                  
            Set @SpErrorDetails='InvalidBarcodeLbl';        
            ROLLBACK TRANSACTION TRN_UseBarcodeAtKiosk                      
            RETURN;                  
        
        END                  
        IF (@l_IsUsed = 1)                  
        BEGIN        
            Set @SpResponseStatus=0;                   
            Set @SpResponseMessage='UsedBarcodeLbl';            
            Set @SpErrorDetails='UsedBarcodeLbl';         
            ROLLBACK TRANSACTION TRN_UseBarcodeAtKiosk                      
            RETURN;                           
        END                  
        IF (ISNULL(@SpResponseMessage,'') = '')                  
        BEGIN                  
            UPDATE EB                  
            SET IsUsed=1,UsedDate=GETDATE(), UserId = @UserId ,InvoiceAmount=@InvoiceAmount,         
            InvoiceNumber= @InvoiceNumber                 
            FROM coc_EServiceBarcodes EB                  
            WHERE EServiceBarcodeID = @l_BarcodeID                  
                     
            IF @ConsumerID is not null                  
            BEGIN                  
                SELECT @NotificationID = NotificationID FROM coc_Notifications(NOLOCK) WHERE EServiceID=@l_EServiceID                  
                UPDATE coc_Notifications                  
                SET NotificationSend = ISNULL(NotificationSend,0)+1                  
                WHERE EServiceID = @l_EServiceID                  
                       
                INSERT INTO coc_NotificationSends        
                (NotificationID,SendingDate,SendingType,SearchCount,NotificationCount)                  
                SELECT @NotificationID,GETDATE(),4,0,0        
            
                SET @NotificationSendID = SCOPE_IDENTITY()                  
                  
                IF (ISNULL(@NotificationSendID,0) > 0) AND         
                    (NOT EXISTS (SELECT NULL FROM coc_NotificationSendLanguages(NOLOCK) WHERE         
                        NotificationSendID = @NotificationSendID))                   
                BEGIN                  
                    INSERT INTO coc_ConsumerNotifications(NotificationSendID,ConsumerID,SendDate,HasChecked)                  
                    SELECT @NotificationSendID,@ConsumerID,GETDATE(),0         
            
                    INSERT INTO coc_NotificationSendLanguages(NotificationSendID,LanguageID,Subject,Message)                  
                    SELECT @NotificationSendID,LG.LanguageID,        
                    'Congratulations!','Your barcode is consumed :~'+@BarCode         
                    FROM coc_Languages (NOLOCK) LG        
                    WHERE @LanguageID IS NULL or LG.LanguageID = @LanguageID                  
                END                  
            END        
            Set @SpResponseStatus=1;                 
            Set @SpResponseMessage='UseBarcodeSuccess';            
            Set @SpErrorDetails='UseBarcodeWebSuccess';         
        END                  
    END                  
     COMMIT TRANSACTION TRN_UseBarcodeAtKiosk           
 END TRY                  
 BEGIN CATCH                           
    ROLLBACK TRANSACTION TRN_UseBarcodeAtKiosk        
    Set @SpResponseStatus=0;                   
    Set @SpResponseMessage='GenericError';                  
    Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>,         
    ErrorSeverity : <'+ ERROR_SEVERITY()+'>,         
    ErrorState : <'+ERROR_STATE()+'> ,         
    ErrorProcedure : <'+ERROR_PROCEDURE()+'> ,         
    ErrorLine <'+ERROR_LINE()+'>         
    ErrorMessage : <'+ERROR_MESSAGE()+'>';            
 END CATCH                  
 SET NOCOUNT OFF                  
                  
GO
/****** Object:  StoredProcedure [dbo].[core_usp_uspGetUserRoleBasedMenus]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
    
CREATE PROCEDURE [dbo].[core_usp_uspGetUserRoleBasedMenus]  
  @LanguageID int=1,     
  @UserID bigint=NULL,  
  @RoleID bigint=NULL,  
  @ImpersonationUserID bigint=NULL,  
  @SpResponseStatus int OUTPUT,  
  @SpResponseMessage nvarchar(max) OUTPUT,  
  @SpErrorDetails nvarchar(max) OUTPUT       
AS     
 BEGIN TRY    
 SET NOCOUNT ON;    
   Set @SpResponseStatus=1;   
 Set @SpResponseMessage='Success';  
 Set @SpErrorDetails=NULL;  
         
  SELECT tblMenu.MenuID                                                                        
  , (case when @LanguageID = 1  then tblMenu.MenuLabel_EN else tblMenu.MenuLabel_AR end )  MenuLabel    
  , tblMenu.ParentMenuID                                                                  
  , tblMenu.ScreenID                                                                      
  , tblMenu.MenuType                                                                      
  , tblScreen.ActionName   as ActionName    
  , tblScreen.ControllerName  as ControllerName    
  , tblMenu.CssClass                                                                      
  , (case when @LanguageID = 1  then tblParentMenu.MenuLabel_EN  else tblParentMenu.MenuLabel_AR end )    ParentMenuName    
    
  FROM  Core_coc_Menu   tblMenu (NOLOCK)    
  INNER JOIN core_coc_Screen tblScreen (NOLOCK) ON tblMenu.ScreenID = tblScreen.ScreenID    
  left join Core_coc_Menu tblParentMenu (NOLOCK) on tblParentMenu.MenuID = tblMenu.ParentMenuID    
  WHERE tblMenu.IsActive=1  AND tblMenu.MenuID IN(SELECT MenuID FROM core_coc_RoleMenuMapping  (NOLOCK) WHERE RoleID =@RoleID AND IsActive=1)    
    
 END TRY    
 BEGIN CATCH    
 Set @SpResponseStatus=0;     
  Set @SpResponseMessage='GenericError';    
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
  
 END CATCH    
GO
/****** Object:  StoredProcedure [dbo].[core_USP_ValidateCorporateLogin]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_USP_ValidateCorporateLogin]    
@CRNumber NVARCHAR(20)                 
,@SpResponseStatus int            = null OUTPUT        
,@SpResponseMessage nvarchar(max) = null OUTPUT        
,@SpErrorDetails nvarchar(max)    = null OUTPUT        
AS        
 SET NOCOUNT ON  
BEGIN  
    SET @SpResponseStatus =1;          
    SET @SpResponseMessage = 'Success';          
    SET @SpErrorDetails = 'Success';   
    BEGIN  TRY        
         SELECT TOP (1)   
            US.UserName,  
            US.[Password],  
            US.MobileNumber,  
            US.EmailID,  
            CASE WHEN ISNULL(CE.CorporateID, '') = '' THEN ISNULL(CR.CorporateID, '')   
            ELSE CE.CorporateID END AS CorporateID,  
            CR.CRNumber,  
            CR.CorporateName,  
            CR.JCCICode  
         FROM [coc_Users] US(NOLOCK)          
         LEFT JOIN [coc_Corporates] CR(NOLOCK) ON CR.UserID = US.UserID          
         LEFT JOIN [coc_CorporateUsers] CE(NOLOCK) ON CE.UserID = US.UserID          
         WHERE CR.CRNumber = @CRNumber AND US.IsActive=1 and US.IsDeleted = 0   
    END TRY        
    BEGIN CATCH        
     Set @SpResponseStatus=0;        
     Set @SpResponseMessage='GenericError';        
     Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,   
                           ErrorSeverity :<'+ convert(varchar(500), Error_severity())+'>,   
                           ErrorState : <'+convert(varchar(500), Error_state())+'> ,   
                           ErrorProcedure : <'+Error_procedure() +'> ,  
                           ErrorLine <'+convert(varchar(500), Error_line())+'>   
                           ErrorMessage : <'+ERROR_MESSAGE()+'>';   
    END CATCH  
 END
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_ValidateCRNumber]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_ValidateCRNumber] 
  @Email nvarchar(100)= NULL
 ,@CRNumber nvarchar(20)= NULL
 ,@ErrorMessage [Remark] =null OUTPUT
AS
	SET NOCOUNT ON
BEGIN
if exists(select 1 from coc_Corporates(nolock) where @CRNumber is null or CRNumber=@CRNumber)
begin
SET @ErrorMessage='5'
END

END
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_VerifyConsumer]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[core_usp_VerifyConsumer]  
 @Email [Email] = NULL,  
 @Mobile [Mobile] = NULL,  
 @ErrorMessage [Remark] OUTPUT  
AS  
SET NOCOUNT ON  
BEGIN  
 IF NOT EXISTS (SELECT 1  FROM coc_Consumers(NOLOCK) WHERE IsVerified = 1 AND IsActive = 1 AND IsDeleted = 0 AND ( ( @Email IS NULL OR EmailID = @Email ) OR ( @Mobile IS NULL OR PrimaryMobile = @Mobile ) ) )  
 BEGIN  
  SET @ErrorMessage = '0'  
 END  
 ELSE  
 BEGIN  
  IF NOT EXISTS (SELECT 1  FROM coc_users (NOLOCK) WHERE IsActive = 1 AND IsDeleted = 0 AND ( ( @Email IS NULL OR EmailID = @Email ) OR ( @Email IS NULL OR UserName = @Email ) OR ( @Mobile IS NULL OR MobileNumber = @Mobile ) ) )  
  BEGIN  
   SET @ErrorMessage = '0'  
  END  
  ELSE  
  BEGIN  
   SET @ErrorMessage = '1'  
  END  
 END  
END  
  
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Core_Usp_VerifyCorporateUser]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Core_Usp_VerifyCorporateUser] @Email [Email]        = NULL
,                                                     @Mobile [Mobile]      = NULL
,                                                     @CRNumber nvarchar(20)= NULL
,                                                     @ErrorMessage [Remark] =null OUTPUT
AS
	SET NOCOUNT ON
BEGIN
	-- if (len(@Mobile) <> 14)
	--begin
	-- SET @ErrorMessage='3'  --invalid mobile
	-- return;
	--end

	IF EXISTS (SELECT 1
		FROM coc_Users(NOLOCK)
		WHERE IsActive=0 and Isdeleted = 0 AND (@Email IS NULL OR EmailID=@Email))

	BEGIN

		SET @ErrorMessage='2' --inactive user

	END

	else IF EXISTS (SELECT 1
			FROM coc_Users(NOLOCK)
			WHERE IsActive=0 and IsDeleted = 1 AND (@Email IS NULL OR EmailID=@Email))

		BEGIN

			SET @ErrorMessage='1' --user deleted

		END

		ELSE if not EXISTS (SELECT 1
				FROM coc_Users(NOLOCK)
				WHERE IsActive=1 and IsDeleted = 0 AND (@Email IS NULL OR EmailID=@Email))

			BEGIN

				SET @ErrorMessage='0' -- not exists
				if exists(select 1
					from coc_Corporates(nolock)
					where @CRNumber is null or CRNumber=@CRNumber)
					SET @ErrorMessage='5'
			END

END

	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_usp_VerifyeVoucherBarcode]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================                      
-- Author:  Narender Gorige                     
-- Create date: 07 May 2021                     
-- Description: Verify eVoucher Barcode                      
-- =============================================                    
Create PROCEDURE [dbo].[core_usp_VerifyeVoucherBarcode]                                          
 @Barcode  NVARCHAR(500),                                          
 @LanguageId INTEGER=1,                                       
 @CorporateID BIGINT= NULL,                                      
 @ImpersonationUserID bigint=null,                      
 @SpResponseStatus int = null out,                      
 @SpResponseMessage nvarchar(max) = null out,                      
 @SpErrorDetails nvarchar(max) = null out                      
AS                                          
BEGIN TRY                                         
SET NOCOUNT ON;                  
                  
    DECLARE @Imageurl VARCHAR (100) = ''    
    DECLARE @ChamberLogo VARCHAR(MAX)    
                  
    Set @SpResponseStatus=0;                           
    Set @SpResponseMessage='';                          
    Set @SpErrorDetails='';                     
                  
    IF EXISTS(SELECT EB.EServiceBarcodeID FROM coc_EServiceBarcodes EB (NOLOCK)           
        INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID=NT.NotificationID                       
        INNER JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID=NT.EServiceID          
        WHERE           
        (@corporateID IS  NULL OR EB.CorporateID= @corporateID)           
        AND EB.Barcode=@barcode           
        AND EB.IsUsed = 1           
        AND (ISNULL(EB.ConsumerID,0)>0 or ISNULL(EB.GuestID,0)>0 )         
        AND ES.IsActive = 1           
        AND CONVERT(DATETIME,CONVERT(VARCHAR,GETDATE(),101),101) >=  CONVERT(DATETIME,CONVERT(VARCHAR,ES.FromDate,101),101)           
        AND CONVERT(DATETIME,CONVERT(VARCHAR,GETDATE(),101),101) <=  CONVERT(DATETIME,CONVERT(VARCHAR,ES.ToDate,101),101))                                          
    BEGIN                                           
        Set @SpResponseStatus=0;                           
        Set @SpResponseMessage='UsedBarcodeLbl';                    
        Set @SpErrorDetails='UsedBarcodeLbl';                       
    END                          
    -- If Barcode is not used.                  
    IF (ISNULL(@SpResponseMessage,'') = '')                           
    BEGIN                   
        -- If Barcode is valid.                  
        IF EXISTS(SELECT EServiceBarcodeID FROM coc_EServiceBarcodes EB(NOLOCK)           
            INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID=NT.NotificationID                       
            INNER JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID=NT.EServiceID          
            WHERE (@corporateID IS NULL OR EB.CorporateID= @corporateID)           
            AND EB.Barcode=@barcode           
            AND (ISNULL(EB.ConsumerID,0)>0 OR ISNULL(EB.GuestID,0)>0 )          
            AND ES.IsActive = 1           
            AND CONVERT(DATETIME,CONVERT(VARCHAR,GETDATE(),101),101) >=  CONVERT(DATETIME,CONVERT(VARCHAR,ES.FromDate,101),101)           
            AND CONVERT(DATETIME,CONVERT(VARCHAR,GETDATE(),101),101) <=  CONVERT(DATETIME,CONVERT(VARCHAR,ES.ToDate,101),101))                             
        BEGIN     
            SELECT @ChamberLogo = CH.ChamberLogo    
            FROM coc_EServiceBarcodes(nolock) EB    
            INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID=NT.NotificationID      
            LEFT JOIN coc_ECoupons EC(NOLOCK) ON NT.EServiceID=EC.EServiceID       
            INNER JOIN coc_competition_staging CST ON CST.CompetitionStagingID = EC.ECouponID      
            INNER JOIN coc_Chambers CH ON CH.ChamberID = CST.ChamberId      
            WHERE  eb.Barcode=@barcode  and (@corporateID is  null or eb.CorporateID = @corporateID)     
    
            SELECT                                             
            eb.EServiceBarcodeID,                             
            dbo.udf_StripAllHTML(isnull(evl.ResourceValue,'')) AS Description,                              
            evls.ResourceValue AS VoucherName,                                            
            CONVERT(VARCHAR(30), ev.ExpiryDate ,101) AS ExpiryDate,            
            ev.EVoucherID,                               
            ev.Type,                              
            ev.VoucherTypeID,                              
            ev.PromotionAmount,                              
            ev.VoucherAmount,                              
            ev.OriginalPrice,                              
            ev.DiscountAmount,                              
            ev.PriceAfterDiscount,                              
            ev.DiscountPercentage,                              
            eb.InvoiceAmount,                              
            eb.InvoiceNumber,                              
            eb.IsUsed,                                          
            ev.IsPrinted,                                          
            case when eb.ConsumerID is not null then  cs.FirstName else g.FullName end as FirstName,                                          
            cs.SecondName,                                          
            eb.Barcode,                                          
            crs.FirstName AS CorporateFirstName,                                          
            evl.LanguageID,                                          
            crs.CorporateName,                                          
            isnull(crs.MerchantCode,'') as MerchantCode,                                          
            '' as Distributor,                                      
            ev.VoucherType, --ev.OriginalPrice- ev.PriceAfterDiscount as DiscountAmount,                                      
            @Imageurl AS ImageUrl,                        
            isnull(eb.PromoCodeID,0) AS VoucherPromoCodeID,                        
            isnull(eb.ExtraDiscount,0.00) As PromoCodePercent,                        
            (isnull(ev.DiscountPercentage,0)+isnull(eb.ExtraDiscount,0)) As TotalDiscountPercent,                    
            ccp.PromoCode AS PromoCode,                        
            0.00 AS PromoCodeDiscount,                
            eb.ConsumerID,                
            g.GuestID,                
            eb.EServiceBarcodeID,                
            esrs.EServiceID,    
            @ChamberLogo AS ChamberLogo      
            FROM coc_EServiceBarcodes(nolock) eb                    
            INNER JOIN coc_EVoucher(nolock) ev ON eb.EVoucherID=ev.EVoucherID AND ev.IsActive = 1                                            
            INNER JOIN coc_EVoucherLanguages(nolock) evl ON evl.EVoucherID=ev.EVoucherID AND evl.LanguageID = @languageId AND               
            evl.ResourceKey = 'Description'               
            INNER JOIN coc_EVoucherLanguages(nolock) evls ON evls.EVoucherID=ev.EVoucherID AND evls.LanguageID = @languageId AND               
            evls.ResourceKey = 'VoucherName'                                          
            LEFT JOIN coc_Consumers(nolock) cs ON cs.ConsumerID=eb.ConsumerID                                          
            LEFT JOIN coc_Guests(nolock) g ON g.GuestID =eb.GuestID                                          
            INNER JOIN coc_EServices(nolock) esrs ON esrs.EServiceID=ev.EServiceID                                          
            INNER JOIN coc_Corporates(nolock) crs ON crs.CorporateID=esrs.CorporateID                      
            left join coc_core_PromoCodes(nolock) ccp on ccp.PromoCodeID=eb.PromoCodeID      
            WHERE  eb.Barcode=@barcode  and (@corporateID is  null or eb.CorporateID = @corporateID)                  
   
            Set @SpResponseStatus=1;                           
            Set @SpResponseMessage='Success';                          
            Set @SpErrorDetails='Success';                     
        END                                    
        ELSE                                          
        BEGIN                         
            Set @SpResponseStatus=0;                           
            Set @SpResponseMessage='InvalidBarcodeLbl';                          
            Set @SpErrorDetails='InvalidBarcodeLbl';                     
        END                         
    END                  
END TRY                    
BEGIN CATCH                            
    Set @SpResponseStatus=0;                           
    Set @SpResponseMessage='GenericError';                          
    Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>,               
    ErrorSeverity : <'+ ERROR_SEVERITY()+'>,               
    ErrorState : <'+ERROR_STATE()+'> ,               
    ErrorProcedure : <'+ERROR_PROCEDURE()+'> ,               
    ErrorLine <'+ERROR_LINE()+'>               
    ErrorMessage : <'+ERROR_MESSAGE()+'>';                  
END CATCH                                      
SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[core_usp_VerifyOTPConfirmConsumer]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_usp_VerifyOTPConfirmConsumer]   
 @ConsumerName [Name]=NULL,    
 @MobileNo [Mobile],    
 @Password NVARCHAR(125),    
 @VerificationCode [NullPin],    
 @ConsumerID INTEGER OUTPUT,    
 @ErrorMessage [Remark] OUTPUT     
AS     
SET NOCOUNT ON    
 DECLARE @IsVerified BIT=0    
 DECLARE @EmailID [Email]    
 DECLARE @UserID INTEGER    
 DECLARE @OtpID INTEGER    
    
 SET @ErrorMessage = ''    
 BEGIN TRY    
  SELECT @OtpID= OtpID FROM coc_OTP(NOLOCK) WHERE Otp=@VerificationCode    
    
  IF EXISTS(SELECT  NULL FROM [COC_Consumers](NOLOCK) WHERE PrimaryMobile = @MobileNo AND OtpID=@OtpID)--FirstName = @ConsumerName AND     
  BEGIN    
   SELECT  @IsVerified=ISNULL(IsVerified,0),@ConsumerID=ConsumerID,@EmailID=EmailID     
    FROM [COC_Consumers](NOLOCK)     
     WHERE PrimaryMobile = @MobileNo AND OtpID=@OtpID   --FirstName = @ConsumerName AND     
   IF(@IsVerified=0)    
   BEGIN    
    UPDATE [COC_Consumers]    
     SET IsVerified=1, VerificationDate=GETDATE()    
    WHERE  PrimaryMobile = @MobileNo AND OtpID=@OtpID --FirstName = @ConsumerName AND    
    
    IF EXISTS (SELECT USERID FROM [COC_Consumers](NOLOCK) WHERE ConsumerID = @ConsumerID AND USERID IS NULL)     
    BEGIN    
     INSERT INTO [COC_Users](UserName,Password,RoleID,MobileNumber,EmailID,PhoneNumber,ResetRequired,IsActive,CreatedDate)    
      SELECT @EmailID,@Password,5,@MobileNo,@EmailID,@MobileNo,0,1,GETDATE()      
     SET @UserID=SCOPE_IDENTITY()    
    
     UPDATE [COC_Consumers]    
     SET UserID = @UserID    
     WHERE ConsumerID=@ConsumerID    
    END    
   END    
   ELSE    
   BEGIN    
    SET @ErrorMessage = 'RegistrationalreadyVerified'   
	SET @ConsumerID=(SELECT  ConsumerID FROM [COC_Consumers](NOLOCK) WHERE PrimaryMobile = @MobileNo and  EmailID  = @ConsumerName and IsActive=1) --this line of code added for new design
   END    
  END    
  ELSE    
  BEGIN    
   SET @ErrorMessage = 'InvalidVerificationCode'  
   	SET @ConsumerID=(SELECT  ConsumerID FROM [COC_Consumers](NOLOCK) WHERE PrimaryMobile = @MobileNo and  EmailID  = @ConsumerName and IsActive=1) --this line of code added for new design
  END    
  IF(@ErrorMessage='' AND @ConsumerID <> 0)
  BEGIN
   UPDATE coc_Consumers  set IsMobileVerified=1 where ConsumerID=@ConsumerID
  END      
 END TRY    
 BEGIN CATCH             
  SELECT @ErrorMessage=ERROR_MESSAGE()    
  RAISERROR(@ErrorMessage, 16, 1);       
 END CATCH    
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_USP_Web_GetCorporateDetailsByEmail]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_USP_Web_GetCorporateDetailsByEmail]    
 @EmailID NVARCHAR(500)  
,@IsNewCorporateRegister bit =NULL 
,@LanguageID INTEGER=1             
,@UserID bigint                  =  NULL            
,@RoleID bigint                  =  NULL            
,@ImpersonationUserID bigint     =  null            
,@SpResponseStatus int             out           
,@SpResponseMessage nvarchar(max)  out            
,@SpErrorDetails nvarchar(max)      out
AS        
 SET NOCOUNT ON          
BEGIN  TRY
if(Isnull(@IsNewCorporateRegister,0)=1)
begin
SELECT 
	top 1
	CorporateID  
	,JCCICode  
	,CRNumber  
	,EmailID  
	,MobileNumber  
	,UserID  
	,IsActive  
  from coc_Corporates where EmailID =@EmailID 
 END
else
begin 
SELECT 
	top 1
	CorporateID  
	,JCCICode  
	,CRNumber  
	,EmailID  
	,MobileNumber  
	,UserID  
	,IsActive  
	 from coc_Corporates where EmailID =@EmailID  
	and IsActive=1  
end
 Set @SpResponseStatus=1;            
 Set @SpResponseMessage='Success';            
 Set @SpErrorDetails='Success';  
   
 END TRY    
 BEGIN CATCH            
 Set @SpResponseStatus=0;            
 Set @SpResponseMessage='GenericError';            
 Set @SpErrorDetails ='ErrorNumber';            
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,           
 ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>,          
 ErrorState : <'+convert(varchar(500), Error_state())+'> ,           
 ErrorProcedure : <'+Error_procedure() +'> ,          
 ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';            
 END CATCH  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[core_USP_Web_IsValidToken]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[core_USP_Web_IsValidToken]
 @LanguageID int = 1    
,@Token NVARCHAR(500)             
,@SpResponseStatus int            = null OUTPUT    
,@SpResponseMessage nvarchar(max) = null OUTPUT    
,@SpErrorDetails nvarchar(max)    = null OUTPUT    
AS    
 SET NOCOUNT ON      
BEGIN  TRY    
 SELECT TOP (1) US.UserID                                                              
 ,              UserName                                                               
 ,              US.[Password]                                                          
 ,              US.IsActive                                                            
 ,              RoleID                                                                 
 ,              US.MobileNumber                                                        
 ,              US.EmailID                                                             
 ,              LS.LoginTime                                                           
 ,              CASE WHEN ISNULL(CE.CorporateID, '') = '' THEN ISNULL(CR.CorporateID, '')      
                                                          ELSE CE.CorporateID END CorporateID      
 ,              CR.CRNumber                                                            
 ,              CR.CorporateName                                                       
 ,              cr.JCCICode                                                            
 ,              US.ResetRequired                                                       
 ,              ISNULL(CS.ConsumerID, 0)                                          [ConsumerID]      
 ,              ISNULL(CS.IsVerified,1)                                           [IsVerified]      
 ,              CS.OtpID                                                          [VerificationCode]      
 ,              (CASE WHEN ROLEID = 3 THEN ISNULL(CR.FirstName, isnull(CR.CorporateName,''))      
                                      ELSE CASE WHEN ROLEID = 1 THEN ISNULL(US.FullName, '')      
                                      ELSE ISNULL(CS.FirstName, '') end END ) FirstName      
 ,              COALESCE(CS.FullName, CS.FirstName,CS.SecondName,CS.FamilyName) FullName      
 ,              ISNULL(CU.EmployeeName, '')                                       EmployeeName      
 ,              CASE WHEN ROLEID = 3 THEN CA.City      
                                     ELSE CL.City END                             [City]      
 ,              CASE WHEN ROLEID = 3 THEN SG.Country      
                                     ELSE CG.Country END                          [Country]      
 ,              CASE WHEN ISNULL(CS.Address1, '') = '' THEN 'Address'      
                                                       ELSE CS.Address1 END       Address1      
 ,              CASE WHEN ROLEID = 3 THEN ISNULL(CR.LastName, '')      
                                     ELSE CS.FamilyName END                       [FamilyName]      
 ,              CR.LogoFile                                                            
 ,              (select count(*) as NotificationCount      
 from (      
  SELECT CN.HasChecked ,ISNULL(ES.CompetitionID,0) CompetitionID      
 --, Case when (ISNULL(ES.CompetitionID,0)= 43 and ISNULL(NL.[Message],'') not like '%@barcode%') or EB.Barcode IS null THEN 'B'   else 'Q' END BarcodeType      
 , CO.LogoFile        
 FROM       coc_ConsumerNotifications(NOLOCK)             CN      
 INNER JOIN coc_Consumers (NOLOCK)                CU ON CU.ConsumerID=CN.ConsumerID      
 INNER JOIN coc_NotificationSends(NOLOCK)         NS ON CN.NotificationSendID=NS.NotificationSendID      
 INNER JOIN coc_NotificationSendLanguages(NOLOCK) NL ON NL.NotificationSendID=CN.NotificationSendID AND LanguageID=1 --AND SendingType != 4      
 INNER JOIN coc_Notifications(NOLOCK)             NT ON NT.NotificationID=NS.NotificationID      
 --LEFT JOIN  coc_EServiceBarcodes(NOLOCK)          EB ON EB.NotificationID=NS.NotificationID AND CN.ConsumerID=EB.ConsumerID AND EB.ConsumerNotificationID=CN.ConsumerNotificationID      
 LEFT JOIN  coc_EServices(NOLOCK)                 ES ON ES.EServiceID=NT.EServiceID      
 LEFT JOIN  coc_corporates(NOLOCK)                CO ON CO.CorporateID =ES.CorporateID      
 WHERE ISNULL(CN.ConsumerID,0)=CS.ConsumerID) as a      
 where a.HasChecked=0)NotificationCount      
 FROM      [coc_Users]            US(NOLOCK)      
 LEFT JOIN [coc_LoginUsers]       LS(NOLOCK) ON LS.UserID = US.UserID AND LS.UserID IS NOT NULL      
 LEFT JOIN [coc_Corporates]       CR(NOLOCK) ON CR.UserID = US.UserID      
 LEFT JOIN [coc_CorporateUsers]   CE(NOLOCK) ON CE.UserID = US.UserID      
 LEFT JOIN [coc_Consumers]        CS(NOLOCK) ON CS.UserID = US.UserID      
 LEFT JOIN [coc_CorporateUsers]   CU(NOLOCK) ON CU.UserID = US.UserID      
 LEFT JOIN [coc_CityLanguages]    CL(NOLOCK) ON CS.CityID = CL.CityID  AND CL.LanguageID = 1      
 LEFT JOIN [coc_CountryLanguages] CG(NOLOCK) ON CS.CountryID = CG.CountryID  AND CG.LanguageID = 1      
 LEFT JOIN [coc_CityLanguages]    CA(NOLOCK) ON CR.CityID = CA.CityID  AND CA.LanguageID = 1      
 LEFT JOIN [coc_CountryLanguages] SG(NOLOCK) ON CR.CountryID = SG.CountryID  AND SG.LanguageID = 1      
 WHERE US.UserToken=@Token    
 set @SpResponseStatus =1;      
 set @SpResponseMessage = 'Success';      
 set @SpErrorDetails = 'Success';   
 END TRY    
 BEGIN CATCH    
 Set @SpResponseStatus=0;    
 Set @SpResponseMessage='GenericError';    
 Set @SpErrorDetails ='ErrorNumber';    
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500),  
 Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),  
 Error_severity())+'>, ErrorState : <'+convert(varchar(500),  
 Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> ,  
 ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';    
    
 END CATCH
GO
/****** Object:  StoredProcedure [dbo].[core_USP_Web_IsValidUser]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[core_USP_Web_IsValidUser]
 @LanguageID int = 1    
,@UserName NVARCHAR(500)             
,@SpResponseStatus int            = null OUTPUT    
,@SpResponseMessage nvarchar(max) = null OUTPUT    
,@SpErrorDetails nvarchar(max)    = null OUTPUT    
AS    
 SET NOCOUNT ON      
BEGIN  TRY    
 SELECT TOP (1) US.UserID                                                              
 ,              UserName                                                               
 ,              US.[Password]                                                          
 ,              US.IsActive                                                            
 ,              RoleID                                                                 
 ,              US.MobileNumber                                                        
 ,              US.EmailID                                                             
 ,              LS.LoginTime                                                           
 ,              CASE WHEN ISNULL(CE.CorporateID, '') = '' THEN ISNULL(CR.CorporateID, '')      
                                                          ELSE CE.CorporateID END CorporateID      
 ,              CR.CRNumber                                                            
 ,              CR.CorporateName                                                       
 ,              cr.JCCICode                                                            
 ,              US.ResetRequired                                                       
 ,              ISNULL(CS.ConsumerID, 0)                                          [ConsumerID]      
 --,              ISNULL(CS.IsVerified,1)                                           [IsVerified] 
 ,              1                                                                   [IsVerified]      
 ,              CS.OtpID                                                          [VerificationCode]      
 ,              (CASE WHEN ROLEID = 3 THEN ISNULL(CR.FirstName, isnull(CR.CorporateName,''))      
                                      ELSE CASE WHEN ROLEID = 1 THEN ISNULL(US.FullName, '')      
                                      ELSE ISNULL(CS.FirstName, '') end END ) FirstName      
 ,              COALESCE(CS.FullName, CS.FirstName,CS.SecondName,CS.FamilyName) FullName      
 ,              ISNULL(CU.EmployeeName, '')                                       EmployeeName      
 ,              CASE WHEN ROLEID = 3 THEN CA.City      
                                     ELSE CL.City END                             [City]      
 ,              CASE WHEN ROLEID = 3 THEN SG.Country      
                                     ELSE CG.Country END                          [Country]      
 ,              CASE WHEN ISNULL(CS.Address1, '') = '' THEN 'Address'      
                                                       ELSE CS.Address1 END       Address1      
 ,              CASE WHEN ROLEID = 3 THEN ISNULL(CR.LastName, '')      
                                     ELSE CS.FamilyName END                       [FamilyName]      
 ,              CR.LogoFile                                                            
 ,              (select count(*) as NotificationCount      
 from (      
  SELECT CN.HasChecked ,ISNULL(ES.CompetitionID,0) CompetitionID      
 --, Case when (ISNULL(ES.CompetitionID,0)= 43 and ISNULL(NL.[Message],'') not like '%@barcode%') or EB.Barcode IS null THEN 'B'   else 'Q' END BarcodeType      
 , CO.LogoFile        
 FROM       coc_ConsumerNotifications(NOLOCK)             CN      
 INNER JOIN coc_Consumers (NOLOCK)                CU ON CU.ConsumerID=CN.ConsumerID      
 INNER JOIN coc_NotificationSends(NOLOCK)         NS ON CN.NotificationSendID=NS.NotificationSendID      
 INNER JOIN coc_NotificationSendLanguages(NOLOCK) NL ON NL.NotificationSendID=CN.NotificationSendID AND LanguageID=1 --AND SendingType != 4      
 INNER JOIN coc_Notifications(NOLOCK)             NT ON NT.NotificationID=NS.NotificationID      
 --LEFT JOIN  coc_EServiceBarcodes(NOLOCK)          EB ON EB.NotificationID=NS.NotificationID AND CN.ConsumerID=EB.ConsumerID AND EB.ConsumerNotificationID=CN.ConsumerNotificationID      
 LEFT JOIN  coc_EServices(NOLOCK)                 ES ON ES.EServiceID=NT.EServiceID      
 LEFT JOIN  coc_corporates(NOLOCK)                CO ON CO.CorporateID =ES.CorporateID      
 WHERE ISNULL(CN.ConsumerID,0)=CS.ConsumerID) as a      
 where a.HasChecked=0)NotificationCount      
 FROM      [coc_Users]            US(NOLOCK)      
 LEFT JOIN [coc_LoginUsers]       LS(NOLOCK) ON LS.UserID = US.UserID AND LS.UserID IS NOT NULL      
 LEFT JOIN [coc_Corporates]       CR(NOLOCK) ON CR.UserID = US.UserID      
 LEFT JOIN [coc_CorporateUsers]   CE(NOLOCK) ON CE.UserID = US.UserID      
 LEFT JOIN [coc_Consumers]        CS(NOLOCK) ON CS.UserID = US.UserID      
 LEFT JOIN [coc_CorporateUsers]   CU(NOLOCK) ON CU.UserID = US.UserID      
 LEFT JOIN [coc_CityLanguages]    CL(NOLOCK) ON CS.CityID = CL.CityID  AND CL.LanguageID = 1      
 LEFT JOIN [coc_CountryLanguages] CG(NOLOCK) ON CS.CountryID = CG.CountryID  AND CG.LanguageID = 1      
 LEFT JOIN [coc_CityLanguages]    CA(NOLOCK) ON CR.CityID = CA.CityID  AND CA.LanguageID = 1      
 LEFT JOIN [coc_CountryLanguages] SG(NOLOCK) ON CR.CountryID = SG.CountryID  AND SG.LanguageID = 1      
 WHERE (US.EmailID = @UserName  OR US.MobileNumber = @UserName  OR CR.CRNumber = @UserName )  AND US.IsActive=1 and us.IsDeleted = 0      
 set @SpResponseStatus =1;      
 set @SpResponseMessage = 'Success';      
 set @SpErrorDetails = 'Success';   
 END TRY    
 BEGIN CATCH    
 Set @SpResponseStatus=0;    
 Set @SpResponseMessage='GenericError';    
 Set @SpErrorDetails ='ErrorNumber';    
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500),  
 Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),  
 Error_severity())+'>, ErrorState : <'+convert(varchar(500),  
 Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> ,  
 ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';    
    
 END CATCH
GO
/****** Object:  StoredProcedure [dbo].[core_usp_WebserviceGenerateOTP]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Proc [dbo].[core_usp_WebserviceGenerateOTP]  
(    
   @OtpTypeID int ,  
   @OtpID int OUT, 
   @OTPValue int OUT
)    
as  
begin    
 --DECLARE @OtpID INTEGER = NULL   
 DECLARE @Otp INTEGER = NULL              
 DECLARE @LanguageID INTEGER              
 DECLARE @Upper INTEGER = 1000              
 DECLARE @Lower INTEGER = 9999              
 DECLARE @Minutes INTEGER              
  /*OtyTypeID : 1 for New Registration verification,           
                2 for New Registration Resend OTPverification ,           
                3 for ForgOTPassword OTP verification,           
                4 for ResendForgOTPassword OTP verification*/          
 SELECT @LanguageID = LanguageID              
 FROM coc_Languages(NOLOCK)              
 WHERE IsDefaultLanguage = 1              
              
 SELECT @Otp = ROUND(((@Upper - @Lower - 1) * RAND() + @Lower), 0)              
              
 SELECT @Minutes = SetupValue              
 FROM COC_SystemSetups(NOLOCK)              
 WHERE SystemSetupID = 504   
 IF ISNULL(@OtpID, 0) = 0              
 BEGIN              
  INSERT INTO coc_OTP (OtpTypeID,Otp,OTPDate,OtpExpity,IsActive)              
  SELECT @OtpTypeID,@Otp,GETDATE(),DATEADD(minute, @Minutes, GETDATE()),1;          
            
  SET @OtpID = SCOPE_IDENTITY();    
  SELECT @OtpID as OtpID ,(select Otp from coc_OTP where OtpID=@OtpID) as  OTPValue
 end   
END
GO
/****** Object:  StoredProcedure [dbo].[DeleteBarcodeGeneration]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DeleteBarcodeGeneration]
	@CorporateID INTEGER,
	@ServiceID INTEGER,
	@NoOfBarcodes INTEGER,
	@NotificationID INTEGER,
	@ErrorMessage [Remark] OUTPUT 
AS 
SET NOCOUNT ON
	BEGIN TRY  
	 DECLARE @BarCodeCount INTEGER
	 BEGIN TRANSACTION TRN_DeleteBarcodes
		SELECT @BarCodeCount=COUNT(EServiceBarcodeID) FROM coc_EServiceBarcodes (NOLOCK)
			WHERE NotificationID=@NotificationID AND CorporateID=@CorporateID AND CanDelete=1 AND IsUsed=0

		IF(@BarCodeCount>0)
		BEGIN
			DELETE FROM coc_EServiceBarcodes
				WHERE NotificationID=@NotificationID AND CorporateID=@CorporateID AND CanDelete=1 AND IsUsed=0
			UPDATE coc_EServiceInvoices
			SET IsBarcodeGenerated = 0
			WHERE EServiceID = @ServiceID --AND NotificationCount = @NoOfBarcodes

			SET @ErrorMessage =''
		END
		ELSE 
		BEGIN
			SET @ErrorMessage ='Used barcodes cannot be deleted'
		END
	 COMMIT TRANSACTION TRN_DeleteBarcodes
	END TRY
	BEGIN CATCH									
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);			
	END CATCH
SET NOCOUNT OFF








GO
/****** Object:  StoredProcedure [dbo].[DeleteEBundle]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DeleteEBundle] 
	@EBundleId INTEGER,
	@ReturnValue [Remark] OUTPUT
AS
BEGIN
	
	SET NOCOUNT ON;

    BEGIN TRY

		IF(NOT EXISTS(SELECT * FROM coc_EVoucherBundleDistribution evbd (NOLOCK)
		INNER JOIN coc_EVoucherBundle evb (NOLOCK) ON evb.EBundleID = @EBundleId
		 WHERE evbd.EVoucherBundleID=evb.EVoucherBundleID))
		BEGIN
				DELETE eva FROM coc_EVoucherApproval eva (NOLOCK) INNER JOIN coc_EVoucherBundle evb (NOLOCK) ON evb.EBundleID = @EBundleId WHERE eva.EVoucherBundleID=evb.EVoucherBundleID
					DELETE FROM coc_EVoucherBundle WHERE EBundleID=@EBundleId
					DELETE FROM coc_EBundleLanguages WHERE EBundleID=@EBundleId
					DELETE FROM coc_EBundle WHERE EBundleID=@EBundleId
		END
		ELSE
		BEGIN
			SELECT @ReturnValue= '-505'
		END
		
	END TRY
	BEGIN CATCH
		SELECT @ReturnValue= ERROR_MESSAGE()
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[DeleteECouponDraw]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DeleteECouponDraw]
	@DrawID INTEGER
	AS
BEGIN
	SET NOCOUNT ON
		DELETE FROM coc_ECouponDrawPrizes WHERE ECouponDrawID = @DrawID
		--DELETE FROM coc_ECouponDrawRetailOutlets WHERE ECoponDrawID = @DrawID
		DELETE FROM coc_ECouponDrawLanguages WHERE ECouponDrawID = @DrawID
		DELETE FROM coc_ECouponDraw WHERE ECouponDrawID = @DrawID
	SET NOCOUNT OFF
END

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------


GO
/****** Object:  StoredProcedure [dbo].[DeleteECouponPrize]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DeleteECouponPrize]
	@PrizeID INTEGER
	AS
BEGIN
	SET NOCOUNT ON
		DELETE FROM coc_ECouponPrizesLanguages WHERE ECouponPrizeID = @PrizeID
		DELETE FROM coc_ECouponPrizes WHERE ECouponPrizeID = @PrizeID
	SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[DeleteEcouponVoucherSending]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	Arya
-- Create date	:	20-12-2017
-- Description	:	DELETE ECOUPON VOUCHER SENDING  
-- =============================================

CREATE PROCEDURE [dbo].[DeleteEcouponVoucherSending]
@ECouponVoucherID	INTEGER
AS
	BEGIN
		DELETE		
		FROM		coc_ECouponVoucherSending
		WHERE		ECouponVoucherID = @ECouponVoucherID
	END
GO
/****** Object:  StoredProcedure [dbo].[DeleteEServiceAddOn]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	Arya
-- Create date	:	29-12-2017
-- Description	:	DELETE ESERVICE ADDON  
-- =============================================

CREATE PROCEDURE [dbo].[DeleteEServiceAddOn]
@EServiceAddOnId	INTEGER
AS
	BEGIN
		DELETE		
		FROM		coc_eServiceAddOn
		WHERE		EServiceAddOnId = @EServiceAddOnId
	END
GO
/****** Object:  StoredProcedure [dbo].[DeleteEVoucherBundleDetails]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DeleteEVoucherBundleDetails] 
	@EVoucherBundleId INTEGER,
	@ReturnValue [Remark] OUTPUT
AS
BEGIN
	
	SET NOCOUNT ON;

    BEGIN TRY
		IF(NOT EXISTS(SELECT * FROM coc_EVoucherBundleDistribution (NOLOCK) WHERE EVoucherBundleID=@EVoucherBundleId))
		BEGIN
			DELETE FROM coc_EVoucherApproval WHERE EVoucherBundleID=@EVoucherBundleId
			DELETE FROM coc_EVoucherBundle WHERE EVoucherBundleID=@EVoucherBundleId
			
		END
		ELSE
		BEGIN
			SELECT @ReturnValue= '-505'
		END
		
	END TRY
	BEGIN CATCH
		SELECT @ReturnValue= ERROR_MESSAGE()
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[DeleteEVoucherBundleDistribution]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DeleteEVoucherBundleDistribution] 
	@EVoucherBundleDistributionId INTEGER,
	@ReturnValue [Remark] OUTPUT
AS
BEGIN
	
	SET NOCOUNT ON;

    BEGIN TRY
		
		IF(NOT EXISTS(SELECT * FROM coc_EVoucherBundleDistributionQRCode (NOLOCK) WHERE EVoucherBundleDistributionID=@EVoucherBundleDistributionId))
		BEGIN
			DELETE FROM coc_EVoucherBundleDistribution WHERE EVoucherBundleDistributionID=@EVoucherBundleDistributionId
		END
		ELSE
		BEGIN
			SELECT @ReturnValue= '-505'
		END
	END TRY
	BEGIN CATCH
		SELECT @ReturnValue= ERROR_MESSAGE()
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[DeleteEVoucherBundleQRCode]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DeleteEVoucherBundleQRCode] 
	@EVoucherBundleQRCodeID INTEGER,
	@ReturnValue [Remark] OUTPUT
AS
BEGIN
	
	SET NOCOUNT ON;

    BEGIN TRY
			DELETE FROM coc_EVoucherBundleQRCode WHERE EVoucherBundleQRCodeID=@EVoucherBundleQRCodeID
	END TRY
	BEGIN CATCH
		SELECT @ReturnValue= ERROR_MESSAGE()
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[DeleteServiceTaskNotification]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DeleteServiceTaskNotification]
@NotificationID int
AS

UPDATE coc_ServiceTaskNotification SET RowStatus = 0 where Id = @notificationID
GO
/****** Object:  StoredProcedure [dbo].[DeleteView]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DeleteView]
	@ViewID INTEGER,
	@ReturnValue [Remark] OUTPUT
AS
	SET NOCOUNT ON
		BEGIN TRY
		BEGIN TRANSACTION TRN_DeleteView
			IF EXISTS( SELECT NULL FROM coc_ScreenViews (NOLOCK) WHERE ScreenViewID=@ViewID AND IsSystem=1)
			BEGIN
				SET @ReturnValue='System view cannot be deleted'
			END
			ELSE
			BEGIN
				DELETE FROM coc_ScreenViewColumns WHERE ScreenViewID=@ViewID
				DELETE FROM coc_Resources WHERE ScreenViewID=@ViewID 
				DELETE FROM coc_ScreenViews WHERE ScreenViewID=@ViewID
				SET @ReturnValue=''
			END
		COMMIT TRANSACTION TRN_DeleteView
		END TRY
		BEGIN CATCH
			SELECT @ReturnValue= ERROR_MESSAGE()
			ROLLBACK TRANSACTION TRN_DeleteView
		END CATCH
	SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[DeleteVoucherImage]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author					:	Vikram
-- Create date				:	01-Dec-2017
-- Description				:	Delete Image from Vocher Images
-- =============================================
CREATE PROCEDURE [dbo].[DeleteVoucherImage]
	@EVoucherImagesID			INTEGER,
	@EVoucherID					INTEGER,
	@IsPrimaryImage				INTEGER,
	@EditedUserID				INTEGER

AS
BEGIN

	SET NOCOUNT ON;

		DECLARE	@NxtPrimaryImage INTEGER = 0;

		BEGIN
			
			IF(@IsPrimaryImage	=	1	)
				BEGIN
					SELECT
						@NxtPrimaryImage		=	MAX(EVoucherImagesID)
					FROM
						coc_EVoucherImages (NOLOCK)
					WHERE
						EVoucherID				=	@EVoucherID		AND
						EVoucherImagesID		<>	@EVoucherImagesID
				END
			ELSE
				BEGIN
					SET	@NxtPrimaryImage		=	@EVoucherImagesID
				END

			BEGIN
				DELETE
				FROM
					coc_EVoucherImages
				WHERE
					EVoucherImagesID			=	@EVoucherImagesID


				UPDATE
					coc_EVoucherImages SET
					IsPrimaryImage				=	1
				WHERE
					EVoucherImagesID			=	@NxtPrimaryImage

			END
			
		END

END
GO
/****** Object:  StoredProcedure [dbo].[DisplayCompetiotion]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE PROCEDURE [dbo].[DisplayCompetiotion]  
	@ConsumerID INTEGER,
	@LanguageID INTEGER
AS
	SET NOCOUNT ON
		BEGIN
			SELECT ROW_NUMBER() OVER(ORDER BY ECouponParticipationID)id,EP.ECouponParticipationID,EP.ECouponID,CO.CorporateID,
					--CO.CRNumber,
					'--' as CRNumber,
					ES.ServiceNumber,CONVERT(NVARCHAR(12),EP.ParticipationDate,106)[ParticipationDate],EP.ConsumerID,
					EL.EService,EV.BaseValue,CONVERT(NVARCHAR(12),ES.FromDate,106)[FromDate],CONVERT(NVARCHAR(12),ES.ToDate,106)[ToDate],CONVERT(NVARCHAR(12),EC.ResultDate,106)[ResultDate] 
				FROM coc_ECouponParticipations EP(NOLOCK)
					 LEFT JOIN coc_ECoupons EC(NOLOCK) ON EC.ECouponID=EP.ECouponID
					 LEFT JOIN coc_EnumValues EV(NOLOCK) ON EV.EnumValueID=EC.EntryTypeID AND EnumID=4
					 LEFT JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID=EC.EServiceID 
					 INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON EL.EServiceID=ES.EServiceID AND EL.LanguageID=@LanguageID
					 LEFT JOIN coc_Corporates CO(NOLOCK) ON CO.CorporateID=ES.CorporateID
				WHERE EP.ConsumerID=@ConsumerID
		END
	SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[DisplayCompetitionList]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DisplayCompetitionList]   
  
 @CompetitionID INTEGER=NULL,    
  
 @CorporateID INTEGER=NULL,   
  
 @MessagePackID INTEGER=NULL,   
  
 @KioskMachineID BIT=NULL,   
  
 @NonMembersAllowedID BIT=NULL,   
  
 @ResultDateOne DATETIME=NULL,  
  
 @ResultDateTwo DATETIME=NULL,  
  
 @FromDate DATETIME=NULL,  
  
 @ToDate DATETIME=NULL,  
  
 @IsActive BIT=NULL,    
  
 @LanguageID INTEGER=1  
  
AS  
  
 SET NOCOUNT ON  
  
  BEGIN  

  if @CorporateID =0
  begin
  set @CorporateID=null
  end
  
   SELECT ROW_NUMBER() OVER(ORDER BY ES.EServiceID) AS S_NO, ES.EServiceID,EI.InvoiceNumber [Invoice Number],EL.EService [Competition Name],MT.MessagePackType [Package],EV.BaseValue [Competition Type],CONVERT(NVARCHAR(12),ES.FromDate,106)[Start Date],  
  
     CONVERT(NVARCHAR(12),ES.ToDate,106)[End Date],CONVERT(NVARCHAR(12),EC.ResultDate,106) [Result Date],CASE  WHEN EC.ParticipationByKiosk=1 THEN 'YES' ELSE 'NO' END [Entry By Kiosk],CASE WHEN EC.MemberOnly=1 THEN 'YES' ELSE 'NO'END [Entry By Website],EI
  
.NotificationCount [No of Notifications],--EC.WinnerCount [No of Winners]   
(select count(*) from coc_ECouponWinners(NOLOCK) where ECouponPrizeID in (select ECouponPrizeID from coc_ECouponPrizes(NOLOCK) where ECouponID=EC.ECouponID ))[No of Winners]   
  
    FROM [coc_EServices](NOLOCK)ES  
  
     LEFT JOIN [coc_EServiceInvoices]EI(NOLOCK) ON EI.EServiceID =ES.EServiceID   
  
     LEFT JOIN [coc_EServiceLanguages]EL(NOLOCK) ON EL.EServiceID=ES.EServiceID and EL.LanguageID=@LanguageID    
  
     LEFT JOIN [coc_MessagePackTypes]MT(NOLOCK) ON MT.MessagePackTypeID =ES.MessagePackTypeID   
  
     LEFT JOIN [coc_EnumValues]EV(NOLOCK) ON EV.EnumValueID =ES.CompetitionID  
  
     LEFT JOIN [coc_ECoupons]EC(NOLOCK) ON EC.EServiceID=ES.EServiceID    
  
     LEFT JOIN [coc_Corporates]CO(NOLOCK) ON CO.CorporateID =ES.CorporateID  
  
       
  
     --LEFT JOIN [coc_Notifications]NS(NOLOCK) ON NS.EServiceID=ES.EServiceID  
  
    WHERE (@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID)   
  
     AND(@CorporateID IS NULL OR CO.CorporateID=@CorporateID)    
  
     AND(@KioskMachineID IS NULL OR EC.ParticipationByKiosk =@KioskMachineID)   
  
     AND(@ResultDateOne IS NULL OR(EC.ResultDate BETWEEN @ResultDateOne AND @ResultDateTwo))  
  
     AND(@FromDate IS NULL OR (ES.FromDate >=@FromDate AND ES.ToDate <=@ToDate))  
  
     AND(@NonMembersAllowedID IS NULL OR EC.MemberOnly =@NonMembersAllowedID)   
  
     AND(@MessagePackID IS NULL OR MT.MessagePackTypeID=@MessagePackID)    
  
     AND(@IsActive IS NULL OR ES.IsActive=@IsActive)    
  
     AND(@LanguageID IS NULL OR EL.LanguageID=@LanguageID)    
  
  
  
   SELECT ROW_NUMBER() OVER(ORDER BY ES.EServiceID) AS S_NO, ES.EServiceID,RL.RetailOutlet [Retail Outlet Name],RO.Location [Retail Outlet Location],RO.Address1 [Address]  
  
    FROM [coc_EServices](NOLOCK)ES   
  
     INNER JOIN [coc_EServiceLocations]LE(NOLOCK) ON LE.EServiceID=ES.EServiceID   
  
     INNER JOIN [coc_RetailOutlets]RO(NOLOCK) ON RO.RetailOutletID=LE.RetailOutletID AND RO.CorporateID=ES.CorporateID  
  
     INNER JOIN [coc_RetailOutletLanguages]RL(NOLOCK) ON RL.RetailOutletID=RO.RetailOutletID  AND RL.LanguageID=@LanguageID  
  
     --INNER JOIN [coc_Corporates]CO(NOLOCK) ON CO.CorporateID =RO.CorporateID     
  
    WHERE (@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID)   
  
     AND(@CorporateID IS NULL OR ES.CorporateID=@CorporateID)    
  
     AND(@FromDate IS NULL OR (ES.FromDate >=@FromDate AND ES.ToDate <=@ToDate))    
  
     AND(@IsActive IS NULL OR ES.IsActive=@IsActive)   
  
  END  
  
 SET NOCOUNT OFF  
  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[DisplayCompetitionListChaild]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


  CREATE PROCEDURE [dbo].[DisplayCompetitionListChaild]
	@CompetitionID INTEGER=NULL,  
	@CorporateID INTEGER=NULL, 
	@MessagePackID INTEGER=NULL, 
	@KioskMachineID BIT=NULL, 
	@NonMembersAllowedID BIT=NULL, 
	@ResultDateOne DATETIME=NULL,
	@ResultDateTwo DATETIME=NULL,
	@FromDate DATETIME=NULL,
	@ToDate DATETIME=NULL,
	@IsActive BIT=NULL,  
	@LanguageID INTEGER=1
AS
	SET NOCOUNT ON
		BEGIN  
			SELECT ROW_NUMBER() OVER(ORDER BY ES.EServiceID)AS S_NO, ES.EServiceID,RL.RetailOutlet [Retail Outlet Name],RO.Location [Retail Outlet Location],RO.Address1 [Address]
				FROM [coc_EServices](NOLOCK)ES 
					INNER JOIN [coc_EServiceLocations]LE(NOLOCK) ON LE.EServiceID=ES.EServiceID 
					INNER JOIN [coc_RetailOutlets]RO(NOLOCK) ON RO.RetailOutletID=LE.RetailOutletID AND RO.CorporateID=ES.CorporateID
					INNER JOIN [coc_RetailOutletLanguages]RL(NOLOCK) ON RL.RetailOutletID=RO.RetailOutletID  AND RL.LanguageID=@LanguageID
					--INNER JOIN [coc_Corporates]CO(NOLOCK) ON CO.CorporateID =RO.CorporateID   
				WHERE (@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID) 
					AND(@CorporateID IS NULL OR ES.CorporateID=@CorporateID)  
					AND(@FromDate IS NULL OR (ES.FromDate >=@FromDate AND ES.ToDate <=@ToDate))  
					AND(@IsActive IS NULL OR ES.IsActive=@IsActive) 
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[DisplayCompetitionResult]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[DisplayCompetitionResult]
 @CompetitionID INTEGER=NULL,  
 @CorporateID INTEGER=NULL, 
 @CompetitionName INTEGER=NULL, 
 @ResultDateOne DATETIME=NULL,
 @ResultDateTwo DATETIME=NULL, 
 @LanguageID INTEGER=1,

 @Draw [Name] = NULL


AS
 SET NOCOUNT ON
  BEGIN
    select @CompetitionID = null
 --  SELECT ROW_NUMBER() OVER(ORDER BY  EC.ECouponID)as S_NO,  EC.ECouponID,EL.EService [Competition Name],
	--	VL.EnumValue[Competition Type],Convert(NVARCHAR(20),EW.DrawDateTime,103)[Result declared Date] ,
	--	 ECO.CRNumber,EDL.Value as Draw ,CONVERT(VARCHAR(10),ED.DrawDate,103) AS DrawDate, ED.ECouponDrawID
 --   FROM [coc_EServices](NOLOCK)ES 
 --    INNER JOIN [coc_EnumValueLanguages]VL(NOLOCK) ON VL.EnumValueID =ES.CompetitionID AND VL.LanguageID=@LanguageID
 --    INNER JOIN [coc_EServiceLanguages]EL(NOLOCK) ON EL.EServiceID=ES.EServiceID AND EL.LanguageID=@LanguageID    
 --    INNER JOIN [coc_ECoupons]EC(NOLOCK) ON EC.EServiceID=ES.EServiceID  
	-- INNER JOIN [coc_Corporates] ECO(NOLOCK) ON ECO.CorporateID =ES.CorporateID

	-- INNER JOIN coc_ECouponDraw ED ON ED.ECouponID = EC.ECouponID
	-- INNER JOIN coc_ECouponDrawLanguages EDL ON EDL.ECouponDrawID = ED.ECouponDrawID AND EDL.LanguageID=@LanguageID AND EDL.ResourceKey ='Name'
	-- INNER JOIN coc_ECouponDrawPrizes edp ON edp.ECouponDrawPrizeID = EDL.ECouponDrawID
	-- INNER JOIN coc_ECouponWinners EW ON edp.ECouponDrawPrizeID = EW.ECouponDrawPrizeID
    
 --   WHERE(@LanguageID IS NULL OR EL.LanguageID=@LanguageID)  
 --   AND (@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID) 
 --   AND (@CorporateID IS NULL OR ES.CorporateID=@CorporateID)
 --   AND (@CompetitionName IS NULL OR EL.EServiceID=@CompetitionName)
 --   AND(@ResultDateOne IS NULL OR(EC.DeclaredDate BETWEEN @ResultDateOne AND @ResultDateTwo))

	--AND (@Draw IS NULL OR EDL.Value LIKE '%'+@Draw+'%')

select ROW_NUMBER() OVER(ORDER BY  tbl.ECouponID)as S_NO,  tbl.* from 
  (
   SELECT distinct   EC.ECouponID,EL.EService [Competition Name],
		VL.EnumValue[Competition Type],'' as [Result declared Date] ,
		 ECO.CRNumber,'' as Draw ,'' AS DrawDate, 0 as ECouponDrawID
    FROM [coc_EServices](NOLOCK)ES 
     INNER JOIN [coc_EnumValueLanguages]VL(NOLOCK) ON VL.EnumValueID =ES.CompetitionID AND VL.LanguageID=@LanguageID
     INNER JOIN [coc_EServiceLanguages]EL(NOLOCK) ON EL.EServiceID=ES.EServiceID AND EL.LanguageID=@LanguageID    
     INNER JOIN [coc_ECoupons]EC(NOLOCK) ON EC.EServiceID=ES.EServiceID  
	 INNER JOIN [coc_Corporates] ECO(NOLOCK) ON ECO.CorporateID =ES.CorporateID
	 --INNER JOIN coc_ECouponDraw ED ON ED.ECouponID = EC.ECouponID
	 --INNER JOIN coc_ECouponDrawLanguages EDL ON EDL.ECouponDrawID = ED.ECouponDrawID AND EDL.LanguageID=@LanguageID AND EDL.ResourceKey ='Name'
	 --INNER JOIN coc_ECouponDrawPrizes edp ON edp.ECouponDrawID = EDL.ECouponDrawID
	 --INNER JOIN coc_ECouponWinners EW ON edp.ECouponDrawPrizeID = EW..ECouponDrawPrizeID

    
    WHERE(@LanguageID IS NULL OR EL.LanguageID=@LanguageID)  
    AND (@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID) 
    AND (@CorporateID IS NULL OR ES.CorporateID=@CorporateID)
    AND (@CompetitionName IS NULL OR EL.EServiceID=@CompetitionName)
    --AND(@ResultDateOne IS NULL OR(EC.DeclaredDate BETWEEN @ResultDateOne AND @ResultDateTwo))
	--AND (@Draw IS NULL OR EDL.Value LIKE '%'+@Draw+'%')
	) as tbl
   SELECT ROW_NUMBER() OVER(ORDER BY  EW.DrawDateTime)as S_NO,CONVERT(VARCHAR(10),EW.DrawDateTime,103)  as ResultDate, ed.ECouponDrawID, CONVERT(VARCHAR(10),ew.DrawDateTime,103) DrawDateTime, EP.ECouponID,epl.Value [Prize],CASE WHEN EW.ConsumerID IS NOT NULL THEN CU.FirstName+' '+CU.SecondName+' '+CU.FamilyName ELSE EW.ConsumerName END [Winner Name],
    CASE WHEN EW.ConsumerID IS NULL THEN ''ELSE CU.MembershipNumber END [Membership GuestId], CASE WHEN EW.ConsumerID IS NOT NULL THEN 'Member' ELSE 'Guest' END [Consumer Type],EW.MobileNumber [Mobile],EW.Email [Email], EDL.Value + ' ('+ CONVERT(VARCHAR(10),ew.DrawDateTime,103)+ ')' as [Prize Details]
     FROM [coc_ECouponWinners] EW (NOLOCK)
     INNER JOIN [coc_ECouponPrizes] EP(NOLOCK)ON EP.ECouponPrizeID=EW.ECouponPrizeID 
     LEFT JOIN [coc_Consumers] CU (NOLOCK)ON  CU.ConsumerID IS NULL OR CU.ConsumerID=EW.ConsumerID 
     INNER JOIN [coc_EnumValues] EV (NOLOCK)ON EV.EnumValueID=EP.PrizeTypeID 
     INNER JOIN [coc_ECoupons]EC(NOLOCK) ON  EC.ECouponID=EP.ECouponID
     INNER JOIN [coc_EServices]ES(NOLOCK) ON  ES.EServiceID=EC.EServiceID
     INNER JOIN [coc_EServiceLanguages]EL(NOLOCK) ON EL.EServiceID=ES.EServiceID  
     INNER JOIN [coc_EnumValueLanguages]VL(NOLOCK) ON Es.ServiceTypeID=VL.EnumValueID  AND VL.LanguageID=@LanguageID
	 INNER JOIN coc_ECouponDrawPrizes edp(NOLOCK) ON edp.ECouponDrawPrizeID = EW.ECouponDrawPrizeID
	 INNER JOIN coc_ECouponDraw ed(NOLOCK) ON ed.ECouponDrawID = edp.ECouponDrawID
	 INNER JOIN coc_ECouponPrizesLanguages epl(NOLOCK) ON epl.ECouponPrizeID = edp.ECouponPrizeID and epl.LanguageID = @LanguageID and epl.ResourceKey = 'PrizeDetail'
	 INNER JOIN coc_ECouponPrizesLanguages epl1(NOLOCK) ON epl1.ECouponPrizeID = edp.ECouponPrizeID and epl1.LanguageID = @LanguageID and epl1.ResourceKey = 'Name'

	 INNER JOIN coc_ECouponDrawLanguages EDL(NOLOCK) ON EDL.ECouponDrawID = ed.ECouponDrawID AND EDL.LanguageID=@LanguageID AND EDL.ResourceKey ='Name'

    WHERE (@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID) 
     AND(@CorporateID IS NULL OR ES.CorporateID=@CorporateID)  
     AND(@CompetitionName IS NULL OR EL.EServiceID=@CompetitionName) 
     AND(@LanguageID IS NULL OR EL.LanguageID=@LanguageID) 
     --AND(@ResultDateOne IS NULL OR(EC.DeclaredDate BETWEEN @ResultDateOne AND @ResultDateTwo))
	 --and EDL.ECouponDrawID= 11
	 AND (@Draw IS NULL OR EDL.Value LIKE '%'+@Draw+'%')

  END
 SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[DisplayCompetitionResultChild]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 CREATE PROCEDURE  [dbo].[DisplayCompetitionResultChild]
@CompetitionID INTEGER=NULL,  
	@CorporateID INTEGER=NULL, 
	@CompetitionName INTEGER=NULL, 
	@ResultDateOne DATETIME=NULL,
	@ResultDateTwo DATETIME=NULL, 
	@LanguageID INTEGER=1
AS
	SET NOCOUNT ON
		BEGIN

			--SELECT ROW_NUMBER() OVER(ORDER BY  EP.ECouponID)as[S.No], EP.ECouponID,EV.BaseValue [Prize],CASE WHEN EW.ConsumerID IS NOT NULL THEN CU.FirstName+''+CU.SecondName ELSE 'Guest' END [Winner Name],CASE WHEN EW.ConsumerID IS NULL THEN ''ELSE CU.MembershipNumber END [Membership GuestId], CASE WHEN EW.ConsumerID IS NOT NULL THEN 'Member' ELSE 'Guest' END [Consumer Type],CU.PrimaryMobile [Mobile],CU.EmailID [Email], EW.PrizeDetail [Prize Details]
			--		FROM [coc_ECouponWinners] EW (NOLOCK)
			--		INNER JOIN [coc_ECouponPrizes] EP(NOLOCK)ON EP.ECouponPrizeID=EW.ECouponPrizeID 
			--		LEFT JOIN [coc_Consumers] CU (NOLOCK)ON  CU.ConsumerID IS NULL OR CU.ConsumerID=EW.ConsumerID 
			--		INNER JOIN [coc_EnumValues] EV (NOLOCK)ON EV.EnumValueID=EP.PrizeTypeID 
			--		INNER JOIN [coc_ECoupons]EC(NOLOCK) ON  EC.ECouponID=EP.ECouponID
			--		INNER JOIN [coc_EServices]ES(NOLOCK) ON  ES.EServiceID=EC.EServiceID
			--		INNER JOIN [coc_EServiceLanguages]EL(NOLOCK) ON EL.EServiceID=ES.EServiceID  
			--		INNER JOIN [coc_EnumValueLanguages]VL(NOLOCK) ON Es.ServiceTypeID=VL.EnumValueID  
			--	WHERE (@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID) 
			--		AND(@CorporateID IS NULL OR ES.CorporateID=@CorporateID)  
			--		--AND(@CompetitionName IS NULL OR EL.EService=@CompetitionName) 
			--		AND(@LanguageID IS NULL OR EL.LanguageID=@LanguageID) 
			--		AND(@ResultDateOne IS NULL OR(EC.DeclaredDate BETWEEN @ResultDateOne AND @ResultDateTwo))
		
			SELECT ROW_NUMBER() OVER(ORDER BY  EW.DrawDateTime)as S_NO,CONVERT(VARCHAR(10),EW.DrawDateTime,101)  as ResultDate, CONVERT(VARCHAR(10),ed.DrawDate,101) DrawDateTime, EP.ECouponID,EV.BaseValue [Prize],CASE WHEN EW.ConsumerID IS NOT NULL THEN CU.FirstName+' '+CU.SecondName+' '+CU.FamilyName ELSE 'Guest' END [Winner Name],
				CASE WHEN EW.ConsumerID IS NULL THEN ''ELSE CU.MembershipNumber END [Membership GuestId], CASE WHEN EW.ConsumerID IS NOT NULL THEN 'Member' ELSE 'Guest' END [Consumer Type],CU.PrimaryMobile [Mobile],CU.EmailID [Email], EW.PrizeDetail [Prize Details], edl.Value [DrawName]
				 FROM [coc_ECouponWinners] EW (NOLOCK)
				 INNER JOIN [coc_ECouponPrizes] EP(NOLOCK)ON EP.ECouponPrizeID=EW.ECouponPrizeID 
				 LEFT JOIN [coc_Consumers] CU (NOLOCK)ON  CU.ConsumerID IS NULL OR CU.ConsumerID=EW.ConsumerID 
				 INNER JOIN [coc_EnumValues] EV (NOLOCK)ON EV.EnumValueID=EP.PrizeTypeID 
				 INNER JOIN [coc_ECoupons]EC(NOLOCK) ON  EC.ECouponID=EP.ECouponID
				 INNER JOIN [coc_EServices]ES(NOLOCK) ON  ES.EServiceID=EC.EServiceID
				 INNER JOIN [coc_EServiceLanguages]EL(NOLOCK) ON EL.EServiceID=ES.EServiceID  
				 INNER JOIN [coc_EnumValueLanguages]VL(NOLOCK) ON Es.ServiceTypeID=VL.EnumValueID  AND VL.LanguageID=@LanguageID
			  INNER JOIN coc_ECouponDrawPrizes edp(NOLOCK) ON edp.ECouponDrawPrizeID = EW.ECouponDrawPrizeID
			  INNER JOIN coc_ECouponDraw ed(NOLOCK) ON ed.ECouponDrawID = edp.ECouponDrawID
			  INNER JOIN coc_ECouponDrawLanguages edl(NOLOCK) ON edl.ECouponDrawID = ed.ECouponDrawID and edl.ResourceKey = 'Name' and edl.LanguageID= @LanguageID
				WHERE (@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID) 
				 AND(@CorporateID IS NULL OR ES.CorporateID=@CorporateID)  
				 AND(@CompetitionName IS NULL OR EL.EServiceID=@CompetitionName) 
				 AND(@LanguageID IS NULL OR EL.LanguageID=@LanguageID) 
				 AND(@ResultDateOne IS NULL OR(EC.DeclaredDate BETWEEN @ResultDateOne AND @ResultDateTwo))

		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[DisplayConsumerParticipation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE PROCEDURE [dbo].[DisplayConsumerParticipation]  
	@FromDate DATETIME=NULL,
	@ToDate DATETIME=NULL,
	@CompetitionID INTEGER=NULL,  
	@CorportateID INTEGER=NULL, 
	@MemberID [NullCode]=NULL, 
	@UserType [NullCode]=NULL,
	@LanguageID INTEGER=1
AS
SET NOCOUNT ON
	BEGIN
		DECLARE @Participation TABLE
		(
		 [S.No] INTEGER IDENTITY(1,1),
		 ConsumerID INTEGER,
		 [Consumer Name] [Name],
		 [Member ID] [NullCode],
		 [User Type] [NullCode],
		 Mobile [Mobile],
		 Email [Email],
		 [Address] [Address],
		 Location [Description],
		 Country [Description],
		 TyprID  INTEGER
		)

		INSERT INTO @Participation (ConsumerID,[Consumer Name],[Member ID],[User Type],Mobile,Email,[Address],Location,Country,TyprID)
			SELECT ConsumerID,FirstName [Consumer Name],MemberShipNumber [Member ID] ,'Member' [User Type],PrimaryMobile [Mobile],EmailID [Email],Address1 [Address],CL.City [Location],RL.Country [Country],1
				FROM COC_CONSUMERS(NOLOCK)CS
					INNER JOIN [coc_CityLanguages]CL(NOLOCK) ON CL.CityID=CS.CityID AND CL.LanguageID=1
					INNER JOIN [coc_CountryLanguages]RL(NOLOCK) ON RL.CountryID=CS.CountryID AND RL.LanguageID=1

		INSERT INTO @Participation (ConsumerID,[Consumer Name],[Member ID],[User Type],Mobile,Email,[Address],Location,Country,TyprID)
			SELECT ''ConsumerID, GuestName [Consumer Name],''[Member ID],'Non-Member' [User Type] ,Mobile,'' [Email],'' [Address],'' [Location],'' [Country] ,0 
				FROM coc_GuestParticipations(NOLOCK)
			
		SELECT * FROM 	@Participation
			WHERE(@MemberID IS NULL OR  [Member ID]=@MemberID) 
				AND(@UserType IS NULL OR [User Type] =@UserType) 
		
		--SELECT ROW_NUMBER() OVER(ORDER BY CS.ConsumerID)[S.No],CS.ConsumerID,CS.FirstName[Consumer Name],CASE WHEN EC.MemberOnly=1 THEN 'Member' END [User Type],CS.MembershipNumber [Member ID],CS.PrimaryMobile [Mobile],CS.EmailID [Email],
		--		CS.Address1 [Address],CL.City [Location],RL.Country [Country]
		--	FROM[coc_Consumers](NOLOCK)CS
		--		INNER JOIN [coc_CityLanguages]CL(NOLOCK) ON CL.CityID=CS.CityID AND CL.LanguageID=@LanguageID
		--		INNER JOIN [coc_CountryLanguages]RL(NOLOCK) ON RL.CountryID=CS.CountryID  AND RL.LanguageID=@LanguageID 
		--		INNER JOIN [coc_ECouponParticipations]EP(NOLOCK) ON EP.ConsumerID=CS.ConsumerID  
		--		INNER JOIN [coc_ECoupons]EC(NOLOCK) ON EC.ECouponID=EP.ECouponID
		--	WHERE(@MemberID IS NULL OR CS.MembershipNumber=@MemberID) 
		--		AND(@UserType IS NULL OR EC.MemberOnly =@UserType) 


		SELECT ROW_NUMBER() OVER(ORDER BY EP.ParticipationDate)[S.No],CS.ConsumerID,EL.EService [Competition Name],EV.BaseValue [Competition Type],CONVERT(NVARCHAR(12),EP.ParticipationDate,106) [Participation Date],CO.CRNumber [Corporate]
			FROM [coc_Consumers](NOLOCK)CS 
				INNER JOIN [coc_ECouponParticipations]EP(NOLOCK) ON EP.ConsumerID=CS.ConsumerID  
				INNER JOIN [coc_ECoupons]EC(NOLOCK) ON EC.ECouponID=EP.ECouponID 
				INNER JOIN [coc_EServices]ES(NOLOCK) ON ES.EServiceID=EC.EServiceID 
				INNER JOIN [coc_EServiceLanguages]EL(NOLOCK) ON EL.EServiceID=ES.EServiceID
				INNER JOIN [coc_EnumValues]EV(NOLOCK) ON EV.EnumValueID =ES.CompetitionID
				INNER JOIN [coc_Corporates]CO(NOLOCK) ON CO.CorporateID=ES.CorporateID 
			WHERE (@FromDate IS NULL OR(EP.ParticipationDate BETWEEN @FromDate AND @ToDate))  
				AND(@CompetitionID IS NULL OR EV.EnumValueID =@CompetitionID)  
				AND(@CorportateID IS NULL OR CO.CorporateID =@CorportateID) 
				AND(@MemberID IS NULL OR CS.MembershipNumber=@MemberID)  
				AND(@LanguageID IS NULL OR EL.LanguageID=@LanguageID)  
	END
SET NOCOUNT OFF




GO
/****** Object:  StoredProcedure [dbo].[DisplayConsumerParticipationChild]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
CREATE PROCEDURE [dbo].[DisplayConsumerParticipationChild]  
	@FromDate DATETIME=NULL,
	@ToDate DATETIME=NULL,
	@CompetitionID INTEGER=NULL,  
	@CorportateID INTEGER=NULL, 
	@MemberID [NullCode]=NULL, 
	@UserType [NullCode]=NULL,
	@LanguageID INTEGER=1
AS
SET NOCOUNT ON
	BEGIN
		DECLARE @Participation TABLE
		(
		 [S.No] INTEGER IDENTITY(1,1),
		 ConsumerID INTEGER,
		 [Consumer Name] [Name],
		 [Member ID] [NullCode],
		 [User Type] [NullCode],
		 Mobile [Mobile],
		 Email [Email],
		 [Address] [Address],
		 Location [Description],
		 Country [Description],
		 TyprID  INTEGER
		)

		
		SELECT ROW_NUMBER() OVER(ORDER BY EP.ParticipationDate)[S.No],CS.ConsumerID,EL.EService [Competition Name],EV.BaseValue [Competition Type],CONVERT(NVARCHAR(12),EP.ParticipationDate,106) [Participation Date],CO.CRNumber [Corporate]
			FROM [coc_Consumers](NOLOCK)CS 
				INNER JOIN [coc_ECouponParticipations]EP(NOLOCK) ON EP.ConsumerID=CS.ConsumerID  
				INNER JOIN [coc_ECoupons]EC(NOLOCK) ON EC.ECouponID=EP.ECouponID 
				INNER JOIN [coc_EServices]ES(NOLOCK) ON ES.EServiceID=EC.EServiceID 
				INNER JOIN [coc_EServiceLanguages]EL(NOLOCK) ON EL.EServiceID=ES.EServiceID
				INNER JOIN [coc_EnumValues]EV(NOLOCK) ON EV.EnumValueID =ES.CompetitionID
				INNER JOIN [coc_Corporates]CO(NOLOCK) ON CO.CorporateID=ES.CorporateID 
			WHERE (@FromDate IS NULL OR(EP.ParticipationDate BETWEEN @FromDate AND @ToDate))  
				AND(@CompetitionID IS NULL OR EV.EnumValueID =@CompetitionID)  
				AND(@CorportateID IS NULL OR CO.CorporateID =@CorportateID) 
				AND(@MemberID IS NULL OR CS.MembershipNumber=@MemberID)  
				AND(@LanguageID IS NULL OR EL.LanguageID=@LanguageID)  
	END
SET NOCOUNT OFF





GO
/****** Object:  StoredProcedure [dbo].[DisplayConsumersRegistered]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DisplayConsumersRegistered]   
	@FromDate DATETIME=NULL,
	@ToDate DATETIME=NULL,
	@ConsumerName [Name] =NULL, 
	@MembershipNumber [NullCode]=NULL, 
	@Mobile [Mobile]=NULL,
	@Email [Email]=NULL,
	@LanguageID INTEGER=1,
	@BirthDate DATETIME = NULL,
	@City [Name] = null,
	@GenderID integer = null,
	@Country [Name] = null 
AS
	SET NOCOUNT ON
		BEGIN
			
			
			SELECT ROW_NUMBER() OVER(ORDER BY CS.ConsumerID)id,CS.ConsumerID,CS.FirstName+' '+CS.FamilyName AS FirstName,CS.MembershipNumber,CS.PrimaryMobile,CS.EmailID,CS.Address1,CA.City,CL.Country,
			CS.AddDate,CS.BirthDate,
						case when CS.IsFacebookUser = 'true' then CS.FacebookID 
						 when CS.IsTwitterUser = 'true' then CS.TwitterID 
						 when CS.IsGmailUser = 'true' then CS.GmailID
						 when CS.IsYahooUser = 'true' then CS.YahooID
						 when CS.IsOutlookUser = 'true' then CS.OutlookID end as [Social Media ID],
					case when CS.IsFacebookUser = 'true' then 'Facebook' 
						 when CS.IsTwitterUser = 'true' then 'Twitter' 
						 when CS.IsGmailUser = 'true' then 'Google' 
						 when CS.IsYahooUser = 'true' then 'Yahoo' 
						 when CS.IsOutlookUser = 'true' then 'Outlook' 
						else '' end as [Social Media Type],
						case when CS.IsFacebookUser = 'true' then CS.FacebookID 
						 when CS.IsTwitterUser = 'true' then CS.TwitterID 
						 when CS.IsGmailUser = 'true' then CS.GmailID
						 when CS.IsYahooUser = 'true' then CS.YahooID
						 when CS.IsOutlookUser = 'true' then CS.OutlookID end as [Social Media ID],
					case when CS.IsFacebookUser = 'true' then 'Facebook' 
						 when CS.IsTwitterUser = 'true' then 'Twitter' 
						 when CS.IsGmailUser = 'true' then 'Google' 
						 when CS.IsYahooUser = 'true' then 'Yahoo' 
						 when CS.IsOutlookUser = 'true' then 'Outlook' 
						else '' end as [SocialMediaType],
					Case WHEN CS.Gender =2 then 'Female'
					ELSE 'Male'
					END AS Gender,
					NL.Nationality
				FROM [coc_Consumers](NOLOCK)CS   
				LEFT JOIN [coc_CountryLanguages]CL(NOLOCK) ON CL.CountryID=CS.CountryID AND CL.LanguageID=@LanguageID
				LEFT JOIN [coc_CityLanguages]CA(NOLOCK) ON CA.CityID=CS.CityID AND CA.LanguageID=@LanguageID
				LEFT JOIN [coc_EnumValueLanguages]EVL(NOLOCK) ON EVL.EnumValueID=CS.Gender AND EVL.LanguageID=@LanguageID
				LEFT JOIN coc_NationalityLanguages NL (NOLOCK) ON NL.NationalityID = CS.NationalityID and NL.LanguageID=@LanguageID
			WHERE (@FromDate IS NULL OR(CS.AddDate > @FromDate AND CS.AddDate <=@ToDate))
				AND (@ConsumerName IS NULL OR CS.FirstName like '%'+@ConsumerName+'%')
				AND (@MembershipNumber IS NULL OR CS.MembershipNumber like '%'+@MembershipNumber+'%')
				AND(@Mobile IS NULL OR CS.PrimaryMobile like '%'+@Mobile+'%') 
				AND(@Email IS NULL OR CS.EmailID like '%'+@Email+'%')  
				and IsVerified =1
				AND (@BirthDate IS NULL OR CS.BirthDate=BirthDate)
				--AND (@CityID IS NULL OR CA.CityID=@CityID)
				AND (@City IS NULL OR CA.City like '%'+@City +'%')
				AND(@GenderID IS NULL OR CS.Gender=@GenderID) 
				--AND(@CountryID IS NULL OR CL.CountryID=@CountryID)
				AND(@Country IS NULL OR CL.Country like '%'+@Country+'%') 
				and isactive = 1 and isdeleted = 0 
				and (PrimaryMobile like '009665%' or  PrimaryMobile like '009715%' or  PrimaryMobile like '009627%')
				and (@FromDate is not null )
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[DisplayCustomerService]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DisplayCustomerService]  
	@CorporateUserID INTEGER=NULL, 
	@LanguageID INTEGER=1,
	@IsActive BIT=NULL
AS
	SET NOCOUNT ON
		BEGIN
			SELECT ROW_NUMBER() OVER(ORDER BY CU.CorporateUserID)id,CU.CorporateUserID,CU.EmployeeName,CU.CorporateNumber AS UserName,CU.EmailID,CU.MobileNumber, CASE WHEN CU.IsActive=1 THEN 'Active' ELSE 'InActive' END  IsActive
				FROM [coc_CorporateUsers](NOLOCK)CU
					LEFT JOIN [coc_Users]US(NOLOCK) ON US.UserID=CU.UserID  
				WHERE(@CorporateUserID IS NULL OR CU.CorporateID=@CorporateUserID) 
					AND(@IsActive IS NULL OR CU.IsActive=@IsActive) 
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[DisplayEventList]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DisplayEventList]  
	@EServiceID INTEGER=NULL, 
	@LanguageID INTEGER=1,
	@PaymentTypeID INTEGER=NULL, 
	@CorporateID INTEGER=NULL,
	@IsActive BIT=NULL
AS
	SET NOCOUNT ON
		BEGIN
			SELECT ROW_NUMBER() OVER(ORDER BY EE.EServiceID)id, EE.EServiceID,EE.EventDescription,EE.EventTypeID,CONVERT(NVARCHAR(12),EE.PurchaseStartDate,106)PurchaseStartDate,CONVERT(NVARCHAR(12),EE.PurchaseEndDate,106)PurchaseEndDate,EE.EventCost,RO.Location
					,MT.MessagePackType,NS.NotificationCount,EI.InvoiceNumber,EV.BaseValue,RO.RetailOutletID,RL.RetailOutlet
				FROM [coc_EServiceEvents](NOLOCK)EE
					INNER JOIN [coc_EServiceEventOutlets]EO(NOLOCK) ON EO.EServiceEventID =EE.EServiceEventID 
					INNER JOIN [coc_RetailOutlets]RO(NOLOCK) ON RO.RetailOutletID =EO.RetailOutletID
					INNER JOIN [coc_RetailOutletLanguages]RL(NOLOCK) ON RO.RetailOutletID =RL.RetailOutletID AND RL.LanguageID= @LanguageID
					INNER JOIN [coc_Corporates]CO(NOLOCK) ON CO.CorporateID =RO.CorporateID 
					INNER JOIN [coc_EServiceInvoices]EI(NOLOCK) ON EI.EServiceID =EE.EServiceID 
					INNER JOIN [coc_EServices]ES(NOLOCK) ON ES.EServiceID =EI.EServiceID 
					INNER JOIN [coc_MessagePackTypes]MT(NOLOCK) ON MT.MessagePackTypeID =ES.MessagePackTypeID 
					INNER JOIN [coc_Notifications]NS(NOLOCK) ON NS.EServiceID=EE.EServiceID 
					INNER JOIN [coc_EServiceLanguages]EL(NOLOCK) ON EL.EServiceID=EE.EServiceID  
					INNER JOIN [coc_EnumValues]EV(NOLOCK) ON EV.EnumValueID =EE.EventTypeID  
				WHERE (@EServiceID IS NULL OR EE.EventTypeID=@EServiceID)
					AND (@LanguageID IS NULL OR EL.LanguageID=@LanguageID) 
					AND(@PaymentTypeID IS NULL OR MT.MessagePackTypeID=@PaymentTypeID) 
					AND(@CorporateID IS NULL OR CO.CorporateID=@CorporateID) 
					AND(@IsActive IS NULL OR EE.IsActive=@IsActive)  
		END
	SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[DisplayEventParticipation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DisplayEventParticipation]
	@EventId INTEGER=NULL,
	@FromDate DATETIME=NULL,
	@ToDate DATETIME=NULL,
	@CorporateID INTEGER=NULL,
	@LanguageId INTEGER=1
	
AS
BEGIN
	
	SET NOCOUNT ON;
	SELECT 
		ROW_NUMBER() OVER(ORDER BY evtc.EventID) AS [Sl.No],
		MAX(evtc.EventID) AS [EventID],
		MAX(evtl1.ResourceValue) AS [EventName],
		MAX(evtl2.ResourceValue) AS [Location],
		MAX(es.FromDate) AS [FromDate],
		MAX(es.ToDate) As [ToDate],
		Count(esb.EventID) AS [ParticipationCount]
	FROM coc_EventConfiguration AS evtc (NOLOCK)
	INNER JOIN coc_EventLanguages AS evtl1 (NOLOCK) ON evtl1.EventID=evtc.EVentID AND evtl1.ResourceKey='EventName' AND evtl1.LanguageID=@LanguageId
    INNER JOIN coc_EventLanguages AS evtl2 (NOLOCK) ON evtl2.EventID=evtc.EventID AND evtl2.ResourceKey='Location' AND evtl2.LanguageID=@LanguageId
	INNER JOIN coc_EServices AS es (NOLOCK) ON es.EServiceID=evtc.EServiceID
	LEFT OUTER JOIN coc_EServiceBarcodes AS esb (NOLOCK) ON esb.EventID=evtc.EventID
	WHERE (evtc.IsActive=1)
		AND(@EventId IS NULL OR evtc.EventID=@EventId)
		AND(@FromDate IS NULL OR (es.FromDate >=@FromDate AND es.ToDate <=@ToDate))
		AND (@CorporateID IS NULL OR es.CorporateID=@CorporateID)
	GROUP BY evtc.EventID

	SELECT 
		ROW_NUMBER() OVER(ORDER BY gs.GuestID) AS [S_NO],
		evtc.EventID AS [EventID],
		evtl1.ResourceValue AS [EventName],
		evtl2.ResourceValue AS [Location],
		es.FromDate AS [FromDate],
		es.ToDate As [ToDate],
		gs.GuestID AS [GuestID],
		gs.FullName AS [GuestName],
		gs.PrimaryMobile As [Mobile],
		gs.EmailID As [EmailID],
		gs.Gender AS [Gender],
		gs.JobTitle AS [JobTitle], 
		gs.CompanyName AS [Company],
		usr.UserName AS [UserName],
		CASE esb.IsUsed 
			WHEN 1 THEN 'Yes'  
			ELSE 'No' 
		END AS CheckedIn 
	FROM coc_EventConfiguration AS evtc (NOLOCK)
	INNER JOIN coc_EventLanguages AS evtl1 (NOLOCK) ON evtl1.EventID=evtc.EVentID AND evtl1.ResourceKey='EventName' AND evtl1.LanguageID=@LanguageId
    INNER JOIN coc_EventLanguages AS evtl2 (NOLOCK) ON evtl2.EventID=evtc.EventID AND evtl2.ResourceKey='Location' AND evtl2.LanguageID=@LanguageId
	INNER JOIN coc_EServices AS es (NOLOCK) ON es.EServiceID=evtc.EServiceID
	LEFT OUTER  JOIN coc_EServiceBarcodes AS esb (NOLOCK) ON esb.EventID=evtc.EventID
	LEFT OUTER  JOIN coc_Guests As gs (NOLOCK) ON gs.GuestID=esb.GuestID
	LEFT OUTER JOIN coc_Users AS usr (NOLOCK) ON usr.UserID=esb.UserID
	WHERE (evtc.IsActive=1)
		AND(@EventId IS NULL OR evtc.EventID=@EventId)
		AND(@FromDate IS NULL OR (es.FromDate >=@FromDate AND es.ToDate <=@ToDate))
		AND (@CorporateID IS NULL OR es.CorporateID=@CorporateID)

END
GO
/****** Object:  StoredProcedure [dbo].[DisplayEVouchers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 CREATE PROCEDURE [dbo].[DisplayEVouchers]   
	@FromDate DATETIME=NULL,
	@ToDate DATETIME=NULL,
	@CorporateID INTEGER=NULL, 
	@PromotionNameID  INTEGER=NULL,
	@UserType BIT=NULL, 
	@LanguageID INTEGER=1
AS
	SET NOCOUNT ON
		BEGIN
			SELECT ROW_NUMBER() OVER(ORDER BY EB.EServiceBarcodeID)id, EB.EServiceBarcodeID,CONVERT(NVARCHAR(12),NS.ScheduleDate,106)ScheduleDate,CS.FirstName,CS.MembershipNumber,
					CASE WHEN EC.MemberOnly=1 THEN 'Member' END MemberOnly,CO.CRNumber,EL.EService 
				FROM [coc_EServiceBarcodes](NOLOCK)EB 
				INNER JOIN [coc_NotificationSends]NS(NOLOCK) ON NS.NotificationID=EB.NotificationID AND SendingType!=4
				INNER JOIN [coc_Consumers]CS(NOLOCK) ON CS.ConsumerID=EB.ConsumerID 
				LEFT JOIN [coc_Notifications]NF(NOLOCK) ON NF.NotificationID=EB.NotificationID
				LEFT JOIN [coc_ECoupons]EC(NOLOCK) ON EC.EServiceID=NF.EServiceID    
				LEFT JOIN [coc_Corporates]CO(NOLOCK) ON CO.CorporateID=EB.CorporateID
				INNER JOIN [coc_EServiceLanguages]EL(NOLOCK) ON EL.EServiceID=NF.EServiceID  
				INNER JOIN [coc_EServices]ES(NOLOCK) ON ES.EServiceID=El.EServiceID AND ES.ServiceSubTypeID=63
			WHERE (@FromDate IS NULL OR(NS.ScheduleDate BETWEEN @FromDate AND @ToDate))
				AND (@LanguageID IS NULL OR EL.LanguageID=@LanguageID) 
				AND (@CorporateID IS NULL OR CO.CorporateID=@CorporateID)
				AND(@PromotionNameID IS NULL OR EL.EServiceID=@PromotionNameID) 
				AND(@UserType IS NULL OR EC.MemberOnly =@UserType) 
		END
	SET NOCOUNT OFF





GO
/****** Object:  StoredProcedure [dbo].[DisplayGuestsUsers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DisplayGuestsUsers]   
     @FromDate DATETIME = NULL  
 ,@ToDate DATETIME = NULL  
 ,@GuestName [Name] = NULL  
 ,@Mobile [Mobile] = NULL  
 ,@Email [email] = NULL  
 ,@RetailoutletID INTEGER = null  
 ,@LanguageID INTEGER = 1  
 ,@EcouponID INTEGER = null  
AS  
SET NOCOUNT ON  
  
BEGIN  
select top 1000 ROW_NUMBER() OVER (ORDER BY EP.EcouponParticipationID)   
id ,  
EP.EcouponParticipationID GuestParticipationID,  
(  
case when GP.FullName is null then  
GP.FirstName + ' '+GP.SecondName  
else   
GP.FullName end   
) GuestName,  
EP.ParticipationMobile Mobile ,  
EP.ParticipationEmailID Email ,  
Convert(varchar,EP.ParticipationDate) ParticipationDate   
from coc_ecouponparticipations EP (NOLOCK)  
inner join coc_guests GP (NOLOCK) on GP.GuestID = EP.GuestID  
where   
(@EcouponID is null or ecouponid = @EcouponID)   
and (@RetailoutletID is null or RetailoutletID=@RetailoutletID)  
and (@FromDate IS NULL OR (ParticipationDate BETWEEN @FromDate AND @ToDate))  
AND (@GuestName IS NULL OR (GP.FirstName = @GuestName or GP.SecondName = @GuestName))  
AND (@Mobile IS NULL OR EP.ParticipationMobile = @Mobile)  
AND (@Email IS NULL OR EP.ParticipationEmailID = @Email)  
     
END  
  
SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[DisplayKioskMachines]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 CREATE PROCEDURE [dbo].[DisplayKioskMachines]   
	@KioskLocationsID INTEGER=NULL, 
	@RetailOutletID INTEGER=NULL,
	@IsActive BIT=NULL,
	@LanguageID INTEGER=1  
AS
	SET NOCOUNT ON
		BEGIN
			SELECT ROW_NUMBER() OVER(ORDER BY KL.KioskLocationID)AS S_NO, KL.KioskLocationID,KL.Address1 [Address Line1],KL.Address2 [Address Line2],KL.MacAddress1[Mac Address1],KL.MacAddress2 [Mac Address2],
					CASE WHEN  KL.IsActive=1 THEN 'Active'ELSE 'Inactive ' END [Status],LK.KioskLocation [Location Name] 
				FROM [coc_KioskLocations](NOLOCK)KL
					LEFT JOIN [coc_KioskLocationLanguages] LK(NOLOCK) ON LK.KioskLocationID=KL.KioskLocationID  
				WHERE(@KioskLocationsID IS NULL OR KL.KioskLocationID=@KioskLocationsID)
					AND (@LanguageID IS NULL OR LK.LanguageID=@LanguageID)  
					AND(@IsActive IS NULL OR KL.IsActive=@IsActive)  

			SELECT ROW_NUMBER() OVER(ORDER BY KL.KioskLocationID) AS S_NO, KL.KioskLocationID,LK.KioskLocation [Location Name],KR.RetailOutletID,RL.RetailOutlet [Retail Outlet Name],RO.Location [Retail Outlet Location],
					(RO.Address1)[Address],CU.CRNumber [Corporate Name]
				FROM [coc_KioskLocations](NOLOCK)KL
					LEFT JOIN [coc_KioskLocationLanguages] LK(NOLOCK) ON LK.KioskLocationID=KL.KioskLocationID  
					LEFT JOIN [coc_KioskLocationRetailOutlets] KR(NOLOCK) ON KR.KioskLocationID=KL.KioskLocationID 
					LEFT JOIN [coc_RetailOutlets] RO(NOLOCK) ON RO.RetailOutletID=KR.RetailOutletID 
					LEFT JOIN [coc_RetailOutletLanguages] RL(NOLOCK) ON RL.RetailOutletID=RO.RetailOutletID AND RL.LanguageID=@LanguageID
					LEFT JOIN [coc_Corporates] CU(NOLOCK) ON CU.CorporateID=RO.CorporateID
				WHERE (@KioskLocationsID IS NULL OR KL.KioskLocationID=@KioskLocationsID)
					AND (@LanguageID IS NULL OR LK.LanguageID=@LanguageID)  
					AND(@RetailOutletID IS NULL OR KR.RetailOutletID=@RetailOutletID) 
					AND(@IsActive IS NULL OR KL.IsActive=@IsActive)  
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[DisplayKioskMachinesChild]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DisplayKioskMachinesChild]   
	@KioskLocationsID INTEGER=NULL, 
	@RetailOutletID INTEGER=NULL,
	@IsActive BIT=NULL,
	@LanguageID INTEGER=1  
AS
	SET NOCOUNT ON
		BEGIN		

			SELECT ROW_NUMBER() OVER(ORDER BY KL.KioskLocationID)AS S_NO, KL.KioskLocationID,LK.KioskLocation [Location Name],KR.RetailOutletID,RL.RetailOutlet [Retail Outlet Name],RO.Location [Retail Outlet Location],
					(RO.Address1)[Address],CU.CRNumber [Corporate Name]
				FROM [coc_KioskLocations](NOLOCK)KL
					LEFT JOIN [coc_KioskLocationLanguages] LK(NOLOCK) ON LK.KioskLocationID=KL.KioskLocationID  
					LEFT JOIN [coc_KioskLocationRetailOutlets] KR(NOLOCK) ON KR.KioskLocationID=KL.KioskLocationID 
					LEFT JOIN [coc_RetailOutlets] RO(NOLOCK) ON RO.RetailOutletID=KR.RetailOutletID 
					LEFT JOIN [coc_RetailOutletLanguages] RL(NOLOCK) ON RL.RetailOutletID=RO.RetailOutletID AND RL.LanguageID=@LanguageID
					LEFT JOIN [coc_Corporates] CU(NOLOCK) ON CU.CorporateID=RO.CorporateID
				WHERE (@KioskLocationsID IS NULL OR KL.KioskLocationID=@KioskLocationsID)
					AND (@LanguageID IS NULL OR LK.LanguageID=@LanguageID)  
					AND(@RetailOutletID IS NULL OR KR.RetailOutletID=@RetailOutletID) 
					AND(@IsActive IS NULL OR KL.IsActive=@IsActive)  
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[DisplayLoyaltyPoints]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  CREATE PROCEDURE [dbo].[DisplayLoyaltyPoints] 
	@FromDate DATETIME=NULL,
	@ToDate DATETIME=NULL,
	@RetailOutletID INTEGER=NULL, 
	@MembershipNumber [NullCode]=NULL, 
	@ConsumerID INTEGER=NULL,
	@LanguageID INTEGER=1
AS
	SET NOCOUNT ON
		BEGIN
			SELECT ROW_NUMBER() OVER(ORDER BY CR.ConsumerID)id,CR.ConsumerID,(CU.FirstName+' '+CU.SecondName)[FirstName],CU.MembershipNumber,CONVERT(NVARCHAR(12),CR.RedemptionDate,106)RedemptionDate,
					CP.RedeemPoint,CASE WHEN RP.RedeemTypeID=1 THEN CONVERT(NVARCHAR,LoyaltyAmount) ELSE LoyaltyItem END RedeemType,RL.RetailOutlet  
				FROM [coc_ConsumerRedemptions](NOLOCK)CR 
					LEFT JOIN [coc_ConsumerPointDetails]CP(NOLOCK) ON CP.ConsumerID=CR.ConsumerID  AND CP.PointDate=CR.RedemptionDate
					LEFT JOIN [coc_Consumers]CU(NOLOCK) ON CU.ConsumerID=CP.ConsumerID  AND CU.IsVerified=1
					INNER JOIN [coc_RedemptionPlans]RP(NOLOCK) ON RP.RedemptionPlanID=CR.RedemptionPlanID 
					INNER JOIN [coc_RetailOutletLanguages]RL(NOLOCK) ON RL.RetailOutletID=CR.RetailOutletID  
				WHERE(@FromDate IS NULL OR(CR.RedemptionDate BETWEEN @FromDate AND @ToDate))
					AND (@LanguageID IS NULL OR RL.LanguageID=@LanguageID) 
					AND (@MembershipNumber IS NULL OR CU.MembershipNumber=@MembershipNumber)
					AND(@RetailOutletID IS NULL OR RL.RetailOutletID=@RetailOutletID) 
					AND(@ConsumerID IS NULL OR CR.ConsumerID=@ConsumerID)  
					ORDER BY CR.RedemptionDate DESC
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[DisplayLoyaltyPointSummary]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DisplayLoyaltyPointSummary]    
	@FromDate DATETIME=NULL,
	@ToDate DATETIME=NULL,
	@ConsumerName [Name] =NULL, 
	@MembershipNumber [NullCode]=NULL, 
	@Mobile [Mobile]=NULL,
	@Email [Email]=NULL,
	@BalancePoint INTEGER=NULL,
	@LanguageID INTEGER=1
AS
	SET NOCOUNT ON
		BEGIN
			SELECT ROW_NUMBER() OVER(ORDER BY CS.ConsumerID)as S_NO,CS.ConsumerID,CS.FirstName + CS.SecondName [Consumer Name],CS.MembershipNumber [Membership ID],CS.PrimaryMobile[Mobile],CS.EmailID[Email],
					CS.Address1+CS.Address2 [Address],CA.City [Location],CL.Country [Country],CS.BalancePoint [Loyalty Points Balance]
				FROM [coc_Consumers](NOLOCK)CS   
					INNER JOIN [coc_CountryLanguages]CL(NOLOCK) ON CL.CountryID=CS.CountryID AND CL.LanguageID=@LanguageID
					INNER JOIN [coc_CityLanguages]CA(NOLOCK) ON CA.CityID=CS.CityID AND CA.LanguageID=@LanguageID
				WHERE IsVerified=1 AND  (@FromDate IS NULL OR(CS.AddDate BETWEEN @FromDate AND @ToDate)) 
					AND (@ConsumerName IS NULL OR CS.FirstName=@ConsumerName) 
					AND (@MembershipNumber IS NULL OR CS.MembershipNumber=@MembershipNumber)
					AND(@Mobile IS NULL OR CS.PrimaryMobile=@Mobile) 
					AND(@Email IS NULL OR CS.EmailID=@Email)
					AND(@BalancePoint IS NULL OR CS.BalancePoint=@BalancePoint) 
				 
--------[Table1]---------------------

				SELECT ROW_NUMBER() OVER(ORDER BY CS.ConsumerID)as S_NO,CS.ConsumerID,LP.LoyaltyPointKey [Loyalty Point Type] ,CP.LoyaltyPoint [No of Points Received],CONVERT(NVARCHAR(12),CP.PointDate,106) [Date] 
					FROM [coc_Consumers](NOLOCK)CS    
						INNER JOIN [coc_ConsumerPointDetails]CP(NOLOCK) ON CP.ConsumerID=CS.ConsumerID  
						INNER JOIN [coc_LoyaltyPointSetups]LP(NOLOCK) ON LP.LoyaltyPointSetupID=CP.PointSource
					WHERE(@ConsumerName IS NULL OR CS.FirstName=@ConsumerName)
						AND (@MembershipNumber IS NULL OR CS.MembershipNumber=@MembershipNumber)
						AND(@Mobile IS NULL OR CS.PrimaryMobile=@Mobile) 
						AND(@Email IS NULL OR CS.EmailID=@Email)
						AND(@BalancePoint IS NULL OR CS.BalancePoint=@BalancePoint)  

--------[Table2]---------------------

				
				SELECT ROW_NUMBER() OVER(ORDER BY CS.ConsumerID)as S_NO,CS.ConsumerID,RL.RedemptionPlan [Plan Name],CASE WHEN RP.RedeemTypeID=1 THEN 'AMOUNT'ELSE 'Item' END [Redeem Type],
						RP.LoyaltyAmount [Amount],RP.LoyaltyItem [Item],CO.CRNumber [Corporate Name],OL.RetailOutlet [Retail Outlet]
					FROM [coc_Consumers](NOLOCK)CS  
						INNER JOIN [coc_ConsumerPointDetails]CP(NOLOCK) ON CP.ConsumerID=CS.ConsumerID 
						INNER JOIN [coc_ConsumerRedemptions]CR(NOLOCK) ON CR.ConsumerID=CS.ConsumerID AND CP.PointDate=CR.RedemptionDate 
						INNER JOIN [coc_RedemptionPlans]RP(NOLOCK) ON RP.RedemptionPlanID=CR.RedemptionPlanID
						INNER JOIN [coc_RedemptionPlanLanguages]RL(NOLOCK) ON RL.RedemptionPlanID=RP.RedemptionPlanID AND RL.LanguageID=@LanguageID
						INNER JOIN [coc_RetailOutlets]RO(NOLOCK) ON RO.RetailOutletID=CR.RetailOutletID
						INNER JOIN [coc_RetailOutletLanguages]OL(NOLOCK) ON OL.RetailOutletID=RO.RetailOutletID  AND OL.LanguageID=@LanguageID
						INNER JOIN [coc_Corporates]CO(NOLOCK) ON CO.CorporateID=RO.CorporateID    
					WHERE(@ConsumerName IS NULL OR CS.FirstName=@ConsumerName)
						AND (@MembershipNumber IS NULL OR CS.MembershipNumber=@MembershipNumber)
						AND(@Mobile IS NULL OR CS.PrimaryMobile=@Mobile) 
						AND(@Email IS NULL OR CS.EmailID=@Email)
						AND(@BalancePoint IS NULL OR CS.BalancePoint=@BalancePoint)  
		END
	SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[DisplayLoyaltyPointSummaryChild]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



 CREATE PROCEDURE [dbo].[DisplayLoyaltyPointSummaryChild]    
	@FromDate DATETIME=NULL,
	@ToDate DATETIME=NULL,
	@ConsumerName [Name] =NULL, 
	@MembershipNumber [NullCode]=NULL, 
	@Mobile [Mobile]=NULL,
	@Email [Email]=NULL,
	@BalancePoint INTEGER=NULL,
	@LanguageID INTEGER=1
AS
	SET NOCOUNT ON
		BEGIN

				SELECT ROW_NUMBER() OVER(ORDER BY CS.ConsumerID)as[S.No],CS.ConsumerID,LP.LoyaltyPointKey [Loyalty Point Type] ,CP.LoyaltyPoint [No of Points Received],CONVERT(NVARCHAR(12),CP.PointDate,106) [Date] 
					FROM [coc_Consumers](NOLOCK)CS    
						INNER JOIN [coc_ConsumerPointDetails]CP(NOLOCK) ON CP.ConsumerID=CS.ConsumerID  
						INNER JOIN [coc_LoyaltyPointSetups]LP(NOLOCK) ON LP.LoyaltyPointSetupID=CP.PointSource
					WHERE(@ConsumerName IS NULL OR CS.FirstName=@ConsumerName)
						AND (@MembershipNumber IS NULL OR CS.MembershipNumber=@MembershipNumber)
						AND(@Mobile IS NULL OR CS.PrimaryMobile=@Mobile) 
						AND(@Email IS NULL OR CS.EmailID=@Email)
						AND(@BalancePoint IS NULL OR CS.BalancePoint=@BalancePoint)  
				
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[DisplayLoyaltyPointSummaryChilds]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



 CREATE PROCEDURE [dbo].[DisplayLoyaltyPointSummaryChilds]    
	@FromDate DATETIME=NULL,
	@ToDate DATETIME=NULL,
	@ConsumerName [Name] =NULL, 
	@MembershipNumber [NullCode]=NULL, 
	@Mobile [Mobile]=NULL,
	@Email [Email]=NULL,
	@BalancePoint INTEGER=NULL,
	@LanguageID INTEGER=1
AS
	SET NOCOUNT ON
		BEGIN

				SELECT ROW_NUMBER() OVER(ORDER BY CS.ConsumerID)as[S.No],CS.ConsumerID,RL.RedemptionPlan [Plan Name],CASE WHEN RP.RedeemTypeID=1 THEN 'AMOUNT'ELSE 'Item' END [Redeem Type],
						RP.LoyaltyAmount [Amount],RP.LoyaltyItem [Item],CO.CRNumber [Corporate Name],OL.RetailOutlet [Retail Outlet]
					FROM [coc_Consumers](NOLOCK)CS  
						INNER JOIN [coc_ConsumerPointDetails]CP(NOLOCK) ON CP.ConsumerID=CS.ConsumerID 
						INNER JOIN [coc_ConsumerRedemptions]CR(NOLOCK) ON CR.ConsumerID=CS.ConsumerID AND CP.PointDate=CR.RedemptionDate 
						INNER JOIN [coc_RedemptionPlans]RP(NOLOCK) ON RP.RedemptionPlanID=CR.RedemptionPlanID
						INNER JOIN [coc_RedemptionPlanLanguages]RL(NOLOCK) ON RL.RedemptionPlanID=RP.RedemptionPlanID AND RL.LanguageID=@LanguageID
						INNER JOIN [coc_RetailOutlets]RO(NOLOCK) ON RO.RetailOutletID=CR.RetailOutletID
						INNER JOIN [coc_RetailOutletLanguages]OL(NOLOCK) ON OL.RetailOutletID=RO.RetailOutletID  AND OL.LanguageID=@LanguageID
						INNER JOIN [coc_Corporates]CO(NOLOCK) ON CO.CorporateID=RO.CorporateID    
					WHERE(@ConsumerName IS NULL OR CS.FirstName=@ConsumerName)
						AND (@MembershipNumber IS NULL OR CS.MembershipNumber=@MembershipNumber)
						AND(@Mobile IS NULL OR CS.PrimaryMobile=@Mobile) 
						AND(@Email IS NULL OR CS.EmailID=@Email)
						AND(@BalancePoint IS NULL OR CS.BalancePoint=@BalancePoint)  
				
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[DisplayNotificationSummary]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DisplayNotificationSummary]  
	@EServiceID INTEGER=NULL, 
	@LanguageID INTEGER=1,
	@CorporateID INTEGER=NULL
AS	
	SET NOCOUNT ON
		BEGIN
			SELECT ROW_NUMBER() OVER(ORDER BY ES.EServiceID)id, ES.EServiceID,ES.ServiceNumber,EL.EService,COUNT(CONVERT(NVARCHAR(12), CASE WHEN NS.ScheduleDate>GetDate()THEN NS.ScheduleDate END,106)) ScheduleDateGreater, 
			     COUNT(CONVERT(NVARCHAR(12), CASE WHEN NS.ScheduleDate<=GetDate()THEN NS.ScheduleDate END,106)) ScheduleDateLess, NF.NotificationSend,NF.NotificationRead,
						(NF.NotificationCount-NF.NotificationSend)Balance,(NF.NotificationSend-NF.NotificationRead)Resend,NF.ResendCounter
				FROM [coc_EServices](NOLOCK)ES
					INNER JOIN [coc_EServiceLanguages]EL(NOLOCK) ON EL.EServiceID=ES.EServiceID AND EL.LanguageID=@LanguageID
					INNER JOIN [coc_Notifications]NF(NOLOCK) ON NF.EServiceID=ES.EServiceID 
					INNER JOIN [coc_NotificationSends]NS(NOLOCK) ON NS.NotificationID=NF.NotificationID 				
				WHERE (@CorporateID IS NULL OR ES.CorporateID=@CorporateID)
					AND (@LanguageID IS NULL OR EL.LanguageID=@LanguageID)
					OR (@EServiceID IS NULL OR ES.EServiceID=@EServiceID)
				GROUP BY ES.EServiceID,ES.ServiceNumber,EL.EService,NF.NotificationSend,NF.NotificationRead,NF.ResendCounter,NS.ScheduleDate,NF.NotificationCount
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[DisplayPackagePricing]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DisplayPackagePricing]
	@PackagePricingID INTEGER=NULL ,
	@ServiceTypeID INTEGER=NULL,
	@NotificationCount INTEGER=NULL,
	@PackagePricingTypeID INTEGER=NULL,
	@CompetitionID INTEGER=NULL,
	@ServiceSubTypeID INTEGER=NULL,
	@LanguageID INTEGER=1  

AS 
	SET NOCOUNT ON
	BEGIN
		IF @CompetitionID=0 SET @CompetitionID=NULL
		IF @ServiceSubTypeID=0 SET @ServiceSubTypeID=NULL

		SELECT ROW_NUMBER() OVER(ORDER BY PP.PackagePricingID)id, PP.PackagePricingID [MessagePackID],PP.ServiceTypeID,PP.ServiceSubTypeID,MT.MessagePackType,(EV.EnumValue) BaseValue1, (EE.EnumValue) BaseValue2,
			PP.MessagePackTypeID,PP.CompetitionID,PP.EditPackFrom,PP.PackFrom,PP.EditPackTo,PP.PackTo,PP.EditMessageRate,PP.MessageRate,PP.EditMessagePercentage,PP.MessagePercentage,PP.IsActive,PP.IsApproved,PP.AddUserID,PP.EditUserID, 
        CASE WHEN EditUserID IS NULL THEN AddUserID ELSE EditUserID END [MakerID]
			FROM [coc_PackagePricings]PP(NOLOCK) 
			LEFT JOIN [coc_MessagePackTypes] MT(NOLOCK) ON MT.MessagePackTypeID=PP.MessagePackTypeID 
			LEFT JOIN [coc_EnumValueLanguages] EV(NOLOCK) ON (EV.EnumValueID=PP.ServiceTypeID AND EV.LanguageID=@LanguageID)
			LEFT JOIN [coc_EnumValueLanguages] EE(NOLOCK) ON EE.EnumValueID=PP.CompetitionID  AND EE.LanguageID=@LanguageID
			WHERE (@PackagePricingID IS NULL OR PackagePricingID=@PackagePricingID) 
				AND (@ServiceTypeID IS NULL OR ServiceTypeID=@ServiceTypeID)
				AND (@PackagePricingTypeID IS NULL OR MT.MessagePackTypeID=@PackagePricingTypeID) 
				AND (@NotificationCount IS NULL OR @NotificationCount BETWEEN PackFrom AND PackTo)
				AND (@ServiceSubTypeID IS NULL OR ServiceSubTypeID=@ServiceSubTypeID)
				AND (@CompetitionID IS NULL OR CompetitionID=@CompetitionID)			
	END
	SET NOCOUNT OFF


	  
GO
/****** Object:  StoredProcedure [dbo].[DisplayPointRedmption]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DisplayPointRedmption] 
	@RedemptionPlanID INTEGER=NULL, 
	@LanguageID INTEGER=NULL,
	@CorporateID INTEGER =NULL,
	@RetailOutletID INTEGER =NULL,
	@RedeemTypeID INTEGER =NULL

AS 
	BEGIN   
		SELECT ROW_NUMBER() OVER(ORDER BY RP.RedemptionPlanID)id, RP.RedemptionPlanID,RLL.RedemptionPlan,CR.CRNumber,RL.CorporateID,RP.RedeemTypeID AS RedeemType ,CASE WHEN RP.RedeemTypeID=1 THEN 'Amount' ELSE 'Item' END RedeemTypeID,RP.LoyaltyPoint,RP.LoyaltyAmount,RP.LoyaltyItem,RP.Remarks,RP.IsActive,
				ISNULL(RP.EditUserID,0)EditUserID,RP.IsApproved,EditLoyaltyAmount,EditLoyaltyPoint,EditLoyaltyItem,LR.RetailOutlet
			FROM coc_RedemptionPlans (NOLOCK) RP
				 INNER JOIN coc_RedemptionPlanLanguages RLL(NOLOCK) ON RLL.RedemptionPlanID=RP.RedemptionPlanID AND RLL.LanguageID=@LanguageID 
				 LEFT JOIN coc_RedemptionLocations(NOLOCK) RL ON RL.RedemptionPlanID=RP.RedemptionPlanID
				 LEFT JOIN coc_Corporates (NOLOCK) CR ON CR.CorporateID=RL.CorporateID
				 INNER JOIN coc_RetailOutletLanguages(NOLOCK) LR ON LR.RetailOutletID=RL.RetailOutletID AND LR.LanguageID=@LanguageID
			WHERE (@RedemptionPlanID IS NULL OR RP.RedemptionPlanID=@RedemptionPlanID) 
				AND (@CorporateID IS NULL OR RL.CorporateID=@CorporateID)
				AND (@RetailOutletID IS NULL OR LR.RetailOutletID=@RetailOutletID)
				AND (@RedeemTypeID IS NULL OR RedeemTypeID=@RedeemTypeID)

		----Table 1 [RedemptionLanguages]
		--SELECT RedemptionPlanID,LanguageID,RedemptionPlan 
		--	FROM coc_RedemptionPlanLanguages CL(NOLOCK)
		--WHERE (@RedemptionPlanID IS NULL OR CL.RedemptionPlanID=@RedemptionPlanID)  

	END

GO
/****** Object:  StoredProcedure [dbo].[DisplayPromotion]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DisplayPromotion]
	@ConsumerID INTEGER,
	@LanguageID INTEGER
AS
	SET NOCOUNT ON
		BEGIN
			SELECT   ROW_NUMBER() OVER(ORDER BY ECouponParticipationID)id,EP.ECouponParticipationID,EP.ECouponID,EP.ParticipationDate,ES.ServiceNumber,EL.EService,EP.ConsumerID,CO.CRNumber
				FROM coc_ECouponParticipations EP(NOLOCK)
					 LEFT JOIN coc_ECoupons EC(NOLOCK) ON EC.ECouponID=EP.ECouponID
					 LEFT JOIN coc_EnumValues EV(NOLOCK) ON EV.EnumValueID=EC.EntryTypeID AND EnumID=6
					 LEFT JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID=EC.EServiceID 
					 INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON EL.EServiceID=ES.EServiceID AND EL.LanguageID=@LanguageID 
					 LEFT JOIN coc_Corporates CO(NOLOCK) ON CO.CorporateID=ES.CorporateID
				WHERE EP.ConsumerID=@ConsumerID
		END
	SET NOCOUNT OFF	 
GO
/****** Object:  StoredProcedure [dbo].[DisplayRedemptionAvailedDetail]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE PROCEDURE [dbo].[DisplayRedemptionAvailedDetail]
	@ConsumerID INTEGER,
	@LanguageID INTEGER
AS
	SET NOCOUNT ON
		BEGIN
			SELECT ROW_NUMBER() OVER(ORDER BY ConsumerRedemptionID)id,CR.ConsumerRedemptionID, FORMAT(CR.RedemptionDate,'dd MMM yyyy')RedemptionDate,CP.RedeemPoint, CASE WHEN RP.RedeemTypeID=1 THEN CONVERT(NVARCHAR,LoyaltyAmount) ELSE LoyaltyItem END [RedeemOffer]
				FROM coc_ConsumerRedemptions(NOLOCK) CR 
					 LEFT JOIN coc_ConsumerPointDetails(NOLOCK) CP ON CP.ConsumerID=CR.ConsumerID and CP.PointDate=CR.RedemptionDate
					 LEFT JOIN coc_RedemptionPlans(NOLOCK) RP ON RP.RedemptionPlanID=CR.RedemptionPlanID
				WHERE CR.ConsumerID=@ConsumerID and RedeemPoint>0
		END
	SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[DisplayRedemptionStatus]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  CREATE PROCEDURE [dbo].[DisplayRedemptionStatus]
	@ConsumerID INTEGER,
	@LanguageID INTEGER
AS
	SET NOCOUNT ON
		BEGIN
			SELECT ROW_NUMBER() OVER(ORDER BY CR.ConsumerRedemptionID)id,CR.ConsumerRedemptionID,CR.RedemptionCode,CR.RetailOutletID,RL.RetailOutlet,
			CASE WHEN CR.VerificationUserID IS NOT NULL THEN 'Used' ELSE 'Pending' END [Status]  
				FROM coc_ConsumerRedemptions CR (NOLOCK) 
					 LEFT JOIN coc_RetailOutlets RO(NOLOCK) ON CR.RetailOutletID=RO.RetailOutletID
					 INNER JOIN coc_RetailOutletLanguages RL(NOLOCK) ON RL.RetailOutletID=RO.RetailOutletID AND RL.LanguageID=@LanguageID
				WHERE CR.ConsumerID=@ConsumerID ORDER BY CR.IsVerified,CR.VerificationDate DESC 
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[DisplayRetailOutlets]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DisplayRetailOutlets]    
	@CorporateUserID INTEGER=NULL, 
	@LanguageID INTEGER=1,
	@IsActive BIT=NULL
AS
	SET NOCOUNT ON
		BEGIN
			SELECT ROW_NUMBER() OVER(ORDER BY RO.RetailOutletID)id,RO.RetailOutletID,RL.RetailOutlet,ISNULL(RO.Location,'')[Location],RO.ContactPerson,RO.Address1
				FROM [coc_RetailOutlets](NOLOCK)RO 
					LEFT JOIN [coc_RetailOutletLanguages]RL(NOLOCK) ON RL.RetailOutletID=RO.RetailOutletID AND RL.LanguageID=@LanguageID
				WHERE(@CorporateUserID IS NULL OR RO.CorporateID=@CorporateUserID) 
					AND(@IsActive IS NULL OR RO.IsActive=@IsActive) 
		END
	SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[DisplaySalesPromotion]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DisplaySalesPromotion]   
	@EServiceID INTEGER=NULL,  
	@CorporateID INTEGER=NULL, 
	@MessagePackID INTEGER=NULL,  
	@FromDate DATETIME=NULL,
	@ToDate DATETIME=NULL,
	@IsActive BIT=NULL,
	@LanguageID INTEGER=1
AS
	SET NOCOUNT ON
		BEGIN
			SELECT ROW_NUMBER() OVER(ORDER BY ES.EServiceID) AS SNo, ES.EServiceID,EI.InvoiceNumber [Invoice No],EL.EService [Sales Promotion Name],VL.EnumValue [EService Type],MT.MessagePackType [Package],
					CONVERT(NVARCHAR(12),ES.FromDate,106)[Start Date],CONVERT(NVARCHAR(12),ES.ToDate,106)[End Date],EI.NotificationCount [No of Notifications] 
				FROM [coc_EServices](NOLOCK)ES
					LEFT JOIN [coc_EServiceInvoices]EI(NOLOCK) ON EI.EServiceID =ES.EServiceID 
					LEFT JOIN [coc_EServiceLanguages]EL(NOLOCK) ON EL.EServiceID=ES.EServiceID 
					LEFT JOIN [coc_EnumValueLanguages]VL(NOLOCK) ON VL.EnumValueID=ES.ServiceTypeID 
					LEFT JOIN [coc_MessagePackTypes]MT(NOLOCK) ON MT.MessagePackTypeID =ES.MessagePackTypeID    
					--LEFT JOIN [coc_Notifications]NS(NOLOCK) ON NS.EServiceID=ES.EServiceID 
				WHERE(@EServiceID IS NULL OR ES.ServiceTypeID=@EServiceID)
					AND(@CorporateID IS NULL OR ES.CorporateID=@CorporateID)    
					AND(@MessagePackID IS NULL OR ES.MessagePackTypeID=@MessagePackID)  
					AND(@FromDate IS NULL OR (ES.FromDate >=@FromDate AND ES.ToDate <=@ToDate))
					AND(@IsActive IS NULL OR ES.IsActive=@IsActive)  
					AND (@LanguageID IS NULL OR EL.LanguageID=@LanguageID) 
				
			SELECT ROW_NUMBER() OVER(ORDER BY ES.EServiceID)AS SNo,ES.EServiceID,RL.RetailOutlet [Retail Outlet Name],RO.Location [Retail Outlet Location],RO.Address1 [Address]   
				FROM [coc_EServices](NOLOCK)ES 
					INNER JOIN [coc_EServiceLocations]LE(NOLOCK) ON LE.EServiceID=ES.EServiceID 
					INNER JOIN [coc_RetailOutlets]RO(NOLOCK) ON RO.RetailOutletID=LE.RetailOutletID AND RO.CorporateID=ES.CorporateID
					INNER JOIN [coc_RetailOutletLanguages]RL(NOLOCK) ON RL.RetailOutletID=RO.RetailOutletID  AND RL.LanguageID=@LanguageID
					INNER JOIN [coc_Corporates]CO(NOLOCK) ON CO.CorporateID =RO.CorporateID 
				WHERE(@EServiceID IS NULL OR ES.ServiceTypeID=@EServiceID) 
					AND(@CorporateID IS NULL OR ES.CorporateID=@CorporateID)  
					AND(@MessagePackID IS NULL OR ES.MessagePackTypeID=@MessagePackID)  
					AND(@FromDate IS NULL OR (ES.FromDate >=@FromDate AND ES.ToDate <=@ToDate))
					AND(@IsActive IS NULL OR ES.IsActive=@IsActive)   
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[DisplaySalesPromotionChild]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DisplaySalesPromotionChild]   
	@EServiceID INTEGER=NULL,  
	@CorporateID INTEGER=NULL, 
	@MessagePackID INTEGER=NULL,  
	@FromDate DATETIME=NULL,
	@ToDate DATETIME=NULL,
	@IsActive BIT=NULL,
	@LanguageID INTEGER=1
AS
	SET NOCOUNT ON
		BEGIN		
				
			SELECT ROW_NUMBER() OVER(ORDER BY ES.EServiceID)AS SNo,ES.EServiceID,RL.RetailOutlet [Retail Outlet Name],RO.Location [Retail Outlet Location],RO.Address1 [Address]   
				FROM [coc_EServices](NOLOCK)ES 
					INNER JOIN [coc_EServiceLocations]LE(NOLOCK) ON LE.EServiceID=ES.EServiceID 
					INNER JOIN [coc_RetailOutlets]RO(NOLOCK) ON RO.RetailOutletID=LE.RetailOutletID AND RO.CorporateID=ES.CorporateID
					INNER JOIN [coc_RetailOutletLanguages]RL(NOLOCK) ON RL.RetailOutletID=RO.RetailOutletID  AND RL.LanguageID=@LanguageID
					INNER JOIN [coc_Corporates]CO(NOLOCK) ON CO.CorporateID =RO.CorporateID 
				WHERE(@EServiceID IS NULL OR ES.ServiceTypeID=@EServiceID) 
					AND(@CorporateID IS NULL OR ES.CorporateID=@CorporateID)  
					AND(@MessagePackID IS NULL OR ES.MessagePackTypeID=@MessagePackID)  
					AND(@FromDate IS NULL OR (ES.FromDate >=@FromDate AND ES.ToDate <=@ToDate))
					AND(@IsActive IS NULL OR ES.IsActive=@IsActive)   
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[DisplayServiceTaskNotificationSummary]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DisplayServiceTaskNotificationSummary]  
	@ServiceTaskID INTEGER=NULL,
  @LanguageID INTEGER=1
AS	
	SET NOCOUNT ON
		BEGIN
/*			SELECT ROW_NUMBER() OVER(ORDER BY ES.EServiceID)id, ES.EServiceID,ES.ServiceNumber,EL.EService,COUNT(CONVERT(NVARCHAR(12), CASE WHEN NS.ScheduleDate>GetDate()THEN NS.ScheduleDate END,106)) ScheduleDateGreater, 
			     COUNT(CONVERT(NVARCHAR(12), CASE WHEN NS.ScheduleDate<=GetDate()THEN NS.ScheduleDate END,106)) ScheduleDateLess, NF.NotificationSend,NF.NotificationRead,
						(NF.NotificationCount-NF.NotificationSend)Balance,(NF.NotificationSend-NF.NotificationRead)Resend,NF.ResendCounter
				FROM [coc_EServices](NOLOCK)ES
					INNER JOIN [coc_EServiceLanguages]EL(NOLOCK) ON EL.EServiceID=ES.EServiceID AND EL.LanguageID=@LanguageID
					INNER JOIN [coc_Notifications]NF(NOLOCK) ON NF.EServiceID=ES.EServiceID 
					INNER JOIN [coc_NotificationSends]NS(NOLOCK) ON NS.NotificationID=NF.NotificationID 				
				WHERE (@CorporateID IS NULL OR ES.CorporateID=@CorporateID)
					AND (@LanguageID IS NULL OR EL.LanguageID=@LanguageID)
					OR (@EServiceID IS NULL OR ES.EServiceID=@EServiceID)
				GROUP BY ES.EServiceID,ES.ServiceNumber,EL.EService,NF.NotificationSend,NF.NotificationRead,NF.ResendCounter,NS.ScheduleDate,NF.NotificationCount
*/
        SELECT ROW_NUMBER() OVER(ORDER BY st.[Date])rowid, stn.ServiceTaskId, stn.UserId, stn.Status, u.FullName, st.[Date]
        FROM coc_ServiceTaskNotification stn (NOLOCK)
        inner join coc_ServiceTask st (NOLOCK) on st.Id = stn.ServiceTaskId        
        inner join coc_Users u (NOLOCK) on u.UserID = st.UserId
        where (@ServiceTaskID is null or stn.ServiceTaskId = @ServiceTaskID)        
        group by stn.ServiceTaskId, stn.UserId, stn.Status, u.FullName, st.[Date]
		END
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[DisplayUsers]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DisplayUsers]     
	@UserTypeID INTEGER=NULL,
	@IsActive BIT=NULL,
	@LanguageID INTEGER=1  
AS
	SET NOCOUNT ON
		BEGIN
			SELECT ROW_NUMBER() OVER(ORDER BY US.UserID)id, US.UserID,US.UserName,US.[Password],US.RoleID,US.MobileNumber,US.EmailID,US.PhoneNumber,US.ResetRequired,US.IsActive AS Active,CASE WHEN US.IsActive=1 THEN 'Active' ELSE 'InActive' END IsActive,FullName,
			 CASE WHEN RoleID=1 THEN 'Administrator' ELSE 'Back Office User' END UserType
				FROM coc_Users(NOLOCK) US
			WHERE((@UserTypeID IS NULL AND US.RoleID  IN(1,2)) OR (RoleID=@UserTypeID ))
					AND(@IsActive IS NULL OR US.IsActive=@IsActive)  
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[DisplayVoucherDistribution]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DisplayVoucherDistribution]          
 @BundleID INTEGER=NULL,          
 @VoucherID INTEGER=NULL,          
 @FromDate DATETIME=NULL,          
 @ToDate DATETIME=NULL,          
 @CorporateID INTEGER=NULL,          
 @LanguageID INTEGER=1          
AS          
BEGIN          
           
 SET NOCOUNT ON;          
          
          
 DECLARE @EligibilityRecords AS TABLE          
 (          
  UniqueID INTEGER Identity(1,1),          
  EVoucherID INTEGER,          
  --EBundleID INTEGER,          
  --[EVoucherBundleDistributionID] INTEGER,          
  [EVoucherName] NVARCHAR(300),          
  [VoucherDistributed] INTEGER,          
  CorporateID INTEGER,          
  [CorporateName] NVARCHAR(300),        
  [VoucherDownloaded] INTEGER,        
  [VoucherUsed] INTEGER,        
  [VoucherRemaining] INTEGER ,       
  BundleName NVARCHAR(300)            
 )          
           
   INSERT INTO @EligibilityRecords          
          
   SELECT           
 ev.EVoucherID AS [EVoucherID],          
-- evb.EBundleID AS [EBundleID],          
 --evbd.EVoucherBundleDistributionID AS [EVoucherBundleDistributionID],          
 evl.ResourceValue AS [EVoucherName],          
 --ev.NumberOfVouchers AS [VoucherDistributed],          
 (select count(*) from coc_EServiceBarcodes(nolock) where NotificationID=ns.NotificationID) AS [VoucherDistributed],         
  es.CorporateID AS [CorporateID],          
 crs.CorporateName  ,        
 (select count(*) from coc_EServiceBarcodes(nolock) where NotificationID=ns.NotificationID and ((ISNULL(ConsumerID,0)>0 or ISNULL(GuestID,0)>0))) AS [VoucherDownloaded],         
 (select count(*) from coc_EServiceBarcodes(nolock) where NotificationID=ns.NotificationID and IsUsed=1 and ((ISNULL(ConsumerID,0)>0 or ISNULL(GuestID,0)>0))) AS [VoucherUsed],         
 (select count(*) from coc_EServiceBarcodes(nolock) where NotificationID=ns.NotificationID and IsUsed=0 and ISNULL(ConsumerID,0)=0 and ISNULL(GuestID,0)=0) AS [VoucherRemaining]         
  ,       
 '' as BundleName      
             
   --FROM coc_EVoucherBundleDistribution AS evbd          
   --INNER JOIN coc_EVoucherBundle evb ON evb.EVoucherBundleID=evbd.EVoucherBundleID          
   From coc_EVoucher(nolock)  ev         
   INNER JOIN coc_EVoucherLanguages(nolock) evl ON evl.EVoucherID=ev.EVoucherID AND evl.ResourceKey='VoucherName' AND evl.LanguageID=@LanguageID          
   --INNER JOIN coc_EBundleLanguages(nolock) ebl ON ebl.EBundleID = evb.EBundleID AND ebl.ResourceKey = 'BundleName'  AND ebl.LanguageID = @LanguageID          
  -- INNER JOIN coc_EServiceBarcodes(nolock)  esb ON esb.EVoucherID=ev.EVoucherID          
  Inner join coc_EServices(nolock) es on es.EServiceID=ev.EServiceID         
  Inner join coc_Notifications(nolock) ns on ns.EServiceID=ev.EServiceID         
   INNER JOIN coc_Corporates(nolock) crs ON crs.CorporateID=es.CorporateID          
  -- INNER JOIN coc_EVoucherBundleEligibilityForConsumers(nolock) AS evbec ON evbec.EVoucherBundleEligibilityForConsumersID=esb.EVoucherBundleEligibilityForConsumersID          
   WHERE ev.IsActive=1          
  --AND(@BundleID IS NULL OR evb.EBundleID=@BundleID)          
   AND(@VoucherID IS NULL OR ev.EVoucherID = @VoucherID)          
  AND(@FromDate IS NULL OR (ev.AddDate >=@FromDate AND ev.AddDate  <=@ToDate))          
  AND (@CorporateID IS NULL OR es.CorporateID=@CorporateID)          
             
   SELECT MAX([EVoucherID]) [EVoucherID],          
   MAX(CorporateID) [CorporateID],          
   MAX([CorporateName]) [CorporateName],          
   MAX(EVoucherName) EVoucherName,           
   SUM([VoucherDistributed]) [VoucherDistributed],        
   SUM([VoucherDownloaded])[VoucherDownloaded],        
   SUM([VoucherUsed])[VoucherUsed],        
   SUM([VoucherRemaining])[VoucherRemaining] ,      
  Max(BundleName) [BundleName]      
   FROM @EligibilityRecords           
   GROUP BY EVoucherID,CorporateID           
    
   SELECT           
 ev.EVoucherID,          
 evl.ResourceValue [EVoucherName],    esb.UsedDate,      
 esb.ConsumerID, isnull(esb.AsignedMoile, cns.PrimaryMobile) mobileNo,esb.InvoiceAmount, esb.InvoiceNumber,    
 isnull(cns.FirstName,'')+' '+isnull(cns.SecondName,'') AS [ConsumerName],          
 ev.ExpiryDate AS [DateAndTime],          
 cns.MembershipNumber AS [MembershipID],          
 es.CorporateID,          
 crs.CorporateName ,        
 kll.KioskLocation,        
 rol.RetailOutlet,      
 CASE          
  WHEN CONVERT(INT,esb.IsUsed)=1          
    THEN 'Yes'          
    ELSE 'No'          
  END AS [VoucherUsed]          
          
   FROM  coc_EVoucher(nolock) ev          
  -- INNER JOIN coc_EVoucherBundle(nolock) evb ON evb.EVoucherBundleID = d.EVoucherBundleID         
   INNER JOIN coc_EVoucherLanguages(nolock) AS evl ON evl.EVoucherID=ev.EVoucherID AND evl.ResourceKey='VoucherName' AND evl.LanguageID=@LanguageID          
   Inner join coc_EServices(nolock) es on es.EServiceID=ev.EServiceID         
   --INNER JOIN coc_EBundleLanguages(nolock) AS ebl ON ebl.EBundleID=evb.EBundleID AND ebl.ResourceKey='BundleName' AND ebl.LanguageID=@LanguageID          
   INNER JOIN coc_Corporates(nolock) AS crs ON crs.CorporateID=es.CorporateID          
   --INNER  JOIN coc_EBundle(nolock) AS eb ON eb.EBundleID = evb.EBundleID          
   --INNER JOIN coc_EVoucher(nolock) AS ev ON ev.EVoucherID=evb.EVoucherID          
   LEFT OUTER JOIN coc_EServiceBarcodes(nolock) esb ON esb.EVoucherID = ev.EVoucherID --AND esb.DistributorCorporateID = d.CorporateID          
   LEFT OUTER  JOIN coc_Consumers(nolock) AS cns ON cns.ConsumerID=esb.ConsumerID            
   LEFT OUTER  JOIN coc_EVoucherBundleEligibilityForConsumers(nolock) evbe ON evbe.EVoucherBundleEligibilityForConsumersID = esb.EVoucherBundleEligibilityForConsumersID          
   LEFT OUTER  JOIN coc_KioskLocationLanguages(nolock) kll on kll.KioskLocationID=esb.UsedAtKioskID and kll.LanguageID=@LanguageID        
    LEFT OUTER  JOIN coc_KioskLocationRetailOutlets(nolock) klr on klr.KioskLocationID=esb.UsedAtKioskID        
 LEFT OUTER  JOIN coc_RetailOutletLanguages(nolock) rol on rol.RetailOutletID=klr.RetailOutletID and rol.LanguageID=@LanguageID        
   WHERE  ev.IsActive=1        
 -- AND(@BundleID IS NULL OR evb.EBundleID=@BundleID)          
  AND (@VoucherID IS NULL OR ev.EVoucherID = @VoucherID)          
  AND(@FromDate IS NULL OR (es.FromDate >=@FromDate AND es.ToDate <=@ToDate))          
  AND (@CorporateID IS NULL OR es.CorporateID=@CorporateID)          
             
END
GO
/****** Object:  StoredProcedure [dbo].[DisplayVoucherEligibilityDetails]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DisplayVoucherEligibilityDetails]
	@BundleID INTEGER=NULL,
	@FromDate DATETIME=NULL,
	@ToDate DATETIME=NULL,
	@CorporateID INTEGER=NULL,
	@LanguageID INTEGER=1
AS
BEGIN
	
	SET NOCOUNT ON;
	
	DECLARE @EligibilityRecords AS TABLE
	(
		UniqueID INTEGER Identity(1,1),
		EBundleID INTEGER,
		CorporateID INTEGER,
		TotalVoucherEligibility INTEGER,
		BundleName NVARCHAR(300)		
	)

	INSERT INTO @EligibilityRecords (EBundleID,CorporateID, TotalVoucherEligibility, BundleName)
	SELECT MAX(evq.EBundleID) as EBundleID,MAX(evq.CorporateID) AS CorporateID, SUM(eve.EligibleNoOfVouchers) AS EligibilityCount, MAX(evbl.ResourceValue)
	FROM coc_evoucherbundleeligibilityforconsumers  eve (NOLOCK)
	INNER JOIN coc_EVoucherBundleQRCode evq (NOLOCK) ON evq.EVoucherBundleQRCodeID = eve.EVoucherBundleQRCodeID	
	INNER JOIN coc_EBundleLanguages evbl (NOLOCK) ON evbl.LanguageID = @LanguageID AND evbl.EBundleID = evq.EBundleID AND evbl.ResourceKey ='BundleName'
    WHERE @BundleID IS NULL OR evq.EBundleID = @BundleID
	GROUP BY evq.EBundleID, evq.CorporateID
	
	DECLARE @EligibilityProcured AS TABLE
	(		
		EBundleID INTEGER,
		CorporateID INTEGER,
		VouchersProcured INTEGER		
	)

	INSERT INTO @EligibilityProcured 

	SELECT  MAX(e.EBundleID) AS BundleID,MAX(e.CorporateID) AS CorporateID,COUNT(b.EServiceBarcodeID) AS VoucherProcured FROM  @EligibilityRecords e 
	LEFT OUTER JOIN coc_eserviceBarcodes b (NOLOCK) ON b.EBundleID = e.EBundleId AND b.DistributorCorporateID = e.CorporateID	
	WHERE b.EVoucherID IS NOT NULL 	
	GROUP BY e.EBundleID, e.CorporateID

	DECLARE @EligibilityUsed AS TABLE
	(		
		EBundleID INTEGER,
		CorporateID INTEGER,
		VouchersUsed INTEGER				
	)

	INSERT INTO @EligibilityUsed 

	SELECT  MAX(e.EBundleID) AS BundleID,MAX(e.CorporateID) AS CorporateID, Count(b2.EServiceBarcodeID) AS VouchersUsed FROM  @EligibilityRecords e 	
	LEFT OUTER JOIN coc_eserviceBarcodes b2 (NOLOCK) ON b2.EBundleID = e.EBundleID AND b2.DistributorCorporateID = e.CorporateID AND b2.IsUsed =1
	WHERE b2.EVoucherID IS NOT NULL 	
	GROUP BY e.EBundleID, e.CorporateID

	---------- Table[0] ---------------------
	SELECT UniqueID as [Sl.No],
	       e.EBundleID AS BundleID,
		   BundleName,
		   c.CorporateName,
		   TotalVoucherEligibility,
		   ep.VouchersProcured AS NoVoucherProcured,
		   eu.VouchersUsed AS NoVoucherUsed,
		   e.CorporateID
	FROM @EligibilityRecords e
	LEFT OUTER JOIN @EligibilityProcured ep ON ep.EBundleID =  e.EBundleID AND ep.CorporateID = e.CorporateID
	LEFT OUTER JOIN @EligibilityUsed eu ON eu.EBundleID =  e.EBundleID AND eu.CorporateID = e.CorporateID
	INNER JOIN coc_Corporates c (NOLOCK) ON c.CorporateID = e.CorporateID
	

	-- Voucher Procured
	DECLARE @VoucherBarcodes AS TABLE
	(
		EVoucherBundleEligibilityForConsumersID INTEGER,
		VouchersProcured INTEGER,
		ConsumerID INTEGER,
		EBundleID INTEGER,
		CorporateID INTEGER
	)
	
	INSERT INTO @VoucherBarcodes (EVoucherBundleEligibilityForConsumersID,VouchersProcured,ConsumerID,EBundleID,CorporateID)
	SELECT MAX(EVoucherBundleEligibilityForConsumersID) AS EVoucherBundleEligibilityForConsumersID,
	COUNT(EServiceBarcodeID) AS VoucherProcured,
	MAX(ConsumerID) AS ConsumerID,
	MAX(EBundleID) AS EBundleID,
	MAX(DistributorCorporateID) AS CorporateID
	FROM coc_EServiceBarcodes (NOLOCK)	
	WHERE EBundleID IS NOT NULL AND (@BundleID IS NULL OR EBundleID =@BundleID)
	GROUP BY EVoucherBundleEligibilityForConsumersID

	-- Voucher Used
	DECLARE @VoucherBarcodesUsed AS TABLE
	(
		EVoucherBundleEligibilityForConsumersID INTEGER,
		VouchersUsed INTEGER,
		ConsumerID INTEGER,
		EBundleID INTEGER,
		CorporateID INTEGER
	)

	INSERT INTO @VoucherBarcodesUsed (EVoucherBundleEligibilityForConsumersID,VouchersUsed,ConsumerID,EBundleID,CorporateID)
	SELECT MAX(EVoucherBundleEligibilityForConsumersID) AS EVoucherBundleEligibilityForConsumersID,
	COUNT(EServiceBarcodeID),
	MAX(ConsumerID) AS ConsumerID,
	MAX(EBundleID) AS EBundleID,
	MAX(DistributorCorporateID) AS CorporateID
	FROM coc_EServiceBarcodes (NOLOCK)	
	WHERE EBundleID IS NOT NULL AND (@BundleID IS NULL OR EBundleID =@BundleID) AND IsUsed = 1
	GROUP BY EVoucherBundleEligibilityForConsumersID

	-------------------- Table[1] ----------------------
	SELECT ROW_NUMBER() OVER(ORDER BY v.EVoucherBundleEligibilityForConsumersID) AS [S_NO],
	v.EBundleID AS BundleID,
	bl.ResourceValue AS [BundleName],
	c.CorporateID,
	c.CorporateName,
	cr.FirstName + ' ' + cr.SecondName as [ConsumerName],
	cr.MembershipNumber AS [RegistrationNo],
	cr.ConsumerID,
	el.EntryDate as [TimeOfEligibility],
	v.VouchersProcured AS [EligibilityCount],
	vu.VouchersUsed AS [ConsumerUsedCount]
	
	FROM @VoucherBarcodes v
	LEFT OUTER JOIN @VoucherBarcodesUsed vu ON v.EVoucherBundleEligibilityForConsumersID = vu.EVoucherBundleEligibilityForConsumersID
	INNER JOIN coc_EBundleLanguages AS bl (NOLOCK) ON bl.EBundleID=v.EBundleID AND bl.ResourceKey='BundleName' AND bl.LanguageID=@LanguageID
	INNER JOIN coc_consumers cr (NOLOCK) ON cr.ConsumerID = v.ConsumerID	
	INNER JOIN coc_corporates c (NOLOCK) ON c.CorporateID = v.CorporateID
	INNER JOIN coc_eVoucherBundleEligibilityForConsumers el (NOLOCK) ON el.EVoucherBundleEligibilityForConsumersID = v.EVoucherBundleEligibilityForConsumersID
	
	
	--SELECT ROW_NUMBER() OVER(ORDER BY ebc.EVoucherBundleEligibilityForConsumersID) AS [Sl.No],
	--	 MAX(eb.EBundleID) AS [BundleID],
	--	 MAX(ebc.EligibleNoOfVouchers) AS [TotalVoucherEligibility],
	--	 MAX(ebl.ResourceValue) AS [BundleName],
	--	 MAX(cr.CorporateName) AS [CorporateName],
	--	 MAX(vh1.UniqueID) AS [NoVoucherProcured],
	--	 MAX(vh2.UniqueID) AS [NoVoucherUsed]
	--FROM coc_EVoucherBundleEligibilityForConsumers AS ebc
	--INNER JOIN coc_EBundle AS eb ON eb.EBundleID=ebc.EBundleID
	--INNER JOIN coc_EBundleLanguages AS ebl ON ebl.EBundleID=eb.EBundleID AND ebl.ResourceKey='BundleName' AND ebl.LanguageID=1
	--INNER JOIN coc_EVoucherBundle AS evb ON evb.EBundleID=eb.EBundleID
	--INNER JOIN coc_EVoucherBundleDistribution AS ebd ON ebd.EVoucherBundleID=evb.EVoucherBundleID
	--INNER JOIN coc_Corporates AS cr ON cr.CorporateID=ebd.CorporateID
	--INNER JOIN @VoucherBarcodes AS vh1 ON vh1.EVoucherBundleEligibilityForConsumersID=ebc.EVoucherBundleEligibilityForConsumersID 
	--INNER JOIN @VoucherBarcodes2 AS vh2 ON vh2.EVoucherBundleEligibilityForConsumersID=ebc.EVoucherBundleEligibilityForConsumersID 
	--WHERE (@BundleID IS NULL OR eb.EBundleID=@BundleID)
	--	AND(@FromDate IS NULL OR (ebc.EntryDate >=@FromDate AND ebc.EntryDate <=@ToDate))
	--	AND (@CorporateID IS NULL OR cr.CorporateID=@CorporateID)
	--GROUP BY ebc.EVoucherBundleEligibilityForConsumersID


	

	--SELECT ROW_NUMBER() OVER(ORDER BY ebc.EVoucherBundleEligibilityForConsumersID) AS [S_NO],
	--	 MAX(eb.EBundleID) AS [BundleID],
	--	 MAX(ebl.ResourceValue) AS [BundleName],
	--	 MAX(cns.FirstName)+' '+MAX(cns.SecondName) AS [ConsumerName],
	--	 MAX(cns.MembershipNumber) AS [RegistrationNo],
	--	 MAX(ebc.ExpiryDate) AS [TimeOfEligibility],
	--	 MAX(ebc.EligibleNoOfVouchers) AS [EligibilityCount],
	--	 CASE 
	--		WHEN MAX(esb1.EVoucherBundleEligibilityForConsumersID) IS NOT NULL
	--			THEN 'Yes'
	--			ELSE 'No'
	--		END AS [VoucherProcured],
	--	 CASE
	--		WHEN MAX(CONVERT(INT,esb1.IsUsed))=1
	--			THEN 'Yes'
	--			ELSE 'No'
	--		END AS [VoucherUsed]
	--FROM coc_EVoucherBundleEligibilityForConsumers AS ebc
	--INNER JOIN coc_EBundle AS eb ON eb.EBundleID=ebc.EBundleID
	--INNER JOIN coc_EBundleLanguages AS ebl ON ebl.EBundleID=eb.EBundleID AND ebl.ResourceKey='BundleName' AND ebl.LanguageID=1
	--INNER JOIN coc_EVoucherBundle AS evb ON evb.EBundleID=eb.EBundleID
	--INNER JOIN coc_EVoucherBundleDistribution AS ebd ON ebd.EVoucherBundleID=evb.EVoucherBundleID
	--INNER JOIN coc_Corporates AS cr ON cr.CorporateID=ebd.CorporateID
	--INNER JOIN coc_Consumers AS cns ON cns.ConsumerID=ebc.ConsumerID
	--INNER JOIN coc_EServiceBarcodes AS esb1 ON esb1.EVoucherBundleEligibilityForConsumersID=ebc.EVoucherBundleEligibilityForConsumersID 
	--WHERE esb1.EBundleID IS NOT NULL AND  (@BundleID IS NULL OR eb.EBundleID=@BundleID)
	--	AND(@FromDate IS NULL OR (eb.StartDate >=@FromDate AND eb.EndDate <=@ToDate))
	--	AND (@CorporateID IS NULL OR cr.CorporateID=@CorporateID)
	--GROUP BY ebc.EVoucherBundleEligibilityForConsumersID

END
GO
/****** Object:  StoredProcedure [dbo].[DisplayVoucherRedemption]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DisplayVoucherRedemption] 
	@VoucherID INTEGER=NULL,
	@FromDate DATETIME=NULL,
	@ToDate DATETIME=NULL,
	@CorporateID INTEGER=NULL,
	@LanguageID INTEGER=1

AS
BEGIN
	
	DECLARE @VoucherSummary AS TABLE
	(
		UniqueID INTEGER Identity(1,1),
		EVoucherID INTEGER,
		EVoucherName NVARCHAR(100),
		VoucherTotals INTEGER
	)
    
	INSERT INTO @VoucherSummary(EVoucherID,EVoucherName,VoucherTotals) VALUES(1,'Test Voucher',1000)

	DECLARE @VoucherDetails AS TABLE
	(
		UniqueID INTEGER Identity(1,1),
		EVoucherID INTEGER,
		ConsumerName NVARCHAR(100),
		DateAndTime DATETIME,
		RetailOutlet NVARCHAR(100),
		UserName NVARCHAR(100),
		MembershipID NVARCHAR(100)
	)

	INSERT INTO @VoucherDetails (EVoucherID,ConsumerName,DateAndTime,RetailOutlet,UserName,MembershipID) 
	VALUES(1,'Hari EB',GETDATE(),'AL-Maza','logicSystems@mail.com','A4SGR85-K')

	INSERT INTO @VoucherDetails (EVoucherID,ConsumerName,DateAndTime,RetailOutlet,UserName,MembershipID) 
	VALUES(1,'Vishnu Kumar',GETDATE(),'AL-Maza','logicSystems@mail.com','KLH256HG-P')

	SELECT 
		ROW_NUMBER() OVER(ORDER BY EVoucherID) AS [Sl.No],
		EVoucherID,
		EVoucherName,
		VoucherTotals
	FROM @VoucherSummary

	SELECT 
		ROW_NUMBER() OVER(ORDER BY EVoucherID) AS [S_NO],
		EVoucherID,
		ConsumerName,
		DateAndTime,
		RetailOutlet,
		UserName,
		MembershipID
	FROM @VoucherDetails
END
GO
/****** Object:  StoredProcedure [dbo].[EditEServiceReceiptInfo]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[EditEServiceReceiptInfo]
	@EServiceReceiptID INTEGER
AS
	SET NOCOUNT ON
		BEGIN
			SELECT ER.EServiceReceiptID,ER.EServiceInvoiceID,ER.PaymentTypeID,FORMAT(ER.ReceiptDate,'dd/MM/yyyy')ReceiptDate,ER.ReceiptAmount,ER.ChequePayment,ER.CashPayment,ER.CardPayment,ES.EServiceID,
				   ER.ChequeNumber,FORMAT(ISNULL(ER.ChequeDate,''),'dd/MM/yyyy')ChequeDate,ER.BankName,ER.Remarks,FORMAT(ER.AddDate,'dd/MM/yyyy')[Date], (EL.EService)Name
				FROM coc_EServiceReceipts(NOLOCK) ER
					LEFT JOIN coc_EServiceInvoices EI (NOLOCK) ON EI.EServiceInvoiceID=ER.EServiceInvoiceID
					LEFT JOIN coc_EServices ES (NOLOCK) ON ES.EServiceID=EI.EServiceID
					LEFT JOIN coc_EServiceLanguages EL (NOLOCK) ON EL.EServiceID=ES.EServiceID AND EL.LanguageID=1
			WHERE ER.EServiceReceiptID=@EServiceReceiptID
		END
	SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[GenerateOTP]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GenerateOTP] @OtpTypeID INTEGER  
 ,@UniqueID INTEGER = NULL  
AS  
SET NOCOUNT ON  
  
BEGIN TRY  
 BEGIN TRANSACTION Trn_GenerateOTP  
  
 DECLARE @OtpID INTEGER = NULL  
 DECLARE @Otp INTEGER = NULL  
 DECLARE @LanguageID INTEGER  
 DECLARE @Upper INTEGER = 100000  
 DECLARE @Lower INTEGER = 999999  
 DECLARE @Minutes INTEGER  
 DECLARE @SMSTemplate NVARCHAR(MAX)  
 DECLARE @EmailTemplate NVARCHAR(MAX)  
 DECLARE @NotificationTemplates NVARCHAR(MAX)  
 DECLARE @EmailID NVARCHAR(100)  
 DECLARE @MobileNumber NVARCHAR(30)  
 DECLARE @Notificationtemplate TABLE (  
  EmailNotification [Remark] NULL  
  ,SMSNotification [Remark] NULL  
  )  
  
 SELECT @LanguageID = LanguageID  
 FROM coc_Languages(NOLOCK)  
 WHERE IsDefaultLanguage = 1  
  
 SELECT @Otp = ROUND(((@Upper - @Lower - 1) * RAND() + @Lower), 0)  
  
 SELECT @Minutes = SetupValue  
 FROM COC_SystemSetups(NOLOCK)  
 WHERE SystemSetupID = 504  
  
 IF ISNULL(@OtpID, 0) = 0  
 BEGIN  
  INSERT INTO coc_OTP (  
   OtpTypeID  
   ,Otp  
   ,OTPDate  
   ,OtpExpity  
   ,IsActive  
   )  
  SELECT @OtpTypeID  
   ,@Otp  
   ,GETDATE()  
   ,DATEADD(minute, @Minutes, GETDATE())  
   ,1  
  
  SET @OtpID = SCOPE_IDENTITY();  
  
  PRINT @OtpID  
 END  
  
 IF @OtpTypeID = 131  
  AND @UniqueID IS NOT NULL  
 BEGIN  
  UPDATE coc_Consumers  
  SET OtpID = @OtpID  
  WHERE ConsumerID = @UniqueID  
 END  
   --ELSE IF @OtpTypeID=132 AND @UniqueID IS NOT NULL  
   --BEGIN  
   -- UPDATE coc_Users SET OtpID=@OtpID  WHERE UserID=@UniqueID  
   --END  
 ELSE IF @OtpTypeID = 133  
  AND @UniqueID IS NOT NULL  
 BEGIN  
  UPDATE coc_ConsumerRedemptions  
  SET OtpID = @OtpID  
  WHERE ConsumerRedemptionID = @UniqueID  
 END  
 ELSE IF @OtpTypeID = 134  
  AND @UniqueID IS NOT NULL  
 BEGIN  
  UPDATE coc_ContactChanges  
  SET EmailOtpID = @OtpID  
  WHERE ContactChangeID = @UniqueID  
 END  
 ELSE IF @OtpTypeID = 135  
  AND @UniqueID IS NOT NULL  
 BEGIN  
  UPDATE coc_ContactChanges  
  SET MobileOtpID = @OtpID  
  WHERE ContactChangeID = @UniqueID  
 END  
 ELSE IF @OtpTypeID = 136  
  AND @UniqueID IS NOT NULL  
 BEGIN  
  UPDATE coc_ResetPassword  
  SET OtpID = @OtpID  
  WHERE ResetPasswordID = @UniqueID  
 END  
 ELSE IF @OtpTypeID = 137  
  AND @UniqueID IS NOT NULL  
 BEGIN  
  UPDATE coc_Consumers  
  SET OtpID = @OtpID  
  WHERE UserID = @UniqueID  
 END  
 ELSE IF @OtpTypeID = 138  
  AND @UniqueID IS NOT NULL  
 BEGIN  
  UPDATE coc_GuestParticipations  
  SET OtpID = @OtpID  
  WHERE GuestParticipationID = @UniqueID  
 END  
 ELSE IF @OtpTypeID = 139  
  AND @UniqueID IS NOT NULL  
 BEGIN  
  UPDATE coc_Tickets  
  SET OtpID = @OtpID  
  WHERE TicketID = @UniqueID  
 END  
  
 INSERT INTO @Notificationtemplate (EmailNotification)  
 SELECT NL.Template  
 FROM coc_GeneralNotificationTemplates(NOLOCK) NT  
 INNER JOIN coc_GeneralNotificationTemplateLanguages(NOLOCK) NL ON NL.GeneralNotificationTemplateID = NT.GeneralNotificationTemplateID  
 WHERE NT.GeneralNotificationTemplateID IN (  
   SELECT GeneralNotificationTemplateID  
   FROM COC_SystemSetups(NOLOCK)  
   WHERE SystemSetupID = 109  
   )  
  AND NL.LanguageID = @LanguageID  
  
 UPDATE @Notificationtemplate  
 SET SMSNotification = NL.Template  
 FROM coc_GeneralNotificationTemplates(NOLOCK) NT  
 INNER JOIN coc_GeneralNotificationTemplateLanguages(NOLOCK) NL ON NL.GeneralNotificationTemplateID = NT.GeneralNotificationTemplateID  
 WHERE NT.GeneralNotificationTemplateID IN (  
   SELECT GeneralNotificationTemplateID  
   FROM COC_SystemSetups(NOLOCK)  
   WHERE SystemSetupID = 108  
   )  
  AND NL.LanguageID = @LanguageID  
  
 SELECT @SMSTemplate = NL.Template  
 FROM coc_GeneralNotificationTemplates(NOLOCK) NT  
 INNER JOIN coc_GeneralNotificationTemplateLanguages(NOLOCK) NL ON NL.GeneralNotificationTemplateID = NT.GeneralNotificationTemplateID  
 WHERE NL.LanguageID = @LanguageID  
  AND NT.TemplateTypeID = 144  
  AND NT.SMSUsage = 1  
  
 SELECT @NotificationTemplates = NL.Template  
 FROM coc_GeneralNotificationTemplates(NOLOCK) NT  
 INNER JOIN coc_GeneralNotificationTemplateLanguages(NOLOCK) NL ON NL.GeneralNotificationTemplateID = NT.GeneralNotificationTemplateID  
 WHERE NL.LanguageID = @LanguageID  
  AND NT.TemplateTypeID = 144  
  AND NT.NotificatonUsage = 1  
  
 SELECT @EmailTemplate = NL.Template  
 FROM coc_GeneralNotificationTemplates(NOLOCK) NT  
 INNER JOIN coc_GeneralNotificationTemplateLanguages(NOLOCK) NL ON NL.GeneralNotificationTemplateID = NT.GeneralNotificationTemplateID  
 WHERE NL.LanguageID = @LanguageID  
  AND NT.TemplateTypeID = 144  
  AND NT.EmailUsage = 1  
  
 SELECT @MobileNumber = Mobilenumber  
  ,@EmailID = EmailID  
 FROM coc_users(NOLOCK)  
 WHERE userid = (  
   SELECT TOP 1 userid  
   FROM coc_consumers(NOLOCK)  
   WHERE consumerid = @UniqueID  
   )  
  
 SELECT @Otp [Otp]  
  ,@OtpID [OtpID]  
  ,EmailNotification  
  ,SMSNotification  
  ,@SMSTemplate [SMS]  
  ,@NotificationTemplates [Notification]  
  ,@EmailTemplate [Email]  
  ,@MobileNumber [MobileNumber]  
  ,@EmailID [EmailID]  
 FROM @Notificationtemplate  
  
 COMMIT TRANSACTION Trn_GenerateOTP  
END TRY  
  
BEGIN CATCH  
 ROLLBACK TRANSACTION Trn_GenerateOTP  
  
 SELECT ERROR_MESSAGE()  
END CATCH  
  
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[GetAdvertisementInformation]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetAdvertisementInformation]    
 @AdvertisementID INTEGER=NULL ,    
 @PositionID INTEGER=NULL ,    
 @LanguageID INTEGER,    
 @TargetPlatformID INTEGER =NULL    
AS    
 SET NOCOUNT ON    
      
  DECLARE @AdvertiseIDs table    
  (    
   AdvertisementID INTEGER,    
   StartDate DATETIME NULL,    
   EndDate DATETIME NULL    
  )    
  SET @TargetPlatformID=NULL     
  IF(@PositionID IS NOT NULL AND @PositionID > 0)    
  BEGIN    
       
   INSERT INTO @AdvertiseIDs    
    SELECT AdvertisementID,StartDate, DATEADD(dd,Duration,StartDate)      
     FROM coc_Advertisements(NOLOCK)     
    WHERE PositionID=@PositionID     
     --AND IsActive=1      
     AND (@TargetPlatformID IS NULL OR TargetPlateform NOT IN(@TargetPlatformID))    
  END    
  ELSE IF(@AdvertisementID IS NOT NULL AND @AdvertisementID > 0)    
  BEGIN    
       
   INSERT INTO @AdvertiseIDs(AdvertisementID)    
    SELECT @AdvertisementID    
  END     
  IF EXISTS( SELECT NULL FROM @AdvertiseIDs)    
  BEGIN    
       
   SELECT AD.AdvertisementID,AD.AdvertisementName,FORMAT(AD.StartDate,'dd/MM/yyyy')StartDate,ISNULL(AD.TargetURL,'')TargetURL,FORMAT(AD.Cost,'N2') Cost,AD.DisplayTypeID,AD.IsImage,AD.IsVideo,    
       AD.Duration,AD.PositionID,AD.IsActive,AD.TargetPlateform,AD.PopupHeight,AD.PopupWidth,FORMAT(AV.EndDate,'dd/MM/yyyy')EndDate,AD.HasNextVideo    
    FROM coc_Advertisements AD(NOLOCK)    
    INNER JOIN @AdvertiseIDs AV ON AD.AdvertisementID=AV.AdvertisementID     
   WHERE (@AdvertisementID IS NULL OR AD.AdvertisementID=@AdvertisementID) AND (@TargetPlatformID IS NULL OR AD.TargetPlateform NOT IN(@TargetPlatformID))     
   ORDER BY AD.IsActive , AD.AdvertisementID    
    
   SELECT FL.AdvertisementFileID,FL.AdvertisementID,FL.FilePath,FL.IsURL,AdvertisementText    
    FROM coc_AdvertisementFiles FL(NOLOCK)     
     INNER JOIN @AdvertiseIDs AV ON FL.AdvertisementID=AV.AdvertisementID     
   WHERE (@AdvertisementID is NULL OR FL.AdvertisementID=@AdvertisementID)    
   ORDER BY FL.AdvertisementID    
    
   SELECT AP.AdvertisementPageID,AP.AdvertisementID,AP.PageID,AV.StartDate,AV.EndDate    
    FROM coc_AdvertisementPages AP(NOLOCK)     
     INNER JOIN @AdvertiseIDs AV ON AP.AdvertisementID=AV.AdvertisementID     
   WHERE (@AdvertisementID is NULL OR AP.AdvertisementID=@AdvertisementID)    
   ORDER BY AP.AdvertisementID    
  END    
  ELSE     
  BEGIN    
   SELECT AD.AdvertisementID,AD.AdvertisementName,FORMAT(AD.StartDate,'dd/MM/yyyy')StartDate,ISNULL(AD.TargetURL,'')TargetURL,FORMAT(AD.Cost, 'N2') [Cost],AD.DisplayTypeID,AD.IsImage,AD.IsVideo,    
       AD.Duration,AD.PositionID,AD.IsActive,AD.TargetPlateform,AD.PopupHeight,AD.PopupWidth,FORMAT(DATEADD(dd,AD.Duration,AD.StartDate),'dd/MM/yyyy') [EndDate],AD.HasNextVideo    
    FROM coc_Advertisements AD(NOLOCK)    
   WHERE (@AdvertisementID is NULL OR AdvertisementID=@AdvertisementID) AND (@TargetPlatformID IS NULL OR AD.TargetPlateform NOT IN(@TargetPlatformID))     
   ORDER BY  AD.IsActive , AD.AdvertisementID    
    
   SELECT FL.AdvertisementFileID,FL.AdvertisementID,FL.FilePath,FL.IsURL,AdvertisementText    
    FROM coc_AdvertisementFiles FL(NOLOCK)     
     INNER JOIN coc_Advertisements AD(NOLOCK) ON FL.AdvertisementID=AD.AdvertisementID  AND (@TargetPlatformID IS NULL OR AD.TargetPlateform NOT IN(@TargetPlatformID))     
   WHERE (@AdvertisementID is NULL OR FL.AdvertisementID=@AdvertisementID)     
   ORDER BY FL.AdvertisementID    
    
   SELECT AP.AdvertisementPageID,AP.AdvertisementID,AP.PageID,getdate() StartDate,getdate()  EndDate     
    FROM coc_AdvertisementPages AP(NOLOCK)     
     INNER JOIN coc_Advertisements AD(NOLOCK) ON AP.AdvertisementID=AD.AdvertisementID  AND (@TargetPlatformID IS NULL OR AD.TargetPlateform NOT IN(@TargetPlatformID))     
   WHERE (@AdvertisementID is NULL OR AP.AdvertisementID=@AdvertisementID)     
   ORDER BY AP.AdvertisementID    
  END    
  --Tables[3]    
  SELECT LanguageID,[Language],CssFilePath,IsDefaultLanguage     
    FROM coc_Languages(NOLOCK)     
  WHERE IsActive=1    
  ORDER BY LanguageID ASC       
      
 SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[GetAllActiveCities]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetAllActiveCities]          
 @EVoucherID int,      
 @LanguageID int      
AS         
 BEGIN         
   declare @CountryID int=0      
   select @CountryID=CountryID from coc_EVoucher(nolock) where EVoucherID=@EVoucherID      
      
 SELECT  CU.CityID,CU.CountryID,CL.City,IsActive,CU.HasIntegration        
  FROM [coc_Cities] CU(NOLOCK)         
   INNER JOIN coc_CityLanguages CL(NOLOCK) ON CL.CityID=CU.CityID AND CL.LanguageID=@LanguageID        
  WHERE CU.CountryID=@CountryID AND IsActive=1        
  order by CU.displayorder, cl.city        
      
 END 
GO
/****** Object:  StoredProcedure [dbo].[GetAllActiveCorporates]    Script Date: 07/11/2021 17:05:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetAllActiveCorporates]    
     
AS    
BEGIN    
 SELECT     
  CR.CorporateID,     
  (CR.FirstName+' '+CR.CorporateName ) FullName,  
  CR.EmailID,  
  iif(CR.CorporateName is null , CR.FirstName+' '+CR.CorporateName , CR.CorporateName)  as CorporateName  
 FROM coc_Corporates(NOLOCK) CR where CR.IsActive=1 and CR.CorporateName is not null  
END
GO
/****** Object:  StoredProcedure [dbo].[GetAllEservices]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetAllEservices]  
 @CorpoRateID INTEGER=NULL,  
 @LanguageID INTEGER  
AS  
 SET NOCOUNT ON   
  SELECT EL.EServiceID,EL.EService  
  FROM  [coc_EServiceLanguages]EL (NOLOCK)   
  LEFT JOIN [coc_EServices]ES(NOLOCK) ON ES.EServiceID=El.EServiceID   
  WHERE ES.CorporateID=@CorpoRateID  
   AND EL.LanguageID=@LanguageID and es.IsActive=1  
 SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[GetAllPromoCodes]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[GetAllPromoCodes]        
AS        
BEGIN        
   SELECT PromoCode FROM coc_core_promocodes (NOLOCK)  
END
GO
/****** Object:  StoredProcedure [dbo].[GetAllVouchersForPackage]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[GetAllVouchersForPackage]  
@LanguageID int=1,
@CorporateID int=NULL
AS      
SET NOCOUNT ON      
 BEGIN      
  
  if(@CorporateID=0)
    set @CorporateID=NULL
  Select ev.EVoucherID,evl.ResourceValue as VoucherName from coc_EVoucher(nolock) ev  
     inner join coc_EVoucherLanguages(nolock) evl on evl.EVoucherID=ev.EVoucherID and evl.LanguageID=@LanguageID and ResourceKey='VoucherName'  
	 inner join coc_EServices(nolock) es on es.EServiceID=ev.EServiceID
	 where @CorporateID is null or es.CorporateID=@CorporateID
   
END   
SET NOCOUNT OFF      
       
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[GetAllVoucherTypes]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetAllVoucherTypes]          
 @LanguageID int      
AS         
 BEGIN     
         
 SELECT  VoucherTypeID,    
 (case when @LanguageID=1 then VoucherTypeEN else VoucherTypeAR end) VoucherType,    
 IsActive       
  FROM [coc_VoucherTypes] (NOLOCK)       
      
 END 
GO
/****** Object:  StoredProcedure [dbo].[GetAmountRange]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


 CREATE PROCEDURE [dbo].[GetAmountRange] 
	@ECouponID INTEGER=NULL 
AS
 SET NOCOUNT ON 
	 SELECT ECouponID,ResultDate,DeclaredDate
		FROM [coc_ECoupons] (NOLOCK) 
		WHERE (@ECouponID IS NULL OR ECouponID=@ECouponID) 
 SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[GetAPIServiceKeyData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetAPIServiceKeyData]  
 @EServiceID INTEGER=NULL  
AS  
 SET NOCOUNT ON   
  SELECT ServiceKeyID,EServiceID,IsAPIIntegrationEnabled,ServiceKey,IsActive   
  from coc_ServiceKeys (NOLOCK) where EServiceID=@EServiceID  
 SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[GetAvailableBarcodes]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[GetAvailableBarcodes]  
  @CorporateID int 
AS  
SET NOCOUNT ON   
   BEGIN TRANSACTION GetAvailableBarcodes  
   BEGIN TRY   
 BEGIN 
   select Sum(NumberOfBarcodes) as TotalBarcodes,Sum(NumberOfBarcodes) as UsedBarcodes from coc_BarcodePurchases (NOLOCK)
   where CorporateID=@CorporateID and IsPaymentDone=1

END  
 COMMIT TRANSACTION GetAvailableBarcodes  
 END TRY  
 BEGIN CATCH  
  SELECT ERROR_LINE()  
  SELECT ERROR_MESSAGE()  
 ROLLBACK TRANSACTION GetAvailableBarcodes  
 END CATCH   
 SET NOCOUNT OFF  
  


  
  
  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[GetBarcodeAmount]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
CREATE PROCEDURE [dbo].[GetBarcodeAmount]    
  @TotalBarcodes int   
AS    
SET NOCOUNT ON     
   BEGIN TRANSACTION GetBarcodeAmount    
   BEGIN TRY     
 BEGIN  
    if exists (select MessageRate from coc_BarcodePackagePricings (NOLOCK) where PackFrom<=@TotalBarcodes and PackTo>=@TotalBarcodes and IsActive=1)
	begin
	  select MessageRate from coc_BarcodePackagePricings (NOLOCK) where PackFrom<=@TotalBarcodes and PackTo>=@TotalBarcodes and IsActive=1
	end
	else if exists (select MessageRate from coc_BarcodePackagePricings (NOLOCK) where PackFrom>@TotalBarcodes and IsActive=1)
	begin
	  select top 1 MessageRate from coc_BarcodePackagePricings (NOLOCK) where PackFrom>@TotalBarcodes and IsActive=1
	end
    else if exists (select MessageRate from coc_BarcodePackagePricings (NOLOCK) where PackTo<@TotalBarcodes and IsActive=1)
	begin
	   select top 1 MessageRate from coc_BarcodePackagePricings (NOLOCK) where PackTo<@TotalBarcodes and IsActive=1 order by BarcodePackagePricingsID desc
	end
END    
 COMMIT TRANSACTION GetBarcodeAmount    
 END TRY    
 BEGIN CATCH    
  SELECT ERROR_LINE()    
  SELECT ERROR_MESSAGE()    
 ROLLBACK TRANSACTION GetBarcodeAmount    
 END CATCH     
 SET NOCOUNT OFF    
    
  
  
    
   
    
    
    
GO
/****** Object:  StoredProcedure [dbo].[GetBarcodeConfigurationInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetBarcodeConfigurationInformation]  
	@BarcodeConfigurationID INTEGER=NULL,
	@ServiceTypeID INTEGER=NULL
AS
	SET NOCOUNT ON
		BEGIN
			SELECT ROW_NUMBER() OVER(ORDER BY BC.BarcodeConfigurationID) id,EV.EnumValueID, BC.BarcodeConfigurationID,BC.ServiceTypeID,BC.BarcodeCombinationID,BC.CombinationLength,
					ISNULL(BC.EditUserID,0)EditUserID,ISNULL(BC.CombinationValue,0)CombinationValue,EV.BaseValue,BC.Sequence,BC.EditSequence,BC.EditCombinationLength,BC.EditCombinationValue,ISNULL(BC.IsApproved,0)IsApproved
				FROM coc_BarcodeConfigurations (NOLOCK) BC 
					RIGHT JOIN coc_EnumValues(NOLOCK) EV ON EV.EnumValueID=BC.BarcodeCombinationID AND BC.ServiceTypeID=@ServiceTypeID
					WHERE EV.EnumID =12
			--WHERE (@BarcodeConfigurationID IS NULL OR BC.BarcodeConfigurationID=@BarcodeConfigurationID) AND
				  --(@ServiceTypeID IS NULL OR BC.ServiceTypeID=@ServiceTypeID)
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[GetBarcodeDownloads]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetBarcodeDownloads]
@BarcodePrintID INTEGER,
	@ServiceID INTEGER,
	@CurrentPage INTEGER,
	@PageSize INTEGER=0,		
	@TotalRecords INTEGER OUTPUT	
	
AS
SET NOCOUNT ON
DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER		

		SET @FirstRecord = ((@CurrentPage - 1) * @PageSize) + 1
		SET @LastRecord = (@CurrentPage * @PageSize)
BEGIN
	
	 DECLARE @Template nvarchar(1000)
	   SELECT @Template = ECouponTemplate FROM coc_ECoupons (NOLOCK) WHERE EServiceID=@ServiceID

	;WITH BarCodes AS
	(
		SELECT  bpd.BarcodePrintID,es.Barcode, bpd.EServiceBarcodeID, ROW_NUMBER() OVER (ORDER BY es.EServiceBarcodeID) AS Rowc 
				FROM coc_BarcodePrintDetails bpd (NOLOCK)
				INNER JOIN coc_EServiceBarcodes es (NOLOCK) on es.EServiceBarcodeID = bpd.EServiceBarcodeID
				WHERE bpd.BarcodePrintID = @BarcodePrintID 				
	)

SELECT 
	Barcode, @Template [TicketDescription] ,Rowc
	FROM BarCodes
	WHERE Rowc BETWEEN @FirstRecord AND @LastRecord


SELECT @TotalRecords=COUNT(bpd.BarcodePrintID) 
		FROM coc_BarcodePrintDetails bpd (NOLOCK)
				INNER JOIN coc_EServiceBarcodes es (NOLOCK) on es.EServiceBarcodeID = bpd.EServiceBarcodeID
				WHERE bpd.BarcodePrintID = @BarcodePrintID 		
		

SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[GetBarcodeGeneration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetBarcodeGeneration]    
 @CorporateID INTEGER,    
 @ServiceID INTEGER,    
 @NoOfBarcodes INTEGER,    
 @NotificationID INTEGER,    
 @ErrorMessage [Remark] OUTPUT     
AS     
SET NOCOUNT ON    
 BEGIN TRY      
  BEGIN TRANSACTION TRN_GetBarcodes    
  Declare @Temp table(Barcode nvarchar(150));  
  
  Insert into @Temp  
  Select distinct top (@NoOfBarcodes) Barcode--,EM.BaseValue[Methodology]EM.EnglishValue     
   FROM coc_EServiceBarcodes(NOLOCK) EB    
   --INNER JOIN coc_EnumValues EM(NOLOCK) ON EB.BarcodeTypeID=EM.EnumValueID AND EM.EnumID=7    
    WHERE NotificationID=@NotificationID AND CorporateID=@CorporateID and IsUsed=0    
    
  UPDATE EB    
   SET EB.IsUsed=1, EB.CanDelete=0,EB.IsDownloaded=1    
   FROM coc_EServiceBarcodes EB--,coc_EnumValues EM     
  WHERE --EB.BarcodeTypeID=EM.EnumValueID AND EM.EnumID=7 AND
    NotificationID=@NotificationID AND CorporateID=@CorporateID  and EB.Barcode in (select Barcode from @Temp)   
   Select Barcode from @Temp      
  SET @ErrorMessage =''    
  COMMIT TRANSACTION TRN_GetBarcodes    
 END TRY    
 BEGIN CATCH             
  SELECT @ErrorMessage=ERROR_MESSAGE()    
  RAISERROR(@ErrorMessage, 16, 1);       
 END CATCH    
    
SET NOCOUNT OFF    
     
GO
/****** Object:  StoredProcedure [dbo].[GetBarcodePrinted]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetBarcodePrinted]
@EserviceId INTEGER

AS
BEGIN

	SELECT PrintCount,PrintDate,BarcodePrintID FROM coc_BarcodePrints BP (NOLOCK)
	JOIN coc_Notifications N  (NOLOCK) ON N.NotificationID = BP.NotificationID
	WHERE N.EServiceID = @EserviceId 

END
GO
/****** Object:  StoredProcedure [dbo].[GetBarcodePromotions]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetBarcodePromotions]      
  @CorporateID INTEGER=NULL,      
  @ServiceTypeID INTEGER=NULL,      
  @ServiceSubTypeID INTEGER=NULL,      
  @CompetitionID INTEGER=NULL,      
  @LanguageID INTEGER=1      
AS       
SET NOCOUNT ON      
 --SELECT @ServiceTypeID=ServiceTypeID FROM coc_EServices(NOLOCK) WHERE       
 --SELECT COUNT(NotificationID) FROM coc_EServiceBarcodes(NOLOCK) WHERE NotificationID=20030 AND CorporateID=@CorporateID      
        
 DECLARE @Promotions AS TABLE      
 (      
  EServiceID INTEGER,      
  ServiceNumber [NullCode],      
  ServiceName [Remark],      
  ServiceDate DATETIME,      
  FromDate DATETIME,      
  ToDate DATETIME,      
  CorporateID INTEGER,      
  ServiceTypeID INTEGER,      
  ServiceSubTypeID INTEGER,      
  CompetitionID INTEGER NULL,      
  IsActive BIT,      
  NotificationCount INTEGER,      
  NotificationID BIGINT,      
  EnableDelete BIT,      
  IsBarcodeGenerated BIT,      
  EnableDownload BIT,      
  PackageAmount [NullAmount],      
  MessagePackType [NullDescription],      
  GenerateCounter INTEGER       
 )      
       
 DECLARE @NotificationCount AS TABLE      
 (      
  UniqueID INTEGER IDENTITY(1,1),      
  NotificationsCount INTEGER,      
  NotificationID BIGINT      
 )         
 --Tables[0]  Promotions       
 --INSERT INTO @Promotions      
 INSERT INTO @NotificationCount       
  SELECT COUNT(NotificationID),NotificationID  FROM coc_EServiceBarcodes(NOLOCK) GROUP BY NotificationID       
      
 INSERT INTO @Promotions      
  SELECT SR.EServiceID,SR.ServiceNumber,SL.EService+'-'+SR.ServiceNumber [ServiceName],SR.ServiceDate,SR.FromDate,SR.ToDate,SR.CorporateID,SR.ServiceTypeID,SR.ServiceSubTypeID,SR.CompetitionID,SR.IsActive,      
   NT.NotificationCount [TotalNotificationCount],NT.NotificationID, CASE WHEN SN.IsBarcodeGenerated=1 THEN 1 ELSE 0 END [EnableDelete],CASE WHEN ISNULL(SUM(SI.NotificationCount),0)>0 THEN 0 ELSE 1 END [IsBarcodeGenerated],      
   CASE WHEN SN.IsBarcodeGenerated =1 THEN 1 ELSE 0 END [EnableDownload],--NULL,      
   ISNULL(SUM(SI.PackageAmount),0) [PackageAmount],PT.MessagePackType,ISNULL(SUM(SI.NotificationCount),0) [NotificationCount]       
    FROM coc_EServices SR(NOLOCK)       
     INNER JOIN coc_EServiceLanguages SL(NOLOCK) ON SR.EServiceID=SL.EServiceID AND SL.LanguageID=@LanguageID      
     INNER JOIN coc_Notifications NT(NOLOCK) ON SR.EServiceID=NT.EServiceID      
     INNER JOIN COC_MessagePackTypes PT(NOLOCK) ON SR.MessagePackTypeID=PT.MessagePackTypeID      
     LEFT JOIN coc_EServiceInvoices SI(NOLOCK) ON SR.EServiceID=SI.EServiceID AND SI.IsBarcodeGenerated=0      
     LEFT JOIN coc_EServiceInvoices SN(NOLOCK) ON SR.EServiceID=SN.EServiceID AND SN.IsBarcodeGenerated=1      
     WHERE ISNULL(ServiceSubTypeID,0) != 62 AND ISNULL(SR.CompetitionID,0) != 43 AND       
     --(CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),FromDate,106)  AND  CONVERT(VARCHAR(12),GETDATE(),106) <= CONVERT(VARCHAR(12),ToDate,106)) AND      
     --GETDATE()  > DATEADD(D,-1,FromDate)  AND       
     GETDATE() <  DATEADD(D,1,ToDate) AND      
     IsBarcodeUsed=0 AND SR.CorporateID=@CorporateID 
	 AND SR.IsActive=1 AND SR.IsPaymentDone=1      
   GROUP BY SR.EServiceID,SR.ServiceNumber,NT.NotificationID, SL.EService,SR.ServiceDate,SR.FromDate,SR.ToDate,SR.CorporateID,SR.ServiceTypeID,SR.ServiceSubTypeID,SR.CompetitionID,SR.IsActive,SN.IsBarcodeGenerated,      
   PT.MessagePackType ,NT.NotificationCount      
      
  UPDATE PM      
   SET PM.GenerateCounter = NC.NotificationsCount,      
   PM.NotificationCount=PM.NotificationCount-NC.NotificationsCount,      
   PM.EnableDelete=CASE WHEN NC.NotificationsCount>0 THEN 1 ELSE 0 END,      
   PM.EnableDownload=CASE WHEN NC.NotificationsCount>0 THEN 1 ELSE 0 END      
   FROM @Promotions PM,@NotificationCount NC      
  WHERE PM.NotificationID=NC.NotificationID      
        
 SELECT * FROM @Promotions        
 --Tables[1]  Barcode      
 SELECT BarcodeConfigurationID,ServiceTypeID,BarcodeCombinationID,CombinationLength,CombinationValue      
  FROM coc_BarcodeConfigurations (NOLOCK)       
   WHERE (@ServiceTypeID IS NULL OR ServiceTypeID = @ServiceTypeID) AND CombinationLength>0      
 ORDER BY BarcodeConfigurationID ASC      
      
 --Tables[2] PreSuffix      
 SELECT CorporateID,UserID,CASE WHEN BarcodePrefix IS NULL OR BarcodePrefix ='' THEN BarcodeSuffix ELSE BarcodePrefix END [BarcodeValue],BarcodePrefix,BarcodeSuffix, CASE WHEN BarcodePrefix IS NULL OR BarcodePrefix ='' THEN 1 ELSE 0 END [IsBarcodeSuffix] 
  
    
     
   FROM coc_Corporates(NOLOCK)       
 WHERE CorporateID=@CorporateID AND IsActive=1      
SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[GetBarcodes]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetBarcodes]      
AS      
BEGIN      
   SELECT Barcode FROM coc_EServiceBarcodes EB (NOLOCK)
INNER JOIN coc_Notifications EN (NOLOCK) ON EN.NotificationID = EB.NotificationID
INNER JOIN coc_eservices ES (NOLOCK) ON ES.EServiceID = EN.EServiceID 
WHERE ES.FromDate > = GetDate() AND ES.ToDate<=GetDate()   
END      
       
GO
/****** Object:  StoredProcedure [dbo].[GetBroadcastEvoucher]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------
CREATE PROCEDURE [dbo].[GetBroadcastEvoucher]
	@EServiceId int,
	@BroadcastEmailID bigint,
	@EmailAddress varchar(100)
AS

	BEGIN

		SELECT		 BCE.BroadcastEmailID
					,BCE.EServiceID
					,BCE.CustomerName
					,BCE.EmailAddress
					,BCE.EmailBody
					,BCE.Status
					,BCE.UserID
					,BCE.EntryTime
					,BCE.SentTime
					, (select  top 1 EVI.ImageFile FROM  coc_EVoucher EV (NOLOCK)
							LEFT JOIN coc_EVoucherImages EVI (NOLOCK) on EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1
							where EV.EServiceID = BCE.EServiceID) as img

		FROM		coc_BroadcastEmail BCE (NOLOCK)
		WHERE		BCE.BroadcastEmailID = @BroadcastEmailID and BCE.EmailAddress = @EmailAddress and BCE.EServiceID = @EServiceId 

	END

GO
/****** Object:  StoredProcedure [dbo].[GetBundleQrcodeCorporates]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetBundleQrcodeCorporates]
 @EBundleID INTEGER	
AS
BEGIN
	SELECT 
		CR.CorporateID,		
		CR.CorporateName,
		CR.IsActive 
	FROM coc_Corporates(NOLOCK) CR 
	WHERE CR.CorporateID IN (SELECT DISTINCT CorporateID FROM coc_EVoucherBundleDistribution EVBD (NOLOCK)
	INNER JOIN coc_EVoucherBundle EVB (NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID WHERE EVB.EBundleID = @EBundleID)
END
GO
/****** Object:  StoredProcedure [dbo].[GetBundleVoucherDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetBundleVoucherDetails]
@bundleId INTEGER,
@languageId INTEGER

AS
BEGIN

	--Get Bundle Details
	SELECT b.EBundleID, bl1.ResourceValue AS BundleName, bl2.ResourceValue AS BundleDescription FROM coc_eBundle b (NOLOCK)
	INNER JOIN coc_eBundleLanguages bl1 (NOLOCK) ON bl1.EBundleID= b.EBundleID 
	INNER JOIN coc_eBundleLanguages bl2 (NOLOCK) ON bl2.EBundleID = b.EBundleID 
	WHERE b.EBundleID = @bundleId AND bl1.LanguageID = @languageId AND bl2.LanguageID = @languageID AND bl1.ResourceKey='BundleName' AND bl2.ResourceKey='BundleDescription'

	--Get Voucher Details belongs to the bundle (Group By VoucherID)
	SELECT v.eVoucherID AS VoucherID, 
	MAX(vl1.ResourceValue) AS 'VoucherName', 
	MAX(vl2.ResourceValue) AS 'VoucherDescription', 
	SUM( evbd.NoOfVouchers) AS 'NoOfVouchers',
	COUNT(esbD.EServiceBarcodeID) AS VouchersDistributed,
	COUNT(esbU.EServiceBarcodeID) AS VouchersUsed  FROM coc_eVoucher v (NOLOCK) 
	INNER JOIN coc_eVoucherBundle evb (NOLOCK) ON evb.EVoucherID = v.EVoucherID	
	INNER JOIN coc_eVoucherLanguages vl1 (NOLOCK) ON vl1.EVoucherID=v.EVoucherID AND vl1.ResourceKey='VoucherName' 
	INNER JOIN coc_eVoucherLanguages vl2 (NOLOCK) ON vl2.EVoucherID=v.EVoucherID AND vl2.ResourceKey='Description' 
	INNER JOIN coc_eServices es (NOLOCK) ON es.EServiceID = v.EServiceID
	INNER JOIN coc_Notifications n (NOLOCK) On n.EServiceID = es.EServiceID
	INNER JOIN coc_EVoucherBundleDistribution evbd (NOLOCK) ON evbd.EVoucherBundleID = evb.EVoucherBundleID 
	LEFT JOIN coc_eServiceBarcodes esbD (NOLOCK) ON esbD.NotificationID = n.NotificationID AND esbD.EVoucherID IS NOT NULL AND esbD.EBundleID = @bundleId 
	LEFT JOIN coc_eServiceBarcodes esbU (NOLOCK) ON esbU.NotificationID = n.NotificationID AND esbU.EVoucherID IS NOT NULL AND esbU.IsUsed=1	 AND esbU.EBundleID = @bundleID
	WHERE evb.EBundleID=@bundleId
	GROUP BY v.EVoucherID 

	--SELECT  SUM( evbd.NoOfVouchers) AS 'NoOfVouchers',COUNT(esbD.EServiceBarcodeID) AS VouchersDistributed, COUNT(esbU.EServiceBarcodeID) AS VouchersUsed  FROM coc_eVoucher v 
	--INNER JOIN coc_eVoucherBundle evb ON evb.EVoucherID = v.EVoucherID	
	--INNER JOIN coc_eServices es ON es.EServiceID = v.EServiceID
	--INNER JOIN coc_Notifications n On n.EServiceID = es.EServiceID
	--INNER JOIN coc_EVoucherBundleDistribution evbd ON evbd.EVoucherBundleID = evb.EVoucherBundleID 
	--INNER JOIN coc_Corporates c ON c.CorporateID = evbd.CorporateID
	--LEFT JOIN coc_eServiceBarcodes esbD ON esbD.NotificationID = n.NotificationID AND esbD.EVoucherID IS NOT NULL
	--LEFT JOIN coc_eServiceBarcodes esbU ON esbU.NotificationID = n.NotificationID AND esbU.EVoucherID IS NOT NULL AND esbU.IsUsed=1	
	--WHERE evb.EBundleID=1
	--GROUP BY c.CorporateID 
	
	
	DECLARE @Distributions AS TABLE
	(
	UniqueID INTEGER Identity(1,1),
	CorporateID INTEGER,
	CorporateName NVARCHAR(200),
	NoOfVouchers INTEGER,	
	[Used] INTEGER)

	--Distribution table gets entries from voucher distributions
	INSERT INTO @Distributions
	(CorporateID,CorporateName,NoOfVouchers)
	SELECT MAX(evbd.CorporateID) AS CorporateID, MAX(CorporateName),SUM( evbd.NoOfVouchers) AS 'NoOfVouchers' FROM coc_EVoucherBundleDistribution evbd (NOLOCK)
	INNER JOIN coc_Corporates c (NOLOCK) ON c.CorporateID = evbd.CorporateID
	INNER JOIN coc_EVoucherBundle evb (NOLOCK) ON evbd.EVoucherBundleId = evb.EVoucherBundleID	
	WHERE evb.EBundleID = @bundleId
	GROUP BY evbd.CorporateID

	DECLARE @Distributions2 AS TABLE
	(
	UniqueID INTEGER Identity(1,1),
	CorporateID INTEGER,	
	[Distributed]  INTEGER,
	[Used] INTEGER)


	--Distribution2 table gets entries from barcodes which distributed for the bundle vouchers
	--and group by distributed coporates's ID
	INSERT INTO @Distributions2
	(CorporateID, [Distributed])

	SELECT MAX(c.CorporateID),COUNT(esbd.EVoucherID) FROM coc_eServiceBarcodes esbd	(NOLOCK)
	INNER JOIN coc_Corporates c (NOLOCK) ON c.CorporateID = esbd.DistributorCorporateID
	WHERE esbd.EBundleID= @bundleId
	GROUP BY c.CorporateID

	SELECT d.CorporateID,d.CorporateName, isnull(d.NoOfVouchers,0) AS VoucherCount, isnull(d2.[Distributed] ,0) AS DistributionCount
	FROM @Distributions d LEFT JOIN @Distributions2 d2 ON d2.CorporateID =d.CorporateID

END
GO
/****** Object:  StoredProcedure [dbo].[GetBundleVoucherDistributions]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetBundleVoucherDistributions]
@EVoucherId INTEGER,
@languageId INTEGER

AS
BEGIN
	DECLARE @voucherName NVARCHAR(200)
	SELECT @voucherName= vl.ResourceValue FROM coc_EVoucher v (NOLOCK)
	INNER JOIN coc_EVoucherLanguages vl (NOLOCK) ON vl.EVoucherID=v.EVoucherID  
	WHERE v.EVoucherID = @eVoucherId AND vl.ResourceKey = 'VoucherName' AND vl.LanguageID = @languageId

	SELECT MAX(v.EVoucherID) AS VoucherId,
	@voucherName AS VoucherName,
	MAX(c.CorporateID) AS CorporateID, 
	MAX(c.CorporateName) AS CorporateName,
	MAX(vbd.NoOfVouchers) AS VoucherCount,
	COUNT(esbD.EServiceBarcodeID) AS DistributionCount,
	COUNT(esbU.EServiceBarcodeID) AS DistributionUsedCoiunt
	FROM coc_EVoucher v (NOLOCK)	
	INNER JOIN coc_EVoucherBundle vb (NOLOCK) ON vb.EVoucherID = v.EVoucherID 
	INNER JOIN coc_EVoucherBundleDistribution vbd (NOLOCK) ON vbd.EVoucherBundleID = vb.EVoucherBundleID
	INNER JOIN coc_EServices s (NOLOCK) ON s.EServiceID = v.EServiceID
	INNER JOIN coc_Corporates c (NOLOCK) ON c.CorporateID = vbd.CorporateID
	INNER JOIN coc_Notifications n (NOLOCK) ON n.EServiceID = s.EServiceID
	LEFT JOIN coc_EServiceBarcodes esbD (NOLOCK) ON esbD.NotificationID = n.NotificationID 
	LEFT JOIN coc_EServiceBarcodes esbU (NOLOCK) ON esbU.NotificationID = n.NotificationID AND esbU.IsUsed=1
	WHERE v.EVoucherID = @EVoucherId 
	GROUP BY v.EVoucherID, c.CorporateID
	
END
GO
/****** Object:  StoredProcedure [dbo].[GetCityInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCityInformation]  
	@CityID INTEGER=NULL,
	@CountryID INTEGER=NULL,
	@LanguageID INTEGER =1,
	@IsActive BIT=NULL
AS 
 BEGIN 
	
	--Table 1 [CityID]
	SELECT  CU.CityID,CU.CountryID,CL.City,IsActive,CU.HasIntegration,ct.Country
		FROM [coc_Cities] CU(NOLOCK) 
			 INNER JOIN coc_CityLanguages CL(NOLOCK) ON CL.CityID=CU.CityID AND CL.LanguageID=@LanguageID
			 LEFT JOIN coc_CountryLanguages CT(NOLOCK) ON CT.CountryID=CU.CountryID AND CT.LanguageID=@LanguageID
		WHERE (@CityID IS NULL OR CU.CityID=@CityID)AND 
			  (@CountryID IS NULL OR CU.CountryID=@CountryID) AND 
			  (@IsActive IS NULL OR CU.IsActive=@IsActive) 
			  order by CU.displayorder, cl.city

	--Table 1 [CityIDLanguages]
	SELECT CityID,LanguageID,City
		FROM coc_CityLanguages CL(NOLOCK)
		WHERE (@CityID IS NULL OR CL.CityID=@CityID)


	--Table 2 [HasIntegration]
	SELECT  CU.CityID,CU.CountryID,CL.City,IsActive,CU.HasIntegration
		FROM [coc_Cities] CU(NOLOCK) 
			INNER JOIN coc_CityLanguages CL(NOLOCK) ON CL.CityID=CU.CityID AND CL.LanguageID=@LanguageID
		WHERE HasIntegration=1 AND IsActive=1
		order by CU.displayorder, cl.city
 END


GO
/****** Object:  StoredProcedure [dbo].[GetCompetitionDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCompetitionDetails]
	@EServiceID INTEGER,	
	@LanguageID INTEGER,
	@DrawID INTEGER=0
AS
SET NOCOUNT ON
	BEGIN

	    DECLARE @Counter INTEGER
		DECLARE @TypeID INTEGER

		declare @priceHeader nvarchar(100)
		declare @pricedetail nvarchar(100)
		declare @priceId INTEGER

		DECLARE @Winners AS TABLE
		(
			UniqueID INTEGER IDENTITY(1,1),
			EcouponID INTEGER,
			EServiceID INTEGER,
			DeclaredDate DATETIME,
			ECouponWinnerID INTEGER,
			MobileNumber NVARCHAR(15),
			ImageFile NVARCHAR(100),
			TypeID TINYINT,
			WinnerName NVARCHAR(100),
			PriceId INTEGER,
			MembershipID NVARCHAR(20)
		)
		
		DECLARE @WinnerList AS TABLE
		(
			ECouponID INTEGER,
			WinnerName NullName,
			PrizeType NullDescription,
			PrizeHeader NullDescription,
			PrizeDetail Remark,
			ImageFile NullDescription,
			EService Remark,
			MobileNumber NVARCHAR(15),
			MembershipID NVARCHAR(20)
		)
		
		--Table[0]			
		SELECT TOP 1 EG.EService [CompetitionName]
			FROM coc_ECoupons EC(NOLOCK)
					INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=@EServiceID
					INNER JOIN coc_EServiceLanguages EG(NOLOCK) ON EC.EServiceID=EG.EServiceID AND EG.LanguageID=@LanguageID
		
		--Tables[1] Prizes
		SELECT ECouponDrawPrizeID, edp.ECouponDrawID, edp.ECouponPrizeID, Frequency,ep.ECouponPrizeID,ed.ECouponID,PrizeTypeID,EP.ImageFile,epl.ResourceKey, epl.Value [PrizeResourceValue], edl.Value [DrawName],EC.EServiceID 
		FROM coc_ECouponDrawPrizes edp(NOLOCK)			
			INNER JOIN coc_ECouponPrizes ep (NOLOCK) ON ep.ECouponPrizeID = edp.ECouponPrizeID
			INNER JOIN coc_ECouponPrizesLanguages epl (NOLOCK) ON ep.ECouponPrizeID = epl.ECouponPrizeID  AND epl.LanguageID=@LanguageID
			INNER JOIN coc_ECouponDraw ed (NOLOCK) on ed.ECouponDrawID =edp.ECouponDrawID
			INNER JOIN coc_ECouponDrawLanguages edl (NOLOCK) ON edl.ECouponDrawID = ed.ECouponDrawID AND edl.ResourceKey ='Name' AND edl.LanguageID=@LanguageID
			INNER JOIN coc_ECoupons ec(NOLOCK) ON ed.ECouponID=ec.ECouponID
			WHERE edp.ECouponDrawID = @DrawID
			AND Frequency> (SELECT Count(*) FROM coc_ECouponWinners ew (NOLOCK) WHERE ew.ECouponDrawPrizeID = edp.ECouponDrawPrizeID)
				
		INSERT INTO @Winners(ECouponWinnerID,ECouponID ,EServiceID,DeclaredDate,MobileNumber,ImageFile,TypeID, WinnerName,PriceId,MembershipID)
		SELECT  DISTINCT TOP 6 EW.ECouponWinnerID,EC.ECouponID ,EC.EServiceID,EC.DeclaredDate,EW.MobileNumber,EW.ImageFile,EW.ConsumerType,EW.ConsumerName, EP.ECouponPrizeID, EW.MembershipID
			FROM coc_ECouponWinners EW (NOLOCK) 
				INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponPrizeID=EW.ECouponPrizeID
				INNER JOIN coc_ECoupons EC(NOLOCK) ON EP.ECouponID=EC.ECouponID
			ORDER BY EW.ECouponWinnerID DESC
		
		--SELECT * FROM @WinnerS
		
		SELECT @Counter=MIN(ECouponWinnerID) FROM @Winners
		WHILE(@Counter IS NOT NULL)
		BEGIN
		--SELECT @TypeID= TYPEID FROM @Winners WHERE ECouponWinnerID =@Counter

		SELECT @priceId= PriceId FROM @Winners WHERE ECouponWinnerID =@Counter

		
				SELECT @priceHeader = epl.Value FROM coc_ECouponDrawPrizes edp(NOLOCK)	
				INNER JOIN coc_ECouponPrizes ep (NOLOCK)  ON ep.ECouponPrizeID = edp.ECouponPrizeID
			    INNER JOIN coc_ECouponPrizesLanguages epl (NOLOCK) ON ep.ECouponPrizeID = epl.ECouponPrizeID  AND epl.LanguageID=@LanguageID
				WHERE epl.ResourceKey = 'Name' AND ep.ECouponPrizeID = @priceId

				SELECT @pricedetail =epl.Value FROM coc_ECouponDrawPrizes edp(NOLOCK)	
				INNER JOIN coc_ECouponPrizes ep (NOLOCK) ON ep.ECouponPrizeID = edp.ECouponPrizeID
			    INNER JOIN coc_ECouponPrizesLanguages epl (NOLOCK)  ON ep.ECouponPrizeID = epl.ECouponPrizeID  AND epl.LanguageID=@LanguageID
				WHERE epl.ResourceKey = 'PrizeDetail' AND ep.ECouponPrizeID = @priceId

			INSERT INTO @WinnerList
				SELECT EC.ECouponID,EC.WinnerName,'' [PrizeType],@priceHeader,@pricedetail,EC.ImageFile ,'',EC.MobileNumber, EC.MembershipID
					FROM @Winners EC 
					WHERE EC.ECouponWinnerID=@Counter	
		
					
		SELECT @Counter=MIN(ECouponWinnerID) FROM @Winners WHERE ECouponWinnerID>@Counter
		END	
		
			--Tables[3] 
		SELECT  DISTINCT * FROM @WinnerList ORDER BY ECouponID DESC 

	END
SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[GetCompetitionList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetCompetitionList]
	 @kioskLocationID INTEGER,
	 @LanguageID INTEGER=1
AS 
SET NOCOUNT ON 
	

	SELECT DISTINCT EC.EServiceID,EC.ECouponID, ES.CorporateID, EL.EService as EcouponName
		FROM coc_ECoupons EC(NOLOCK)
			LEFT JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.IsPaymentDone=1
			INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
			INNER JOIN coc_ECouponOutlets EO(NOLOCK) ON EC.ECouponID=EO.ECouponID 
			INNER JOIN coc_KioskLocationRetailOutlets KLR(NOLOCK) ON KLR.RetailOutletID = EO.RetailOutletID
			INNER JOIn coc_KioskLocations KL (NOLOCK) ON KL.KioskLocationID = KLR.KioskLocationID
	WHERE (KL.KioskLocationID =@kioskLocationID) 
		AND EC.IsActive=1 --AND ES.CorporateID=@CSUserID 
		--AND  CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)
		AND  convert(date,GETDATE()) BETWEEN convert(date,ES.FromDate)  AND  convert(date,ES.ToDate)

SET NOCOUNT OFF 

GO
/****** Object:  StoredProcedure [dbo].[GetCompetitionNames]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCompetitionNames] --1,NULL,2      
 @LanguageID INTEGER      
 ,@EServiceID INTEGER = NULL      
 ,@CorporateID INTEGER      
 ,@CompetitionID INTEGER = NULL      
AS      
BEGIN      
      
if @CorporateID = -1      
 select @CorporateID  = null      
--Tables[0] EServices      
 SELECT ES.EServiceID,ES.ServiceNumber,EL.EService+'-'+ES.ServiceNumber [EService],ES.ServiceDate, CONVERT(VARCHAR(12),ES.FromDate,103) [FromDate],CONVERT(VARCHAR(12),ES.ToDate,103) [ToDate],EC.ECouponID,      
  ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ISNULL(EC.IsActive,0) as IsActive,ISNULL(EC.IsShowMobile,0) as IsShowMobile --,ES.MessagePackTypeID [MessagePackID]      
        
   FROM coc_EServices ES(NOLOCK)       
    INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID      
    INNER JOIN coc_ECoupons  EC(NOLOCK) ON EC.EServiceID=ES.EServiceID      
    --INNER JOIN coc_MessagePackTypes MT(NOLOCK) ON ES.MessagePackTypeID=MT.MessagePackTypeID      
   WHERE(@EServiceID IS NULL OR ES.EServiceID=@EServiceID) AND      
    (@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND      
    --(@ServiceTypeID IS NULL OR ES.ServiceTypeID=@ServiceTypeID) AND      
    --(@ServiceNumber IS NULL OR ES.ServiceNumber=@ServiceNumber) AND      
    --(@ServiceSubTypeID IS NULL OR ES.ServiceSubTypeID=@ServiceSubTypeID) AND      
    (@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID)      
END 
GO
/****** Object:  StoredProcedure [dbo].[GetCompetitionNamesForUserList ]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCompetitionNamesForUserList ] @LanguageID INTEGER=1
AS
BEGIN
	SELECT ES.EServiceID                   
	,      EL.EService+'-'+ES.ServiceNumber [EService]
	,      EC.ECouponID                    
	FROM       coc_EServices         ES(NOLOCK)
	INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
	INNER JOIN coc_ECoupons          EC(NOLOCK) ON EC.EServiceID=ES.EServiceID
	WHERE ES.IsActive=1 and EC.IsActive=1
END
GO
/****** Object:  StoredProcedure [dbo].[GetCompetitionParticipants]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCompetitionParticipants]  
 @EServiceID INTEGER,  
 @LanguageID INTEGER,   
 @CurrentPage INTEGER,  
 @PageSize INTEGER,  
 @DrawID INTEGER=0,  
 @TotalRecords INTEGER OUTPUT  
AS  
  
SET NOCOUNT ON  
 BEGIN  
 if @PageSize > 200  
   set @PageSize = 200  
  DECLARE @EmailSubject [Remark]  
  DECLARE @EmailBody [Remark]  
  DECLARE @SMS [Remark]  
  DECLARE @Counter INTEGER  
  DECLARE @FirstRecord INTEGER  
  DECLARE @LastRecord INTEGER  
  DECLARE @CorporateID INTEGER  
  DECLARE @ECouponID INTEGER  
  
    SET @FirstRecord = (@CurrentPage - 1) * @PageSize  
       SET @LastRecord = (@CurrentPage * @PageSize + 1)  
  
    SELECT @CorporateID= CorporateID from coc_EServices (NOLOCK) where EServiceID=@EServiceID  
    SElECT @ECouponID = ECouponID FROM coc_ECoupons (NOLOCK) where EServiceID = @EServiceID  
  
  DECLARE @ResultTable AS TABLE  
  (  
   UniqueID INTEGER IDENTITY(1,1),  
   ECouponID INTEGER,  
   EServiceID INTEGER,  
   ConsumerID INTEGER,  
   ParticipationMobile [Mobile],  
   ParticipationEmailID [Email],  
   ConsumerName [NullName],  
   CorporateID INTEGER,  
   MembershipNumber [NullCode],  
   EmailSubject NVARCHAR(1000),  
   EmailBody NVARCHAR(1000),  
   SMS NVARCHAR(1000),  
   TypeID TINYINT  
  )  
  --drop table if exists #TempExclusionMobiles   
  IF OBJECT_ID('tempdb..#TempExclusionMobiles') IS NULL  
  create table  #TempExclusionMobiles   
  (  
   Mobile varchar(15) collate SQL_Latin1_General_CP1_CI_AS not null,  
   ECouponID INTEGER  
  )  
  
  IF OBJECT_ID('tempdb..#TempExclusionEmails') IS NULL   
  create table #TempExclusionEmails   
  (  
   EmailID varchar(100) collate SQL_Latin1_General_CP1_CI_AS not null,  
   ECouponID INTEGER  
  )  
  
--select getdate(),1  
  delete from #TempExclusionMobiles where ECouponID= @ECouponID  
  delete from #TempExclusionEmails where ECouponID= @ECouponID  
  
  insert into #TempExclusionMobiles  
   SELECT PrimaryMobile, @ECouponID FROM coc_ConsumerExclusions(NOLOCK) CEx   
         WHERE ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL)   
          OR (CEx.ECouponID = @ECouponID OR CEx.CorporateID = @CorporateID))  
          and ISNULL(PrimaryMobile,'') <> ''  
  
  insert into #TempExclusionMobiles  
   select P_EW.MobileNumber, @ECouponID from coc_ECouponWinners(NOLOCK) P_EW   
          INNER JOIN coc_ECouponDrawPrizes(NOLOCK) P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID  
          INNER JOIN coc_ECouponDraw(NOLOCK) P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID  
         where (P_ED.ECouponID = @ECouponID )  
          and ISNULL(P_EW.MobileNumber,'') <> ''  
    
  insert into #TempExclusionEmails  
   SELECT EmailID, @ECouponID FROM coc_ConsumerExclusions(NOLOCK) CEx   
         WHERE ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL)   
          OR (CEx.ECouponID = @ECouponID OR CEx.CorporateID = @CorporateID))  
          and ISNULL(EmailID,'') <> ''  
  
  insert into #TempExclusionEmails  
   select P_EW.Email, @ECouponID from coc_ECouponWinners(NOLOCK) P_EW   
          INNER JOIN coc_ECouponDrawPrizes(NOLOCK) P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID  
          INNER JOIN coc_ECouponDraw(NOLOCK) P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID  
         where (P_ED.ECouponID = @ECouponID )  
          and ISNULL(P_EW.Email,'') <> ''  
    
--select getdate(),2  
  --Get RetailOutlets for the draw.  
  --Case 1  
  --When there is no retail outlet exits or the draw does nt mean for retailoutets (Eg:Questionaire)   
  --Check EServiceID  
  --Case 2  
  --When some or all retail outets are configured for the draw   
  --Check the list of retail outlets  
    
  --Check for case 1  
  --SELECT COUNT(*) from coc_eservices   
  DECLARE @retailOutletsCount INT  
  SELECT @retailOutletsCount = Count(*) FROM coc_ECouponDrawPrizes edr (NOLOCK) WHERE edr.ECouponDrawID = @DrawID  
    
  --- Get Participants and save to @ResultTable  
    
  SELECT TOP 1 @EmailSubject=GT.TemplateTitle,@EmailBody=GT.Template   
   FROM coc_GeneralNotificationTemplates GN(NOLOCK)  
    INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID  
  WHERE TemplateTypeID=141 AND EmailUsage=1 AND LanguageID=@LanguageID  
    
  SELECT TOP 1 @SMS=GT.Template  
   FROM coc_GeneralNotificationTemplates GN(NOLOCK)  
    INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID  
  WHERE TemplateTypeID=141 AND SMSUsage=1 AND LanguageID=@LanguageID  
  
  --SELECT ROW_NUMBER() OVER(ORDER BY EC.ECouponID)id,EC.ECouponID,EC.EServiceID,EG.EService [CompetitionName],EC.WinnerCount,EC.ResultDate,EC.EntryTypeID,EL.EnumValue   
  -- FROM coc_ECoupons EC(NOLOCK)  
  --   INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  
  --   INNER JOIN coc_EServiceLanguages EG(NOLOCK) ON EC.EServiceID=EG.EServiceID AND EG.LanguageID=@LanguageID  
  --   INNER JOIN coc_EnumValues EV(NOLOCK) ON EV.EnumValueID=EC.EntryTypeID    
  --   INNER JOIN coc_EnumValueLanguages EL(NOLOCK) ON EV.EnumValueID=EL.EnumValueID AND  EL.LanguageID=@LanguageID  
  --WHERE CONVERT(VARCHAR(12),EC.ResultDate,106) <=CONVERT(VARCHAR(12),GETDATE(),106) AND EC.ResulltDeclared=0 AND ES.EServiceID=@EServiceID  
  
  INSERT INTO @ResultTable  
  SELECT DISTINCT EC.ECouponID,EC.EServiceID,EP.ConsumerID,ISNULL(EP.ParticipationMobile, CS.PrimaryMobile) ,  
    ISNULL(EP.ParticipationEmailID, CS.EmailID),IsNull(CS.FirstName,'')+' '+IsNull(CS.SecondName,'')+' '+IsNull(CS.FamilyName,'') ,ES.CorporateID,CS.MembershipNumber,  
   @EmailSubject,@EmailBody,@SMS,2  
   FROM coc_ECoupons EC(NOLOCK)  
    INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID  
    INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID  
    INNER JOIN coc_Consumers CS(NOLOCK) ON EP.ConsumerID=CS.ConsumerID  
--WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0  
   WHERE ES.EServiceID = @EServiceID  
  --AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx WHERE CEx.PrimaryMobile =  ISNULL(EP.ParticipationMobile,CS.PrimaryMobile) OR  
  --                 CEx.PrimaryMobile =  CS.SecondaryMobile OR  
  --                 CEx.EmailID=ISNULL(EP.ParticipationEmailID, CS.EmailID) OR  
  --                 CEx.FacebookID= CS.FacebookID OR  
  --                 CEx.TwitterID = CS.TwitterID OR  
  --                 CEx.OutlookID = CS.OutlookID OR  
  --                 CEx.YahooID = CS.YahooID OR  
  --                 CEx.MembershipNumber = CS.MembershipNumber OR  
  --                 CEx.GmailID = CS.GmailID OR  
  --                 CEx.IqamaNumber = CS.IqamaNumber OR  
  --                 CEx.PrimaryMobile = ISNULL(EP.ParticipationMobile, CS.PrimaryMobile) OR   
  --                 CEx.EmailID = ISNULL(EP.ParticipationEmailID, CS.EmailID)  
  --                  AND  
  --                 ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR   
  --                     (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))  
  ----AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = ISNULL(EP.ParticipationMobile,CS.PrimaryMobile)   
  ----    OR  (ISNULL(EW.Email,'') <> '' and EW.Email = ISNULL(EP.ParticipationEmailID, CS.EmailID)) )  
  --AND Not Exists(select 1 from coc_ECouponWinners(NOLOCK) P_EW   
  --  INNER JOIN coc_ECouponDrawPrizes(NOLOCK) P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID  
  --  INNER JOIN coc_ECouponDraw(NOLOCK) P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID  
  --  where (P_EW.MobileNumber = ISNULL(EP.ParticipationMobile,CS.PrimaryMobile)   
  --    OR  (ISNULL(P_EW.Email,'') <> '' and P_EW.Email = ISNULL(EP.ParticipationEmailID, CS.EmailID))) and   
  --    P_ED.ECouponID = EP.ECouponID )  
  AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes(NOLOCK) edr WHERE  edr.ECouponDrawID = @DrawID))  
     
--select getdate(),3   
  INSERT INTO @ResultTable  
  SELECT DISTINCT EC.ECouponID,EC.EServiceID,EP.ConsumerID,ISNULL(EP.ParticipationMobile,GS.PrimaryMobile),  
    ISNULL(EP.ParticipationEmailID, GS.EmailID),GS.FullName ,ES.CorporateID,GS.PrimaryMobile,  
   @EmailSubject,@EmailBody,@SMS,2  
   FROM coc_ECoupons EC(NOLOCK)  
    INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID  
    INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID  
    INNER JOIN coc_Guests GS(NOLOCK) ON EP.GuestID=GS.GuestID  
  --WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0  
  WHERE ES.EServiceID = @EServiceID  
  --AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions(NOLOCK) CEx WHERE CEx.PrimaryMobile =  ISNULL(EP.ParticipationMobile,GS.PrimaryMobile) OR  
  --                 CEx.EmailID=ISNULL(EP.ParticipationEmailID, GS.EmailID)   
  --                  AND  
  --                 ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR   
  --                     (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))  
  ----AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = ISNULL(EP.ParticipationMobile,GS.PrimaryMobile)   
  ----    OR  (ISNULL(EW.Email,'') <> '' and EW.Email = ISNULL(EP.ParticipationEmailID, GS.EmailID)) )  
  --AND Not Exists(select 1 from coc_ECouponWinners(NOLOCK) P_EW   
  --  INNER JOIN coc_ECouponDrawPrizes P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID  
  --  INNER JOIN coc_ECouponDraw P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID  
  --  where (P_EW.MobileNumber = ISNULL(EP.ParticipationMobile,GS.PrimaryMobile)   
  --    OR  (ISNULL(P_EW.Email,'') <> '' and P_EW.Email = ISNULL(EP.ParticipationEmailID, GS.EmailID))) and   
  --    P_ED.ECouponID = EP.ECouponID )  
  AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select  Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes(NOLOCK) edr WHERE  edr.ECouponDrawID = @DrawID))  
  
  --INSERT INTO @ResultTable  
  --SELECT DISTINCT EC.ECouponID,EC.EServiceID,EP.GuestParticipationID,EP.Mobile,NULL,EP.GuestName ,ES.CorporateID,NULL,  
  -- @EmailSubject,@EmailBody,@SMS,1  
  -- FROM coc_ECoupons EC(NOLOCK)  
  --  INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID  
  --  INNER JOIN coc_Notifications NF(NOLOCK) ON ES.EServiceID=NF.EServiceID  
  --  INNER JOIN coc_EServiceBarcodes EB(NOLOCK) ON EB.NotificationID=NF.NotificationID   
  --              AND EB.CorporateID=@CorporateID AND EB.ConsumerID IS NULL  
  --  INNER JOIN coc_GuestParticipations EP(NOLOCK) ON EB.AsignedMoile=EP.Mobile  
  ----WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0  
  -- WHERE ES.EServiceID = @EServiceID  
  --  AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions(NOLOCK) CEx WHERE CEx.PrimaryMobile =  EP.Mobile AND     
  --                 ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR   
  --                     (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))  
  --AND Not Exists(select 1 from coc_ECouponWinners(NOLOCK) EW where EW.MobileNumber = EP.Mobile)  
  --AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select RetailOutletID FROM coc_ECouponDrawRetailOutlets(NOLOCK) edr WHERE  edr.ECoponDrawID = @DrawID))  
  
   --INSERT INTO @ResultTable  
   --SELECT DISTINCT EC.ECouponID,EC.EServiceID,EI.AddUserID,EI.MobileNumber,EP.ParticipationEmailID,ED.InvoiceNumber,ES.CorporateID,EI.MobileNumber,  
   --@EmailSubject,@EmailBody,@SMS,0  
   --FROM coc_ECoupons EC(NOLOCK)  
   -- INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID  
   -- INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID  
   -- INNER JOIN coc_ECouponInvoices EI(NOLOCK) ON EP.ECouponID=EI.ECouponID AND EI.ConsumerID IS NULL  
   -- Inner JOIN  coc_ECouponInvoiceDetails ED(NOLOCK) ON EI.ECouponInvoiceID=ED.ECouponInvoiceID   
   --WHERE ES.EServiceID = @EServiceID  
   --AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions(NOLOCK) CEx WHERE CEx.PrimaryMobile =  EP.ParticipationMobile OR   
   --                  CEx.EmailID= EP.ParticipationEmailID AND     
   --                        ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR   
   --                            (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))  
--if @EServiceID= 1  
--INSERT INTO @ResultTable  
--  SELECT DISTINCT 1,1,NULL,mobile , email, name, 1,substring(mobile,5,len(mobile)),  
--   @EmailSubject,@EmailBody,@SMS,1  
--  from tmp_data  
--select getdate(),4  
  if @EServiceID = 246 or isnull(@ECouponID,0) = 10184  
   DELETE FROM  @ResultTable where ParticipationMobile is null or  len(ParticipationMobile) < 10  
  else  
   DELETE FROM  @ResultTable where ParticipationMobile is null or  len(ParticipationMobile) <> 14  
    
  DELETE FROM  @ResultTable where ConsumerName like '%?%' or ParticipationMobile like '%?%'  
  DELETE FROM  @ResultTable where ConsumerName like '%jjjj%'   
  DELETE FROM  @ResultTable where ConsumerName like '%0%' or ConsumerName like '%1%' or ConsumerName like '%2%' or ConsumerName like '%3%' or ConsumerName like '%4%' or ConsumerName like '%5%' or ConsumerName like '%6%' or ConsumerName like '%7%' or ConsumerName like '%8%' or ConsumerName like '%9%'  
--select getdate(),5  
  DELETE FROM  @ResultTable where ParticipationMobile in (select Mobile from #TempExclusionMobiles)  
--select getdate(),6  
  DELETE FROM  @ResultTable where ParticipationEmailID in (select EmailID from #TempExclusionEmails)  
--select getdate(),7  
  SELECT  @TotalRecords = COUNT(*) FROM @ResultTable  
  ;WITH Participants AS  
  (  
   SELECT ROW_NUMBER() OVER (ORDER BY ECouponID ) AS Rowc, * FROM @ResultTable   
  )  
  (SELECT   
   UniqueID ,   
   ECouponID ,   
   EServiceID ,  
   ConsumerID ,  
   '' as ParticipationMobile,  
   ParticipationEmailID,  
   ConsumerName,  
   CorporateID ,  
   '' as MembershipNumber,  
   EmailSubject ,  
   EmailBody ,  
   SMS ,  
   TypeID FROM  Participants   
  
   WHERE Rowc BETWEEN @FirstRecord AND @LastRecord)  
   order by NEWID()  
 END  
 --select getdate()  
SET NOCOUNT OFF  
  
  
-------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
GO
/****** Object:  StoredProcedure [dbo].[GetCompetitionParticipants_back]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCompetitionParticipants_back]
	@EServiceID INTEGER,
	@LanguageID INTEGER,	
	@CurrentPage INTEGER,
	@PageSize INTEGER,
	@DrawID INTEGER=0,
	@TotalRecords INTEGER OUTPUT
AS

SET NOCOUNT ON
	BEGIN
	if @PageSize > 100
			set @PageSize = 100
		DECLARE @EmailSubject [Remark]
		DECLARE @EmailBody [Remark]
		DECLARE @SMS [Remark]
		DECLARE @Counter INTEGER
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		DECLARE @CorporateID INTEGER

	   SET @FirstRecord = (@CurrentPage - 1) * @PageSize
       SET @LastRecord = (@CurrentPage * @PageSize + 1)

	   SELECT @CorporateID= CorporateID from coc_EServices (NOLOCK) where EServiceID=@EServiceID

		DECLARE @ResultTable AS TABLE
		(
			UniqueID INTEGER IDENTITY(1,1),
			ECouponID INTEGER,
			EServiceID INTEGER,
			ConsumerID INTEGER,
			ParticipationMobile [Mobile],
			ParticipationEmailID [Email],
			ConsumerName [NullName],
			CorporateID INTEGER,
			MembershipNumber [NullCode],
			EmailSubject NVARCHAR(1000),
			EmailBody NVARCHAR(1000),
			SMS NVARCHAR(1000),
			TypeID TINYINT
		)
			
		--Get RetailOutlets for the draw.
		--Case 1
		--When there is no retail outlet exits or the draw does nt mean for retailoutets (Eg:Questionaire) 
		--Check EServiceID
		--Case 2
		--When some or all retail outets are configured for the draw 
		--Check the list of retail outlets
		
		--Check for case 1
		--SELECT COUNT(*) from coc_eservices 
		DECLARE @retailOutletsCount INT
		SELECT @retailOutletsCount = Count(*) FROM coc_ECouponDrawPrizes edr (NOLOCK) WHERE edr.ECouponDrawID = @DrawID
		
		--- Get Participants and save to @ResultTable
		
		SELECT TOP 1 @EmailSubject=GT.TemplateTitle,@EmailBody=GT.Template 
			FROM coc_GeneralNotificationTemplates GN(NOLOCK)
				INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID
		WHERE TemplateTypeID=141 AND EmailUsage=1 AND LanguageID=@LanguageID
		
		SELECT TOP 1 @SMS=GT.Template
			FROM coc_GeneralNotificationTemplates GN(NOLOCK)
				INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID
		WHERE TemplateTypeID=141 AND SMSUsage=1 AND LanguageID=@LanguageID

		--SELECT ROW_NUMBER() OVER(ORDER BY EC.ECouponID)id,EC.ECouponID,EC.EServiceID,EG.EService [CompetitionName],EC.WinnerCount,EC.ResultDate,EC.EntryTypeID,EL.EnumValue 
		--	FROM coc_ECoupons EC(NOLOCK)
		--			INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID
		--			INNER JOIN coc_EServiceLanguages EG(NOLOCK) ON EC.EServiceID=EG.EServiceID AND EG.LanguageID=@LanguageID
		--			INNER JOIN coc_EnumValues EV(NOLOCK) ON EV.EnumValueID=EC.EntryTypeID  
		--			INNER JOIN coc_EnumValueLanguages EL(NOLOCK) ON EV.EnumValueID=EL.EnumValueID AND  EL.LanguageID=@LanguageID
		--WHERE CONVERT(VARCHAR(12),EC.ResultDate,106) <=CONVERT(VARCHAR(12),GETDATE(),106) AND EC.ResulltDeclared=0 AND ES.EServiceID=@EServiceID

		INSERT INTO @ResultTable
		SELECT DISTINCT EC.ECouponID,EC.EServiceID,EP.ConsumerID,ISNULL(EP.ParticipationMobile, CS.PrimaryMobile) ,
				ISNULL(EP.ParticipationEmailID, CS.EmailID),CS.FirstName+' '+CS.SecondName+' '+CS.FamilyName ,ES.CorporateID,CS.MembershipNumber,
			@EmailSubject,@EmailBody,@SMS,2
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID
				INNER JOIN coc_Consumers CS(NOLOCK) ON EP.ConsumerID=CS.ConsumerID
--WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0
			WHERE ES.EServiceID = @EServiceID
		AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx (NOLOCK) WHERE CEx.PrimaryMobile =  ISNULL(EP.ParticipationMobile,CS.PrimaryMobile) OR
																	  CEx.PrimaryMobile =  CS.SecondaryMobile OR
																	  CEx.EmailID=ISNULL(EP.ParticipationEmailID, CS.EmailID) OR
																	  CEx.FacebookID= CS.FacebookID OR
																	  CEx.TwitterID = CS.TwitterID OR
																	  CEx.OutlookID = CS.OutlookID OR
																	  CEx.YahooID = CS.YahooID OR
																	  CEx.MembershipNumber = CS.MembershipNumber OR
																	  CEx.GmailID = CS.GmailID OR
																	  CEx.IqamaNumber = CS.IqamaNumber OR
																	  CEx.PrimaryMobile = ISNULL(EP.ParticipationMobile, CS.PrimaryMobile) OR 
																	  CEx.EmailID = ISNULL(EP.ParticipationEmailID, CS.EmailID)
																	   AND
																	  ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
    																   (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))
		--AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = ISNULL(EP.ParticipationMobile,CS.PrimaryMobile) 
		--				OR  (ISNULL(EW.Email,'') <> '' and EW.Email = ISNULL(EP.ParticipationEmailID, CS.EmailID)) )
		AND Not Exists(select 1 from coc_ECouponWinners(NOLOCK) P_EW 
				INNER JOIN coc_ECouponDrawPrizes(NOLOCK) P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID
				INNER JOIN coc_ECouponDraw(NOLOCK) P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID
				where (P_EW.MobileNumber = ISNULL(EP.ParticipationMobile,CS.PrimaryMobile) 
						OR  (ISNULL(P_EW.Email,'') <> '' and P_EW.Email = ISNULL(EP.ParticipationEmailID, CS.EmailID))) and 
						P_ED.ECouponID = EP.ECouponID )
		AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes(NOLOCK) edr WHERE  edr.ECouponDrawID = @DrawID))
			
		
		INSERT INTO @ResultTable
		SELECT DISTINCT EC.ECouponID,EC.EServiceID,EP.ConsumerID,ISNULL(EP.ParticipationMobile,GS.PrimaryMobile),
				ISNULL(EP.ParticipationEmailID, GS.EmailID),GS.FullName ,ES.CorporateID,GS.PrimaryMobile,
			@EmailSubject,@EmailBody,@SMS,2
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID
				INNER JOIN coc_Guests GS(NOLOCK) ON EP.GuestID=GS.GuestID
		--WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0
		WHERE ES.EServiceID = @EServiceID
		AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions(NOLOCK) CEx WHERE CEx.PrimaryMobile =  ISNULL(EP.ParticipationMobile,GS.PrimaryMobile) OR
																	  CEx.EmailID=ISNULL(EP.ParticipationEmailID, GS.EmailID) 
																	   AND
																	  ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
    																   (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))
		--AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = ISNULL(EP.ParticipationMobile,GS.PrimaryMobile) 
		--				OR  (ISNULL(EW.Email,'') <> '' and EW.Email = ISNULL(EP.ParticipationEmailID, GS.EmailID)) )
		AND Not Exists(select 1 from coc_ECouponWinners(NOLOCK) P_EW 
				INNER JOIN coc_ECouponDrawPrizes P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID
				INNER JOIN coc_ECouponDraw P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID
				where (P_EW.MobileNumber = ISNULL(EP.ParticipationMobile,GS.PrimaryMobile) 
						OR  (ISNULL(P_EW.Email,'') <> '' and P_EW.Email = ISNULL(EP.ParticipationEmailID, GS.EmailID))) and 
						P_ED.ECouponID = EP.ECouponID )
		AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes(NOLOCK) edr WHERE  edr.ECouponDrawID = @DrawID))

		INSERT INTO @ResultTable
		SELECT DISTINCT EC.ECouponID,EC.EServiceID,EP.GuestParticipationID,EP.Mobile,NULL,EP.GuestName ,ES.CorporateID,NULL,
			@EmailSubject,@EmailBody,@SMS,1
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_Notifications NF(NOLOCK) ON ES.EServiceID=NF.EServiceID
				INNER JOIN coc_EServiceBarcodes EB(NOLOCK) ON EB.NotificationID=NF.NotificationID 
																AND EB.CorporateID=@CorporateID AND EB.ConsumerID IS NULL
				INNER JOIN coc_GuestParticipations EP(NOLOCK) ON EB.AsignedMoile=EP.Mobile
		--WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0
			WHERE ES.EServiceID = @EServiceID
		 	AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions(NOLOCK) CEx WHERE CEx.PrimaryMobile =  EP.Mobile AND			
																	  ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
    																   (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))
		AND Not Exists(select 1 from coc_ECouponWinners(NOLOCK) EW where EW.MobileNumber = EP.Mobile)
		AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes(NOLOCK) edr WHERE  edr.ECouponDrawID = @DrawID))

		 INSERT INTO @ResultTable
		 SELECT DISTINCT EC.ECouponID,EC.EServiceID,EI.AddUserID,EI.MobileNumber,EP.ParticipationEmailID,ED.InvoiceNumber,ES.CorporateID,EI.MobileNumber,
			@EmailSubject,@EmailBody,@SMS,0
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID
				INNER JOIN coc_ECouponInvoices EI(NOLOCK) ON EP.ECouponID=EI.ECouponID AND EI.ConsumerID IS NULL
				Inner JOIN  coc_ECouponInvoiceDetails ED(NOLOCK) ON EI.ECouponInvoiceID=ED.ECouponInvoiceID 
			WHERE ES.EServiceID = @EServiceID
			AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions(NOLOCK) CEx WHERE CEx.PrimaryMobile =  EP.ParticipationMobile OR 
																			  CEx.EmailID= EP.ParticipationEmailID AND			
																	          ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
    																           (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))
--if @EServiceID= 1
--INSERT INTO @ResultTable
--		SELECT DISTINCT 1,1,NULL,mobile , email, name, 1,substring(mobile,5,len(mobile)),
--			@EmailSubject,@EmailBody,@SMS,1
--		from tmp_data

		DELETE FROM  @ResultTable where ParticipationMobile is null or  len(ParticipationMobile) <> 14
		DELETE FROM  @ResultTable where ConsumerName like '%?%' or ParticipationMobile like '%?%'
		DELETE FROM  @ResultTable where ConsumerName like '%jjjj%' 
		DELETE FROM  @ResultTable where ConsumerName like '%0%' or ConsumerName like '%1%' or ConsumerName like '%2%' or ConsumerName like '%3%' or ConsumerName like '%4%' or ConsumerName like '%5%' or ConsumerName like '%6%' or ConsumerName like '%7%' or ConsumerName like '%8%' or ConsumerName like '%9%'

		SELECT  @TotalRecords = COUNT(*) FROM @ResultTable
		;WITH Participants AS
		(
			SELECT ROW_NUMBER() OVER (ORDER BY ECouponID ) AS Rowc, * FROM @ResultTable	
		)
		(SELECT 
			UniqueID ,	
			ECouponID , 
			EServiceID ,
			ConsumerID ,
			'' as ParticipationMobile,
			ParticipationEmailID,
			ConsumerName,
			CorporateID ,
			'' as MembershipNumber,
			EmailSubject ,
			EmailBody ,
			SMS ,
			TypeID FROM  Participants 

			WHERE Rowc BETWEEN @FirstRecord AND @LastRecord)
			order by NEWID()
	END
SET NOCOUNT OFF


---------------------------------------------------------------------------------------------------------------------------------------------------------------


GO
/****** Object:  StoredProcedure [dbo].[GetCompetitionParticipants_faster]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCompetitionParticipants_faster]
	@EServiceID INTEGER,
	@LanguageID INTEGER,	
	@CurrentPage INTEGER,
	@PageSize INTEGER,
	@DrawID INTEGER=0,
	@TotalRecords INTEGER OUTPUT
AS

SET NOCOUNT ON
	BEGIN
	if @PageSize > 100
			set @PageSize = 100
		DECLARE @EmailSubject [Remark]
		DECLARE @EmailBody [Remark]
		DECLARE @SMS [Remark]
		DECLARE @Counter INTEGER
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		DECLARE @CorporateID INTEGER

	   SET @FirstRecord = (@CurrentPage - 1) * @PageSize
       SET @LastRecord = (@CurrentPage * @PageSize + 1)

	   SELECT @CorporateID= CorporateID from coc_EServices (NOLOCK) where EServiceID=@EServiceID

		DECLARE @ResultTable AS TABLE
		(
			UniqueID INTEGER IDENTITY(1,1),
			ECouponID INTEGER,
			EServiceID INTEGER,
			ConsumerID INTEGER,
			ParticipationMobile [Mobile],
			ParticipationEmailID [Email],
			ConsumerName [NullName],
			CorporateID INTEGER,
			MembershipNumber [NullCode],
			EmailSubject NVARCHAR(1000),
			EmailBody NVARCHAR(1000),
			SMS NVARCHAR(1000),
			TypeID TINYINT
		)
			
		--Get RetailOutlets for the draw.
		--Case 1
		--When there is no retail outlet exits or the draw does nt mean for retailoutets (Eg:Questionaire) 
		--Check EServiceID
		--Case 2
		--When some or all retail outets are configured for the draw 
		--Check the list of retail outlets
		
		--Check for case 1
		--SELECT COUNT(*) from coc_eservices 
		DECLARE @retailOutletsCount INT
		SELECT @retailOutletsCount = Count(*) FROM coc_ECouponDrawPrizes edr (NOLOCK) WHERE edr.ECouponDrawID = @DrawID
		
		--- Get Participants and save to @ResultTable
		
		SELECT TOP 1 @EmailSubject=GT.TemplateTitle,@EmailBody=GT.Template 
			FROM coc_GeneralNotificationTemplates GN(NOLOCK)
				INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID
		WHERE TemplateTypeID=141 AND EmailUsage=1 AND LanguageID=@LanguageID
		
		SELECT TOP 1 @SMS=GT.Template
			FROM coc_GeneralNotificationTemplates GN(NOLOCK)
				INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID
		WHERE TemplateTypeID=141 AND SMSUsage=1 AND LanguageID=@LanguageID

		--SELECT ROW_NUMBER() OVER(ORDER BY EC.ECouponID)id,EC.ECouponID,EC.EServiceID,EG.EService [CompetitionName],EC.WinnerCount,EC.ResultDate,EC.EntryTypeID,EL.EnumValue 
		--	FROM coc_ECoupons EC(NOLOCK)
		--			INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID
		--			INNER JOIN coc_EServiceLanguages EG(NOLOCK) ON EC.EServiceID=EG.EServiceID AND EG.LanguageID=@LanguageID
		--			INNER JOIN coc_EnumValues EV(NOLOCK) ON EV.EnumValueID=EC.EntryTypeID  
		--			INNER JOIN coc_EnumValueLanguages EL(NOLOCK) ON EV.EnumValueID=EL.EnumValueID AND  EL.LanguageID=@LanguageID
		--WHERE CONVERT(VARCHAR(12),EC.ResultDate,106) <=CONVERT(VARCHAR(12),GETDATE(),106) AND EC.ResulltDeclared=0 AND ES.EServiceID=@EServiceID

		INSERT INTO @ResultTable
		SELECT DISTINCT top 1000 EC.ECouponID,EC.EServiceID,EP.ConsumerID,ISNULL(EP.ParticipationMobile, CS.PrimaryMobile) ,
				ISNULL(EP.ParticipationEmailID, CS.EmailID),CS.FirstName+' '+CS.SecondName+' '+CS.FamilyName ,ES.CorporateID,CS.MembershipNumber,
			@EmailSubject,@EmailBody,@SMS,2
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID
				INNER JOIN coc_Consumers CS(NOLOCK) ON EP.ConsumerID=CS.ConsumerID
--WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0
			WHERE ES.EServiceID = @EServiceID
		AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx WHERE CEx.PrimaryMobile =  ISNULL(EP.ParticipationMobile,CS.PrimaryMobile) OR
																	  CEx.PrimaryMobile =  CS.SecondaryMobile OR
																	  CEx.EmailID=ISNULL(EP.ParticipationEmailID, CS.EmailID) OR
																	  
																	  CEx.MembershipNumber = CS.MembershipNumber OR
																	  
																	  CEx.IqamaNumber = CS.IqamaNumber OR
																	  CEx.EmailID = ISNULL(EP.ParticipationEmailID, CS.EmailID)
																	   AND
																	  ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
    																   (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))
		--AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = ISNULL(EP.ParticipationMobile,CS.PrimaryMobile) 
		--				OR  (ISNULL(EW.Email,'') <> '' and EW.Email = ISNULL(EP.ParticipationEmailID, CS.EmailID)) )
		--AND Not Exists(select 1 from coc_ECouponWinners(NOLOCK) P_EW 
		--		INNER JOIN coc_ECouponDrawPrizes(NOLOCK) P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID
		--		INNER JOIN coc_ECouponDraw(NOLOCK) P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID
		--		where (P_EW.MobileNumber = ISNULL(EP.ParticipationMobile,CS.PrimaryMobile) 
		--				OR  (ISNULL(P_EW.Email,'') <> '' and P_EW.Email = ISNULL(EP.ParticipationEmailID, CS.EmailID))) and 
		--				P_ED.ECouponID = EP.ECouponID )
		AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes(NOLOCK) edr WHERE  edr.ECouponDrawID = @DrawID))
			
		
		INSERT INTO @ResultTable
		SELECT DISTINCT top 1000 EC.ECouponID,EC.EServiceID,EP.ConsumerID,ISNULL(EP.ParticipationMobile,GS.PrimaryMobile),
				ISNULL(EP.ParticipationEmailID, GS.EmailID),GS.FullName ,ES.CorporateID,GS.PrimaryMobile,
			@EmailSubject,@EmailBody,@SMS,2
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID
				INNER JOIN coc_Guests GS(NOLOCK) ON EP.GuestID=GS.GuestID
		--WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0
		WHERE ES.EServiceID = @EServiceID
		AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions(NOLOCK) CEx WHERE CEx.PrimaryMobile =  ISNULL(EP.ParticipationMobile,GS.PrimaryMobile) OR
																	  CEx.EmailID=ISNULL(EP.ParticipationEmailID, GS.EmailID) 
																	   AND
																	  ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
    																   (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))
		--AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = ISNULL(EP.ParticipationMobile,GS.PrimaryMobile) 
		--				OR  (ISNULL(EW.Email,'') <> '' and EW.Email = ISNULL(EP.ParticipationEmailID, GS.EmailID)) )
		--AND Not Exists(select 1 from coc_ECouponWinners(NOLOCK) P_EW 
		--		INNER JOIN coc_ECouponDrawPrizes P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID
		--		INNER JOIN coc_ECouponDraw P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID
		--		where (P_EW.MobileNumber = ISNULL(EP.ParticipationMobile,GS.PrimaryMobile) 
		--				OR  (ISNULL(P_EW.Email,'') <> '' and P_EW.Email = ISNULL(EP.ParticipationEmailID, GS.EmailID))) and 
		--				P_ED.ECouponID = EP.ECouponID )
		AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes(NOLOCK) edr WHERE  edr.ECouponDrawID = @DrawID))

		INSERT INTO @ResultTable
		SELECT DISTINCT top 1000 EC.ECouponID,EC.EServiceID,EP.GuestParticipationID,EP.Mobile,NULL,EP.GuestName ,ES.CorporateID,NULL,
			@EmailSubject,@EmailBody,@SMS,1
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_Notifications NF(NOLOCK) ON ES.EServiceID=NF.EServiceID
				INNER JOIN coc_EServiceBarcodes EB(NOLOCK) ON EB.NotificationID=NF.NotificationID 
																AND EB.CorporateID=@CorporateID AND EB.ConsumerID IS NULL
				INNER JOIN coc_GuestParticipations EP(NOLOCK) ON EB.AsignedMoile=EP.Mobile
		--WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0
			WHERE ES.EServiceID = @EServiceID
		 	AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions(NOLOCK) CEx WHERE CEx.PrimaryMobile =  EP.Mobile AND			
																	  ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
    																   (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))
		--AND Not Exists(select 1 from coc_ECouponWinners(NOLOCK) EW where EW.MobileNumber = EP.Mobile)
		AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes(NOLOCK) edr WHERE  edr.ECouponDrawID = @DrawID))

		 INSERT INTO @ResultTable
		 SELECT DISTINCT EC.ECouponID,EC.EServiceID,EI.AddUserID,EI.MobileNumber,EP.ParticipationEmailID,ED.InvoiceNumber,ES.CorporateID,EI.MobileNumber,
			@EmailSubject,@EmailBody,@SMS,0
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID
				INNER JOIN coc_ECouponInvoices EI(NOLOCK) ON EP.ECouponID=EI.ECouponID AND EI.ConsumerID IS NULL
				Inner JOIN  coc_ECouponInvoiceDetails ED(NOLOCK) ON EI.ECouponInvoiceID=ED.ECouponInvoiceID 
			WHERE ES.EServiceID = @EServiceID
			AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions(NOLOCK) CEx WHERE CEx.PrimaryMobile =  EP.ParticipationMobile OR 
																			  CEx.EmailID= EP.ParticipationEmailID AND			
																	          ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
    																           (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))
--if @EServiceID= 1
--INSERT INTO @ResultTable
--		SELECT DISTINCT 1,1,NULL,mobile , email, name, 1,substring(mobile,5,len(mobile)),
--			@EmailSubject,@EmailBody,@SMS,1
--		from tmp_data
		if @EServiceID = 246 --or isnull(@ECouponID,0) = 10184
			DELETE FROM  @ResultTable where ParticipationMobile is null or  len(ParticipationMobile) < 10
		else
			DELETE FROM  @ResultTable where ParticipationMobile is null or  len(ParticipationMobile) <> 14
		
		DELETE FROM  @ResultTable where ConsumerName like '%?%' or ParticipationMobile like '%?%'
		DELETE FROM  @ResultTable where ConsumerName like '%jjjj%' 
		DELETE FROM  @ResultTable where ConsumerName like '%0%' or ConsumerName like '%1%' or ConsumerName like '%2%' or ConsumerName like '%3%' or ConsumerName like '%4%' or ConsumerName like '%5%' or ConsumerName like '%6%' or ConsumerName like '%7%' or ConsumerName like '%8%' or ConsumerName like '%9%'

		SELECT  @TotalRecords = COUNT(*) FROM @ResultTable
		;WITH Participants AS
		(
			SELECT ROW_NUMBER() OVER (ORDER BY ECouponID ) AS Rowc, * FROM @ResultTable	
		)
		(SELECT 
			UniqueID ,	
			ECouponID , 
			EServiceID ,
			ConsumerID ,
			'' as ParticipationMobile,
			ParticipationEmailID,
			ConsumerName,
			CorporateID ,
			'' as MembershipNumber,
			EmailSubject ,
			EmailBody ,
			SMS ,
			TypeID FROM  Participants 

			WHERE Rowc BETWEEN @FirstRecord AND @LastRecord)
			order by NEWID()
	END
SET NOCOUNT OFF


---------------------------------------------------------------------------------------------------------------------------------------------------------


GO
/****** Object:  StoredProcedure [dbo].[GetCompetitionParticipants_ForResults]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCompetitionParticipants_ForResults]
	@EServiceID INTEGER,
	@LanguageID INTEGER,	
	@CurrentPage INTEGER,
	@PageSize INTEGER,
	@DrawID INTEGER=0,
	@TotalRecords INTEGER OUTPUT
AS

SET NOCOUNT ON
	BEGIN
		DECLARE @EmailSubject [Remark]
		DECLARE @EmailBody [Remark]
		DECLARE @SMS [Remark]
		DECLARE @Counter INTEGER
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		DECLARE @CorporateID INTEGER

	   SET @FirstRecord = (@CurrentPage - 1) * @PageSize
       SET @LastRecord = (@CurrentPage * @PageSize + 1)

	   SELECT @CorporateID= CorporateID from coc_EServices(NOLOCK) where EServiceID=@EServiceID

		DECLARE @ResultTable AS TABLE
		(
			UniqueID INTEGER IDENTITY(1,1),
			ECouponID INTEGER,
			Barcode nvarchar(100), 
			EServiceID INTEGER,
			ConsumerID INTEGER,
			ParticipationMobile [Mobile],
			ParticipationEmailID [Email],
			ConsumerName [NullName],
			CorporateID INTEGER,
			MembershipNumber [NullCode],
			EmailSubject NVARCHAR(1000),
			EmailBody NVARCHAR(1000),
			SMS NVARCHAR(1000),
			TypeID TINYINT
		)
			
		--Get RetailOutlets for the draw.
		--Case 1
		--When there is no retail outlet exits or the draw does nt mean for retailoutets (Eg:Questionaire) 
		--Check EServiceID
		--Case 2
		--When some or all retail outets are configured for the draw 
		--Check the list of retail outlets
		
		--Check for case 1
		--SELECT COUNT(*) from coc_eservices 
		DECLARE @retailOutletsCount INT
		SELECT @retailOutletsCount = Count(*) FROM coc_ECouponDrawPrizes(NOLOCK) edr WHERE edr.ECouponDrawID = @DrawID
		
		--- Get Participants and save to @ResultTable
		
		SELECT TOP 1 @EmailSubject=GT.TemplateTitle,@EmailBody=GT.Template 
			FROM coc_GeneralNotificationTemplates GN(NOLOCK)
				INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID
		WHERE TemplateTypeID=141 AND EmailUsage=1 AND LanguageID=@LanguageID
		
		SELECT TOP 1 @SMS=GT.Template
			FROM coc_GeneralNotificationTemplates GN(NOLOCK)
				INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID
		WHERE TemplateTypeID=141 AND SMSUsage=1 AND LanguageID=@LanguageID

		--SELECT ROW_NUMBER() OVER(ORDER BY EC.ECouponID)id,EC.ECouponID,EC.EServiceID,EG.EService [CompetitionName],EC.WinnerCount,EC.ResultDate,EC.EntryTypeID,EL.EnumValue 
		--	FROM coc_ECoupons EC(NOLOCK)
		--			INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID
		--			INNER JOIN coc_EServiceLanguages EG(NOLOCK) ON EC.EServiceID=EG.EServiceID AND EG.LanguageID=@LanguageID
		--			INNER JOIN coc_EnumValues EV(NOLOCK) ON EV.EnumValueID=EC.EntryTypeID  
		--			INNER JOIN coc_EnumValueLanguages EL(NOLOCK) ON EV.EnumValueID=EL.EnumValueID AND  EL.LanguageID=@LanguageID
		--WHERE CONVERT(VARCHAR(12),EC.ResultDate,106) <=CONVERT(VARCHAR(12),GETDATE(),106) AND EC.ResulltDeclared=0 AND ES.EServiceID=@EServiceID

		INSERT INTO @ResultTable
		SELECT DISTINCT EC.ECouponID,EP.Barcode,EC.EServiceID,EP.ConsumerID,ISNULL(EP.ParticipationMobile, CS.PrimaryMobile) ,
				ISNULL(EP.ParticipationEmailID, CS.EmailID),CS.FirstName+' '+CS.SecondName+' '+CS.FamilyName ,ES.CorporateID,CS.MembershipNumber,
			@EmailSubject,@EmailBody,@SMS,2
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID
				INNER JOIN coc_Consumers CS(NOLOCK) ON EP.ConsumerID=CS.ConsumerID
--WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0
			WHERE ES.EServiceID = @EServiceID
		AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions(NOLOCK) CEx WHERE CEx.PrimaryMobile =  ISNULL(EP.ParticipationMobile,CS.PrimaryMobile) OR
																	  CEx.PrimaryMobile =  CS.SecondaryMobile OR
																	  CEx.EmailID=ISNULL(EP.ParticipationEmailID, CS.EmailID) OR
																	  CEx.FacebookID= CS.FacebookID OR
																	  CEx.TwitterID = CS.TwitterID OR
																	  CEx.OutlookID = CS.OutlookID OR
																	  CEx.YahooID = CS.YahooID OR
																	  CEx.MembershipNumber = CS.MembershipNumber OR
																	  CEx.GmailID = CS.GmailID OR
																	  CEx.IqamaNumber = CS.IqamaNumber OR
																	  CEx.PrimaryMobile = ISNULL(EP.ParticipationMobile, CS.PrimaryMobile) OR 
																	  CEx.EmailID = ISNULL(EP.ParticipationEmailID, CS.EmailID)
																	   AND
																	  ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
    																   (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))
		--AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = ISNULL(EP.ParticipationMobile,CS.PrimaryMobile) 
		--				OR  (ISNULL(EW.Email,'') <> '' and EW.Email = ISNULL(EP.ParticipationEmailID, CS.EmailID)) )
		AND Not Exists(select 1 from coc_ECouponWinners(NOLOCK) P_EW 
				INNER JOIN coc_ECouponDrawPrizes(NOLOCK) P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID
				INNER JOIN coc_ECouponDraw(NOLOCK) P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID
				where (P_EW.MobileNumber = ISNULL(EP.ParticipationMobile,CS.PrimaryMobile) 
						OR  (ISNULL(P_EW.Email,'') <> '' and P_EW.Email = ISNULL(EP.ParticipationEmailID, CS.EmailID))) and 
						P_ED.ECouponID = EP.ECouponID )
		AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes(NOLOCK) edr WHERE  edr.ECouponDrawID = @DrawID))
			
		
		INSERT INTO @ResultTable
		SELECT DISTINCT EC.ECouponID,EP.Barcode,EC.EServiceID,EP.ConsumerID,ISNULL(EP.ParticipationMobile,GS.PrimaryMobile),
				ISNULL(EP.ParticipationEmailID, GS.EmailID),GS.FullName ,ES.CorporateID,GS.PrimaryMobile,
			@EmailSubject,@EmailBody,@SMS,2
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID
				INNER JOIN coc_Guests GS(NOLOCK) ON EP.GuestID=GS.GuestID
		--WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0
		WHERE ES.EServiceID = @EServiceID
		AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions(NOLOCK) CEx WHERE CEx.PrimaryMobile =  ISNULL(EP.ParticipationMobile,GS.PrimaryMobile) OR
																	  CEx.EmailID=ISNULL(EP.ParticipationEmailID, GS.EmailID) 
																	   AND
																	  ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
    																   (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))
		--AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = ISNULL(EP.ParticipationMobile,GS.PrimaryMobile) 
		--				OR  (ISNULL(EW.Email,'') <> '' and EW.Email = ISNULL(EP.ParticipationEmailID, GS.EmailID)) )
		AND Not Exists(select 1 from coc_ECouponWinners(NOLOCK) P_EW 
				INNER JOIN coc_ECouponDrawPrizes(NOLOCK) P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID
				INNER JOIN coc_ECouponDraw(NOLOCK) P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID
				where (P_EW.MobileNumber = ISNULL(EP.ParticipationMobile,GS.PrimaryMobile) 
						OR  (ISNULL(P_EW.Email,'') <> '' and P_EW.Email = ISNULL(EP.ParticipationEmailID, GS.EmailID))) and 
						P_ED.ECouponID = EP.ECouponID )
		AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes(NOLOCK) edr WHERE  edr.ECouponDrawID = @DrawID))

---- From Guest Table (old)
		--INSERT INTO @ResultTable
		--SELECT DISTINCT EC.ECouponIDEC.EServiceID,EP.GuestParticipationID,EP.Mobile,NULL,EP.GuestName ,ES.CorporateID,NULL,
		--	@EmailSubject,@EmailBody,@SMS,1
		--	FROM coc_ECoupons EC(NOLOCK)
		--		INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
		--		INNER JOIN coc_Notifications NF(NOLOCK) ON ES.EServiceID=NF.EServiceID
		--		INNER JOIN coc_EServiceBarcodes EB(NOLOCK) ON EB.NotificationID=NF.NotificationID 
		--														AND EB.CorporateID=@CorporateID AND EB.ConsumerID IS NULL
		--		INNER JOIN coc_GuestParticipations EP(NOLOCK) ON EB.AsignedMoile=EP.Mobile
		----WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0
		--	WHERE ES.EServiceID = @EServiceID
		-- 	AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx WHERE CEx.PrimaryMobile =  EP.Mobile AND			
		--															  ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
  --  																   (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))
		--AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = EP.Mobile)
		--AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select RetailOutletID FROM coc_ECouponDrawRetailOutlets edr WHERE  edr.ECoponDrawID = @DrawID))

		 INSERT INTO @ResultTable
		 SELECT DISTINCT EC.ECouponID,EP.Barcode,EC.EServiceID,EI.AddUserID,EI.MobileNumber,EP.ParticipationEmailID,ED.InvoiceNumber,ES.CorporateID,EI.MobileNumber,
			@EmailSubject,@EmailBody,@SMS,0
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID
				INNER JOIN coc_ECouponInvoices EI(NOLOCK) ON EP.ECouponID=EI.ECouponID AND EI.ConsumerID IS NULL
				Inner JOIN  coc_ECouponInvoiceDetails ED(NOLOCK) ON EI.ECouponInvoiceID=ED.ECouponInvoiceID 
			WHERE ES.EServiceID = @EServiceID
			AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions(NOLOCK) CEx WHERE CEx.PrimaryMobile =  EP.ParticipationMobile OR 
																			  CEx.EmailID= EP.ParticipationEmailID AND			
																	          ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
    																           (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))
--if @EServiceID= 1
--INSERT INTO @ResultTable
--		SELECT DISTINCT 1,1,NULL,mobile , email, name, 1,substring(mobile,5,len(mobile)),
--			@EmailSubject,@EmailBody,@SMS,1
--		from tmp_data

		
		DELETE FROM  @ResultTable where ParticipationMobile is null or  len(ParticipationMobile) <> 14
		DELETE FROM  @ResultTable where ConsumerName like '%?%' or ParticipationMobile like '%?%'
		DELETE FROM  @ResultTable where ConsumerName like '%jjjj%' 
		DELETE FROM  @ResultTable where len(ConsumerName) <8
		DELETE FROM  @ResultTable where ConsumerName like '%0%' or ConsumerName like '%1%' or ConsumerName like '%2%' or ConsumerName like '%3%' or ConsumerName like '%4%' or ConsumerName like '%5%' or ConsumerName like '%6%' or ConsumerName like '%7%' or ConsumerName like '%8%' or ConsumerName like '%9%'

		SELECT  @TotalRecords = COUNT(*) FROM @ResultTable
		;WITH Participants AS
		(
			SELECT ROW_NUMBER() OVER (ORDER BY ECouponID ) AS Rowc, * FROM @ResultTable	
		)
		(SELECT 
			UniqueID ,
			Barcode ,
			ECouponID , 
			EServiceID ,
			ConsumerID ,
			'' as ParticipationMobile,
			ParticipationEmailID,
			ConsumerName,
			CorporateID ,
			'' as MembershipNumber,
			EmailSubject ,
			EmailBody ,
			SMS ,
			TypeID FROM  Participants 

			WHERE Rowc BETWEEN @FirstRecord AND @LastRecord)
			order by NEWID()
	END
SET NOCOUNT OFF



---------------------------------------------------------------------------------------------------------------------------------------------------------------



GO
/****** Object:  StoredProcedure [dbo].[GetCompetitionPendingPrizes]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCompetitionPendingPrizes]
@DrawID INTEGER,
@LanguageID INTEGER

AS

BEGIN
	SELECT ECouponDrawPrizeID, edp.ECouponDrawID, edp.ECouponPrizeID, Frequency,ep.ECouponPrizeID,ed.ECouponID,PrizeTypeID,EP.ImageFile,epl.ResourceKey, epl.Value [PrizeResourceValue], edl.Value [DrawName],EC.EServiceID 
		FROM coc_ECouponDrawPrizes edp(NOLOCK)			
			INNER JOIN coc_ECouponPrizes ep (NOLOCK) ON ep.ECouponPrizeID = edp.ECouponPrizeID
			INNER JOIN coc_ECouponPrizesLanguages epl (NOLOCK) ON ep.ECouponPrizeID = epl.ECouponPrizeID  AND epl.LanguageID=@LanguageID
			INNER JOIN coc_ECouponDraw ed (NOLOCK) on ed.ECouponDrawID =edp.ECouponDrawID
			INNER JOIN coc_ECouponDrawLanguages edl (NOLOCK) ON edl.ECouponDrawID = ed.ECouponDrawID AND edl.ResourceKey ='Name' AND edl.LanguageID=@LanguageID
			INNER JOIN coc_ECoupons ec(NOLOCK) ON ed.ECouponID=ec.ECouponID
			WHERE edp.ECouponDrawID = @DrawID
			AND Frequency> (SELECT Count(*) FROM coc_ECouponWinners ew (NOLOCK) WHERE ew.ECouponDrawPrizeID = edp.ECouponDrawPrizeID)

END
GO
/****** Object:  StoredProcedure [dbo].[GetCompetitionPrizes]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[GetCompetitionPrizes]
@DrawID INTEGER,
@LanguageID INTEGER

AS

BEGIN
		SELECT ECouponDrawPrizeID,  edp.ECouponPrizeID, epl.Value [PrizeResourceValue]
		FROM coc_ECouponDrawPrizes edp(NOLOCK)			
			INNER JOIN coc_ECouponPrizes ep (NOLOCK)	 ON ep.ECouponPrizeID = edp.ECouponPrizeID
			INNER JOIN coc_ECouponPrizesLanguages epl (NOLOCK) ON ep.ECouponPrizeID = epl.ECouponPrizeID  AND epl.LanguageID=@LanguageID	AND epl.ResourceKey='Name'
			WHERE edp.ECouponDrawID = @DrawID
			AND Frequency> (SELECT Count(*) FROM coc_ECouponWinners ew (NOLOCK) WHERE ew.ECouponDrawPrizeID = edp.ECouponDrawPrizeID)

END


GO
/****** Object:  StoredProcedure [dbo].[GetCompetitionResults]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetCompetitionResults]  
 @EServiceID INTEGER,     
 @LanguageID INTEGER,    
 @DrawID INTEGER=0,    
 @DrawPrizeID INTEGER=0,    
 @UserId INTEGER,    
 @ReturnValue [Remark] OUTPUT,  
 @NumberOfWinners int = 1  
AS  
begin  
  
SET NOCOUNT ON  
 BEGIN TRY  
  
 --DECLARE @EServiceID INTEGER   
 --DECLARE @LanguageID INTEGER  
 --DECLARE @DrawID INTEGER=0  
 --DECLARE @DrawPrizeID INTEGER=0  
 --DECLARE @UserId INTEGER  
 --DECLARE @ReturnValue [Remark]  
  
 --SET @EServiceID = 16670  
 --SET @LanaugageID = 1  
 --SET @DrawID = 1  
 --SET @DrawPrizeID = 1  
 --SET @UserID = 1  
 --SET @ReturnValue =''  
  
   
  
  DECLARE @EmailSubject [Remark]  
  DECLARE @EmailBody [Remark]  
  DECLARE @SMS [Remark]  
  DECLARE @Counter INTEGER  
  DECLARE @ECouponID INTEGER

    
  DECLARE @CorporateID INTEGER  
  
  SELECT @CorporateID= CorporateID from coc_EServices (NOLOCK) where EServiceID=@EServiceID  
  SElECT @ECouponID = ECouponID FROM coc_ECoupons (NOLOCK) where EServiceID = @EServiceID
  drop table if exists #ResultTable 
  IF OBJECT_ID('tempdb..#ResultTable') IS NULL
	create table  #ResultTable 
	(
		UniqueID INTEGER IDENTITY(1,1),  
		ECouponParticipationID bigint,  
		Barcode nvarchar(100),   
		ECouponID INTEGER,  
		EServiceID INTEGER,  
		ConsumerID INTEGER,  
		GuestID INTEGER,  
		ParticipationMobile varchar(15) ,  
		ParticipationEmailID varchar(100),  
		ConsumerName nvarchar(100),  
		CorporateID INTEGER,  
		MembershipNumber varchar(30),  
		EmailSubject NVARCHAR(1000),  
		EmailBody NVARCHAR(1000),  
		SMS NVARCHAR(1000),  
		TypeID TINYINT
	)
  
  --DECLARE @ResultTable AS TABLE  
  --(  
  -- UniqueID INTEGER IDENTITY(1,1),  
  -- ECouponParticipationID bigint,  
  -- Barcode nvarchar(100),   
  -- ECouponID INTEGER,  
  -- EServiceID INTEGER,  
  -- ConsumerID INTEGER,  
  -- GuestID INTEGER,  
  -- ParticipationMobile [Mobile],  
  -- ParticipationEmailID [Email],  
  -- ConsumerName [NullName],  
  -- CorporateID INTEGER,  
  -- MembershipNumber [NullCode],  
  -- EmailSubject NVARCHAR(1000),  
  -- EmailBody NVARCHAR(1000),  
  -- SMS NVARCHAR(1000),  
  -- TypeID TINYINT  
  --)  
  DECLARE @SelectedWinnerData AS TABLE  
  (  
   UniqueID INTEGER ,  
   ECouponParticipationID bigint,  
   Barcode nvarchar(100),   
   ECouponID INTEGER,  
   EServiceID INTEGER,  
   ConsumerID INTEGER,  
   GuestID INTEGER,  
   ParticipationMobile [Mobile],  
   ParticipationEmailID [Email],  
   ConsumerName [NullName],  
   CorporateID INTEGER,  
   MembershipNumber [NullCode],  
   EmailSubject NVARCHAR(1000),  
   EmailBody NVARCHAR(1000),  
   SMS NVARCHAR(1000),  
   TypeID TINYINT  
  )  
  DECLARE @AllWinners AS TABLE  
  (  
   UniqueID INTEGER IDENTITY(1,1),  
   EcouponID INTEGER,  
   EServiceID INTEGER,  
   DeclaredDate DATETIME,  
   ECouponWinnerID INTEGER  
  )  
    
  DECLARE @WinnerList AS TABLE  
  (  
   ECouponID INTEGER,  
   WinnerName NullName,  
   PrizeType NullDescription,  
   PrizeHeader NullDescription,  
   PrizeDetail Remark,  
   ImageFile NullDescription,  
   EService Remark  
  )  
  
  --Check winners count for the draw is already done  
  DECLARE @winnersCount INTEGER  
  
  SELECT  @winnersCount = Count(*) FROM coc_ECouponWinners ew  (NOLOCK)
  INNER JOIN coc_ECouponDrawPrizes edp (NOLOCK) ON edp.ECouponDrawPrizeID= ew.ECouponDrawPrizeID  
  WHERE edp.ECouponDrawPrizeID = @DrawPrizeID   
  
  DECLARE @frequency INTEGER  
    
  SELECT @frequency= Frequency FROM coc_ECouponDrawPrizes (NOLOCK) WHERE ECouponDrawPrizeID = @DrawPrizeID  
   
  PRINT @winnersCount  
  PRINT @frequency  
   
  IF(@winnersCount + @NumberOfWinners > @frequency) 
  BEGIN  
   SET @ReturnValue = '101'  
   SELECT UniqueID ,  
   ECouponID ,  
   EServiceID ,  
   ConsumerID ,  
   substring(ParticipationMobile,1,5)+ '*****'+ substring(ParticipationMobile,11,len(ParticipationMobile)) as ParticipationMobile ,  
   ParticipationEmailID ,  
   ConsumerName ,  
   CorporateID ,  
   MembershipNumber ,  
   EmailSubject ,  
   EmailBody ,  
   SMS ,  
   TypeID  FROM @SelectedWinnerData  
   return  
  END  
  IF(@NumberOfWinners > @frequency)  
  BEGIN  
   SET @ReturnValue = '102'  
   SELECT UniqueID ,  
   ECouponID ,  
   EServiceID ,  
   ConsumerID ,  
   substring(ParticipationMobile,1,5)+ '*****'+ substring(ParticipationMobile,11,len(ParticipationMobile)) as ParticipationMobile ,  
   ParticipationEmailID ,  
   ConsumerName ,  
   CorporateID ,  
   MembershipNumber ,  
   EmailSubject ,  
   EmailBody ,  
   SMS ,  
   TypeID  FROM @SelectedWinnerData  
   return  
  END  
    
  
 BEGIN TRANSACTION TRN_GetCompetitionResults  
    
  --Get RetailOutlets for the draw.  
  --Case 1  
  --When there is no retail outlet exits or the draw does nt mean for retailoutets (Eg:Questionaire)   
  --Check EServiceID  
  --Case 2  
  --When some or all retail outets are configured for the draw   
  --Check the list of retail outlets  
    
  --Check for case 1  
  --SELECT COUNT(*) from coc_eservices   
  DECLARE @retailOutletsCount INT  
  SELECT @retailOutletsCount = Count(*) FROM coc_ECouponDrawPrizes edr (NOLOCK) WHERE edr.ECouponDrawID = @DrawID  
    
  --- Get Participants and save to @ResultTable  
  
  SELECT TOP 1 @EmailSubject=GT.TemplateTitle,@EmailBody=GT.Template   
   FROM coc_GeneralNotificationTemplates GN(NOLOCK)  
    INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID  
  WHERE TemplateTypeID=141 AND EmailUsage=1 AND LanguageID=@LanguageID  
    
    
  SELECT TOP 1 @SMS=GT.Template  
   FROM coc_GeneralNotificationTemplates GN(NOLOCK)  
    INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID  
  WHERE TemplateTypeID=141 AND SMSUsage=1 AND LanguageID=@LanguageID  
    
    drop table if exists #TempExclusionMobiles 
	IF OBJECT_ID('tempdb..#TempExclusionMobiles') IS NULL
	create table  #TempExclusionMobiles 
	(
		Mobile varchar(15)  not null,
		ECouponID INTEGER
	)

    drop table if exists #TempExclusionEmails
	IF OBJECT_ID('tempdb..#TempExclusionEmails') IS NULL 
	create table #TempExclusionEmails 
	(
		EmailID varchar(100)  not null,
		ECouponID INTEGER
	)
  
	delete from #TempExclusionMobiles where ECouponID= @ECouponID
	delete from #TempExclusionEmails where ECouponID= @ECouponID

	insert into #TempExclusionMobiles
		SELECT PrimaryMobile, @ECouponID FROM coc_ConsumerExclusions(NOLOCK) CEx 
								WHERE ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) 
									OR (CEx.ECouponID = @ECouponID OR CEx.CorporateID = @CorporateID))
									and ISNULL(PrimaryMobile,'') <> ''

	insert into #TempExclusionMobiles
		select P_EW.MobileNumber, @ECouponID from coc_ECouponWinners(NOLOCK) P_EW 
									INNER JOIN coc_ECouponDrawPrizes(NOLOCK) P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID
									INNER JOIN coc_ECouponDraw(NOLOCK) P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID
								where (P_ED.ECouponID = @ECouponID )
									and ISNULL(P_EW.MobileNumber,'') <> ''
		
	insert into #TempExclusionEmails
		SELECT EmailID, @ECouponID FROM coc_ConsumerExclusions(NOLOCK) CEx 
								WHERE ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) 
									OR (CEx.ECouponID = @ECouponID OR CEx.CorporateID = @CorporateID))
									and ISNULL(EmailID,'') <> ''

	insert into #TempExclusionEmails
		select P_EW.Email, @ECouponID from coc_ECouponWinners(NOLOCK) P_EW 
									INNER JOIN coc_ECouponDrawPrizes(NOLOCK) P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID
									INNER JOIN coc_ECouponDraw(NOLOCK) P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID
								where (P_ED.ECouponID = @ECouponID )
									and ISNULL(P_EW.Email,'') <> ''

-- from consumer table    
  INSERT INTO #ResultTable  
  SELECT DISTINCT EP.ECouponParticipationID, EP.Barcode, EC.ECouponID,EC.EServiceID,EP.ConsumerID, NULL as GuestID, ISNULL(EP.ParticipationMobile,CS.PrimaryMobile),  
    ISNULL(EP.ParticipationEmailID, CS.EmailID),ISNULL(EP.ConsumerName, ISNULL(CS.FirstName,'')+' '+ISNULL(CS.SecondName,'')+' '+ISNULL(CS.FamilyName,'')) ,ES.CorporateID,CS.MembershipNumber,  
   @EmailSubject,@EmailBody,@SMS,2  
   FROM coc_ECoupons EC(NOLOCK)  
    INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID  
    INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID  
    INNER JOIN coc_Consumers CS(NOLOCK) ON EP.ConsumerID=CS.ConsumerID  
  --WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0  
  WHERE ES.EServiceID = @EServiceID  
  --AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx WHERE CEx.PrimaryMobile =  ISNULL(EP.ParticipationMobile,CS.PrimaryMobile) OR  
  --                 CEx.PrimaryMobile =  CS.SecondaryMobile OR  
  --                 CEx.EmailID=ISNULL(EP.ParticipationEmailID, CS.EmailID) OR  
  --                 CEx.FacebookID= CS.FacebookID OR  
  --                 CEx.TwitterID = CS.TwitterID OR  
  --                 CEx.OutlookID = CS.OutlookID OR  
  --                 CEx.YahooID = CS.YahooID OR  
  --                 CEx.MembershipNumber = CS.MembershipNumber OR  
  --                 CEx.GmailID = CS.GmailID OR  
  --                 CEx.IqamaNumber = CS.IqamaNumber OR  
  --                 CEx.PrimaryMobile = ISNULL(EP.ParticipationMobile,CS.PrimaryMobile) OR   
  --                 CEx.EmailID = ISNULL(EP.ParticipationEmailID, CS.EmailID)  
  --                  AND  
  --                 ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR   
  --                     (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))  
  --AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = ISNULL(EP.ParticipationMobile,CS.PrimaryMobile)   
  --    OR  (ISNULL(EW.Email,'') <> '' and EW.Email = ISNULL(EP.ParticipationEmailID, CS.EmailID)) )  
  --AND Not Exists(select 1 from coc_ECouponWinners P_EW   
  --  INNER JOIN coc_ECouponDrawPrizes P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID  
  --  INNER JOIN coc_ECouponDraw P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID  
  --  where (P_EW.MobileNumber = ISNULL(EP.ParticipationMobile,CS.PrimaryMobile)   
  --    OR  (ISNULL(P_EW.Email,'') <> '' and P_EW.Email = ISNULL(EP.ParticipationEmailID, CS.EmailID))) and   
  --    P_ED.ECouponID = EP.ECouponID )  
  AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select  Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes edr (NOLOCK) WHERE  edr.ECouponDrawID = @DrawID))  
  AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select  Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes edr (NOLOCK) WHERE  edr.ECouponDrawID = @DrawID))  
     
-- From Guest  Table (new)  
   INSERT INTO #ResultTable  
   SELECT DISTINCT EP.ECouponParticipationID, EP.Barcode, EC.ECouponID,EC.EServiceID, Null as ConsumerID, EP.GuestID,ISNULL(EP.ParticipationMobile,GS.PrimaryMobile),  
    ISNULL(EP.ParticipationEmailID, GS.EmailID),ISNULL(EP.ConsumerName, GS.FullName) ,ES.CorporateID,NULL,  
   @EmailSubject,@EmailBody,@SMS,1  
   FROM coc_ECoupons EC(NOLOCK)  
    INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID  
    INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID  
    INNER JOIN coc_Guests GS(NOLOCK) ON EP.GuestID=GS.GuestID  
  --WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0  
  WHERE ES.EServiceID = @EServiceID  
--  AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = ISNULL(EP.ParticipationMobile,GS.PrimaryMobile)   
--      OR  (ISNULL(EW.Email,'') <> '' and EW.Email = ISNULL(EP.ParticipationEmailID, GS.EmailID)) )  
   -- AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx WHERE CEx.PrimaryMobile =  EP.ParticipationMobile AND     
   --                ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR   
   --                    (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))  
   --AND Not Exists(select 1 from coc_ECouponWinners P_EW   
   -- INNER JOIN coc_ECouponDrawPrizes P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID  
   -- INNER JOIN coc_ECouponDraw P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID  
   -- where (P_EW.MobileNumber = ISNULL(EP.ParticipationMobile,GS.PrimaryMobile)   
   --   OR  (ISNULL(P_EW.Email,'') <> '' and P_EW.Email = ISNULL(EP.ParticipationEmailID, GS.EmailID))) and   
   --   P_ED.ECouponID = EP.ECouponID )  
   AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select  Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes edr (NOLOCK) WHERE  edr.ECouponDrawID = @DrawID))  
  
---- From Guest Table (old)  
--  INSERT INTO @ResultTable  
--  SELECT DISTINCT null, null, EC.ECouponID,EC.EServiceID,EP.GuestParticipationID,EP.Mobile,NULL,EP.GuestName ,ES.CorporateID,NULL,  
--   @EmailSubject,@EmailBody,@SMS,1  
--   FROM coc_ECoupons EC(NOLOCK)  
--    INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID  
--    INNER JOIN coc_Notifications NF(NOLOCK) ON ES.EServiceID=NF.EServiceID  
--    INNER JOIN coc_EServiceBarcodes EB(NOLOCK) ON EB.NotificationID=NF.NotificationID  
--                AND EB.CorporateID=@CorporateID AND EB.ConsumerID IS NULL  
--    INNER JOIN coc_GuestParticipations EP(NOLOCK) ON EB.AsignedMoile=EP.Mobile  
--  --WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0  
--  WHERE ES.EServiceID = @EServiceID  
--   AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx WHERE CEx.PrimaryMobile =  EP.Mobile AND     
--                   ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR   
--                       (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))  
--  AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = EP.Mobile)  
--  AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select RetailOutletID FROM coc_ECouponDrawRetailOutlets edr WHERE  edr.ECoponDrawID = @DrawID))  
     
  
-- Related to invoices  
  
   --INSERT INTO @ResultTable  
   --SELECT DISTINCT EP.ECouponParticipationID, EP.Barcode, EC.ECouponID,EC.EServiceID,EI.AddUserID,EI.MobileNumber,EP.ParticipationEmailID,ED.InvoiceNumber,ES.CorporateID,EI.MobileNumber,  
   --@EmailSubject,@EmailBody,@SMS,0  
   --FROM coc_ECoupons EC(NOLOCK)  
   -- INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID  
   -- INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID  
   -- INNER JOIN coc_ECouponInvoices EI(NOLOCK) ON EP.ECouponID=EI.ECouponID AND EI.ConsumerID IS NULL  
   -- Inner JOIN  coc_ECouponInvoiceDetails ED(NOLOCK) ON EI.ECouponInvoiceID=ED.ECouponInvoiceID     
   -- WHERE ES.EServiceID = @EServiceID  
   -- AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx WHERE CEx.PrimaryMobile =  EP.ParticipationMobile OR   
   --                  CEx.EmailID= EP.ParticipationEmailID AND     
   --                        ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR   
   --                            (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))  
   -- AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = EP.ParticipationMobile  
   --     OR EW.Email = EP.ParticipationEmailID)  
  
if @EServiceID = 246 or isnull(@ECouponID,0) = 10184
	DELETE FROM  #ResultTable where ParticipationMobile is null or  len(ParticipationMobile) < 10
else
	DELETE FROM  #ResultTable where ParticipationMobile is null or  len(ParticipationMobile) <> 14
		
  DELETE FROM  #ResultTable where ConsumerName like '%?%' or ParticipationMobile like '%?%'  
  DELETE FROM  #ResultTable where ConsumerName like '%jjjj%'   
  DELETE FROM  #ResultTable where len(ConsumerName) <8  
  DELETE FROM  #ResultTable where ConsumerName like '%0%' or ConsumerName like '%1%' or ConsumerName like '%2%' or ConsumerName like '%3%' or ConsumerName like '%4%' or ConsumerName like '%5%' or ConsumerName like '%6%' or ConsumerName like '%7%' or ConsumerName like '%8%' or ConsumerName like '%9%'  
  DELETE FROM  #ResultTable where ParticipationMobile in (select Mobile from #TempExclusionMobiles)
  DELETE FROM  #ResultTable where ParticipationEmailID in (select EmailID from #TempExclusionEmails)
-- Need to remove  
--if @DrawPrizeID = 9  
-- delete from  @ResultTable where ParticipationMobile not in (select mobile from tmp_data)  
  
--select * from @ResultTable  
--Get count for the participants and select a random participant as winner.  
  
  DECLARE @participantsCount INT  
  DECLARE @winnersSelected int = 0  
  while @winnersSelected < @NumberOfWinners  
  begin  
     
   SELECT @participantsCount = Count(*) FROM #ResultTable  
  
   --Generate random number between 1 and @participantsCount  
  
   DECLARE @Random INT;  
   DECLARE @Upper INT;  
   DECLARE @Lower INT  
  
   ---- This will create a random number between 1 and 999  
   SET @Lower = 1 ---- The lowest random number  
   SET @Upper = @participantsCount ---- The highest random number  
   SELECT @Random = ROUND(((@Upper - @Lower -1) * RAND() + @Lower), 0)  
    
   declare @uniqueID integer  
   select @uniqueID = UniqueID from (  
    Select ROW_NUMBER() OVER (ORDER BY UniqueID asc) as RowNum,*  
    from #ResultTable  
   ) temp where RowNum = @Random  
    
    
  
   --SELECT * INTO #WinnerTable  
   -- FROM @ResultTable where UniqueID= @uniqueID  
     
   INSERT INTO @SelectedWinnerData   
    select *  FROM #ResultTable where UniqueID= @uniqueID  
      
  
   --UniqueID, ECouponParticipationID,  
   --Barcode, ECouponID, EServiceID, ConsumerID, GuestID,  
   --ParticipationMobile, ParticipationEmailID, ConsumerName, CorporateID, MembershipNumber,  
   --EmailSubject, EmailBody, SMS, TypeID  
      
   --DEC@ECouponDrawPrizeID INTEGER,  
   DECLARE @ConsumerID INTEGER = NULL  
   DECLARE @TypeID TINYINT = NULL  
   DECLARE @ConsumerName NVARCHAR(200)= NULL  
   DECLARE @Email NVARCHAR(200)= NULL  
   DECLARE @MembershipID NVARCHAR(20)= NULL  
   DECLARE @ParticipationMobile [Mobile]= NULL  
   DECLARE @GuestID INTEGER= NULL  
   DECLARE @ECouponParticipationID BIGINT= NULL  
    
   SELECT @ConsumerID = ConsumerID, @TypeID=TypeID, @ConsumerName = ConsumerName, @Email= ParticipationEmailID, @MembershipID=MembershipNumber,   
     @ParticipationMobile= ParticipationMobile, @GuestID = GuestID , @ECouponParticipationID = ECouponParticipationID   
    from @SelectedWinnerData  
    where UniqueID= @uniqueID  
  
  
   DECLARE @result [Remark]  
   print @ConsumerID  
   print @ConsumerName  
      
   EXEC SaveResultDeclaration_New  @EServiceID, @UserId, @DrawPrizeID, @ConsumerID, @GuestID, @TypeID, @ECouponParticipationID, @ParticipationMobile, @ConsumerName, @Email, @MembershipID, @ReturnValue= @result OUTPUT  
    
   Print cast(@winnersSelected as varchar) + '-> '+ @result  
  
   IF(@result != '')  
   BEGIN  
    SET @ReturnValue = @result  
    print 'error saving'+ @result  
    break  
   END  
     
   SELECT  @winnersCount = Count(*) FROM coc_ECouponWinners ew (NOLOCK) 
    INNER JOIN coc_ECouponDrawPrizes edp (NOLOCK) ON edp.ECouponDrawPrizeID= ew.ECouponDrawPrizeID  
    WHERE edp.ECouponDrawPrizeID = @DrawPrizeID   
   IF(@winnersCount > @frequency)  
   BEGIN  
    print cast(@winnersCount as varchar)+ '>' + cast(@frequency as varchar)  
    SET @ReturnValue = '101'  
    print 'Exceeded frequency'  
    break  
   END  
   select @winnersSelected =  @winnersSelected + 1  
   DELETE FROM  #ResultTable where ConsumerID = @ConsumerID or GuestID = @GuestID or ParticipationMobile = @ParticipationMobile  
     
  end  
  --   IF(@retailOutletsCount!=0)  
  --BEGIN  
  -- DECLARE @RetailOutlets AS TABLE  
  --(  
  -- SlNo INTEGER IDENTITY(1,1),  
  -- RetailOutletID INTEGER)  
  
  --INSERT INTO @RetailOutlets SELECT Retailoutletid from coc_ECouponDrawRetailOutlets WHERE ECoponDrawID = @DrawID  
  
  --DECLARE @count INTEGER  
  --SELECT @count = COUNT(SlNo) FROM @RetailOutlets   
  --DECLARE @slNo INTEGER  
  --DECLARE @retailOutletID INTEGER  
  --SET @slNo = 1  
  --DECLARE @retailOutletsString NVARCHAR(300)  
  --WHILE @slNo<=@count  
  --BEGIN  
  -- SELECT @retailOutletID= RetailOutletID FROM @RetailOutlets WHERE SlNo=@slno  
  -- SET @retailOutletsString = @retailOutletsString + @retailOutletID + ','  
  -- SET @slNo = @slNo + 1  
  --END  
  
  --UPDATE coc_ECouponDraw SET RetailOutlets = @retailOutletsString WHERE ECouponDrawID = @DrawID  
  
  --END  
  
   --Return Values  
      
  --Table[0] Winner   
  SELECT UniqueID ,  
   ECouponID ,  
   EServiceID ,  
   ConsumerID ,  
   substring(ParticipationMobile,1,5)+ '*****'+ substring(ParticipationMobile,11,len(ParticipationMobile)) as ParticipationMobile ,  
   ParticipationEmailID ,  
   ConsumerName ,  
   CorporateID ,  
   MembershipNumber ,  
   EmailSubject ,  
   EmailBody ,  
   SMS ,     
   TypeID,Barcode  FROM @SelectedWinnerData  
  
  ----Tables[1]  Prize Details  
     SELECT edp.ECouponDrawPrizeID,ep.ECouponPrizeID, edp.Frequency,edp.ECouponDrawID, ep.ImageFile from coc_ECouponDrawPrizes edp (NOLOCK) 
   join coc_ECouponPrizes(nolock) ep on edp.ECouponPrizeID= ep.ECouponPrizeID   
  WHERE edp.ECouponDrawPrizeID = @DrawPrizeID  
  
  
  -- Table[2] All winners for the draw  
  SELECT edp.ECouponDrawPrizeID,edp.ECouponDrawID,edp.ECouponPrizeID,ew.*   
   FROM coc_ECouponWinners ew (NOLOCK)  
    INNER JOIN coc_ECouponDrawPrizes edp (NOLOCK) ON edp.ECouponDrawPrizeID= ew.ECouponDrawPrizeID  
   WHERE edp.ECouponDrawID = @DrawID   
  
  --Table[3] Pending Prizes  
   
  SELECT ECouponDrawPrizeID,  edp.ECouponPrizeID, epl.Value [PrizeResourceValue]  
    FROM coc_ECouponDrawPrizes edp(NOLOCK)     
     INNER JOIN coc_ECouponPrizes ep (NOLOCK) ON ep.ECouponPrizeID = edp.ECouponPrizeID  
     INNER JOIN coc_ECouponPrizesLanguages epl (NOLOCK) ON ep.ECouponPrizeID = epl.ECouponPrizeID  AND epl.LanguageID=@LanguageID AND epl.ResourceKey='Name'  
    WHERE edp.ECouponDrawID = @DrawID  
     AND Frequency> (SELECT Count(*) FROM coc_ECouponWinners ew  (NOLOCK) WHERE ew.ECouponDrawPrizeID = edp.ECouponDrawPrizeID)  
  print @ReturnValue  
  if isnull(@ReturnValue,'') = ''  
  begin  
   print 'Commit'  
   commit TRANSACTION TRN_GetCompetitionResults  
  end  
  else  
  begin  
   print @ReturnValue  
   print ' rollback'  
  
   SELECT @ReturnValue=ERROR_MESSAGE()  
   ROLLBACK TRANSACTION TRN_GetCompetitionResults  
  END   
  END TRY  
  BEGIN CATCH   
   print 'catch- rollback'  
  
   SELECT @ReturnValue=ERROR_MESSAGE()  
   SELECT @ReturnValue ReturnValue  
   ROLLBACK TRANSACTION TRN_GetCompetitionResults  
  END CATCH  
 SET NOCOUNT OFF  
end  

-----------------------------------------------------------------------------------------------------------------------------------------------------------


GO
/****** Object:  StoredProcedure [dbo].[GetCompetitionResults_New]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCompetitionResults_New]  
 @EServiceID INTEGER,   
 @LanguageID INTEGER,  
 @DrawID INTEGER=0,  
 @DrawPrizeID INTEGER=0,  
 @UserId INTEGER,  
 @ReturnValue [Remark] OUTPUT,
 @NumberOfWinners int = 1
AS
begin

SET NOCOUNT ON
	BEGIN TRY

	--DECLARE @EServiceID INTEGER	
	--DECLARE @LanguageID INTEGER
	--DECLARE @DrawID INTEGER=0
	--DECLARE @DrawPrizeID INTEGER=0
	--DECLARE @UserId INTEGER
	--DECLARE @ReturnValue [Remark]

	--SET @EServiceID = 16670
	--SET @LanaugageID = 1
	--SET @DrawID = 1
	--SET @DrawPrizeID = 1
	--SET @UserID = 1
	--SET @ReturnValue =''

	

		DECLARE @EmailSubject [Remark]
		DECLARE @EmailBody [Remark]
		DECLARE @SMS [Remark]
		DECLARE @Counter INTEGER
		
		DECLARE @CorporateID INTEGER

		SELECT @CorporateID= CorporateID from coc_EServices (NOLOCK) where EServiceID=@EServiceID

		DECLARE @ResultTable AS TABLE
		(
			UniqueID INTEGER IDENTITY(1,1),
			ECouponParticipationID bigint,
			Barcode nvarchar(100), 
			ECouponID INTEGER,
			EServiceID INTEGER,
			ConsumerID INTEGER,
			GuestID INTEGER,
			ParticipationMobile [Mobile],
			ParticipationEmailID [Email],
			ConsumerName [NullName],
			CorporateID INTEGER,
			MembershipNumber [NullCode],
			EmailSubject NVARCHAR(1000),
			EmailBody NVARCHAR(1000),
			SMS NVARCHAR(1000),
			TypeID TINYINT
		)
		DECLARE @SelectedWinnerData AS TABLE
		(
			UniqueID INTEGER ,
			ECouponParticipationID bigint,
			Barcode nvarchar(100), 
			ECouponID INTEGER,
			EServiceID INTEGER,
			ConsumerID INTEGER,
			GuestID INTEGER,
			ParticipationMobile [Mobile],
			ParticipationEmailID [Email],
			ConsumerName [NullName],
			CorporateID INTEGER,
			MembershipNumber [NullCode],
			EmailSubject NVARCHAR(1000),
			EmailBody NVARCHAR(1000),
			SMS NVARCHAR(1000),
			TypeID TINYINT
		)
		DECLARE @AllWinners AS TABLE
		(
			UniqueID INTEGER IDENTITY(1,1),
			EcouponID INTEGER,
			EServiceID INTEGER,
			DeclaredDate DATETIME,
			ECouponWinnerID INTEGER
		)
		
		DECLARE @WinnerList AS TABLE
		(
			ECouponID INTEGER,
			WinnerName NullName,
			PrizeType NullDescription,
			PrizeHeader NullDescription,
			PrizeDetail Remark,
			ImageFile NullDescription,
			EService Remark
		)

		--Check winners count for the draw is already done
		DECLARE @winnersCount INTEGER

		SELECT  @winnersCount = Count(*) FROM coc_ECouponWinners ew (NOLOCK)
		INNER JOIN coc_ECouponDrawPrizes edp (NOLOCK) ON edp.ECouponDrawPrizeID= ew.ECouponDrawPrizeID
		WHERE edp.ECouponDrawPrizeID = @DrawPrizeID 

		DECLARE @frequency INTEGER
		
		SELECT @frequency= Frequency FROM coc_ECouponDrawPrizes (NOLOCK) WHERE ECouponDrawPrizeID = @DrawPrizeID
	
		PRINT @winnersCount
		PRINT @frequency
	
		IF(@winnersCount >= @frequency)
		BEGIN
			SET @ReturnValue = '101'
			SELECT UniqueID ,
			ECouponID ,
			EServiceID ,
			ConsumerID ,
			substring(ParticipationMobile,1,5)+ '*****'+ substring(ParticipationMobile,11,len(ParticipationMobile)) as ParticipationMobile ,
			ParticipationEmailID ,
			ConsumerName ,
			CorporateID ,
			MembershipNumber ,
			EmailSubject ,
			EmailBody ,
			SMS ,
			TypeID  FROM @SelectedWinnerData
			return
		END
		IF(@NumberOfWinners > @frequency)
		BEGIN
			SET @ReturnValue = '102'
			SELECT UniqueID ,
			ECouponID ,
			EServiceID ,
			ConsumerID ,
			substring(ParticipationMobile,1,5)+ '*****'+ substring(ParticipationMobile,11,len(ParticipationMobile)) as ParticipationMobile ,
			ParticipationEmailID ,
			ConsumerName ,
			CorporateID ,
			MembershipNumber ,
			EmailSubject ,
			EmailBody ,
			SMS ,
			TypeID  FROM @SelectedWinnerData
			return
		END
		

	BEGIN TRANSACTION TRN_GetCompetitionResults
		
		--Get RetailOutlets for the draw.
		--Case 1
		--When there is no retail outlet exits or the draw does nt mean for retailoutets (Eg:Questionaire) 
		--Check EServiceID
		--Case 2
		--When some or all retail outets are configured for the draw 
		--Check the list of retail outlets
		
		--Check for case 1
		--SELECT COUNT(*) from coc_eservices 
		DECLARE @retailOutletsCount INT
		SELECT @retailOutletsCount = Count(*) FROM coc_ECouponDrawPrizes edr (NOLOCK) WHERE edr.ECouponDrawID = @DrawID
		
		--- Get Participants and save to @ResultTable

		SELECT TOP 1 @EmailSubject=GT.TemplateTitle,@EmailBody=GT.Template 
			FROM coc_GeneralNotificationTemplates GN(NOLOCK)
				INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID
		WHERE TemplateTypeID=141 AND EmailUsage=1 AND LanguageID=@LanguageID
		
		
		SELECT TOP 1 @SMS=GT.Template
			FROM coc_GeneralNotificationTemplates GN(NOLOCK)
				INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID
		WHERE TemplateTypeID=141 AND SMSUsage=1 AND LanguageID=@LanguageID

-- from consumer table 	
		INSERT INTO @ResultTable
		SELECT DISTINCT EP.ECouponParticipationID, EP.Barcode, EC.ECouponID,EC.EServiceID,EP.ConsumerID, NULL as GuestID, ISNULL(EP.ParticipationMobile,CS.PrimaryMobile),
				ISNULL(EP.ParticipationEmailID, CS.EmailID),ISNULL(EP.ConsumerName, ISNULL(CS.FirstName,'')+' '+ISNULL(CS.SecondName,'')+' '+ISNULL(CS.FamilyName,'')) ,ES.CorporateID,CS.MembershipNumber,
			@EmailSubject,@EmailBody,@SMS,2
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID
				INNER JOIN coc_Consumers CS(NOLOCK) ON EP.ConsumerID=CS.ConsumerID
		--WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0
		WHERE ES.EServiceID = @EServiceID
		AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx WHERE CEx.PrimaryMobile =  ISNULL(EP.ParticipationMobile,CS.PrimaryMobile) OR
																	  CEx.PrimaryMobile =  CS.SecondaryMobile OR
																	  CEx.EmailID=ISNULL(EP.ParticipationEmailID, CS.EmailID) OR
																	  CEx.FacebookID= CS.FacebookID OR
																	  CEx.TwitterID = CS.TwitterID OR
																	  CEx.OutlookID = CS.OutlookID OR
																	  CEx.YahooID = CS.YahooID OR
																	  CEx.MembershipNumber = CS.MembershipNumber OR
																	  CEx.GmailID = CS.GmailID OR
																	  CEx.IqamaNumber = CS.IqamaNumber OR
																	  CEx.PrimaryMobile = ISNULL(EP.ParticipationMobile,CS.PrimaryMobile) OR 
																	  CEx.EmailID = ISNULL(EP.ParticipationEmailID, CS.EmailID)
																	   AND
																	  ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
    																   (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))
		--AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = ISNULL(EP.ParticipationMobile,CS.PrimaryMobile) 
		--				OR  (ISNULL(EW.Email,'') <> '' and EW.Email = ISNULL(EP.ParticipationEmailID, CS.EmailID)) )
		AND Not Exists(select 1 from coc_ECouponWinners P_EW (NOLOCK)
				INNER JOIN coc_ECouponDrawPrizes P_EDP  (NOLOCK) ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID
				INNER JOIN coc_ECouponDraw P_ED (NOLOCK) ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID
				where (P_EW.MobileNumber = ISNULL(EP.ParticipationMobile,CS.PrimaryMobile) 
						OR  (ISNULL(P_EW.Email,'') <> '' and P_EW.Email = ISNULL(EP.ParticipationEmailID, CS.EmailID))) and 
						P_ED.ECouponID = EP.ECouponID )
		AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes edr (NOLOCK) WHERE  edr.ECouponDrawID = @DrawID))
		AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes edr (NOLOCK) WHERE  edr.ECouponDrawID = @DrawID))
			
-- From Guest  Table (new)
		 INSERT INTO @ResultTable
		 SELECT DISTINCT EP.ECouponParticipationID, EP.Barcode, EC.ECouponID,EC.EServiceID, Null as ConsumerID, EP.GuestID,ISNULL(EP.ParticipationMobile,GS.PrimaryMobile),
				ISNULL(EP.ParticipationEmailID, GS.EmailID),ISNULL(EP.ConsumerName,GS.FullName) ,ES.CorporateID,NULL,
			@EmailSubject,@EmailBody,@SMS,1
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID
				INNER JOIN coc_Guests GS(NOLOCK) ON EP.GuestID=GS.GuestID
		--WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0
		WHERE ES.EServiceID = @EServiceID
--		AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = ISNULL(EP.ParticipationMobile,GS.PrimaryMobile) 
--						OR  (ISNULL(EW.Email,'') <> '' and EW.Email = ISNULL(EP.ParticipationEmailID, GS.EmailID)) )
		 	AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx (NOLOCK) WHERE CEx.PrimaryMobile =  EP.ParticipationMobile AND			
																	  ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
    																   (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))
			AND Not Exists(select 1 from coc_ECouponWinners P_EW 
				INNER JOIN coc_ECouponDrawPrizes P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID
				INNER JOIN coc_ECouponDraw P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID
				where (P_EW.MobileNumber = ISNULL(EP.ParticipationMobile,GS.PrimaryMobile) 
						OR  (ISNULL(P_EW.Email,'') <> '' and P_EW.Email = ISNULL(EP.ParticipationEmailID, GS.EmailID))) and 
						P_ED.ECouponID = EP.ECouponID )
			AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select Convert(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes edr (NOLOCK) WHERE  edr.ECouponDrawID = @DrawID))

---- From Guest Table (old)
--		INSERT INTO @ResultTable
--		SELECT DISTINCT null, null, EC.ECouponID,EC.EServiceID,EP.GuestParticipationID,EP.Mobile,NULL,EP.GuestName ,ES.CorporateID,NULL,
--			@EmailSubject,@EmailBody,@SMS,1
--			FROM coc_ECoupons EC(NOLOCK)
--				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
--				INNER JOIN coc_Notifications NF(NOLOCK) ON ES.EServiceID=NF.EServiceID
--				INNER JOIN coc_EServiceBarcodes EB(NOLOCK) ON EB.NotificationID=NF.NotificationID
--																AND EB.CorporateID=@CorporateID AND EB.ConsumerID IS NULL
--				INNER JOIN coc_GuestParticipations EP(NOLOCK) ON EB.AsignedMoile=EP.Mobile
--		--WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0
--		WHERE ES.EServiceID = @EServiceID
--			AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx WHERE CEx.PrimaryMobile =  EP.Mobile AND			
--																	  ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
--    																   (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))
--		AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = EP.Mobile)
--		AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select RetailOutletID FROM coc_ECouponDrawRetailOutlets edr WHERE  edr.ECoponDrawID = @DrawID))
		 

-- Related to invoices

		 --INSERT INTO @ResultTable
		 --SELECT DISTINCT EP.ECouponParticipationID, EP.Barcode, EC.ECouponID,EC.EServiceID,EI.AddUserID,EI.MobileNumber,EP.ParticipationEmailID,ED.InvoiceNumber,ES.CorporateID,EI.MobileNumber,
			--@EmailSubject,@EmailBody,@SMS,0
			--FROM coc_ECoupons EC(NOLOCK)
			--	INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
			--	INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID
			--	INNER JOIN coc_ECouponInvoices EI(NOLOCK) ON EP.ECouponID=EI.ECouponID AND EI.ConsumerID IS NULL
			--	Inner JOIN  coc_ECouponInvoiceDetails ED(NOLOCK) ON EI.ECouponInvoiceID=ED.ECouponInvoiceID 		
			--	WHERE ES.EServiceID = @EServiceID
			--	AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx WHERE CEx.PrimaryMobile =  EP.ParticipationMobile OR 
			--																  CEx.EmailID= EP.ParticipationEmailID AND			
			--														          ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
   -- 																           (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))
			--	AND Not Exists(select 1 from coc_ECouponWinners EW where EW.MobileNumber = EP.ParticipationMobile
			--					OR EW.Email = EP.ParticipationEmailID)

		if @EServiceID = 246 --or isnull(@ECouponID,0) = 10184
			DELETE FROM  @ResultTable where ParticipationMobile is null or  len(ParticipationMobile) < 10
		else
			DELETE FROM  @ResultTable where ParticipationMobile is null or  len(ParticipationMobile) <> 14
		

		DELETE FROM  @ResultTable where ParticipationMobile is null or  len(ParticipationMobile) <> 14
		DELETE FROM  @ResultTable where ConsumerName like '%?%' or ParticipationMobile like '%?%'
		DELETE FROM  @ResultTable where ConsumerName like '%jjjj%' 
		DELETE FROM  @ResultTable where len(ConsumerName) <8
		DELETE FROM  @ResultTable where ConsumerName like '%0%' or ConsumerName like '%1%' or ConsumerName like '%2%' or ConsumerName like '%3%' or ConsumerName like '%4%' or ConsumerName like '%5%' or ConsumerName like '%6%' or ConsumerName like '%7%' or ConsumerName like '%8%' or ConsumerName like '%9%'
-- Need to remove
--if @DrawPrizeID = 9
--	delete from  @ResultTable where ParticipationMobile not in (select mobile from tmp_data)

--select * from @ResultTable
--Get count for the participants and select a random participant as winner.

		DECLARE @participantsCount INT
		DECLARE @winnersSelected int = 0
		while @winnersSelected < @NumberOfWinners
		begin
			
			SELECT @participantsCount = Count(*) FROM @ResultTable

			--Generate random number between 1 and @participantsCount

			DECLARE @Random INT;
			DECLARE @Upper INT;
			DECLARE @Lower INT

			---- This will create a random number between 1 and 999
			SET @Lower = 1 ---- The lowest random number
			SET @Upper = @participantsCount ---- The highest random number
			SELECT @Random = ROUND(((@Upper - @Lower -1) * RAND() + @Lower), 0)
		
			declare @uniqueID integer
			select @uniqueID = UniqueID from (
				Select ROW_NUMBER() OVER (ORDER BY UniqueID asc) as RowNum,*
				from @ResultTable
			) temp where RowNum = @Random
		
		

			--SELECT * INTO #WinnerTable
			--	FROM @ResultTable where UniqueID= @uniqueID
			
			INSERT INTO @SelectedWinnerData 
				select *  FROM @ResultTable where UniqueID= @uniqueID
				

			--UniqueID, ECouponParticipationID,
			--Barcode, ECouponID, EServiceID, ConsumerID, GuestID,
			--ParticipationMobile, ParticipationEmailID, ConsumerName, CorporateID, MembershipNumber,
			--EmailSubject, EmailBody, SMS, TypeID
				
			--DEC@ECouponDrawPrizeID INTEGER,
			DECLARE @ConsumerID INTEGER = NULL
			DECLARE @TypeID TINYINT = NULL
			DECLARE @ConsumerName NVARCHAR(200)= NULL
			DECLARE @Email NVARCHAR(200)= NULL
			DECLARE @MembershipID NVARCHAR(20)= NULL
			DECLARE @ParticipationMobile [Mobile]= NULL
			DECLARE @GuestID INTEGER= NULL
			DECLARE @ECouponParticipationID BIGINT= NULL
		
			SELECT @ConsumerID = ConsumerID, @TypeID=TypeID, @ConsumerName = ConsumerName, @Email= ParticipationEmailID, @MembershipID=MembershipNumber, 
					@ParticipationMobile= ParticipationMobile, @GuestID = GuestID , @ECouponParticipationID = ECouponParticipationID 
				from @SelectedWinnerData
				where UniqueID= @uniqueID


			DECLARE @result [Remark]
			print @ConsumerID
			print @ConsumerName
				
			EXEC SaveResultDeclaration_New  @EServiceID, @UserId, @DrawPrizeID, @ConsumerID, @GuestID, @TypeID, @ECouponParticipationID, @ParticipationMobile, @ConsumerName, @Email, @MembershipID, @ReturnValue= @result OUTPUT
		
			Print cast(@winnersSelected as varchar) + '-> '+ @result

			IF(@result != '')
			BEGIN
				SET @ReturnValue = @result
				print 'error saving'+ @result
				break
			END
			
			SELECT  @winnersCount = Count(*) FROM coc_ECouponWinners ew (NOLOCK)
				INNER JOIN coc_ECouponDrawPrizes edp (NOLOCK) ON edp.ECouponDrawPrizeID= ew.ECouponDrawPrizeID
				WHERE edp.ECouponDrawPrizeID = @DrawPrizeID 
			IF(@winnersCount > @frequency)
			BEGIN
				print cast(@winnersCount as varchar)+ '>' + cast(@frequency as varchar)
				SET @ReturnValue = '101'
				print 'Exceeded frequency'
				break
			END
			select @winnersSelected =  @winnersSelected + 1
			DELETE FROM  @ResultTable where ConsumerID = @ConsumerID or GuestID = @GuestID or ParticipationMobile = @ParticipationMobile
			
		end
  --   IF(@retailOutletsCount!=0)
	 --BEGIN
	 -- DECLARE @RetailOutlets AS TABLE
		--(
		--	SlNo INTEGER IDENTITY(1,1),
		--	RetailOutletID INTEGER)

		--INSERT INTO @RetailOutlets SELECT Retailoutletid from coc_ECouponDrawRetailOutlets WHERE ECoponDrawID = @DrawID

		--DECLARE @count INTEGER
		--SELECT @count = COUNT(SlNo) FROM @RetailOutlets 
		--DECLARE @slNo INTEGER
		--DECLARE @retailOutletID INTEGER
		--SET @slNo = 1
		--DECLARE @retailOutletsString NVARCHAR(300)
		--WHILE @slNo<=@count
		--BEGIN
		--	SELECT @retailOutletID= RetailOutletID FROM @RetailOutlets WHERE SlNo=@slno
		--	SET @retailOutletsString = @retailOutletsString + @retailOutletID + ','
		--	SET @slNo = @slNo + 1
		--END

		--UPDATE coc_ECouponDraw SET RetailOutlets = @retailOutletsString WHERE ECouponDrawID = @DrawID

	 --END

	  --Return Values
	   
		--Table[0] Winner 
		SELECT UniqueID ,
			ECouponID ,
			EServiceID ,
			ConsumerID ,
			substring(ParticipationMobile,1,5)+ '*****'+ substring(ParticipationMobile,11,len(ParticipationMobile)) as ParticipationMobile ,
			ParticipationEmailID ,
			ConsumerName ,
			CorporateID ,
			MembershipNumber ,
			EmailSubject ,
			EmailBody ,
			SMS ,			
			TypeID,Barcode  FROM @SelectedWinnerData

		----Tables[1]  Prize Details
	    SELECT edp.ECouponDrawPrizeID,ep.ECouponPrizeID, edp.Frequency,edp.ECouponDrawID, ep.ImageFile from coc_ECouponDrawPrizes edp (NOLOCK)
			join coc_ECouponPrizes ep (NOLOCK) on edp.ECouponPrizeID= ep.ECouponPrizeID 
		WHERE edp.ECouponDrawPrizeID = @DrawPrizeID


		-- Table[2] All winners for the draw
		SELECT edp.ECouponDrawPrizeID,edp.ECouponDrawID,edp.ECouponPrizeID,ew.* 
			FROM coc_ECouponWinners ew (NOLOCK)
				INNER JOIN coc_ECouponDrawPrizes edp (NOLOCK) ON edp.ECouponDrawPrizeID= ew.ECouponDrawPrizeID
			WHERE edp.ECouponDrawID = @DrawID 

		--Table[3] Pending Prizes
	
		SELECT ECouponDrawPrizeID,  edp.ECouponPrizeID, epl.Value [PrizeResourceValue]
				FROM coc_ECouponDrawPrizes edp(NOLOCK)			
					INNER JOIN coc_ECouponPrizes ep (NOLOCK) ON ep.ECouponPrizeID = edp.ECouponPrizeID
					INNER JOIN coc_ECouponPrizesLanguages epl (NOLOCK) ON ep.ECouponPrizeID = epl.ECouponPrizeID  AND epl.LanguageID=@LanguageID	AND epl.ResourceKey='Name'
				WHERE edp.ECouponDrawID = @DrawID
					AND Frequency> (SELECT Count(*) FROM coc_ECouponWinners ew (NOLOCK) WHERE ew.ECouponDrawPrizeID = edp.ECouponDrawPrizeID)
		print @ReturnValue
		if isnull(@ReturnValue,'') = ''
		begin
			print 'Commit'
			commit TRANSACTION TRN_GetCompetitionResults
		end
		else
		begin
			print @ReturnValue
			print ' rollback'

			SELECT @ReturnValue=ERROR_MESSAGE()
			ROLLBACK TRANSACTION TRN_GetCompetitionResults
		END 
		END TRY
		BEGIN CATCH 
			print 'catch- rollback'

			SELECT @ReturnValue=ERROR_MESSAGE()
			SELECT @ReturnValue ReturnValue
			ROLLBACK TRANSACTION TRN_GetCompetitionResults
		END CATCH
	SET NOCOUNT OFF
end

-------------------------------------------------------------------------------------------------------------------------------------------------


GO
/****** Object:  StoredProcedure [dbo].[GetCompetitionsWithDraws]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCompetitionsWithDraws]
	@CorporateID INTEGER,
	@LanguageID INTEGER
AS
SET NOCOUNT ON
	BEGIN
		
		
		SELECT ROW_NUMBER() OVER(ORDER BY EC.ECouponID DESC)id,EC.ECouponID,EC.EServiceID,EG.EService [CompetitionName],
				(select Count(*) from coc_ECouponPrizes(nolock) EP where EP.ECouponID = EC.ECouponID) as WinnerCount, --EC.WinnerCount,
				(select sum(Frequency) from coc_ECouponDrawPrizes(nolock) EDP INNER JOIN coc_ECouponDraw ED (NOLOCK) ON ED.ECouponDrawID= EDP.ECouponDrawID where ED.ECouponID = EC.ECouponID) as AllWinnerCount, --EC.WinnerCount,
				EC.ResultDate,EC.EntryTypeID,EL.EnumValue 
			FROM coc_ECoupons EC(NOLOCK)
					INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID
					INNER JOIN coc_EServiceLanguages EG(NOLOCK) ON EC.EServiceID=EG.EServiceID AND EG.LanguageID=@LanguageID
					INNER JOIN coc_EnumValues EV(NOLOCK) ON EV.EnumValueID=EC.EntryTypeID  
					INNER JOIN coc_EnumValueLanguages EL(NOLOCK) ON EV.EnumValueID=EL.EnumValueID AND  EL.LanguageID=@LanguageID
					
		WHERE --CONVERT(VARCHAR(10),EC.ResultDate,101) <=CONVERT(VARCHAR(10),GETDATE(),101) AND 
			EC.ResulltDeclared=0 AND ES.CorporateID=@CorporateID
		ORDER BY EC.ECouponID desc

		SELECT ec.ECouponDrawId, e.ECouponID,ResourceKey, ec.DrawDate, ecl.Value 
			FROM coc_ECouponDraw(nolock) ec
				INNER JOIN coc_ECouponDrawLanguages ecl (NOLOCK) ON ecl.ECouponDrawID = ec.ECouponDrawID 
				INNER JOIN coc_ECoupons e (NOLOCK) ON e.ECouponID= ec.ECouponID
				INNER JOIN coc_EServices es (NOLOCK) ON es.EServiceID = e.EServiceID		
				INNER JOIN coc_ECouponDrawPrizes edp (NOLOCK) on edp.ECouponDrawID = ec.ECouponDrawID
				LEFT JOIN coc_ECouponWinners ew (NOLOCK) on ew.ECouponDrawPrizeID = edp.ECouponDrawPrizeID
			WHERE ecl.ResourceKey = 'Name' AND es.CorporateID = @CorporateID AND ecl.LanguageID = @LanguageID AND
				CONVERT(date,ec.DrawDate) <=CONVERT(date,GETDATE())
			GROUP BY ec.ECouponDrawId, e.ECouponID,ResourceKey, ec.DrawDate, ecl.Value
			HAVING sum(edp.Frequency)> count(ew.ECouponWinnerID) or CONVERT(date,ec.DrawDate) =CONVERT(date,GETDATE())
			ORDER BY ec.ECouponDrawId

	END
SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[GetCompetitionWinners]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCompetitionWinners]
	@EServiceID INTEGER,	
	@LanguageID INTEGER
	
AS
SET NOCOUNT ON
	BEGIN

	    DECLARE @Counter INTEGER

		declare @priceHeader nvarchar(100)
		declare @pricedetail nvarchar(100)
		declare @priceId INTEGER

		DECLARE @Winners AS TABLE
		(
			UniqueID INTEGER IDENTITY(1,1),
			EcouponID INTEGER,
			EServiceID INTEGER,
			DeclaredDate DATETIME,
			ECouponWinnerID INTEGER,
			MobileNumber NVARCHAR(15),
			ImageFile NVARCHAR(100),
			TypeID TINYINT,
			WinnerName NVARCHAR(100),
			PriceId INTEGER,
			MembershipID NVARCHAR(20)
		)
		
		DECLARE @WinnerList AS TABLE
		(
			ECouponID INTEGER,
			WinnerName NullName,
			PrizeType NullDescription,
			PrizeHeader NullDescription,
			PrizeDetail Remark,
			ImageFile NullDescription,
			EService Remark,
			MobileNumber NVARCHAR(15),
			MembershipID NVARCHAR(20),
			ECouponWinnerID INTEGER
		)

		INSERT INTO @Winners(ECouponWinnerID,ECouponID ,EServiceID,DeclaredDate,MobileNumber,ImageFile,TypeID, WinnerName,PriceId,MembershipID)
		SELECT  DISTINCT TOP 6 EW.ECouponWinnerID,EC.ECouponID ,EC.EServiceID,EC.DeclaredDate,EW.MobileNumber,EW.ImageFile,EW.ConsumerType,EW.ConsumerName, EP.ECouponPrizeID, EW.MembershipID
			FROM coc_ECouponWinners EW (NOLOCK) 
				INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponPrizeID=EW.ECouponPrizeID
				INNER JOIN coc_ECoupons EC(NOLOCK) ON EP.ECouponID=EC.ECouponID			
			WHERE Ec.EServiceID = @EServiceID
			ORDER BY EW.ECouponWinnerID DESC
		
		SELECT @Counter=MIN(ECouponWinnerID) FROM @Winners
		WHILE(@Counter IS NOT NULL)
		BEGIN

			SELECT @priceId= PriceId FROM @Winners WHERE ECouponWinnerID =@Counter

				SELECT @priceHeader = epl.Value FROM coc_ECouponDrawPrizes edp(NOLOCK)	
				INNER JOIN coc_ECouponPrizes ep (NOLOCK) ON ep.ECouponPrizeID = edp.ECouponPrizeID
			    INNER JOIN coc_ECouponPrizesLanguages epl (NOLOCK) ON ep.ECouponPrizeID = epl.ECouponPrizeID  AND epl.LanguageID=@LanguageID
				WHERE epl.ResourceKey = 'Name' AND ep.ECouponPrizeID = @priceId

				SELECT @pricedetail =epl.Value FROM coc_ECouponDrawPrizes edp(NOLOCK)	
				INNER JOIN coc_ECouponPrizes ep (NOLOCK) ON ep.ECouponPrizeID = edp.ECouponPrizeID
			    INNER JOIN coc_ECouponPrizesLanguages epl (NOLOCK) ON ep.ECouponPrizeID = epl.ECouponPrizeID  AND epl.LanguageID=@LanguageID
				WHERE epl.ResourceKey = 'PrizeDetail' AND ep.ECouponPrizeID = @priceId

				INSERT INTO @WinnerList
				SELECT EC.ECouponID,EC.WinnerName,'' [PrizeType],@priceHeader,@pricedetail,EC.ImageFile ,'',EC.MobileNumber,EC.MembershipID, EC.ECouponWinnerID
					FROM @Winners EC 
					WHERE EC.ECouponWinnerID=@Counter
					order by EC.ECouponWinnerID ASC

			SELECT @Counter=MIN(ECouponWinnerID) FROM @Winners WHERE ECouponWinnerID>@Counter

		END	
		
			--Tables[3] 
		SELECT DISTINCT * FROM @WinnerList ORDER BY ECouponWinnerID asc 

	END
SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[GetConfigTerms]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[GetConfigTerms] 

@LanguageID INTEGER = 1

 AS
 BEGIN

	SELECT  coc_TermLanguages.Term AS ConfigTems
	FROM  coc_TermLanguages (NOLOCK)
	INNER JOIN	coc_Terms (NOLOCK) ON coc_TermLanguages.TermID = coc_Terms.TermID
	WHERE coc_TermLanguages.LanguageID = @LanguageID AND coc_Terms.TermsKey = 1

 END
GO
/****** Object:  StoredProcedure [dbo].[GetConsumerDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Rupesh & Team
-- Create date: 29  April, 2017
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetConsumerDetails]
	-- Add the parameters for the stored procedure here
	@RegistrationID INTEGER=NULL,
	@Email [Email]=NULL,
	@Mobile [Mobile]=NULL,
	@MembershipNumber [NullCode]=NULL
	--@TicketNo [NullDescription]=NULL,
	--@UserID INTEGER =NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT ConsumerID,MembershipNumber,FirstName+' '+SecondName+' '+FamilyName [MemberName],FirstName,SecondName,FamilyName,UserID,Gender,BirthDate,AgeGroupID,KnowECouponID,Address1,Address2,
				PrimaryMobile,SecondaryMobile,EmailID,FacebookID,CityID,CountryID,NationalityID,ImageFile,OtpID,IsVerified,VerificationDate
					IsActive,AcceptedTerms,HideApplicationTour,IsFacebookUser,LoyaltyPoint,RedeemPoint,BalancePoint,NotificationCount,MembershipNumber,NationalityID,IqamaNumber,KnowECouponOthers,ISNULL(DeviceToken,0) [DeviceToken] 
				FROM [coc_Consumers] (NOLOCK) 
		 WHERE (@RegistrationID IS NULL OR ConsumerID=@RegistrationID) AND 
				(@Email IS NULL OR EmailID=@Email) AND 
				(@Mobile IS NULL OR PrimaryMobile=@Mobile) AND 
				(@MembershipNumber IS NULL OR MembershipNumber=@MembershipNumber)
END
GO
/****** Object:  StoredProcedure [dbo].[GetConsumerInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetConsumerInformation]
	@ConsumerID INTEGER=NULL
AS
 SET NOCOUNT ON 
	 SELECT ConsumerID,FirstName,MembershipNumber,BalancePoint,IsVerified, PrimaryMobile, EmailID,
		FirstName + ' '+ SecondName + ' ' + FamilyName as MemberName
		FROM [coc_Consumers](NOLOCK) 
		WHERE (@ConsumerID IS NULL OR ConsumerID=@ConsumerID) 
			and IsVerified = 1
 SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[GetConsumerMobileNumber]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[GetConsumerMobileNumber]
 @ConsumerID int=NULL,
 @GuestID int=NULL,
 @Mobile nvarchar(100) =NULL out                                                  
AS                                           
 BEGIN                                                      
    
	select top 1 @Mobile=PrimaryMobile from coc_consumers(nolock) where ConsumerID=@ConsumerID and IsActive=1 and IsVerified=1and IsDeleted=0
                                          
 END     
    
GO
/****** Object:  StoredProcedure [dbo].[GetConsumerName]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetConsumerName]
	@ConsumerID INTEGER=NULL,
	@LanguageID INTEGER
AS
 SET NOCOUNT ON 
	 SELECT ConsumerID,FirstName,MembershipNumber,BalancePoint
		FROM [coc_Consumers](NOLOCK) 
		WHERE (@ConsumerID IS NULL OR ConsumerID=@ConsumerID) 
			AND(@ConsumerID IS NULL AND MembershipNumber IS NOT NULL )
 SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[GetConsumerNotification]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetConsumerNotification]    
 @ConsumerID INTEGER=150828,    
 @LanguageID INTEGER =1   
AS    
 SET NOCOUNT ON    
 BEGIN    
    SELECT CN.ConsumerNotificationID,NS.NotificationSendID,ISNULL(NT.NotificationRead,0)NotificationRead,isnull(NS.NotificationID,0)NotificationID,FORMAT(NS.SendingDate,'dd MMM yyyy' )SendingDate,NS.SendingType,CONVERT(VARCHAR(8), SendingDate, 108)[Time],  
  
   ISNULL(NL.[Subject],'')[Subject],ISNULL(NL.[Message],'')[Message],CU.FirstName+' '+CU.SecondName+' '+CU.FamilyName [FirstName],EB.Barcode,CN.HasChecked,ISNULL(ES.CompetitionID,0)CompetitionID,    
   ES.EServiceID, Case when (ISNULL(ES.CompetitionID,0)= 43 and ISNULL(NL.[Message],'') not like '%@barcode%') or EB.Barcode IS null THEN 'B' else 'Q' END BarcodeType,    
   CO.LogoFile,   ES.ServiceTypeID,
 CASE WHEN ES.ServiceTypeID = 51 THEN  
   ISNULL((SELECT top 1 EVI.ImageFile from coc_EVoucherImages EVI (NOLOCK) INNER JOIN coc_EVoucher EV  (NOLOCK) ON EV.EVoucherID = EVI.EvoucherID Where EV.EServiceID = ES.EServiceID AND EVI.IsPrimaryImage = 1 and EVI.LanguageID = @LanguageId),   
   (SELECT top 1 EVI.ImageFile from coc_EVoucherImages EVI (NOLOCK)  INNER JOIN coc_EVoucher EV (NOLOCK) ON EV.EVoucherID = EVI.EVoucherId  Where EV.EServiceID= ES.EServiceID AND EVI.IsPrimaryImage = 1))   
   ELSE CASE WHEN ES.ServiceTypeID = 52 THEN  
   EC.ImageFile
   ELSE '' END
   END AS ImageFile,

   CO.LogoFile AS CorporateLogo,

   CASE WHEN ES.ServiceTypeID = 51 THEN  
   ISNULL((SELECT top 1 EVI.ImageFile from coc_EVoucherImages EVI (NOLOCK) INNER JOIN coc_EVoucher EV  (NOLOCK) ON EV.EVoucherID = EVI.EvoucherID Where EV.EServiceID = ES.EServiceID AND EVI.IsPrimaryImage = 1 and EVI.LanguageID = @LanguageId),   
   (SELECT top 1 EVI.ImageFile from coc_EVoucherImages EVI (NOLOCK)  INNER JOIN coc_EVoucher EV (NOLOCK) ON EV.EVoucherID = EVI.EVoucherId  Where EV.EServiceID= ES.EServiceID AND EVI.IsPrimaryImage = 1))   
   ELSE CASE WHEN ES.ServiceTypeID = 52 THEN  
   EC.ImageFile
   ELSE '' END
   END AS ImageUrl

  FROM coc_ConsumerNotifications (NOLOCK) CN    
   INNER JOIN coc_Consumers (NOLOCK) CU ON CU.ConsumerID=CN.ConsumerID    
   INNER JOIN coc_NotificationSends(NOLOCK) NS ON CN.NotificationSendID=NS.NotificationSendID    
   INNER JOIN coc_NotificationSendLanguages(NOLOCK) NL ON NL.NotificationSendID=CN.NotificationSendID AND LanguageID=@LanguageID --AND SendingType != 4    
   LEFT JOIN coc_Notifications(NOLOCK) NT ON NT.NotificationID=NS.NotificationID    
   LEFT JOIN coc_EServiceBarcodes(NOLOCK) EB ON EB.NotificationID=NS.NotificationID AND CN.ConsumerID=EB.ConsumerID AND EB.ConsumerNotificationID=CN.ConsumerNotificationID    
   LEFT JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID=NT.EServiceID    
   LEFT JOIN coc_corporates(NOLOCK) CO ON CO.CorporateID =ES.CorporateID    
   LEFT join coc_ECoupons (NOLOCK) EC ON EC.EServiceID= ES.EServiceID
  WHERE ISNULL(CN.ConsumerID,0)=@ConsumerID  AND NS.SendingDate<=GETDATE()    
  --ORDER BY NS.SendingDate DESC ,CN.HasChecked ASC  
  Order BY CN.ConsumerNotificationID DESC  

 END    
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[GetConsumers]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetConsumers] @RegistrationID INTEGER     = NULL            
,                                     @Email [Email]              = NULL            
,                                     @Mobile [Mobile]            = NULL            
,                                     @MembershipNumber [NullCode]= NULL            
,                                     @TicketNo [NullDescription] = NULL            
,                                     @UserID INTEGER              =NULL            
            
AS            
            
 SET NOCOUNT ON            
            
 DECLARE @EServiceBarcodeID INTEGER            
            
 DECLARE @ConsumerID INTEGER            
            
 DECLARE @EServiceEventID INTEGER            
            
 DECLARE @CorporateID INTEGER            
            
 DECLARE @ServiceCorporateID INTEGER            
            
 DECLARE @LanguageID INTEGER            
            
 if @MembershipNumber = '0'            
            
  select @MembershipNumber = null            
            
 if @Email = ''            
            
  select @Email = null            
            
 SELECT @LanguageID =LanguageID            
 FROM coc_Languages  (NOLOCK)          
 WHERE IsDefaultLanguage=1            
            
 IF (@TicketNo IS NULL)            
            
 BEGIN            
            
  SELECT ConsumerID                                         
  ,      MembershipNumber                                   
  ,      (IsNull(FirstName,'')+' '+IsNull(SecondName,'')+' '+IsNull(FamilyName,'')) [MemberName]            
  ,      COALESCE(FullName,FirstName,SecondName,FamilyName) FullName        
  ,      FirstName                                          
  ,      SecondName                                         
  ,      FamilyName                                         
  ,      UserID                                             
  ,      Gender                                             
  ,     ISNULL(BirthDate,GETDATE()) BirthDate                                         
  ,      AgeGroupID                                         
  ,      KnowECouponID                                      
  ,      Address1                                           
  ,      Address2                                           
  ,      LTRIM(RTRIM(PrimaryMobile))  as PrimaryMobile                                     
  ,      LTRIM(RTRIM(SecondaryMobile)) as SecondaryMobile                                    
  ,      LTRIM(RTRIM(EmailID)) as EmailID                                            
  ,      FacebookID                                         
  ,      cc.CityID            
  ,      cc.CityID as UserSelectedCityID                                             
  ,      cc.CountryID                                          
  ,      cc.NationalityID                                      
  ,      ImageFile                                          
  ,      OtpID                                              
  ,      IsVerified                                         
  ,      VerificationDate                                   
            
  ,      IsActive            
  ,      AcceptedTerms                                      
  ,      HideApplicationTour                                
  ,      IsFacebookUser                                     
  ,      LoyaltyPoint                                       
  ,      RedeemPoint                                        
  ,      BalancePoint                                       
  ,      NotificationCount                                  
  ,      MembershipNumber                                   
  ,      NationalityID                                      
  ,      IqamaNumber                                        
  ,      KnowECouponOthers                                  
  ,      ISNULL(DeviceToken,0)                   [DeviceToken]            
  ,      ThirdName            
  ,      OccupationID             
  ,      JobNumber             
  ,      Organization             
  ,      MaritalStatusID             
  ,      FamilyMember            
  ,      ccl.Country ConsumerShippingCountry            
  ,      cctl.City ConsumerShippingCity            
  ,      'Prince Mohammed Bin Abdulaziz St. eCopon 703-B' ConsumerShippingAddress             
  ,      'Jeddah' ConsumerShippingState            
  ,      '23432' ConsumerShippingZIPcode        
  ,      IsNull(cc.UserIdentityTypeID,0) UserIdentityTypeID       
  ,      cc.UserIdentityNumber        
  FROM [coc_Consumers] cc(NOLOCK)            
  left JOIN coc_CountryLanguages ccl(nolock)  on ccl.CountryID = cc.CountryID and ccl.LanguageID = 1            
  left JOIN coc_CityLanguages cctl(nolock)  on cctl.CityID = cc.CityID and cctl.LanguageID = 1            
  WHERE (@RegistrationID IS NULL OR ConsumerID=@RegistrationID) AND            
            
   (@Email IS NULL OR EmailID=@Email) AND            
            
   (@Mobile IS NULL OR PrimaryMobile=@Mobile) AND            
            
   (@MembershipNumber IS NULL OR MembershipNumber=@MembershipNumber)            
   and IsDeleted = 0            
   -- added isDeleted condition on 5th Aug 2018            
 END            
            
 ELSE BEGIN            
            
  SELECT @CorporateID=@UserID            
            
  --SELECT @CorporateID=CorporateID FROM coc_CorporateUsers(NOLOCK)CU WHERE CU.UserID=@UserID            
            
  SELECT @ServiceCorporateID=EB.CorporateID            
  FROM coc_EServiceBarcodes (NOLOCK) EB            
  WHERE EB.Barcode=@TicketNo            
            
            
            
  IF (@CorporateID=@ServiceCorporateID)            
            
  BEGIN            
            
   SELECT TOP 1 @EServiceBarcodeID=EServiceBarcodeID            
   FROM coc_EServiceBarcodes(NOLOCK)            
   WHERE Barcode=@TicketNo AND IsUsed=1            
            
            
            
   SELECT TT.ConsumerID                                        
   ,      CC.FirstName         
   ,      COALESCE(CC.FullName,CC.FirstName,CC.SecondName,CC.FamilyName) FullName        
   ,      CC.EmailID                                           
   ,      FORMAT(EE.EventDate,'dd/MM/yyyy')         [EventDate]            
   ,      FORMAT(EE.PurchaseStartDate,'dd/MM/yyyy') [PurchaseStartDate]            
   ,      EE.PurchaseEndDate                                   
   ,      TT.EServiceEventID                                   
   ,      CC.PrimaryMobile                                     
   ,      EE.EventDescription                                  
   ,      EServiceBarcodeID                                    
   ,      TT.TicketID                                          
   ,      EL.EService                               [EventName]            
   ,      TT.CustomerName                                      
   ,      TT.CustomerMobile                                    
   ,      TT.Isprinted                                         
   ,      IsNull(cc.UserIdentityTypeID,0) UserIdentityTypeID       
   ,      cc.UserIdentityNumber         
   FROM       coc_Tickets(NOLOCK)        TT                    
            
   INNER JOIN coc_EServiceEvents(NOLOCK) EE         ON TT.EServiceEventID=EE.EServiceEventID            
            
   INNER JOIN coc_EServiceLanguages      EL(NOLOCK) ON EE.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID            
            
   INNER JOIN coc_Consumers(NOLOCK)      CC         ON TT.ConsumerID=CC.ConsumerID            
            
   WHERE EServiceBarcodeID=@EServiceBarcodeID            
            
            
            
  END            
            
  ELSE BEGIN            
            
   SELECT TT.ConsumerID                                        
   ,      CC.FirstName         
   ,      COALESCE(CC.FullName,CC.FirstName,CC.SecondName,CC.FamilyName) FullName        
   ,      CC.EmailID                                           
   ,      FORMAT(EE.EventDate,'dd/MM/yyyy')         [EventDate]            
   ,      FORMAT(EE.PurchaseStartDate,'dd/MM/yyyy') [PurchaseStartDate]            
   ,      EE.PurchaseEndDate                                   
   ,      TT.EServiceEventID                  
   ,      CC.PrimaryMobile                                     
   ,      EE.EventDescription                                  
   ,      EServiceBarcodeID                                    
   ,      TT.TicketID                                          
   ,      EL.EService                               [EventName]            
   ,      TT.CustomerName                                      
   ,      TT.CustomerMobile                                    
   ,      ISNULL(DeviceToken,0)                     [DeviceToken]            
   ,      ISNULL(cc.UserIdentityTypeID,0)  UserIdentityTypeID     
   ,      cc.UserIdentityNumber         
   FROM       coc_Tickets(NOLOCK)    TT                    
    INNER JOIN coc_EServiceEvents(NOLOCK)  EE         ON TT.EServiceEventID=EE.EServiceEventID           
    INNER JOIN coc_EServiceLanguages(NOLOCK)    EL ON EE.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID            
    INNER JOIN coc_Consumers(NOLOCK)   CC         ON TT.ConsumerID=CC.ConsumerID            
   WHERE EServiceBarcodeID=0            
            
  END            
            
 END            
            
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[GetCorporateData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCorporateData]    
 @CorpoRateID INTEGER=NULL    
AS    
 SET NOCOUNT ON     
  SELECT CorporateAPIUserID,APIKey,Password,CorporateID,IsActive     
  from coc_CorporateAPIUser (NOLOCK) where CorporateID=@CorpoRateID    
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[GetCorporateInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCorporateInformation]
	@CorporateID INTEGER=NULL
AS
	SET NOCOUNT ON 
	BEGIN
		IF(ISNULL(@CorporateID,0)>0)
		BEGIN
			SELECT CR.CorporateID,CR.JCCICode,CR.CRNumber,CR.EmailID,CR.MobileNumber,CR.UserID,CR.BarcodePrefix,CR.BarcodeSuffix,CR.BarcodeLength,CR.BarcodeTypeID,CR.IsActive
				FROM coc_Corporates(NOLOCK) CR WHERE CR.CorporateID=@CorporateID
		END
		ELSE
		BEGIN
			SELECT CR.CorporateID,CR.JCCICode,CR.CRNumber,CR.EmailID,CR.MobileNumber,CR.UserID,CR.BarcodePrefix,CR.BarcodeSuffix,CR.BarcodeLength,CR.BarcodeTypeID,CR.IsActive 
				FROM coc_Corporates(NOLOCK) CR 
		END
	END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[GetCorporateName]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCorporateName]
	@CorporateID INTEGER=NULL
AS
 SET NOCOUNT ON 
	 SELECT CorporateID [id],CorporateID,CRNumber
		FROM coc_Corporates(NOLOCK) 
		WHERE (@CorporateID IS NULL OR CorporateID=@CorporateID) 
 SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[GetCorporateRegistrationData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCorporateRegistrationData]
@UserID INTEGER
AS
	SET NOCOUNT ON
		BEGIN
			SELECT CU.UserID,CU.UserName,CU.EmailID,CU.[Password],CU.MobileNumber,CC.FirstName,CC.JCCICode,CC.CRNumber,CC.UserID,CC.EmailID,CC.AddDate,CU.ResetRequired,
			    Convert(varchar(10),CONVERT(date,CC.LicenseExpiryDate,106),103) AS LicenseExpiryDate,CC.CRDocumentFile,CC.IDSponsorFile,CC.LogoFile,CC.LastName,CC.MiddleName,
				CC.CountryID,CC.CityID,CC.Address1,CC.PhoneNumber,CC.FaxNumber,CC.IsEmailCommunication,CC.IsSMSCommunication,CC.IsMobileCommunication,CanContactMorning,
				CC.CanContactEvening,CC.NewsLetterNotification,CC.PromotionNotification,CU.IsActive,CC.CorporateName,CC.MerchantCode
				FROM  coc_Users CU(NOLOCK)
					INNER JOIN coc_Corporates CC (NOLOCK) ON CU.UserID=CC.UserID
			    WHERE CC.UserID=@UserID
		END
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[GetCorporates]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetCorporates]
	
AS
BEGIN
	SELECT 
		CR.CorporateID,
		CR.JCCICode,
		CR.CRNumber,
		CR.EmailID,
		CR.MobileNumber,
		CR.UserID,
		CR.BarcodePrefix,
		CR.BarcodeSuffix,
		CR.BarcodeLength,
		CR.BarcodeTypeID,
		CR.CorporateName,
		CR.IsActive 
	FROM coc_Corporates(NOLOCK) CR 
END
GO
/****** Object:  StoredProcedure [dbo].[GetCorporatesForVoucherDistribution]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:Ambily
-- Create date	:02-Dec-2017
-- Description	:Get Corporates for Voucher distribution
-- =============================================
CREATE PROCEDURE [dbo].[GetCorporatesForVoucherDistribution]
	@VoucherBundleId INTEGER,
	@Mode INTEGER
AS
BEGIN
	
	SET NOCOUNT ON;

	DECLARE @corporateID INTEGER;
	SELECT 
		@corporateID=crs.CorporateID
	FROM coc_EVoucherBundle evb (NOLOCK)
	INNER JOIN coc_EVoucher ev (NOLOCK) ON ev.EVoucherID=evb.EVoucherID
	INNER JOIN coc_EServices es (NOLOCK) ON es.ESErviceID=ev.EServiceID
	INNER JOIN coc_Corporates crs (NOLOCK) ON crs.CorporateID=es.CorporateID
	WHERE evb.EVoucherBundleID=@VoucherBundleId 


	IF (@Mode = 0 )
	BEGIN
		

	SELECT 
		cs.CorporateID,
		cs.CorporateName,
		cs.LogoFile,
		cs.EmailID,
		cs.MobileNumber
	FROM coc_Corporates cs (NOLOCK)
	WHERE cs.CorporateID!= @corporateID-- AND
		--cs.CorporateID NOT IN (SELECT CorporateID from coc_EVoucherBundleDistribution where EVoucherBundleID = @VoucherBundleId)
	END

	ELSE

	BEGIN
		

	SELECT 
		cs.CorporateID,
		cs.CorporateName,
		cs.LogoFile,
		cs.EmailID,
		cs.MobileNumber
	FROM coc_Corporates cs (NOLOCK)
	WHERE cs.CorporateID!= @corporateID
	END

END
GO
/****** Object:  StoredProcedure [dbo].[GetCorporateUploadData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCorporateUploadData]
	@XmlData XML
AS
	SET NOCOUNT ON
		DECLARE @CorporateUser AS TABLE 
		(
			id INTEGER IDENTITY(1,1),
			FullName [Name], 
			StaffID [NullCode],
			Email [Email], 
			Mobile [Mobile],
			[Password] [Remark],
			ResetPassword NVARCHAR(1),
			Corporate NVARCHAR(55),
			CorporateID INTEGER,
			RetailOutlet NVARCHAR(55),
			RetailOutletID INTEGER
		)

		INSERT INTO @CorporateUser(FullName,StaffID,Email,Mobile,[Password],ResetPassword,Corporate,RetailOutlet)
			SELECT  
				CorporateUser.value('(EmployeeName[1])', '[Name]'),
				CorporateUser.value('(CorporateNumber[1])', '[NullCode]'),
				CorporateUser.value('(EmailID[1])', '[Email]'),
				CorporateUser.value('(MobileNumber[1])', '[Mobile]'),
				CorporateUser.value('(Password[1])', '[Remark]'),
				CorporateUser.value('(ResetPassword[1])', 'NVARCHAR(1)'),
				CorporateUser.value('(Corporate[1])', 'NVARCHAR(55)'),
				CorporateUser.value('(RetailOutlet[1])', 'NVARCHAR(55)')
			FROM @XmlData.nodes('/NewDataSet/Table1') AS Data(CorporateUser)

			UPDATE CU SET CU.CorporateID = CL.CorporateID FROM coc_Corporates CL 
				INNER JOIN @CorporateUser CU ON CU.StaffID=CL.CRNumber

			UPDATE CU SET CU.RetailOutletID = CL.RetailOutletID FROM coc_RetailOutletLanguages CL 
				INNER JOIN @CorporateUser CU ON CU.RetailOutlet=CL.RetailOutlet

			SELECT * FROM @CorporateUser

	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[GetCorporateUserInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCorporateUserInformation] 
	@CorporateUserID INTEGER
AS
	SET NOCOUNT ON
		BEGIN
			SELECT CU.CorporateUserID,CU.CorporateNumber,CU.EmployeeName,CU.RetailOutletID,CU.MobileNumber,CU.EmailID,CU.IsActive,US.UserName,US.[Password],
				US.ResetRequired,CU.CorporateID,CS.JCCICode,AllowRedeeming
				FROM coc_CorporateUsers CU(NOLOCK)
					 INNER JOIN coc_Users US (NOLOCK) ON US.UserID=CU.UserID
					 INNER JOIN coc_Corporates (NOLOCK) CS ON CS.CorporateID=CU.CorporateID

			WHERE CU.CorporateUserID=@CorporateUserID
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[GetCorporateVouchers]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		: Ambily
-- Create date	: 01-12-2017
-- Description	: Get Bundles for Vouchers for particular Vouchers
-- =============================================
CREATE PROCEDURE [dbo].[GetCorporateVouchers]
	@CorporateId INTEGER,
	@LanguageId INTEGER,
	@eVoucherId INTEGER=0
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT 
		evb.EVoucherBundleID,
		ev.EVoucherID,
		evl.ResourceValue AS [VoucherName],
		crs.CorporateID,
		crs.CorporateName,
		eva.IsApproved,
		ebl.ResourceValue AS [BundleName]
	FROM coc_EVoucher ev (NOLOCK)
	INNER JOIN coc_EVoucherLanguages evl (NOLOCK) ON evl.EVoucherID=ev.EVoucherID AND evl.ResourceKey='VoucherName' AND evl.LanguageID=@LanguageId
	INNER JOIN coc_EVoucherBundle evb (NOLOCK) ON evb.EVoucherID=ev.EVoucherID
	INNER JOIN coc_EServices es (NOLOCK) ON es.EServiceID=ev.EServiceID
	INNER JOIN coc_Corporates crs (NOLOCK) ON crs.CorporateID=es.CorporateID
	INNER JOIN coc_EVoucherApproval eva (NOLOCK) ON eva.EVoucherBundleID=evb.EVoucherBundleID
	INNER JOIN coc_EBundle eb (NOLOCK) ON eb.EBundleID=evb.EBundleID
	INNER JOIN coc_EBundleLanguages ebl (NOLOCK) ON ebl.EBundleID=eb.EBundleID AND ebl.ResourceKey='BundleName' AND ebl.LAnguageID=@LanguageId
	WHERE crs.CorporateID=@CorporateId AND ev.EVoucherID=@eVoucherId


END
GO
/****** Object:  StoredProcedure [dbo].[GetCountryInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCountryInformation]   
 @CountryID INTEGER=NULL,  
 @LanguageID INTEGER=1,  
 @IsActive BIT=1  
AS   
 BEGIN  
  
 --Table 1 [Country]  
 SELECT CU.CountryID,CU.CountryCode,CL.Country,IsActive  
  FROM [coc_Countries] CU(NOLOCK)   
   INNER JOIN [coc_CountryLanguages] CL(NOLOCK) ON CL.CountryID=CU.CountryID AND CL.LanguageID=@LanguageID  
  WHERE (@CountryID IS NULL OR CU.CountryID=@CountryID) AND (@IsActive IS NULL OR CU.IsActive=@IsActive)  
  order by CU.DisplayOrder, CL.Country  
  
 --Table 1 [CountryLanguages]  
 SELECT CountryID,LanguageID,Country   
  FROM [coc_CountryLanguages] CL(NOLOCK)  
 WHERE (@CountryID IS NULL OR CL.CountryID=@CountryID)  
   AND(@LanguageID IS NULL OR CL.LanguageID=@LanguageID)  
  
END  
  
  
  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[GetCustomerParticipations]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetCustomerParticipations]   
  @FromDate date=null,  
  @ToDate date=null,  
 @vEServiceID bigint = null,  
 @vCorporateID bigint = null,  
 @vMembershipId [NullCode]=NULL,  
 @LanguageID INTEGER=1  
    
AS   
 BEGIN  
   if(@FromDate is null)  
    set @FromDate =dateadd(dd,+1, GetDate());  
  if(@ToDate is null)  
    set @ToDate = GetDate();  
  if (@LanguageID is null)  
 set @LanguageID = 1;  
 
 if @vEServiceID <> 263
 begin
	 select ROW_NUMBER() OVER(ORDER BY ParticipationDate desc)[S.No], ConsumerID,
		ECouponParticipationID, [Participation Date], [Member ID], [Consumer Name],Mobile,
		Email, Gender, BirthDate, [Social Media ID], [Social Media Type], ECouponID, 
		[Competition Name], EServiceID, Remarks, UploadImagePath
		from  
	   --ORDER BY ConsumerID, ECouponParticipationID  
	(  
	  select distinct c.ConsumerID, ep.ECouponParticipationID, CONVERT(NVARCHAR(12),  
	   ep.ParticipationDate,106) [Participation Date], c.MembershipNumber as [Member ID],   
	   case when c.ConsumerID is not null then  
		 isnull(ep.ConsumerName, concat(isnull(c.FirstName,'')+' ', isnull(CONCAT(ISNULL(c.SecondName,'')+ ' ', isnull(c.FamilyName,'')),'')))   
		else  
		 isnull(isnull(ep.ConsumerName, g.fullname), concat(isnull(g.FirstName,'')+' ', isnull(CONCAT(ISNULL(g.SecondName,'')+ ' ', isnull(g.FamilyName,'')),'')))   
		 --isnull(ep.ConsumerName, concat(isnull(g.FirstName,'')+' ', isnull(CONCAT(ISNULL(g.SecondName,'')+ ' ', isnull(g.FamilyName,'')),'')))   
		end as [Consumer Name],   
	   isnull(ep.ParticipationMobile, c.PrimaryMobile) as Mobile, isnull(ep.ParticipationEmailID, c.EmailID) as Email, c.Gender, c.BirthDate,  
	   case when c.IsFacebookUser = 'true' then c.FacebookID   
		 when c.IsTwitterUser = 'true' then c.TwitterID   
		 when c.IsGmailUser = 'true' then c.GmailID  
		 when c.IsYahooUser = 'true' then c.YahooID  
		 when c.IsOutlookUser = 'true' then c.OutlookID end as [Social Media ID],  
	   case when c.IsFacebookUser = 'true' then 'Facebook'   
		 when c.IsTwitterUser = 'true' then 'Twitter'   
		 when c.IsGmailUser = 'true' then 'Google'   
		 when c.IsYahooUser = 'true' then 'Yahoo'   
		 when c.IsOutlookUser = 'true' then 'Outlook' end as [Social Media Type],   
	   ec.ECouponID, esl.EService as [Competition Name], es.EServiceID ,  
	   case when es.CompetitionID = 42 then 'Correct Answer' else  
		case when ep.RetailOutletID is null then '' else rol.RetailOutlet end end as Remarks  
		,ep.UploadImagePath
		,ParticipationDate
		from coc_ECouponParticipations(NOLOCK) ep  
		inner join coc_ECoupons(NOLOCK) ec on ec.ECouponID = ep.ECouponID     
	 inner join coc_EServices(NOLOCK) es on es.EServiceID = ec.EServiceID   
	 inner join coc_EServiceLanguages(NOLOCK) esl on esl.EServiceID = ec.EServiceID  and esl.LanguageID = @LanguageID   
	 left join coc_Consumers(NOLOCK) c on c.ConsumerID = ep.ConsumerID  
	 left join coc_Guests(NOLOCK) g on g.GuestID = ep.GuestID  
		left join coc_RetailOutletLanguages(NOLOCK) rol on rol.RetailOutletID= ep.RetailOutletID and rol.LanguageID = @LanguageID  
		where (isnull(@vEServiceID,0) = 0 or es.EServiceID = @vEServiceID)  
		and (@vMembershipId is null or c.MembershipNumber = @vMembershipId)  
		and CONVERT(date, ep.ParticipationDate)  between @FromDate and @ToDate  
	 and (@vCorporateID IS NULL or es.CorporateID = @vCorporateID)  
	 and (ec.ECouponID <> 2  or (ec.ECouponID = 2 and ep.RetailOutletID is not null))  
	 and len(isnull(C.PrimaryMobile, ep.ParticipationMobile)) = 14  
	 and not (g.GuestID is null and c.ConsumerID is null)   
	UNION  
  
	  select c.ConsumerID, ep.ECouponParticipationID,  CONVERT(NVARCHAR(12),  
	   ep.ParticipationDate,106) [Participation Date], c.MembershipNumber as [Member ID],   
	   concat(isnull(c.FirstName,'')+' ', isnull(CONCAT(isnull(c.SecondName,'')+' ',isnull(c.FamilyName,'')),'')) as [Consumer Name],   
	   c.PrimaryMobile as Mobile, c.EmailID as Email, c.Gender, c.BirthDate,  
	   case when c.IsFacebookUser = 'true' then c.FacebookID   
		 when c.IsTwitterUser = 'true' then c.TwitterID   
		 when c.IsGmailUser = 'true' then c.GmailID  
		 when c.IsYahooUser = 'true' then c.YahooID  
		 when c.IsOutlookUser = 'true' then c.OutlookID end as [Social Media ID],  
	   case when c.IsFacebookUser = 'true' then 'Facebook'   
		 when c.IsTwitterUser = 'true' then 'Twitter'   
		 when c.IsGmailUser = 'true' then 'Google'   
		 when c.IsYahooUser = 'true' then 'Yahoo'   
		 when c.IsOutlookUser = 'true' then 'Outlook' end as [Social Media Type],   
	   ec.ECouponID, esl.EService as [Competition Name], es.EServiceID ,  
	   case when es.CompetitionID = 42 then 'Correct Answer' else case when ep.Reason = 'W' then  'Wrong Answer'  else 'Repeated Attempt' end end as Remarks  
	   ,ep.UploadImagePath
	   ,ParticipationDate
		from coc_ECouponParticipationsInvalid(NOLOCK) ep  
		inner join coc_Consumers(NOLOCK) c on c.ConsumerID = ep.ConsumerID  
		inner join coc_ECoupons(NOLOCK) ec on ec.ECouponID = ep.ECouponID     
	 inner join coc_EServices(NOLOCK) es on es.EServiceID = ec.EServiceID   
	 inner join coc_EServiceLanguages(NOLOCK) esl on esl.EServiceID = ec.EServiceID   
		where (isnull(@vEServiceID,0) = 0 or es.EServiceID = @vEServiceID)  
		and (@vMembershipId is null or c.MembershipNumber = @vMembershipId)  
		and CONVERT(date, ep.ParticipationDate)  between @FromDate and @ToDate  
	 and esl.LanguageID = @LanguageID   
	 and (@vCorporateID IS NULL or es.CorporateID = @vCorporateID)  
	 and es.CompetitionID <> 45 and es.CompetitionID <> 41  
	 and len(isnull(C.PrimaryMobile, ep.ParticipationMobile)) = 14  
	)   as tbl where isnull([Consumer Name],'') <> '' ;  
end
else 
begin
 select ROW_NUMBER() OVER(ORDER BY ParticipationDate desc)[S.No], ConsumerID,
	ECouponParticipationID, [Participation Date], [Member ID], [Consumer Name],Mobile,
	Email, Gender, BirthDate, [Social Media ID], [Social Media Type], ECouponID, 
	[Competition Name], EServiceID, Remarks, UploadImagePath
	from  
   --ORDER BY ConsumerID, ECouponParticipationID  
(  
  select distinct c.ConsumerID, ep.ECouponParticipationID, CONVERT(NVARCHAR(12),  
   ep.ParticipationDate,106) [Participation Date], c.MembershipNumber as [Member ID],   
   case when c.ConsumerID is not null then  
     isnull(ep.ConsumerName, concat(isnull(c.FirstName,'')+' ', isnull(CONCAT(ISNULL(c.SecondName,'')+ ' ', isnull(c.FamilyName,'')),'')))   
    else  
     isnull(isnull(ep.ConsumerName, g.fullname), concat(isnull(g.FirstName,'')+' ', isnull(CONCAT(ISNULL(g.SecondName,'')+ ' ', isnull(g.FamilyName,'')),'')))   
	 --isnull(ep.ConsumerName, concat(isnull(g.FirstName,'')+' ', isnull(CONCAT(ISNULL(g.SecondName,'')+ ' ', isnull(g.FamilyName,'')),'')))   
    end as [Consumer Name],   
   isnull(ep.ParticipationMobile, c.PrimaryMobile) as Mobile, isnull(ep.ParticipationEmailID, c.EmailID) as Email, c.Gender, c.BirthDate,  
   case when c.IsFacebookUser = 'true' then c.FacebookID   
     when c.IsTwitterUser = 'true' then c.TwitterID   
     when c.IsGmailUser = 'true' then c.GmailID  
     when c.IsYahooUser = 'true' then c.YahooID  
     when c.IsOutlookUser = 'true' then c.OutlookID end as [Social Media ID],  
   case when c.IsFacebookUser = 'true' then 'Facebook'   
     when c.IsTwitterUser = 'true' then 'Twitter'   
     when c.IsGmailUser = 'true' then 'Google'   
     when c.IsYahooUser = 'true' then 'Yahoo'   
     when c.IsOutlookUser = 'true' then 'Outlook' end as [Social Media Type],   
   ec.ECouponID, esl.EService as [Competition Name], es.EServiceID ,  
   case when es.CompetitionID = 42 then 'Correct Answer' else  
    case when ep.KioskID is null then '' else 'KIOSK ID :'+ cast(ep.KioskID as varchar) end end as Remarks  
	,ep.UploadImagePath
	,ParticipationDate
    from coc_ECouponParticipations(NOLOCK) ep  
    inner join coc_ECoupons(NOLOCK) ec on ec.ECouponID = ep.ECouponID     
 inner join coc_EServices(NOLOCK) es on es.EServiceID = ec.EServiceID   
 inner join coc_EServiceLanguages(NOLOCK) esl on esl.EServiceID = ec.EServiceID  and esl.LanguageID = @LanguageID   
 left join coc_Consumers(NOLOCK) c on c.ConsumerID = ep.ConsumerID  
 left join coc_Guests(NOLOCK) g on g.GuestID = ep.GuestID  
    left join coc_RetailOutletLanguages(NOLOCK) rol on rol.RetailOutletID= ep.RetailOutletID and rol.LanguageID = @LanguageID  
	left join coc_KioskLocations(NOLOCK) KL on KL.KioskLocationID = ep.KioskID
	left join coc_KioskLocationLanguages(NOLOCK) KOL ON KOL.KioskLocationID = ep.KioskID
    where (isnull(@vEServiceID,0) = 0 or es.EServiceID = @vEServiceID)  
    and (@vMembershipId is null or c.MembershipNumber = @vMembershipId)  
    and CONVERT(date, ep.ParticipationDate)  between @FromDate and @ToDate  
 and (@vCorporateID IS NULL or es.CorporateID = @vCorporateID)  
 and (ec.ECouponID <> 2  or (ec.ECouponID = 2 and ep.RetailOutletID is not null))  
 and len(isnull(C.PrimaryMobile, ep.ParticipationMobile)) = 14  
 and not (g.GuestID is null and c.ConsumerID is null)   
UNION  
  
  select c.ConsumerID, ep.ECouponParticipationID,  CONVERT(NVARCHAR(12),  
   ep.ParticipationDate,106) [Participation Date], c.MembershipNumber as [Member ID],   
   concat(isnull(c.FirstName,'')+' ', isnull(CONCAT(isnull(c.SecondName,'')+' ',isnull(c.FamilyName,'')),'')) as [Consumer Name],   
   c.PrimaryMobile as Mobile, c.EmailID as Email, c.Gender, c.BirthDate,  
   case when c.IsFacebookUser = 'true' then c.FacebookID   
     when c.IsTwitterUser = 'true' then c.TwitterID   
     when c.IsGmailUser = 'true' then c.GmailID  
     when c.IsYahooUser = 'true' then c.YahooID  
     when c.IsOutlookUser = 'true' then c.OutlookID end as [Social Media ID],  
   case when c.IsFacebookUser = 'true' then 'Facebook'   
     when c.IsTwitterUser = 'true' then 'Twitter'   
     when c.IsGmailUser = 'true' then 'Google'   
     when c.IsYahooUser = 'true' then 'Yahoo'   
     when c.IsOutlookUser = 'true' then 'Outlook' end as [Social Media Type],   
   ec.ECouponID, esl.EService as [Competition Name], es.EServiceID ,  
   case when es.CompetitionID = 42 then 'Correct Answer' else case when ep.Reason = 'W' then  'Wrong Answer'  else 'Repeated Attempt' end end as Remarks  
   ,ep.UploadImagePath
   ,ParticipationDate
    from coc_ECouponParticipationsInvalid(NOLOCK) ep  
    inner join coc_Consumers(NOLOCK) c on c.ConsumerID = ep.ConsumerID  
    inner join coc_ECoupons(NOLOCK) ec on ec.ECouponID = ep.ECouponID     
 inner join coc_EServices(NOLOCK) es on es.EServiceID = ec.EServiceID   
 inner join coc_EServiceLanguages(NOLOCK) esl on esl.EServiceID = ec.EServiceID   
    where (isnull(@vEServiceID,0) = 0 or es.EServiceID = @vEServiceID)  
    and (@vMembershipId is null or c.MembershipNumber = @vMembershipId)  
    and CONVERT(date, ep.ParticipationDate)  between @FromDate and @ToDate  
 and esl.LanguageID = @LanguageID   
 and (@vCorporateID IS NULL or es.CorporateID = @vCorporateID)  
 and es.CompetitionID <> 45 and es.CompetitionID <> 41  
 and len(isnull(C.PrimaryMobile, ep.ParticipationMobile)) = 14  
)   as tbl where isnull([Consumer Name],'') <> '' ;  
  

end
 END  
GO
/****** Object:  StoredProcedure [dbo].[GetDaterange]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetDaterange]
	@EServiceID INTEGER=NULL 
AS
 SET NOCOUNT ON 
	 SELECT EServiceID,FromDate
		FROM [coc_EServices] (NOLOCK) 
		WHERE (@EServiceID IS NULL OR EServiceID=@EServiceID) 
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[GetDigitNumber]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetDigitNumber]
(
	@AlphaNumeric VARCHAR(125),
	@ReturnValue INTEGER OUTPUT
)	
AS
	BEGIN
		SET @ReturnValue = PATINDEX('%[^0-9]%', @AlphaNumeric)
		BEGIN
			WHILE @ReturnValue > 0
			BEGIN
				SET @AlphaNumeric = STUFF(@AlphaNumeric, @ReturnValue, 1, '' )
				SET @ReturnValue = PATINDEX('%[^0-9]%', @AlphaNumeric )
			END
		END
	SET @ReturnValue=ISNULL(@AlphaNumeric,0)
	END

GO
/****** Object:  StoredProcedure [dbo].[GetDownloadedFiles]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetDownloadedFiles]
@BarcodePrintID INT
AS
BEGIN
SELECT * FROM coc_BarcodePrintFile (NOLOCK) WHERE BarcodePrintID = @BarcodePrintID
END
GO
/****** Object:  StoredProcedure [dbo].[GetEbundleData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEbundleData]
 @EBundleID INTEGER
,@LanguageID INTEGER
AS
	BEGIN
		
		--Table[0] BundleName --
			SELECT EL1.LanguageID,EL1.ResourceValue AS ValueEng ,EL2.ResourceValue AS ValueAr
				FROM coc_EBundleLanguages EL1 (NOLOCK)
				INNER JOIN coc_EBundleLanguages EL2 (NOLOCK) ON EL1.EBundleID=EL2.EBundleID AND EL2.ResourceKey='BundleName' AND EL2.LanguageID = 2
				WHERE EL1.EBundleID=@EBundleID AND EL1.ResourceKey='BundleName' AND EL1.LanguageID = 1

		--Table[1] Description --
			SELECT LanguageID,ResourceValue AS Value 
				FROM coc_EBundleLanguages  (NOLOCK)
				WHERE EBundleID=@EBundleID AND ResourceKey='Description'

		--Table[2] EligibilityMessage --
			SELECT LanguageID, ResourceValue AS Value 
				FROM coc_EBundleLanguages (NOLOCK)
				WHERE EBundleID=@EBundleID AND ResourceKey='EligibilityMessage'

		--Table[3] ListMessage --
			SELECT LanguageID, ResourceValue AS Value 
				FROM coc_EBundleLanguages (NOLOCK)
				WHERE EBundleID=@EBundleID AND ResourceKey='ListMessage'

		--Table[4] NotificationMessage --
			SELECT LanguageID, ResourceValue AS Value 
				FROM coc_EBundleLanguages (NOLOCK)
				WHERE EBundleID=@EBundleID AND ResourceKey='NotificationMessage'

		--Table[5] VoucherSentMessage --
			SELECT LanguageID, ResourceValue AS Value 
				FROM coc_EBundleLanguages (NOLOCK)
				WHERE EBundleID=@EBundleID AND ResourceKey='VoucherSentMessage'

		--Table[6] NotificationMessage --
			SELECT LanguageID, ResourceValue AS Value 
				FROM coc_EBundleLanguages (NOLOCK)
				WHERE EBundleID=@EBundleID AND ResourceKey='NotificationMessageTitle'

	END
GO
/****** Object:  StoredProcedure [dbo].[GetEBundles]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEBundles] 
	@LanguageId INTEGER=1
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT 
		eb.EBundleID AS [EBundleID] ,
		ebl.ResourceValue AS [EBundleName]
	FROM coc_EBundle AS eb (NOLOCK)
	INNER JOIN coc_EBundleLanguages AS ebl (NOLOCK) ON ebl.EBundleID=eb.EBundleID AND ebl.ResourceKey='BundleName' AND ebl.LanguageID=1

END
GO
/****** Object:  StoredProcedure [dbo].[GetEcopons]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	Arya
-- Create date	:	16-12-2017
-- Description	:	GET SERVICES WITH TYPE ECOPON for EcouponVouchers
-- =============================================
CREATE PROCEDURE [dbo].[GetEcopons]
@LanguageID INTEGER = 1
AS
	BEGIN
		SELECT	ES.EServiceID,
				ESL.EService	
		FROM	coc_EServices ES (NOLOCK)
		INNER JOIN	coc_EServiceLanguages ESL (NOLOCK) ON ES.EServiceID = ESL.EServiceID AND ESL.LanguageID = @LanguageID
		INNER JOIN	coc_EnumValues EV (NOLOCK) ON ES.ServiceTypeID = EV.EnumValueID
		INNER JOIN	coc_EnumValueLanguages EVL (NOLOCK) ON EV.EnumValueID = EVL.EnumValueID AND EVL.LanguageID = @LanguageID
		WHERE	EVL.EnumValue = 'eCopon' AND ES.IsPaymentDone = 1
	END
GO
/****** Object:  StoredProcedure [dbo].[GetECouponConfigurationInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetECouponConfigurationInformation]             
 @ECouponID  INTEGER,             
 @LanguageID INTEGER             
AS             
    SET nocount ON             
            
  BEGIN             
      --Table[0]--             
      SELECT EC.ecouponid,             
             EC.eserviceid,             
             EL.eservice,             
             EC.resultdate,             
             EC.winnercount,             
             EC.entrytypeid,             
             EC.mininvoicevalue,             
             EC.additionalcouponvalue,             
             EC.allowmultipleinvoices,             
             EC.couponperinvoice,             
             EC.couponpermember,             
             EC.useraurthorised,             
             EC.QuestionCount,             
             EC.imagefile,             
              case when EL.LanguageID= 2 then '<div dir= ''rtl'' >'+ replace(isnull(EG.UsesTerm,'') ,'a href="www', 'a href="http://www') +'<br/>'        
  +(select isnull(ShortConfigTemsArabic,'')+ConfigTemsArabic from core_coc_Terms(NOLOCK) where TermAndConditionTypeID=1)          
  + '</div>' else replace(isnull(EG.UsesTerm,'') ,'a href="www', 'a href="http://www')+' <br/> '+(select isnull(ShortConfigTemsEng,'')+ConfigTemsEng from core_coc_Terms(NOLOCK) where TermAndConditionTypeID=1) end as UsesTerm,             
             EG.ecoupontemplate,             
             EC.participationbykiosk,             
             EC.memberonly,             
             EC.registrationrequired,             
             EC.isapproved,             
             EC.approvaldate,             
             EC.isactive,             
             EC.displayimage,             
             ES.fromdate,             
             EC.location,             
             ES.todate,             
             EC.multipleparticipation,             
             EC.ParticipationCount,             
    EC.NumberOfConsumerParticipations as ConsumerParticipationCount,             
    EC.numberofguestparticipations as GuestParticipationCount,             
             EC.allowstandardbarcode,             
             EC.standardbarcodevalue,             
             EC.locationurl,            
    (select top 1 Location from coc_ecouponlanguages (NOLOCK) where ecouponid=@ECouponID and Languageid = 1) LocationEn  ,            
    (select top 1 Location from coc_ecouponlanguages (NOLOCK) where ecouponid=@ECouponID and Languageid = 2) LocationAr              
      FROM   coc_ecoupons EC(nolock)             
             INNER JOIN coc_eservices ES(nolock)             
                     ON EC.eserviceid = ES.eserviceid             
             INNER JOIN coc_eservicelanguages EL(nolock)             
                     ON EC.eserviceid = EL.eserviceid             
                        AND EL.languageid = @LanguageID             
             INNER JOIN coc_ecouponlanguages EG(nolock)             
                     ON EC.ecouponid = EG.ecouponid             
                        AND EG.languageid = @LanguageID             
      WHERE  EC.ecouponid = @ECouponID             
            
      --Table[1]--             
      SELECT EO.ecouponoutletid,             
             EO.ecouponid,             
             EO.retailoutletid,             
             RL.retailoutlet [Outlet],             
             RO.address1     [Address]             
      FROM   coc_ecouponoutlets(nolock) EO             
             INNER JOIN coc_retailoutlets (nolock) RO             
                     ON EO.retailoutletid = RO.retailoutletid             
             LEFT JOIN coc_retailoutletlanguages RL(nolock)             
                    ON RO.retailoutletid = RL.retailoutletid             
                       AND RL.languageid = @LanguageID             
      WHERE  EO.ecouponid = @ECouponID             
            
      --Table[2]--             
      SELECT ecouponprizeid,             
             ecouponid,             
             prizetypeid,             
             EL.enumvalue [PrizeHeader],             
             prizedetail,             
             imagefile             
      FROM   coc_ecouponprizes EP(nolock)             
             INNER JOIN coc_enumvaluelanguages EL(nolock)             
                     ON EP.prizetypeid = EL.enumvalueid             
                        AND languageid = @LanguageID             
      WHERE  ecouponid = @ECouponID             
            
      --Table[3]--             
      SELECT ecouponproductid,             
             ecouponid,             
             productcode,             
             isused,             
             useddate,             
             mobileused             
      FROM   coc_ecouponproducts (nolock)             
      WHERE  ecouponid = @ECouponID             
            
      --Table[4]--             
      SELECT Row_number()             
               OVER(             
                 ORDER BY QB.questionbankid) id,             
             QB.questionbankid,             
             QB.ecouponid,             
             QL.question                     [Question],             
             QL.languageid,             
             QO.questionoptionid             
      FROM   coc_questionbanks QB(nolock)             
             INNER JOIN coc_questionlanguages QL(nolock)             
                     ON QB.questionbankid = QL.questionbankid             
 --AND QL.LanguageID=@LanguageID             
             INNER JOIN coc_questionoptions QO(nolock)             
                     ON QO.questionbankid = QL.questionbankid             
      WHERE  ecouponid = @ECouponID             
     AND QO.iscorrect = 1             
            
      --ORDER BY QL.LanguageID             
      --Table[5]--             
      SELECT QO.questionoptionid,             
             QO.questionbankid,             
             QL.questionoption [Option],             
             QO.iscorrect,             
             QL.languageid             
      FROM   coc_questionoptions (nolock)QO             
             INNER JOIN coc_questionoptionlanguages QL(nolock)             
                     ON QO.questionoptionid = QL.questionoptionid             
      -- AND QL.LanguageID=@LanguageID             
      WHERE  QO.questionbankid IN(SELECT QB.questionbankid             
                                  FROM   coc_questionbanks (nolock)QB             
                                  WHERE  ecouponid = @ECouponID)             
      ORDER  BY QO.questionoptionid,             
                QO.questionbankid,             
                QL.questionoption             
            
      IF( Isnull(@LanguageID, 0) = 0 )             
        SET @LanguageID = NULL             
            
      --Table[6]--             
      SELECT QO.ecouponid,             
             QO.languageid,             
             QO.usesterm,             
             QO.ecoupontemplate             
      FROM   coc_ecouponlanguages (nolock)QO             
             INNER JOIN coc_ecoupons QL(nolock)             
                     ON QO.ecouponid = QL.ecouponid             
      WHERE  QO.ecouponid = @ECouponID             
      --AND  (@LanguageID IS NULL OR QO.LanguageID=@LanguageID)             
      --Table[7]--             
      SELECT EL.languageid,             
             EL.value             
      FROM   coc_ecoupons EC  (NOLOCK)           
             INNER JOIN coc_ecouponlanguages EL (NOLOCK)            
                     ON EC.ecouponid = EL.ecouponid             
      WHERE  EC.ecouponid = @ECouponID             
             AND EL.resourcekey = 'Description'             
  END             
            
    SET nocount OFF 
GO
/****** Object:  StoredProcedure [dbo].[GetECouponDownload]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetECouponDownload]
	@BarcodePrintID INTEGER=NULL 
AS 
SET NOCOUNT ON
	SELECT BP.BarcodePrintID,BP.NotificationID,BP.PrintCount,CONVERT(NVARCHAR(12),BP.PrintDate,106) [PrintDate],BP.PrintUserID--,SB.
		FROM [coc_BarcodePrints] BP(NOLOCK) 
	-- INNER JOIN coc_BarcodePrintDetails BD(NOLOCK) ON BP.BarcodePrintID=BD.BarcodePrintID
	 --INNER JOIN coc_EServiceBarcodes SB(NOLOCK) ON BP.NotificationID=SB.NotificationID AND BD.EServiceBarcodeID=SB.EServiceBarcodeID 
	 WHERE BP.BarcodePrintID=@BarcodePrintID
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[GetEcouponDrawInfo]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEcouponDrawInfo]  
@drawID integer   
,@LanguageID int = 1  
AS  
BEGIN  
  
 SELECT ED.ECouponDrawID, ED.DrawDate,ED.Location,ED.LocationURL,EDL1.Value AS NameEng, EDL2.Value AS NameAr  
 ,EDL3.Value AS DetailsEng,EDL4.Value AS DetailsAr,ED.Latitude,ED.Longitude FROM coc_ECouponDraw ED (NOLOCK)  
 INNER JOIN coc_ECouponDrawLanguages EDL1 (NOLOCK) ON EDL1.ECouponDrawID = ED.ECouponDrawID   
 INNER JOIN coc_ECouponDrawLanguages EDL2 (NOLOCK) ON EDL2.ECouponDrawID = ED.ECouponDrawID  
 INNER JOIN coc_ECouponDrawLanguages EDL3 (NOLOCK) ON EDL3.ECouponDrawID = ED.ECouponDrawID  
 INNER JOIN coc_ECouponDrawLanguages EDL4 (NOLOCK) ON EDL4.ECouponDrawID = ED.ECouponDrawID   
 WHERE  ED.ECouponDrawID = @drawID  
 AND EDL1.ResourceKey = 'Name' AND EDL1.LanguageID=1  
 AND EDL2.ResourceKey = 'Name' AND EDL2.LanguageID=2  
 AND EDL3.ResourceKey = 'DrawDetail' AND EDL3.LanguageID=1  
 AND EDL4.ResourceKey = 'DrawDetail' AND EDL4.LanguageID=2  
  
  
 SELECT * FROM coc_ECouponDrawPrizes (NOLOCK) WHERE ECouponDrawID = @drawID  
  
  
  
 SELECT EP.ECouponPrizeID, EP.Frequency,EPL.Value AS Prize FROM coc_ECouponDrawPrizes EP (NOLOCK)  
 INNER JOIN coc_ECouponPrizesLanguages EPL (NOLOCK) ON EPL.ECouponPrizeID = EP.ECouponPrizeID    
 WHERE EP.ECouponDrawID = @drawID AND EPL.LanguageID=@LanguageID AND EPL.ResourceKey='Name'  
  
 END  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[GetEcouponDraws]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetEcouponDraws]
 @EcouponID INTEGER,
 @LanguageID INTEGER = 1

 AS
 BEGIN
 
 SELECT EDO.ECouponDrawID,CONVERT(int,EDO.RetailOutlets) as RetailOutletID,ROL.RetailOutlet FROM coc_ECouponDrawPrizes EDO (NOLOCK)
 INNER JOIN coc_ECouponDraw ED (NOLOCK) ON ED.ECouponDrawID = EDO.ECouponDrawID 
 INNER JOIN coc_RetailOutletLanguages ROL (NOLOCK) ON ROL.RetailOutletID = CONVERT(int,EDO.RetailOutlets) 
 WHERE ED.ECouponID =@EcouponID AND ROL.LanguageID = @LanguageID
     
 SELECT Frequency as PrizeCount,ED.ECouponDrawID,Value as PrizeName,EDP.ECouponPrizeID,EP.ImageFile from coc_ECouponDrawPrizes EDP (NOLOCK)
 INNER JOIN coc_ECouponDraw ED (NOLOCK) ON ED.ECouponDrawID = EDP.ECouponDrawID
 INNER JOIN coc_ECouponPrizesLanguages EPL (NOLOCK) ON EPL.ECouponPrizeID = EDP.ECouponPrizeID
 INNER JOIN coc_ECouponPrizes EP (NOLOCK) ON EP.ECouponPrizeID=EDP.ECouponPrizeID  
 WHERE ED.ECouponID = @EcouponID 
 AND EPL.ResourceKey='Name' AND EPL.LanguageID = @LanguageID

 SELECT ED.ECouponDrawID,ED.DrawDate,ED.Location,EDL1.Value AS Name,ED.Latitude,ED.Longitude
  from coc_ECouponDraw ED (NOLOCK)
 INNER JOIN coc_ECouponDrawLanguages EDL1 (NOLOCK) ON ED.ECouponDrawID = EDL1.ECouponDrawID AND EDL1.LanguageID=@LanguageID AND EDL1.ResourceKey='Name' 
 --INNER JOIN coc_ECouponDrawLanguages EDL2 ON ED.ECouponDrawID = EDL2.ECouponDrawID AND EDL2.LanguageID=2 AND EDL2.ResourceKey='Name' 
 --INNER JOIN coc_ECouponDrawLanguages EDL3 ON ED.ECouponDrawID = EDL3.ECouponDrawID AND EDL3.LanguageID=1 AND EDL3.ResourceKey='DrawDetail' 
 --INNER JOIN coc_ECouponDrawLanguages EDL4 ON ED.ECouponDrawID = EDL4.ECouponDrawID AND EDL4.LanguageID=2 AND EDL4.ResourceKey='DrawDetail' 
 WHERE ED.ECouponID = @EcouponID


 END


-------------------------------------------------------------------------------------------------------------------------------------------



GO
/****** Object:  StoredProcedure [dbo].[GetEcouponDrawsCompetitionReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
CREATE PROCEDURE [dbo].[GetEcouponDrawsCompetitionReport]    
@LanguageID INTEGER = 1,       
 @ECouponID INTEGER     
      
      
 AS      
 BEGIN      
       
     
 SELECT ED.ECouponDrawID as Value,EDL1.Value AS Text      
  from coc_ECouponDraw ED  (NOLOCK)    
 INNER JOIN coc_ECouponDrawLanguages EDL1 (NOLOCK) ON ED.ECouponDrawID = EDL1.ECouponDrawID AND EDL1.LanguageID=@LanguageID AND EDL1.ResourceKey='Name'       
 --INNER JOIN coc_ECouponDrawLanguages EDL2 ON ED.ECouponDrawID = EDL2.ECouponDrawID AND EDL2.LanguageID=2 AND EDL2.ResourceKey='Name'       
 --INNER JOIN coc_ECouponDrawLanguages EDL3 ON ED.ECouponDrawID = EDL3.ECouponDrawID AND EDL3.LanguageID=1 AND EDL3.ResourceKey='DrawDetail'       
 --INNER JOIN coc_ECouponDrawLanguages EDL4 ON ED.ECouponDrawID = EDL4.ECouponDrawID AND EDL4.LanguageID=2 AND EDL4.ResourceKey='DrawDetail'       
 WHERE ED.ECouponID = @ECouponID      
      
      
 END 
GO
/****** Object:  StoredProcedure [dbo].[GetEcouponDrawsForReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
CREATE PROCEDURE [dbo].[GetEcouponDrawsForReport]  
@LanguageID INTEGER = 1,     
 @ECouponID INTEGER   
    
    
 AS    
 BEGIN    
     
   
 SELECT ED.ECouponDrawID as Value,EDL1.Value AS Text    
  from coc_ECouponDraw ED  (NOLOCK)  
 INNER JOIN coc_ECouponDrawLanguages EDL1 (NOLOCK) ON ED.ECouponDrawID = EDL1.ECouponDrawID AND EDL1.LanguageID=@LanguageID AND EDL1.ResourceKey='Name'     
 --INNER JOIN coc_ECouponDrawLanguages EDL2 ON ED.ECouponDrawID = EDL2.ECouponDrawID AND EDL2.LanguageID=2 AND EDL2.ResourceKey='Name'     
 --INNER JOIN coc_ECouponDrawLanguages EDL3 ON ED.ECouponDrawID = EDL3.ECouponDrawID AND EDL3.LanguageID=1 AND EDL3.ResourceKey='DrawDetail'     
 --INNER JOIN coc_ECouponDrawLanguages EDL4 ON ED.ECouponDrawID = EDL4.ECouponDrawID AND EDL4.LanguageID=2 AND EDL4.ResourceKey='DrawDetail'     
 WHERE ED.ECouponID = @ECouponID    
    
    
 END    
GO
/****** Object:  StoredProcedure [dbo].[GetEcouponHelp]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEcouponHelp]
	@pageNo INTEGER ,
	@LanguageId INTEGER
AS
BEGIN
	
	SET NOCOUNT ON;
	SELECT * FROM coc_ECouponHelp (NOLOCK) WHERE PageNo=@pageNo AND LanguageId=@LanguageId
END
GO
/****** Object:  StoredProcedure [dbo].[GetEcouponId]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEcouponId] 
@EserviceID INTEGER 
AS
BEGIN
SELECT ECouponID FROM coc_ECoupons (NOLOCK) WHERE EServiceID = @EserviceID
END
GO
/****** Object:  StoredProcedure [dbo].[GetECouponList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetECouponList]
	 @CorporateID INTEGER=NULL,
	 @CompetitionID INTEGER=NULL,
	 @LanguageID INTEGER=1,
	 @IsActive BIT=NULL
AS 
SET NOCOUNT ON 
			DECLARE @Counter INTEGER, @CSUserID INTEGER
		
	SELECT @CSUserID=CU.CorporateID
		FROM coc_CorporateUsers(NOLOCK) CU
	WHERE CU.UserID=@CorporateID

	SELECT DISTINCT EC.EServiceID,EC.ECouponID, EL.EService [EcouponName]
		FROM coc_ECoupons EC(NOLOCK)
			LEFT JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  AND ES.IsPaymentDone=1
			INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
			INNER JOIN coc_ECouponOutlets EO(NOLOCK) ON EC.ECouponID=EO.ECouponID 
	WHERE (@CompetitionID IS NULL or CompetitionID=@CompetitionID) 
		AND EC.IsActive=1 AND ES.CorporateID=@CSUserID 
		--AND  CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)
		AND  GETDATE() BETWEEN ES.FromDate  AND  ES.ToDate

SET NOCOUNT OFF 

GO
/****** Object:  StoredProcedure [dbo].[GetECouponNotificationTemplate]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetECouponNotificationTemplate]
	@MessageTemplateID INTEGER=NULL,
	@TemplateTitle [NullDescription]=NULL,
	@Template [Remark]=NULL,
	@LanguageID INTEGER=1
AS 
	BEGIN  
		SELECT MT.MessageTemplateID,MT.TemplateType,MT.IsActive,TL.Template,TL.TemplateTitle,TL.LanguageID
		FROM coc_MessageTemplates MT(NOLOCK) 
			INNER JOIN coc_MessageTemplateLanguages TL(NOLOCK) ON MT.MessageTemplateID=TL.MessageTemplateID
			WHERE (@MessageTemplateID IS NULL OR MT.MessageTemplateID=@MessageTemplateID) 
				AND (@TemplateTitle IS NULL OR TL.TemplateTitle=@TemplateTitle)
				AND (@Template IS NULL OR TL.Template=@Template)  
				AND (TemplateType=2)  
			ORDER BY LanguageID
	END
	 

	  
GO
/****** Object:  StoredProcedure [dbo].[GetEcouponOutlets]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEcouponOutlets]
@LanguageID INTEGER
,@EcouponID INTEGER
AS
BEGIN

SELECT EO.ECouponOutletID,EO.ECouponID,EO.RetailOutletID,RL.RetailOutlet [Outlet], RO.Address1 [Address]
     FROM coc_ECouponOutlets(NOLOCK) EO
      INNER JOIN coc_RetailOutlets (NOLOCK) RO ON EO.RetailOutletID=RO.RetailOutletID
      LEFT JOIN coc_RetailOutletLanguages RL(NOLOCK) ON RO.RetailOutletID=RL.RetailOutletID AND RL.LanguageID=@LanguageID
    WHERE EO.ECouponID=@ECouponID
END
GO
/****** Object:  StoredProcedure [dbo].[GetEcouponPrizeInfo]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEcouponPrizeInfo]

	@PrizeID INTEGER,
	@LanguageID INTEGER = 1

	AS
	BEGIN
	DECLARE @NameEng NVARCHAR(100)=null
	DECLARE @NameAr NVARCHAR(100)=null
	DECLARE @DetailsEng NVARCHAR(200)=null
	DECLARE @DetailsAr NVARCHAR(200)=null
	
    DECLARE @ECouponPrizeInfo TABLE
			( 
				PrizeID INTEGER,
				NameEng [Description],
				NameAr [Description] 
				,DetailsEng [Description]
				,DetailsAr [Description]
				,PrizeCount  Integer
				,ImageFile [Description]
			)

	SELECT @NameEng = Value from coc_ECouponPrizesLanguages (NOLOCK) where ECouponPrizeID = @PrizeID
					AND  ResourceKey = 'Name' AND LanguageID = 1

	SELECT @NameAr = Value from coc_ECouponPrizesLanguages (NOLOCK) where ECouponPrizeID = @PrizeID
					AND  ResourceKey = 'Name' AND LanguageID = 2

	SELECT @DetailsEng = Value from coc_ECouponPrizesLanguages (NOLOCK) where ECouponPrizeID = @PrizeID
					AND  ResourceKey = 'PrizeDetail' AND LanguageID = 1

	SELECT @DetailsAr = Value from coc_ECouponPrizesLanguages (NOLOCK) where ECouponPrizeID = @PrizeID
					AND  ResourceKey = 'PrizeDetail' AND LanguageID = 2


	insert into @ECouponPrizeInfo
	SELECT @PrizeID,@NameEng,@NameAr,@DetailsEng,@DetailsAr,EP.PrizeCount,EP.ImageFile FROM coc_ECouponPrizes EP (NOLOCK) where ECouponPrizeID = @PrizeID
	END

	SELECT * FROM @ECouponPrizeInfo
GO
/****** Object:  StoredProcedure [dbo].[GetECouponPrizes]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetECouponPrizes]

	@EcouponID INTEGER,
	@LanguageID INTEGER = 1

	AS
	BEGIN
	SELECT ep.ECouponPrizeID, ISNULL(PrizeCount,0) as PrizeCount,ImageFile,epl.Value as Name FROM coc_ECouponPrizes ep(NOLOCK)					
		INNER JOIN coc_ECouponPrizesLanguages epl (NOLOCK) ON ep.ECouponPrizeID = epl.ECouponPrizeID  AND epl.LanguageID=@LanguageID
		WHERE epl.ResourceKey = 'Name' AND ep.ECouponID = @EcouponID
		order by ep.ECouponPrizeID

	END

GO
/****** Object:  StoredProcedure [dbo].[GetECoupons]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetECoupons] 
  @LanguageID INTEGER=1
AS 
	BEGIN
    select distinct ECouponID
    FROM [coc_ECoupons]EC (nolock)
		INNER JOIN [coc_EServices]ES(NOLOCK) ON ES.EServiceID=EC.EServiceID 
		INNER JOIN [coc_EServiceLanguages]EL(NOLOCK) ON EL.EServiceID=ES.EServiceID
    order by EC.ECouponID desc
	END
GO
/****** Object:  StoredProcedure [dbo].[GetEcouponVouchers]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	Arya
-- Create date	:	19-12-2017
-- Description	:	Get Ecoupon Vouchers Sending list
-- =============================================

CREATE PROCEDURE [dbo].[GetEcouponVouchers]
@EserviceID INTEGER,
@LanguageID INTEGER = 1
AS
	BEGIN
	---- table 0 -----
		SELECT		EVL.ResourceValue AS VoucherName,
					C.CorporateName,
					C.CorporateID,
					C.LogoFile AS CorporateLogo,
					EVS.NoOfVouchers,
					EVS.ECouponVoucherID,
					ISNULL(EVI.ImageFile,'default.png') as VoucherLogo
		FROM		coc_ECouponVoucherSending EVS
		INNER JOIN	coc_EVoucher E (NOLOCK) on E.EVoucherID = EVS.EVoucherID 
		INNER JOIN	coc_EServices ES (NOLOCK)  ON ES.EServiceID = E.EServiceID
		INNER JOIN	coc_Corporates C (NOLOCK) ON C.CorporateID = ES.CorporateID
		INNER JOIN	coc_EVoucherLanguages EVL (NOLOCK) ON EVL.EVoucherID = EVS.EVoucherID AND EVL.LanguageID = @LanguageID AND ResourceKey ='VoucherName'
		LEFT JOIN	coc_EVoucherImages EVI (NOLOCK) ON EVI.EVoucherID = EVS.EVoucherID AND EVI.IsPrimaryImage = 1
		WHERE		EVS.EServiceID = @EserviceID

	---- table 1 -----
		SELECT		DISTINCT
					C.CorporateName,
					C.CorporateID,
					C.LogoFile AS CorporateLogo					
		FROM		coc_ECouponVoucherSending EVS (NOLOCK)
		INNER JOIN	coc_EVoucher E (NOLOCK) on E.EVoucherID = EVS.EVoucherID 
		INNER JOIN	coc_EServices ES (NOLOCK) ON ES.EServiceID = E.EServiceID
		INNER JOIN	coc_Corporates C (NOLOCK) ON C.CorporateID = ES.CorporateID
		WHERE		EVS.EServiceID = @EserviceID
		
	END
GO
/****** Object:  StoredProcedure [dbo].[GetEcouponVoucherSendingDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	Arya
-- Create date	:	20-12-2017
-- Description	:	GET ECOUPON VOUCHER SENDING DETAILS FOR EDIT 
-- =============================================

CREATE PROCEDURE [dbo].[GetEcouponVoucherSendingDetails]
@ECouponVoucherID	INTEGER ,
@LanguageID			INTEGER
AS
	BEGIN
		SELECT		EVL.ResourceValue AS VoucherName,
					C.CorporateName,
					C.CorporateID,
					EVS.NoOfVouchers,
					EVS.ECouponVoucherID,
					EVS.EVoucherID
		FROM		coc_ECouponVoucherSending EVS (NOLOCK)
		INNER JOIN	coc_EVoucher E (NOLOCK) on E.EVoucherID = EVS.EVoucherID 
		INNER JOIN	coc_EServices ES (NOLOCK) ON ES.EServiceID = E.EServiceID
		INNER JOIN	coc_Corporates C (NOLOCK) ON C.CorporateID = ES.CorporateID
		INNER JOIN	coc_EVoucherLanguages EVL (NOLOCK) ON EVL.EVoucherID = EVS.EVoucherID AND EVL.LanguageID = @LanguageID AND ResourceKey ='VoucherName'		
		WHERE		EVS.ECouponVoucherID = @ECouponVoucherID
	END
GO
/****** Object:  StoredProcedure [dbo].[GetEligibleVoucherCategories]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
CREATE PROCEDURE [dbo].[GetEligibleVoucherCategories]          
 @ConsumerID INTEGER=NULL           
,@LanguageID INTEGER = 1          
,@EVoucherBundleEligibilityForConsumersID INTEGER =NULL          
,@CityID  INTEGER = null         
,@VoucherType   INTEGER = null           
,@SearchText NVARCHAR(max)=null      
,@Scope int=null            
,@PageNumber INTEGER          
,@PageSize INTEGER          
,@TotalRecords INTEGER OUTPUT          
          
AS          
          
BEGIN 

if(@ConsumerID=0)
   set @ConsumerID=null         
           
 DECLARE @bundleID INT          
 SELECT @bundleID = eb.EBundleID from coc_eBundle eb  (NOLOCK)        
 inner join coc_evoucherBundle evb (NOLOCK) on evb.EBundleId = eb.EBundleId          
 inner join coc_evoucherBundleEligibilityForConsumers evbe (NOLOCK) on evbe.EBundleId= evb.EBundleId          
 where evbe.EVoucherBundleEligibilityForConsumersID = @EVoucherBundleEligibilityForConsumersID          
          
 DECLARE @FirstRecord INTEGER          
 DECLARE @LastRecord INTEGER          
          
 SET @FirstRecord = (@PageNumber - 1) * @PageSize          
 SET @LastRecord = (@PageNumber * @PageSize + 1)          
          
DECLARE @ResultTable AS TABLE          
(          
[Id] INTEGER Identity (1,1),          
[EVoucherCategoryID] INTEGER,          
[CategoryName] NVARCHAR(200),          
[ImageFile] NVARCHAR(200),     
[InActiveImageFile] NVARCHAR(200),          
[VoucherTypeCount] INTEGER          
)          
if(@SearchText='')    
 set @SearchText=null            
INSERT INTO @ResultTable          
          
--SELECT MAX(EVC.EVoucherCategoryID) [EVoucherCategoryID],MAX(ECVL.ResourceValue) as CategoryName, MAX(EVC.ImageFile) [ImageFile], COUNT(*) [VoucherTypeCount] FROM coc_EVoucherBundleQRCode VQR          
          
--INNER JOIN coc_EVoucherBundleEligibilityForConsumers VE(NOLOCK) ON VQR.EVoucherBundleQRCodeID=VE.EVoucherBundleQRCodeID           
--INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVBD.CorporateID = VQR.CorporateID          
--INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID           
--INNER JOIN coc_EVoucher EV(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID and EV.IsActive = 1          
--INNER JOIN coc_EVoucherLanguages EVL ON EVL.EVoucherID = EV.EVoucherID AND EVL.LanguageID = @LanguageID AND EVL.ResourceKey = 'VoucherName'          
--INNER JOIN coc_EVoucherCategory EVC ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID           
--INNER JOIN coc_EVoucherCategoryLanguages ECVL ON ECVL.eVoucherCategoryID = EVC.eVoucherCategoryID          
--WHERE  VE.ConsumerID =@ConsumerID AND (@EVoucherBundleEligibilityForConsumersID  IS NULL OR VE.EVoucherBundleEligibilityForConsumersID=@EVoucherBundleEligibilityForConsumersID)          
--GROUP BY EVC.eVoucherCategoryID          
--ORDER BY EVC.EVoucherCategoryID          
          
SELECT MAX(EVC.EVoucherCategoryID) [EVoucherCategoryID],MAX(ECVL.ResourceValue) as CategoryName, MAX(EVC.ImageFile) [ImageFile],MAX(EVC.InActiveImageFile) [InActiveImageFile],           
(select COUNT(distinct EV.EVoucherID) FROM           
 coc_EVoucher EV(NOLOCK)           
INNER JOIN coc_EVoucherLanguages EVL (NOLOCK) ON EVL.EVoucherID = EV.EVoucherID AND EVL.LanguageID = @LanguageID AND EVL.ResourceKey = 'VoucherName'          
 INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID and EV.IsActive = 1          
 INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID           
 INNER JOIN coc_EVoucherBundleEligibilityForConsumers VE(NOLOCK) ON VE.EBundleID = EVB.EBundleID          
 INNER JOIN coc_EVoucherBundleQRCode VQR(NOLOCK) ON VQR.EVoucherBundleQRCodeID=VE.EVoucherBundleQRCodeID and EVBD.CorporateID = VQR.CorporateID       
 --left join coc_EvoucherLocations EVLC(NOLOCK) on EVLC.EVoucherID=EV.EVoucherID           
 where EVC.eVoucherCategoryID = EV.eVoucherCategoryID  and EV.IsActive = 1          
  AND EVB.EBundleID = @bundleID          
  AND (@ConsumerID is null or VE.ConsumerID =@ConsumerID) 
  AND (@EVoucherBundleEligibilityForConsumersID  IS NULL OR VE.EVoucherBundleEligibilityForConsumersID=@EVoucherBundleEligibilityForConsumersID)       
  --and (@CityID is null or  EVLC.CityID=@CityID)     
  and  (@VoucherType is null or EV.Type=@VoucherType) and (@SearchText is null or EVL.ResourceValue like '%'+@SearchText+'%')        
 ) [VoucherTypeCount]           
FROM coc_EVoucherCategory EVC  (NOLOCK)         
 INNER JOIN coc_EVoucherCategoryLanguages ECVL (NOLOCK) ON ECVL.eVoucherCategoryID = EVC.eVoucherCategoryID And ECVL.LanguageID = @LanguageID           
GROUP BY EVC.eVoucherCategoryID          
ORDER BY EVC.EVoucherCategoryID          
END          
          
SELECT @TotalRecords = Count(*) FROM @ResultTable          
          
SELECT EVoucherCategoryID, CategoryName,    
(Case When VoucherTypeCount=0 then InActiveImageFile else ImageFile end) [ImageFile]    
,VoucherTypeCount FROM @ResultTable WHERE ID BETWEEN @FirstRecord AND @LastRecord  
  
exec GetScopeList @LanguageID
GO
/****** Object:  StoredProcedure [dbo].[GetEligibleVoucherCorporates]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEligibleVoucherCorporates]  
 @ConsumerID INTEGER   
,@LanguageID INTEGER = 1  
,@EVoucherBundleEligibilityForConsumersID INTEGER  
,@EVoucherCategoryID INTEGER = NULL  
,@PageNumber INTEGER  
,@PageSize INTEGER  
,@TotalRecords INTEGER OUTPUT  
  
AS  
  
BEGIN  
  
 DECLARE @bundleID INT  
 SELECT @bundleID = eb.EBundleID from coc_eBundle eb (NOLOCK)  
 inner join coc_evoucherBundle evb (NOLOCK) on evb.EBundleId = eb.EBundleId  
 inner join coc_evoucherBundleEligibilityForConsumers evbe (NOLOCK) on evbe.EBundleId= evb.EBundleId  
 where evbe.EVoucherBundleEligibilityForConsumersID = @EVoucherBundleEligibilityForConsumersID  
  
  
DECLARE @FirstRecord INTEGER  
DECLARE @LastRecord INTEGER  
  
SET @FirstRecord = (@PageNumber - 1) * @PageSize  
SET @LastRecord = (@PageNumber * @PageSize + 1)  
  
DECLARE @ResultTable AS TABLE  
(  
[Id] INTEGER Identity (1,1),  
[CorporateID] INTEGER,  
[CorporateName] NVARCHAR(200),  
[ImageFile] NVARCHAR (200),  
[VoucherTypeCount] INTEGER  
)  
  
INSERT INTO @ResultTable   
  
SELECT MAX(C.CorporateID) [CorporateID] , MAX(C.CorporateName) [CorporateName], MAX(C.LogoFile) [ImageFile], Count(*) [VoucherTypeCount] FROM coc_EVoucherBundleQRCode VQR (NOLOCK)  
  
INNER JOIN coc_EVoucherBundleEligibilityForConsumers VE(NOLOCK) ON VQR.EVoucherBundleQRCodeID=VE.EVoucherBundleQRCodeID   
INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVBD.CorporateID = VQR.CorporateID  
INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID   
INNER JOIN coc_EVoucher EV(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID and EV.IsActive = 1  
INNER JOIN coc_EServices S (NOLOCK) ON S.EServiceID = EV.EServiceID  
INNER JOIN coc_Corporates C (NOLOCK) ON C.CorporateID  = S.CorporateID   
INNER JOIN coc_EVoucherCategory EVC(nolock) ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID  
WHERE  VE.ConsumerID =@ConsumerID   
  AND EVB.EBundleID = @bundleID  
  AND VE.EVoucherBundleEligibilityForConsumersID=@EVoucherBundleEligibilityForConsumersID AND (--@EVoucherCategoryID IS NULL OR   
  EVC.EVoucherCategoryID=@EVoucherCategoryID)  
  and (EV.EVoucherTypeID=1 or EV.EVoucherTypeID is null)  
GROUP BY C.CorporateID   
ORDER BY C.CorporateID   
  
SELECT @TotalRecords = Count(*) FROM @ResultTable  
  
SELECT CorporateID, CorporateName, ImageFile, VoucherTypeCount FROM @ResultTable WHERE ID BETWEEN @FirstRecord AND @LastRecord  
  
  
END
GO
/****** Object:  StoredProcedure [dbo].[GetEmailSettingsInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEmailSettingsInformation]
	@SystemSetupID INTEGER=NULL 
	AS  
	BEGIN
	SET NOCOUNT ON 
	SELECT * FROM COC_SystemSetups (NOLOCK) WHERE SystemSetupID IN (201,202,203,204,205,206)ORDER BY SystemSetupID
		SET NOCOUNT OFF
	END

GO
/****** Object:  StoredProcedure [dbo].[GetEnCryptBarcodeTest]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Proc  [dbo].[GetEnCryptBarcodeTest]
as
begin
select convert(date ,  EC.ParticipationDate) ParticipationDate, ParticipationMobile, ParticipationEmailID, ISNULL(consumername, isnull(C.FirstName, '') + ' '+ isnull(C.SecondName, '') + ' '+ isnull(C.FamilyName, '') ) CustomerName, 
	convert(date ,C.BirthDate) DOB, case when C.Gender= 1 then 'Male' else 'Female' end as Gender, NL.Nationality, CL.Country, Cil.City, 
	EC.Barcode
from coc_ECouponParticipations EC (NOLOCK) inner join coc_Consumers C (NOLOCK) on C.ConsumerID= EC.ConsumerID 
	left join coc_NationalityLanguages NL (NOLOCK) ON NL.NationalityID= C.NationalityID and NL.LanguageID= 1
	left join coc_CountryLanguages CL (NOLOCK) ON CL.CountryID = C.CountryID and CL.LanguageID= 1
	left join coc_CityLanguages CiL (NOLOCK) ON CiL.CityID = C.CityID and CiL.LanguageID= 1
	where EC.ECouponID= 10173  	  
order by ECouponParticipationID desc
end
GO
/****** Object:  StoredProcedure [dbo].[GetEnumInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 Create PROCEDURE [dbo].[GetEnumInformation]
	@EnumID INTEGER=NULL,
	@LanguageID INTEGER
AS
 SET NOCOUNT ON 
	 SELECT EV.EnumValueID,SL.EnumValue [EnumValue],[EnumID],[IsActive] 
		FROM [coc_EnumValues] EV(NOLOCK) 
			INNER JOIN coc_EnumValueLanguages SL(NOLOCK) ON EV.EnumValueID=SL.EnumValueID AND SL.LanguageID = @LanguageID
	WHERE (@EnumID IS NULL OR EnumID = @EnumID) AND EV.IsActive=1
 SET NOCOUNT OFF





GO
/****** Object:  StoredProcedure [dbo].[GetEnums]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEnums]
	@EnumsList NVARCHAR(200),
	@LangID INT
AS 
	--DECLARE @Tbl AS TABLE(Data varchar(100)) 
	--INSERT INTO @Tbl
	--	EXEC [SPSplitString] @EnumsList,','

	SELECT E.EnumID,E.Enum [Name],E.IsActive
		FROM  coc_Enums E WITH(NOLOCK)
	WHERE E.IsActive=1
		


GO
/****** Object:  StoredProcedure [dbo].[GetEservice]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetEservice]
	@EServiceID INTEGER=NULL,
	@CorpoRateID INTEGER=NULL,
	@LanguageID INTEGER
AS
 SET NOCOUNT ON 
	 SELECT EL.EServiceID,EL.EService
		FROM  [coc_EServiceLanguages]EL (NOLOCK) 
		LEFT JOIN [coc_EServices]ES(NOLOCK) ON ES.EServiceID=El.EServiceID 
		WHERE (@EServiceID IS NULL OR EL.EServiceID=@EServiceID AND ES.ServiceSubTypeID=63)  
			AND(@CorpoRateID IS NULL OR ES.CorporateID=@CorpoRateID)
			AND(@LanguageID IS NULL OR EL.LanguageID=@LanguageID)
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[GetEServiceAddOn]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEServiceAddOn]
@EserviceID INTEGER,
@LanguageID INTEGER = 1
AS
BEGIN
	---- table 0 -----
	SELECT		C.CorporateName,
				C.CorporateID,
				C.LogoFile AS CorporateLogo, 
				ESL.EService+'-'+ES.ServiceNumber [EService],
				EA.ParticipationCount,
				EA.EServiceAddOnId
	FROM		coc_eServiceAddOn EA (NOLOCK)
	INNER JOIN	coc_EServices ES (NOLOCK) ON ES.EServiceID = EA.AddOnServiceID 
	INNER JOIN	coc_Corporates C (NOLOCK) ON C.CorporateID = ES.CorporateID
	INNER JOIN	coc_EServiceLanguages ESL (NOLOCK) ON ESL.EServiceID = ES.EServiceID AND ESL.LanguageID = @LanguageID
	WHERE		EA.EServiceID = @EserviceID

	---- table 1 -----
		SELECT		DISTINCT
					C.CorporateName,
					C.CorporateID,
					C.LogoFile AS CorporateLogo					
		FROM		coc_eServiceAddOn EA (NOLOCK)
		INNER JOIN	coc_EServices ES (NOLOCK) ON ES.EServiceID = EA.AddOnServiceID 
		INNER JOIN	coc_Corporates C (NOLOCK) ON C.CorporateID = ES.CorporateID
		WHERE		EA.EServiceID = @EserviceID
END
GO
/****** Object:  StoredProcedure [dbo].[GetEServiceAddOnDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	Arya
-- Create date	:	29-12-2017
-- Description	:	GET ESERVICE ADDON DETAILS FOR EDIT 
-- =============================================

CREATE PROCEDURE [dbo].[GetEServiceAddOnDetails]
@EServiceAddOnId	INTEGER ,
@LanguageID			INTEGER
AS
	BEGIN
		SELECT		C.CorporateName,
					C.CorporateID,
					C.LogoFile AS CorporateLogo, 
					ESL.EService+'-'+ES.ServiceNumber [EService],
					EA.ParticipationCount,
					EA.EServiceAddOnId,
					EA.AddOnServiceID
		FROM		coc_eServiceAddOn EA (NOLOCK)
		INNER JOIN	coc_EServices ES (NOLOCK) ON ES.EServiceID = EA.AddOnServiceID 
		INNER JOIN	coc_Corporates C (NOLOCK) ON C.CorporateID = ES.CorporateID
		INNER JOIN	coc_EServiceLanguages ESL (NOLOCK) ON ESL.EServiceID = ES.EServiceID AND ESL.LanguageID = @LanguageID
		WHERE		EA.EServiceAddOnId = @EServiceAddOnId
	END
GO
/****** Object:  StoredProcedure [dbo].[GetEServiceDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	Arya
-- Create date	:	3-1-2017
-- Description	:	get eservice details
-- =============================================

CREATE PROCEDURE [dbo].[GetEServiceDetails]
@EServiceID		INTEGER ,
@LanguageID		INTEGER
AS
	BEGIN
		SELECT		C.CorporateName,
					C.CorporateID,
					C.LogoFile AS CorporateLogo, 
					ESL.EService+'-'+ES.ServiceNumber [EService],
					ES.FromDate,
					ES.ToDate,
					ES.IsActive,
				case when ES.IsActive = 'true' then 'Active' 				 
					 when ES.IsActive = 'false' then 'Inactive' end as [Status],
				case when GETDATE() between ES.FromDate AND ES.ToDate then ''
					 when ES.ToDate < GETDATE() or ES.FromDate > GETDATE() then 'Service Expired'  end as [IsExpired]
		FROM		coc_EServices ES (NOLOCK)
		INNER JOIN	coc_Corporates C (NOLOCK) ON C.CorporateID = ES.CorporateID
		INNER JOIN	coc_EServiceLanguages ESL (NOLOCK) ON ESL.EServiceID = ES.EServiceID AND ESL.LanguageID = @LanguageID
		WHERE		ES.EServiceID = @EServiceID
	END
GO
/****** Object:  StoredProcedure [dbo].[GetEServiceInvoiceInfo]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEServiceInvoiceInfo]
	@EServiceID INTEGER=NULL,
	@PaymentTypeID INTEGER=NULL,
	@LanguageID INTEGER,
	@TotalAmount INTEGER OUTPUT 
AS
	SET NOCOUNT ON
		BEGIN
		IF(@EServiceID IS NULL AND @PaymentTypeID>0)
		BEGIN
			SELECT ROW_NUMBER() OVER (ORDER BY EI.EServiceInvoiceID )id, EI.EServiceInvoiceID,EI.InvoiceNumber,EI.EServiceID,EI.InvoiceDate,EI.PackageAmount,EI.PaymentTypeID,
			EL.EService Name
				 FROM coc_EServiceInvoices(NOLOCK) EI
					  LEFT JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID=EI.EServiceID
					  LEFT JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
			WHERE (@EServiceID IS NULL OR ES.EServiceID =@EServiceID)AND
				  (@PaymentTypeID IS NULL OR EI.PaymentTypeID=@PaymentTypeID)
		END
		ELSE IF(@EServiceID IS NOT NULL AND @PaymentTypeID IS NULL)
			 BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY EI.EServiceInvoiceID )id,EI.EServiceInvoiceID,EI.InvoiceNumber,EI.EServiceID,EI.InvoiceDate,EI.PackageAmount,ES.ServiceNumber,EI.PaymentTypeID,
					   EL.EService PromotionName 
					FROM coc_EServiceInvoices(NOLOCK) EI
						INNER JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID=EI.EServiceID
						INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
				WHERE ES.EServiceID=@EServiceID
			 END
		END	
		declare  @tamt int = 0
		SELECT 
		@tamt=SUM(ReceiptAmount) 
		FROM coc_EServiceReceipts ER (nolock)
		INNER JOIN coc_EServiceInvoices(NOLOCK) EI ON ER.EServiceInvoiceID=EI.EServiceInvoiceID
		INNER JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID=EI.EServiceID
		where ES.EServiceID=@EServiceID
		if(@tamt>0)
		begin
		set @TotalAmount=@tamt
		end
		else 
		begin
		set @TotalAmount=0
		end
		print @TotalAmount
	SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[GetEServiceInvoiceInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEServiceInvoiceInformation]
	@EServiceInvoiceID INTEGER=NULL,
	@PaymentTypeID INTEGER=NULL,
	@LanguageID INTEGER
AS
	SET NOCOUNT ON
		BEGIN
		IF(@EServiceInvoiceID IS NULL AND @PaymentTypeID>0)
		BEGIN
			SELECT ROW_NUMBER() OVER (ORDER BY EI.EServiceInvoiceID )id, EI.EServiceInvoiceID,EI.InvoiceNumber,EI.EServiceID,EI.InvoiceDate,EI.PackageAmount,EI.PaymentTypeID,
			EL.EService Name
				 FROM coc_EServiceInvoices(NOLOCK) EI
					  LEFT JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID=EI.EServiceID
					  LEFT JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
			WHERE (@EServiceInvoiceID IS NULL OR EI.EServiceInvoiceID =@EServiceInvoiceID)AND
				  (@PaymentTypeID IS NULL OR EI.PaymentTypeID=@PaymentTypeID)
		END
		ELSE IF(@EServiceInvoiceID IS NOT NULL AND @PaymentTypeID IS NULL)
			 BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY EI.EServiceInvoiceID )id,EI.EServiceInvoiceID,EI.InvoiceNumber,EI.EServiceID,EI.InvoiceDate,EI.PackageAmount,ES.ServiceNumber,EI.PaymentTypeID,
					   EL.EService PromotionName 
					FROM coc_EServiceInvoices(NOLOCK) EI
						INNER JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID=EI.EServiceID
						INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
				WHERE EI.EServiceInvoiceID=@EServiceInvoiceID
			 END
		END
	SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[GetEServiceReceiptInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEServiceReceiptInformation]
	@EServiceReceiptID INTEGER
AS
	SET NOCOUNT ON
		BEGIN
			SELECT ER.EServiceReceiptID,ER.EServiceInvoiceID,ER.PaymentTypeID,FORMAT(ER.ReceiptDate,'dd/MM/yyyy')ReceiptDate,ER.ReceiptAmount,ER.ChequePayment,ER.CashPayment,ER.CardPayment,
				   ER.ChequeNumber,FORMAT(ISNULL(ER.ChequeDate,''),'dd/MM/yyyy')ChequeDate,ER.BankName,ER.Remarks,FORMAT(ER.AddDate,'dd/MM/yyyy')[Date], (EL.EService)Name
				FROM coc_EServiceReceipts(NOLOCK) ER
					LEFT JOIN coc_EServiceInvoices EI (NOLOCK) ON EI.EServiceInvoiceID=ER.EServiceInvoiceID
					LEFT JOIN coc_EServices ES (NOLOCK) ON ES.EServiceID=EI.EServiceID
					LEFT JOIN coc_EServiceLanguages EL (NOLOCK) ON EL.EServiceID=ES.EServiceID
			WHERE ER.EServiceReceiptID=@EServiceReceiptID
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[GetEServiceReceiptList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEServiceReceiptList]
	@CurrentPage INTEGER,
	@PageSize INTEGER=0,
	@LanguageID  INTEGER=1,
	@EServiceReceiptID INTEGER=NULL,
	@EServiceId integer=NULL,
	@Name [NullName]=NULL,
	@HelpView BIT=NULL,
	@IsActive BIT=NULL,
	@UserID INTEGER=NULL,

	
	@TotalRecords INTEGER OUTPUT

AS
	SET NOCOUNT ON
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		SET @FirstRecord = (@CurrentPage - 1) * @PageSize
		SET @LastRecord = (@CurrentPage * @PageSize + 1)
		DECLARE @EServiceReceipts TABLE
		(
			ClientId INTEGER IDENTITY PRIMARY KEY,
			UniqueID INTEGER,
			ServiceNumber [Code],
			Name [NullName],
			ReceiptAmount [Amount],
			ReceiptDate[Date],
			ReceiptID INTEGER
		)
	
		INSERT INTO @EServiceReceipts(UniqueID,ServiceNumber,Name,ReceiptAmount,ReceiptDate,ReceiptID )
			SELECT  ER.EServiceReceiptID,ES.ServiceNumber,EL.EService,ER.ReceiptAmount,ER.ReceiptDate,ER.EServiceReceiptID
			FROM coc_EServiceReceipts (NOLOCK) ER
				 LEFT JOIN coc_EServiceInvoices EI ON EI.EServiceInvoiceID=ER.EServiceInvoiceID
				 LEFT JOIN coc_EServices  (NOLOCK) ES ON EI.EServiceID=ES.EServiceID
				 LEFT JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
				WHERE (@EServiceReceiptID IS NULL OR ER.EServiceReceiptID=@EServiceReceiptID) AND
					  (@EServiceId IS NULL OR ES.EServiceID = @EServiceId) AND
					  (@Name IS NULL OR EL.EService LIKE +'%'+@Name+'%') AND
					  (@IsActive IS NULL OR IsActive=@IsActive) ORDER BY ER.EServiceReceiptID DESC
		IF ISNULL(@HelpView,0)=0
		BEGIN
			IF (@PageSize=0)BEGIN
					SELECT ClientId,UniqueID,ServiceNumber,Name,ReceiptAmount,ReceiptDate,ReceiptID
						FROM @EServiceReceipts
			END ELSE
				BEGIN
					SELECT ClientId,UniqueID,ServiceNumber,Name,ReceiptAmount,ReceiptDate,ReceiptID
							FROM @EServiceReceipts
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END		
		END	ELSE 
			BEGIN
				IF (@PageSize=0)BEGIN
					SELECT UniqueID,ServiceNumber,Name,ReceiptAmount,ReceiptDate,ReceiptID
						FROM @EServiceReceipts
				END ELSE
				BEGIN
					SELECT UniqueID,ServiceNumber,Name,ReceiptAmount,ReceiptDate,ReceiptID
							FROM @EServiceReceipts
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END
			END
		SELECT @TotalRecords=COUNT(ClientId) FROM @EServiceReceipts
	SET NOCOUNT OFF




GO
/****** Object:  StoredProcedure [dbo].[GetEServiceSettingsInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEServiceSettingsInformation]
	@SystemSetupID INTEGER=NULL 
	AS  
	BEGIN
	SET NOCOUNT ON 
	SELECT * FROM COC_SystemSetups (NOLOCK) WHERE SystemSetupID IN (111,112,113,114,115)ORDER BY SystemSetupID
		SET NOCOUNT OFF
	END
GO
/****** Object:  StoredProcedure [dbo].[GetEServicesExtInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEServicesExtInformation]
	 @EServiceInvoiceID INTEGER=NULL 
AS 
SET NOCOUNT ON
	--Tables[0] EServices
	SELECT EServiceInvoiceID,InvoiceNumber,ES.EServiceID,InvoiceDate,IsExtension,NotificationCount,PackageAmount,PaymentTypeID,IsBarcodeGenerated,EL.EService
		FROM coc_EServiceInvoices ES(NOLOCK)
		LEFT JOIN coc_EServiceLanguages EL ON EL.EServiceID=ES.EServiceID
			WHERE (ES.EServiceInvoiceID=@EServiceInvoiceID) AND IsExtension=1

SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[GetEServicesInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
CREATE PROCEDURE [dbo].[GetEServicesInformation]      
  @EServiceID INTEGER=NULL,      
  @CorporateID INTEGER=NULL,      
  @ServiceNumber [Code]=NULL,      
  @ServiceTypeID INTEGER=NULL,      
  @ServiceSubTypeID INTEGER=NULL,      
  @CompetitionID INTEGER=NULL,      
  @IsBarcodeUsed BIT=0,      
  @LanguageID INTEGER=1,      
  @IsExtension BIT=0,      
  @IsActive BIT=NULL      
AS       
SET NOCOUNT ON       
if @CorporateID = -1      
 select @CorporateID = null      
  DECLARE @Counter INTEGER      
  DECLARE @UnReadCount INTEGER      
  DECLARE @ReadCount INTEGER      
  DECLARE @TotalNotifications INTEGER      
  DECLARE @CSUserID INTEGER      
  DECLARE @RetailOutlet INTEGER      
      
  DECLARE @Notifications AS TABLE      
  (      
   ClientId INTEGER IDENTITY PRIMARY KEY,      
   NotificationCount INTEGER,      
   --NotificationSendID INTEGER,      
   EServiceID INTEGER,      
   NotificationRead INTEGER NULL,      
   NotificationUnRead INTEGER NULL       
  )      
  DECLARE @EServiceNotifications AS TABLE      
  (      
   EServiceID INTEGER,      
   ServiceNumber [NullCode],      
   EService [Remark],      
   ServiceDate DATETIME,       
   FromDate VARCHAR(12),      
   ToDate VARCHAR(12),      
   CorporateID INTEGER,      
   ServiceTypeID INTEGER,      
   ServiceSubTypeID INTEGER,      
   CompetitionID INTEGER,      
   MessagePackID INTEGER,      
   IsActive BIT NOT NULL DEFAULT 0,      
   IsBarcodeUsed BIT,      
   HasCity BIT,      
   HasGender BIT,      
   HasAgeGroup BIT,      
   ResendCount BIT,      
   NotificationCount INTEGER,      
   PackageAmount [NullAmount],       
   MessagePackType [NullDescription],      
   InvoiceNumber [NullCode],      
   CanResend BIT      
  )      
      
      
  INSERT INTO @Notifications(NotificationCount,EServiceID)--NotificationSendID)      
   SELECT  COUNT(ISNULL(CF.ConsumerNotificationID,0)) [NotificationCount],ES.EServiceID        
    FROM coc_Notifications NF(NOLOCK)      
     INNER JOIN coc_NotificationSends NS(NOLOCK) ON NF.NotificationID = NS.NotificationID  AND NS.SendingType != 4      
     INNER JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID=NF.EServiceID      
     INNER JOIN coc_ConsumerNotifications CF(NOLOCK) ON NS.NotificationSendID=CF.NotificationSendID       
    WHERE (@CorporateID IS NULL OR ES.CorporateID = @CorporateID ) AND (@EServiceID IS NULL OR ES.EServiceID=@EServiceID)       
    GROUP BY NS.NotificationID,NS.SendingDate,NS.SendingType,ES.EServiceID       
    ORDER BY ES.EServiceID   DESC       
         
  SELECT @Counter=MIN(ISNULL(EServiceID,0)) FROM @Notifications      
  WHILE @Counter>0      
  BEGIN      
      
   SELECT @UnReadCount=COUNT(CN.HasChecked) FROM coc_ConsumerNotifications(NOLOCK) CN      
    INNER JOIN coc_NotificationSends NS(NOLOCK) ON CN.NotificationSendID=NS.NotificationSendID AND NS.SendingType !=4      
    INNER JOIN coc_Notifications NF(NOLOCK) ON NS.NotificationID=NF.NotificationID AND NF.EServiceID=@Counter      
   WHERE CN.HasChecked=0        
      
   SELECT @ReadCount=COUNT(HasChecked) FROM coc_ConsumerNotifications CN(NOLOCK)       
    INNER JOIN coc_NotificationSends NS(NOLOCK) ON CN.NotificationSendID=NS.NotificationSendID  AND NS.SendingType !=4      
    INNER JOIN coc_Notifications NF(NOLOCK) ON  NF.NotificationID=NS.NotificationID AND NF.EServiceID=@Counter      
   WHERE HasChecked=1       
          
   UPDATE @Notifications      
    SET NotificationRead = ISNULL(@ReadCount,0),      
     NotificationUnRead = ISNULL(@UnReadCount,0),      
     NotificationCount = ISNULL(@ReadCount,0)+ISNULL(@UnReadCount,0)       
   WHERE EServiceID=@Counter      
   SELECT @Counter=MIN(ISNULL(EServiceID,0)) FROM @Notifications WHERE EServiceID> @Counter      
  END      
 --Tables[0] EServices      
 SELECT ES.EServiceID,ES.ServiceNumber,EL.EService+'-'+ES.ServiceNumber [EService],ES.ServiceDate, CONVERT(VARCHAR(12),ES.FromDate,103) [FromDate],CONVERT(VARCHAR(12),ES.ToDate,103) [ToDate],      
  ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.MessagePackTypeID [MessagePackID],ES.IsActive,ES.IsBarcodeUsed,MT.HasCity,      
  MT.HasGender,MT.HasAgeGroup,MT.ResendCount,EI.NotificationCount,EI.PackageAmount [PackageAmount], MT.MessagePackType [MessagePackType],EI.InvoiceNumber,MT.CanResend --EI.      
   FROM coc_EServices ES(NOLOCK)       
    left JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID      
    left JOIN coc_EServiceInvoices  EI(NOLOCK) ON EI.EServiceID=ES.EServiceID AND EI.IsExtension=@IsExtension      
    left JOIN coc_MessagePackTypes MT(NOLOCK) ON ES.MessagePackTypeID=MT.MessagePackTypeID      
   WHERE(@EServiceID IS NULL OR ES.EServiceID=@EServiceID) AND      
    (@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND      
    (@ServiceTypeID IS NULL OR ES.ServiceTypeID=@ServiceTypeID) AND      
    (@ServiceNumber IS NULL OR ES.ServiceNumber=@ServiceNumber) AND      
    (@ServiceSubTypeID IS NULL OR ES.ServiceSubTypeID=@ServiceSubTypeID) AND      
    (@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID) AND      
    (@IsBarcodeUsed IS NULL OR ES.IsBarcodeUsed=@IsBarcodeUsed) AND        
    (@IsActive IS NULL OR ES.IsActive=@IsActive) --AND ES.IsPaymentDone=1      
       
 --Tables[1] EServiceLocations      
 SELECT CASE WHEN EL.EServiceLocationID IS NULL THEN 0 ELSE 1 END [Selected],RO.RetailOutletID, RL.RetailOutlet [Outlet]      
  FROM coc_RetailOutlets RO(NOLOCK)      
   INNER JOIN coc_RetailOutletLanguages RL(NOLOCK) ON RO.RetailOutletID=RL.RetailOutletID AND RO.CorporateID=@CorporateID AND RL.LanguageID=@LanguageID      
 LEFT JOIN coc_EServiceLocations EL(NOLOCK) ON RO.RetailOutletID = EL.RetailOutletID AND EServiceID=@EServiceID      
      
 --Tables[2] Notifications      
 SELECT CN.EServiceID,CS.NotificationSendID,ISNULL(NF.NotificationRead ,0)+ISNULL(NF.NotificationUnRead,0) [NotificationSend], NF.NotificationRead ,--(ISNULL(CN.NotificationRead,0)) [NotificationRead] ,      
  ISNULL(ResendCounter,0) [Resent] ,NF.NotificationUnRead        
  FROM coc_Notifications CN(NOLOCK) --CN.EServiceID,      
   INNER JOIN coc_NotificationSends CS(NOLOCK) ON CN.NotificationID=CS.NotificationID AND CS.SendingType !=4      
   INNER JOIN coc_ConsumerNotifications CF(NOLOCK) ON CS.NotificationSendID=CF.NotificationSendID       
   INNER JOIN @Notifications NF ON NF.EServiceID=CN.EServiceID      
  WHERE (@EServiceID IS NULL OR CN.EServiceID=@EServiceID)      
        
 ----Tables[3] CouponEServices      
 SELECT ES.EServiceID,ES.ServiceNumber,EL.EService+'-'+ES.ServiceNumber [EService],CONVERT(VARCHAR(12),ES.ServiceDate,103) ServiceDate,CONVERT(VARCHAR(12),ES.FromDate,103) FromDate,CONVERT(VARCHAR(12),ES.ToDate,103) ToDate,      
   ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.MessagePackTypeID [MessagePackID],ES.IsActive,ES.IsBarcodeUsed       
   FROM coc_EServices ES(NOLOCK)       
   INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID      
 WHERE ES.EServiceID NOT IN(SELECT EC.EServiceID FROM coc_ECoupons EC(NOLOCK)) AND ES.CompetitionID IS NOT NULL AND      
    (@CorporateID IS NULL OR ES.CorporateID=@CorporateID)  AND ES.IsPaymentDone=1      
        
 ----Tables[4] ECoupons      
 SELECT COUNT(ES.EServiceID) [AvailableCount],EL.EService+'-'+ES.ServiceNumber  [EcouponName], ES.EServiceID ,NF.NotificationID      
  FROM coc_EServices ES(NOLOCK)      
   INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID      
   INNER JOIN coc_Notifications NF(NOLOCK) ON ES.EServiceID=NF.EServiceID      
   INNER JOIN coc_EServiceBarcodes EB(NOLOCK) ON NF.NotificationID=EB.NotificationID      
 WHERE ES.ServiceTypeID=@ServiceTypeID AND       
  (@CompetitionID IS NULL OR CompetitionID=@CompetitionID) AND       
  (@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND      
  EB.IsUsed=0 AND (@EServiceID IS NULL OR ES.EServiceID=@EServiceID)  AND ES.IsPaymentDone=1      
  GROUP BY ES.EServiceID,NF.NotificationID,EL.EService,ES.ServiceNumber       
        
 SELECT @CSUserID=CU.CorporateID,@RetailOutlet=RetailOutletID      
  FROM coc_CorporateUsers(NOLOCK) CU      
 WHERE CU.UserID=@CorporateID      
      
    --Tables[5] EServiceCoupons       
 SELECT EC.EServiceID,EC.ECouponID, EL.EService [EcouponName]      
  FROM coc_ECoupons EC(NOLOCK)      
   LEFT JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  AND ES.IsPaymentDone=1      
   INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID      
   INNER JOIN coc_ECouponOutlets EO(NOLOCK) ON EC.ECouponID=EO.ECouponID AND EO.RetailOutletID=@RetailOutlet      
 WHERE EntryTypeID=44 AND EC.IsActive=1 AND ES.CorporateID=@CSUserID AND  CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)      
      
 ----Table[6] EServiceLanguages      
  SELECT EL.EServiceID,EL.EService,EL.LanguageID FROM coc_EServiceLanguages(NOLOCK) EL WHERE EServiceID=@EServiceID      
      
 ----Table[7] ShowCount      
  SELECT SetupValue [ShowCount] fROM COC_SystemSetups(nolock) WHERE SystemSetupID=502      
      
  SELECT @TotalNotifications=SUM(NotificationCount) FROM coc_EServiceInvoices(NOLOCK) WHERE EServiceID=@EServiceID      
 --Tables[8] EServicesNotification      
 INSERT INTO @EServiceNotifications      
  SELECT ES.EServiceID,ES.ServiceNumber,EL.EService+'-'+ES.ServiceNumber [EService],ES.ServiceDate, CONVERT(VARCHAR(12),ES.FromDate,103) [FromDate],CONVERT(VARCHAR(12),ES.ToDate,103) [ToDate],      
   ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.MessagePackTypeID [MessagePackID],ES.IsActive,ES.IsBarcodeUsed,MT.HasCity,      
   MT.HasGender,MT.HasAgeGroup,MT.ResendCount,0 ,EI.PackageAmount [PackageAmount], MT.MessagePackType [MessagePackType],EI.InvoiceNumber,MT.CanResend --,sUM(EV.NotificationCount)       
    FROM coc_EServices ES(NOLOCK)       
     INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID      
     INNER JOIN coc_EServiceInvoices  EI(NOLOCK) ON EI.EServiceID=ES.EServiceID AND EI.IsExtension=@IsExtension      
     INNER JOIN coc_MessagePackTypes MT(NOLOCK) ON ES.MessagePackTypeID=MT.MessagePackTypeID      
     --INNER JOIN coc_EServiceInvoices(NOLOCK) EV ON EV.EServiceID=ES.EServiceID       
    WHERE(@EServiceID IS NULL OR ES.EServiceID=@EServiceID) AND      
     (@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND      
     (@ServiceTypeID IS NULL OR ES.ServiceTypeID=@ServiceTypeID) AND      
     (@ServiceNumber IS NULL OR ES.ServiceNumber=@ServiceNumber) AND      
     (@ServiceSubTypeID IS NULL OR ES.ServiceSubTypeID=@ServiceSubTypeID) AND      
     (@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID) AND      
     (@IsBarcodeUsed IS NULL OR ES.IsBarcodeUsed=@IsBarcodeUsed) AND        
     (@IsActive IS NULL OR ES.IsActive=@IsActive)      
  SELECT  ES.EServiceID,ES.ServiceNumber,ES.EService,ES.ServiceDate,ES.FromDate,ES.ToDate,ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.MessagePackID,      
   ES.IsActive,ES.IsBarcodeUsed,ES.HasCity,ES.HasGender,ES.HasAgeGroup,ES.ResendCount,ES.PackageAmount, ES.MessagePackType,ES.InvoiceNumber,ES.CanResend,SUM(EV.NotificationCount)  AS [NotificationCount]      
    FROM @EServiceNotifications ES      
     INNER JOIN coc_EServiceInvoices(NOLOCK) EV ON EV.EServiceID=ES.EServiceID       
   GROUP BY ES.EServiceID,ES.ServiceNumber,ES.EService,ES.ServiceDate,ES.FromDate,ES.ToDate,ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.MessagePackID,      
   ES.IsActive,ES.IsBarcodeUsed,ES.HasCity,ES.HasGender,ES.HasAgeGroup,ES.ResendCount,ES.PackageAmount, ES.MessagePackType,ES.InvoiceNumber,ES.CanResend      
SET NOCOUNT OFF       
      
      
      
GO
/****** Object:  StoredProcedure [dbo].[GetEventDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEventDetails] 
	@barcode  NVARCHAR(500),
	@languageId INTEGER
AS
BEGIN
	
	SET NOCOUNT ON;

	DECLARE @ReplaceHtmlContent NVARCHAR(MAX)
	DECLARE @consumermame NVARCHAR(100)
	DECLARE @phone NVARCHAR(100)
	DECLARE @email NVARCHAR(100)
	DECLARE @companyName NVARCHAR(100)
	DECLARE @eventName NVARCHAR(100)
	DECLARE @eventLogo NVARCHAR(100)
	DECLARE @EBarcode NVARCHAR(100)
	DECLARE @finalContent NVARCHAR(MAX)

	DECLARE @events AS TABLE
		(
			UniqueID INTEGER Identity(1,1),
			EBarcode NVARCHAR(100),
			consumermame NVARCHAR(100),
			phone NVARCHAR(100),
			Email NVARCHAR(100),
			eventname NVARCHAR(100),
			eventlogo NVARCHAR(100),
			htmlContent NVARCHAR(MAX),
			companyname NVARCHAR(100)
		)
		
	IF EXISTS(SELECT EServiceBarcodeID FROM coc_EServiceBarcodes (NOLOCK) WHERE Barcode=@barcode )
	BEGIN

		INSERT INTO @events (EBarcode,consumermame,phone,email,eventName,eventLogo,htmlContent,companyName)
		SELECT 
			ebs.Barcode AS EBarcode,
			gs.FullName AS consumermame,
			gs.PrimaryMobile AS phone,
			gs.EmailID AS Email,
			evl.ResourceValue AS eventname,
			evt.ImageFileName AS eventlogo,
			evt.HtmlContent AS htmlContent,
			gs.CompanyName AS companyname
		FROM coc_EServiceBarcodes ebs (NOLOCK)
		INNER JOIN coc_EventConfiguration evt (NOLOCK) ON evt.EventID=ebs.EventID AND evt.IsActive=1
		INNER JOIN coc_EventLanguages evl (NOLOCK) ON evl.EventID=evt.EventID AND evl.LanguageID=@languageId AND evl.ResourceKey='EventName'
		--INNER JOIN coc_Consumers cns ON cns.ConsumerID=ebs.ConsumerID
		INNER JOIN coc_EServices esrs (NOLOCK) ON esrs.EServiceID=evt.EServiceID
		INNER JOIN coc_Guests gs (NOLOCK) ON gs.GuestID=ebs.GuestID
		WHERE  ebs.Barcode=@barcode

		SELECT @ReplaceHtmlContent=htmlContent FROM @events
		SELECT @consumermame=consumermame FROM @events
		SELECT @phone=phone FROM @events
		SELECT @email=Email FROM @events
		SELECT @eventName=eventname FROM @events
		SELECT @eventLogo=eventlogo FROM @events
		SELECT @companyName=companyname FROM @events
		SELECT @EBarcode=EBarcode FROM @events

		SELECT @ReplaceHtmlContent = REPLACE(@ReplaceHtmlContent,'@consumerName', @consumermame)
		SELECT @ReplaceHtmlContent = REPLACE(@ReplaceHtmlContent,'@phone', @phone)
		SELECT @ReplaceHtmlContent = REPLACE(@ReplaceHtmlContent,'@email', @email)
		SELECT @ReplaceHtmlContent = REPLACE(@ReplaceHtmlContent,'@companyname', @companyName)
		SELECT @ReplaceHtmlContent = REPLACE(@ReplaceHtmlContent,'@eventname', @eventName)
		
		
		--The HtmlContent has an image tag with url point to \UploadedFiles\barcodes\samplebarcode.png which will be replaced with the 
		--newly creating barcode image in the c# code.


		SELECT 
			ebs.EServiceBarcodeID AS [EServiceBarcodeID],
			ebs.Barcode AS [Barcode],
			gs.FullName AS [ConsumerName],
			gs.GuestID AS [MembershipNumber],
			evl.ResourceValue AS [EventName],
			CONVERT(VARCHAR, esrs.FromDate, 6) AS FromDate,
			CONVERT(VARCHAR, esrs.ToDate, 6) AS ToDate,
			CONVERT(INT,ebs.IsUsed) AS IsUsed,
			@ReplaceHtmlContent AS [HtmlContent]
			--@finalContent AS [HtmlContent]
			--[HtmlContent]=@ReplaceHtmlContent
		FROM coc_EServiceBarcodes ebs (NOLOCK)
		INNER JOIN coc_EventConfiguration evt (NOLOCK) ON evt.EventID=ebs.EventID AND evt.IsActive=1
		INNER JOIN coc_EventLanguages evl (NOLOCK) ON evl.EventID=evt.EventID AND evl.LanguageID=@languageId AND evl.ResourceKey='EventName'
		--INNER JOIN coc_Consumers cns ON cns.ConsumerID=ebs.ConsumerID
		INNER JOIN coc_Guests gs (NOLOCK) ON gs.GuestID=ebs.GuestID
		INNER JOIN coc_EServices esrs (NOLOCK) ON esrs.EServiceID=evt.EServiceID
		WHERE  ebs.Barcode=@barcode

		
		
	END
END
GO
/****** Object:  StoredProcedure [dbo].[GetEventForParticipation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[GetEventForParticipation]
	@eventId INTEGER,
	@languageId INTEGER
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT
		evt.EventID AS [EventID],
		esr.FromDate AS [EventStartDate],
		esr.ToDate AS [EventEndDate],
		evl1.ResourceValue AS [EventName],
		evl2.ResourceValue AS [Location]
	FROM coc_EventConfiguration AS evt (NOLOCK)
	INNER JOIN coc_EventLanguages AS evl1 (NOLOCK) ON evl1.EventID=evt.EventID AND evl1.ResourceKey='EventName' AND evl1.LanguageID=@languageId
	INNER JOIN coc_EventLanguages AS evl2 (NOLOCK) ON evl2.EventID=evt.EventID AND evl2.ResourceKey='Location' AND evl2.LanguageID=@languageId
	INNER JOIN coc_EServices AS esr (NOLOCK) ON esr.EServiceID=evt.EServiceID
	WHERE evt.EventID=@eventId AND evt.IsActive=1
END
GO
/****** Object:  StoredProcedure [dbo].[GetEvents]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetEvents]
	@LanguageId INTEGER=1
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT 
		evtc.EventID AS [EventID],
		evtl.ResourceValue AS [EventName]
	FROM coc_EventConfiguration AS evtc (NOLOCK)
	INNER JOIN coc_EventLanguages AS evtl (NOLOCK) ON evtl.EventID=evtc.EventID AND evtl.ResourceKey='EventName' AND evtl.LanguageID=@LanguageId

END
GO
/****** Object:  StoredProcedure [dbo].[GetEVoucherBundle]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEVoucherBundle]

	@EbundleID INTEGER,
	@LanguageID INTEGER = 1

	AS
	BEGIN

	SELECT
		eb.EVoucherBundleID, evl.ResourceValue as VoucherName, evls.ResourceValue as VoucherDescription, ISNULL(evi.ImageFile,'default.png') as VoucherLogo,
		c.LogoFile as CorporateLogo,c.CorporateName,eva.IsApproved
	FROM
		coc_EVoucherBundle eb(NOLOCK) INNER JOIN 
		coc_EVoucherLanguages evl (NOLOCK) ON eb.EVoucherID = evl.EVoucherID  AND evl.LanguageID=@LanguageID AND evl.ResourceKey = 'VoucherName' INNER JOIN
		coc_EVoucherLanguages evls (NOLOCK) ON eb.EVoucherID = evls.EVoucherID  AND evls.LanguageID=@LanguageID AND evls.ResourceKey = 'Description' LEFT JOIN
		coc_EVoucherImages evi (NOLOCK) ON eb.EVoucherID = evi.EVoucherID AND evi.IsPrimaryImage = 1 INNER JOIN 
		coc_EVoucher ev (NOLOCK) ON eb.EVoucherID = ev.EVoucherID INNER JOIN
		coc_EvoucherApproval eva (NOLOCK) ON eb.EVoucherBundleID = eva.EVoucherBundleID INNER JOIN
		coc_EServices es (NOLOCK) ON es.EServiceID = ev.EServiceID INNER JOIN
		coc_Corporates c (NOLOCK) ON es.CorporateID = c.CorporateID 
	WHERE
		eb.EBundleID = @EbundleID
	order by eb.EVoucherBundleID desc
	END
GO
/****** Object:  StoredProcedure [dbo].[GetEVoucherBundleDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetEVoucherBundleDetails]
	@EVoucherBundleId INTEGER,
	@LanguageId INTEGER
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT 
		es.CorporateID,evb.EVoucherID,crs.CorporateName,evl.ResourceValue AS EVoucherName
	FROM coc_EVoucherBundle evb (NOLOCK)
		INNER JOIN coc_EVoucher ev (NOLOCK) ON ev.EVoucherID=evb.EVoucherID
	INNER JOIN coc_EServices es (NOLOCK) ON ev.EServiceID=es.EServiceID
		INNER JOIN coc_EVoucherLanguages AS evl (NOLOCK) ON evl.EVoucherID=ev.EVoucherID AND evl.ResourceKey='VoucherName' AND evl.LanguageID=@LanguageId
		INNER JOIN coc_Corporates crs (NOLOCK) ON crs.CorporateID=es.CorporateID
	WHERE evb.EVoucherBundleID=@EVoucherBundleId
END
GO
/****** Object:  StoredProcedure [dbo].[GetEVOucherBundleDistributionDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetEVOucherBundleDistributionDetails] 
	@EVoucherBundleDistributionId INTEGER
AS
BEGIN
	SELECT 
		evbd.EVoucherBundleDistributionID,
		evbd.EVoucherBundleID,
		evbd.CorporateID,
		evbd.NoOfVouchers,
		crs.CorporateName
	FROM coc_EVoucherBundleDistribution evbd (NOLOCK)
	INNER JOIN coc_Corporates crs (NOLOCK) ON crs.CorporateID=evbd.CorporateID
	WHERE evbd.EVoucherBundleDistributionID=@EVoucherBundleDistributionId
	
END
GO
/****** Object:  StoredProcedure [dbo].[GetEVoucherBundleDistributions]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetEVoucherBundleDistributions]
	@EVoucherBundleId INTEGER
	--@LanguageId INTEGER
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT 
		evbd.EVoucherBundleDistributionID,
		evbd.EVoucherBundleID,
		evbd.NoOfVouchers,
		crs.CorporateID,
		crs.CorporateName,
		crs.LogoFile
	FROM coc_EVoucherBundleDistribution evbd (NOLOCK)
	INNER JOIN coc_Corporates crs (NOLOCK) ON crs.CorporateID=evbd.CorporateID
	WHERE evbd.EVoucherBundleID=@EVoucherBundleId
END
GO
/****** Object:  StoredProcedure [dbo].[GetEVoucherBundleQRcodeDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetEVoucherBundleQRcodeDetails]
	@EVoucherBundleQRCodeID INTEGER
	AS
BEGIN
	DECLARE @Imageutl VARCHAR (100) = ''
	SET NOCOUNT ON;

	SELECT 
		evbq.EVoucherBundleQRCodeID,
		evbq.EBundleID,
		evbq.CorporateID,
		crs.CorporateName,
		evbq.NumberOfEligibleVouchers,
		evbq.QRCodeValue,
		evbq.IsActive,
		@Imageutl AS ImageUrl
	FROM coc_EVoucherBundleQRCode evbq (NOLOCK)
		INNER JOIN coc_Corporates crs (NOLOCK) ON crs.CorporateID=evbq.CorporateID
	WHERE evbq.EVoucherBundleQRCodeID=@EVoucherBundleQRCodeID
END
GO
/****** Object:  StoredProcedure [dbo].[GetEVoucherBundleQRcodes]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetEVoucherBundleQRcodes]
	@EBundleID INTEGER
	AS
BEGIN
	SET NOCOUNT ON;
	-- Table 0 --
	SELECT 
		BQ.EVoucherBundleQRCodeID,
		BQ.EBundleID,
		BQ.CorporateID,
		BQ.NumberOfEligibleVouchers,
		BQ.QRCodeValue,
		C.CorporateName
	FROM coc_EVoucherBundleQRCode BQ (NOLOCK)
	INNER JOIN coc_Corporates C (NOLOCK) ON C.CorporateID = BQ.CorporateID
	WHERE BQ.EBundleID=@EBundleID AND BQ.IsActive=1

	-- Table 1 --
	SELECT DISTINCT
		BQ.CorporateID,
		C.CorporateName
	FROM coc_EVoucherBundleQRCode BQ (NOLOCK)
	INNER JOIN coc_Corporates C (NOLOCK) ON C.CorporateID = BQ.CorporateID
	WHERE BQ.EBundleID=@EBundleID AND BQ.IsActive=1
END
GO
/****** Object:  StoredProcedure [dbo].[GetEVoucherConfigTerms]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[GetEVoucherConfigTerms] 

@LanguageID INTEGER = 1

 AS
 BEGIN
 
	SELECT  coc_TermLanguages.Term AS ConfigTems
	FROM  coc_TermLanguages (NOLOCK)
	INNER JOIN	coc_Terms (NOLOCK) ON coc_TermLanguages.TermID = coc_Terms.TermID
	WHERE coc_TermLanguages.LanguageID = @LanguageID AND coc_Terms.TermsKey = 2

 END
GO
/****** Object:  StoredProcedure [dbo].[GetEVoucherConfigurationInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEVoucherConfigurationInformation]
	@EVoucherID INTEGER,
	@LanguageID INTEGER
AS
	SET NOCOUNT ON
		BEGIN
			--Table[0]--
			SELECT ELN.ResourceValue AS VoucherName,EL.ResourceValue AS Description,ES.FromDate,ES.ToDate,EN.NotificationCount,EC.EVoucherCategoryID, EL.LanguageID
					FROM coc_EVoucher EC(NOLOCK) 
						INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID = ES.EServiceID
						INNER JOIN coc_EVoucherLanguages EL(NOLOCK) ON  EL.EVoucherID=@EVoucherID AND EL.ResourceKey='Description' AND EL.LanguageID=@LanguageID
						INNER JOIN coc_EVoucherLanguages ELN(NOLOCK) ON  ELN.EVoucherID=@EVoucherID AND ELN.ResourceKey='VoucherName' AND ELN.LanguageID=@LanguageID
						INNER JOIN coc_Notifications EN(NOLOCK) ON EN.EServiceID=ES.EServiceID
				WHERE EC.EVoucherID=@EVoucherID 

		--Table[1]--
			SELECT EVoucherImagesID,IsPrimaryImage
					FROM coc_EVoucherImages (NOLOCK) 
						
				WHERE EVoucherID=@EVoucherID 

		END
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[GetEVoucherDetailsByServiceID]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ======================================================================          
-- Author     :  Vikram  use eCoponTest2019February18        
-- Create date    :  29-Nov-2017          
-- Description    :  Get Voucher Details By Service ID  GetEVoucherDetailsByServiceID 166,1        
-- ======================================================================          
CREATE PROCEDURE  [dbo].[GetEVoucherDetailsByServiceID]          
 @EServiceID    int,          
 @LanguageID    int          
AS          
BEGIN          
 SET NOCOUNT ON;          
          
  BEGIN          
          
    DECLARE  @EVoucherID    Int          
 DECLARE  @EVoucherCategoryID  Int          
 DECLARE  @Type    Int          
 DECLARE @DiscountType int = null;        
 DECLARE @DiscountAmount decimal(18,2)=null;        
 DECLARE @DiscountPercentage decimal(18,2)=null;        
 DECLARE @OriginalPrice decimal(18,2)=null;        
 DECLARE @PriceAfterDiscount decimal(18,2)=null;        
 DECLARE @PromotionAmount decimal(18,2)=null;        
 DECLARE @VoucherAmount  decimal(18,2)=null;        
 DECLARE  @NumberOfVouchers    Int          
   DECLARE @EVoucher AS TABLE           
   (          
    EVoucherID    INTEGER,          
    EVoucherCategoryID  INTEGER  ,        
 [Type] integer,        
 DiscountType int ,        
 DiscountAmount decimal(18,2),        
 DiscountPercentage decimal(18,2),        
 OriginalPrice decimal(18,2),        
 PriceAfterDiscount decimal(18,2),        
 PromotionAmount decimal(18,2),        
 VoucherAmount  decimal(18,2),        
 NumberOfVouchers    Int          
   )          
          
   -- Table [0] - Voucher Details          
          
   INSERT INTO @EVoucher          
    SELECT          
     EVoucherID,  ISNULL( EVoucherCategoryID,0) AS EVoucherCategoryID  ,[Type],        
  DiscountType ,        
 DiscountAmount ,        
 DiscountPercentage ,        
 OriginalPrice ,        
 PriceAfterDiscount ,        
 PromotionAmount ,        
 VoucherAmount  ,        
 NumberOfVouchers         
    FROM          
     coc_EVoucher  (NOLOCK)        
    WHERE          
     EServiceID = @EServiceID          
             
             
   SELECT           
    @EVoucherID    = EVoucherID,            
    @EVoucherCategoryID  = EVoucherCategoryID  ,        
 @Type = [Type],        
 @DiscountType =DiscountType ,        
 @DiscountAmount =DiscountAmount,        
 @DiscountPercentage=DiscountPercentage ,        
 @OriginalPrice =OriginalPrice,        
 @PriceAfterDiscount =PriceAfterDiscount ,        
 @PromotionAmount =PromotionAmount,        
 @VoucherAmount  =VoucherAmount  ,        
 @NumberOfVouchers  =NumberOfVouchers         
   FROM           
    @EVoucher           
          
          
   SELECT           
    EVoucherID,  EVoucherCategoryID  ,[Type],DiscountType ,        
 DiscountAmount ,        
 DiscountPercentage ,        
 OriginalPrice ,        
 PriceAfterDiscount ,        
 PromotionAmount ,        
 VoucherAmount  ,NumberOfVouchers        
   FROM           
    @EVoucher          
          
  --Table[1]  --          
          
   SELECT          
    ELN.ResourceValue AS VoucherName, EL.ResourceValue AS Description, ES.FromDate, ES.ToDate, EN.NotificationCount, EC.EVoucherCategoryID, EL.LanguageID          
   FROM          
    coc_EVoucher EC(NOLOCK) left JOIN          
    coc_EServices ES(NOLOCK) ON EC.EServiceID = ES.EServiceID left JOIN           
    coc_EVoucherLanguages EL(NOLOCK) ON  EL.EVoucherID=@EVoucherID AND EL.ResourceKey = 'Description' left JOIN --AND EL.LanguageID = @LanguageID INNER JOIN           
    coc_EVoucherLanguages ELN(NOLOCK) ON  ELN.EVoucherID=@EVoucherID AND ELN.ResourceKey = 'VoucherName' AND ELN.LanguageID = @LanguageID left JOIN           
    coc_Notifications EN(NOLOCK) ON EN.EServiceID=ES.EServiceID          
   WHERE          
    EC.EVoucherID=@EVoucherID           
          
  --Table[2]--          
          
   SELECT          
    EVoucherImagesID, IsPrimaryImage, ISNULL(ImageFile,'') AS ImageFile          
   FROM          
    coc_EVoucherImages (NOLOCK)          
   WHERE          
    EVoucherID  = @EVoucherID           
          
      
 --Table[3]--      
  SELECT          
    ELN.ResourceValue AS VoucherName, EL.ResourceValue AS Description, ES.FromDate, ES.ToDate, EN.NotificationCount, EC.EVoucherCategoryID, EL.LanguageID          
   FROM          
    coc_EVoucher EC(NOLOCK) left JOIN          
    coc_EServices ES(NOLOCK) ON EC.EServiceID = ES.EServiceID left JOIN           
    coc_EVoucherLanguages EL(NOLOCK) ON  EL.EVoucherID=@EVoucherID AND EL.ResourceKey = 'WhatYouGet' left JOIN --AND EL.LanguageID = @LanguageID INNER JOIN           
    coc_EVoucherLanguages ELN(NOLOCK) ON  ELN.EVoucherID=@EVoucherID AND ELN.ResourceKey = 'WhatYouGet' AND ELN.LanguageID = @LanguageID left JOIN           
    coc_Notifications EN(NOLOCK) ON EN.EServiceID=ES.EServiceID          
   WHERE          
    EC.EVoucherID=@EVoucherID         
      
  END          
           
END
GO
/****** Object:  StoredProcedure [dbo].[GetEVoucherImageInfoById]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================================================
-- Author						:	Vikram
-- Create date					:	29-Nov-2017
-- Description					:	Get Voucher Image details by Image Id
-- =============================================================================
CREATE PROCEDURE [dbo].[GetEVoucherImageInfoById]
	@EVoucherImageID			INTEGER
AS
BEGIN
	SET NOCOUNT ON;

		
		BEGIN
			SELECT
				EVoucherImagesID, ImageFile, IsPrimaryImage
			FROM
				coc_EVoucherImages (NOLOCK)
			WHERE
				EVoucherImagesID	=	@EVoucherImageID

		END

END
GO
/****** Object:  StoredProcedure [dbo].[GetEVoucherLocations]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[GetEVoucherLocations]          
  @EVoucherID int,          
  @LanguageID int         
 AS            
 SET NOCOUNT ON            
 BEGIN              
  BEGIN TRY           
    select evl.VoucherLocationID,evl.CityID,cl.City,    
 (select Location from coc_eVoucherLocationLanguages (NOLOCK) where VoucherLocationID=evl.VoucherLocationID and LanguageID=1) as LocationEN,    
 (select Location from coc_eVoucherLocationLanguages (NOLOCK) where VoucherLocationID=evl.VoucherLocationID and LanguageID=2) as LocationAR,    
 evl.MapLink    
 from coc_EvoucherLocations evl    (NOLOCK)
 left join coc_CityLanguages cl (NOLOCK) on cl.CityID=evl.CityID    
 where cl.LanguageID=@LanguageID and evl.EVoucherID=@EVoucherID    
       
  END TRY            
  BEGIN CATCH          
  print(Error_line())          
  SELECT Error_line()          
  print(Error_message())          
   SELECT Error_message()            
  END CATCH            
 SET NOCOUNT OFF             
 END 
GO
/****** Object:  StoredProcedure [dbo].[GetEVouchers]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEVouchers]  
 @LanguageId INTEGER=1,
 @CorporateID INTEGER=NULL
AS  
BEGIN  
   
 SET NOCOUNT ON;  
  if(@CorporateID=0)
    set @CorporateID=NULL
 SELECT   
  ev.EVoucherID AS [EVoucherID] ,  
  evl.ResourceValue AS [EVoucherName]  
 FROM coc_EVoucher(nolock) AS ev   
 Inner join coc_EServices(nolock) es on es.EServiceID=ev.EServiceID
 INNER JOIN coc_EVoucherLanguages(nolock) AS evl ON evl.EVoucherID=ev.EVoucherID AND evl.ResourceKey='VoucherName' AND evl.LanguageID=@LanguageId 
 where @CorporateID is null or es.CorporateID=@CorporateID
  
END
GO
/****** Object:  StoredProcedure [dbo].[GetEVoucherTermsAndConditions]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetEVoucherTermsAndConditions] 

@EVoucherID INTEGER

	AS
	DECLARE @IsDesabled BIT = 0
	BEGIN
		IF(EXISTS(SELECT * FROM coc_EVoucherBundle EB (NOLOCK) INNER JOIN coc_EVoucherBundleDistribution EVD (NOLOCK) ON EB.EVoucherBundleID = EVD.EVoucherBundleID WHERE EB.EVoucherID = @EVoucherID))
	BEGIN
				SET @IsDesabled = 1
			END

	SELECT E.EVoucherID,E.IsAllowed, E.IsActive, @IsDesabled AS IsDesabled FROM coc_EVoucher  E (NOLOCK)
	WHERE E.EVoucherID = @EVoucherID 

	--SELECT E.EVoucherID,EL.ResourceValue AS TermsEng, EVL.ResourceValue AS TermsAr FROM coc_EVoucher  E
	--INNER JOIN coc_EVoucherLanguages EL ON EL.EVoucherID = E.EVoucherID AND EL.LanguageID=1
	--INNER JOIN coc_EVoucherLanguages EVL ON EVL.EVoucherID = E.EVoucherID AND EVL.LanguageID=2
	--WHERE E.EVoucherID = @EVoucherID AND EL.ResourceKey = 'Terms' AND EVL.ResourceKey = 'Terms'

	END
GO
/****** Object:  StoredProcedure [dbo].[GetEVoucherTermsData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[GetEVoucherTermsData]
@EVoucherID INTEGER
As 
BEGIN
   select 
      (select ResourceValue from coc_EVoucherLanguages (NOLOCK) where EVoucherID=@EVoucherID and ResourceKey='Terms' and LanguageID=1) as EnglishTerms,
	  (select ResourceValue from coc_EVoucherLanguages (NOLOCK) where EVoucherID=@EVoucherID and ResourceKey='Terms' and LanguageID=2) as ArabicTerms
	   

END
GO
/****** Object:  StoredProcedure [dbo].[GetFullCoponInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetFullCoponInformation]               
 @LanguageID INTEGER,              
 @ECouponID INTEGER,              
 @EServiceID INTEGER,              
 @getCoponInfo bit,              
 @getWinners bit,               
 @getDraws bit,              
 @getPrizes bit,              
 @ArchiveFilter int=0,              
 @TableList varchar(300) output,
 @PageNumber INTEGER = NULL,  
 @PageSize INTEGER = NULL  
AS              
SET NOCOUNT ON              
 BEGIN              
  if @ECouponID = 0              
   select @ECouponID= NULL              
  if @EServiceID = 0              
   select @EServiceID = NULL              
  if @ArchiveFilter IS NULL               
   select @ArchiveFilter = 0 
  if @PageNumber = 0              
   select @PageNumber = NULL    
  if @PageSize  = 0                
   select @PageSize = NULL 
  IF (@ECouponID IS NOT NULL OR @EServiceID IS NOT NULL)
    select @PageNumber = NULL, @PageSize = NULL 
    
  DECLARE @Counter INTEGER              
              
  DECLARE @ArchiveDays INTEGER = 30              
              
  select @TableList = ''              
  if (@getCoponInfo = 1)              
  begin
    IF (@PageNumber IS NOT NULL AND @PageSize IS NOT NULL)
    BEGIN
        --IF OBJECT_ID('tempdb..#ECoponDetailS') IS NOT NULL DROP TABLE #ECoponDetailS
        --CREATE TABLE #ECoponDetailS  
        --(TotalRecords INTEGER, ECouponID BIGINT,EServiceID INTEGER, ResultDate NVARCHAR(12), WinnerCount TINYINT, 
        --EntryTypeID INTEGER, MinInvoiceValue Decimal(15,4), AdditionalCouponValue Decimal(15,4), AllowMultipleInvoices BIT,
        --CouponPerInvoice INTEGER, CouponPerMember INTEGER, UserAurthorised BIT, QuestionCount INT, 
        --ImageFile NVARCHAR(100), UsesTerm NVARCHAR(MAX), ECouponTemplate NVARCHAR(MAX), ParticipationByKiosk BIT,
        --EService NVARCHAR(1000), StartDate NVARCHAR(12), EndDate NVARCHAR(12), MemberOnly BIT, DisplayImage NVARCHAR(100),
        --IsActive INTEGER, AllowMobileParticipation INTEGER, AllowWebParticipation INTEGER, PrizeCount INTEGER,
        --DrawsCount INTEGER, Location NVARCHAR(100), LocationURL NVARCHAR, [CompetitionStatus] INTEGER,
        --LocationValidationRequired BIT)

        --Insert into #ECoponDetailS 
        --(TotalRecords, ECouponID,EServiceID, ResultDate, WinnerCount, 
        --EntryTypeID, MinInvoiceValue, AdditionalCouponValue, AllowMultipleInvoices,
        --CouponPerInvoice, CouponPerMember, UserAurthorised, QuestionCount, 
        --ImageFile, UsesTerm, ECouponTemplate, ParticipationByKiosk,
        --EService, StartDate, EndDate, MemberOnly, DisplayImage,
        --IsActive, AllowMobileParticipation, AllowWebParticipation, PrizeCount,
        --DrawsCount, [Location], LocationURL, [CompetitionStatus], LocationValidationRequired)
         
        SELECT TotalRecords = COUNT(*) OVER(), EC.ECouponID,EC.EServiceID,
        FORMAT(EC.ResultDate,'dd/MM/yyyy') ResultDate,EC.WinnerCount,EC.EntryTypeID,EC.MinInvoiceValue,
        EC.AdditionalCouponValue,EC.AllowMultipleInvoices,EC.CouponPerInvoice, EC.CouponPerMember,
        EC.UserAurthorised,EC.QuestionCount,EC.ImageFile,              
        case when EL.LanguageID= 2 then '<div dir= ''rtl'' >'+ replace(EL.UsesTerm,'a href="www', 'a href="http://www') + '</div>' else replace(EL.UsesTerm,'a href="www', 'a href="http://www') end as UsesTerm,                
        EL.ECouponTemplate,EC.ParticipationByKiosk,SL.EService [ServiceName],              
        (case when es.eserviceid = 280 then '' else FORMAT(ES.FromDate,'dd/MM/yyyy') end )StartDate, FORMAT(ES.ToDate,'dd/MM/yyyy') EndDate,EC.MemberOnly,EC.DisplayImage,                
        case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)) THEN 1 else 0 end as IsActive,              
        ISNULL(AllowMobileParticipation, 1) as AllowMobileParticipation, ISNULL(AllowWebParticipation, 1) as AllowWebParticipation,              
        ISNULL((select sum(ISNULL(ep.PrizeCount,0)) from coc_ECouponPrizes(NOLOCK) EP where EP.ECouponID = EC.ECouponID),0) as PrizeCount,              
        (select count(*) from coc_ECouponDraw(NOLOCK) ED where ED.ECouponID = EC.ECouponID) as DrawsCount,              
        EC.Location, LocationURL,          
        case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)) THEN 1          
        when (CAST(GETDATE() AS DATE) > CAST(ES.ToDate AS DATE)) THEN 2 ELSE 3        
        end as [CompetitionStatus] ,  IsNull(EC.LocationValidationRequired,0) LocationValidationRequired,
        CASE WHEN EC.EntryTypeID = 46 THEN DL.LinkName WHEN EC.EntryTypeID IN (47, 48, 49) THEN ES.ExternalRedirectionURL ELSE '' END AS ExternalRedirectionURL,
        case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE))           
        THEN 1 ELSE 0  end as [AllowParticipation] 
        FROM coc_ECoupons(NOLOCK) EC              
        INNER JOIN coc_EServices(NOLOCK) ES ON EC.EServiceID = ES.EServiceID              
        INNER JOIN coc_EServiceLanguages(NOLOCK) SL ON ES.EServiceID=SL.EServiceID AND SL.LanguageID = @LanguageID              
        INNER JOIN coc_ECouponLanguages(NOLOCK) EL ON EL.ECouponID=EC.ECouponID AND EL.LanguageID = @LanguageID
        LEFT JOIN Coc_Core_DynamicLinks (NOLOCK) DL ON DL.EcouponID = EC.ECouponID
        WHERE               
        --((@ECouponID IS NULL or EC.ECouponID = @ECouponID) and (@EServiceID IS NULL or ES.EServiceID = @EServiceID)) and 
        ES.IsActive = 1 and EC.IsActive = 1 and EC.IsApproved = 1              
        and EC.EServiceID <> 183   and ec.ECouponID not in (10193, 10194, 10195) and ec.ECouponID not in (10206)        
        and ec.ECouponID not in (10219) and (EC.IsShowMobile is null or EC.IsShowMobile=1)        
        ORDER BY (case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)) THEN 1 else 0 end ) DESC,      
        (case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) < CAST(ES.ToDate AS DATE))   THEN 1 else 0 end ) DESC,     
        ISNULL(EC.Priority,-1) desc, ES.FromDate desc 
        OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY;

        --SELECT * FROM #ECoponDetailS
         
    END
    ELSE
    BEGIN
        --Table-> ECoupon              
        SELECT EC.ECouponID,EC.EServiceID,FORMAT(EC.ResultDate,'dd/MM/yyyy') ResultDate,EC.WinnerCount,EC.EntryTypeID,EC.MinInvoiceValue,EC.AdditionalCouponValue,EC.AllowMultipleInvoices,EC.CouponPerInvoice,              
        EC.CouponPerMember,EC.UserAurthorised,EC.QuestionCount,EC.ImageFile,              
        --case when EL.LanguageID= 2 then '<div dir= ''rtl'' >'+ EL.UsesTerm + '</div>' else EL.UsesTerm end as UsesTerm,              
        case when EL.LanguageID= 2 then '<div dir= ''rtl'' >'+ replace(EL.UsesTerm,'a href="www', 'a href="http://www') + '</div>' else replace(EL.UsesTerm,'a href="www', 'a href="http://www') end as UsesTerm,                
        EL.ECouponTemplate,EC.ParticipationByKiosk,SL.EService [ServiceName],              
        (case when es.eserviceid = 280 then '' else FORMAT(ES.FromDate,'dd/MM/yyyy') end )StartDate, FORMAT(ES.ToDate,'dd/MM/yyyy') EndDate,EC.MemberOnly,EC.DisplayImage,                
        case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)) THEN 1 else 0 end as IsActive,              
        ISNULL(AllowMobileParticipation, 1) as AllowMobileParticipation, ISNULL(AllowWebParticipation, 1) as AllowWebParticipation,              
        ISNULL((select sum(ISNULL(ep.PrizeCount,0)) from coc_ECouponPrizes(NOLOCK) EP where EP.ECouponID = EC.ECouponID),0) as PrizeCount,              
        (select count(*) from coc_ECouponDraw(NOLOCK) ED where ED.ECouponID = EC.ECouponID) as DrawsCount,              
        EC.Location, LocationURL,          
        case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE))           
        THEN 1--acitve           
        when (CAST(GETDATE() AS DATE) > CAST(ES.ToDate AS DATE))           
        THEN 2 -- completed          
        ELSE 3 -- comming soon          
        end as [CompetitionStatus] ,   
        IsNull(EC.LocationValidationRequired,0) LocationValidationRequired,
        CASE WHEN EC.EntryTypeID = 46 THEN DL.LinkName WHEN EC.EntryTypeID IN (47, 48, 49) THEN ES.ExternalRedirectionURL ELSE '' END AS ExternalRedirectionURL,
        case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE))           
        THEN 1 ELSE 0  end as [AllowParticipation]     
        FROM coc_ECoupons(NOLOCK) EC              
        INNER JOIN coc_EServices(NOLOCK) ES ON EC.EServiceID = ES.EServiceID              
        INNER JOIN coc_EServiceLanguages(NOLOCK) SL ON ES.EServiceID=SL.EServiceID AND SL.LanguageID = @LanguageID              
        INNER JOIN coc_ECouponLanguages(NOLOCK) EL ON EL.ECouponID=EC.ECouponID AND EL.LanguageID = @LanguageID
        LEFT JOIN Coc_Core_DynamicLinks (NOLOCK) DL ON DL.EcouponID = EC.ECouponID
        WHERE               
        ((@ECouponID IS NULL or EC.ECouponID = @ECouponID) and               
        (@EServiceID IS NULL or ES.EServiceID = @EServiceID))              
        and ES.IsActive = 1 and EC.IsActive = 1 and EC.IsApproved = 1              
        --and ((@ArchiveFilter = 1 and convert(date,dateadd(day,@ArchiveDays,ES.ToDate)) <= convert(date,getdate())) or               
        --  ((@ArchiveFilter = 0 and convert(date,dateadd(day,@ArchiveDays,ES.ToDate)) >= convert(date,getdate()))))              
        --and isnull(EC.AllowMobileParticipation,0) = 1              
        and EC.EServiceID <> 183 -- added by shamim to hide SME Funnel          
        and ec.ECouponID not in (10193, 10194, 10195) -- added by shamim to hide 3 lipton competitions as told my othman        
        and ec.ECouponID not in (10206) -- added by shamim to hide lipton gold competition as told my othman        
        and ec.ECouponID not in (10219)        
        and (EC.IsShowMobile is null or EC.IsShowMobile=1)        
        ORDER BY (case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)) THEN 1 else 0 end ) DESC,      
        (case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) < CAST(ES.ToDate AS DATE))   THEN 1 else 0 end ) DESC,     
        ISNULL(EC.Priority,-1) desc, ES.FromDate desc               
        --ORDER BY EC.ECouponID DESC
   END
                 
    if @TableList <> ''              
    select @TableList = @TableList + ','              
    else              
    select @TableList = @TableList +''              
   select @TableList = @TableList + 'CoponInfo'              
              
  END              
              
  --Table-> Draw Details              
  if (@getDraws= 1)              
  BEGIN              
   Select EC.ECouponID, ED.ECouponDrawID, CONVERT(NVARCHAR(12),ED.DrawDate,106) as DrawDate, EDL_Name.Value as DrawName              
     , ISNULL(EDL_Location.Value, ED.Location) as LocationDescription, ED.Location              
     , count(EW.ECouponWinnerID) as WinnerCount              
     --, sum(EDP.Frequency) as TotalPrizes              
     ,(select sum(EDP_1.frequency) from coc_ECouponDrawPrizes(NOLOCK) EDP_1 where EDP_1.ECouponDrawID = ED.ECouponDrawID) as TotalPrizes              
     , case when count(EW.ECouponWinnerID)< sum(EDP.Frequency) THEN 1 else 0 end as IsDrawCompleted,              
     ED.Latitude, ED.Longitude  ,  
     IsNull(EC.LocationValidationRequired,0) LocationValidationRequired  
   from  coc_ECoupons(NOLOCK) EC              
     INNER JOIN coc_EServices(NOLOCK) ES ON EC.EServiceID = ES.EServiceID              
     INNER JOIN coc_ECouponDraw(NOLOCK) ED ON ED.ECouponID = EC.ECouponID              
     INNER JOIN coc_ECouponDrawLanguages(NOLOCK) EDL_Name ON EDL_Name.ECouponDrawID = ED.ECouponDrawID               
      and EDL_Name.LanguageID = @LanguageID and EDL_Name.ResourceKey = 'Name'              
     LEFT JOIN coc_ECouponDrawLanguages(NOLOCK) EDL_Location ON EDL_Location.ECouponDrawID = ED.ECouponDrawID               
      and EDL_Location.LanguageID = @LanguageID and EDL_Location.ResourceKey = 'LocationDescription'              
     INNER JOIN coc_ECouponDrawPrizes(NOLOCK) EDP ON EDP.ECouponDrawID = ED.ECouponDrawID              
     LEFT JOIN coc_ECouponWinners(NOLOCK) EW ON EW.ECouponDrawPrizeID = EDP.ECouponDrawPrizeID              
     where EC.ECouponID = @ECouponID              
      and ES.IsActive = 1 and EC.IsActive = 1 and EC.IsApproved = 1              
     -- and ((@ArchiveFilter = 0 and convert(date,dateadd(day,@ArchiveDays,ES.ToDate)) <= convert(date,getdate())) or               
     --  ((@ArchiveFilter = 1 and convert(date,dateadd(day,@ArchiveDays,ES.ToDate)) >= convert(date,getdate()))))              
     group by EC.ECouponID, ED.ECouponDrawID, ED.DrawDate, EDL_Name.Value , EDL_Location.Value, ED.Location, ED.Latitude, ED.Longitude ,EC.LocationValidationRequired             
     order by ED.DrawDate  ASC     , ED.ECouponDrawID    
              
              
              
   if @TableList <> ''              
    select @TableList = @TableList + ','              
   else              
    select @TableList = @TableList +''              
   select @TableList = @TableList + 'Draws'              
              
  END              
              
  --Table-> Prize Details              
  if (@getPrizes = 1)              
  BEGIN              
   Select EC.ECouponID, EDP.ECouponDrawPrizeID, EP.ECouponPrizeID, ED.ECouponDrawID, EPL_Name.Value as PrizeName, EPL_Details.Value as PrizeDetail, EC.ImageFile              
     , count(EW.ECouponWinnerID) as WinnerCount              
     --, sum(EDP.Frequency) as TotalPrizes              
     --,(select sum(EDP_1.frequency) from coc_ECouponDrawPrizes EDP_1 where EDP_1.ECouponDrawID = ED.ECouponDrawID) as TotalPrizes              
     ,(select sum(EDP_1.frequency) from coc_ECouponDrawPrizes(NOLOCK) EDP_1 where EDP_1.ECouponDrawID = ED.ECouponDrawID and EDP_1.ECouponPrizeID = EP.ECouponPrizeID) as TotalPrizes              
     , case when count(EW.ECouponWinnerID)< sum(EDP.Frequency) THEN 1 else 0 end as IsDrawCompleted   ,  
     IsNull(EC.LocationValidationRequired,0) LocationValidationRequired  
   from  coc_ECoupons(NOLOCK) EC              
     INNER JOIN coc_EServices(NOLOCK) ES ON EC.EServiceID = ES.EServiceID              
     INNER JOIN coc_ECouponDraw(NOLOCK) ED ON ED.ECouponID = EC.ECouponID              
     INNER JOIN coc_ECouponDrawPrizes(NOLOCK) EDP ON EDP.ECouponDrawID = ED.ECouponDrawID              
     INNER JOIN coc_ECouponPrizes(NOLOCK) EP ON EP.ECouponID = EC.ECouponID and EP.ECouponPrizeID = EDP.ECouponPrizeID              
     INNER JOIN coc_ECouponPrizesLanguages(NOLOCK) EPL_Name ON EPL_Name.ECouponPrizeID = EDP.ECouponPrizeID              
      and EPL_Name.LanguageID = @LanguageID and EPL_Name.ResourceKey = 'Name'              
     INNER JOIN coc_ECouponPrizesLanguages(NOLOCK) EPL_Details ON EPL_Details.ECouponPrizeID = EDP.ECouponPrizeID              
      and EPL_Details.LanguageID = @LanguageID and EPL_Details.ResourceKey = 'PrizeDetail'              
     LEFT JOIN coc_ECouponWinners(NOLOCK) EW ON EW.ECouponDrawPrizeID = EDP.ECouponDrawPrizeID              
     where EC.ECouponID = @ECouponID              
      and ES.IsActive = 1 and EC.IsActive = 1 and EC.IsApproved = 1              
      --and ((@ArchiveFilter = 0 and convert(date,dateadd(day,@ArchiveDays,ES.ToDate)) <= convert(date,getdate())) or               
      -- ((@ArchiveFilter = 1 and convert(date,dateadd(day,@ArchiveDays,ES.ToDate)) >= convert(date,getdate()))))              
     group by EC.ECouponID, EDP.ECouponDrawPrizeID, EP.ECouponPrizeID, ED.ECouponDrawID, EPL_Name.Value, EPL_Details.Value, EC.ImageFile   ,  
     EC.LocationValidationRequired  
     order by EDP.ECouponDrawPrizeID ASC              
              
              
              
   if @TableList <> ''              
    select @TableList = @TableList + ','              
   else              
    select @TableList = @TableList +''              
   select @TableList = @TableList + 'Prizes'              
              
  END              
              
  --Table-> Winner Details              
  if (@getWinners = 1)              
  BEGIN              
     Select EC.ECouponID, ED.ECouponDrawID, EDP.ECouponDrawPrizeID, EP.ECouponPrizeID, EPL_Name.Value as PrizeName, EPL_Details.Value as PrizeDetail, EP.ImageFile,              
     EW.ConsumerName as WinnerName,         
  --case when EW.MembershipID IS NULL then 'Ref: '+SUBSTRING(MobileNumber,9,len(MobileNumber)) else 'Ref: '+ EW.MembershipID end As WinnerRef              
  'Ref-'+ cast(EW.ECouponWinnerID as varchar) As WinnerRef       
  ,IsNull(EC.LocationValidationRequired,0) LocationValidationRequired  
   from  coc_ECoupons(NOLOCK) EC              
     INNER JOIN coc_EServices(NOLOCK) ES ON EC.EServiceID = ES.EServiceID              
     INNER JOIN coc_ECouponDraw(NOLOCK) ED ON ED.ECouponID = EC.ECouponID              
     INNER JOIN coc_ECouponDrawPrizes(NOLOCK) EDP ON EDP.ECouponDrawID = ED.ECouponDrawID              
     INNER JOIN coc_ECouponPrizes(NOLOCK) EP ON EP.ECouponID = EC.ECouponID and EP.ECouponPrizeID = EDP.ECouponPrizeID              
     INNER JOIN coc_ECouponPrizesLanguages(NOLOCK) EPL_Name ON EPL_Name.ECouponPrizeID = EDP.ECouponPrizeID              
      and EPL_Name.LanguageID = @LanguageID and EPL_Name.ResourceKey = 'Name'              
     INNER JOIN coc_ECouponPrizesLanguages(NOLOCK) EPL_Details ON EPL_Details.ECouponPrizeID = EDP.ECouponPrizeID              
      and EPL_Details.LanguageID = @LanguageID and EPL_Details.ResourceKey = 'PrizeDetail'              
     INNER JOIN coc_ECouponWinners(NOLOCK) EW ON EW.ECouponDrawPrizeID = EDP.ECouponDrawPrizeID              
     --LEFT JOIN coc_Consumers C(NOLOCK) ON C.ConsumerID = EW.ConsumerID              
     where EC.ECouponID = @ECouponID              
      and ES.IsActive = 1 and EC.IsActive = 1 and EC.IsApproved = 1              
   and ec.ECouponID not in (10193, 10194, 10195)         
   and ECouponWinnerID not in (24561,24562,24563,24564,24565)        
      --and ((@ArchiveFilter = 0 and convert(date,dateadd(day,@ArchiveDays,ES.ToDate)) <= convert(date,getdate())) or               
      -- ((@ArchiveFilter = 1 and convert(date,dateadd(day,@ArchiveDays,ES.ToDate)) >= convert(date,getdate()))))              
     --group by EC.ECouponID, EDP.ECouponDrawPrizeID, EP.ECouponPrizeID, ED.ECouponDrawID, EPL_Name.Value, EPL_Details.Value, EP.ImageFile              
     order by EP.ECouponPrizeID ASC --EW.ECouponWinnerID DESC              
              
              
              
              
   if @TableList <> ''              
    select @TableList = @TableList + ','              
   else              
    select @TableList = @TableList +''              
   select @TableList = @TableList + 'Winners'              
              
  END              
              
                
 END
GO
/****** Object:  StoredProcedure [dbo].[GetFullCoponInformation24062021]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetFullCoponInformation24062021]               
 @LanguageID INTEGER,              
 @ECouponID INTEGER,              
 @EServiceID INTEGER,              
 @getCoponInfo bit,              
 @getWinners bit,               
 @getDraws bit,              
 @getPrizes bit,              
 @ArchiveFilter int=0,              
 @TableList varchar(300) output,
 @PageNumber INTEGER = NULL,  
 @PageSize INTEGER = NULL  
AS              
SET NOCOUNT ON              
 BEGIN              
  if @ECouponID = 0              
   select @ECouponID= NULL              
  if @EServiceID = 0              
   select @EServiceID = NULL              
  if @ArchiveFilter IS NULL               
   select @ArchiveFilter = 0 
  if @PageNumber = 0              
   select @PageNumber = NULL    
  if @PageSize  = 0                
   select @PageSize = NULL 
  IF (@ECouponID IS NOT NULL OR @EServiceID IS NOT NULL)
    select @PageNumber = NULL, @PageSize = NULL 
    
  DECLARE @Counter INTEGER              
              
  DECLARE @ArchiveDays INTEGER = 30              
              
  select @TableList = ''              
  if (@getCoponInfo = 1)              
  begin
    IF (@PageNumber IS NOT NULL AND @PageSize IS NOT NULL)
    BEGIN
        --IF OBJECT_ID('tempdb..#ECoponDetailS') IS NOT NULL DROP TABLE #ECoponDetailS
        --CREATE TABLE #ECoponDetailS  
        --(TotalRecords INTEGER, ECouponID BIGINT,EServiceID INTEGER, ResultDate NVARCHAR(12), WinnerCount TINYINT, 
        --EntryTypeID INTEGER, MinInvoiceValue Decimal(15,4), AdditionalCouponValue Decimal(15,4), AllowMultipleInvoices BIT,
        --CouponPerInvoice INTEGER, CouponPerMember INTEGER, UserAurthorised BIT, QuestionCount INT, 
        --ImageFile NVARCHAR(100), UsesTerm NVARCHAR(MAX), ECouponTemplate NVARCHAR(MAX), ParticipationByKiosk BIT,
        --EService NVARCHAR(1000), StartDate NVARCHAR(12), EndDate NVARCHAR(12), MemberOnly BIT, DisplayImage NVARCHAR(100),
        --IsActive INTEGER, AllowMobileParticipation INTEGER, AllowWebParticipation INTEGER, PrizeCount INTEGER,
        --DrawsCount INTEGER, Location NVARCHAR(100), LocationURL NVARCHAR, [CompetitionStatus] INTEGER,
        --LocationValidationRequired BIT)

        --Insert into #ECoponDetailS 
        --(TotalRecords, ECouponID,EServiceID, ResultDate, WinnerCount, 
        --EntryTypeID, MinInvoiceValue, AdditionalCouponValue, AllowMultipleInvoices,
        --CouponPerInvoice, CouponPerMember, UserAurthorised, QuestionCount, 
        --ImageFile, UsesTerm, ECouponTemplate, ParticipationByKiosk,
        --EService, StartDate, EndDate, MemberOnly, DisplayImage,
        --IsActive, AllowMobileParticipation, AllowWebParticipation, PrizeCount,
        --DrawsCount, [Location], LocationURL, [CompetitionStatus], LocationValidationRequired)
         
        SELECT TotalRecords = COUNT(*) OVER(), EC.ECouponID,EC.EServiceID,
        CONVERT(NVARCHAR(12),EC.ResultDate,106) ResultDate,EC.WinnerCount,EC.EntryTypeID,EC.MinInvoiceValue,
        EC.AdditionalCouponValue,EC.AllowMultipleInvoices,EC.CouponPerInvoice, EC.CouponPerMember,
        EC.UserAurthorised,EC.QuestionCount,EC.ImageFile,              
        case when EL.LanguageID= 2 then '<div dir= ''rtl'' >'+ replace(EL.UsesTerm,'a href="www', 'a href="http://www') + '</div>' else replace(EL.UsesTerm,'a href="www', 'a href="http://www') end as UsesTerm,                
        EL.ECouponTemplate,EC.ParticipationByKiosk,SL.EService [ServiceName],              
        (case when es.eserviceid = 280 then '' else CONVERT(NVARCHAR(12),ES.FromDate,106) end )StartDate, CONVERT(NVARCHAR(12),ES.ToDate,106) EndDate,EC.MemberOnly,EC.DisplayImage,                
        case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)) THEN 1 else 0 end as IsActive,              
        ISNULL(AllowMobileParticipation, 1) as AllowMobileParticipation, ISNULL(AllowWebParticipation, 1) as AllowWebParticipation,              
        ISNULL((select sum(ISNULL(ep.PrizeCount,0)) from coc_ECouponPrizes(NOLOCK) EP where EP.ECouponID = EC.ECouponID),0) as PrizeCount,              
        (select count(*) from coc_ECouponDraw(NOLOCK) ED where ED.ECouponID = EC.ECouponID) as DrawsCount,              
        EC.Location, LocationURL,          
        case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)) THEN 1          
        when (CAST(GETDATE() AS DATE) > CAST(ES.ToDate AS DATE)) THEN 2 ELSE 3        
        end as [CompetitionStatus] ,  IsNull(EC.LocationValidationRequired,0) LocationValidationRequired,
        CASE WHEN EC.EntryTypeID = 46 THEN DL.LinkName WHEN EC.EntryTypeID IN (47, 48, 49) THEN ES.ExternalRedirectionURL ELSE '' END AS ExternalRedirectionURL  
        FROM coc_ECoupons(NOLOCK) EC              
        INNER JOIN coc_EServices(NOLOCK) ES ON EC.EServiceID = ES.EServiceID              
        INNER JOIN coc_EServiceLanguages(NOLOCK) SL ON ES.EServiceID=SL.EServiceID AND SL.LanguageID = @LanguageID              
        INNER JOIN coc_ECouponLanguages(NOLOCK) EL ON EL.ECouponID=EC.ECouponID AND EL.LanguageID = @LanguageID
        LEFT JOIN Coc_Core_DynamicLinks (NOLOCK) DL ON DL.EcouponID = EC.ECouponID
        WHERE               
        --((@ECouponID IS NULL or EC.ECouponID = @ECouponID) and (@EServiceID IS NULL or ES.EServiceID = @EServiceID)) and 
        ES.IsActive = 1 and EC.IsActive = 1 and EC.IsApproved = 1              
        and EC.EServiceID <> 183   and ec.ECouponID not in (10193, 10194, 10195) and ec.ECouponID not in (10206)        
        and ec.ECouponID not in (10219) and (EC.IsShowMobile is null or EC.IsShowMobile=1)        
        ORDER BY (case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)) THEN 1 else 0 end ) DESC,      
        (case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) < CAST(ES.ToDate AS DATE))   THEN 1 else 0 end ) DESC,     
        ISNULL(EC.Priority,-1) desc, ES.FromDate desc 
        OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY;

        --SELECT * FROM #ECoponDetailS
         
    END
    ELSE
    BEGIN
        --Table-> ECoupon              
        SELECT EC.ECouponID,EC.EServiceID,CONVERT(NVARCHAR(12),EC.ResultDate,106) ResultDate,EC.WinnerCount,EC.EntryTypeID,EC.MinInvoiceValue,EC.AdditionalCouponValue,EC.AllowMultipleInvoices,EC.CouponPerInvoice,              
        EC.CouponPerMember,EC.UserAurthorised,EC.QuestionCount,EC.ImageFile,              
        --case when EL.LanguageID= 2 then '<div dir= ''rtl'' >'+ EL.UsesTerm + '</div>' else EL.UsesTerm end as UsesTerm,              
        case when EL.LanguageID= 2 then '<div dir= ''rtl'' >'+ replace(EL.UsesTerm,'a href="www', 'a href="http://www') + '</div>' else replace(EL.UsesTerm,'a href="www', 'a href="http://www') end as UsesTerm,                
        EL.ECouponTemplate,EC.ParticipationByKiosk,SL.EService [ServiceName],              
        (case when es.eserviceid = 280 then '' else CONVERT(NVARCHAR(12),ES.FromDate,106) end )StartDate, CONVERT(NVARCHAR(12),ES.ToDate,106) EndDate,EC.MemberOnly,EC.DisplayImage,                
        case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)) THEN 1 else 0 end as IsActive,              
        ISNULL(AllowMobileParticipation, 1) as AllowMobileParticipation, ISNULL(AllowWebParticipation, 1) as AllowWebParticipation,              
        ISNULL((select sum(ISNULL(ep.PrizeCount,0)) from coc_ECouponPrizes(NOLOCK) EP where EP.ECouponID = EC.ECouponID),0) as PrizeCount,              
        (select count(*) from coc_ECouponDraw(NOLOCK) ED where ED.ECouponID = EC.ECouponID) as DrawsCount,              
        EC.Location, LocationURL,          
        case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE))           
        THEN 1--acitve           
        when (CAST(GETDATE() AS DATE) > CAST(ES.ToDate AS DATE))           
        THEN 2 -- completed          
        ELSE 3 -- comming soon          
        end as [CompetitionStatus] ,   
        IsNull(EC.LocationValidationRequired,0) LocationValidationRequired,
        CASE WHEN EC.EntryTypeID = 46 THEN DL.LinkName WHEN EC.EntryTypeID IN (47, 48, 49) THEN ES.ExternalRedirectionURL ELSE '' END AS ExternalRedirectionURL    
        FROM coc_ECoupons(NOLOCK) EC              
        INNER JOIN coc_EServices(NOLOCK) ES ON EC.EServiceID = ES.EServiceID              
        INNER JOIN coc_EServiceLanguages(NOLOCK) SL ON ES.EServiceID=SL.EServiceID AND SL.LanguageID = @LanguageID              
        INNER JOIN coc_ECouponLanguages(NOLOCK) EL ON EL.ECouponID=EC.ECouponID AND EL.LanguageID = @LanguageID
        LEFT JOIN Coc_Core_DynamicLinks (NOLOCK) DL ON DL.EcouponID = EC.ECouponID
        WHERE               
        ((@ECouponID IS NULL or EC.ECouponID = @ECouponID) and               
        (@EServiceID IS NULL or ES.EServiceID = @EServiceID))              
        and ES.IsActive = 1 and EC.IsActive = 1 and EC.IsApproved = 1              
        --and ((@ArchiveFilter = 1 and convert(date,dateadd(day,@ArchiveDays,ES.ToDate)) <= convert(date,getdate())) or               
        --  ((@ArchiveFilter = 0 and convert(date,dateadd(day,@ArchiveDays,ES.ToDate)) >= convert(date,getdate()))))              
        --and isnull(EC.AllowMobileParticipation,0) = 1              
        and EC.EServiceID <> 183 -- added by shamim to hide SME Funnel          
        and ec.ECouponID not in (10193, 10194, 10195) -- added by shamim to hide 3 lipton competitions as told my othman        
        and ec.ECouponID not in (10206) -- added by shamim to hide lipton gold competition as told my othman        
        and ec.ECouponID not in (10219)        
        and (EC.IsShowMobile is null or EC.IsShowMobile=1)        
        ORDER BY (case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)) THEN 1 else 0 end ) DESC,      
        (case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) < CAST(ES.ToDate AS DATE))   THEN 1 else 0 end ) DESC,     
        ISNULL(EC.Priority,-1) desc, ES.FromDate desc               
        --ORDER BY EC.ECouponID DESC
   END
                 
    if @TableList <> ''              
    select @TableList = @TableList + ','              
    else              
    select @TableList = @TableList +''              
   select @TableList = @TableList + 'CoponInfo'              
              
  END              
              
  --Table-> Draw Details              
  if (@getDraws= 1)              
  BEGIN              
   Select EC.ECouponID, ED.ECouponDrawID, CONVERT(NVARCHAR(12),ED.DrawDate,106) as DrawDate, EDL_Name.Value as DrawName              
     , ISNULL(EDL_Location.Value, ED.Location) as LocationDescription, ED.Location              
     , count(EW.ECouponWinnerID) as WinnerCount              
     --, sum(EDP.Frequency) as TotalPrizes              
     ,(select sum(EDP_1.frequency) from coc_ECouponDrawPrizes(NOLOCK) EDP_1 where EDP_1.ECouponDrawID = ED.ECouponDrawID) as TotalPrizes              
     , case when count(EW.ECouponWinnerID)< sum(EDP.Frequency) THEN 1 else 0 end as IsDrawCompleted,              
     ED.Latitude, ED.Longitude  ,  
     IsNull(EC.LocationValidationRequired,0) LocationValidationRequired  
   from  coc_ECoupons(NOLOCK) EC              
     INNER JOIN coc_EServices(NOLOCK) ES ON EC.EServiceID = ES.EServiceID              
     INNER JOIN coc_ECouponDraw(NOLOCK) ED ON ED.ECouponID = EC.ECouponID              
     INNER JOIN coc_ECouponDrawLanguages(NOLOCK) EDL_Name ON EDL_Name.ECouponDrawID = ED.ECouponDrawID               
      and EDL_Name.LanguageID = @LanguageID and EDL_Name.ResourceKey = 'Name'              
     LEFT JOIN coc_ECouponDrawLanguages(NOLOCK) EDL_Location ON EDL_Location.ECouponDrawID = ED.ECouponDrawID               
      and EDL_Location.LanguageID = @LanguageID and EDL_Location.ResourceKey = 'LocationDescription'              
     INNER JOIN coc_ECouponDrawPrizes(NOLOCK) EDP ON EDP.ECouponDrawID = ED.ECouponDrawID              
     LEFT JOIN coc_ECouponWinners(NOLOCK) EW ON EW.ECouponDrawPrizeID = EDP.ECouponDrawPrizeID              
     where EC.ECouponID = @ECouponID              
      and ES.IsActive = 1 and EC.IsActive = 1 and EC.IsApproved = 1              
     -- and ((@ArchiveFilter = 0 and convert(date,dateadd(day,@ArchiveDays,ES.ToDate)) <= convert(date,getdate())) or               
     --  ((@ArchiveFilter = 1 and convert(date,dateadd(day,@ArchiveDays,ES.ToDate)) >= convert(date,getdate()))))              
     group by EC.ECouponID, ED.ECouponDrawID, ED.DrawDate, EDL_Name.Value , EDL_Location.Value, ED.Location, ED.Latitude, ED.Longitude ,EC.LocationValidationRequired             
     order by ED.DrawDate  ASC     , ED.ECouponDrawID    
              
              
              
   if @TableList <> ''              
    select @TableList = @TableList + ','              
   else              
    select @TableList = @TableList +''              
   select @TableList = @TableList + 'Draws'              
              
  END              
              
  --Table-> Prize Details              
  if (@getPrizes = 1)              
  BEGIN              
   Select EC.ECouponID, EDP.ECouponDrawPrizeID, EP.ECouponPrizeID, ED.ECouponDrawID, EPL_Name.Value as PrizeName, EPL_Details.Value as PrizeDetail, EC.ImageFile              
     , count(EW.ECouponWinnerID) as WinnerCount              
     --, sum(EDP.Frequency) as TotalPrizes              
     --,(select sum(EDP_1.frequency) from coc_ECouponDrawPrizes EDP_1 where EDP_1.ECouponDrawID = ED.ECouponDrawID) as TotalPrizes              
     ,(select sum(EDP_1.frequency) from coc_ECouponDrawPrizes(NOLOCK) EDP_1 where EDP_1.ECouponDrawID = ED.ECouponDrawID and EDP_1.ECouponPrizeID = EP.ECouponPrizeID) as TotalPrizes              
     , case when count(EW.ECouponWinnerID)< sum(EDP.Frequency) THEN 1 else 0 end as IsDrawCompleted   ,  
     IsNull(EC.LocationValidationRequired,0) LocationValidationRequired  
   from  coc_ECoupons(NOLOCK) EC              
     INNER JOIN coc_EServices(NOLOCK) ES ON EC.EServiceID = ES.EServiceID              
     INNER JOIN coc_ECouponDraw(NOLOCK) ED ON ED.ECouponID = EC.ECouponID              
     INNER JOIN coc_ECouponDrawPrizes(NOLOCK) EDP ON EDP.ECouponDrawID = ED.ECouponDrawID              
     INNER JOIN coc_ECouponPrizes(NOLOCK) EP ON EP.ECouponID = EC.ECouponID and EP.ECouponPrizeID = EDP.ECouponPrizeID              
     INNER JOIN coc_ECouponPrizesLanguages(NOLOCK) EPL_Name ON EPL_Name.ECouponPrizeID = EDP.ECouponPrizeID              
      and EPL_Name.LanguageID = @LanguageID and EPL_Name.ResourceKey = 'Name'              
     INNER JOIN coc_ECouponPrizesLanguages(NOLOCK) EPL_Details ON EPL_Details.ECouponPrizeID = EDP.ECouponPrizeID              
      and EPL_Details.LanguageID = @LanguageID and EPL_Details.ResourceKey = 'PrizeDetail'              
     LEFT JOIN coc_ECouponWinners(NOLOCK) EW ON EW.ECouponDrawPrizeID = EDP.ECouponDrawPrizeID              
     where EC.ECouponID = @ECouponID              
      and ES.IsActive = 1 and EC.IsActive = 1 and EC.IsApproved = 1              
      --and ((@ArchiveFilter = 0 and convert(date,dateadd(day,@ArchiveDays,ES.ToDate)) <= convert(date,getdate())) or               
      -- ((@ArchiveFilter = 1 and convert(date,dateadd(day,@ArchiveDays,ES.ToDate)) >= convert(date,getdate()))))              
     group by EC.ECouponID, EDP.ECouponDrawPrizeID, EP.ECouponPrizeID, ED.ECouponDrawID, EPL_Name.Value, EPL_Details.Value, EC.ImageFile   ,  
     EC.LocationValidationRequired  
     order by EDP.ECouponDrawPrizeID ASC              
              
              
              
   if @TableList <> ''              
    select @TableList = @TableList + ','              
   else              
    select @TableList = @TableList +''              
   select @TableList = @TableList + 'Prizes'              
              
  END              
              
  --Table-> Winner Details              
  if (@getWinners = 1)              
  BEGIN              
     Select EC.ECouponID, ED.ECouponDrawID, EDP.ECouponDrawPrizeID, EP.ECouponPrizeID, EPL_Name.Value as PrizeName, EPL_Details.Value as PrizeDetail, EP.ImageFile,              
     EW.ConsumerName as WinnerName,         
  --case when EW.MembershipID IS NULL then 'Ref: '+SUBSTRING(MobileNumber,9,len(MobileNumber)) else 'Ref: '+ EW.MembershipID end As WinnerRef              
  'Ref-'+ cast(EW.ECouponWinnerID as varchar) As WinnerRef       
  ,IsNull(EC.LocationValidationRequired,0) LocationValidationRequired  
   from  coc_ECoupons(NOLOCK) EC              
     INNER JOIN coc_EServices(NOLOCK) ES ON EC.EServiceID = ES.EServiceID              
     INNER JOIN coc_ECouponDraw(NOLOCK) ED ON ED.ECouponID = EC.ECouponID              
     INNER JOIN coc_ECouponDrawPrizes(NOLOCK) EDP ON EDP.ECouponDrawID = ED.ECouponDrawID              
     INNER JOIN coc_ECouponPrizes(NOLOCK) EP ON EP.ECouponID = EC.ECouponID and EP.ECouponPrizeID = EDP.ECouponPrizeID              
     INNER JOIN coc_ECouponPrizesLanguages(NOLOCK) EPL_Name ON EPL_Name.ECouponPrizeID = EDP.ECouponPrizeID              
      and EPL_Name.LanguageID = @LanguageID and EPL_Name.ResourceKey = 'Name'              
     INNER JOIN coc_ECouponPrizesLanguages(NOLOCK) EPL_Details ON EPL_Details.ECouponPrizeID = EDP.ECouponPrizeID              
      and EPL_Details.LanguageID = @LanguageID and EPL_Details.ResourceKey = 'PrizeDetail'              
     INNER JOIN coc_ECouponWinners(NOLOCK) EW ON EW.ECouponDrawPrizeID = EDP.ECouponDrawPrizeID              
     --LEFT JOIN coc_Consumers C(NOLOCK) ON C.ConsumerID = EW.ConsumerID              
     where EC.ECouponID = @ECouponID              
      and ES.IsActive = 1 and EC.IsActive = 1 and EC.IsApproved = 1              
   and ec.ECouponID not in (10193, 10194, 10195)         
   and ECouponWinnerID not in (24561,24562,24563,24564,24565)        
      --and ((@ArchiveFilter = 0 and convert(date,dateadd(day,@ArchiveDays,ES.ToDate)) <= convert(date,getdate())) or               
      -- ((@ArchiveFilter = 1 and convert(date,dateadd(day,@ArchiveDays,ES.ToDate)) >= convert(date,getdate()))))              
     --group by EC.ECouponID, EDP.ECouponDrawPrizeID, EP.ECouponPrizeID, ED.ECouponDrawID, EPL_Name.Value, EPL_Details.Value, EP.ImageFile              
     order by EP.ECouponPrizeID ASC --EW.ECouponWinnerID DESC              
              
              
              
              
   if @TableList <> ''              
    select @TableList = @TableList + ','              
   else              
    select @TableList = @TableList +''              
   select @TableList = @TableList + 'Winners'              
              
  END              
              
                
 END
GO
/****** Object:  StoredProcedure [dbo].[GetGeneralNotificationBind]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetGeneralNotificationBind]
	@TemplateTypeID INTEGER=NULL,
	@EmailUsage BIT=NULL,
	@SMSUsage BIT=NULL, 
	@NotificatonUsage BIT=NULL,
	@LanguageID INTEGER=1 
AS
	BEGIN

	SELECT GN.GeneralNotificationTemplateID,GL.TemplateTitle 
		FROM [coc_GeneralNotificationTemplates] GN(NOLOCK) 
			INNER JOIN coc_GeneralNotificationTemplateLanguages GL(NOLOCK) ON GN.GeneralNotificationTemplateID=GL.GeneralNotificationTemplateID
			WHERE GN.TemplateTypeID=@TemplateTypeID AND 
				(@EmailUsage IS NULL OR GN.EmailUsage=@EmailUsage) AND 
				(@SMSUsage IS NULL OR GN.SMSUsage=@SMSUsage) AND 
				(@NotificatonUsage IS NULL OR GN.NotificatonUsage=@NotificatonUsage) AND
				GL.LanguageID=@LanguageID AND GN.IsActive=1
	END
	

	 
GO
/****** Object:  StoredProcedure [dbo].[GetGeneralNotificationInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetGeneralNotificationInformation] 
	@GeneralNotificationTemplateID INTEGER=NULL,
	@TemplateTitle [NullDescription]=NULL,
	@Template [Remark]=NULL,
	@LanguageID INTEGER=1,
	@IsActive BIT=NULL
AS 
	BEGIN 

		SELECT GT.GeneralNotificationTemplateID,GT.TemplateTypeID,GT.SMSUsage,GT.NotificatonUsage,GT.EmailUsage,GT.IsActive,GL.Template,GL.TemplateTitle,GL.LanguageID
		FROM [coc_GeneralNotificationTemplates] GT(NOLOCK) 
			INNER JOIN [coc_GeneralNotificationTemplateLanguages] GL(NOLOCK) ON GT.GeneralNotificationTemplateID=GL.GeneralNotificationTemplateID 
			WHERE (@GeneralNotificationTemplateID IS NULL OR GT.GeneralNotificationTemplateID=@GeneralNotificationTemplateID) 
				AND (@TemplateTitle IS NULL OR GL.TemplateTitle=@TemplateTitle)
				AND (@Template IS NULL OR GL.Template=@Template)  
				--AND (@LanguageID IS NULL or GL.LanguageID = @LanguageID)
			ORDER BY LanguageID 
	END



GO
/****** Object:  StoredProcedure [dbo].[GetGeneralSettingsInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetGeneralSettingsInformation]
	@SystemSetupID INTEGER=NULL 
	AS  
	BEGIN
	SET NOCOUNT ON 
	SELECT * FROM COC_SystemSetups (NOLOCK) WHERE SystemSetupID IN (501,502,503,504,505,101,102,103,104,105,106,107,108,109)ORDER BY SystemSetupID
		SET NOCOUNT OFF
	END



GO
/****** Object:  StoredProcedure [dbo].[GetGenericNotificationCriteria]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetGenericNotificationCriteria]	
	@NotificationSendId INT
	
AS
SET NOCOUNT ON

	SELECT SendingDate,n.GeneralNotificationId,ns.NotificationCount, CityID, AgeGroupID, Gender From coc_NotificationSends ns (NOLOCK)
		Join coc_GeneralNotification n (NOLOCK) ON n.GeneralNotificationId = ns.GeneralNotificationId
	 WHERE NotificationSendID = @NotificationSendId;

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[GetGuestInfo]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetGuestInfo]
	@Email [Email]=NULL,
	@Mobile [Mobile]=NULL
	
AS	
	SET NOCOUNT ON
		BEGIN
			DECLARE @GuestID integer 
			DECLARE @ConsumerID integer 
			IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1 and isactive= 1 and isdeleted = 0 AND (PrimaryMobile=@Mobile))
				select top 1 @ConsumerID = ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1  and isactive= 1 and isdeleted = 0 AND (PrimaryMobile=@Mobile) 
			else IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1 and isactive= 1 and isdeleted = 0 AND (@Email IS NULL and EmailID=@Email))
				select top 1 @ConsumerID = ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1  and isactive= 1 and isdeleted = 0 AND (@Email IS NULL and EmailID=@Email) 
			
			if @ConsumerID is null
			BEGIN
				IF EXISTS (select GuestID FROM coc_guests(NOLOCK) WHERE (PrimaryMobile=@Mobile))
					select top 1 @GuestID = GuestID FROM coc_guests(NOLOCK) WHERE (PrimaryMobile=@Mobile) 
				else IF EXISTS (select GuestID FROM coc_guests(NOLOCK) WHERE (@Email IS NULL and EmailID=@Email))
					select top 1 @GuestID = GuestID FROM coc_guests(NOLOCK) WHERE (@Email IS NULL and EmailID=@Email) 
			END

			SELECT * , (select count(*) from  coc_ECouponParticipations(NOLOCK) EP where EP.guestID = G.GuestID) As participationsCount 
				FROM coc_guests(NOLOCK) G
				where G.GuestID = @GuestID
			SELECT * FROM coc_Consumers(NOLOCK) where ConsumerID = @ConsumerID

		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[GetGuestParticipations]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetGuestParticipations]
	@GuestParticipationID INTEGER=NULL,
	@LanguageID INTEGER
AS
 SET NOCOUNT ON 
	 SELECT  GuestParticipationID,GuestName,Mobile 
		FROM coc_GuestParticipations(NOLOCK) 
		WHERE (@GuestParticipationID IS NULL OR GuestParticipationID=@GuestParticipationID)  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[GetHomeContent]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetHomeContent]   
 @UserID INTEGER=NULL,  
 @LanguageID INTEGER  
AS  
SET NOCOUNT ON  
 BEGIN  
  DECLARE @Counter INTEGER  
  DECLARE @Winners AS TABLE  
  (  
   UniqueID INTEGER IDENTITY(1,1),  
   EcouponID INTEGER,  
   EServiceID INTEGER,  
   DeclaredDate DATETIME  
  )  
    
  DECLARE @WinnerList AS TABLE  
  (  
   ECouponID INTEGER,  
   WinnerName NullName,  
   PrizeType NullDescription,  
   PrizeHeader NullDescription,  
   PrizeDetail Remark,  
   ImageFile NullDescription,  
   EService Remark,  
   ConsumerID INTEGER  
  )  
     
  --Tables[0] ECoupon  
  SELECT EC.ECouponID,EC.EServiceID,CONVERT(NVARCHAR(12),EC.ResultDate,106) ResultDate,EC.WinnerCount,EC.EntryTypeID,EC.MinInvoiceValue,EC.AdditionalCouponValue,EC.AllowMultipleInvoices,EC.CouponPerInvoice,  
    EC.CouponPerMember,EC.UserAurthorised,ISNULL(EC.QuestionCount,0) QuestionCount,EC.ImageFile,EC.UsesTerm,EC.ECouponTemplate,EC.ParticipationByKiosk,  
    '' as [ServiceName],--SL.EService [ServiceName],  
    CONVERT(NVARCHAR(12),ES.FromDate,106) StatDate,CONVERT(NVARCHAR(12),ES.ToDate,106) EndDate,EC.MemberOnly,EC.ImageFile as DisplayImage   
   FROM coc_ECoupons(NOLOCK) EC  
    INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID = ES.EServiceID  
    INNER JOIN coc_EServiceLanguages SL(NOLOCK) ON ES.EServiceID=SL.EServiceID AND SL.LanguageID = @LanguageID  
  WHERE EC.IsActive=1 AND CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE) AND EC.ResulltDeclared=0  
    and ES.EServiceID not in (125,127,128)  
	and EC.EServiceID <> 183 -- added by rafeeq 
	and isnull(EC.IsShowMobile, 1) = 1
  ORDER BY EC.ECouponID DESC   
  
  --Tables[1] Ticket  
  SELECT TC.EServiceEventID,TC.EServiceID,TC.EventDescription,EV.EnumValue,FORMAT(TC.EventDate,'dd/MM/yyyy')EventDate,FORMAT(TC.LastDate,'dd/MM/yyyy')LastDate,SL.EService [ServiceName],  
    FORMAT(TC.PurchaseStartDate,'dd/MM/yyyy')PurchaseStartDate,FORMAT(TC.PurchaseEndDate,'dd/MM/yyyy')PurchaseEndDate,TC.EventCost,TC.IsActive,TC.EventDescription [TicketDescription],TC.DisplayImage   
   FROM coc_EServiceEvents(NOLOCK) TC  
   INNER JOIN coc_EnumValueLanguages(NOLOCK) EV ON TC.EventTypeID=EV.EnumValueID AND EV.LanguageID=@LanguageID  
   INNER JOIN coc_EServiceLanguages(NOLOCK) SL ON TC.EServiceID=SL.EServiceID AND SL.LanguageID = @LanguageID  
  WHERE TC.IsActive=1 AND CAST(GETDATE() AS DATE) BETWEEN CAST(TC.PurchaseStartDate AS DATE) AND CAST(TC.PurchaseEndDate AS DATE)  
  ORDER BY TC.EServiceEventID DESC   
  
  --Tables[2] Advertisement1  
  SELECT AD.AdvertisementID,AD.AdvertisementName,FORMAT(AD.StartDate,'dd/MM/yyyy')StartDate,ISNULL(AD.TargetURL,'')TargetURL,AD.Cost,AD.DisplayTypeID,AD.IsImage,AD.IsVideo,  
    AD.Duration,ISNULL(AD.PositionID,101) PositionID,AD.IsActive,AD.TargetPlateform,AD.PopupHeight,AD.PopupWidth  , 
	isnull(AD.TargetLinkType,'URL') TargetLinkType, isnull(AD.eCouponID,0) eCouponID
   FROM coc_Advertisements(NOLOCK) AD
  WHERE IsActive=1  
   ORDER BY AD.AdvertisementID  
  
  --Tables[3] Advertisement2  
  SELECT FL.AdvertisementFileID,FL.AdvertisementID,FL.FilePath,FL.IsURL,AdvertisementText,ISNULL(AV.PositionID,101) PositionID,AV.IsImage,AV.IsVideo,AV.IsActive  
   FROM coc_AdvertisementFiles(NOLOCK) FL   
    INNER JOIN coc_Advertisements(NOLOCK) AV ON FL.AdvertisementID=AV.AdvertisementID   
   WHERE AV.IsActive=1   
  ORDER BY FL.AdvertisementID  
       
  --Tables[4] Advertisement3  
  SELECT AP.AdvertisementPageID,AP.AdvertisementID,AP.PageID,ISNULL(AV.PositionID,101) PositionID,AV.IsImage,AV.IsVideo,AV.IsActive  
   FROM coc_AdvertisementPages(NOLOCK) AP
    INNER JOIN coc_Advertisements(NOLOCK) AV ON AP.AdvertisementID=AV.AdvertisementID   
   WHERE AV.IsActive=1  
  ORDER BY AP.AdvertisementID  
  
  --Tables[5] Locations  
  SELECT KL.KioskLocationID, [Location],Address1,Address2,CityID,KK.KioskLocation  
   FROM coc_KioskLocations(NOLOCK) KL  
  INNER JOIN coc_KioskLocationLanguages(NOLOCK) KK ON KL.KioskLocationID=KK.KioskLocationID AND KK.LanguageID=@LanguageID  
      
  --Tables[6] Setups  
  SELECT SystemSetupID,SetupKey,SetupValue   
   FROM COC_SystemSetups(NOLOCK)  
     
  --Tables[7] KioskLocations  
  SELECT KL.KioskLocationID,KL.Address1,KL.Address2,KL.MacAddress1,KL.MacAddress2,KL.Location,CL.City,LL.KioskLocation,KL.Remarks  
   FROM coc_KioskLocations(NOLOCK) KL  
    INNER JOIN coc_CityLanguages(NOLOCK) CL ON CL.CityID=KL.CityID AND  CL.LanguageID=@LanguageID  
    INNER JOIN coc_KioskLocationLanguages(NOLOCK) LL ON LL.KioskLocationID=KL.KioskLocationID AND LL.LanguageID=@LanguageID  
  
  --Tables[8] Prizes  
  SELECT ECouponPrizeID,ECouponID,PrizeTypeID,PrizeHeader,PrizeDetail,ImageFile,EV.EnumValue [Title]   
   FROM coc_ECouponPrizes(NOLOCK) EP
    INNER JOIN coc_EnumValueLanguages(NOLOCK) EV ON EP.PrizeTypeID=EV.EnumValueID AND LanguageID=@LanguageID  
       
  INSERT INTO @Winners  
  SELECT  DISTINCT TOP 3 EC.ECouponID ,EC.EServiceID,EC.DeclaredDate  
   FROM coc_ECouponWinners EW (NOLOCK)   
    INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponPrizeID=EW.ECouponPrizeID  
    INNER JOIN coc_ECoupons EC(NOLOCK) ON EP.ECouponID=EC.ECouponID  
   ORDER BY EC.DeclaredDate DESC   
  --Tables[3] WinnersList  
  SELECT @Counter=MIN(ECouponID) FROM @Winners  
  WHILE(@Counter IS NOT NULL)  
  BEGIN  
   INSERT INTO @WinnerList  
    SELECT TOP 2 EC.ECouponID,CS.FirstName +' '+CS.SecondName [WinnerName],CP.EnumValue [PrizeType],EP.PrizeHeader,EP.PrizeDetail,CS.ImageFile ,SR.EService,CS.ConsumerID  
     FROM @Winners EC   
      INNER JOIN coc_EServiceLanguages SR(NOLOCK) ON EC.EServiceID=SR.EServiceID AND SR.LanguageID=@LanguageID  
      INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponID=EC.ECouponID  
      INNER JOIN coc_ECouponWinners ES(NOLOCK) ON EP.ECouponPrizeID=ES.ECouponPrizeID  
      INNER JOIN coc_Consumers CS(NOLOCK) ON ES.ConsumerID=CS.ConsumerID  
      INNER JOIN coc_EnumValueLanguages CP(NOLOCK) ON EP.PrizeTypeID=CP.EnumValueID AND CP.LanguageID=@LanguageID  
     WHERE EC.EcouponID=@Counter  
   INSERT INTO @WinnerList  
    SELECT TOP 2 EC.ECouponID,CS.GuestName [WinnerName],CP.EnumValue [PrizeType],EP.PrizeHeader,EP.PrizeDetail,'' ImageFile ,SR.EService,0 ConsumerID  
     FROM @Winners EC   
      INNER JOIN coc_EServiceLanguages SR(NOLOCK) ON EC.EServiceID=SR.EServiceID AND SR.LanguageID=@LanguageID  
      INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponID=EC.ECouponID  
      INNER JOIN coc_ECouponWinners ES(NOLOCK) ON EP.ECouponPrizeID=ES.ECouponPrizeID  
      INNER JOIN coc_GuestParticipations CS(NOLOCK) ON ES.MobileNumber=CS.Mobile AND ES.ConsumerID IS NULL    
      INNER JOIN coc_EnumValueLanguages CP(NOLOCK) ON EP.PrizeTypeID=CP.EnumValueID AND CP.LanguageID=@LanguageID  
     WHERE EC.EcouponID=@Counter  
   SELECT @Counter=MIN(ECouponID) FROM @Winners WHERE ECouponID>@Counter  
  END  
  SELECT * FROM @WinnerList ORDER BY ECouponID DESC   
  
    --Table[10] HomeScreenSetup  
  SELECT SystemSetupID,SetupKey,SetupValue   
   FROM COC_SystemSetups(NOLOCK)   
  WHERE SystemSetupID=501    
 END  
SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[GetInstantGiftWinnerCompetitionData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetInstantGiftWinnerCompetitionData]                                     
@Barcode [NullDescription] = NULL, 
@ErrorMessage [Remark] = NULL OUTPUT 
AS                                  
SET XACT_ABORT ON;                                     
BEGIN 
    if exists(select NULL from coc_ECouponParticipations(nolock) where Barcode=@Barcode and IsInstantGiftWinner=1)
	begin
	    Declare @ECouponID bigint=NULL,@VoucherPackageID bigint=NULL,@Mobile [Mobile] = NULL,@Email [Email] = NULL,@ConsumerID int ,@LinkName nvarchar(550)=NULL  
		Select top 1 @ECouponID=ECouponID,@Mobile=ParticipationMobile,@Email=ParticipationEmailID,@ConsumerID=ConsumerID from coc_ECouponParticipations(nolock) where Barcode=@Barcode and IsInstantGiftWinner=1 order by ECouponParticipationID desc
		Select  top 1 @VoucherPackageID=VoucherPackageID, @LinkName= LinkName from Coc_Core_DynamicLinks(nolock) where EcouponID=@ECouponID and IsActive=1 and VoucherPackageID is not null order by DynamicLinkID desc
		if @VoucherPackageID is null
		begin
		   set @ErrorMessage='Invalid url'
		end
		else
		begin
		   if @LinkName is not null 
		   begin
		       if exists (select NULL from coc_core_VGP_RefferalCodes(nolock) where RefferalCode=@Barcode and VoucherPackageID=@VoucherPackageID and VGPDistributionsID is not null) 
		           set @ErrorMessage='You already received your voucher'
			   else if not exists(select NULL from coc_core_VGP_RefferalCodes(nolock) where RefferalCode=@Barcode and VoucherPackageID=@VoucherPackageID and VGPDistributionsID is null) 
			   begin
			       insert into coc_core_VGP_RefferalCodes(RefferalCode,VoucherPackageID,CreatedBy,CreatedOn)
				        select @Barcode,@VoucherPackageID,1,getdate()
			   end
			   else if exists(select NULL from coc_core_VGP_RefferalCodes(nolock) where RefferalCode=@Barcode and VoucherPackageID=@VoucherPackageID and VGPDistributionsID is null) 
			   begin
			       insert into coc_core_VGP_RefferalCodes(RefferalCode,VoucherPackageID,CreatedBy,CreatedOn)
				        select @Barcode,@VoucherPackageID,1,getdate()
			   end
			   Select @VoucherPackageID as VoucherPackageID,@LinkName as LinkName,@ECouponID as ECouponID,@Mobile as Mobile,@Email as Email,c.ConsumerID as ConsumerID,isnull(c.CountryID,0) as CountryID,u.UserID as UserID,u.Password as Password from coc_Consumers(nolock) c
			   inner join coc_Users(nolock) u on u.UserID=c.UserID
			   where c.ConsumerID=@ConsumerID and c.IsActive=1
		   end
		   else
		   begin
		       set @ErrorMessage='Invalid url' 
		   end
		end
	end
	else
	begin
	    set @ErrorMessage='Invalid url'
	end
END
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[GetInvoiceBarcode]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetInvoiceBarcode]
	@EcouponID INTEGER,
	@Mobile [Mobile]=NULL,
	@EligibleCoupons INTEGER=NULL 
AS
	SET NOCOUNT ON 
	BEGIN TRY 
	DECLARE @NotificationID BIGINT
	BEGIN TRANSACTION SaveECouponConfiguration
		SELECT @NotificationID=CN.NotificationID 
			FROM coc_ECoupons EC(NOLOCK) 
				INNER JOIN coc_Notifications CN(NOLOCK) ON EC.EServiceID=CN.EServiceID
		WHERE ECouponID=@EcouponID 

		SELECT TOP(@EligibleCoupons) Barcode FROM coc_EServiceBarcodes (NOLOCK) WHERE AsignedMoile=@Mobile AND NotificationID=@NotificationID ORDER BY EServiceBarcodeID DESC 
		
	COMMIT TRANSACTION SaveECouponConfiguration
	END TRY
	BEGIN CATCH		
		ROLLBACK TRANSACTION SaveECouponConfiguration							
		SELECT ERROR_MESSAGE()
	END CATCH
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[GetKioskLocationScreens]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
CREATE PROCEDURE [dbo].[GetKioskLocationScreens]
@LocationID INTEGER 
AS
SELECT * FROM coc_KioskScreenMapping (NOLOCK) WHERE KioskLocationID = @LocationID
GO
/****** Object:  StoredProcedure [dbo].[GetKioskLocationsInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetKioskLocationsInformation]
	@KioskLocationsID INTEGER=NULL, 
	@LanguageID INTEGER,
	@CityID INTEGER =NULL
AS 
 BEGIN 
	--Table 1 [KioskLocation]
	IF @KioskLocationsID = 0
		SET @KioskLocationsID = NULL 
	 SELECT KL.KioskLocationID,KC.KioskLocation,KL.Address1,KL.Address2,KL.Longitude,KL.Latitude,KL.Location,KL.MacAddress1,KL.MacAddress2,KL.CountryID,
			KL.CityID,KL.Remarks,KL.IsActive,CL.City,CC.Country,KL.LocationURL
			FROM [coc_KioskLocations] KL(NOLOCK)
			INNER JOIN coc_KioskLocationLanguages KC(NOLOCK) ON KC.KioskLocationID=KL.KioskLocationID AND KC.LanguageID=@LanguageID
			LEFT JOIN coc_CityLanguages CL(NOLOCK) ON CL.CityID=KL.CityID AND CL.LanguageID=@LanguageID
			LEFT JOIN coc_CountryLanguages CC(NOLOCK) ON CC.CountryID=KL.CountryID AND CC.LanguageID=@LanguageID
		WHERE (@KioskLocationsID IS NULL OR KL.KioskLocationID=@KioskLocationsID) AND
			(@CityID IS NULL OR KL.CityID=@CityID)

		--Table 2 [KioskLocationLanguages]
	SELECT KioskLocationID,LanguageID,KioskLocation 
		FROM coc_KioskLocationLanguages KC(NOLOCK)
	WHERE (@KioskLocationsID IS NULL OR KC.KioskLocationID=@KioskLocationsID)

	--Table 3 [KioskLocationRetailOutlets]
	SELECT KR.KioskLocationID,KR.RetailOutletID 
		FROM coc_KioskLocationRetailOutlets(NOLOCK)KR 
	WHERE KR.KioskLocationID=@KioskLocationsID
 END
GO
/****** Object:  StoredProcedure [dbo].[GetKioskScreens]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetKioskScreens] 
@LanguageID integer 
AS
BEGIN
	SELECT KS.KioskScreenID,KL.KioskScreenName [Screen],KS.ImageFile 
		FROM coc_KioskScreens KS(NOLOCK)
			INNER JOIN coc_KioskScreenLanguages KL(NOLOCK) ON KL.KioskScreenID=KS.KioskScreenID AND KL.LanguageID=@LanguageID
			
END
GO
/****** Object:  StoredProcedure [dbo].[GetLanguageInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetLanguageInformation] 
	@LanguageID INTEGER=NULL    
AS    
	SET NOCOUNT ON    
	IF(@LanguageID=0)
		SET @LanguageID=1
	--Table 0 [Language]
	SELECT LanguageID,[Language],IsActive,CssFilePath,ISNULL(Direction,'LTR') [Direction]
		FROM coc_Languages (NOLOCK)
			WHERE (@LanguageID IS NULL OR LanguageID=@LanguageID)    and IsActive = 1
			
	SET NOCOUNT OFF 



GO
/****** Object:  StoredProcedure [dbo].[GetLocationInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetLocationInformation]
	@LocationID INTEGER=NULL,
	@LanguageID INTEGER
AS 
 BEGIN 
	 SELECT LocationID,CASE WHEN @LanguageID=1 THEN LocationEnglish WHEN @LanguageID=2 THEN LocationArabic WHEN @LanguageID=3 THEN LocationUrdu END [Location],LocationEnglish,LocationArabic,LocationUrdu,Address1,Address2,Longitude,Latitude,IsActive,EditDate,EditUserID
	 FROM coc_Locations (NOLOCK)
		WHERE (@LocationID IS NULL OR LocationID=@LocationID)
 END

 
GO
/****** Object:  StoredProcedure [dbo].[GetLocationName]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetLocationName]  
	@KioskLocationID INTEGER=NULL,
	@LanguageID INTEGER
AS
 SET NOCOUNT ON 
	BEGIN
	 SELECT KioskLocationID,KioskLocation
		FROM [coc_KioskLocationLanguages](NOLOCK) 
		WHERE ((@KioskLocationID IS NULL AND LanguageID=@LanguageID) OR (KioskLocationID=@KioskLocationID  AND LanguageID=@LanguageID))
	END
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[GetLoyaltyRewardInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetLoyaltyRewardInformation]
AS
	SET NOCOUNT ON
		SELECT LS.LoyaltyPointSetupID,CAST(LS.EditValue AS DECIMAL(10,2))EditValue,LS.LoyaltyPointKey,CAST(LS.SetupValue AS DECIMAL(10,2))SetupValue,LS.IsApproved,ISNULL(LS.EditUserID,0)EditUserID
			FROM coc_LoyaltyPointSetups(NOLOCK) LS
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[GetLuhnNumber]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetLuhnNumber]
	@CheckDigitNumber NVARCHAR(55),
	@ReturnValue [Remark] OUTPUT
AS
	SET NOCOUNT ON
		BEGIN
			SET @ReturnValue=dbo.fnGetLuhn(@CheckDigitNumber)
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[GetMenuData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetMenuData]
	 @kioskLocationID INTEGER,
	 @LanguageID INTEGER=1
AS 
SET NOCOUNT ON 

	SELECT KSL.KioskScreenID, KSL.KioskScreenName,ksl.ImageFile FROM coc_KioskScreens KS (NOLOCK)
			INNER JOIN coc_KioskScreenLanguages KSL (NOLOCK) ON KSL.KioskScreenID = KS.KioskScreenID
			INNER JOIn coc_KioskScreenMapping KSM (NOLOCK) ON KSM.KioskScreenID = KS.KioskScreenID
		where KSM.KioskLocationID = @kioskLocationID 
		and LanguageID = @LanguageID
		and KSM.IsActive = 1

SET NOCOUNT OFF 

GO
/****** Object:  StoredProcedure [dbo].[GetMessagePackTypes]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetMessagePackTypes]
	@PackagePricingTypeID INTEGER=NULL,
	@LanguageID INTEGER
AS
 SET NOCOUNT ON 
	IF(@LanguageID)=1
	BEGIN
	 SELECT MessagePackTypeID,MessagePackType
		FROM [coc_MessagePackTypes](NOLOCK) 
		WHERE (@PackagePricingTypeID IS NULL OR MessagePackTypeID=@PackagePricingTypeID) 
	END
	ELSE 
	SELECT MessagePackTypeID,AliasMessagePackType
		FROM [coc_MessagePackTypes](NOLOCK) 
		WHERE (@PackagePricingTypeID IS NULL OR MessagePackTypeID=@PackagePricingTypeID) 
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[GetNationalityInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetNationalityInformation] 
	@NationalityID INTEGER=NULL,
	@LanguageID INTEGER=1
AS 
 BEGIN

	--Table 1 [Nationality]
	SELECT CU.NationalityID,Nationality,IsActive,CL.LanguageID
		FROM [coc_Nationalities] CU(NOLOCK) 
			INNER JOIN [coc_NationalityLanguages] CL(NOLOCK) ON CL.NationalityID=CU.NationalityID --AND CL.LanguageID=@LanguageID
		WHERE (@NationalityID IS NULL OR CU.NationalityID=@NationalityID) --AND IsActive=1
			order by CU.DisplayOrder, CL.Nationality
	--Table 1 [NationalityLanguages]
	SELECT Cl.NationalityID,LanguageID,Nationality 
		FROM [coc_NationalityLanguages] CL(NOLOCK) inner join [coc_Nationalities] CU(NOLOCK) ON CL.NationalityID=CU.NationalityID
	WHERE (@NationalityID IS NULL OR CL.NationalityID=@NationalityID) AND CL.LanguageID=@LanguageID 
		order by CU.DisplayOrder, CL.Nationality

END



GO
/****** Object:  StoredProcedure [dbo].[GetNavigationDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetNavigationDetails]
	@ScreenID INTEGER=NULL,
	@ID INTEGER=NULL
AS
SET NOCOUNT ON 
BEGIN
	DECLARE @NotificationCount AS TABLE
	(
		UniqueID INTEGER IDENTITY(1,1),
		NotificationsCount INTEGER,
		NotificationID BIGINT
	)   
	INSERT INTO @NotificationCount	
		SELECT COUNT(NotificationID),NotificationID  FROM coc_EServiceBarcodes(NOLOCK) GROUP BY NotificationID 
	IF(@ScreenID=2004)
	BEGIN
		SELECT ISNULL(ES.ServiceTypeID,0) ServiceTypeID,ISNULL(ES.ServiceSubTypeID,0) ServiceSubTypeID, ISNULL(ES.CompetitionID,0) CompetitionID,ES.EServiceID,
			ISNULL(SL.EService,0)+'-'+ES.ServiceNumber[PromotionName],ISNULL(MT.MessagePackType,0)[MessagePackType],NT.NotificationCount-NC.NotificationsCount[NotificationCount],
			NT.NotificationID,NT.NotificationCount[TotalNotificationCount]
			FROM coc_EServices ES(NOLOCK)
				INNER JOIN coc_EServiceLanguages (NOLOCK)SL ON ES.EServiceID=SL.EServiceID
				LEFT JOIN coc_MessagePackTypes (NOLOCK)MT ON MT.MessagePackTypeID=ES.MessagePackTypeID
				INNER JOIN coc_Notifications NT(NOLOCK) ON ES.EServiceID=NT.EServiceID
				LEFT JOIN @NotificationCount NC ON NT.NotificationID=NC.NotificationID
			WHERE ES.EServiceID=@ID AND ES.IsPaymentDone=1 
	END
	ELSE IF (@ScreenID=2013)
	BEGIN
		SELECT ISNULL(ServiceTypeID,0) ServiceTypeID,ISNULL(ServiceSubTypeID,0) ServiceSubTypeID, ISNULL(CompetitionID,0) CompetitionID 
			FROM coc_EServices ES(NOLOCK) 
				INNER JOIN coc_ECoupons EC(NOLOCK) ON ES.EServiceID=EC.EServiceID
		WHERE EC.ECouponID=@ID
	END
	ELSE IF (@ScreenID=2012)
	BEGIN
		SELECT 53 [ServiceTypeID],0 ServiceSubTypeID, 0 CompetitionID 
	END
	ELSE IF (@ScreenID=2025)
	BEGIN
		SELECT 
			es.EServiceID,es.IsPaymentDone
		FROM coc_EServices es (NOLOCK)
			LEFT JOIN coc_EVoucher ev (NOLOCK) ON ev.EServiceID=es.EServiceID 
			WHERE es.EServiceID=@ID AND es.IsPaymentDone=1 
	END
END
GO
/****** Object:  StoredProcedure [dbo].[GetNewHomeContent]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetNewHomeContent]     
@UserID INTEGER=NULL,    
 @LanguageID INTEGER    
AS    
SET NOCOUNT ON    
 BEGIN    
  DECLARE @Counter INTEGER    
  DECLARE @Winners AS TABLE    
  (    
   UniqueID INTEGER IDENTITY(1,1),    
   EcouponID INTEGER,    
   EServiceID INTEGER,    
   DeclaredDate DATETIME    
  )    
      
  DECLARE @WinnerList AS TABLE    
  (    
   ECouponID INTEGER,    
   WinnerName NullName,    
   PrizeType NullDescription,    
   PrizeHeader NullDescription,    
   PrizeDetail Remark,    
   ImageFile NullDescription,    
   EService Remark,    
   ConsumerID INTEGER    
  )    
       
  --Tables[0] ECoupon    
  SELECT EC.ECouponID,EC.EServiceID,CONVERT(NVARCHAR(12),EC.ResultDate,106) ResultDate,EC.WinnerCount,EC.EntryTypeID,EC.MinInvoiceValue,EC.AdditionalCouponValue,EC.AllowMultipleInvoices,EC.CouponPerInvoice,    
    EC.CouponPerMember,EC.UserAurthorised,ISNULL(EC.QuestionCount,0) QuestionCount,EC.ImageFile,EC.UsesTerm,EC.ECouponTemplate,EC.ParticipationByKiosk,    
    '' as [ServiceName],--SL.EService [ServiceName],    
    CONVERT(NVARCHAR(12),ES.FromDate,106) StatDate,CONVERT(NVARCHAR(12),ES.ToDate,106) EndDate,EC.MemberOnly,EC.ImageFile as DisplayImage     
   FROM coc_ECoupons(NOLOCK) EC    
    INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID = ES.EServiceID    
    INNER JOIN coc_EServiceLanguages SL(NOLOCK) ON ES.EServiceID=SL.EServiceID AND SL.LanguageID = @LanguageID    
  WHERE EC.IsActive=1 AND CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE) AND EC.ResulltDeclared=0    
    and ES.EServiceID not in (125,127,128)    
 and EC.EServiceID <> 183 -- added by rafeeq   
  ORDER BY EC.ECouponID DESC     
    
  --Tables[1] Ticket    
  SELECT TC.EServiceEventID,TC.EServiceID,TC.EventDescription,EV.EnumValue,FORMAT(TC.EventDate,'dd/MM/yyyy')EventDate,FORMAT(TC.LastDate,'dd/MM/yyyy')LastDate,SL.EService [ServiceName],    
    FORMAT(TC.PurchaseStartDate,'dd/MM/yyyy')PurchaseStartDate,FORMAT(TC.PurchaseEndDate,'dd/MM/yyyy')PurchaseEndDate,TC.EventCost,TC.IsActive,TC.EventDescription [TicketDescription],TC.DisplayImage     
   FROM coc_EServiceEvents(NOLOCK) TC    
   INNER JOIN coc_EnumValueLanguages(NOLOCK) EV ON TC.EventTypeID=EV.EnumValueID AND EV.LanguageID=@LanguageID    
   INNER JOIN coc_EServiceLanguages(NOLOCK) SL ON TC.EServiceID=SL.EServiceID AND SL.LanguageID = @LanguageID    
  WHERE TC.IsActive=1 AND CAST(GETDATE() AS DATE) BETWEEN CAST(TC.PurchaseStartDate AS DATE) AND CAST(TC.PurchaseEndDate AS DATE)    
  ORDER BY TC.EServiceEventID DESC     
    
  --Tables[2] Advertisement1    
  SELECT AD.AdvertisementID,AD.AdvertisementName,FORMAT(AD.StartDate,'dd/MM/yyyy')StartDate,ISNULL(AD.TargetURL,'')TargetURL,AD.Cost,AD.DisplayTypeID,AD.IsImage,AD.IsVideo,    
    AD.Duration,ISNULL(AD.PositionID,101) PositionID,AD.IsActive,AD.TargetPlateform,AD.PopupHeight,AD.PopupWidth  ,   
 isnull(AD.TargetLinkType,'URL') TargetLinkType, isnull(AD.eCouponID,0) eCouponID  
   FROM coc_Advertisements(NOLOCK) AD  
  WHERE IsActive=1    
   ORDER BY AD.AdvertisementID    
    
  --Tables[3] Advertisement2    
  SELECT FL.AdvertisementFileID,FL.AdvertisementID,FL.FilePath,FL.IsURL,AdvertisementText,ISNULL(AV.PositionID,101) PositionID,AV.IsImage,AV.IsVideo,AV.IsActive    
   FROM coc_AdvertisementFiles(NOLOCK) FL 
    INNER JOIN coc_Advertisements(NOLOCK) AV ON FL.AdvertisementID=AV.AdvertisementID     
   WHERE AV.IsActive=1     
  ORDER BY FL.AdvertisementID    
         
  --Tables[4] Advertisement3    
  SELECT AP.AdvertisementPageID,AP.AdvertisementID,AP.PageID,ISNULL(AV.PositionID,101) PositionID,AV.IsImage,AV.IsVideo,AV.IsActive    
   FROM coc_AdvertisementPages(NOLOCK) AP    
    INNER JOIN coc_Advertisements(NOLOCK) AV ON AP.AdvertisementID=AV.AdvertisementID     
   WHERE AV.IsActive=1    
  ORDER BY AP.AdvertisementID    
    
  --Tables[5] Locations    
  SELECT KL.KioskLocationID, [Location],Address1,Address2,CityID,KK.KioskLocation    
   FROM coc_KioskLocations(NOLOCK) KL    
  INNER JOIN coc_KioskLocationLanguages(NOLOCK) KK ON KL.KioskLocationID=KK.KioskLocationID AND KK.LanguageID=@LanguageID    
        
  --Tables[6] Setups    
  SELECT SystemSetupID,SetupKey,SetupValue     
   FROM COC_SystemSetups(NOLOCK)    
       
  --Tables[7] KioskLocations    
  SELECT KL.KioskLocationID,KL.Address1,KL.Address2,KL.MacAddress1,KL.MacAddress2,KL.Location,CL.City,LL.KioskLocation,KL.Remarks    
   FROM coc_KioskLocations(NOLOCK) KL    
    INNER JOIN coc_CityLanguages(NOLOCK) CL ON CL.CityID=KL.CityID AND  CL.LanguageID=@LanguageID    
    INNER JOIN coc_KioskLocationLanguages(NOLOCK) LL ON LL.KioskLocationID=KL.KioskLocationID AND LL.LanguageID=@LanguageID    
    
  --Tables[8] Prizes    
  SELECT ECouponPrizeID,ECouponID,PrizeTypeID,PrizeHeader,PrizeDetail,ImageFile,EV.EnumValue [Title]     
   FROM coc_ECouponPrizes(NOLOCK) EP
    INNER JOIN coc_EnumValueLanguages(NOLOCK) EV ON EP.PrizeTypeID=EV.EnumValueID AND LanguageID=@LanguageID    
         
  INSERT INTO @Winners    
  SELECT  DISTINCT TOP 3 EC.ECouponID ,EC.EServiceID,EC.DeclaredDate    
   FROM coc_ECouponWinners(NOLOCK) EW     
    INNER JOIN coc_ECouponPrizes(NOLOCK) EP ON EP.ECouponPrizeID=EW.ECouponPrizeID    
    INNER JOIN coc_ECoupons EC(NOLOCK) ON EP.ECouponID=EC.ECouponID    
   ORDER BY EC.DeclaredDate DESC     
  --Tables[3] WinnersList    
  SELECT @Counter=MIN(ECouponID) FROM @Winners    
  WHILE(@Counter IS NOT NULL)    
  BEGIN    
   INSERT INTO @WinnerList    
    SELECT TOP 2 EC.ECouponID,CS.FirstName +' '+CS.SecondName [WinnerName],CP.EnumValue [PrizeType],EP.PrizeHeader,EP.PrizeDetail,CS.ImageFile ,SR.EService,CS.ConsumerID    
     FROM @Winners EC     
      INNER JOIN coc_EServiceLanguages SR(NOLOCK) ON EC.EServiceID=SR.EServiceID AND SR.LanguageID=@LanguageID    
      INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponID=EC.ECouponID    
      INNER JOIN coc_ECouponWinners ES(NOLOCK) ON EP.ECouponPrizeID=ES.ECouponPrizeID    
      INNER JOIN coc_Consumers CS(NOLOCK) ON ES.ConsumerID=CS.ConsumerID    
      INNER JOIN coc_EnumValueLanguages CP(NOLOCK) ON EP.PrizeTypeID=CP.EnumValueID AND CP.LanguageID=@LanguageID    
     WHERE EC.EcouponID=@Counter    
   INSERT INTO @WinnerList    
    SELECT TOP 2 EC.ECouponID,CS.GuestName [WinnerName],CP.EnumValue [PrizeType],EP.PrizeHeader,EP.PrizeDetail,'' ImageFile ,SR.EService,0 ConsumerID    
     FROM @Winners EC     
      INNER JOIN coc_EServiceLanguages SR(NOLOCK) ON EC.EServiceID=SR.EServiceID AND SR.LanguageID=@LanguageID    
      INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponID=EC.ECouponID    
      INNER JOIN coc_ECouponWinners ES(NOLOCK) ON EP.ECouponPrizeID=ES.ECouponPrizeID    
      INNER JOIN coc_GuestParticipations CS(NOLOCK) ON ES.MobileNumber=CS.Mobile AND ES.ConsumerID IS NULL      
      INNER JOIN coc_EnumValueLanguages CP(NOLOCK) ON EP.PrizeTypeID=CP.EnumValueID AND CP.LanguageID=@LanguageID    
     WHERE EC.EcouponID=@Counter    
   SELECT @Counter=MIN(ECouponID) FROM @Winners WHERE ECouponID>@Counter    
  END    
  SELECT * FROM @WinnerList ORDER BY ECouponID DESC     
    
    --Table[10] HomeScreenSetup    
  SELECT SystemSetupID,SetupKey,SetupValue     
   FROM COC_SystemSetups(NOLOCK)     
  WHERE SystemSetupID=501    
    
  --Tables[11] Vouchers    
  SELECT distinct top 10   EV.EVoucherID,EV.EServiceID,EV.Type,EV.DiscountType,EV.OriginalPrice,EV.PriceAfterDiscount,EV.DiscountAmount,EV.DiscountPercentage,EV.PromotionAmount,EV.VoucherAmount,EV.NumberOfVouchers,
   ESL.EService , EVI.ImageFile 
   FROM coc_EVoucher(NOLOCK) EV  
   left join coc_EServices(NOLOCK) ES on ES.EServiceID=EV.EServiceID
   left JOIN coc_EServiceLanguages(NOLOCK) ESL ON ESL.EServiceID=EV.EServiceID AND ESL.LanguageID=@LanguageID  
   left join coc_EVoucherImages(NOLOCK) EVI ON EVI.EVoucherID=EV.EVoucherID 
  WHERE EV.IsActive=1 AND CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)    
  ORDER BY EV.EVoucherID DESC    
  
  
 END    
SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[GetNotificationCount]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetNotificationCount]
@LanguageID int =1,
@UserID int,
@notificationCount INTEGER OUTPUT
AS
begin
SELECT @notificationCount=COUNT(Id) FROM coc_ServiceTaskNotification(NOLOCK) where ReadStatus = 0 AND UserId = @UserID AND LanguageId=@LanguageID
end 
GO
/****** Object:  StoredProcedure [dbo].[GetNotificationCriteria]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetNotificationCriteria]	
	@NotificationSendId INT
	
AS
SET NOCOUNT ON

	SELECT n.EServiceID,SendingDate,n.NotificationId,ns.NotificationCount, CityID, AgeGroupID, Gender From coc_NotificationSends ns (NOLOCK)
		Join coc_Notifications n (NOLOCK) ON n.NotificationID = ns.NotificationID
	 WHERE NotificationSendID = @NotificationSendId

SET NOCOUNT OFF








GO
/****** Object:  StoredProcedure [dbo].[GetNotificationInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetNotificationInformation]
	@NotificationID INTEGER=NULL,
	@LanguageID INTEGER=1
AS 
SET NOCOUNT ON
	--DECLARE @NotificationSendID INTEGER
	--DECLARE @NotificationCount INTEGER
	 
	--SELECT @NotificationSendID=NotificationSendID FROM coc_NotificationSends(NOLOCK) WHERE NotificationID=@NotificationID
	
	--SELECT @NotificationCount=COUNT(ISNULL(NotificationSendID,0)) FROM coc_ConsumerNotifications WHERE NotificationSendID=@NotificationSendID

	SELECT NT.NotificationID,NT.EServiceID,EL.EService ,NT.NotificationCount [NotificationCount],NT.NotificationSend [NotificationSend],SUM(ISNULL(NT.NotificationRead,0)) [NotificationRead],ISNULL(NT.ResendCounter,0) [ResendCounter],
	FORMAT(NS.SendingDate, 'dd MMM yyyy h:mmtt')SendingDate,NS.SendingType,NS.CityID,ISNULL(NS.AgeGroupID,0) [AgeGroupID],NS.Gender,NS.SearchCount,CONVERT(VARCHAR(12),NS.ScheduleDate,106) ScheduleDate,ISNULL(NS.NotificationCount,0) [NotificationCount]
			FROM [coc_Notifications] NT(NOLOCK)  
				INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON NT.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
				INNER JOIN coc_NotificationSends NS(NOLOCK) ON NT.NotificationID=NS.NotificationID AND SendingType != 4
	 WHERE NT.NotificationID=@NotificationID 
	 GROUP BY  NT.NotificationID,NT.EServiceID,EL.EService ,NT.NotificationCount,NT.NotificationSend,NT.ResendCounter,
	 NS.SendingDate,NS.SendingType,NS.CityID,NS.AgeGroupID,NS.Gender,NS.SearchCount,NS.ScheduleDate,NS.NotificationCount
			
	 --Tables[0] NotificationMessage
	SELECT LanguageID,[Subject],[Message] 
		FROM coc_NotificationSends NT(NOLOCK) 
			INNER JOIN coc_NotificationSendLanguages NS(NOLOCK) ON NT.NotificationSendID=NS.NotificationSendID  AND SendingType != 4
	 WHERE NT.NotificationID=@NotificationID 
	 ORDER BY NS.LanguageID 
SET NOCOUNT OFF









GO
/****** Object:  StoredProcedure [dbo].[GetPackagePricingForJCCI]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[GetPackagePricingForJCCI]
	@NotificationCount INTEGER=NULL,
	@CompetitionID INTEGER=NULL
	

AS 
	SET NOCOUNT ON
	BEGIN
		DECLARE @PackagePricingTypeID INTEGER=3
		DECLARE @ServiceTypeID INTEGER=52
		IF @CompetitionID=0 SET @CompetitionID=NULL
		

		SELECT top 1 PP.PackagePricingID [MessagePackID], CAST(PP.MessageRate AS DECIMAL(15,2))MessageRate
			FROM [coc_PackagePricings]PP(NOLOCK)  
			WHERE (@ServiceTypeID IS NULL OR ServiceTypeID=@ServiceTypeID)
				AND (@PackagePricingTypeID IS NULL OR MessagePackTypeID=@PackagePricingTypeID) 
				AND (@NotificationCount IS NULL OR @NotificationCount BETWEEN PackFrom AND PackTo)
				AND (@CompetitionID IS NULL OR CompetitionID=@CompetitionID)
				AND PP.IsActive = 1
			ORDER BY PP.MessageRate asc
	END
	SET NOCOUNT OFF





GO
/****** Object:  StoredProcedure [dbo].[GetPackagePricingInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetPackagePricingInformation]
	@PackagePricingID INTEGER=NULL ,
	@ServiceTypeID INTEGER=NULL,
	@NotificationCount INTEGER=NULL,
	@PackagePricingTypeID INTEGER=NULL,
	@CompetitionID INTEGER=NULL,
	@ServiceSubTypeID INTEGER=NULL,
	@IsApproved BIT=NULL    

AS 
	SET NOCOUNT ON
	BEGIN
		IF @CompetitionID=0 SET @CompetitionID=NULL
		IF @ServiceSubTypeID=0 SET @ServiceSubTypeID=NULL

		SELECT ROW_NUMBER() OVER(ORDER BY PP.PackagePricingID)id, PP.PackagePricingID [MessagePackID],PP.ServiceTypeID,PP.ServiceSubTypeID,PP.MessagePackTypeID,PP.CompetitionID,
				PP.EditPackFrom,PP.PackFrom,PP.EditPackTo,PP.PackTo,CAST(PP.EditMessageRate AS DECIMAL(15,2))EditMessageRate,CAST(PP.MessageRate AS DECIMAL(15,2))MessageRate,PP.EditMessagePercentage,PP.MessagePercentage,PP.IsActive,PP.IsApproved,PP.AddUserID,PP.EditUserID, 
        CASE WHEN EditUserID IS NULL THEN AddUserID ELSE EditUserID END [MakerID]
			FROM [coc_PackagePricings]PP(NOLOCK)  
			WHERE (@PackagePricingID IS NULL OR PackagePricingID=@PackagePricingID) 
				AND (@ServiceTypeID IS NULL OR ServiceTypeID=@ServiceTypeID)
				AND (@PackagePricingTypeID IS NULL OR MessagePackTypeID=@PackagePricingTypeID) 
				AND (@NotificationCount IS NULL OR @NotificationCount BETWEEN PackFrom AND PackTo)
				AND (@ServiceSubTypeID IS NULL OR ServiceSubTypeID=@ServiceSubTypeID)
				AND (@CompetitionID IS NULL OR CompetitionID=@CompetitionID)
				AND (@IsApproved IS NULL OR IsApproved=@IsApproved)
				 		
	END
	SET NOCOUNT OFF




GO
/****** Object:  StoredProcedure [dbo].[GetPendingAddOnService]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetPendingAddOnService]
	@EServiceAddOnId INTEGER
AS
	BEGIN
		SELECT		EAC.ConsumerEServiceAddOnID,
					EAC.EServiceAddOnId,
					EAC.ConsumerID,
					ES.ServiceTypeID,
					ES.ServiceSubTypeID
		FROM		coc_EServiceAddOnConsumers EAC (NOLOCK)
		INNER JOIN	coc_eServiceAddOn EA (NOLOCK)	ON  EAC.EServiceAddOnId = EA.EServiceAddOnId
		INNER JOIN	coc_EServices ES (NOLOCK)		ON	ES.EServiceID = EA.AddOnServiceID	
		WHERE		EAC.IsProcessed = 0		AND EAC.EServiceAddOnId = @EServiceAddOnId 
	END
GO
/****** Object:  StoredProcedure [dbo].[GetPendingBroadcastEmails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetPendingBroadcastEmails]

	@EServiceId int

AS

	BEGIN

		SELECT		 BCE.BroadcastEmailID
					,BCE.EServiceID
					,BCE.CustomerName
					,BCE.EmailAddress
					,BCE.EmailBody
					,BCE.Status
					,BCE.UserID
					,BCE.EntryTime
					,BCE.SentTime
					, (select  top 1 EVI.ImageFile FROM  coc_EVoucher EV (NOLOCK)
							LEFT JOIN coc_EVoucherImages EVI (NOLOCK) on EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1
							where EV.EServiceID = BCE.EServiceID) as img

		FROM		coc_BroadcastEmail BCE (NOLOCK)
		WHERE		(BCE.Status is null	OR BCE.Status = 3)AND BCE.EServiceID = @EServiceId 

	END
GO
/****** Object:  StoredProcedure [dbo].[GetPointRedeemptionInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetPointRedeemptionInformation]  
	@RedemptionCode [Code],
	@UserID INTEGER=NULL
AS
	SET NOCOUNT ON
	BEGIN
	DECLARE @CorporateID INTEGER
	DECLARE @ServiceCorporateID INTEGER
	DECLARE @RetailOutletID INTEGER
	DECLARE @UserRetailOutletID INTEGER

	--SELECT @CorporateID=CorporateID FROM coc_CorporateUsers(NOLOCK)CU WHERE CU.UserID=@UserID
	--SELECT @ServiceCorporateID=EB.CorporateID FROM coc_ConsumerRedemptions (NOLOCK) EB WHERE EB.RedemptionCode=@RedemptionCode
	SELECT @RetailOutletID=EB.RetailOutletID FROM coc_ConsumerRedemptions (NOLOCK) EB WHERE EB.RedemptionCode=@RedemptionCode
	SELECT @UserRetailOutletID=CU.RetailOutletID FROM coc_CorporateUsers(NOLOCK)CU WHERE CU.UserID=@UserID

		IF(@RetailOutletID=@UserRetailOutletID)
		BEGIN
			SELECT CR.ConsumerRedemptionID,CR.RedemptionCode,CR.ConsumerID,CR.RedemptionPlanID,CU.FirstName,CU.LoyaltyPoint,RP.LoyaltyPoint [RedeemPoint] ,CAST(RP.LoyaltyAmount AS INT)LoyaltyAmount,
					RP.LoyaltyItem,CU.PrimaryMobile,ISNULL(CR.IsVerified,0)IsVerified
				FROM coc_ConsumerRedemptions(NOLOCK) CR
					INNER JOIN coc_Consumers(NOLOCK) CU ON CU.ConsumerID=CR.ConsumerID
					LEFT JOIN coc_RedemptionPlans(NOLOCK) RP ON RP.RedemptionPlanID=CR.RedemptionPlanID
			WHERE CR.RedemptionCode=@RedemptionCode
		END
		ELSE BEGIN
			SELECT CR.ConsumerRedemptionID,CR.RedemptionCode,CR.ConsumerID,CR.RedemptionPlanID,CU.FirstName,CU.LoyaltyPoint,RP.LoyaltyPoint [RedeemPoint] ,CAST(RP.LoyaltyAmount AS INT)LoyaltyAmount,
					RP.LoyaltyItem,CU.PrimaryMobile,ISNULL(CR.IsVerified,0)IsVerified
				FROM coc_ConsumerRedemptions(NOLOCK) CR
					INNER JOIN coc_Consumers(NOLOCK) CU ON CU.ConsumerID=CR.ConsumerID
					LEFT JOIN coc_RedemptionPlans(NOLOCK) RP ON RP.RedemptionPlanID=CR.RedemptionPlanID
			WHERE CR.RedemptionCode=''
		END
	END
	SET NOCOUNT OFF


	 

GO
/****** Object:  StoredProcedure [dbo].[GetPointRedmptionInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetPointRedmptionInformation]
	@RedemptionPlanID INTEGER=NULL,
	@PlanName  [NullName]=NULL,   
	@LanguageID INTEGER=NULL 

AS 
	BEGIN   
		SELECT RP.RedemptionPlanID,RLL.RedemptionPlan,CR.CRNumber,RL.CorporateID,RP.RedeemTypeID,RP.LoyaltyPoint,RP.LoyaltyAmount,RP.LoyaltyItem,RP.Remarks,RP.IsActive,
				ISNULL(RP.EditUserID,0)EditUserID,RP.IsApproved,EditLoyaltyAmount,EditLoyaltyPoint,EditLoyaltyItem,RP.AddUserID
			FROM coc_RedemptionPlans (NOLOCK) RP
				 INNER JOIN coc_RedemptionPlanLanguages RLL(NOLOCK) ON RLL.RedemptionPlanID=RP.RedemptionPlanID AND RLL.LanguageID=@LanguageID 
				 LEFT JOIN coc_RedemptionLocations(NOLOCK) RL ON RL.RedemptionPlanID=RP.RedemptionPlanID
				 LEFT JOIN coc_Corporates (NOLOCK) CR ON CR.CorporateID=RL.CorporateID
			WHERE (@RedemptionPlanID IS NULL OR RP.RedemptionPlanID=@RedemptionPlanID) 

		--Table 1 [RedemptionLanguages]
		SELECT RedemptionPlanID,LanguageID,RedemptionPlan 
			FROM coc_RedemptionPlanLanguages CL(NOLOCK)
		WHERE (@RedemptionPlanID IS NULL OR CL.RedemptionPlanID=@RedemptionPlanID)

		--Table 2 [RedemptionPlansLocation]
		SELECT ROW_NUMBER() OVER(ORDER BY RL.RedemptionLocationID)id, RL.CorporateID,RL.RetailOutletID,CR.CRNumber,LR.RetailOutlet 
			FROM coc_RedemptionLocations(NOLOCK) RL
				INNER JOIN coc_RedemptionPlans(NOLOCK) RP ON RP.RedemptionPlanID=RL.RedemptionPlanID
				INNER JOIN coc_Corporates (NOLOCK) CR ON CR.CorporateID=RL.CorporateID
				INNER JOIN coc_RetailOutletLanguages(NOLOCK) LR ON LR.RetailOutletID=RL.RetailOutletID
			 WHERE RL.RedemptionPlanID=@RedemptionPlanID AND LR.LanguageID=@LanguageID
	END

GO
/****** Object:  StoredProcedure [dbo].[GetPrizeTypeList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetPrizeTypeList] 
	@EServiceID INTEGER,
	@LanguageID INTEGER=NULL
AS
SET NOCOUNT ON
	BEGIN
		SELECT EP.PrizeTypeID,EL.EnumValue,EP.ECouponID 
		FROM coc_ECouponPrizes EP(NOLOCK) 
			INNER JOIN coc_ECouponWinners EW(NOLOCK) ON EP.ECouponPrizeID=EW.ECouponPrizeID
			INNER JOIN coc_ECoupons EC(NOLOCK) ON EP.ECouponID=EC.ECouponID AND EServiceID=@EServiceID
			INNER JOIN coc_EnumValueLanguages EL(NOLOCK) ON EP.PrizeTypeID=EL.EnumValueID AND EL.LanguageID=@LanguageID
	END
SET NOCOUNT OFF

 
 
	










GO
/****** Object:  StoredProcedure [dbo].[GetRecentNotifications]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetRecentNotifications]  
@LanguageID int =1,  
@UserID int  
AS  
BEGIN  
  
 ;WITH Tnotification AS  
   (  
 SELECT TOP 10 Id as UniqueId, UserId, [Message], [Date],LanguageId,ReadStatus,RowStatus,
   RedirectPage,RedirectParameter 
  FROM coc_ServiceTaskNotification  (NOLOCK)  
  ORDER BY Id DESC  
 )  
  
   SELECT UniqueId,   
         UserId,      
         [Message],   
   [Date],  
   LanguageId,  
   ReadStatus,  
   RowStatus,
   RedirectPage,
   RedirectParameter  
   
FROM Tnotification  
  
--WHERE Rowc BETWEEN @FirstRecord AND @LastRecord  
  WHERE Tnotification.LanguageId=@LanguageID AND UserId = @UserID AND RowStatus=1  
END
GO
/****** Object:  StoredProcedure [dbo].[GetRedeemPointInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetRedeemPointInformation] 
	@LanguageID INTEGER
AS
	SET NOCOUNT ON
	BEGIN
		SELECT RL.RedemptionPlanID,RL.RedemptionLocationID,RL.CorporateID,('Redeem '+cast(RP.LoyaltyPoint AS NVARCHAR) +' points and get ' +COALESCE(CAST(CAST(RP.LoyaltyAmount AS INT) AS NVARCHAR),
				RP.LoyaltyItem))Loyalty,ISNULL(RP.LoyaltyAmount,0) LoyaltyAmount,RP.LoyaltyPoint,RP.LoyaltyItem,LR.RedemptionPlan [Plan],ISNULL(RO.Location,'')Outlet,
				RO.RetailOutletID,OL.RetailOutlet[Retail]
			FROM coc_RedemptionPlans(NOLOCK) RP
				 INNER JOIN coc_RedemptionPlanLanguages(NOLOCK) LR ON LR.RedemptionPlanID=RP.RedemptionPlanID AND LR.LanguageID=@LanguageID
				 INNER JOIN coc_RedemptionLocations(NOLOCK) RL ON RL.RedemptionPlanID=RP.RedemptionPlanID
				 INNER JOIN coc_RetailOutlets(NOLOCK) RO ON RO.RetailOutletID=RL.RetailOutletID 
				 LEFT JOIN coc_RetailOutletLanguages(NOLOCK) OL ON RO.RetailOutletID=OL.RetailOutletID AND OL.LanguageID=@LanguageID
	END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[GetResources]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetResources]  
 @ScreenID INTEGER=NULL,  
 @LanguageID INTEGER=1 
AS  
 SET NOCOUNT ON;  
  DECLARE @Counter INTEGER  
  if(@LanguageID=0) set @LanguageID  =1;
  DECLARE @Resources TABLE  
  (  
   Sno INTEGER IDENTITY(1,1),  
   ResourceID BIGINT NULL,  
   ScreenID INTEGER,  
   ResourceKey [NullDescription],  
   ResourceText [NullDescription],  
   ResourceValue [NullDescription],  
   ArabicResourceValue [NullDescription],  
   UrduResourceValue [NullDescription],  
   GridResourceID INTEGER NULL,  
   ArabicResourceID BIGINT NULL,  
   UrduResourceID BIGINT NULL  
  )  
    
  INSERT INTO @Resources(ScreenID,ResourceKey,ResourceText,ResourceValue,ResourceID)  
   SELECT  RE.ScreenID, CASE WHEN RE.ResourceKey IS NULL THEN MR.ResourceKey ELSE RE.ResourceKey END ResourceKey,ResourceText,CASE WHEN RE.ResourceValue IS NULL THEN MR.ResourceValue ELSE RE.ResourceValue END ResourceValue ,RE.ResourceID  
    FROM [coc_Resources] RE(NOLOCK)  
     LEFT JOIN [coc_MasterResources] MR(NOLOCK) ON RE.MasterResourceID=MR.MasterResourceID AND RE.ScreenID=MR.ScreenID  
    WHERE GridResourceID IS NULL AND   
    (@ScreenID IS NULL OR RE.ScreenID=@ScreenID OR RE.ScreenID= 1001) AND RE.LanguageID=1 AND RE.ScreenViewID IS NULL   
  
  
  SELECT @Counter= MIN(ScreenID) FROM  @Resources  
  WHILE @Counter IS NOT NULL   
  BEGIN  
   UPDATE RS  
   SET RS.ArabicResourceValue = AR.ResourceValue,RS.ArabicResourceID = AR.ResourceID  
    FROM [coc_Resources] AR(NOLOCK)  
     LEFT JOIN  @Resources RS ON RS.ResourceKey = AR.[ResourceKey] AND  RS.ScreenID = AR.ScreenID    
    WHERE AR.ScreenID = @Counter AND AR.LanguageID=2 AND AR.ScreenViewID IS NULL  
  
  
   UPDATE RS  
   SET RS.UrduResourceValue = UR.ResourceValue,RS.UrduResourceID = UR.ResourceID  
    FROM [coc_Resources] UR(NOLOCK)  
     LEFT JOIN  @Resources RS ON RS.ResourceKey = UR.[ResourceKey] AND  RS.ScreenID = UR.ScreenID    
    WHERE UR.ScreenID = @Counter AND UR.LanguageID=3 AND UR.ScreenViewID IS NULL  
  
   SELECT @Counter= MIN(ScreenID) FROM  @Resources WHERE ScreenID>@Counter  
  END  
  
  --Tables[0]  
   SELECT Sno,Sno [id],ResourceID,ScreenID,ResourceKey,ResourceText,ResourceValue,ArabicResourceValue,GridResourceID,ArabicResourceID,UrduResourceValue  
   FROM @Resources  
  ORDER BY ScreenID  
     
  DELETE FROM @Resources  
    
  INSERT INTO @Resources(ScreenID,ResourceKey,ResourceText,ResourceValue,GridResourceID,ResourceID)  
   SELECT RE.ScreenID,ResourceKey,ResourceText,ResourceValue,RE.GridResourceID,RE.ResourceID   
    FROM [coc_Resources] RE(NOLOCK)  
     LEFT JOIN [coc_GridResources] GR(NOLOCK) ON RE.GridResourceID=GR.GridResourceID  
    WHERE RE.GridResourceID IS NOT NULL AND   
    (@ScreenID IS NULL OR RE.ScreenID=@ScreenID OR RE.ScreenID= 1001)  AND RE.LanguageID =1 AND RE.ScreenViewID IS NULL   
    
  SELECT @Counter= MIN(ScreenID) FROM  @Resources  
  WHILE @Counter IS NOT NULL   
  BEGIN  
   UPDATE RS  
   SET RS.ArabicResourceValue = AR.ResourceValue,RS.ArabicResourceID = AR.ResourceID  
    FROM [coc_Resources] AR(NOLOCK)  
     LEFT JOIN  @Resources RS ON RS.ResourceKey = AR.[ResourceKey] AND  RS.ScreenID = AR.ScreenID    
    WHERE AR.ScreenID = @Counter AND AR.LanguageID=2 AND AR.ScreenViewID IS NULL  
   SELECT @Counter= MIN(ScreenID) FROM  @Resources WHERE ScreenID>@Counter  
  END  
  
  
  --Tables[1]   
   SELECT Sno,Sno [id],ResourceID,ScreenID,ResourceKey,ResourceText,ResourceValue,ArabicResourceValue,GridResourceID,ArabicResourceID ,UrduResourceValue   
   FROM @Resources   
  ORDER BY GridResourceID    
  
         
 SET NOCOUNT OFF;  
  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[GetResourcesMultipleScreen]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetResourcesMultipleScreen]       
 @ScreenIDList VARCHAR(500) = NULL,      
 @LanguageID INTEGER=1        
AS      
 SET NOCOUNT ON      
 BEGIN        
 if(@LanguageID=0) set @LanguageID= 1;    
 DECLARE @ValueTable table([Value] nvarchar(1000))                  
 --To split the input string based on the delimiter                  
  DECLARE @NextString nvarchar(4000)                  
  DECLARE @Pos int                  
  DECLARE @NextPos int                  
  DECLARE @COmmaCheck nvarchar(1)                  
                   
  --Initialise                  
  SET @NextString = ''                  
  SET @COmmaCheck = right(@ScreenIDList,1)                  
                   
  --Check for trailing comma,if not exists, Insert                  
  SET @ScreenIDList = @ScreenIDList + ','                  
                   
  --Get position of  first comma                  
  SET @Pos = CHARINDEX(',',@ScreenIDList)                  
  SET @NextPos = 1                  
                   
  --Loop while there is still a comma in the string of levels                  
  WHILE(@Pos <> 0)                  
  BEGIN                   
   SET @NextString = SUBSTRING(@ScreenIDList,1,@Pos - 1)                  
   INSERT INTO @ValueTable([Value]) VALUES(@NextString)                  
   SET @ScreenIDList = SUBSTRING(@ScreenIDList,@Pos + 1,LEN(@ScreenIDList))                  
   SET @NextPos = @Pos                  
   SET @Pos = CHARINDEX(',',@ScreenIDList)                  
  END           
      
  DECLARE @Counter INTEGER      
  DECLARE @ResourceValue NVARCHAR(1000)      
  DECLARE @Key NVARCHAR(100)      
  DECLARE @ResourceID INTEGER      
  IF(@LanguageID=0)      
   SET @LanguageID =1      
  DECLARE @Resources TABLE      
  (      
   Sno INTEGER IDENTITY(1,1),      
   ResourceID BIGINT NULL,      
   ScreenID INTEGER,      
   ResourceKey [NullDescription],      
   ResourceValue nvarchar(1000),      
   ResourceText nvarchar(1000),      
   GridResourceID INTEGER,      
   LanguageID INTEGER NULL       
  )      
  INSERT INTO @Resources (ResourceID,ScreenID,ResourceKey,ResourceText,LanguageID,GridResourceID)      
   SELECT ResourceID,ScreenID,ResourceKey,ResourceText,LanguageID,GridResourceID       
    FROM coc_Resources(NoLock)       
    WHERE LanguageID=@LanguageID AND ( ScreenID in (select [Value] from @ValueTable))      
      
  SELECT @Counter =MIN(Sno) FROM @Resources      
  WHILE @Counter IS NOT NULL      
  BEGIN      
   SELECT @Key=ResourceKey,@ScreenIDList=ScreenID FROM @Resources WHERE Sno=@Counter          
   SELECT @ResourceValue=ResourceValue,@ResourceID=ResourceID      
    FROM coc_Resources(NoLock)      
     WHERE LanguageID=@LanguageID AND ResourceKey = @Key AND (ScreenID in (select [Value] from @ValueTable))      
      
   UPDATE RC  SET ResourceValue = @ResourceValue,ResourceID=@ResourceID      
    FROM @Resources RC       
    WHERE RC.Sno = @Counter      
   SELECT @Counter = MIN(Sno) FROM @Resources WHERE Sno>@Counter      
      
   SET @ResourceValue=NULL      
   SET @ResourceID=NULL      
  END      
   SELECT Sno [id],ResourceID,ScreenID,ISNULL(ResourceKey,'')[ResourceKey],ISNULL(ResourceValue,'')[ResourceValue],ISNULL(ResourceText,'')[ResourceText],LanguageID,GridResourceID       
     FROM @Resources ORDER BY ScreenID      
 end      
 SET NOCOUNT OFF      
      
      
GO
/****** Object:  StoredProcedure [dbo].[GetResourcesScreen]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetResourcesScreen]     
    @Type INTEGER = NULL,    
 @ScreenID INTEGER = NULL,    
 @LanguageID INTEGER=1      
AS    
 SET NOCOUNT ON    
 BEGIN     
    
  DECLARE @Counter INTEGER    
  DECLARE @ResourceValue NVARCHAR(1000)    
  DECLARE @Key NVARCHAR(100)    
  DECLARE @ResourceID INTEGER    
  IF(@LanguageID=0)    
   SET @LanguageID =1    
  DECLARE @Resources TABLE    
  (    
   Sno INTEGER IDENTITY(1,1),    
   ResourceID BIGINT NULL,    
   ScreenID INTEGER,    
   ResourceKey Nvarchar(1000) null,    
   ResourceValue Nvarchar(1000) null,    
   ResourceText  Nvarchar(1000) null,    
   GridResourceID INTEGER,    
   LanguageID INTEGER NULL     
  )    
  IF(@Type=1)    
  BEGIN    
   INSERT INTO @Resources (ResourceID,ScreenID,ResourceKey,ResourceText,LanguageID,GridResourceID)    
    SELECT ResourceID,ScreenID,ResourceKey,ResourceText,LanguageID,GridResourceID     
     FROM coc_Resources   (NOLOCK)  
     WHERE LanguageID=@LanguageID AND (@ScreenID IS NULL OR ScreenID=@ScreenID)    
    
   SELECT @Counter =MIN(Sno) FROM @Resources    
   WHILE @Counter IS NOT NULL    
   BEGIN    
    SELECT @Key=ResourceKey,@ScreenID=ScreenID FROM @Resources WHERE Sno=@Counter        
    SELECT @ResourceValue=ResourceValue,@ResourceID=ResourceID    
     FROM coc_Resources  (NOLOCK)   
      WHERE LanguageID=@LanguageID AND ResourceKey = @Key AND (@ScreenID IS NULL OR ScreenID=@ScreenID)    
    
    UPDATE RC  SET ResourceValue = @ResourceValue,ResourceID=@ResourceID    
     FROM @Resources RC     
     WHERE RC.Sno = @Counter    
    SELECT @Counter = MIN(Sno) FROM @Resources WHERE Sno>@Counter    
    
    SET @ResourceValue=NULL    
    SET @ResourceID=NULL    
   END    
  END    
  IF(@Type=2)    
  BEGIN     
   INSERT INTO @Resources (ResourceID,ScreenID,ResourceText,ResourceValue)    
    SELECT EV.EnumValueID,EnumID,BaseValue,EL.EnumValue    
     FROM coc_EnumValues  EV(NOLOCK)    
      LEFT JOIN coc_EnumValueLanguages EL (NOLOCK) ON EV.EnumValueID=EL.EnumValueID AND LanguageID=@LanguageID    
     WHERE (@ScreenID IS NULL OR EV.EnumID=@ScreenID)     
  END     
  IF(@Type=3)    
  BEGIN     
    INSERT INTO @Resources (ResourceID,ScreenID,ResourceKey,ResourceText,LanguageID,GridResourceID)    
    SELECT ResourceID,ScreenID,ResourceKey,ResourceText,LanguageID,GridResourceID    
     FROM coc_Resources (nolock)    
     WHERE LanguageID=1 AND  ScreenID=1001    
    
   SELECT @Counter =MIN(Sno) FROM @Resources    
   WHILE @Counter IS NOT NULL    
   BEGIN    
    SELECT @Key=ResourceKey FROM @Resources WHERE Sno=@Counter    
    SELECT @ResourceValue=ResourceValue,@ResourceID=ResourceID     
     FROM coc_Resources (NOLOCK)   
      WHERE LanguageID=@LanguageID AND ResourceKey = @Key AND (@ScreenID IS NULL OR ScreenID=@ScreenID)    
    
    UPDATE RC  SET ResourceValue = @ResourceValue,ResourceID=@ResourceID    
     FROM @Resources RC     
     WHERE RC.Sno = @Counter    
    SELECT @Counter = MIN(Sno) FROM @Resources WHERE Sno>@Counter    
    
    SET @ResourceValue=NULL    
    SET @ResourceID=NULL    
   END    
   END     
  IF(@Type=4)    
  BEGIN     
    INSERT INTO @Resources (ResourceID,ScreenID,ResourceKey,ResourceText,LanguageID,GridResourceID)    
    SELECT ResourceID,ScreenID,ResourceKey,ResourceText,LanguageID,GridResourceID    
     FROM coc_Resources  (NOLOCK)   
     WHERE LanguageID=@LanguageID AND  ScreenID=1000    
    
   SELECT @Counter =MIN(Sno) FROM @Resources    
   WHILE @Counter IS NOT NULL    
   BEGIN    
    SELECT @Key=ResourceKey FROM @Resources WHERE Sno=@Counter    
    SELECT @ResourceValue=ResourceValue,@ResourceID=ResourceID     
     FROM coc_Resources (NOLOCK)   
      WHERE LanguageID=@LanguageID AND ResourceKey = @Key AND (@ScreenID IS NULL OR ScreenID=@ScreenID)    
    
    UPDATE RC  SET ResourceValue = @ResourceValue,ResourceID=@ResourceID    
     FROM @Resources RC     
     WHERE RC.Sno = @Counter    
    SELECT @Counter = MIN(Sno) FROM @Resources WHERE Sno>@Counter    
    
    SET @ResourceValue=NULL    
    SET @ResourceID=NULL    
   END    
   END     
   IF(@Type=5)    
   BEGIN     
    INSERT INTO @Resources (ResourceID,ResourceText,ResourceValue)    
     SELECT MU.MenuID,MU.Menu,ML.Menu      
      FROM coc_Menus  MU(NOLOCK)    
       LEFT JOIN coc_MenuLanguages ML(NOLOCK) ON ML.MenuID=MU.MenuID AND LanguageID=@LanguageID    
   END     
    
   SELECT Sno [id],ResourceID,ScreenID,ISNULL(ResourceKey,'')[ResourceKey],ISNULL(ResourceValue,'')[ResourceValue],ISNULL(ResourceText,'')[ResourceText],LanguageID,GridResourceID     
     FROM @Resources ORDER BY ScreenID    
        
 END    
 SET NOCOUNT OFF    
    
    
    
GO
/****** Object:  StoredProcedure [dbo].[GetResultDeclaration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetResultDeclaration]
	@CorporateID INTEGER,
	@LanguageID INTEGER
AS
SET NOCOUNT ON
	BEGIN
		DECLARE @EmailSubject [Remark]
		DECLARE @EmailBody [Remark]
		DECLARE @SMS [Remark]
		DECLARE @Counter INTEGER
		DECLARE @ResultTable AS TABLE
		(
			UniqueID INTEGER IDENTITY(1,1),
			ECouponID INTEGER,
			EServiceID INTEGER,
			ConsumerID INTEGER,
			ParticipationMobile [Mobile],
			ParticipationEmailID [Email],
			ConsumerName [NullName],
			CorporateID INTEGER,
			MembershipNumber [NullCode],
			EmailSubject NVARCHAR(1000),
			EmailBody NVARCHAR(1000),
			SMS NVARCHAR(1000),
			TypeID TINYINT
		)
		DECLARE @Winners AS TABLE
		(
			UniqueID INTEGER IDENTITY(1,1),
			EcouponID INTEGER,
			EServiceID INTEGER,
			DeclaredDate DATETIME,
			ECouponWinnerID INTEGER
		)
		
		DECLARE @WinnerList AS TABLE
		(
			ECouponID INTEGER,
			WinnerName NullName,
			PrizeType NullDescription,
			PrizeHeader NullDescription,
			PrizeDetail Remark,
			ImageFile NullDescription,
			EService Remark
		)
		SELECT TOP 1 @EmailSubject=GT.TemplateTitle,@EmailBody=GT.Template 
			FROM coc_GeneralNotificationTemplates GN(NOLOCK)
				INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID
		WHERE TemplateTypeID=141 AND EmailUsage=1 AND LanguageID=@LanguageID
		
		SELECT TOP 1 @SMS=GT.Template
			FROM coc_GeneralNotificationTemplates GN(NOLOCK)
				INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID
		WHERE TemplateTypeID=141 AND SMSUsage=1 AND LanguageID=@LanguageID

		SELECT ROW_NUMBER() OVER(ORDER BY EC.ECouponID)id,EC.ECouponID,EC.EServiceID,EG.EService [CompetitionName],EC.WinnerCount,EC.ResultDate,EC.EntryTypeID,EL.EnumValue 
			FROM coc_ECoupons EC(NOLOCK)
					INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID
					INNER JOIN coc_EServiceLanguages EG(NOLOCK) ON EC.EServiceID=EG.EServiceID AND EG.LanguageID=@LanguageID
					INNER JOIN coc_EnumValues EV(NOLOCK) ON EV.EnumValueID=EC.EntryTypeID  
					INNER JOIN coc_EnumValueLanguages EL(NOLOCK) ON EV.EnumValueID=EL.EnumValueID AND  EL.LanguageID=@LanguageID
		WHERE CONVERT(date,EC.ResultDate) <=CONVERT(date,GETDATE()) AND EC.ResulltDeclared=0 AND ES.CorporateID=@CorporateID

		INSERT INTO @ResultTable
		SELECT DISTINCT EC.ECouponID,EC.EServiceID,EP.ConsumerID,EP.ParticipationMobile,EP.ParticipationEmailID,isnull(CS.FirstName,'')+' '+ISNULL(CS.SecondName,'')+' '+isnull(CS.FamilyName,'') ,ES.CorporateID,CS.MembershipNumber,
			@EmailSubject,@EmailBody,@SMS,2
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID
				INNER JOIN coc_Consumers CS(NOLOCK) ON EP.ConsumerID=CS.ConsumerID
		--WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0

		AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx (NOLOCK) WHERE CEx.PrimaryMobile =  CS.PrimaryMobile OR
																	  CEx.PrimaryMobile =  CS.SecondaryMobile OR
																	  CEx.EmailID=CS.EmailID OR
																	  CEx.FacebookID= CS.FacebookID OR
																	  CEx.TwitterID = CS.TwitterID OR
																	  CEx.OutlookID = CS.OutlookID OR
																	  CEx.YahooID = CS.YahooID OR
																	  CEx.MembershipNumber = CS.MembershipNumber OR
																	  CEx.GmailID = CS.GmailID OR
																	  CEx.IqamaNumber = CS.IqamaNumber OR
																	  CEx.PrimaryMobile = EP.ParticipationMobile OR 
																	  CEx.EmailID = EP.ParticipationEmailID
																	   AND
																	  ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
    																   (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))

		
		
		INSERT INTO @ResultTable
		SELECT DISTINCT EC.ECouponID,EC.EServiceID,EP.GuestParticipationID,EP.Mobile,NULL,EP.GuestName ,ES.CorporateID,NULL,
			@EmailSubject,@EmailBody,@SMS,1
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_Notifications NF(NOLOCK) ON ES.EServiceID=NF.EServiceID
				INNER JOIN coc_EServiceBarcodes EB(NOLOCK) ON EB.NotificationID=NF.NotificationID AND EB.CorporateID=@CorporateID AND EB.ConsumerID IS NULL
				INNER JOIN coc_GuestParticipations EP(NOLOCK) ON EB.AsignedMoile=EP.Mobile
		--WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0

			AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx (NOLOCK) WHERE CEx.PrimaryMobile =  EP.Mobile AND			
																	  ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
    																   (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))
		 
		 INSERT INTO @ResultTable
		 SELECT DISTINCT EC.ECouponID,EC.EServiceID,EI.AddUserID,EI.MobileNumber,EP.ParticipationEmailID,ED.InvoiceNumber,ES.CorporateID,EI.MobileNumber,
			@EmailSubject,@EmailBody,@SMS,0
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID
				INNER JOIN coc_ECouponInvoices EI(NOLOCK) ON EP.ECouponID=EI.ECouponID AND EI.ConsumerID IS NULL
				Inner JOIN  coc_ECouponInvoiceDetails ED(NOLOCK) ON EI.ECouponInvoiceID=ED.ECouponInvoiceID 		
				AND NOT EXISTS(SELECT 1 FROM coc_ConsumerExclusions CEx (NOLOCK) WHERE CEx.PrimaryMobile =  EP.ParticipationMobile OR 
																			  CEx.EmailID= EP.ParticipationEmailID AND			
																	          ((CEx.ECouponID =NULL AND CEx.CorporateID=NULL) OR 
    																           (CEx.ECouponID = EC.ECouponID OR CEx.CorporateID = @CorporateID)))

		SELECT UniqueID,ECouponID,EServiceID,ConsumerID,ParticipationMobile, ParticipationEmailID,
			    ConsumerName,CorporateID, MembershipNumber, EmailSubject, EmailBody,SMS,TypeId FROM @ResultTable

		--Tables[2] Winners
		SELECT ECouponPrizeID,EP.ECouponID,PrizeTypeID,PrizeHeader,PrizeDetail,EP.ImageFile,EV.EnumValue [Title],EC.EServiceID 
		FROM coc_ECouponPrizes EP(NOLOCK)
			INNER JOIN coc_ECoupons EC(NOLOCK) ON EP.ECouponID=EC.ECouponID
			INNER JOIN coc_EnumValueLanguages EV(NOLOCK) ON EP.PrizeTypeID=EV.EnumValueID AND LanguageID=@LanguageID

		INSERT INTO @Winners(ECouponWinnerID,ECouponID ,EServiceID,DeclaredDate)
		SELECT  DISTINCT TOP 3 EW.ECouponWinnerID,EC.ECouponID ,EC.EServiceID,EC.DeclaredDate
			FROM coc_ECouponWinners EW (NOLOCK) 
				INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponPrizeID=EW.ECouponPrizeID
				INNER JOIN coc_ECoupons EC(NOLOCK) ON EP.ECouponID=EC.ECouponID
			ORDER BY EW.ECouponWinnerID DESC 
		
		--Tables[3] WinnersList
		SELECT @Counter=MIN(ECouponWinnerID) FROM @Winners
		WHILE(@Counter IS NOT NULL)
		BEGIN
			INSERT INTO @WinnerList
				SELECT TOP 3 EC.ECouponID,isnull(CS.FirstName,'') +' '+isnull(CS.SecondName,'')+' '+isnull(CS.FamilyName,'') [WinnerName],CP.EnumValue [PrizeType],EP.PrizeHeader,EP.PrizeDetail,CS.ImageFile ,SR.EService
					FROM @Winners EC 
						INNER JOIN coc_EServiceLanguages SR(NOLOCK) ON EC.EServiceID=SR.EServiceID AND SR.LanguageID=@LanguageID
						INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponID=EC.ECouponID
						INNER JOIN coc_ECouponWinners ES(NOLOCK) ON EP.ECouponPrizeID=ES.ECouponPrizeID
						INNER JOIN coc_Consumers CS(NOLOCK) ON ES.ConsumerID=CS.ConsumerID
						INNER JOIN coc_EnumValueLanguages CP(NOLOCK) ON EP.PrizeTypeID=CP.EnumValueID AND CP.LanguageID=@LanguageID
					WHERE EC.ECouponWinnerID=@Counter

			INSERT INTO @WinnerList
				SELECT TOP 3 EC.ECouponID,CS.GuestName [WinnerName],CP.EnumValue [PrizeType],EP.PrizeHeader,EP.PrizeDetail,'' ImageFile ,SR.EService 
					FROM @Winners EC 
						INNER JOIN coc_EServiceLanguages SR(NOLOCK) ON EC.EServiceID=SR.EServiceID AND SR.LanguageID=1
						INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponID=EC.ECouponID
						INNER JOIN coc_ECouponWinners ES(NOLOCK) ON EP.ECouponPrizeID=ES.ECouponPrizeID
						INNER JOIN coc_GuestParticipations CS(NOLOCK) ON ES.MobileNumber=CS.Mobile AND ES.ConsumerID IS NULL  
						INNER JOIN coc_EnumValueLanguages CP(NOLOCK) ON EP.PrizeTypeID=CP.EnumValueID AND CP.LanguageID=1
					WHERE EC.ECouponWinnerID=@Counter
			SELECT @Counter=MIN(ECouponWinnerID) FROM @Winners WHERE ECouponWinnerID>@Counter

		END

		SELECT TOP 3 * FROM @WinnerList ORDER BY ECouponID DESC 

	   --SELECT edp.ECouponDrawPrizeID,ep.ECouponPrizeID, edp.Frequency,ed.ECouponDrawID from coc_ECouponDrawPrizes 
	   --edp join coc_ECouponPrizes ep on edp.ECouponPrizeID= ep.ECouponPrizeID 
	   --    left  outer join coc_ECouponDraw ed on ed.ECouponDrawID = edp.ECouponDrawID
	   --WHERE ep.ECouponID IN( SELECT ECouponid from coc_ECoupons ec  join coc_EServices es ON ec.EServiceID= es.EServiceID AND ES.CorporateID = @CorporateID)

	END
SET NOCOUNT OFF






GO
/****** Object:  StoredProcedure [dbo].[GetResultDeclaration_ALM]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetResultDeclaration_ALM]
	@CorporateID INTEGER,
	@LanguageID INTEGER
AS
SET NOCOUNT ON
	BEGIN
		DECLARE @EmailSubject [Remark]
		DECLARE @EmailBody [Remark]
		DECLARE @SMS [Remark]
		DECLARE @Counter INTEGER
		DECLARE @ResultTable AS TABLE
		(
			UniqueID INTEGER IDENTITY(1,1),
			ECouponID INTEGER,
			EServiceID INTEGER,
			ConsumerID INTEGER,
			ParticipationMobile [Mobile],
			ParticipationEmailID [Email],
			ConsumerName [NullName],
			CorporateID INTEGER,
			MembershipNumber [NullCode],
			EmailSubject NVARCHAR(1000),
			EmailBody NVARCHAR(1000),
			SMS NVARCHAR(1000),
			TypeID TINYINT
		)
		DECLARE @Winners AS TABLE
		(
			UniqueID INTEGER IDENTITY(1,1),
			EcouponID INTEGER,
			EServiceID INTEGER,
			DeclaredDate DATETIME,
			ECouponWinnerID INTEGER
		)
		
		DECLARE @WinnerList AS TABLE
		(
			ECouponID INTEGER,
			WinnerName NullName,
			PrizeType NullDescription,
			PrizeHeader NullDescription,
			PrizeDetail Remark,
			ImageFile NullDescription,
			EService Remark
		)
		SELECT TOP 1 @EmailSubject=GT.TemplateTitle,@EmailBody=GT.Template 
			FROM coc_GeneralNotificationTemplates GN(NOLOCK)
				INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID
		WHERE TemplateTypeID=141 AND EmailUsage=1 AND LanguageID=@LanguageID
		
		SELECT TOP 1 @SMS=GT.Template
			FROM coc_GeneralNotificationTemplates GN(NOLOCK)
				INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID
		WHERE TemplateTypeID=141 AND SMSUsage=1 AND LanguageID=@LanguageID

		SELECT ROW_NUMBER() OVER(ORDER BY EC.ECouponID)id,EC.ECouponID,EC.EServiceID,EG.EService [CompetitionName],EC.WinnerCount,EC.ResultDate,EC.EntryTypeID,EL.EnumValue 
			FROM coc_ECoupons EC(NOLOCK)
					INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID
					INNER JOIN coc_EServiceLanguages EG(NOLOCK) ON EC.EServiceID=EG.EServiceID AND EG.LanguageID=@LanguageID
					INNER JOIN coc_EnumValues EV(NOLOCK) ON EV.EnumValueID=EC.EntryTypeID  
					INNER JOIN coc_EnumValueLanguages EL(NOLOCK) ON EV.EnumValueID=EL.EnumValueID AND  EL.LanguageID=@LanguageID
		WHERE CONVERT(VARCHAR(12),EC.ResultDate,106) <=CONVERT(VARCHAR(12),GETDATE(),106) AND EC.ResulltDeclared=0 AND ES.CorporateID=@CorporateID

		INSERT INTO @ResultTable
		SELECT DISTINCT EC.ECouponID,EC.EServiceID,EP.ConsumerID,EP.ParticipationMobile,EP.ParticipationEmailID,CS.FirstName+' '+CS.SecondName+' '+CS.FamilyName ,ES.CorporateID,CS.MembershipNumber,
			@EmailSubject,@EmailBody,@SMS,2
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID
				INNER JOIN coc_Consumers CS(NOLOCK) ON EP.ConsumerID=CS.ConsumerID
		--WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0

		INSERT INTO @ResultTable
		SELECT DISTINCT EC.ECouponID,EC.EServiceID,EP.GuestParticipationID,EP.Mobile,NULL,EP.GuestName ,ES.CorporateID,NULL,
			@EmailSubject,@EmailBody,@SMS,1
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_Notifications NF(NOLOCK) ON ES.EServiceID=NF.EServiceID
				INNER JOIN coc_EServiceBarcodes EB(NOLOCK) ON EB.NotificationID=NF.NotificationID AND EB.CorporateID=@CorporateID AND EB.ConsumerID IS NULL
				INNER JOIN coc_GuestParticipations EP(NOLOCK) ON EB.AsignedMoile=EP.Mobile
		--WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0
		 
		 INSERT INTO @ResultTable
		 SELECT DISTINCT EC.ECouponID,EC.EServiceID,EI.AddUserID,EI.MobileNumber,EP.ParticipationEmailID,ED.InvoiceNumber,ES.CorporateID,EI.MobileNumber,
			@EmailSubject,@EmailBody,@SMS,0
			FROM coc_ECoupons EC(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID
				INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID
				INNER JOIN coc_ECouponInvoices EI(NOLOCK) ON EP.ECouponID=EI.ECouponID AND EI.ConsumerID IS NULL
				Inner JOIN  coc_ECouponInvoiceDetails ED(NOLOCK) ON EI.ECouponInvoiceID=ED.ECouponInvoiceID 

		SELECT * FROM @ResultTable

		--Tables[2] Winners
		SELECT ECouponPrizeID,EP.ECouponID,PrizeTypeID,PrizeHeader,PrizeDetail,EP.ImageFile,EV.EnumValue [Title],EC.EServiceID 
		FROM coc_ECouponPrizes EP(NOLOCK)
			INNER JOIN coc_ECoupons EC(NOLOCK) ON EP.ECouponID=EC.ECouponID
			INNER JOIN coc_EnumValueLanguages EV(NOLOCK) ON EP.PrizeTypeID=EV.EnumValueID AND LanguageID=@LanguageID

		INSERT INTO @Winners(ECouponWinnerID,ECouponID ,EServiceID,DeclaredDate)
		SELECT  DISTINCT TOP 3 EW.ECouponWinnerID,EC.ECouponID ,EC.EServiceID,EC.DeclaredDate
			FROM coc_ECouponWinners EW (NOLOCK) 
				INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponPrizeID=EW.ECouponPrizeID
				INNER JOIN coc_ECoupons EC(NOLOCK) ON EP.ECouponID=EC.ECouponID
			ORDER BY EW.ECouponWinnerID DESC 
		--Tables[3] WinnersList
		SELECT @Counter=MIN(ECouponWinnerID) FROM @Winners
		WHILE(@Counter IS NOT NULL)
		BEGIN
			INSERT INTO @WinnerList
				SELECT TOP 3 EC.ECouponID,CS.FirstName +' '+CS.SecondName [WinnerName],CP.EnumValue [PrizeType],EP.PrizeHeader,EP.PrizeDetail,CS.ImageFile ,SR.EService
					FROM @Winners EC 
						INNER JOIN coc_EServiceLanguages SR(NOLOCK) ON EC.EServiceID=SR.EServiceID AND SR.LanguageID=@LanguageID
						INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponID=EC.ECouponID
						INNER JOIN coc_ECouponWinners ES(NOLOCK) ON EP.ECouponPrizeID=ES.ECouponPrizeID
						INNER JOIN coc_Consumers CS(NOLOCK) ON ES.ConsumerID=CS.ConsumerID
						INNER JOIN coc_EnumValueLanguages CP(NOLOCK) ON EP.PrizeTypeID=CP.EnumValueID AND CP.LanguageID=@LanguageID
					WHERE EC.ECouponWinnerID=@Counter

			INSERT INTO @WinnerList
				SELECT TOP 3 EC.ECouponID,CS.GuestName [WinnerName],CP.EnumValue [PrizeType],EP.PrizeHeader,EP.PrizeDetail,'' ImageFile ,SR.EService 
					FROM @Winners EC 
						INNER JOIN coc_EServiceLanguages SR(NOLOCK) ON EC.EServiceID=SR.EServiceID AND SR.LanguageID=1
						INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponID=EC.ECouponID
						INNER JOIN coc_ECouponWinners ES(NOLOCK) ON EP.ECouponPrizeID=ES.ECouponPrizeID
						INNER JOIN coc_GuestParticipations CS(NOLOCK) ON ES.MobileNumber=CS.Mobile AND ES.ConsumerID IS NULL  
						INNER JOIN coc_EnumValueLanguages CP(NOLOCK) ON EP.PrizeTypeID=CP.EnumValueID AND CP.LanguageID=1
					WHERE EC.ECouponWinnerID=@Counter
			SELECT @Counter=MIN(ECouponWinnerID) FROM @Winners WHERE ECouponWinnerID>@Counter
		END
		SELECT TOP 3 * FROM @WinnerList ORDER BY ECouponID DESC 
	END
SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[GetRetailOutlet]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetRetailOutlet]
	@RedemptionPlanID INTEGER=NULL,
	@CorporateID INTEGER=NULL	
	 
AS
 SET NOCOUNT ON 
	BEGIN
	--Table[0]
	DECLARE @LanguageID INTEGER		
	SELECT @LanguageID=LanguageID FROM coc_Languages (NOLOCK) WHERE IsDefaultLanguage=1

	 SELECT ROW_NUMBER() OVER(ORDER BY RO.RetailOutletID)id, RO.RetailOutletID,RO.CorporateID,RL.RetailOutlet,RO.ContactPerson,CR.CRNumber
		FROM [coc_RetailOutlets]RO(NOLOCK) 
		INNER JOIN [coc_RetailOutletLanguages] RL(NOLOCK) ON RL.RetailOutletID=RO.RetailOutletID
		INNER JOIN coc_Corporates(NOLOCK) CR ON CR.CorporateID=RO.CorporateID 
		WHERE (@CorporateID IS NULL OR RO.CorporateID=@CorporateID) AND RL.LanguageID=@LanguageID AND RO.IsActive=1
	
	--Table[1]
	SELECT ROW_NUMBER() OVER(ORDER BY RO.RetailOutletID)id, RO.RetailOutletID,RO.CorporateID,RL.RetailOutlet,RO.ContactPerson,RO.IsActive
		FROM [coc_RedemptionPlans]RP(NOLOCK)
		INNER JOIN [coc_RedemptionLocations]LR (NOLOCK) ON LR.RedemptionPlanID=RP.RedemptionPlanID
		INNER JOIN  [coc_RetailOutlets]RO(NOLOCK) ON RO.RetailOutletID=LR.RetailOutletID
		LEFT JOIN [coc_RetailOutletLanguages] RL(NOLOCK) ON RL.RetailOutletID=RO.RetailOutletID 
		WHERE RP.RedemptionPlanID=@RedemptionPlanID AND RO.CorporateID=@CorporateID 
		
	END
 SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[GetRetailOutletBind]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetRetailOutletBind] 
	@CityID INTEGER =NULL,
	@LanguageID INTEGER
AS
SET NOCOUNT ON
	 

	--Table 1 [RetailOutlet]
	SELECT ROW_NUMBER() OVER(ORDER BY RO.RetailOutletID)[id] , RO.RetailOutletID,RO.Location,RL.RetailOutlet
		FROM coc_RetailOutlets RO(NOLOCK) 
			INNER JOIN coc_RetailOutletLanguages RL(NOLOCK) ON RL.RetailOutletID=RO.RetailOutletID AND RL.LanguageID=@LanguageID  
			WHERE (@CityID IS NULL OR RO.CityID=@CityID)
				AND (@LanguageID IS NULL OR RL.LanguageID=@LanguageID)  
SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[GetRetailOutletData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetRetailOutletData] 
	@City Description =NULL,
	@CRNumber Description =NULL
AS
	SET NOCOUNT ON
		SELECT City FROM  coc_CityLanguages --WHERE City= @City
		SELECT CRNumber FROM  coc_Corporates --WHERE CRNumber= @CRNumber
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[GetRetailOutletInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetRetailOutletInformation]
	@RetailOutletID INTEGER =NULL,
	@CorporateID INTEGER =NULL,
	@LanguageID INTEGER,
	@IsActive BIT=NULL
AS
SET NOCOUNT ON

	--Table 1 [RetailOutlet]
	SELECT RO.RetailOutletID,RL.RetailOutlet [Outlet], CR.CorporateID,CR.JCCICode,CR.CRNumber,ContactPerson,CR.Address1,Address2,CR.CountryID,CR.CityID,Longitude,Latitude,Location,
			RO.IsActive,RO.AddDate,RO.AddUserID,RO.EditDate,RO.EditUserID ,RO.LocationURL 
		FROM coc_RetailOutlets RO(NOLOCK)
			INNER JOIN coc_Corporates CR(NOLOCK) ON CR.CorporateID=RO.CorporateID 
			INNER JOIN coc_RetailOutletLanguages RL(NOLOCK) ON RL.RetailOutletID=RO.RetailOutletID AND RL.LanguageID=@LanguageID
			WHERE (@RetailOutletID IS NULL OR RO.RetailOutletID=@RetailOutletID)
				AND (@CorporateID IS NULL OR CR.CorporateID=@CorporateID)
				AND (@IsActive IS NULL OR RO.IsActive=@IsActive)
			 
	--Table 2[RetailOutletLanguage]
	SELECT RetailOutletID,LanguageID,RetailOutlet 
		FROM coc_RetailOutletLanguages RL(NOLOCK)
	WHERE (@RetailOutletID IS NULL OR RL.RetailOutletID=@RetailOutletID) 

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[GetRetailUploadData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetRetailUploadData]
	@XmlData XML
AS
	SET NOCOUNT ON
	DECLARE @CorporateUser AS TABLE 
	(
		id INTEGER IDENTITY(1,1),
		RetailOutlet [Name] NULL, 
		CorporateName [NullCode] NULL,
		ContactPerson [Description] NULL, 
		Address1 [Remark] NULL,
		Address2 [Remark] NULL,
		Country NVARCHAR(55) NULL,
		CountryID INTEGER NULL,
		City NVARCHAR(55) NULL,
		CityID INTEGER NULL,
		CorporateID INTEGER NULL,
		LocationURL [Description] NULL
	)

	INSERT INTO @CorporateUser(RetailOutlet,CorporateName,ContactPerson,Address1,Address2,Country,City,LocationURL)
		SELECT  
			CorporateUser.value('(OutletEnglish[1])', '[Name]'),
			CorporateUser.value('(CorporateName[1])', '[NullCode]'),
			CorporateUser.value('(ContactPerson[1])', '[Description]'),
			CorporateUser.value('(Address1[1])', '[Remark]'),
			CorporateUser.value('(Address2[1])', '[Remark]'),
			CorporateUser.value('(Country[1])', 'NVARCHAR(55)'),
			CorporateUser.value('(City[1])', 'NVARCHAR(55)'),
			CorporateUser.value('(LocationURL[1])', '[Description]')
		FROM @XmlData.nodes('/NewDataSet/Table1') AS Data(CorporateUser)

		UPDATE CU SET CU.CountryID = CL.CountryID FROM coc_CountryLanguages CL 
			INNER JOIN @CorporateUser CU ON CU.Country=Cl.Country

		UPDATE CU SET CU.CityID = CL.CityID FROM coc_CityLanguages CL 
			INNER JOIN @CorporateUser CU ON CU.City=Cl.City

		UPDATE CU SET CU.CorporateID = CL.CorporateID FROM coc_Corporates CL 
			INNER JOIN @CorporateUser CU ON CU.CorporateName=CL.CRNumber

		SELECT * FROM @CorporateUser

		SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[GetSalesNotificationInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetSalesNotificationInformation]
	@MessageTemplateID INTEGER=NULL ,
	@TemplateTitle [NullDescription]=NULL,
	@Template [Remark]=NULL,
	@LanguageID INTEGER=1
AS 
	BEGIN  
		SELECT MT.MessageTemplateID,MT.TemplateType,MT.IsActive,TL.Template,TL.TemplateTitle,TL.LanguageID
		FROM coc_MessageTemplates MT(NOLOCK) 
			INNER JOIN coc_MessageTemplateLanguages TL(NOLOCK) ON MT.MessageTemplateID=TL.MessageTemplateID
			WHERE (@MessageTemplateID IS NULL OR MT.MessageTemplateID=@MessageTemplateID) 
				AND (@TemplateTitle IS NULL OR TL.TemplateTitle=@TemplateTitle)
				AND (@Template IS NULL OR TL.Template=@Template)  
				AND (TemplateType=1)  
			ORDER BY LanguageID
	END
	 
GO
/****** Object:  StoredProcedure [dbo].[GetScopeList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetScopeList]  
@LanguageID int=1    
AS      
BEGIN      
   create table #ScopeData (ScopeID int,ScopeName nvarchar(50)) 
   if(@LanguageID=1) 
   begin
	   insert into #ScopeData   
	   select 0,'All'  
	   insert into #ScopeData   
	   select 1,'New'  
	   insert into #ScopeData   
	   select 2,'Best Seller'  
   end
   else
   begin
      insert into #ScopeData   
	   select 0,N'الكل'  
	   insert into #ScopeData   
	   select 1,N'الجديد'  
	   insert into #ScopeData   
	   select 2,N'الأكثر مبيعا'
   end
      
  select * from #ScopeData  
END 
GO
/****** Object:  StoredProcedure [dbo].[GetScreenDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[GetScreenDetails]  
 @ScreenID [NullCode]=NULL,  
 @LanguageID INTEGER =1 
AS  
 --Table 0 [Resources]  
  if(@LanguageID=0) set @LanguageID= 1;
 SELECT 0 ReferenceID,[ResourceKey] [Key],[ResourceValue] [Value]  
  FROM COC_Resources RC(NOLOCK)   
   INNER JOIN COC_Screens SR(NOLOCK) ON RC.ScreenID=SR.ScreenID  
  WHERE (@ScreenID IS NULL OR RC.ScreenID=@ScreenID) AND   
   [LanguageID]=@LanguageID  
  
 --Table 1 [Screens]  
 --SELECT ScreenXML FROM COC_Resources SR(NOLOCK)   
 -- WHERE (@ScreenID IS NULL OR SR.ScreenID=@ScreenID)   
  
 ----Table 2 [ScreensExtra]  
 --SELECT * FROM ScreensExtra SE(NOLOCK)   
 -- INNER JOIN Screens SR(NOLOCK) ON SE.ScreenID=SR.ScreenID  
 -- WHERE (@ScreenID IS NULL OR SE.ScreenID=@ScreenID)   
  
 --Table 3 [ScreenViewColumn]  
 SELECT SR.ScreenID,VC.ScreenViewColumnID ViewColumnID,VC.ScreenViewID ViewID,VC.ColumnName,VC.AliasName   
  FROM coc_ScreenViewColumns VC(NOLOCK)  
   INNER JOIN COC_ScreenViews SV(NOLOCK) ON VC.ScreenViewID=SV.ScreenViewID   
   INNER JOIN COC_Screens SR(NOLOCK) ON SR.ScreenID=SV.ScreenID  
  WHERE (@ScreenID IS NULL OR SR.ScreenID=@ScreenID)   
  
  
  
  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[GetScreenFields]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetScreenFields]
	@ScreenID INT
AS
SET NOCOUNT ON
	DECLARE @ProcedureName NVARCHAR(MAX)
	SELECT TOP 1 @ProcedureName=TableName FROM [coc_ScreenViews] (NOLOCK) WHERE ScreenID=@ScreenID
	EXEC @ProcedureName @CurrentPage=1,@TotalRecords=10 
SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[GetScreenResources]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetScreenResources]
	@Type INTEGER = NULL       
	AS
	BEGIN
	SET NOCOUNT ON
		IF(@Type=1)
		BEGIN
			SELECT ScreenID ID,ScreenName Name FROM coc_Screens(NOLOCK) 
				ORDER BY ScreenName  
		END
		ELSE IF(@Type=2)
		BEGIN
			SELECT EnumID ID,Enum Name FROM coc_Enums(NOLOCK)
		END
	END
	SET NOCOUNT OFF




GO
/****** Object:  StoredProcedure [dbo].[GetScreenView]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[GetScreenView]
	@ViewID INTEGER
AS
SET NOCOUNT ON
	DECLARE @Counter INTEGER
	DECLARE @Field NVARCHAR(50)
	DECLARE @ResourceEnglish [NullDescription]
	DECLARE @ResourceArabic [NullDescription]

	DECLARE @ScreenViewFields TABLE
	(
		ScreenViewFieldID INTEGER IDENTITY(1,1),
		[Field] NVARCHAR(50),
		ResourceEnglish [NullDescription],
		ResourceArabic [NullDescription]
	)

	INSERT INTO @ScreenViewFields([Field])
		SELECT ColumnName FROM [coc_ScreenViewColumns] (NOLOCK) WHERE ScreenViewID=@ViewID

	SELECT @Counter = MIN(ScreenViewFieldID) FROM @ScreenViewFields

	WHILE @Counter IS NOT NULL
	BEGIN
		SELECT @Field=[Field] FROM @ScreenViewFields WHERE ScreenViewFieldID=@Counter
		SELECT @ResourceEnglish=ResourceValue FROM [coc_Resources] (NOLOCK) WHERE ResourceKey=@Field AND ScreenViewID=@ViewID AND LanguageID=1
		SELECT @ResourceArabic=ResourceValue FROM [coc_Resources] (NOLOCK) WHERE ResourceKey=@Field AND ScreenViewID=@ViewID AND LanguageID=2

		UPDATE @ScreenViewFields 
			SET ResourceEnglish=@ResourceEnglish,
				ResourceArabic=@ResourceArabic
			WHERE ScreenViewFieldID=@Counter

		SELECT @Counter = MIN(ScreenViewFieldID) FROM @ScreenViewFields WHERE ScreenViewFieldID>@Counter
	END

	SELECT ScreenViewID,ViewName, IsSystem  FROM [coc_ScreenViews] (NOLOCK) WHERE ScreenViewID=@ViewID
	SELECT ScreenViewFieldID [id],[Field],ResourceEnglish,ResourceArabic FROM @ScreenViewFields

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[GetScreenViewHeader]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetScreenViewHeader]  
 @ViewID INTEGER,  
 @LanguageID INTEGER =1 
AS  
 SET NOCOUNT ON  
 if(@LanguageID=0) set @LanguageID= 1;
 --Table 0 [ViewHeader]  
  DECLARE @ResourceValue [NullDescription]  
  DECLARE @ColumnName [Description]  
  DECLARE @Counter INTEGER  
  DECLARE @ViewHeader TABLE  
  (  
   ViewHeaderID INTEGER IDENTITY(1,1),  
   ColumnName [Description],  
   AliasName [Description],  
   Value [NullDescription],  
   ProcedureName NVARCHAR(100)  
  )  
  
  INSERT INTO @ViewHeader(ColumnName,AliasName,Value,ProcedureName)  
   SELECT VC.ColumnName,VC.AliasName,RC.ResourceValue,SV.TableName  
    FROM [coc_ScreenViews] SV(NOLOCK)   
     INNER JOIN [coc_ScreenViewColumns] VC(NOLOCK) ON SV.ScreenViewID=VC.ScreenViewID    
     LEFT JOIN [coc_Resources] RC(NOLOCK) ON RC.ResourceKey = VC.ColumnName AND RC.ScreenViewID=SV.ScreenViewID   
    WHERE SV.ScreenViewID=@ViewID AND RC.LanguageID = 1 --AND ResourceID IS NULL  
     ORDER BY VC.ScreenViewColumnID  
  
  IF(@LanguageID>1)  
  BEGIN  
   SELECT @Counter=MIN(ViewHeaderID) FROM @ViewHeader  
  
   WHILE @Counter IS NOT NULL  
   BEGIN  
    SELECT @ColumnName=ColumnName FROM @ViewHeader WHERE ViewHeaderID=@Counter  
    SELECT @ResourceValue=ResourceValue FROM [coc_Resources] (NOLOCK) WHERE ResourceKey=@ColumnName AND ScreenViewID=@ViewID AND LanguageID=@LanguageID AND ResourceID IS NULL  
    IF(@ResourceValue IS NOT NULL)  
    BEGIN  
     UPDATE @ViewHeader SET Value=@ResourceValue WHERE ViewHeaderID=@Counter  
    END  
    SELECT @Counter=MIN(ViewHeaderID) FROM @ViewHeader WHERE ViewHeaderID>@Counter  
   END  
  END  
     
  SELECT ColumnName,AliasName,Value,ProcedureName FROM @ViewHeader  
 SET NOCOUNT OFF  
  
    
GO
/****** Object:  StoredProcedure [dbo].[GetServiceFailureEmail]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  Proc [dbo].[GetServiceFailureEmail]      
as      
begin      
declare @bodyMessage nvarchar(max);       
   
  if Exists( select Id,DATEDIFF(hour,ExecuteDate, getdate()) from coc_ServiceTask (NOLOCK) where IsFailureNotificationAlreadySend<>1 and DATEDIFF(hour,ExecuteDate, getdate())>=1 and Status=1 OR Result=NULL)   begin     set @bodyMessage=N'<html><head></head><body><h4> during barcode generation  some services got not executed please check </h4><br>This Email is auto generated from <a href="http://e-copon.com">e-copon.com</a><br>Thank You</body></html>';        
  exec msdb.dbo.sp_send_dbmail        
   @profile_name = 'Email',            
    @recipients = 'shamim@logicsystems-me.com',          
  @copy_recipients='shiva@logicsystems-me.com;shivams.1987@gmail.com;rafeeq3030@gmail.com;rafeeq@logicsystems-me.com',       
  @subject = N'Service Tasks are not executed',        
  @body  = @bodyMessage,       
     @body_format='HTML'         
  end   else if Exists( select Id,DATEDIFF(hour,ExecuteDate, getdate()) from coc_ServiceTask (NOLOCK)  where IsFailureNotificationAlreadySend<>1 and  DATEDIFF(hour,ExecuteDate, getdate())>=24 and Status=3 OR Result=NULL)   
  begin   set @bodyMessage=N'<html><head></head><body><h  4> during barcode generation  some services got not executed please check </h4><br>This Email is auto generated from <a href="http://e-copon.com">e-copon.com</a><br>Thank You</body></html>';        
 
  exec msdb.dbo.sp_send_dbmail        
 @profile_name = 'Email',            
 @recipients = 'shamim@logicsystems-me.com',          
 @copy_recipients='shiva@logicsystems-me.com;shivams.1987@gmail.com;rafeeq3030@gmail.com;rafeeq@logicsystems-me.com',       
 @subject = N'Service Tasks are not executed',        
 @body  = @bodyMessage,       
     @body_format='HTML' 
  end    
  else if Exists( select Id,DATEDIFF(hour,ExecuteDate, getdate()) from coc_ServiceTask (NOLOCK)  where IsFailureNotificationAlreadySend<>1 and  DATEDIFF(hour,ExecuteDate, getdate())>=24 and  Result <>'Success')    
   begin    
    
 set @bodyMessage=N'<html><head></head><body><h4> during barcode generation  some services got not executed please check </h4><br>This Email is auto generated from <a href="http://e-copon.com">e-copon.com</a><br>Thank You</body></html>';        
  exec msdb.dbo.sp_send_dbmail        
   @profile_name = 'Email',            
   @recipients = 'shamim@logicsystems-me.com',          
  @copy_recipients='shiva@logicsystems-me.com;shivams.1987@gmail.com;rafeeq3030@gmail.com;rafeeq@logicsystems-me.com',       
  @subject = N'Service Tasks are not executed',        
  @body  = @bodyMessage,       
     @body_format='HTML'      
     
   end  
end 
GO
/****** Object:  StoredProcedure [dbo].[GetServiceInvoiceInfo]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[GetServiceInvoiceInfo]
	@EServiceID INTEGER=NULL,
	@PaymentTypeID INTEGER=NULL,
	@LanguageID INTEGER
AS
	SET NOCOUNT ON
		BEGIN
		IF(@EServiceID IS NULL AND @PaymentTypeID>0)
		BEGIN
			SELECT ROW_NUMBER() OVER (ORDER BY EI.EServiceID )id, EI.EServiceInvoiceID,EI.InvoiceNumber,EI.EServiceInvoiceID,EI.InvoiceDate,EI.PackageAmount,EI.PaymentTypeID,
			EL.EService Name
				 FROM coc_EServiceInvoices(NOLOCK) EI
					  LEFT JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID=EI.EServiceID
					  LEFT JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
			WHERE (@EServiceID IS NULL OR EI.EServiceID =@EServiceID)AND
				  (@PaymentTypeID IS NULL OR EI.PaymentTypeID=@PaymentTypeID)
		END
		ELSE IF(@EServiceID IS NOT NULL AND @PaymentTypeID IS NULL)
			 BEGIN
				SELECT ROW_NUMBER() OVER (ORDER BY EI.EServiceID )id,EI.EServiceInvoiceID,EI.InvoiceNumber,EI.EServiceInvoiceID,EI.InvoiceDate,EI.PackageAmount,ES.ServiceNumber,EI.PaymentTypeID,
					   EL.EService PromotionName 
					FROM coc_EServiceInvoices(NOLOCK) EI
						INNER JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID=EI.EServiceID
						INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
				WHERE EI.EServiceID=@EServiceID
			 END
		END
	SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[GetServicesToSentByCorporate]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	Arya
-- Create date	:	16-12-2017
-- Description	:	get evouchers by corporateid for EcouponVouchers
-- updated on	:	28-12-2017 [change evoucher to eservice for Addon]
-- =============================================

CREATE PROCEDURE [dbo].[GetServicesToSentByCorporate]
	@corporateId INTEGER,
	@LanguageId INTEGER
AS
	BEGIN
		SET NOCOUNT ON;
		SELECT	es.EServiceID,
				el.EService+'-'+es.ServiceNumber [EService],
				crs.CorporateID,
				crs.CorporateName
		FROM	coc_EServices es (NOLOCK)
		INNER JOIN	coc_EServiceLanguages el (NOLOCK) ON es.EServiceID=el.EServiceID AND el.LanguageID=@LanguageId
		INNER JOIN	coc_Corporates crs (NOLOCK) ON crs.CorporateID=es.CorporateID
		WHERE	crs.CorporateID=@corporateId AND 
				es.IsPaymentDone=1 AND
				es.IsActive=1
				--AND ServiceTypeID = 52 AND ServiceSubTypeID = 63
	END
GO
/****** Object:  StoredProcedure [dbo].[GetServiceTaskNotificationBind]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetServiceTaskNotificationBind]
	@ServiceTaskId int=NULL,
	@LanguageID INTEGER=1 
AS
	BEGIN

	/*SELECT GN.GeneralNotificationTemplateID,GL.TemplateTitle 
		FROM [coc_GeneralNotificationTemplates] GN(NOLOCK) 
			INNER JOIN coc_GeneralNotificationTemplateLanguages GL(NOLOCK) ON GN.GeneralNotificationTemplateID=GL.GeneralNotificationTemplateID
			WHERE GN.TemplateTypeID=@TemplateTypeID AND 
				(@EmailUsage IS NULL OR GN.EmailUsage=@EmailUsage) AND 
				(@SMSUsage IS NULL OR GN.SMSUsage=@SMSUsage) AND 
				(@NotificatonUsage IS NULL OR GN.NotificatonUsage=@NotificatonUsage) AND
				GL.LanguageID=@LanguageID AND GN.IsActive=1;*/
        
  select stn.Id, stn.ServiceTaskId, stn.UserId, stn.[Message], stn.Status, stn.RowStatus, st.[Date], u.FullName FROM coc_ServiceTaskNotification stn (NOLOCK)
  inner join coc_ServiceTask st (NOLOCK) on st.Id = stn.ServiceTaskId
  inner join coc_Users u (NOLOCK) on u.UserID = stn.UserId
  where (@ServiceTaskId is null or stn.ServiceTaskId = @ServiceTaskId);
	END
GO
/****** Object:  StoredProcedure [dbo].[GetServiceTaskNotificationInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetServiceTaskNotificationInformation] 
	@CurrentPage INTEGER=1,
	@PageSize INTEGER=0,
	@LanguageID  INTEGER=1,
	@ServiceTaskId INTEGER=NULL,
	@Message NVARCHAR(MAX)=NULL,
	@Result NVARCHAR(MAX)=NULL,
	@Date DATETIME =NULL,
	@UserID INTEGER=0,
	@TotalRecords INTEGER OUTPUT
	
AS 
	BEGIN 

	SELECT @TotalRecords=count(*)    
	FROM coc_ServiceTaskNotification stn (NOLOCK)
    left join coc_ServiceTask st (NOLOCK) on st.Id = stn.ServiceTaskId
    left join coc_Users u (NOLOCK) on u.UserID = stn.UserId
    WHERE (@ServiceTaskId is null or stn.ServiceTaskId = @ServiceTaskId) AND
		    stn.LanguageId=@LanguageID
			and ServiceTaskId <> 6
			and u.UserID = @UserID



   DECLARE @FirstRecord INTEGER
   DECLARE @LastRecord INTEGER
   SET @FirstRecord = (@CurrentPage - 1) * @PageSize
   SET @LastRecord = (@CurrentPage * @PageSize + 1)
   if(@PageSize = 0)
   begin
	set @LastRecord = @TotalRecords
   end
   SET @TotalRecords = 0;	

   ;WITH Tnotification AS
   (   
		SELECT  stn.Id as UniqueId, stn.ServiceTaskId,stn.Result, stn.UserId, stn.[Message], stn.Status, stn.RowStatus,
		case 
			when st.[Date] is null 
				then stn.[Date] 
				else st.[Date] 
		END AS [Date] , 
		ROW_NUMBER() OVER
	   (ORDER BY stn.Id desc) AS Rowc
		FROM coc_ServiceTaskNotification stn (NOLOCK)
		left join coc_ServiceTask st (NOLOCK) on st.Id = stn.ServiceTaskId
		left join coc_Users u (NOLOCK) on u.UserID = stn.UserId
		
		WHERE (@ServiceTaskId is null or stn.ServiceTaskId = @ServiceTaskId) AND stn.LanguageId=@LanguageID AND
		(@Message IS NULL OR Message LIKE +'%'+@Message+'%') AND
		(@Result IS NULL OR stn.Result LIKE +'%'+@Result+'%') AND
		(@Date IS NULL OR stn.Date =@Date)
		AND stn.RowStatus=1
		AND ServiceTaskId <> 6
		and u.UserID = @UserID

	)

 SELECT  UniqueId, 
         ServiceTaskId, 
		 Result,
         UserId, 
         [Message],		 
   Status,
   RowStatus,
   [Date],   
   Rowc
  
FROM Tnotification

WHERE Rowc BETWEEN @FirstRecord AND @LastRecord


 

 --SELECT @TotalRecords= COUNT(*) FROM Tnotification


END
GO
/****** Object:  StoredProcedure [dbo].[GetServiceTasks]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetServiceTasks]     
 @Status INT =NULL,    
 @RowStatus INT = 1,    
 @ExecuteDate DATETIME=NULL    
AS    
SET NOCOUNT ON    
    
 IF(@Status IS NOT NULL )    
 BEGIN    
  SELECT Id, TaskTypeId,UniqueId, [Date], [Parameters], UserID, ExecuteDate, [Status] ,[ExecutionStatus], [Result],[TaskData],IsNull(ErrorMsgEmailSend,0) ErrorMsgEmailSend FROM coc_ServiceTask (NOLOCK)    
  where RowStatus=@RowStatus AND ((isnull(IsRecurring,'False') = 'True' and ExecutionStatus = 1) or [Status]=@Status) --AND [ExecuteDate] < @ExecuteDate    
       
  END    
 ELSE    
 BEGIN    
  SELECT Id, TaskTypeId,UniqueId, [Date], [Parameters], UserID, [Status] ,[ExecutionStatus], [Result] ,[TaskData],IsNull(ErrorMsgEmailSend,0) ErrorMsgEmailSend FROM coc_ServiceTask    (NOLOCK) 
  where RowStatus=@RowStatus --AND [ExecuteDate] = @ExecuteDate    
 END    
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[GetSMSSettingsInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetSMSSettingsInformation]
	@SystemSetupID INTEGER=NULL 
AS  
BEGIN
SET NOCOUNT ON 
	SELECT SystemSetupID,SetupKey,SetupValue,GeneralNotificationTemplateID 
		FROM COC_SystemSetups(NOLOCK) 
			WHERE SystemSetupID IN (301,302,303)
	ORDER BY SystemSetupID
SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[GetSurveyParticipation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	Arya
-- Create date	:	13-1-2017
-- Description	:	Get Survey Participation Details for Report
-- =============================================

CREATE PROCEDURE [dbo].[GetSurveyParticipation]
@LanguageID INTEGER = 1,
@FromDate	DATETIME = NULL,
@ToDate		DATETIME = NULL
AS
BEGIN
	SELECT		Q.Question,
				A.QuestionOption, 
				EPA.AnswerRank, 
				C.FirstName + ' ' + C.SecondName AS ConsumerName, 
				C.MembershipNumber,
				CONVERT(varchar, EP.ParticipationDate, 101) AS ParticipationDate, 
				EP.ConsumerID, 
				C.EmailID,				
				EP.ParticipationMobile ,
				EP.ECouponParticipationID,
				EP.Barcode,
				Q.QuestionBankID,
				A.QuestionOptionID,
				CASE C.Gender 
					WHEN 1 THEN 'Male'  
					ELSE 'Female' 
				END AS Gender 
	FROM		[dbo].[coc_ECouponParticipationAnswers] EPA (NOLOCK)
	INNER JOIN	[dbo].[coc_ECouponParticipations] EP (NOLOCK) ON EP.ECouponParticipationID = EPA.ECouponParticipationID
	INNER JOIN	coc_QuestionLanguages Q (NOLOCK) ON Q.QuestionBankID = EPA.QuestionBankID and Q.LanguageID = @LanguageID
	INNER JOIN	coc_QuestionOptionLanguages A (NOLOCK) ON A.QuestionOptionID = EPA.QuestionOptionID and A.LanguageID = @LanguageID
	INNER JOIN	coc_Consumers C (NOLOCK) ON C.ConsumerID = EP.ConsumerID
	WHERE		(@FromDate IS NULL OR (EP.ParticipationDate >=@FromDate AND EP.ParticipationDate <=@ToDate))
	ORDER BY	EP.ECouponParticipationID DESC, Q.QuestionBankID , A.QuestionOptionID
END
GO
/****** Object:  StoredProcedure [dbo].[GetSurveyReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[GetSurveyReport]
	@LanguageID INTEGER=1,
	@FromDate	DATETIME = NULL,
	@ToDate		DATETIME = NULL,
	@EserviceId	INTEGER=NULL
AS
BEGIN
	SELECT 
		isnuLL(Q.ShortQuestion, Q.Question) as Question, 
		A.QuestionOption As Answer, 
		case when ISNULL(EPA.AnswerRank,0) = 0 then 0 else EPA.AnswerRank end as AnswerRank, 
		c.FirstName + ' ' + C.SecondName + ' ' + C.FamilyName as ConsumerName, 
		C.EmailID,
		CASE C.Gender 
			WHEN 1 THEN 'Male'  
			ELSE 'Female' 
		END AS Gender, 
		
		EP.ParticipationDate, -- EP.ConsumerID,
		EP.ParticipationMobile, 
		EC.ECouponID, 
		EC.EServiceID, 
		ESL.Eservice as CompetitionName,
		EP.ECouponParticipationID as ParticipationID,
		convert(varchar,EP.ParticipationDate, 103) as FormattedParticipationDate


	FROM [dbo].[coc_ECouponParticipationAnswers] EPA (NOLOCK)

	Inner join [dbo].[coc_ECouponParticipations] EP (NOLOCK) On EP.ECouponParticipationID = EPA.ECouponParticipationID

	inner join coc_QuestionLanguages Q (NOLOCK) ON Q.QuestionBankID = EPA.QuestionBankID and Q.LanguageID = @LanguageID

	inner join coc_QuestionOptionLanguages A (NOLOCK) ON A.QuestionOptionID = EPA.QuestionOptionID and A.LanguageID = @LanguageID

	inner join coc_Consumers C (NOLOCK) On C.ConsumerID = EP.ConsumerID

	inner join coc_ECoupons EC (NOLOCK) ON EC.ECouponID = EP.ECouponID

	inner join coc_EServiceLanguages ESL (NOLOCK) ON ESL.EServiceID= EC.EServiceID and ESL.LanguageID= @LanguageID

	where len(C.PrimaryMobile) = 14 
	AND (@FromDate IS NULL OR (CONVERT(date, ep.ParticipationDate)  between @FromDate and @ToDate)) 
	--AND (@FromDate IS NULL OR (EP.ParticipationDate >=@FromDate AND EP.ParticipationDate <=@ToDate)) 
	AND (@EserviceId IS NULL OR EC.EServiceID=@EserviceId)

	order by EP.ECouponParticipationID desc, Q.QuestionBankID desc , A.QuestionOptionID desc
END
GO
/****** Object:  StoredProcedure [dbo].[GetSystemSetting]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetSystemSetting]
	@UserID INTEGER
AS    
	SET NOCOUNT ON    

	DECLARE @Resources TABLE
	(
		Sno INTEGER IDENTITY(1,1),
		ResourceID INTEGER,
		ScreenID INTEGER,
		ResourceKey [NullDescription],
		ResourceText [NullDescription],
		ResourceValue [NullDescription],
		ArabicResourceValue [NullDescription],
		UrduResourceValue [NullDescription],
		GridResourceID INTEGER,
		ArabicResourceID INTEGER,
		UrduResourceID INTEGER
	)

	--Table 0 [SystemSeating] 
	SELECT SystemSetupID,SetupKey,SetupValue
		FROM [COC_SystemSetups] (NOLOCK)
		ORDER BY SystemSetupID 
	
	--Table 1 [Resources]
	INSERT INTO @Resources(ResourceID,ScreenID,ResourceKey,ResourceText,ResourceValue)
		SELECT  RE.ResourceID,RE.ScreenID, CASE WHEN RE.ResourceKey IS NULL THEN MR.ResourceKey ELSE RE.ResourceKey END ResourceKey,ResourceText,CASE WHEN RE.ResourceValue IS NULL THEN MR.ResourceValue ELSE RE.ResourceValue END ResourceValue
			FROM [COC_Resources] RE(NOLOCK)
				LEFT JOIN [COC_MasterResources] MR(NOLOCK) ON RE.MasterResourceID=MR.MasterResourceID AND RE.ScreenID=MR.ScreenID
			WHERE RE.ScreenID = 1001 AND
				RE.LanguageID=1 AND 
				RE.ScreenViewID IS NULL AND
				RE.GridResourceID IS NULL 

		UPDATE RS
			SET RS.ArabicResourceValue = AR.ResourceValue,RS.ArabicResourceID = AR.ResourceID
			FROM [COC_Resources] AR(NOLOCK)
				LEFT JOIN @Resources RS ON RS.ResourceKey = AR.[ResourceKey] AND  RS.ScreenID = AR.ScreenID  
			WHERE AR.ScreenID = 1001 AND 
				AR.LanguageID=2 AND 
				AR.ScreenViewID IS NULL AND
				AR.GridResourceID IS NULL 

		UPDATE RS
			SET RS.UrduResourceValue = UR.ResourceValue,RS.UrduResourceID = UR.ResourceID
			FROM [COC_Resources] UR(NOLOCK)
				LEFT JOIN @Resources RS ON RS.ResourceKey = UR.[ResourceKey] AND  RS.ScreenID = UR.ScreenID  
			WHERE UR.ScreenID = 1001 AND 
				UR.LanguageID=3 AND 
				UR.ScreenViewID IS NULL AND
				UR.GridResourceID IS NULL

	--Table 2 [CommonResources]
	SELECT Sno,Sno [id],ResourceID,ScreenID,ResourceKey,ResourceText,ResourceValue,ArabicResourceValue,UrduResourceValue,GridResourceID,ArabicResourceID,UrduResourceID
		FROM @Resources
		ORDER BY ScreenID

	--Table 3 [Permissions]
	SELECT ME.MenuCode [ScreenID]
		FROM [COC_Menus] ME(NOLOCK)
			INNER JOIN [COC_RoleMenuAccess] RA(NOLOCK) ON RA.MenuID=ME.MenuID
			INNER JOIN [COC_Users] UR(NOLOCK) ON RA.RoleID=UR.RoleID
		WHERE UR.UserID=@UserID

	--Tables 4 [Languages]
	SELECT LanguageID,[Language],CssFilePath,IsActive 
		FROM coc_Languages(NOLOCK) WHERE IsActive=1

	SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[GetTermsAndConditions]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetTermsAndConditions] 
@ECouponID INTEGER 

AS 
  BEGIN 
      SELECT E.ECouponID, 
             replace(EL.UsesTerm ,'a href="www', 'a href="http://www')     AS TermsEng, 
             replace(ECL.UsesTerm ,'a href="www', 'a href="http://www')   AS TermsAr
      FROM   coc_ECoupons E (NOLOCK)
             INNER JOIN coc_ECouponLanguages EL (NOLOCK)
                     ON EL.ECouponID = E.ECouponID 
                        AND EL.LanguageID = 1 
             INNER JOIN coc_ECouponLanguages ECL (NOLOCK)
                     ON ECL.ECouponID = E.ECouponID 
                        AND ECL.LanguageID = 2 
      WHERE  E.ECouponID = @ECouponID 

  END
GO
/****** Object:  StoredProcedure [dbo].[GetTermsInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetTermsInformation]
(
	@TermID INTEGER=NULL
)
AS
 SET NOCOUNT ON
	SELECT TermID,Term FROM coc_Terms (NOLOCK)
		WHERE (@TermID IS NULL OR TermID = @TermID)
 SET NOCOUNT OFF


  
GO
/****** Object:  StoredProcedure [dbo].[GetTicketConfigurationInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  CREATE PROCEDURE [dbo].[GetTicketConfigurationInformation]  
	@TicketID INTEGER=NULL,
	@UserID INTEGER
AS
	SET NOCOUNT ON
		BEGIN
			SELECT TC.EServiceEventID,TC.EServiceID,TC.EventDescription,TC.EventTypeID,FORMAT(TC.EventDate,'dd/MM/yyyy')EventDate,FORMAT(TC.LastDate,'dd/MM/yyyy')LastDate,
				   FORMAT(TC.PurchaseStartDate,'dd/MM/yyyy')PurchaseStartDate,FORMAT(TC.PurchaseEndDate,'dd/MM/yyyy')PurchaseEndDate,FORMAT(TC.EventCost,'N2') EventCost,TC.IsActive,TC.TicketDescription,EV.BaseValue,CS.MembershipNumber
				   ,EL.EService,TC.EventDescription [ECouponTemplate],TC.DisplayImage
				FROM coc_EServiceEvents(NOLOCK) TC
					INNER JOIN coc_EnumValues EV (NOLOCK) ON EV.EnumValueID=TC.EventTypeID
					INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON TC.EServiceID=EL.EServiceID AND LanguageID=1
					LEFT JOIN coc_Consumers CS (NOLOCK) ON CS.UserID=@UserID --MembershipNumber
			WHERE (@TicketID IS NULL OR TC.EServiceEventID=@TicketID) 

			SELECT TC.RetailOutletID,TC.EServiceEventID,TC.EServiceEventOutletID 
				FROM coc_EServiceEventOutlets(NOLOCK) TC 
			WHERE (@TicketID IS NULL OR EServiceEventID=@TicketID)
		END
	SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[GetTicketNotificationInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetTicketNotificationInformation]
	@MessageTemplateID INTEGER=NULL ,
	@TemplateTitle [NullDescription]=NULL,
	@Template [Remark]=NULL,
	@TemplateType INTEGER=3,
	@LanguageID INTEGER=NULL
AS 
	BEGIN  
		IF(@LanguageID=0)
			SET @LanguageID = NULL
		SELECT MT.MessageTemplateID,MT.TemplateType,MT.IsActive,TL.Template,TL.TemplateTitle,TL.LanguageID
		FROM coc_MessageTemplates MT(NOLOCK) 
			INNER JOIN coc_MessageTemplateLanguages TL(NOLOCK) ON MT.MessageTemplateID=TL.MessageTemplateID --AND TL.LanguageID=@LanguageID
			WHERE (@MessageTemplateID IS NULL OR MT.MessageTemplateID=@MessageTemplateID) 
				AND (@TemplateTitle IS NULL OR TL.TemplateTitle=@TemplateTitle)
				AND (@Template IS NULL OR TL.Template=@Template) 
				AND (@LanguageID IS NULL OR TL.LanguageID=@LanguageID) 
				AND (TemplateType=@TemplateType)  
			ORDER BY LanguageID
	END






GO
/****** Object:  StoredProcedure [dbo].[GetTicketTemplateInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetTicketTemplateInformation]
	@EserviceID INTEGER=NULL,
	@TicketTemplateID INTEGER=NULL
AS
	BEGIN
		SELECT TT.TicketTemplateID,TT.TemplateName,TT.TicketDescription,TT.IsActive 
			FROM coc_TicketTemplates(NOLOCK) TT 
		WHERE (@TicketTemplateID IS NULL OR TT.TicketTemplateID=@TicketTemplateID)--(@EserviceID IS NULL OR TT.EServiceID=@EserviceID) AND 
	END

GO
/****** Object:  StoredProcedure [dbo].[GetUserInfo]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[GetUserInfo]       
@LanguageID int=1,                
@Mobile nvarchar(100)=null,                
@EmailID nvarchar(100)=null,  
@SearchActive nvarchar(100)=null  
  As             
Begin           
Select               
  C.FirstName,C.SecondName,C.FamilyName,C.AddDate, U.DeletedDate,     
  (ISNULL(c.FirstName,'')+' '+ISNULL(c.SecondName,'')+' '+ISNULL(c.familyname,''))as FullName,            
  C.Gender , C.BirthDate,convert(nvarchar,  C.BirthDate, 23) as    BirthDateInString,    C.PrimaryMobile as ConsumerPrimaryMobile,            
  C.SecondaryMobile as ConsumerSecondaryMobile,    C.EmailID as ConsumerEmailID,            
  (select CL.City from coc_CityLanguages(NoLock) CL where CL.CityID=C.CityID AND CL.LanguageID=@LanguageID) City,            
  (select CTL.Country from coc_CountryLanguages(NoLock) CTL where CTL.CountryID=C.CountryID AND CTL.LanguageID=@LanguageID) Country  ,            
  (select  NL.Nationality from coc_NationalityLanguages(NoLock) NL  where NL.NationalityID=C.NationalityID AND NL.LanguageID=@LanguageID) Nationality ,             
  C.IsVerified as IsConsumerVerified,    C.IsActive as IsConsumerActive,     C.IsDeleted as IsConsumerDeleted,                
  (Case  when   C.IsVerified=1 then 'True' else 'False' end) IsConsumerVerifiedYesNo ,             
  C.ConsumerID,C.AddDate, C.IqamaNumber, ISNULL(c.IsFromCompetitionLink,''),          
   c.IsYahooUser,   C.IsFacebookUser, C.IsGmailUser, C.IsOutlookUser,C.JobNumber, C.AcceptedTerms,C.IsTwitterUser,                
    C.NationalityID,C.CityID,C.CountryID,C.NotificationCount,C.OtpID,C.OutlookID,C.TwitterID,            
   C.YahooID , C.GmailID, C.VerificationDate, DATEDIFF(hour, C.BirthDate,GETDATE())/8766 AS Age,                
 C.MembershipNumber, isnull(U.UserID,0) UserID, isnull(U.UserName,'') UserName, isnull(U.EmailID,'') as UserEmailID,isnull(U.MobileNumber,'') as UserMobileNumber,                
    isnull(U.Password,'') Password, isnull(U.RoleID,'') RoleID,isnull(C.IsActive, U.isactive) isactive,isnull(U.IsDeleted, c.isdeleted) isdeleted,                
    (Case  when U.IsActive=1 and C.IsActive=1 then 'True' else 'False' end) IsActiveYesNo ,                
    (Case  when U.IsDeleted=1 and C.IsDeleted=1 then 'True' else 'False' end) IsDeletedYesNo,               
 --(Case when C.IsFacebookUser=0 and C.IsGmailUser=0 and C.IsOutlookUser=0 and C.IsTwitterUser=0 then 1 else 0 end)IsNormal,            
 (select ESL.EService from coc_EServiceLanguages ESL (NOLOCK) where ESL.LanguageID=@LanguageID and ESL.EServiceID=(select EC.EServiceID from coc_ECoupons EC (NOLOCK) where EC.ECouponID=C.ECouponID) )as CompetitionName,            
 (Case  when C.IsFromCompetitionLink=1 then 'True' else 'False' end) IsFromCompetitionLink ,            
 C.ECouponID   ,
 c.Gender         
    from coc_Users(NoLock) U                
right join coc_Consumers(NoLock) C on U.UserID=C.UserID                
where ((@EmailID IS NULL OR U.EmailID like '%'+ @EmailID + '%') or              
  (@EmailID IS NULL OR C.EmailID like '%'+ @EmailID + '%'))              
 AND              
   ((@Mobile IS NULL OR U.MobileNumber=@Mobile) or              
   (@Mobile IS NULL OR C.PrimaryMobile=@Mobile) )      
   AND   
      ((@SearchActive IS NULL OR U.IsActive=@SearchActive) or              
   (@SearchActive IS NULL OR C.IsActive=@SearchActive) )       
   ENd
GO
/****** Object:  StoredProcedure [dbo].[GetUserInfoParticipation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[GetUserInfoParticipation] @LanguageID int       =1    
,                                   @Mobile nvarchar(100) =NULL    
,                                   @EmailID nvarchar(100)=null    
As    
Begin    
declare @ConsumerID INT, @DeletedDate datetime, @FullName nvarchar(100), @cust_email varchar(100), @cust_mobile varchar(20)

select @ConsumerID= ConsumerID, @FullName = FullName, @cust_email= EmailID, @cust_mobile = PrimaryMobile
	from coc_Consumers C WITH(NOLOCK) where (@EmailID IS NULL OR C.EmailID=@EmailID)    
  AND (@Mobile IS NULL OR C.PrimaryMobile=@Mobile)

 select Ep.ParticipationDate                                                                                          
 ,      ESL.EService as CompetitionName    
 ,    (case when ep.ConsumerName is null then  isnull(@FullName,'') else ep.ConsumerName end)as [ConsumerName]    
 ,      Ep.Barcode                                                                                                    
 ,    (case when ep.ParticipationEmailID  is null then   @cust_email else ep.ParticipationEmailID end) as EmailID                                                                                                
 ,      EP.Remarks                                                                                                     
 ,      @DeletedDate DeletedDate                                                                                                 
 ,    (Case when ep.ParticipationMobile is null then  @cust_mobile else ep.ParticipationMobile  end) as MobileNumber                                                                                               
 from      coc_ECouponParticipations Ep   (NOLOCK) 
 inner join coc_ECoupons              EC  (NOLOCK) on EC.ECouponID=Ep.ECouponID    
 inner join coc_EServiceLanguages     ESL (NOLOCK) on ESL.LanguageID=1 and ESL.EServiceID=EC.EServiceID    
 --left join coc_Consumers             C (NOLOCK)  on C.ConsumerID=Ep.ConsumerID    
 --left join coc_Users                 U  (NOLOCK)  on U.UserID=C.UserID    
 --where (@EmailID IS NULL OR C.EmailID=@EmailID)    
 -- AND (@Mobile IS NULL OR C.PrimaryMobile=@Mobile)
 where ep.ConsumerID = @ConsumerID
  ORDER BY Ep.ParticipationDate DESC
END 
GO
/****** Object:  StoredProcedure [dbo].[GetUserInfoParticipation_02Aug2021_Bckup]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[GetUserInfoParticipation_02Aug2021_Bckup] @LanguageID int       =1    
,                                   @Mobile nvarchar(100) =NULL    
,                                   @EmailID nvarchar(100)=null    
As    
Begin    
 select Ep.ParticipationDate                                                                                          
 ,      ESL.EService                                                                                               as CompetitionName    
 ,    (case when ep.ConsumerName is null then  concat(isnull(c.FirstName,'')+' ', isnull(CONCAT(isnull(c.SecondName,'')+' ',isnull(c.FamilyName,'')),'')) else ep.ConsumerName end)as [ConsumerName]    
 ,      Ep.Barcode                                                                                                    
 ,    (case when ep.ParticipationEmailID  is null then   U.EmailID else ep.ParticipationEmailID end) as EmailID                                                                                                
 ,      EP.Remarks                                                                                                     
 ,      U.DeletedDate                                                                                                 
 ,    (Case when ep.ParticipationMobile is null then  U.MobileNumber else ep.ParticipationMobile  end) as MobileNumber                                                                                               
 from      coc_ECouponParticipations Ep   (NOLOCK)  
 left join coc_Consumers             C (NOLOCK)  on C.ConsumerID=Ep.ConsumerID    
 left join coc_Users                 U  (NOLOCK)  on U.UserID=C.UserID    
 inner join coc_ECoupons              EC  (NOLOCK) on EC.ECouponID=Ep.ECouponID    
 left join coc_EServiceLanguages     ESL (NOLOCK) on ESL.LanguageID=1 and ESL.EServiceID=EC.EServiceID    
    
 where ((@EmailID IS NULL OR U.EmailID=@EmailID) or (@EmailID IS NULL OR C.EmailID=@EmailID))    
  AND ((@Mobile IS NULL OR U.MobileNumber=@Mobile) or (@Mobile IS NULL OR C.PrimaryMobile=@Mobile) or (@Mobile IS NULL OR ep.ParticipationMobile=@Mobile) )    
END 
GO
/****** Object:  StoredProcedure [dbo].[GetUserInfoParticipation_08Aug2021_Bckup]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[GetUserInfoParticipation_08Aug2021_Bckup] @LanguageID int       =1    
,                                   @Mobile nvarchar(100) =NULL    
,                                   @EmailID nvarchar(100)=null    
As    
Begin    
Declare @UserInfo TABLE (ConsumerID bigint, ConsumerName NVARCHAR(MAX), EmailID NVARCHAR(MAX), DeletedDate DATETIME, MobileNumber NVARCHAR(MAX))

INSERT INTO @UserInfo
SELECT 
c.ConsumerID,
concat(isnull(c.FirstName,'')+' ', isnull(CONCAT(isnull(c.SecondName,'')+' ',isnull(c.FamilyName,'')),'')) AS ConsumerName,
U.EmailID,
U.DeletedDate,
U.MobileNumber
FROM coc_Consumers C (NOLOCK)
left join coc_Users U (NOLOCK) on U.UserID=C.UserID
where ((@EmailID IS NULL OR U.EmailID=@EmailID) or (@EmailID IS NULL OR C.EmailID=@EmailID))    
  AND ((@Mobile IS NULL OR U.MobileNumber=@Mobile) or (@Mobile IS NULL OR C.PrimaryMobile=@Mobile))

 select Ep.ParticipationDate                                                                                          
 ,      ESL.EService                                                                                               as CompetitionName    
 ,    (case when ep.ConsumerName is null then  (select ConsumerName from @UserInfo where ConsumerID = ep.ConsumerID)  else ep.ConsumerName end)as [ConsumerName]    
 ,      Ep.Barcode                                                                                                    
 ,    (case when ep.ParticipationEmailID  is null then  (select EmailID from @UserInfo where ConsumerID = ep.ConsumerID) else ep.ParticipationEmailID end) as EmailID                                                                                                
 ,      EP.Remarks                                                                                                     
 ,      (select DeletedDate from @UserInfo where ConsumerID = ep.ConsumerID) as  DeletedDate                                                                                                 
 ,    (Case when ep.ParticipationMobile is null then  (select MobileNumber from @UserInfo where ConsumerID = ep.ConsumerID) else ep.ParticipationMobile  end) as MobileNumber                                                                                               
 from      coc_ECouponParticipations Ep   (NOLOCK)  
 inner join coc_ECoupons              EC  (NOLOCK) on EC.ECouponID=Ep.ECouponID    
 left join coc_EServiceLanguages     ESL (NOLOCK) on ESL.LanguageID=1 and ESL.EServiceID=EC.EServiceID    
    
 where 
 (@Mobile IS NULL OR ep.ParticipationMobile=@Mobile)

END 
GO
/****** Object:  StoredProcedure [dbo].[GetUserInfoParticipation_17Aug2021_Bckup]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[GetUserInfoParticipation_17Aug2021_Bckup] @LanguageID int       =1    
,                                   @Mobile nvarchar(100) =NULL    
,                                   @EmailID nvarchar(100)=null    
As    
Begin    
 select Ep.ParticipationDate                                                                                          
 ,      ESL.EService as CompetitionName    
 ,    (case when ep.ConsumerName is null then  isnull(c.FullName,'') else ep.ConsumerName end)as [ConsumerName]    
 ,      Ep.Barcode                                                                                                    
 ,    (case when ep.ParticipationEmailID  is null then   C.EmailID else ep.ParticipationEmailID end) as EmailID                                                                                                
 ,      EP.Remarks                                                                                                     
 ,      U.DeletedDate                                                                                                 
 ,    (Case when ep.ParticipationMobile is null then  C.PrimaryMobile else ep.ParticipationMobile  end) as MobileNumber                                                                                               
 from      coc_ECouponParticipations Ep   (NOLOCK) 
 inner join coc_ECoupons              EC  (NOLOCK) on EC.ECouponID=Ep.ECouponID    
 inner join coc_EServiceLanguages     ESL (NOLOCK) on ESL.LanguageID=1 and ESL.EServiceID=EC.EServiceID    
 left join coc_Consumers             C (NOLOCK)  on C.ConsumerID=Ep.ConsumerID    
 left join coc_Users                 U  (NOLOCK)  on U.UserID=C.UserID    
 where (@EmailID IS NULL OR C.EmailID=@EmailID)    
  AND (@Mobile IS NULL OR C.PrimaryMobile=@Mobile)
END 
GO
/****** Object:  StoredProcedure [dbo].[GetUserInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetUserInformation]
	@UserID INTEGER
AS
	SET NOCOUNT ON
		BEGIN
			SELECT US.UserID,US.UserName,US.[Password],US.RoleID,US.MobileNumber,US.EmailID,US.PhoneNumber,US.ResetRequired,US.IsActive,FullName
				FROM coc_Users(NOLOCK) US
			WHERE US.UserID=@UserID
		END
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[GetUserInfowinner]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[GetUserInfowinner]               
@LanguageID int=1,                    
@Mobile nvarchar(100)=NULL,                    
@EmailID nvarchar(100)=null                    
As                     
Begin    select distinct(ew.DrawDateTime),           
  edl.Value as [DrawName],   ed.Location as [DrawPlace],          
   esl.EService as  [CompetionName] ,           
    ew.ConsumerName [WinnerName],         
 ew.MobileNumber,        
 ew.Email as EmailID,        
    ew.MobileNumber,ECPL.Value [PriceName] ,            
        ECP.Barcode,   cl.City [City], NL.Nationality [Nationality]                     
            from coc_ECouponWinners ew  (NOLOCK)                     
        left join coc_Consumers c (NOLOCK) on ew.ConsumerID = c.ConsumerID            
       left join coc_Users U (NOLOCK) on U.UserID=c.UserID               
             inner join coc_ECouponDrawPrizes edp (NOLOCK) on edp.ECouponDrawPrizeID = ew.ECouponDrawPrizeID            
                   inner join coc_ECouponDraw ed (NOLOCK) on ed.ECouponDrawID = edp.ECouponDrawID               
                  inner join coc_ECouponDrawLanguages edl (NOLOCK) on edl.ECouponDrawID = ed.ECouponDrawID and edl.LanguageID =@LanguageID and edl.ResourceKey = 'Name'                 
      inner join coc_ECouponLanguages ecl(NOLOCK) on ecl.ECouponID = ed.ECouponID and ecl.LanguageID =@LanguageID              
            left join coc_CityLanguages cl(NOLOCK) on cl.CityID = c.CityID and cl.LanguageID =@LanguageID              
                inner join coc_ECoupons ec(NOLOCK) on ec.ECouponID= ecl.ECouponID                  
            inner join coc_EServiceLanguages esl(NOLOCK) on esl.EServiceID= ec.EServiceID  and esl.LanguageID= @LanguageID                     
  left join coc_ECouponParticipations ECP(NOLOCK) on ECP.ECouponParticipationID = ew.ECouponParticipationID              
      left join coc_NationalityLanguages NL(NOLOCK) on NL.NationalityID=c.NationalityID and nl.LanguageID=@LanguageID                
    inner join coc_ECouponPrizesLanguages          
 ECPL(NOLOCK) on ECPL.ECouponPrizeID=ew.ECouponPrizeID    and ECPL.ResourceKey= 'PrizeDetail' and ECPL.LanguageID=@LanguageID         
             and ECPL.LanguageID=@LanguageID  where ((@EmailID IS NULL OR U.EmailID=@EmailID) or (@EmailID IS NULL OR C.EmailID=@EmailID))    AND  ((@Mobile IS NULL OR U.MobileNumber=@Mobile) or           
    (@Mobile IS NULL OR C.PrimaryMobile=@Mobile) or (@Mobile IS NULL OR ew.MobileNumber=@Mobile) )                 end        
        
        
 select  top 10 * from coc_ECouponWinners order by 1 desc
GO
/****** Object:  StoredProcedure [dbo].[GetUserListWithFilters]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetUserListWithFilters] @ECouponID bigint         =NULL
,                                               @EmailID nvarchar(100)    =NULL
,                                               @MobileNumber nvarchar(15)=NULL
AS
BEGIN
	if (@ECouponID=0)
		set @ECouponID=NULL
	if (@EmailID='')
		set @EmailID=NULL
	if (@MobileNumber='')
		set @MobileNumber=NULL

	SELECT distinct (C.FirstName+' '+C.SecondName)                as FullName
	,               C.PrimaryMobile                               as MobileNumber
	,               C.EmailID                                    
	,               C.IsMobileVerified                           
	,               C.IsEmailVerified                            
	,               C.IsActive                                   
	,               C.ConsumerID                                 
	,               C.UserID                                     
	,               Convert(nvarchar(50),Convert(date,C.AddDate)) as RegisteredDate
	FROM       coc_Consumers             C(NOLOCK) 
	INNER JOIN coc_Users                 U(NOLOCK)  ON U.UserID=C.UserID
	Left Join  coc_ECouponParticipations EP(NOLOCK) ON EP.ConsumerID=C.ConsumerID
	WHERE (@EmailID is null or C.EmailID=@EmailID) and (@MobileNumber is null or C.PrimaryMobile=@MobileNumber)
		AND (@ECouponID is null or EP.ECouponID=@ECouponID)
		ANd C.IsActive=1 AND U.IsActive=1

END
GO
/****** Object:  StoredProcedure [dbo].[GetUserRole]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetUserRole]
	@EmailID [Email] =NULL,
	@MobileNo [Mobile] =NULL,
	@Password [NullName]=NULL,
	@TypeID INTEGER
AS
SET NOCOUNT ON
	DECLARE @UserID INTEGER
	DECLARE @RoleID INTEGER
	DECLARE @UniqueID INTEGER
	DECLARE @ConsumerID INTEGER
	DECLARE @FirstName [Name]
	DECLARE @ByMobile BIT =0
	DECLARE @ByEmail BIT =0
	IF(@EmailID = '')
	BEGIN
		SET @EmailID = NULL
		SET @ByMobile=1
	END
	IF(@MobileNo = '')
	BEGIN
		SET @MobileNo = NULL 
		SET @ByEmail=1
	END
	IF(@Password = '')
	BEGIN
		SET @Password = NULL
	END
	IF(@EmailID IS NOT NULL OR @MobileNo IS NOT NULL )
	BEGIN
		SELECT @FirstName=FirstName FROM coc_Consumers(NOLOCK) 
			WHERE (@EmailID IS NULL OR EmailID = @EmailID) AND
		(@MobileNo IS NULL OR PrimaryMobile = @MobileNo) AND IsVerified=1 and IsDeleted= 0

		SELECT @RoleID=ISNULL(RoleID,0) ,@UserID=ISNULL(UserID,0) 
			FROM coc_Users(NOLOCK) 
		WHERE (@EmailID IS NULL OR EmailID = @EmailID) AND
		 (@Password IS NULL OR [Password] = @Password) AND
		(@MobileNo IS NULL OR MobileNumber = @MobileNo OR PhoneNumber= @MobileNo) and IsDeleted= 0
		
		IF @UserID IS NOT NULL
		BEGIN
			IF(@TypeID =1) -- RESET PASSWORD
			BEGIN
				INSERT INTO coc_ResetPassword(UserID,ByMobile,ByEmail,RequestTime,IsVerified)
					SELECT @UserID,@ByMobile,@ByEmail,GETDATE(),0
				SET @UniqueID=SCOPE_IDENTITY()
			END
			ELSE IF (@TypeID =2 AND @RoleID = 5)
			BEGIN
				SELECT  @ConsumerID = ConsumerID 
					FROM coc_Consumers(NOLOCK) 
				WHERE UserID=@UserID
				INSERT INTO coc_ContactChanges(ConsumerID,MobileChange,EmailChange,RequestTime,IsVerified)	
					SELECT @ConsumerID,@ByMobile,@ByEmail,GETDATE(),0
				SET @UniqueID=SCOPE_IDENTITY()
			END
			ELSE IF (@TypeID =2 AND @RoleID != 5)
			BEGIN
				INSERT INTO coc_ContactChanges(UserID,MobileChange,EmailChange,RequestTime,IsVerified)	
					SELECT @UserID,@ByMobile,@ByEmail,GETDATE(),0
				SET @UniqueID=SCOPE_IDENTITY()
			END
			if @RoleID = 5 and @ConsumerID IS NULL
				SELECT  @ConsumerID = ConsumerID 
					FROM coc_Consumers(NOLOCK) 
				WHERE UserID=@UserID
		END
		SELECT @UserID [UserID],@RoleID [RoleID],@UniqueID [UniqueID],@FirstName [FirstName], @ConsumerID [ConsumerID]
			from coc_Users(NOLOCK)  where UserID = @UserID
		
		 
	 END
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[GetViewsByUser]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetViewsByUser]  
 @ScreenID INTEGER,  
 @LangID INTEGER =1 
AS   
 SET NOCOUNT ON  
 if(@LangID=0) set @LangID= 1;
  SELECT ScreenViewID,ViewName,ScreenID,TableName,PrimaryKey,IsSystem   
   FROM COC_ScreenViews(NOLOCK)   
  WHERE ScreenID=@ScreenID  
    
  SELECT ResourceKey ,ResourceValue    
   FROM COC_Resources(NOLOCK)   
  WHERE ScreenID=@ScreenID AND LanguageID=@LangID AND ResourceKey='VIEW_TITLE'  
 SET NOCOUNT OFF  
  
  
  
    
  
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherBundleDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetVoucherBundleDetails] 
	@EVoucherBundleId INTEGER,
	@LanguageId INTEGER
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT 
		evb.EVoucherBundleID AS [EVoucherBundleID],
		ev.EVoucherID AS [EVoucherID],
		es.EServiceID AS [EServiceID],
		evl.ResourceValue AS [VoucherName],
		n.NotificationCount AS [NoOfVouchers]
	FROM coc_EVoucherBundle evb (NOLOCK)
	INNER JOIN coc_EVoucher ev (NOLOCK) ON ev.EVoucherID=evb.EVoucherID
	INNER JOIN coc_EServices es (NOLOCK) ON es.EServiceID = ev.EServiceID
	INNER JOIN coc_EVoucherLanguages evl (NOLOCK) ON evl.EVoucherID=ev.EVoucherID  AND evl.ResourceKey = 'VoucherName' AND evl.LanguageID = @LanguageId
	INNER JOIN coc_Notifications n (NOLOCK) ON n.EServiceID = es.EServiceID
	WHERE evb.EVoucherBundleID=@EVoucherBundleId
END
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherBundles]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetVoucherBundles]
	@languageId INTEGER
	
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT eb.EBundleID,
		ebl.ResourceValue AS BundleName,
		ebls.ResourceValue AS BundleDescription
	FROM coc_EBundle eb (NOLOCK)
	INNER JOIN coc_EBundleLanguages ebl (NOLOCK) ON eb.EBundleID=ebl.EBundleID AND ebl.LanguageID=@languageId AND ebl.ResourceKey='BundleName'
	INNER JOIN coc_EBundleLanguages ebls (NOLOCK) ON eb.EBundleID=ebls.EBundleID AND ebls.LanguageID=@languageId AND ebls.ResourceKey='BundleDescription'

END
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherByLink]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetVoucherByLink] 
     @LanguageID INTEGER
	,@BroadcastEmailID INTEGER = NULL
	,@EServiceID INTEGER
	,@EmailAddress VARCHAR(100)
	,@MobileNumber VARCHAR(20) = NULL
	,@FullName VARCHAR(100) = NULL
	,@DistributorCorporateID BIGINT = NULL
	,@Distributiontype INT = 0 --0 by default,1 - shareble link ,2 -broadcastemail
	,@ImageFile NVARCHAR(1000) OUTPUT
	,@CustomerName NVARCHAR(100) OUTPUT
	,@Status INTEGER OUTPUT
	,@VoucherBarcode NVARCHAR(100) OUTPUT
	,@MessageText NVARCHAR(150) OUTPUT
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION GetVoucherByLink

		DECLARE @eServiceBarcodeID INTEGER
		DECLARE @GuestID INTEGER
		DECLARE @NotificationID INTEGER
		DECLARE @VoucherID INTEGER

		IF (@Distributiontype = 1) --SHARABLE LINK
		BEGIN

		   SELECT @CustomerName = @FullName

			SELECT @GuestID = GuestID
			FROM coc_Guests(NOLOCK)
			WHERE EmailID = @EmailAddress

			SELECT @NotificationID = NotificationID
			FROM coc_Notifications (NOLOCK)
			WHERE EServiceID = @EServiceID

			SELECT @VoucherID = EVoucherID
			FROM coc_EVoucher (NOLOCK)
			WHERE EServiceID = @EServiceID

			SELECT TOP 1 @ImageFile = ImageFile
			FROM coc_EVoucherImages (NOLOCK)
			WHERE IsPrimaryImage = 1
				and EVoucherID = @VoucherID

			IF @GuestID IS NULL
			BEGIN
				INSERT INTO coc_Guests (
					FullName
					,EmailID
					,PrimaryMobile
					,AddDate
					,IsActive
					)
				SELECT @FullName
					,@EmailAddress
					,@MobileNumber
					,GETDATE()
					,1

				SET @GuestID = SCOPE_IDENTITY()
			END
			ELSE
			BEGIN
				UPDATE coc_Guests
				SET FullName = @FullName
					,EditDate = GETDATE()
				WHERE GuestID = @GuestID
			END

			SELECT TOP 1 @eServiceBarcodeID = EServiceBarcodeID
				,@VoucherBarcode = Barcode
			FROM coc_EServiceBarcodes (NOLOCK)
			WHERE NotificationID = @NotificationID
				AND ConsumerID IS NULL
				AND GuestID IS NULL
				AND EVoucherID IS NULL

			UPDATE TOP (1) coc_EServiceBarcodes
			SET GuestID = @GuestID
				,EVoucherID = @VoucherID
				,AsignedEmailID = @EmailAddress
				,AsignedMoile = @MobileNumber
				,DistributorCorporateID = @DistributorCorporateID
				,Distributiontype = @Distributiontype
			WHERE EServiceBarcodeID = @eServiceBarcodeID

			SELECT @Status = 1
				,@MessageText = 'Congratulations. We have sent your new voucher by email.  '
		END
		ELSE
		BEGIN
			IF EXISTS (
					SELECT BroadcastEmailID
					FROM coc_BroadcastEmail (NOLOCK)
					WHERE BroadcastEmailID = @BroadcastEmailID
						AND EmailAddress = @EmailAddress
						AND EServiceID = @EServiceID
						AND STATUS <> 4
					)
			BEGIN
				SELECT @CustomerName = CustomerName
				FROM coc_BroadcastEmail (NOLOCK)
				WHERE BroadcastEmailID = @BroadcastEmailID

				SELECT @GuestID = GuestID
				FROM coc_Guests (NOLOCK)
				WHERE EmailID = @EmailAddress

				SELECT @NotificationID = NotificationID
				FROM coc_Notifications (NOLOCK)
				WHERE EServiceID = @EServiceID

				SELECT @VoucherID = EVoucherID
				FROM coc_EVoucher (NOLOCK)
				WHERE EServiceID = @EServiceID

				SELECT TOP 1 @ImageFile = ImageFile
				FROM coc_EVoucherImages (NOLOCK)
				WHERE IsPrimaryImage = 1

				IF @GuestID IS NULL
				BEGIN
					INSERT INTO coc_Guests (
						FullName
						,EmailID
						,AddDate
						,IsActive
						)
					SELECT @CustomerName
						,@EmailAddress
						,GETDATE()
						,1

					SET @GuestID = SCOPE_IDENTITY()
				END
				ELSE
				BEGIN
					UPDATE coc_Guests
					SET FullName = @CustomerName
						,EditDate = GETDATE()
					WHERE GuestID = @GuestID
				END

				SELECT TOP 1 @eServiceBarcodeID = EServiceBarcodeID
					,@VoucherBarcode = Barcode
				FROM coc_EServiceBarcodes (NOLOCK)
				WHERE NotificationID = @NotificationID
					AND ConsumerID IS NULL
					AND GuestID IS NULL
					AND EVoucherID IS NULL

				UPDATE TOP (1) coc_EServiceBarcodes
				SET GuestID = @GuestID
					,EVoucherID = @VoucherID
					,AsignedEmailID = @EmailAddress
					,BroadcastEmailID = @BroadcastEmailID
					,Distributiontype = @Distributiontype
				WHERE EServiceBarcodeID = @eServiceBarcodeID

				UPDATE coc_BroadcastEmail
				SET STATUS = 4
				WHERE BroadcastEmailID = @BroadcastEmailID

				SELECT @Status = 1
					,@MessageText = 'Congratulations. We have sent your new voucher by email.  '
			END
			ELSE
			IF EXISTS (
					SELECT BroadcastEmailID
					FROM coc_BroadcastEmail (NOLOCK)
					WHERE BroadcastEmailID = @BroadcastEmailID
						AND EmailAddress = @EmailAddress
						AND EServiceID = @EServiceID
						AND STATUS = 4
					)
			BEGIN
				SELECT @Status = 0
					,@VoucherBarcode = ''
					,@MessageText = N'We have already sent this voucher to your email before. Please check your inbox. '
			END
			ELSE
				SELECT @Status = 0
					,@VoucherBarcode = ''
					,@MessageText = 'Sorry the information could not be verified'
		END -- END ELSE

		COMMIT TRANSACTION GetVoucherByLink
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION GetVoucherByLink

		SELECT @Status = 0
			,@MessageText = ERROR_MESSAGE()

		RAISERROR (
				@MessageText
				,16
				,1
				);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherCategories]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE PROCEDURE [dbo].[GetVoucherCategories]                  
 @ConsumerID INTEGER=NULL                   
,@LanguageID INTEGER = 1                  
,@CityID  INTEGER = null                    
,@VoucherType   INTEGER = null                     
,@SearchText NVARCHAR(max)=null              
,@Scope int=null                   
,@PageNumber INTEGER                  
,@PageSize INTEGER                  
,@TotalRecords INTEGER OUTPUT                  
                  
AS                  
                  
BEGIN                  
                   
if(@ConsumerID=0)      
   set @ConsumerID=null        
                   
 DECLARE @FirstRecord INTEGER                  
 DECLARE @LastRecord INTEGER                  
                  
 SET @FirstRecord = (@PageNumber - 1) * @PageSize                  
 SET @LastRecord = (@PageNumber * @PageSize + 1)                  
                  
DECLARE @ResultTable AS TABLE                  
(                  
[Id] INTEGER Identity (1,1),                  
[EVoucherCategoryID] INTEGER,                  
[CategoryName] NVARCHAR(200),                  
[ImageFile] NVARCHAR(200),              
[InActiveImageFile] NVARCHAR(200),                 
[VoucherTypeCount] INTEGER                  
)                  
        
if(@SearchText='')        
 set @SearchText=null                  
INSERT INTO @ResultTable                  
select VC.EVoucherCategoryID, VCL.ResourceValue as CategoryName, VC.ImageFile,VC.InActiveImageFile,                    
  (select count(distinct EV.EVoucherID) from coc_EVoucher EV   (NOLOCK)            
  inner join coc_eServices ES (NOLOCK) ON ES.EServiceID = EV.EServiceID                
  --left join coc_EvoucherLocations EVLC(NOLOCK) on EVLC.EVoucherID=EV.EVoucherID                
   left JOIN coc_EVoucherLanguages EVL (NOLOCK) ON EVL.EVoucherID = EV.EVoucherID                   
   where EV.EVoucherCategoryID = VC.EVoucherCategoryID and EV.IsActive = 1 and getdate() between es.FromDate and ES.ToDate and (EV.EVoucherTypeID=1 or EV.EVoucherTypeID is null)            
   --and (@CityID is null or  EVLC.CityID=@CityID)         
   and  (@VoucherType is null or EV.Type=@VoucherType) and (@SearchText is null or (EVL.LanguageID = @LanguageID AND EVL.ResourceKey = 'VoucherName'  and EVL.ResourceValue like '%'+@SearchText+'%'))                
   ) as VoucherTypeCount                  
 from  coc_EVoucherCategory VC (NOLOCK)                  
  inner join coc_EVoucherCategoryLanguages VCL (NOLOCK)                   
   ON VCL.EVoucherCategoryID = VC.EVoucherCategoryID and VCL.LanguageID = @LanguageID and VCL.ResourceKey = 'CategoryName'                  
                  
--SELECT MAX(EVC.EVoucherCategoryID) [EVoucherCategoryID],MAX(ECVL.ResourceValue) as CategoryName, MAX(EVC.ImageFile) [ImageFile],                   
--(select COUNT(distinct EV.EVoucherID) FROM                   
-- coc_EVoucher EV(NOLOCK)                   
--INNER JOIN coc_EVoucherLanguages EVL ON EVL.EVoucherID = EV.EVoucherID AND EVL.LanguageID = @LanguageID AND EVL.ResourceKey = 'VoucherName'                  
-- where EVC.eVoucherCategoryID = EV.eVoucherCategoryID  and EV.IsActive = 1                  
-- ) [VoucherTypeCount]                   
--FROM coc_EVoucherCategory EVC                   
-- INNER JOIN coc_EVoucherCategoryLanguages ECVL ON ECVL.eVoucherCategoryID = EVC.eVoucherCategoryID And ECVL.LanguageID = @LanguageID                   
--GROUP BY EVC.eVoucherCategoryID                  
--ORDER BY EVC.EVoucherCategoryID                  
                  
                  
SELECT @TotalRecords = Count(*) FROM @ResultTable                  
            
SELECT EVoucherCategoryID, CategoryName,            
(Case When VoucherTypeCount=0 then InActiveImageFile else ImageFile end)as [ImageFile],            
VoucherTypeCount FROM @ResultTable WHERE ID BETWEEN @FirstRecord AND @LastRecord           
        
exec GetScopeList @LanguageID        
               
END
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherCoporateList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetVoucherCoporateList] @ConsumerId INTEGER = NULL
	,@LanguageId INTEGER = 1
AS
BEGIN	
	
	DECLARE @canApply BIT = 1

	SELECT EV.EVoucherID
		,SL.EServiceID									
		,EVL_Name.ResourceValue AS NAME	
	FROM coc_EVoucher EV(NOLOCK)
	INNER JOIN coc_EVoucherLanguages EVL_Desc(NOLOCK) ON EVL_Desc.EVoucherID = EV.EVoucherID
		AND EVL_Desc.LanguageID = @LanguageID
		AND EVL_Desc.ResourceKey = 'Description'
	INNER JOIN coc_EVoucherLanguages EVL_Name (NOLOCK) ON EVL_Name.EVoucherID = EV.EVoucherID
		AND EVL_Name.LanguageID = @LanguageID
		AND EVL_Name.ResourceKey = 'VoucherName'
	LEFT JOIN coc_EVoucherLanguages EVL_Loc (NOLOCK) ON EVL_Loc.EVoucherID = EV.EVoucherID
		AND EVL_Loc.LanguageID = @LanguageID
		AND EVL_Loc.ResourceKey = 'LocationInfo'
	LEFT JOIN coc_EVoucherLanguages EVL_Remark (NOLOCK) ON EVL_Remark.EVoucherID = EV.EVoucherID
		AND EVL_Remark.LanguageID = @LanguageID
		AND EVL_Remark.ResourceKey = 'Remarks'
	LEFT JOIN coc_EVoucherLanguages EVL_Terms (NOLOCK) ON EVL_Terms.EVoucherID = EV.EVoucherID
		AND EVL_Terms.LanguageID = @LanguageID
		AND EVL_Terms.ResourceKey = 'Terms'
	INNER JOIN coc_EServices ES (NOLOCK) ON ES.EServiceID = EV.EServiceID
	INNER JOIN coc_EServiceLanguages SL(NOLOCK) ON SL.EServiceID = ES.EServiceID
		AND SL.LanguageID = @LanguageID
	INNER JOIN coc_Corporates C (NOLOCK) ON C.CorporateID = ES.CorporateID
	INNER JOIN coc_EVoucherCategory EVC (NOLOCK) ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID
	WHERE ES.FromDate <= getdate() AND ES.ToDate >= getdate() AND EV.IsActive = 1

	SELECT distinct C.CorporateID ,C.CorporateName FROM coc_EVoucherBundleQRCode VQR (NOLOCK)
	INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVBD.CorporateID = VQR.CorporateID
	INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID
	INNER JOIN coc_EVoucher EV(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID
		AND EV.IsActive = 1
	INNER JOIN coc_EServices ES (NOLOCK) ON ES.EServiceID = EV.EServiceID
	INNER JOIN coc_Corporates C (NOLOCK) ON C.CorporateID = VQR.CorporateID
	WHERE ES.FromDate <= getdate() AND ES.ToDate >= getdate() AND EV.IsActive = 1
END
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherCorporates]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetVoucherCorporates]        
 @ConsumerID INTEGER         
,@LanguageID INTEGER = 1       
,@CityID  INTEGER = null        
,@VoucherType   INTEGER = null       
,@SearchText NVARCHAR(max)=null     
,@Scope int=null           
,@EVoucherCategoryID INTEGER = NULL        
,@PageNumber INTEGER        
,@PageSize INTEGER        
,@TotalRecords INTEGER OUTPUT        
        
AS        
        
BEGIN        
        
        
DECLARE @FirstRecord INTEGER        
DECLARE @LastRecord INTEGER        
        
SET @FirstRecord = (@PageNumber - 1) * @PageSize        
SET @LastRecord = (@PageNumber * @PageSize + 1)        
        
DECLARE @ResultTable AS TABLE        
(        
[Id] INTEGER Identity (1,1),        
[CorporateID] INTEGER,        
[CorporateName] NVARCHAR(200),        
[ImageFile] NVARCHAR (200),        
[VoucherTypeCount] INTEGER        
)        
        
INSERT INTO @ResultTable         
        
SELECT MAX(C.CorporateID) [CorporateID] , MAX(C.CorporateName) [CorporateName], MAX(C.LogoFile) [ImageFile], Count(*) [VoucherTypeCount]         
FROM coc_EVoucher EV(NOLOCK)         
INNER JOIN coc_EServices S (NOLOCK) ON S.EServiceID = EV.EServiceID        
INNER JOIN coc_Corporates C (NOLOCK) ON C.CorporateID  = S.CorporateID         
INNER JOIN coc_EVoucherCategory EVC (NOLOCK) ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID      
left join coc_EvoucherLocations EVLC(NOLOCK) on EVLC.EVoucherID=EV.EVoucherID      
      
WHERE  EV.IsActive = 1      
  AND --@EVoucherCategoryID IS NULL OR         
  EVC.EVoucherCategoryID=@EVoucherCategoryID    
   and (EV.EVoucherTypeID=1 or EV.EVoucherTypeID is null)   
  and (@CityID is null or EVLC.CityID=@CityID) and (@VoucherType is null or EV.Type=@VoucherType) and (@SearchText is null or c.CorporateName like '%'+@SearchText+'%')    
   and getdate() between s.FromDate and s.ToDate          
GROUP BY C.CorporateID,C.CorporateName,C.LogoFile           
ORDER BY C.CorporateID         
        
SELECT @TotalRecords = Count(*) FROM @ResultTable        
        
SELECT CorporateID, CorporateName, ImageFile, VoucherTypeCount FROM @ResultTable WHERE ID BETWEEN @FirstRecord AND @LastRecord        
        
        
END 
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetVoucherDetails]          
 @ConsumerID INTEGER           
,@LanguageID INTEGER = 1          
,@EVoucherBundleEligibilityForConsumersID INTEGER = NULL          
,@EVoucherID INTEGER = NULL          
AS          
          
BEGIN          
          
declare @canApply bit = 1          
          
IF @EVoucherBundleEligibilityForConsumersID IS NULL          
BEGIN     
   if exists(select * from coc_consumers(nolock) where ConsumerID=@ConsumerID and PromoCodeID is not null and DATEDIFF(minute, getdate(),PromoCodeExpiryDate)>0)
   begin
	 Declare @PromoCodeID bigint
	 Declare @CategoryID int

	 select @PromoCodeID=c.PromoCodeID,@CategoryID=cc.CategoryID from coc_consumers(nolock) c
	      inner join coc_core_promocodes(nolock) cp on cp.PromoCodeID=c.PromoCodeID
		  inner join coc_core_Category(nolock) cc on cc.CategoryID=cp.CategoryID   
	     where c.ConsumerID=@ConsumerID and c.PromoCodeID is not null and DATEDIFF(minute, getdate(),c.PromoCodeExpiryDate)>0 and cc.IsActive=1
	 
	  SELECT DISTINCT  EV.EVoucherID, dbo.udf_StripHTML(EVL_Name.ResourceValue) as VoucherName, C.CorporateID, C.CorporateName, ES.EServiceID,           
			  --SL.EService ServiceName,            
			  ISNULL(ec.ImageName,ISNULL(EV.ImageFile, ISNULL((SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1 and EVI.LanguageID = @LanguageId), (SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1))))  as ImageFile,           
			  @canApply [CanApply],          
			  CONVERT(NVARCHAR(12),ES.FromDate,106) AS StartDate, CONVERT(NVARCHAR(12),ES.ToDate,106) AS EndDate,           
			  dbo.udf_StripHTML(EVL_Loc.ResourceValue) AS Location ,dbo.udf_StripHTML(EVL_Remark.ResourceValue) AS Remarks, dbo.udf_StripHTML(EVL_Terms.ResourceValue) AS Terms,   
			  ISNULL((Case when @LanguageID=2 then ec.DescriptionAr else ec.Description end),dbo.udf_StripHTML(EVL_Desc.ResourceValue)) Description,          
			  ISNULL(ec.ImageName,ISNULL(EV.ImageFile, ISNULL((SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1 and EVI.LanguageID = @LanguageId), (SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1)))) AS PrimaryImageURL, 
              C.LogoFile CorporateLogo, 1 MaxAllowedVouchers,         
			  (select LocationURL from coc_RetailOutlets (NOLOCK) where RetailOutletID= (select top 1 RetailOutletID from coc_EVoucherRetailOutlet(NOLOCK) EVL_Retail where EVL_Retail.EVoucherID=EV.EVoucherID)) as Link,        
			  --EVLoc.MapLink as Link,         
			  (select Location from coc_RetailOutlets (NOLOCK) where RetailOutletID= (select top 1 RetailOutletID from coc_EVoucherRetailOutlet(NOLOCK) EVL_Retail where EVL_Retail.EVoucherID=EV.EVoucherID)) as LinkLabel,        
			  --EVLoc_Lang.Location as LinkLabel,          
			  --EV.link, EVL_LinkLabel.ResourceValue as LinkLabel,          
			  ISNULL(EV.OriginalPrice,0) as OriginalPrice, ISNULL(EV.PriceAfterDiscount,0) as PriceAfterDiscount,           
			  (ISNULL(EV.OriginalPrice,0)- ISNULL(EV.PriceAfterDiscount,0)) as DiscountAmount,          
			  case when @LanguageID= 2 then N'ريال' else 'SAR' end as Currency   ,  
			  ISNULL(EV.IsPaymentEnabled,0) IsPaymentEnabled,--added by rafeeq  
			  IsNull(EV.VoucherAmount,0) VoucherAmount -- added by rafeeq  
			 FROM coc_EVoucher EV(NOLOCK)           
			  INNER JOIN coc_EVoucherLanguages EVL_Desc(NOLOCK) ON EVL_Desc.EVoucherID = EV.EVoucherID and EVL_Desc.LanguageID = @LanguageID and EVL_Desc.ResourceKey= 'Description'          
			  INNER JOIN coc_EVoucherLanguages(NOLOCK) EVL_Name ON EVL_Name.EVoucherID = EV.EVoucherID AND EVL_Name.LanguageID = @LanguageID AND EVL_Name.ResourceKey = 'VoucherName'          
			  LEFT JOIN coc_EVoucherLanguages(NOLOCK) EVL_Loc ON EVL_Loc.EVoucherID = EV.EVoucherID AND EVL_Loc.LanguageID = @LanguageID AND EVL_Loc.ResourceKey = 'LocationInfo'          
			  LEFT JOIN coc_EVoucherLanguages(NOLOCK) EVL_Remark ON EVL_Remark.EVoucherID = EV.EVoucherID AND EVL_Remark.LanguageID = @LanguageID AND EVL_Remark.ResourceKey = 'Remarks'          
			  LEFT JOIN coc_EVoucherLanguages(NOLOCK) EVL_Terms ON EVL_Terms.EVoucherID = EV.EVoucherID AND EVL_Terms.LanguageID = @LanguageID AND EVL_Terms.ResourceKey = 'Terms'          
			  Left join coc_EVoucherRetailOutlet(NOLOCK) EVL_Retail ON EVL_Retail.EVoucherID=EV.EVoucherID        
			  --LEFT JOIN coc_EvoucherLocations EVLoc ON EVLoc.EVoucherID = EV.EVoucherID           
			  --left join coc_eVoucherLocationLanguages EVLoc_Lang ON EVLoc_Lang.VoucherLocationID = EVLoc.VoucherLocationID and EVLoc_Lang.LanguageID= 1          
			  --LEFT JOIN coc_EVoucherLanguages EVL_LinkLabel ON EVL_LinkLabel.EVoucherID = EV.EVoucherID AND EVL_LinkLabel.LanguageID = @LanguageID AND EVL_LinkLabel.ResourceKey = 'LinkLabel'          
			  INNER JOIN coc_EServices ES ON ES.EServiceID = EV.EServiceID          
			  INNER JOIN coc_EServiceLanguages SL(NOLOCK) ON SL.EServiceID = ES.EServiceID and SL.LanguageID = @LanguageID          
			  INNER JOIN coc_Corporates C ON C.CorporateID  = ES.CorporateID           
			  INNER JOIN coc_EVoucherCategory EVC ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID  
              left join coc_core_EVoucherCategories(nolock) ec on ec.EVoucherID=EV.EVoucherID and ec.IsDeleted=0 and ec.CategoryID=@CategoryID
			 WHERE  (EV.EVoucherID=@EVoucherID)          
			  AND EV.IsActive = 1  AND ES.IsActive = 1   
			  and (EV.EVoucherTypeID=1 or EV.EVoucherTypeID is null)  
			 ORDER BY C.CorporateID           
        
          
			 SELECT DISTINCT VI.ImageFile, VI.EVoucherImagesID, EV.EVoucherID          
			 FROM coc_EVoucher EV(NOLOCK)           
			  INNER JOIN coc_EVoucherImages VI(NOLOCK) ON VI.EVoucherID = EV.EVoucherID           
			  --INNER JOIN coc_EServices S ON S.EServiceID = EV.EServiceID          
			  --INNER JOIN coc_Corporates C ON C.CorporateID  = S.CorporateID           
			  INNER JOIN coc_EVoucherCategory EVC (NOLOCK) ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID          
			 WHERE  (EV.EVoucherID=@EVoucherID)          
			  AND EV.IsActive = 1   
			  and (EV.EVoucherTypeID=1 or EV.EVoucherTypeID is null)  
			 --ORDER BY C.CorporateID          
          
          
			 select C.CorporateID, C.CorporateName, EV.EVoucherID          
			 FROM coc_EVoucherBundleQRCode VQR (NOLOCK)         
			  INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVBD.CorporateID = VQR.CorporateID          
			  INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID           
			  INNER JOIN coc_EVoucher EV(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID and EV.IsActive = 1          
			  INNER JOIN coc_EServices ES (NOLOCK) ON ES.EServiceID = EV.EServiceID          
			  INNER JOIN coc_Corporates C (NOLOCK) ON C.CorporateID  = VQR.CorporateID          
			 WHERE   (EV.EVoucherID=@EVoucherID) and (EV.EVoucherTypeID=1 or EV.EVoucherTypeID is null)            
			 Union          
			 select 0 as CorporateID, 'eCopon' as CorporateName, @EVoucherID as VoucherID    
      
   end
   else
   begin
             SELECT DISTINCT  EV.EVoucherID, dbo.udf_StripHTML(EVL_Name.ResourceValue) as VoucherName, C.CorporateID, C.CorporateName, ES.EServiceID,           
				  --SL.EService ServiceName,            
				  ISNULL(EV.ImageFile, ISNULL((SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1 and EVI.LanguageID = @LanguageId), (SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1)))  as ImageFile,           
				  @canApply [CanApply],          
				  CONVERT(NVARCHAR(12),ES.FromDate,106) AS StartDate, CONVERT(NVARCHAR(12),ES.ToDate,106) AS EndDate,           
				  dbo.udf_StripHTML(EVL_Loc.ResourceValue) AS Location ,dbo.udf_StripHTML(EVL_Remark.ResourceValue) AS Remarks, dbo.udf_StripHTML(EVL_Terms.ResourceValue) AS Terms,           
				  dbo.udf_StripHTML(EVL_Desc.ResourceValue) Description,           
				  ISNULL(EV.ImageFile, ISNULL((SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1 and EVI.LanguageID = @LanguageId), (SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1))) AS PrimaryImageURL, 
                  C.LogoFile CorporateLogo, 1 MaxAllowedVouchers,         
				  (select LocationURL from coc_RetailOutlets (NOLOCK) where RetailOutletID= (select top 1 RetailOutletID from coc_EVoucherRetailOutlet(NOLOCK) EVL_Retail where EVL_Retail.EVoucherID=EV.EVoucherID)) as Link,        
				  --EVLoc.MapLink as Link,         
				  (select Location from coc_RetailOutlets (NOLOCK) where RetailOutletID= (select top 1 RetailOutletID from coc_EVoucherRetailOutlet(NOLOCK) EVL_Retail where EVL_Retail.EVoucherID=EV.EVoucherID)) as LinkLabel,        
				  --EVLoc_Lang.Location as LinkLabel,          
				  --EV.link, EVL_LinkLabel.ResourceValue as LinkLabel,          
				  ISNULL(EV.OriginalPrice,0) as OriginalPrice, ISNULL(EV.PriceAfterDiscount,0) as PriceAfterDiscount,           
				  (ISNULL(EV.OriginalPrice,0)- ISNULL(EV.PriceAfterDiscount,0)) as DiscountAmount,          
				  case when @LanguageID= 2 then N'ريال' else 'SAR' end as Currency   ,  
				  ISNULL(EV.IsPaymentEnabled,0) IsPaymentEnabled,--added by rafeeq  
				  IsNull(EV.VoucherAmount,0) VoucherAmount -- added by rafeeq  
				 FROM coc_EVoucher EV(NOLOCK)           
				  INNER JOIN coc_EVoucherLanguages EVL_Desc(NOLOCK) ON EVL_Desc.EVoucherID = EV.EVoucherID and EVL_Desc.LanguageID = @LanguageID and EVL_Desc.ResourceKey= 'Description'          
				  INNER JOIN coc_EVoucherLanguages(NOLOCK) EVL_Name ON EVL_Name.EVoucherID = EV.EVoucherID AND EVL_Name.LanguageID = @LanguageID AND EVL_Name.ResourceKey = 'VoucherName'          
				  LEFT JOIN coc_EVoucherLanguages(NOLOCK) EVL_Loc ON EVL_Loc.EVoucherID = EV.EVoucherID AND EVL_Loc.LanguageID = @LanguageID AND EVL_Loc.ResourceKey = 'LocationInfo'          
				  LEFT JOIN coc_EVoucherLanguages(NOLOCK) EVL_Remark ON EVL_Remark.EVoucherID = EV.EVoucherID AND EVL_Remark.LanguageID = @LanguageID AND EVL_Remark.ResourceKey = 'Remarks'          
				  LEFT JOIN coc_EVoucherLanguages(NOLOCK) EVL_Terms ON EVL_Terms.EVoucherID = EV.EVoucherID AND EVL_Terms.LanguageID = @LanguageID AND EVL_Terms.ResourceKey = 'Terms'          
				  Left join coc_EVoucherRetailOutlet(NOLOCK) EVL_Retail ON EVL_Retail.EVoucherID=EV.EVoucherID        
				  --LEFT JOIN coc_EvoucherLocations EVLoc ON EVLoc.EVoucherID = EV.EVoucherID           
				  --left join coc_eVoucherLocationLanguages EVLoc_Lang ON EVLoc_Lang.VoucherLocationID = EVLoc.VoucherLocationID and EVLoc_Lang.LanguageID= 1          
				  --LEFT JOIN coc_EVoucherLanguages EVL_LinkLabel ON EVL_LinkLabel.EVoucherID = EV.EVoucherID AND EVL_LinkLabel.LanguageID = @LanguageID AND EVL_LinkLabel.ResourceKey = 'LinkLabel'          
				  INNER JOIN coc_EServices ES ON ES.EServiceID = EV.EServiceID          
				  INNER JOIN coc_EServiceLanguages SL(NOLOCK) ON SL.EServiceID = ES.EServiceID and SL.LanguageID = @LanguageID          
				  INNER JOIN coc_Corporates C ON C.CorporateID  = ES.CorporateID           
				  INNER JOIN coc_EVoucherCategory EVC ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID  
    
				 WHERE  (EV.EVoucherID=@EVoucherID)          
				  AND EV.IsActive = 1  AND ES.IsActive = 1   
				  and (EV.EVoucherTypeID=1 or EV.EVoucherTypeID is null)  
				 ORDER BY C.CorporateID           
        
          
				 SELECT DISTINCT VI.ImageFile, VI.EVoucherImagesID, EV.EVoucherID          
				 FROM coc_EVoucher EV(NOLOCK)           
				  INNER JOIN coc_EVoucherImages VI(NOLOCK) ON VI.EVoucherID = EV.EVoucherID           
				  --INNER JOIN coc_EServices S ON S.EServiceID = EV.EServiceID          
				  --INNER JOIN coc_Corporates C ON C.CorporateID  = S.CorporateID           
				  INNER JOIN coc_EVoucherCategory EVC (NOLOCK) ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID          
				 WHERE  (EV.EVoucherID=@EVoucherID)          
				  AND EV.IsActive = 1   
				  and (EV.EVoucherTypeID=1 or EV.EVoucherTypeID is null)  
				 --ORDER BY C.CorporateID          
          
          
				 select C.CorporateID, C.CorporateName, EV.EVoucherID          
				 FROM coc_EVoucherBundleQRCode VQR (NOLOCK)         
				  INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVBD.CorporateID = VQR.CorporateID          
				  INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID           
				  INNER JOIN coc_EVoucher EV(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID and EV.IsActive = 1          
				  INNER JOIN coc_EServices ES (NOLOCK) ON ES.EServiceID = EV.EServiceID          
				  INNER JOIN coc_Corporates C (NOLOCK) ON C.CorporateID  = VQR.CorporateID          
				 WHERE   (EV.EVoucherID=@EVoucherID) and (EV.EVoucherTypeID=1 or EV.EVoucherTypeID is null)            
				 Union          
				 select 0 as CorporateID, 'eCopon' as CorporateName, @EVoucherID as VoucherID    
   end         
END          
ELSE          
BEGIN          
          
 SELECT DISTINCT  EV.EVoucherID, dbo.udf_StripHTML(EVL_Name.ResourceValue) as VoucherName, C.CorporateID, C.CorporateName, ES.EServiceID,           
  --SL.EService ServiceName,            
  ISNULL(EV.ImageFile, ISNULL((SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1 and EVI.LanguageID = @LanguageId), (SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID =  EV.EVoucherID and EVI.IsPrimaryImage = 1)))  as ImageFile,           
  @canApply [CanApply],          
  CONVERT(NVARCHAR(12),ES.FromDate,106) AS StartDate, CONVERT(NVARCHAR(12),ES.ToDate,106) AS EndDate,           
  dbo.udf_StripHTML(EVL_Loc.ResourceValue) AS Location ,dbo.udf_StripHTML(EVL_Remark.ResourceValue) AS Remarks, EVL_Terms.ResourceValue AS Terms,           
  dbo.udf_StripHTML(EVL_Desc.ResourceValue) Description,           
  ISNULL(EV.ImageFile, ISNULL((SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1 and EVI.LanguageID = @LanguageId), (SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1))) AS PrimaryImageURL, 
  C.LogoFile CorporateLogo, 1 MaxAllowedVouchers,          
  EV.link, dbo.udf_StripHTML(EVL_LinkLabel.ResourceValue) as LinkLabel,          
  ISNULL(EV.OriginalPrice,0) as OriginalPrice, ISNULL(EV.PriceAfterDiscount,0) as PriceAfterDiscount,           
  (ISNULL(EV.OriginalPrice,0)- ISNULL(EV.PriceAfterDiscount,0)) as DiscountAmount,          
  case when @LanguageID= 2 then N'ريال' else 'SAR' end as Currency          
 FROM coc_EVoucherBundleQRCode VQR (NOLOCK)         
  INNER JOIN coc_EVoucherBundleEligibilityForConsumers VE(NOLOCK) ON VQR.EVoucherBundleQRCodeID=VE.EVoucherBundleQRCodeID           
  INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVBD.CorporateID = VQR.CorporateID          
  INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID           
  INNER JOIN coc_EVoucher EV(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID and EV.IsActive = 1          
  INNER JOIN coc_EVoucherLanguages EVL_Desc(NOLOCK) ON EVL_Desc.EVoucherID = EV.EVoucherID and EVL_Desc.LanguageID = @LanguageID and EVL_Desc.ResourceKey= 'Description'          
  INNER JOIN coc_EVoucherLanguages EVL_Name  (NOLOCK) ON EVL_Name.EVoucherID = EV.EVoucherID AND EVL_Name.LanguageID = @LanguageID AND EVL_Name.ResourceKey = 'VoucherName'          
  LEFT JOIN coc_EVoucherLanguages EVL_Loc (NOLOCK) ON EVL_Loc.EVoucherID = EV.EVoucherID AND EVL_Loc.LanguageID = @LanguageID AND EVL_Loc.ResourceKey = 'LocationInfo'          
  LEFT JOIN coc_EVoucherLanguages EVL_Remark (NOLOCK) ON EVL_Remark.EVoucherID = EV.EVoucherID AND EVL_Remark.LanguageID = @LanguageID AND EVL_Remark.ResourceKey = 'Remarks'          
  LEFT JOIN coc_EVoucherLanguages EVL_Terms (NOLOCK) ON EVL_Terms.EVoucherID = EV.EVoucherID AND EVL_Terms.LanguageID = @LanguageID AND EVL_Terms.ResourceKey = 'Terms'          
  LEFT JOIN coc_EVoucherLanguages EVL_LinkLabel (NOLOCK) ON EVL_LinkLabel.EVoucherID = EV.EVoucherID AND EVL_LinkLabel.LanguageID = @LanguageID AND EVL_LinkLabel.ResourceKey = 'LinkLabel'          
  INNER JOIN coc_EServices ES (NOLOCK) ON ES.EServiceID = EV.EServiceID          
  INNER JOIN coc_EServiceLanguages SL(NOLOCK) ON SL.EServiceID = ES.EServiceID and SL.LanguageID = @LanguageID          
  INNER JOIN coc_Corporates C (NOLOCK) ON C.CorporateID  = ES.CorporateID           
  INNER JOIN coc_EVoucherCategory EVC (NOLOCK) ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID          
 WHERE  VE.ConsumerID =@ConsumerID AND VE.EVoucherBundleEligibilityForConsumersID=@EVoucherBundleEligibilityForConsumersID           
  AND (EV.EVoucherID=@EVoucherID)          
  AND EV.IsActive = 1  AND ES.IsActive = 1  
  and (EV.EVoucherTypeID=1 or EV.EVoucherTypeID is null)  
 ORDER BY C.CorporateID           
          
          
 SELECT DISTINCT VI.ImageFile, VI.EVoucherImagesID, EV.EVoucherID          
 FROM coc_EVoucherBundleQRCode VQR  (NOLOCK)        
  INNER JOIN coc_EVoucherBundleEligibilityForConsumers VE(NOLOCK) ON VQR.EVoucherBundleQRCodeID=VE.EVoucherBundleQRCodeID           
  INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVBD.CorporateID = VQR.CorporateID          
  INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID           
  INNER JOIN coc_EVoucher EV(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID and EV.IsActive = 1          
  INNER JOIN coc_EVoucherImages VI(NOLOCK) ON VI.EVoucherID = EV.EVoucherID           
  --INNER JOIN coc_EServices S ON S.EServiceID = EV.EServiceID          
  --INNER JOIN coc_Corporates C ON C.CorporateID  = S.CorporateID           
  INNER JOIN coc_EVoucherCategory EVC (NOLOCK) ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID          
 WHERE  VE.ConsumerID =@ConsumerID AND VE.EVoucherBundleEligibilityForConsumersID=@EVoucherBundleEligibilityForConsumersID           
  AND (EV.EVoucherID=@EVoucherID)
  and (EV.EVoucherTypeID=1 or EV.EVoucherTypeID is null)  
 --ORDER BY C.CorporateID           
          
          
 select C.CorporateID, C.CorporateName, EV.EVoucherID          
 FROM coc_EVoucherBundleQRCode VQR (NOLOCK)         
  INNER JOIN coc_EVoucherBundleEligibilityForConsumers VE(NOLOCK) ON VQR.EVoucherBundleQRCodeID=VE.EVoucherBundleQRCodeID           
  INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVBD.CorporateID = VQR.CorporateID          
  INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID           
  INNER JOIN coc_EVoucher EV(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID and EV.IsActive = 1          
  INNER JOIN coc_EServices ES (NOLOCK) ON ES.EServiceID = EV.EServiceID          
  INNER JOIN coc_Corporates C (NOLOCK) ON C.CorporateID  = VQR.CorporateID          
 WHERE  VE.ConsumerID =@ConsumerID AND VE.EVoucherBundleEligibilityForConsumersID=@EVoucherBundleEligibilityForConsumersID           
  AND (EV.EVoucherID=@EVoucherID) 
  and (EV.EVoucherTypeID=1 or EV.EVoucherTypeID is null)  
          
          
END          
END
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherDetailsByVoucherBundleID]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===============================================================================================
-- Author						:	Vikram
-- Create date					:	02-Dec-2017
-- Description					:	Get Voucher and Corporate details By Voucher Bundle ID
-- Update date					:	12-Dec-2017
-- Updated by					:	Vikram
-- ===============================================================================================
CREATE PROCEDURE [dbo].[GetVoucherDetailsByVoucherBundleID]
	@EVoucherBundleID				INTEGER,
	@LanguageID						INTEGER
AS
BEGIN
	
	SET NOCOUNT ON;

	BEGIN

		SELECT
			coc_Corporates.CorporateID, coc_Corporates.CorporateName, ISNULL(coc_EVoucherImages.ImageFile,'default.png')  AS VoucherImage, 
			coc_EVoucherLanguages.ResourceValue AS VoucherName, EL2.ResourceValue AS Description, 
			coc_Corporates.LogoFile AS CorporateLogo
		FROM
			coc_EVoucher (NOLOCK) INNER JOIN
			coc_EVoucherBundle(NOLOCK) ON coc_EVoucher.EVoucherID = coc_EVoucherBundle.EVoucherID LEFT JOIN
			coc_EVoucherImages(NOLOCK) ON coc_EVoucher.EVoucherID = coc_EVoucherImages.EVoucherID AND coc_EVoucherImages.IsPrimaryImage = @LanguageID INNER JOIN
			coc_EServices(NOLOCK) ON coc_EVoucher.EServiceID = coc_EServices.EServiceID INNER JOIN
			coc_Corporates(NOLOCK) ON coc_EServices.CorporateID = coc_Corporates.CorporateID INNER JOIN
			coc_EVoucherLanguages(NOLOCK) ON coc_EVoucher.EVoucherID = coc_EVoucherLanguages.EVoucherID AND 
			coc_EVoucherLanguages.ResourceKey = 'VoucherName' AND coc_EVoucherLanguages.LanguageID = @LanguageID INNER JOIN
			coc_EVoucherLanguages AS EL2(NOLOCK) ON coc_EVoucher.EVoucherID = EL2.EVoucherID AND 
			EL2.ResourceKey ='Description' AND EL2.LanguageID = @LanguageID
		WHERE
			coc_EVoucherBundle.EVoucherBundleID			=	@EVoucherBundleID

	END


END
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherDetailsReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetVoucherDetailsReport]                   
--    declare            
 @BundleID INTEGER=NULL,                                      
 @EVoucherID INTEGER=NULL,                            
 @FromDate DATETIME=NULL,                                      
 @ToDate DATETIME=NULL,                                      
 @CorporateID INTEGER=NULL,                                      
 @LanguageID INTEGER=1                              
 ,@PageSize  int=100                                                                                    
 ,@RecordCount bigint  output                                                                                
 ,@PageIndex int=1                           
AS                                                                                            
BEGIN                                         
  SET NOCOUNT ON;                                                                           
  declare @offset bigint,@fetch  bigint;                                                                    
     set @offset =@PageSize*(@PageIndex-1);                                                                    
     set @fetch =@PageSize;                                       
                                        
-- IF (@FromDate IS NULL)                                        
--   SET @FromDate = GetDate();                                                                    
-- IF (@ToDate IS NULL)                                        
--   SET @ToDate = dateadd(dd, + 1, GetDate());                                        
--IF (@LanguageID IS NULL)                                        
--  SET @LanguageID = 1;                                    
                                  
   DECLARE @GetVoucherDetailsReport TABLE (                     
    UniqueID INTEGER Identity(1,1),                     
   EVoucherID INTEGER,                          
   [EVoucherName] NVARCHAR(300),                          
   CorporateID INTEGER,                          
  [CorporateName] NVARCHAR(300),                          
   ConsumerID INT,                          
  [ConsumerName] NVARCHAR(300),                          
   MobileNo NVARCHAR(20),                          
  InvoiceAmount decimal(18,2),                          
  InvoiceNumber NVARCHAR(200),                          
  [VoucherDistributed] INTEGER,                                                  
  [VoucherDownloaded] INTEGER,                                                       
  [VoucherRemaining] INTEGER ,                                   
  BundleName NVARCHAR(300),                          
  Date nvarchar(20),           
  Time nvarchar(20),          
  MembershipID NVARCHAR(200),                          
  KioskLocation NVARCHAR(300),                          
  RetailOutlet NVARCHAR(300),                          
  UsedDate DateTime ,                
  VoucherUsed nvarchar(10)                
                                   
  )                  
            
             
                                       
   INSERT INTO @GetVoucherDetailsReport(EVoucherID,EVoucherName,UsedDate,ConsumerID,MobileNo,InvoiceAmount,InvoiceNumber,ConsumerName,Date,Time,MembershipID,CorporateID,CorporateName,KioskLocation,RetailOutlet,VoucherUsed)                                 
 
     SELECT  ev.EVoucherID,                            
 evl.ResourceValue [EVoucherName],   
 esb.UsedDate,                        
 esb.ConsumerID,   
 isnull(esb.AsignedMoile, cns.PrimaryMobile) MobileNo,  
 esb.InvoiceAmount, esb.InvoiceNumber,                      
 isnull(cns.FullName,'') AS [ConsumerName],                            
CONVERT(NVARCHAR(20),ev.ExpiryDate,103 )As Date,           
RIGHT(CONVERT(VARCHAR(30),(ev.ExpiryDate), 22), 11) as Time,          
 cns.MembershipNumber AS [MembershipID],                            
 es.CorporateID,                            
 crs.CorporateName ,                          
 kll.KioskLocation,                          
 rol.RetailOutlet,            
 CASE                            
  WHEN CONVERT(INT,esb.IsUsed)=1                            
    THEN 'Yes'                            
 ELSE 'No'                            
  END AS [VoucherUsed]                            
                            
   FROM  coc_EVoucher(nolock) ev                            
  -- INNER JOIN coc_EVoucherBundle(nolock) evb ON evb.EVoucherBundleID = d.EVoucherBundleID                           
   INNER JOIN coc_EVoucherLanguages(nolock) AS evl ON evl.EVoucherID=ev.EVoucherID AND evl.ResourceKey='VoucherName' AND evl.LanguageID=@LanguageID                            
   Inner join coc_EServices(nolock) es on es.EServiceID=ev.EServiceID                           
   --INNER JOIN coc_EBundleLanguages(nolock) AS ebl ON ebl.EBundleID=evb.EBundleID AND ebl.ResourceKey='BundleName' AND ebl.LanguageID=@LanguageID                            
   INNER JOIN coc_Corporates(nolock) AS crs ON crs.CorporateID=es.CorporateID                            
   --INNER  JOIN coc_EBundle(nolock) AS eb ON eb.EBundleID = evb.EBundleID                            
   --INNER JOIN coc_EVoucher(nolock) AS ev ON ev.EVoucherID=evb.EVoucherID                            
   LEFT OUTER JOIN coc_EServiceBarcodes(nolock) esb ON esb.EVoucherID = ev.EVoucherID --AND esb.DistributorCorporateID = d.CorporateID                            
   LEFT OUTER  JOIN coc_Consumers(nolock) AS cns ON cns.ConsumerID=esb.ConsumerID                              
   LEFT OUTER  JOIN coc_EVoucherBundleEligibilityForConsumers(nolock) evbe ON evbe.EVoucherBundleEligibilityForConsumersID = esb.EVoucherBundleEligibilityForConsumersID                            
   LEFT OUTER  JOIN coc_KioskLocationLanguages(nolock) kll on kll.KioskLocationID=esb.UsedAtKioskID and kll.LanguageID=@LanguageID                          
    LEFT OUTER  JOIN coc_KioskLocationRetailOutlets(nolock) klr on klr.KioskLocationID=esb.UsedAtKioskID                          
 LEFT OUTER  JOIN coc_RetailOutletLanguages(nolock) rol on rol.RetailOutletID=klr.RetailOutletID and rol.LanguageID=@LanguageID                          
   WHERE  ev.IsActive=1                          
 -- AND(@BundleID IS NULL OR evb.EBundleID=@BundleID)                            
  AND (@EVoucherID IS NULL OR ev.EVoucherID = @EVoucherID)                            
  AND(@FromDate IS NULL OR (es.FromDate >=@FromDate AND es.ToDate <=@ToDate))                            
  AND (@CorporateID IS NULL OR es.CorporateID=@CorporateID)                           
                             
                          
   select EVoucherID,EVoucherName,CONVERT(NVARCHAR(20),UsedDate,103)as usedDate, RIGHT(CONVERT(VARCHAR(30),UsedDate, 22), 11)as usedTime, ConsumerID,MobileNo,InvoiceAmount,InvoiceNumber,ConsumerName,Date,Time,MembershipID,CorporateID,CorporateName,
KioskLocation,RetailOutlet,VoucherUsed  from @GetVoucherDetailsReport                                   
                order by 1 desc    OFFSET @offset ROWS                                                                            
                          FETCH NEXT @fetch ROWS ONLY                                                                   
                                                                     
                                                    
                                    
                           
                                         
END
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherDirect]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetVoucherDirect]              
 @ConsumerID INTEGER               
,@GuestID INTEGER = NULL              
,@LanguageID INTEGER = 1              
,@VoucherID INTEGER               
,@Status INTEGER OUTPUT              
,@VoucherBarcode NVARCHAR(100) OUTPUT              
,@MessageText NVARCHAR(150) OUTPUT       
AS              
BEGIN              
BEGIN TRY              
     
 --DECLARE @CorporateID INTEGER              
 DECLARE @ServiceID INTEGER              
 DECLARE @NotificationID INTEGER              
 SELECT @ServiceID=EServiceID FROM coc_EVoucher(nolock)  WHERE EVoucherID=@VoucherID and (EVoucherTypeID=1 or EVoucherTypeID is null)                  
 SELECT @NotificationID=NotificationID FROM coc_Notifications(nolock) WHERE EServiceID=@ServiceID              
               
 --SELECT @CorporateID=CorporateID FROM coc_EVoucherBundleQRCode VQ              
 -- INNER JOIN coc_EVoucherBundleEligibilityForConsumers VE  ON VQ.EVoucherBundleQRCodeID=VE.EVoucherBundleQRCodeID              
 -- WHERE VE.EVoucherBundleEligibilityForConsumersID = @EVoucherBundleEligibilityForConsumersID              
              
 --DECLARE @AvailableVouchers INTEGER  

 -- For mobile testing purpose
 --if(exists (SELECT EServiceBarcodeID FROM coc_EServiceBarcodes(nolock)  WHERE NotificationID=@NotificationID           
 --AND ConsumerID =@ConsumerID AND IsDirectVoucher = 1 and  ISNULL(IsUsed,0)=0 ))
 --begin
 --   update coc_EServiceBarcodes set ConsumerID=NULL,EVoucherID=NULL,IsDirectVoucher=NULL,AssignedDate=NULL WHERE NotificationID=@NotificationID           
 --               AND ConsumerID =@ConsumerID AND IsDirectVoucher = 1 and  ISNULL(IsUsed,0)=0
 --end
 -- End
 
 DECLARE @ReceivedDirectVouchers INTEGER               
 SELECT @ReceivedDirectVouchers=Count(EServiceBarcodeID) FROM coc_EServiceBarcodes(nolock)  WHERE NotificationID=@NotificationID           
 AND ConsumerID =@ConsumerID AND IsDirectVoucher = 1 and  ISNULL(IsUsed,0)=0  
 Order by Rand()
 --SELECT @AvailableVouchers=Count(*) FROM coc_EServiceBarcodes  WHERE NotificationID=@NotificationID AND ConsumerID  IS NULL 
 
 if @ReceivedDirectVouchers > 0               
 SELECT @Status = 0              
 , @VoucherBarcode = NULL              
 ,@MessageText = 'You have already received a direct voucher'              
 ELSE              
 BEGIN              
  DECLARE @eServiceBarcodeID INTEGER              
  Declare @barcode nvarchar(100)              
                      
  SELECT TOP 1 @eServiceBarcodeID = EServiceBarcodeID, @barcode =Barcode FROM coc_EServiceBarcodes(nolock) WHERE NotificationID=@NotificationID   AND EVoucherID IS NULL  order by rand()             
  if @eServiceBarcodeID is null              
   SELECT @Status = 0              
  , @VoucherBarcode = NULL              
  ,@MessageText = 'Sorry there are no more vouchers available for this type'              
  ELSE              
  BEGIN              
              
              
   UPDATE               
      top (1) coc_EServiceBarcodes              
   SET              
    ConsumerID = @ConsumerID              
    , GuestID = @GuestID              
    , EVoucherID = @VoucherID              
    , IsDirectVoucher = 1              
   WHERE              
    EServiceBarcodeID = @eServiceBarcodeID              
          
      
   DECLARE @return_value int              
   EXEC @return_value = [dbo].[SaveNotificationForConsumer]               
       @TemplateID=NULL,              
       @MessageTitleText = "New Voucher",              
       @MessageText = "Dear @name, You have received new voucher from @corporate. The barcode is @barcode",              
       @ConsumerID = @ConsumerID,              
       @EServiceID = @ServiceID,              
       @Barcode = @barcode      
        
    
   if exists(select ConsumerID from coc_consumers (nolock) where consumerid=@ConsumerID and isnull(PromoCodeID,0)>0 and DATEDIFF(minute, getdate(),isnull(PromoCodeExpiryDate,getdate()))>0 and    
   Exists(select EVoucherID from coc_EVoucher(nolock) where EVoucherID=@VoucherID and Type=3))      
   begin      
     Declare @PromoCodeID bigint    
  Declare @CategoryID int    
  Declare @Discount decimal(18,2)    
  Declare @VoucherCategoryID bigint    
    
  select @PromoCodeID=PromoCodeID from coc_consumers (nolock) where consumerid=@ConsumerID and isnull(PromoCodeID,0)>0 and DATEDIFF(minute, getdate(),isnull(PromoCodeExpiryDate,getdate()))>0    
    
  select @CategoryID=CategoryID from coc_core_PromoCodes(nolock) where PromoCodeID=@PromoCodeID    
    
  if exists(select EVoucherCategoryID from coc_core_EVoucherCategories(nolock) where EVoucherID=@VoucherID and CategoryID=@CategoryID and IsDeleted=0)    
  begin    
         
  select top 1 @VoucherCategoryID=EVoucherCategoryID,@Discount=Discount from coc_core_EVoucherCategories(nolock) where EVoucherID=@VoucherID and CategoryID=@CategoryID and IsDeleted=0    
    
  UPDATE top (1) coc_EServiceBarcodes SET PromoCodeID = @PromoCodeID, EVoucherCategoryID = @VoucherCategoryID, ExtraDiscount = @Discount WHERE EServiceBarcodeID = @eServiceBarcodeID     
    
  Declare @NotificationSendID nvarchar(2000)    
  Declare @TotalDiscount decimal(18,2)    
    
  select @TotalDiscount=DiscountPercentage from coc_EVoucher(nolock) where EVoucherID=@VoucherID    
  set @TotalDiscount=@TotalDiscount+@Discount    
    
  select top 1 @NotificationSendID=NotificationSendID from coc_NotificationSends(nolock) where NotificationID in (select NotificationID from coc_Notifications(nolock) where EServiceID=@ServiceID)    
          and NotificationSendID in (select NotificationSendID from coc_NotificationSendLanguages(nolock) where LanguageID=1 and  Subject='New Voucher' and Message like '%The barcode is ~'+@barcode+'%')    
    
    
  update coc_NotificationSendLanguages set Message=Replace(Message,'The barcode is ~'+@barcode,'You are eligible for '+convert(nvarchar(20),@TotalDiscount)+'% discount. The barcode is ~'+@barcode) where NotificationSendID=@NotificationSendID    
      
  end    
   end      
    SELECT @Status = 1, @VoucherBarcode = @barcode ,@MessageText='Your request has been processed successfully'        
 END                   
END               
  select @VoucherBarcode Barcode,@MessageText DisplayMessage,6 as [TimeOut]
END try              
BEGIN CATCH                       
 SELECT @Status = 0, @MessageText=ERROR_MESSAGE()              
 RAISERROR(@MessageText, 16, 1);                 
END CATCH              
END
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherEligibilityCountForConsumer]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetVoucherEligibilityCountForConsumer]
 @ConsumerID INTEGER ,
 @EVoucherBundleEligibilityForConsumersID INTEGER
 ,@EligibleCount INTEGER OUTPUT
AS

BEGIN
DECLARE @IsActive BIT
 DECLARE @IsVerified BIT


	SELECT	 @EligibleCount=EligibleNoOfVouchers
			FROM coc_EVoucherBundleEligibilityForConsumers (NOLOCK)
			
			WHERE ConsumerID = @ConsumerID AND EVoucherBundleEligibilityForConsumersID=@EVoucherBundleEligibilityForConsumersID

END
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherEligiblityList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetVoucherEligiblityList]  
 @ConsumerID INTEGER   
,@LanguageID INTEGER = 1  
  
AS  
  
BEGIN  
  
DECLARE @minvalue INTEGER  
DECLARE @maxValue INTEGER  
DECLARE @id INTEGER  
DECLARE @myFindName NVARCHAR(100)  
DECLARE @myFindCount NVARCHAR(100)  
  
  
DECLARE @EligibilityMessages TABLE(UniqueID INTEGER IDENTITY(1,1),  
   EligibleNoOfVouchers INTEGER,  
   EVoucherBundleQRCodeID INTEGER,  
   Name NVARCHAR(100),  
   Mesage NVARCHAR(200))  
  
  
 INSERT INTO @EligibilityMessages  
 SELECT DISTINCT VE.EligibleNoOfVouchers AS EligibleNoOfVouchers  
   ,VE.EVoucherBundleQRCodeID AS EVoucherBundleQRCodeID  
   ,CP.CorporateName AS Name  
   ,BL.ResourceValue as Mesage  
   FROM coc_EVoucherBundleEligibilityForConsumers VE  (NOLOCK)
   INNER JOIN coc_EVoucherBundleQRCode VQ(NOLOCK) ON VE.EVoucherBundleQRCodeID = VQ.EVoucherBundleQRCodeID  
   INNER JOIN coc_Corporates CP(NOLOCK) ON VQ.CorporateID = CP.CorporateID  
   LEFT JOIN coc_EBundleLanguages BL(NOLOCK) ON BL.EBundleID = VQ.EBundleID AND ResourceKey ='EligibilityMessage' AND BL.LanguageID = @LanguageID  
   WHERE VE.ConsumerID = @ConsumerID AND VE.IsUsed=0   
   --and convert(date,VE.ExpiryDate) <= convert(date, getdate())  
    
  SELECT @minvalue = MIN(UniqueID) , @maxValue=MAX(UniqueID) FROM @EligibilityMessages  
  SET @id=@minvalue  
  WHILE @id<=@maxValue  
   BEGIN  
    DECLARE @massage NVARCHAR(100)  
    DECLARE @name NVARCHAR(100)  
    DECLARE @eligibileNoOfVouchers INTEGER  
  
    SELECT @massage = Mesage,@name=Name,@eligibileNoOfVouchers=EligibleNoOfVouchers FROM @EligibilityMessages WHERE UniqueID=@id  
    SELECT  @massage= REPLACE(@massage,'@distributorCorporate',@name)  
    SELECT @massage=REPLACE(@massage,'@eligibilityCount',@eligibileNoOfVouchers)  
  
    print @massage  
    UPDATE @EligibilityMessages SET Mesage=@massage WHERE UniqueID=@id  
    SET @id=@id+1  
   END  
  
 -- Get All eligibility list (corresponding to the scanned QRCodes)   
  
 SELECT CONVERT(NVARCHAR(12),VE.ExpiryDate,106) AS ExpiryDate  
   ,CONVERT(NVARCHAR(12),VE.EntryDate,106) AS EntryDate  
   ,VE.EligibleNoOfVouchers  
   ,VE.EVoucherBundleEligibilityForConsumersID  
   ,CP.LogoFile  
   ,CP.FirstName  
   ,CP.MiddleName   
   --,BL.ResourceValue as EligibilityMessage  
   ,EM.Mesage AS EligibilityMessage  
   FROM coc_EVoucherBundleEligibilityForConsumers VE  (NOLOCK)
INNER JOIN coc_EVoucherBundleQRCode VQ(NOLOCK) ON VE.EVoucherBundleQRCodeID = VQ.EVoucherBundleQRCodeID  
INNER JOIN coc_Corporates CP(NOLOCK) ON VQ.CorporateID = CP.CorporateID  
   INNER JOIN @EligibilityMessages EM ON EM.EVoucherBundleQRCodeID=VE.EVoucherBundleQRCodeID  
   LEFT JOIN coc_EBundleLanguages BL(NOLOCK) ON BL.EBundleID = VQ.EBundleID AND ResourceKey ='EligibilityMessage' AND BL.LanguageID = @LanguageID  
   WHERE VE.ConsumerID = @ConsumerID AND VE.IsUsed = 0   
   --and convert(date,VE.ExpiryDate) <= convert(date, getdate())  
  
   
  
END
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherImage]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetVoucherImage]

	@EVoucherID INTEGER,
	@EVoucherImageID INTEGER 

	AS
	BEGIN
	SELECT ImageFile,IsPrimaryImage FROM coc_EVoucherImages (NOLOCK)					
		
		WHERE EVoucherImagesID=@EVoucherImageID

	END
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherImageList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetVoucherImageList]

	@EVoucherID INTEGER

	AS
	BEGIN
	SELECT EVoucherImagesID,ImageFile,IsPrimaryImage FROM coc_EVoucherImages (NOLOCK)					
		
		WHERE EVoucherID=@EVoucherID

	END
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherIsActivated]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetVoucherIsActivated] 

@EVoucherID INTEGER
AS
	DECLARE @IsDesabled BIT = 0
	BEGIN
		IF(EXISTS(SELECT * FROM coc_EVoucherBundle EB (NOLOCK) INNER JOIN coc_EVoucherBundleDistribution EVD (NOLOCK) ON EB.EVoucherBundleID = EVD.EVoucherBundleID WHERE EB.EVoucherID = @EVoucherID))
			BEGIN
				SET @IsDesabled = 1
			END

		SELECT E.EVoucherID,E.IsAllowed, E.IsActive, @IsDesabled AS IsDesabled, E.IsAcceptedTC FROM coc_EVoucher  E(nolock)
		WHERE E.EVoucherID = @EVoucherID 

	END
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetVoucherList]  
 @ConsumerId INTEGER = null  
,@LanguageId INTEGER = 1  
,@CorporateID INTEGER = null  
,@CategoryID  INTEGER = null  
AS  
  
BEGIN  
 --Criteria  
 --Voucher should have associated service in valid date  
 --Voucher should be associated to a bundle which is active  
 --Voucher should be allocated to a distributor with a valid allocation (ie isactive=1)  
 --The corproate which created the voucher should be active  
  
  
 declare @canApply bit = 1  
   
-- SELECT DISTINCT  EV.EVoucherID, SL.EServiceID, EV.IsActive, EVL_Name.ResourceValue as Name, SL.EService,   
--  ISNULL(EV.ImageFile, ISNULL((SELECT top 1 ImageFile from coc_EVoucherImages EVI Where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1 and EVI.LanguageID = @LanguageId), (SELECT top 1 ImageFile from coc_EVoucherImages EVI Where EVI.EVoucherID= EV.EVoucherID and EVI.IsPrimaryImage = 1)))  as ImageFile,   
--  @canApply [CanApply],  
--  CONVERT(NVARCHAR(12),ES.FromDate,106) AS StartDate, CONVERT(NVARCHAR(12),ES.ToDate,106) AS EndDate,   
--  EVL_Desc.ResourceValue AS [Description],  
--  EVL_Loc.ResourceValue AS Location ,EVL_Remark.ResourceValue AS Remarks, --EB.EBundleID,  
--  C.CorporateID, C.CorporateName,   
--  EVL_Desc.ResourceValue Description  
--FROM coc_EVoucherBundleQRCode VQR  
-- INNER JOIN coc_EVoucherBundleEligibilityForConsumers VE(NOLOCK) ON VQR.EVoucherBundleQRCodeID=VE.EVoucherBundleQRCodeID   
-- INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVBD.CorporateID = VQR.CorporateID  
-- INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID   
-- INNER JOIN coc_EVoucher EV(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID and EV.IsActive = 1  
-- INNER JOIN coc_EVoucherLanguages EVL_Desc(NOLOCK) ON EVL_Desc.EVoucherID = EV.EVoucherID and EVL_Desc.LanguageID = @LanguageID and EVL_Desc.ResourceKey= 'Description'  
-- INNER JOIN coc_EVoucherLanguages EVL_Name ON EVL_Name.EVoucherID = EV.EVoucherID AND EVL_Name.LanguageID = @LanguageID AND EVL_Name.ResourceKey = 'VoucherName'  
-- LEFT JOIN coc_EVoucherLanguages EVL_Loc ON EVL_Loc.EVoucherID = EV.EVoucherID AND EVL_Loc.LanguageID = @LanguageID AND EVL_Loc.ResourceKey = 'LocationInfo'  
-- LEFT JOIN coc_EVoucherLanguages EVL_Remark ON EVL_Remark.EVoucherID = EV.EVoucherID AND EVL_Remark.LanguageID = @LanguageID AND EVL_Remark.ResourceKey = 'Remarks'  
-- INNER JOIN coc_EServices ES ON ES.EServiceID = EV.EServiceID  
-- INNER JOIN coc_EServiceLanguages SL(NOLOCK) ON SL.EServiceID = ES.EServiceID and SL.LanguageID = @LanguageID  
-- INNER JOIN coc_Corporates C ON C.CorporateID  = ES.CorporateID   
-- INNER JOIN coc_EVoucherCategory EVC ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID  
-- --INNER JOIN coc_EBundle EB ON EB.EBundleID = EVB.EBundleID   
--WHERE    
-- ES.FromDate <= getdate() and ES.ToDate >= getdate() AND EV.IsActive =1  
---- and VE.ConsumerID =@ConsumerID    
 ----ES.AddUserID = @ConsumerId  
  
 if(@CorporateID=0)    
        set @CorporateID=null    
  
 SELECT EV.EVoucherID, SL.EServiceID, EV.IsActive, EVL_Name.ResourceValue as Name, SL.EService,   
  ISNULL(EV.ImageFile, ISNULL((SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1 and EVI.LanguageID = @LanguageId), (SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID =
 EV.EVoucherID and EVI.IsPrimaryImage = 1)))  as ImageFile,   
  @canApply [CanApply],  
  CONVERT(NVARCHAR(12),ES.FromDate,106) AS StartDate, CONVERT(NVARCHAR(12),ES.ToDate,106) AS EndDate,   
  EVL_Desc.ResourceValue AS [Description],  
  EVL_Loc.ResourceValue AS Location ,EVL_Remark.ResourceValue AS Remarks, EVL_Terms.ResourceValue AS Terms,   
  C.CorporateID, C.CorporateName,   
  EVL_Desc.ResourceValue Description  
FROM coc_EVoucher EV(NOLOCK)   
 INNER JOIN coc_EVoucherLanguages EVL_Desc(NOLOCK) ON EVL_Desc.EVoucherID = EV.EVoucherID and EVL_Desc.LanguageID = @LanguageID and EVL_Desc.ResourceKey= 'Description'  
 INNER JOIN coc_EVoucherLanguages EVL_Name (NOLOCK) ON EVL_Name.EVoucherID = EV.EVoucherID AND EVL_Name.LanguageID = @LanguageID AND EVL_Name.ResourceKey = 'VoucherName'  
 LEFT JOIN coc_EVoucherLanguages EVL_Loc (NOLOCK) ON EVL_Loc.EVoucherID = EV.EVoucherID AND EVL_Loc.LanguageID = @LanguageID AND EVL_Loc.ResourceKey = 'LocationInfo'  
 LEFT JOIN coc_EVoucherLanguages EVL_Remark (NOLOCK) ON EVL_Remark.EVoucherID = EV.EVoucherID AND EVL_Remark.LanguageID = @LanguageID AND EVL_Remark.ResourceKey = 'Remarks'  
 LEFT JOIN coc_EVoucherLanguages EVL_Terms (NOLOCK) ON EVL_Terms.EVoucherID = EV.EVoucherID AND EVL_Terms.LanguageID = @LanguageID AND EVL_Terms.ResourceKey = 'Terms'  
 INNER JOIN coc_EServices ES (NOLOCK) ON ES.EServiceID = EV.EServiceID  
 INNER JOIN coc_EServiceLanguages SL(NOLOCK) ON SL.EServiceID = ES.EServiceID and SL.LanguageID = @LanguageID  
 INNER JOIN coc_Corporates C (NOLOCK) ON C.CorporateID  = ES.CorporateID   
 INNER JOIN coc_EVoucherCategory EVC (NOLOCK) ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID  
WHERE    
 ES.FromDate <= getdate() and ES.ToDate >= getdate() AND EV.IsActive = 1  
 and (@CategoryID  IS NULL or EV.EVoucherCategoryID = @CategoryID)  
 and (@CorporateID IS NULL or ES.CorporateID = @CorporateID)  
  
  
select C.CorporateID, C.CorporateName, EV.EVoucherID  
FROM coc_EVoucherBundleQRCode VQR  (NOLOCK)
 INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVBD.CorporateID = VQR.CorporateID  
 INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID   
 INNER JOIN coc_EVoucher EV(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID and EV.IsActive = 1  
 INNER JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID = EV.EServiceID  
 INNER JOIN coc_Corporates C (NOLOCK) ON C.CorporateID  = VQR.CorporateID  
WHERE    
 ES.FromDate <= getdate() and ES.ToDate >= getdate() AND EV.IsActive =1  
 and (@CategoryID  IS NULL or EV.EVoucherCategoryID = @CategoryID)  
 and (@CorporateID IS NULL or ES.CorporateID = @CorporateID)  
  
END  
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherListForBundle]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetVoucherListForBundle]  
 @ConsumerID INTEGER   
,@LanguageID INTEGER = 1  
,@EVoucherBundleEligibilityForConsumersID INTEGER  
,@CorporateID INTEGER=NULL  
  
AS  
  
BEGIN  
  
if (@CorporateID = 0)  
  set @CorporateID = null;  
  
SELECT EV.EVoucherID,VE.EligibleNoOfVouchers,ISNULL(EV.MaxNumberOfVouchersPerCustomerPerDay,1) MaxNumberOfVouchersPerCustomerPerDay , (select top 1 EVI.ImageFile from coc_EVoucherImages EVI (NOLOCK) where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage= 1  
order by EVI.EVoucherImagesID ) as ImageFile,  
EVL.ResourceValue as Name ,EVL_Desc.ResourceValue as Description, C.CorporateName  
  
FROM coc_EVoucherBundleQRCode VQR  (NOLOCK)
  
INNER JOIN coc_EVoucherBundleEligibilityForConsumers VE(NOLOCK) ON VQR.EVoucherBundleQRCodeID=VE.EVoucherBundleQRCodeID   
INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVBD.CorporateID = VQR.CorporateID  
INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID   
-- adding condition to narrow the filter to the bundle     
 AND EVB.EBundleID = VE.EBundleID  
  
INNER JOIN coc_EVoucher EV(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID and EV.IsActive = 1  
 INNER JOIN coc_EVoucherLanguages EVL (NOLOCK) ON EVL.EVoucherID = EV.EVoucherID AND EVL.LanguageID = @LanguageID AND EVL.ResourceKey = 'VoucherName'  
 INNER JOIN coc_EVoucherLanguages EVL_Desc (NOLOCK) ON EVL_Desc.EVoucherID = EV.EVoucherID AND EVL_Desc.LanguageID = 1  AND EVL_Desc.ResourceKey = 'Description'  
  
 INNER JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID = EV.EServiceID  
 INNER JOIN coc_Corporates C(NOLOCK) ON C.CorporateID  = ES.CorporateID   
  
WHERE VE.ConsumerID =@ConsumerID AND VE.EVoucherBundleEligibilityForConsumersID=@EVoucherBundleEligibilityForConsumersID  
AND (@CorporateID IS NULL or ES.CorporateID = @CorporateID)  
END
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherListing]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE PROCEDURE [dbo].[GetVoucherListing]          
 @ConsumerID INTEGER           
,@LanguageID INTEGER = 1          
,@EVoucherBundleEligibilityForConsumersID INTEGER = NULL          
,@EVoucherCategoryID INTEGER = NULL          
,@CorporateID INTEGER = NULL          
,@PageNumber INTEGER          
,@PageSize INTEGER          
,@TotalRecords INTEGER OUTPUT          
,@ScopeID INTEGER = NULL          
          
AS          
          
BEGIN          
             
DECLARE @FirstRecord INTEGER          
DECLARE @LastRecord INTEGER          
          
SET @FirstRecord = (@PageNumber - 1) * @PageSize          
SET @LastRecord = (@PageNumber * @PageSize + 1)          
          
if @EVoucherCategoryID = 0
	select @EVoucherCategoryID = null

DECLARE @ResultTable AS TABLE          
(          
[Id] INTEGER Identity (1,1),          
[CorporateID] INTEGER,          
[CorporateName] NVARCHAR(200),          
[ServiceName] NVARCHAR(1000),          
[Description] NVARCHAR(2000),          
[PrimaryImageURL] NVARCHAR(1000),          
[EVoucherID] INTEGER  ,        
[VoucherID] INTEGER  ,        
[IsPaymentEnabled] bit,        
[VoucherAmount] decimal(18,2),    
[Currency] nvarchar(10)    
)          
 -- SET IDENTITY_INSERT @ResultTable OFF        
if(@CorporateID=0)          
   set @CorporateID=null          
          
          
if @EVoucherBundleEligibilityForConsumersID is NULL          
BEGIN
   if exists(select * from coc_consumers(nolock) where ConsumerID=@ConsumerID and PromoCodeID is not null and DATEDIFF(minute, getdate(),PromoCodeExpiryDate)>0)
   begin
	 Declare @PromoCodeID bigint
	 Declare @CategoryID int

	 select @PromoCodeID=c.PromoCodeID,@CategoryID=cc.CategoryID from coc_consumers(nolock) c
	      inner join coc_core_promocodes(nolock) cp on cp.PromoCodeID=c.PromoCodeID
		  inner join coc_core_Category(nolock) cc on cc.CategoryID=cp.CategoryID   
	     where c.ConsumerID=@ConsumerID and c.PromoCodeID is not null and DATEDIFF(minute, getdate(),c.PromoCodeExpiryDate)>0 and cc.IsActive=1
	 
	  INSERT INTO @ResultTable           
			 SELECT distinct  C.CorporateID, C.CorporateName,           
			  dbo.udf_StripHTML(SL.EService) ServiceName, 
			  ISNULL((Case when @LanguageID=2 then ec.DescriptionAr else ec.Description end),dbo.udf_StripHTML(EVL_Desc.ResourceValue)) Description,  
			  ISNULL(ec.ImageName,ISNULL(EV.ImageFile, ISNULL((SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1 and EVI.LanguageID = @LanguageId), (SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID =
			EV.EVoucherID and EVI.IsPrimaryImage = 1))))  as PrimaryImageURL, EV.EVoucherID  ,    EV.EVoucherID ,   
			 ISNULL(EV.IsPaymentEnabled,0) IsPaymentEnabled,--added by rafeeq        
			 IsNull(EV.VoucherAmount,0) VoucherAmount, -- added by rafeeq      
			 IsNull(ccn.Currency,'SAR') Currency -- added by rafeeq        
			 FROM coc_EVoucher EV(NOLOCK)           
			 INNER JOIN coc_EVoucherLanguages EVL_Desc(NOLOCK) ON EVL_Desc.EVoucherID = EV.EVoucherID and EVL_Desc.LanguageID = @LanguageID and EVL_Desc.ResourceKey= 'Description'          
			 INNER JOIN coc_EServices S (NOLOCK) ON S.EServiceID = EV.EServiceID          
			 INNER JOIN coc_EServiceLanguages SL(NOLOCK) ON SL.EServiceID = S.EServiceID and SL.LanguageID = @LanguageID          
			 INNER JOIN coc_Corporates C (NOLOCK) ON C.CorporateID  = S.CorporateID           
			 INNER JOIN coc_EVoucherCategory EVC (NOLOCK) ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID 
			 left join coc_core_EVoucherCategories(nolock) ec on ec.EVoucherID=EV.EVoucherID and ec.IsDeleted=0 and ec.CategoryID=@CategoryID
			 Left Join coc_Countries ccn (NOLOCK) on ccn.CountryID = ev.CountryID  
			 WHERE  (@EVoucherCategoryID IS NULL OR EVC.EVoucherCategoryID=@EVoucherCategoryID)          
			  AND (@CorporateID IS NULL OR C.CorporateID=@CorporateID)          
			  AND EV.IsActive = 1 and getdate() between s.FromDate and s.ToDate      
			  and (EV.EVoucherTypeID=1 or EV.EVoucherTypeID is null)  
			 --GROUP BY C.CorporateID           
			 ORDER BY EV.EVoucherID desc 


      
   end
   else
   begin
             INSERT INTO @ResultTable           
				 SELECT distinct  C.CorporateID, C.CorporateName,           
				  dbo.udf_StripHTML(SL.EService) ServiceName,  dbo.udf_StripHTML(EVL_Desc.ResourceValue) Description,           
				  ISNULL(EV.ImageFile, ISNULL((SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1 and EVI.LanguageID = @LanguageId), (SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID =
				EV.EVoucherID and EVI.IsPrimaryImage = 1)))  as PrimaryImageURL, EV.EVoucherID  ,    EV.EVoucherID,    
				 ISNULL(EV.IsPaymentEnabled,0) IsPaymentEnabled,--added by rafeeq        
				 IsNull(EV.VoucherAmount,0) VoucherAmount, -- added by rafeeq      
				 IsNull(ccn.Currency,'SAR') Currency -- added by rafeeq        
				 FROM coc_EVoucher EV(NOLOCK)           
				 Left Join coc_Countries ccn (NOLOCK) on ccn.CountryID = ev.CountryID    
				 INNER JOIN coc_EVoucherLanguages EVL_Desc(NOLOCK) ON EVL_Desc.EVoucherID = EV.EVoucherID and EVL_Desc.LanguageID = @LanguageID and EVL_Desc.ResourceKey= 'Description'          
				 INNER JOIN coc_EServices S (NOLOCK) ON S.EServiceID = EV.EServiceID          
				 INNER JOIN coc_EServiceLanguages SL(NOLOCK) ON SL.EServiceID = S.EServiceID and SL.LanguageID = @LanguageID          
				 INNER JOIN coc_Corporates C (NOLOCK) ON C.CorporateID  = S.CorporateID           
				 INNER JOIN coc_EVoucherCategory EVC (NOLOCK) ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID 
				 WHERE  (@EVoucherCategoryID IS NULL OR EVC.EVoucherCategoryID=@EVoucherCategoryID)          
				  AND (@CorporateID IS NULL OR C.CorporateID=@CorporateID)          
				  AND EV.IsActive = 1 and getdate() between s.FromDate and s.ToDate      
				  and (EV.EVoucherTypeID=1 or EV.EVoucherTypeID is null) 
				 --GROUP BY C.CorporateID           
				 ORDER BY EV.EVoucherID desc 
   end

END          
ELSE          
BEGIN          
          
 DECLARE @bundleID INT = NULL          
 SELECT @bundleID = eb.EBundleID from coc_eBundle eb  (NOLOCK)        
  inner join coc_evoucherBundle evb (NOLOCK) on evb.EBundleId = eb.EBundleId          
  inner join coc_evoucherBundleEligibilityForConsumers evbe  (NOLOCK) on evbe.EBundleId= evb.EBundleId          
  where evbe.EVoucherBundleEligibilityForConsumersID = @EVoucherBundleEligibilityForConsumersID          
          
 INSERT INTO @ResultTable           
 SELECT distinct  C.CorporateID, C.CorporateName,           
  dbo.udf_StripHTML(SL.EService) ServiceName,  dbo.udf_StripHTML(EVL_Desc.ResourceValue) Description,           
  ISNULL(EV.ImageFile, ISNULL((SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1 and EVI.LanguageID = @LanguageId), (SELECT top 1 ImageFile from coc_EVoucherImages EVI (NOLOCK) Where EVI.EVoucherID =
EV.EVoucherID and EVI.IsPrimaryImage = 1)))  as PrimaryImageURL, EV.EVoucherID   ,    EV.EVoucherID   ,      
 ISNULL(EV.IsPaymentEnabled,0) IsPaymentEnabled,--added by rafeeq       
 IsNull(EV.VoucherAmount,0) VoucherAmount, -- added by rafeeq        
 IsNull(ccn.Currency,'SAR') Currency -- added by rafeeq        
 FROM coc_EVoucherBundleQRCode VQR  (NOLOCK)        
 INNER JOIN coc_EVoucherBundleEligibilityForConsumers VE(NOLOCK) ON VQR.EVoucherBundleQRCodeID=VE.EVoucherBundleQRCodeID           
 INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVBD.CorporateID = VQR.CorporateID          
 INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID           
 INNER JOIN coc_EVoucher EV(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID and EV.IsActive = 1    
 Left Join coc_Countries ccn (NOLOCK) on ccn.CountryID = ev.CountryID    
 INNER JOIN coc_EVoucherLanguages EVL_Desc(NOLOCK) ON EVL_Desc.EVoucherID = EV.EVoucherID and EVL_Desc.LanguageID = @LanguageID and EVL_Desc.ResourceKey= 'Description'          
 INNER JOIN coc_EServices S (NOLOCK) ON S.EServiceID = EV.EServiceID          
 INNER JOIN coc_EServiceLanguages SL(NOLOCK) ON SL.EServiceID = S.EServiceID and SL.LanguageID = @LanguageID          
 INNER JOIN coc_Corporates C (NOLOCK) ON C.CorporateID  = S.CorporateID           
 INNER JOIN coc_EVoucherCategory EVC (NOLOCK) ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID          
 WHERE  VE.ConsumerID =@ConsumerID           
  AND EVB.EBundleID = @bundleID          
  AND VE.EVoucherBundleEligibilityForConsumersID=@EVoucherBundleEligibilityForConsumersID           
  AND (@EVoucherCategoryID IS NULL OR EVC.EVoucherCategoryID=@EVoucherCategoryID)          
  AND (@CorporateID IS NULL OR C.CorporateID=@CorporateID)     
  and (EV.EVoucherTypeID=1 or EV.EVoucherTypeID is null)   
 --GROUP BY C.CorporateID           
 ORDER BY C.CorporateID           
END          
          
SELECT @TotalRecords = Count(*) FROM @ResultTable          
          
SELECT CorporateID, CorporateName, ServiceName,  Description, PrimaryImageURL, EVoucherID,IsPaymentEnabled,VoucherAmount,Currency, VoucherID FROM @ResultTable WHERE ID BETWEEN @FirstRecord AND @LastRecord          
          
--SELECT VI.ImageFile           
--FROM coc_EVoucherBundleQRCode VQR          
--INNER JOIN coc_EVoucherBundleEligibilityForConsumers VE(NOLOCK) ON VQR.EVoucherBundleQRCodeID=VE.EVoucherBundleQRCodeID           
--INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVBD.CorporateID = VQR.CorporateID          
--INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID           
--INNER JOIN coc_EVoucher EV(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID and EV.IsActive = 1          
--INNER JOIN coc_EVoucherImages VI(NOLOCK) ON VI.EVoucherID = EV.EVoucherID           
--INNER JOIN coc_EServices S ON S.EServiceID = EV.EServiceID          
--INNER JOIN coc_Corporates C ON C.CorporateID  = S.CorporateID           
--INNER JOIN coc_EVoucherCategory EVC ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID          
--WHERE  VE.ConsumerID =@ConsumerID AND VE.EVoucherBundleEligibilityForConsumersID=@EVoucherBundleEligibilityForConsumersID           
-- AND (@EVoucherCategoryID IS NULL OR EVC.EVoucherCategoryID=@EVoucherCategoryID)          
-- AND (@CorporateID IS NULL OR C.CorporateID=@CorporateID)          
--ORDER BY C.CorporateID           
          
          
          
          
END 
GO
/****** Object:  StoredProcedure [dbo].[GetVouchersByCorporate]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetVouchersByCorporate]  
 @corporateId INTEGER,  
 @LanguageId INTEGER,  
 @EBundleID INTEGER,  
 @EVoucherBundleID INTEGER=0  
AS  
BEGIN  
   
 SET NOCOUNT ON;  
  
 SELECT   
  ev.EVoucherID,  
  evl.ResourceValue AS [VoucherName],  
  es.EServiceID,  
  crs.CorporateID,  
  crs.CorporateName  
 FROM coc_EVoucher ev (NOLOCK)  
 INNER JOIN coc_EVoucherLanguages evl (NOLOCK) ON evl.EVoucherID=ev.EVoucherID AND evl.ResourceKey='VoucherName' AND evl.LanguageID=@LanguageId  
 INNER JOIN coc_EServices es (NOLOCK) ON es.EServiceID=ev.EServiceID  
 INNER JOIN coc_Corporates crs (NOLOCK) ON crs.CorporateID=es.CorporateID  
 WHERE crs.CorporateID=@corporateId AND   
  ev.IsActive=1 AND ev.IsAllowed=1 AND   
  --es.IsPaymentDone=1 AND  
  es.IsActive=1 AND  
  ev.EVoucherID NOT IN (SELECT EVoucherID FROM coc_EVoucherBundle (NOLOCK) WHERE EBundleID=@EBundleID AND EVoucherBundleID!=@EVoucherBundleID)  
      
END
GO
/****** Object:  StoredProcedure [dbo].[GetVouchersByCorporateId]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	Arya
-- Create date	:	08-02-2018
-- Description	:	Corporate voucher details
-- =============================================
CREATE PROCEDURE [dbo].[GetVouchersByCorporateId] 
	 @CorporateID	INTEGER
	,@LanguageID	INTEGER	=	1
	,@FromDate		datetime = null
	,@ToDate		datetime = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	SELECT		case when EB.IsUsed =1 then EB.Barcode else 'RIv9h/crrED3EmoJF0p34w==' end as Barcode , 
				EB.IsUsed, replace(convert(NVARCHAR, EB.UsedDate, 106), ' ', '/')as UsedDate,	EVL.ResourceValue AS VoucherName, 
				C.MembershipNumber, 
				case when eb.GuestID is not null then G.EmailID 
					else case when C.IsOutlookUser= 1 then 'Outlook: '+ C.OutlookID 
						else case when C.IsYahooUser= 1 then 'Yahoo: '+ C.YahooID 
							else case when C.IsFacebookUser= 1 then 'Facebook: '+C.FacebookID 
								else case when C.IsTwitterUser= 1 then 'Twitter: '+C.TwitterID else   C.EmailID  end end end  end end as EmailID, 
				C.PrimaryMobile, case when eb.GuestID is not null then  G.FullName else C.FirstName +' '+ISNULL(C.SecondName,'')+' '+ISNULL(C.FamilyName,'') end AS CustomerName,
				case when EB.IsUsed =0 then '-' else case when EB.UsedAtKioskID is null then 'Web' else 'Kiosk' end end AS Source, 
				case when EB.IsUsed =0 then '-' else case when EB.UsedAtKioskID is null then  ISNULL(U.EmailID,' ') else cast(ISNULL(KL.KioskLocationID,' ') as varchar) end end AS SourceInfo, 
				(Select top 1 rol.RetailOutlet from coc_KioskLocationRetailOutlets KRL (NOLOCK) INNER JOIN coc_RetailOutletLanguages ROL (NOLOCK) ON ROL.RetailOutletID = KRL.RetailOutletID AND ROL.LanguageID = @LanguageID
				 where KRL.KioskLocationID = KL.KioskLocationID ) AS RetailOutlet

	FROM		coc_EServiceBarcodes	EB (NOLOCK)
	INNER JOIN	coc_EVoucherLanguages	EVL (NOLOCK) ON	EVL.EVoucherID	=	EB.EVoucherID AND ResourceKey ='VoucherName'
	LEFT JOIN	coc_Consumers			C(NOLOCK)	ON	C.ConsumerID	=	EB.ConsumerID
	LEFT JOIN	coc_Guests				G(NOLOCK)	ON	G.GuestID		=	EB.GuestID
	LEFT JOIN	coc_KioskLocations		KL(NOLOCK)	ON  KL.KioskLocationID = EB.UsedAtKioskID
	LEFT JOIN	coc_Users				U (NOLOCK)	ON	U.UserID		= EB.UserId

	WHERE		EB.CorporateID = @CorporateID	AND	 
				EB.EVoucherID IS NOT NULL		AND	
				EB.CorporateID IS NOT NULL		AND
				EVL.LanguageID = @LanguageID
	ORDER BY EB.UsedDate DESC, ISNULL(EB.UsedDate, EB.EServiceBarcodeID) ASC

END
GO
/****** Object:  StoredProcedure [dbo].[GetWinnerByFilters]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetWinnerByFilters]     
   @LanguageID int =1  
,  @MobileNumber varchar(20)   
,  @ECouponID bigint = null 
, @Email nvarchar(200)=null  
AS    
SET NOCOUNT ON    
    
BEGIN    
   declare @ECouponWinnerID bigint  
 --select ECouponWinnerID, ConsumerName,* from coc_ECouponWinners where MobileNumber = @MobileNumber   
--and ECouponDrawPrizeID in (select ECouponDrawPrizeID from coc_ECouponDrawPrizes EDP inner join coc_ECouponDraw ED ON EDP.ECouponDrawID  
-- = ED.ECouponDrawID and ED.ECouponID= @ECouponID)  
  print('first select');  
  if @Email=''
  begin 
   set @Email=null
  end
    if @MobileNumber=''
  begin 
   set @MobileNumber=null
  end
select  EC.ECouponID, ECouponWinnerID, ConsumerName, MobileNumber, Email, DrawDateTime,  EPL.Value  from coc_ECoupons EC (NOLOCK)
 inner join coc_ECouponPrizes ECP (NOLOCK) ON ECP.ECouponID= EC.ECouponID  
  inner join coc_ECouponWinners EW (NOLOCK) ON EW.ECouponPrizeID = ECP.ECouponPrizeID  
  inner join coc_ECouponPrizesLanguages EPL(NOLOCK) ON EPL.ECouponPrizeID = EW.ECouponPrizeID and EPL.ResourceKey= 'Name' and EPL.LanguageID= 1  
 where  ( EW.MobileNumber= @MobileNumber or @MobileNumber is null)   and ( EW.Email= @Email or @Email is null)  
 and ECouponDrawPrizeID in (select ECouponDrawPrizeID from coc_ECouponDrawPrizes EDP (NOLOCK) inner join coc_ECouponDraw ED (NOLOCK) ON EDP.ECouponDrawID  
 = ED.ECouponDrawID and (ED.ECouponID= @ECouponID or @ECouponID is null))  
-- print('second select');  
--select @ECouponID= EC.ECouponID, @ECouponWinnerID = ECouponWinnerID  from coc_ECoupons EC  
--          inner join coc_ECouponPrizes ECP ON ECP.ECouponID= EC.ECouponID  
--  inner join coc_ECouponWinners EW ON EW.ECouponPrizeID = ECP.ECouponPrizeID  
-- where EW.MobileNumber = @MobileNumber and EW.Email = @Email  
-- and ECouponDrawPrizeID in (select ECouponDrawPrizeID from coc_ECouponDrawPrizes EDP inner join coc_ECouponDraw ED ON EDP.ECouponDrawID  
-- = ED.ECouponDrawID and (ED.ECouponID= @ECouponID or @ECouponID is null))  
--  print('third select');  
---- select @ECouponID= 10102, @ECouponWinnerID =12496  
--select ESL.EService from coc_ECoupons EC inner join coc_EServiceLanguages ESL ON ESL.EServiceID= EC.EServiceID  
-- where (EC.ECouponID= @ECouponID or @ECouponID is null) and ESL.LanguageID= 1  
END 
GO
/****** Object:  StoredProcedure [dbo].[GetWinners]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetWinners]             
   @EServiceID INTEGER = NULL            
 , @LanguageID INTEGER = 1            
 , @ECouponID INTEGER = NULL            
 , @CorporateID INTEGER = 8            
 , @DrawID INTEGER = NULL            
 , @PageIndex INT = 1             
 , @IsReport bit = 0         
AS      
SET NOCOUNT ON          
          
BEGIN            
DECLARE @TEMPTABLE TABLE (              
DrawDateTime DATETIME NULL           
,[Location] NVARCHAR(500)             
,ConsumerID  NVARCHAR(100)             
,ConsumerName NVARCHAR(500)             
,PrizeDetail REMARK NULL             
,ECouponPrizeID BIGINT             
,FirstName NVARCHAR(500)             
,SecondName NVARCHAR(500)             
);           
 DECLARE @SKIP INT;            
 DECLARE @TAKE INT;           
 DECLARE @NUMBEROFRECORDS INT;
 DECLARE @TotalRecords int;           
SET @NUMBEROFRECORDS = 200;             
if(@DrawID is not null)      
set @NUMBEROFRECORDS=(select sum(frequency) from coc_ECouponDrawPrizes(nolock) where ECouponDrawID=@DrawID)    
if (@IsReport = 1)         
SET @NUMBEROFRECORDS = POWER(2.,31)-1;                 
SET @TAKE = @NUMBEROFRECORDS;   
IF ( @PageIndex = 0 OR @PageIndex = 1 )
BEGIN            
 SET @PageIndex = 1;          
    SET @SKIP = 0;            
	END          
  ELSE           
   BEGIN             
   SET @SKIP = @TAKE * (@PageIndex-1);            
   END                       
   IF @CorporateID = - 1  OR @CorporateID = 0   
             SELECT @CorporateID = NULL
   INSERT INTO @TEMPTABLE         
   SELECT DrawDateTime     
   --,EDL.Value AS Location     
  ,CASE     WHEN  EDL.Value IS NULL    THEN (Select  RetailOutlet from coc_RetailOutletLanguages(NOLOCK)  where RetailOutletID =(select  CONVERT(int,RetailOutlets) asRetailOutletID from   coc_ECouponDrawPrizes(NOLOCK)  where ECouponDrawID =ED.ECouponDrawID ) AND LanguageID = @LanguageID )    ELSE    EDL.Value    END AS [Location]        
   ,CASE               WHEN @corporateID IS NULL               THEN ISNULL(cast(EW.MemberShipID AS VARCHAR), '-')   ELSE EW.MobileNumber              END AS ConsumerID             
   ,(Case when EW.ConsumerName is not null then EW.ConsumerName else COALESCE(C.FirstName,C.SecondName,C.FamilyName) end )ConsumerName            ,ISNULL(EW.PrizeDetail, EPL.Value) AS PrizeDetail             
   ,EW.ECouponPrizeID             
   ,(Case when EW.ConsumerName is not null then EW.ConsumerName else isnull(C.FirstName,'') end ) AS FirstName             ,'' AS SecondName            
   FROM coc_ECouponWinners EW(NOLOCK)            
   LEFT JOIN coc_Consumers C(NOLOCK) ON C.ConsumerID = EW.ConsumerID            
   INNER JOIN coc_ECouponDrawPrizes EDP(NOLOCK) ON EDP.ECouponDrawPrizeID = EW.ECouponDrawPrizeID            
   INNER JOIN coc_ECouponPrizesLanguages EPL(NOLOCK) ON EPL.ECouponPrizeID = EDP.ECouponPrizeID             
   AND EPL.LanguageID = @LanguageID             AND EPL.ResourceKey = 'Name'            
   INNER JOIN coc_ECouponDraw ED(NOLOCK) ON ED.ECouponDrawID = EDP.ECouponDrawID           
   LEFT JOIN coc_ECouponDrawLanguages EDL(NOLOCK) ON EDL.ECouponDrawID = ED.ECouponDrawID 
   AND EDL.LanguageID = @LanguageID             AND EDL.ResourceKey = 'LocationDescription'     
   INNER JOIN coc_ECoupons EC(NOLOCK) ON EC.ECouponID = ED.ECouponID            
   INNER JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID = EC.EServiceID 
   WHERE ( @ECouponID IS NULL  OR ED.ECouponID = @ECouponID )    
   AND (  @CorporateID IS NULL OR ES.CorporateID = @CorporateID )  
   AND (  @DrawID IS NULL OR ED.ECouponDrawID = @DrawID  )  
    AND NOT ( @corporateID IS NULL    AND @drawID IS NULL   AND @ecouponID IS NULL )             
	and ECouponWinnerID not in (24561,24562,24563,24564,24565)      
	ORDER BY convert(date,DrawDateTime) desc, EW.ECouponWinnerID asc -- ED.ECouponDrawID desc, EDP.ECouponPrizeID -- DrawDateTime desc, ED.ECouponDrawID desc              
 OFFSET @SKIP ROWS -- skip 10 rows            
 FETCH NEXT @TAKE ROWS ONLY;-- take 10 rows                      
  SET @TotalRecords = (SELECT count(*) FROM coc_ECouponWinners EW(NOLOCK)           
   LEFT JOIN coc_Consumers C(NOLOCK) ON C.ConsumerID = EW.ConsumerID            
   INNER JOIN coc_ECouponDrawPrizes EDP(NOLOCK) ON EDP.ECouponDrawPrizeID = EW.ECouponDrawPrizeID    
   INNER JOIN coc_ECouponPrizesLanguages EPL(NOLOCK) ON EPL.ECouponPrizeID = EDP.ECouponPrizeID             
   AND EPL.LanguageID = @LanguageID             AND EPL.ResourceKey = 'Name'    
   INNER JOIN coc_ECouponDraw ED(NOLOCK) ON ED.ECouponDrawID = EDP.ECouponDrawID           
   LEFT JOIN coc_ECouponDrawLanguages EDL(NOLOCK) ON EDL.ECouponDrawID = ED.ECouponDrawID 
   AND EDL.LanguageID = @LanguageID             AND EDL.ResourceKey = 'LocationDescription'      
LEFT JOIN coc_ECouponDrawPrizes(NOLOCK) EDRO ON EDRO.ECouponDrawID =ED.ECouponDrawID   
  
INNER JOIN coc_ECoupons EC(NOLOCK) ON EC.ECouponID = ED.ECouponID            
INNER JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID = EC.EServiceID            
WHERE (@ECouponID IS NULL OR ED.ECouponID = @ECouponID ) AND ( @CorporateID IS NULL OR ES.CorporateID = @CorporateID )
 AND ( @DrawID IS NULL OR ED.ECouponDrawID = @DrawID ) AND NOT ( @corporateID IS NULL AND @drawID IS NULL AND @ecouponID IS NULL ) 
 and ECouponWinnerID not in (24561,24562,24563,24564,24565) ); 
  SELECT DrawDateTime              
  ,[Location]              
  ,ConsumerID             
  ,ConsumerName  
  ,PrizeDetail  
  ,ECouponPrizeID 
  ,FirstName  
  ,SecondName   
  ,@TotalRecords TotalRecords  
  FROM @TEMPTABLE;          
 END                      
 SET NOCOUNT OFF
 
 -----------------------------------------------------------------------------------------------------------------------------------------
 
 
GO
/****** Object:  StoredProcedure [dbo].[GetWinnersList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetWinnersList]
	@eServiceID INTEGER 
AS
SET NOCOUNT ON
	BEGIN
		SELECT EW.ConsumerID fROM coc_ECouponWinners (NOLOCK) EW
			INNER JOIN coc_ECouponPrizes (NOLOCK) EP ON EW.ECouponPrizeID=EP.ECouponPrizeID
			INNER JOIN coc_ECoupons (NOLOCK) EC ON EP.ECouponID=EC.ECouponID
		WHERE EC.EServiceID=@eServiceID
		and ECouponWinnerID not in (24561,24562,24563,24564,24565)
	END
SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[GetWinnersReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
-- =============================================  
-- Author  : Arya  
-- Create date : 23-01-2017  
-- Description : Get Winners(with mobile, barcode and nationality)  
-- =============================================  
  
CREATE PROCEDURE [dbo].[GetWinnersReport]  
 @EServiceID INTEGER = null   
 ,@LanguageID INTEGER = 1  
 ,@ECouponID INTEGER = null  
 ,@CorporateID integer = null  
 ,@DrawID INTEGER = null  
AS  
SET NOCOUNT ON  
 BEGIN  
  if @CorporateID = -1  
   SELECT @CorporateID = null  
  
  SELECT CONVERT(varchar, EW.DrawDateTime, 101) AS DrawDateTime, EDL.Value as Location, EW.MemberShipID,  
    EW.ConsumerName, EW.PrizeDetail as PrizeDetail, EW.ECouponPrizeID,   
    EW.MobileNumber, NL.Nationality, C.ConsumerID,   
    (select top 1 ECP.Barcode from coc_ECouponParticipations ECP (NOLOCK) where ECP.ConsumerID = EW.ConsumerID and ECP.ECouponID = EC.ECouponID order by ECP.ECouponParticipationID desc) AS Barcode,  
     ES.EServiceID, EC.ECouponID  
  FROM coc_ECouponWinners EW  (NOLOCK)
   LEFT JOIN coc_Consumers C (NOLOCK) ON C.ConsumerID = EW.ConsumerID  
   INNER JOIN coc_ECouponDrawPrizes EDP(NOLOCK) ON EDP.ECouponDrawPrizeID =EW.ECouponDrawPrizeID  
   INNER JOIN coc_ECouponPrizesLanguages EPL(NOLOCK) ON EPL.ECouponPrizeID =EDP.ECouponPrizeID and EPL.LanguageID = @LanguageID and EPL.ResourceKey = 'Name'  
   INNER JOIN coc_ECouponDraw ED (NOLOCK) ON ED.ECouponDrawID = EDP.ECouponDrawID  
   INNER JOIN coc_ECouponDrawLanguages EDL(NOLOCK) ON EDL.ECouponDrawID=EDP.ECouponDrawID and EDL.LanguageID= @LanguageID and EDL.ResourceKey = 'LocationDescription'  
   INNER JOIN coc_ECoupons EC(NOLOCK) ON EC.ECouponID=ED.ECouponID  
   INNER JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID=EC.EServiceID  
   LEFT JOIN coc_NationalityLanguages NL (NOLOCK) ON NL.NationalityID = C.NationalityID AND NL.LanguageID =@LanguageID  
  WHERE(@ECouponID IS NULL OR ED.ECouponID=@ECouponID) AND  
    (@DrawID IS NULL OR ED.ECouponDrawID=@DrawID) AND  
    (@CorporateID IS NULL OR ES.CorporateID=@CorporateID)  
   order by EDP.ECouponDrawPrizeID asc, DrawDateTime desc  
  
   
  
 END  
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[ImportCorporateUserData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ImportCorporateUserData]  
	@XmlData XML,	 
	@UserID INTEGER,
	--@CorporateID INTEGER,
	@ErrorMessage [Remark] OUTPUT 
AS 
	SET NOCOUNT ON
	BEGIN TRY
	BEGIN TRANSACTION TRN_SaveCourier
 		DECLARE @CorporateUser AS TABLE 
		(
			EmployeeName [Name], 
			CorporateNumber [NullCode],
			UserName [Description], 
			EmailID [Email],
			MobileNumber [Mobile] NULL,
			[Password] NVARCHAR(55),
			AllowRedeeming BIT,
			RetailOutletID INTEGER--,
			--CorporateID INTEGER
		)
		BEGIN
			INSERT INTO @CorporateUser(EmployeeName,CorporateNumber,UserName,EmailID,MobileNumber,[Password],AllowRedeeming,RetailOutletID)--,CorporateID)
				SELECT  
					CorporateUser.value('(EmployeeName[1])', '[Name]'),
					CorporateUser.value('(CorporateNumber[1])', '[NullCode]'),
					CorporateUser.value('(UserName[1])', '[Description]'),
					CorporateUser.value('(EmailID[1])', '[Email]'),
					CorporateUser.value('(MobileNumber[1])', '[Mobile]'),
					CorporateUser.value('(Password[1])', 'NVARCHAR(55)'),
					CorporateUser.value('(AllowRedeeming[1])', 'BIT'),
					CorporateUser.value('(RetailOutletID[1])', 'INTEGER')--,
					--CorporateUser.value('(CorporateID[1])', 'INTEGER')
				FROM @XmlData.nodes('/NewDataSet/Table1') AS Data(CorporateUser)

			INSERT INTO coc_CorporateUsers(CorporateNumber,EmployeeName,UserID,CorporateID,RetailOutletID,MobileNumber,EmailID,AddDate,AddUserID,AllowRedeeming)	
				SELECT CU.CorporateNumber,CU.EmployeeName,@UserID,2,CU.RetailOutletID,CU.MobileNumber,CU.EmailID,GETDATE(),@UserID,CU.AllowRedeeming
					 FROM  @CorporateUser CU

			INSERT INTO coc_Users(UserName,[Password],RoleID,MobileNumber,EmailID,ResetRequired,CreatedDate)
				SELECT CU.EmailID,CU.[Password],4,CU.MobileNumber,CU.EmailID,1,GETDATE() FROM  @CorporateUser CU
		END 
		SELECT @ErrorMessage='';
		COMMIT TRANSACTION TRN_SAVECAMPAIGNDETAILS
	END TRY
	BEGIN CATCH 
		SELECT @ErrorMessage=ERROR_MESSAGE()
		ROLLBACK TRANSACTION TRN_SaveCourier
	END CATCH
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[InsertCompetitionRegistration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[InsertCompetitionRegistration](
            @CompanyName nvarchar(200)
           ,@CompanyCRNumber nvarchar(30)
           ,@AgencyName nvarchar(200)
           ,@AgencyCRNumber nvarchar(30)
           ,@NumberofECoupons bigint
           ,@NumberofDraw bigint
           ,@NumberofPrize bigint
           ,@StartDate datetime
           ,@EndDate datetime
           ,@Questions bit
           ,@Survey bit
           ,@ScanCoupon bit
           ,@StandardCoupons bit
           ,@CreatedBy bigint
           ,@Createddate datetime
           )
AS

INSERT INTO [dbo].[coc_CompetitionRegistration]
           ([CompanyName]
           ,[CompanyCRNumber]
           ,[AgencyName]
           ,[AgencyCRNumber]
           ,[NumberofECoupons]
           ,[NumberofDraw]
           ,[NumberofPrize]
           ,[StartDate]
           ,[EndDate]
           ,[Questions]
           ,[Survey]
           ,[ScanCoupon]
           ,[StandardCoupons]
           ,[CreatedBy]
           ,[Createddate]
          )
     VALUES
           (@CompanyName
           ,@CompanyCRNumber
           ,@AgencyName
           ,@AgencyCRNumber
           ,@NumberofECoupons
           ,@NumberofDraw
           ,@NumberofPrize
           ,@StartDate
           ,@EndDate
           ,@Questions
           ,@Survey
           ,@ScanCoupon
           ,@StandardCoupons
           ,@CreatedBy
           ,@Createddate
           )
GO
/****** Object:  StoredProcedure [dbo].[InsertCompetitionRegistrationDraws]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[InsertCompetitionRegistrationDraws](
            @DrawDate datetime
           ,@NoOfWinners bigint
           ,@CompetitionRegistrationID bigint
           ,@CreatedBy bigint
           ,@Createddate datetime         
		   )
AS
INSERT INTO [dbo].[coc_CompetitionRegistrationDraws]
           ([DrawDate]
           ,[NoOfWinners]
           ,[CompetitionRegistrationID]
           ,[CreatedBy]
           ,[Createddate]
           )
     VALUES
           (@DrawDate 
           ,@NoOfWinners 
           ,@CompetitionRegistrationID 
           ,@CreatedBy 
           ,@Createddate 
		   )
GO
/****** Object:  StoredProcedure [dbo].[InsertResource]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[InsertResource]
@ScreenID INTEGER,
@ScreenViewID INTEGER = NULL,
@ResourceKey NVARCHAR(100),
@ResourceValue NVARCHAR(1000),
@ResourceText NVARCHAR(1000)
AS

IF (NOT EXISTS (SELECT * FROM [coc_Resources] (NOLOCK) WHERE [ScreenID] = @ScreenID AND [ResourceKey]=@ResourceKey AND [LanguageID]=1))
BEGIN
INSERT INTO [dbo].[coc_Resources]
           ([ScreenID]
           ,[ScreenViewID]
           ,[LanguageID]
           ,[ResourceKey]
           ,[ResourceValue]
           ,[ResourceText])
     VALUES
           (@ScreenID
           ,@ScreenViewID
           ,1
           ,@ResourceKey
           ,@ResourceText
		   ,@ResourceText)
	END


IF (NOT EXISTS (SELECT * FROM [coc_Resources] (NOLOCK) WHERE [ScreenID] = @ScreenID AND [ResourceKey]=@ResourceKey AND [LanguageID]=2))
BEGIN
INSERT INTO [dbo].[coc_Resources]
           ([ScreenID]
           ,[ScreenViewID]
           ,[LanguageID]
           ,[ResourceKey]
           ,[ResourceValue]
           ,[ResourceText])
     VALUES
           (@ScreenID
           ,@ScreenViewID
           ,2
           ,@ResourceKey
           ,@ResourceText
		   ,@ResourceText)
	END


IF (NOT EXISTS (SELECT * FROM [coc_Resources] (NOLOCK) WHERE [ScreenID] = @ScreenID AND [ResourceKey]=@ResourceKey AND [LanguageID]=3))
BEGIN
INSERT INTO [dbo].[coc_Resources]
           ([ScreenID]
           ,[ScreenViewID]
           ,[LanguageID]
           ,[ResourceKey]
           ,[ResourceValue]
           ,[ResourceText])
     VALUES
           (@ScreenID
           ,@ScreenViewID
           ,3
           ,@ResourceKey
           ,@ResourceText
		   ,@ResourceText)
	END
GO
/****** Object:  StoredProcedure [dbo].[IsRedeemPermission]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[IsRedeemPermission]
	@UserID INTEGER,
	@ErrorMessage [Remark] OUTPUT
AS
	SET NOCOUNT ON
		BEGIN
		DECLARE @Permission NVARCHAR(125)
			SELECT @Permission=AllowRedeeming FROM coc_CorporateUsers(NOLOCK) 
			WHERE UserID=@UserID
			SELECT @ErrorMessage= @Permission
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[IsValidKioskUser]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[IsValidKioskUser] @UserName NVARCHAR(500)
,                                         @KioskLocationID INTEGER
AS
	SET NOCOUNT ON
	SELECT TOP(1) US.UserID           
	,             KL.UserName         
	,             KL.[Password]       
	,             KL.IsActive         
	,             (4)                  as RoleID
	,             US.MobileNumber     
	,             US.EmailID          
	,             KLRO.KioskLocationID
	FROM       [coc_KioskLocations]             KL   (NOLOCK)        
	inner JOIN [coc_KioskLocationRetailOutlets] KLRO (NOLOCK) ON KL.KioskLocationID= KLRO.KioskLocationID
	inner JOIN [coc_RetailOutlets]              RO (NOLOCK)   ON RO.RetailOutletID = KLRO.RetailOutletID
	inner JOIN coc_corporates                   CO (NOLOCK)   on CO.CorporateID = RO.CorporateID
	inner JOIN [coc_Users]                      US (NOLOCK)   ON CO.UserID=US.UserID
	where KL.UserName = @UserName AND KL.IsActive=1 and KL.KioskLocationID = @KioskLocationID
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[IsValidUser]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[IsValidUser] 
	@UserName NVARCHAR(500),
	@SocialUserID INTEGER=NULL
AS
	SET NOCOUNT ON 
		IF @SocialUserID IS NULL
		BEGIN
			SELECT TOP(1) US.UserID,UserName,US.[Password],US.IsActive,RoleID,US.MobileNumber,US.EmailID,LS.LoginTime,CASE WHEN ISNULL(CE.CorporateID,'')='' THEN ISNULL(CR.CorporateID,'') ELSE CE.CorporateID END CorporateID,cr.JCCICode,US.ResetRequired,
				ISNULL(CS.ConsumerID,0) [ConsumerID],CS.IsVerified, CS.OtpID [VerificationCode],CASE WHEN ROLEID=3 THEN ISNULL(CR.FirstName,'') ELSE ISNULL(CS.FirstName,'') END FirstName,ISNULL(US.FullName,'')FullName,ISNULL(CU.EmployeeName,'')EmployeeName,
				CASE WHEN ROLEID=3 THEN CA.City ELSE CL.City END [City],CASE WHEN ROLEID=3 THEN SG.Country ELSE CG.Country END [Country],CASE WHEN ISNULL(CS.Address1,'') ='' THEN 'Address' ELSE  CS.Address1 END Address1, 
				CASE WHEN ROLEID=3 THEN ISNULL(CR.LastName,'') ELSE CS.FamilyName END [FamilyName],CR.LogoFile
					FROM [coc_Users] US (NOLOCK)
						LEFT JOIN [coc_LoginUsers] LS(NOLOCK) ON  LS.UserID=US.UserID AND LS.UserID IS NOT NULL 
						LEFT JOIN [coc_Corporates] CR (NOLOCK) ON CR.UserID=US.UserID
						LEFT JOIN [coc_CorporateUsers] CE (NOLOCK) ON CE.UserID=US.UserID
						LEFT JOIN [coc_Consumers] CS (NOLOCK) ON CS.UserID=US.UserID
						LEFT JOIN [coc_CorporateUsers] CU (NOLOCK) ON CU.UserID=US.UserID
						LEFT JOIN [coc_CityLanguages] CL(NOLOCK) ON CS.CityID=CL.CityID AND CL.LanguageID=1
						LEFT JOIN [coc_CountryLanguages] CG(NOLOCK) ON CS.CountryID=CG.CountryID AND CG.LanguageID=1
						LEFT JOIN [coc_CityLanguages] CA(NOLOCK) ON CR.CityID=CA.CityID AND CA.LanguageID=1
						LEFT JOIN [coc_CountryLanguages] SG(NOLOCK) ON CR.CountryID=SG.CountryID AND SG.LanguageID=1
					WHERE UserName=@UserName --AND US.IsActive=1
			ORDER BY LS.LoginTime DESC
		END
		ELSE IF(@SocialUserID=1)
		BEGIN
			SELECT TOP(1) US.UserID,UserName,[Password],US.IsActive,RoleID,US.MobileNumber,US.EmailID,US.ResetRequired,CU.ConsumerID,CU.FacebookID,CU.IsVerified
				FROM [coc_Users](NOLOCK) US 
					INNER JOIN coc_Consumers (NOLOCK) CU ON CU.GmailID=US.UserName OR CU.EmailID=US.UserName
				WHERE US.UserName=@UserName AND US.IsActive=1
		END
		ELSE IF(@SocialUserID=2)
		BEGIN
			SELECT TOP(1) US.UserID,UserName,[Password],US.IsActive,RoleID,US.MobileNumber,CU.EmailID,US.ResetRequired,CU.ConsumerID,CU.FacebookID,CU.IsVerified
				FROM [coc_Users](NOLOCK) US 
					INNER JOIN coc_Consumers (NOLOCK) CU ON CU.FacebookID=US.UserName
				WHERE US.UserName=@UserName AND US.IsActive=1
		END
		ELSE IF(@SocialUserID=3)
		BEGIN
			SELECT TOP(1) US.UserID,UserName,[Password],US.IsActive,RoleID,US.MobileNumber,US.EmailID,US.ResetRequired,CU.ConsumerID,CU.FacebookID,CU.IsVerified
				FROM [coc_Users](NOLOCK) US 
					INNER JOIN coc_Consumers (NOLOCK) CU ON CU.YahooID=US.UserName
				WHERE US.UserName=@UserName AND US.IsActive=1
		END
		ELSE IF(@SocialUserID=5)
		BEGIN
			SELECT TOP(1) US.UserID,UserName,[Password],US.IsActive,RoleID,US.MobileNumber,US.EmailID,US.ResetRequired,CU.ConsumerID,CU.FacebookID,CU.IsVerified	 
				FROM [coc_Users](NOLOCK) US 
					INNER JOIN coc_Consumers (NOLOCK) CU ON CU.TwitterID=US.UserName
				WHERE US.UserName=@UserName AND US.IsActive=1
		END
		ELSE IF(@SocialUserID=4)
		BEGIN
			SELECT TOP(1) US.UserID,UserName,[Password],US.IsActive,RoleID,US.MobileNumber,US.EmailID,US.ResetRequired,CU.ConsumerID,CU.FacebookID,CU.IsVerified	 
				FROM [coc_Users](NOLOCK) US 
					INNER JOIN coc_Consumers (NOLOCK) CU ON CU.OutlookID=US.UserName
				WHERE US.UserName=@UserName AND US.IsActive=1
		END


	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[JCCI_InsertCompetitionAward]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[JCCI_InsertCompetitionAward]  
	@CompetitionID int = NULL,
	@Name Name= NULL,
	@Number int= NULL,
	@Value Name= NULL,
	@AddDate datetime= NULL
	
AS
	SET NOCOUNT ON
		BEGIN
		select @AddDate = getdate()

INSERT INTO [dbo].[jcci_Competition_Award]
           ([CompetitionID]
           ,[Name]
           ,[Number]
           ,[Value]
           ,[AddDate])
     VALUES
           (	@CompetitionID,
				@Name,
				@Number,
				@Value,
				@AddDate
				
			)
			SELECT SCOPE_IDENTITY()
		END
	SET NOCOUNT OFF
	

GO
/****** Object:  StoredProcedure [dbo].[JCCI_InsertCompetitionBranch]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[JCCI_InsertCompetitionBranch]  
	@CompetitionID int = NULL,
	@GUID Name= NULL,
	@BranchName Name = NULL,
	@Location Name= NULL,
	@AddDate datetime= NULL
	
AS
	SET NOCOUNT ON
		BEGIN

		SELECT @AddDate = getdate()

INSERT INTO [dbo].[jcci_Competition_branch]
           ([CompetitionID]
           ,[GUID]
           ,[BranchName]
           ,[Location]
           ,[AddDate])
     VALUES
           (	@CompetitionID,
				@GUID,
				@BranchName,
				@Location,
				@AddDate
			)
			SELECT SCOPE_IDENTITY()
		END
	SET NOCOUNT OFF
	


GO
/****** Object:  StoredProcedure [dbo].[JCCI_InsertCompetitionDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[JCCI_InsertCompetitionDetails]  
	@ReferenceNumber Name = NULL,
	@MembershipID numeric(18, 0)= NULL,
	@CRNumber Name= NULL,
	@CorporateName Name= NULL,
	@RequesterName Name= NULL,
	@RequesterEmail Email= NULL,
	@RequesterMobile Mobile= NULL,
	@CompetitionName Name= NULL,
	@CompetitionStartDate datetime= NULL,
	@CompetitionEndDate datetime= NULL,
	@NumberofCopons int= NULL,
	@AddDate datetime= NULL,
	@AddUser Name= NULL,
	@IsPaid bit= 0,
	@InvoiceNumber Name= NULL,
	@InvoiceAmount Amount= NULL,
	@QRCode Name= '',
	@PaymentReference Name = '',
	@PaymentExpiry datetime= NULL,
	@PaymentStatus int= 1, --|| 0-Paid, 1- Not Paid, 2- Cancelled, 3- Expired, 4- Not Found
	@iseCoponCustomer bit =0
	
AS
	SET NOCOUNT ON
		BEGIN

		SELECT @AddDate = getdate();

INSERT INTO [dbo].[jcci_Competition]
           ([ReferenceNumber]
           ,[MembershipID]
           ,[CRNumber]
           ,[CorporateName]
           ,[RequesterName]
           ,[RequesterEmail]
           ,[RequesterMobile]
           ,[CompetitionName]
           ,[CompetitionStartDate]
           ,[CompetitionEndDate]
           ,[NumberofCopons]
           ,[AddDate]
           ,[AddUser]
           ,[IsPaid]
           ,[IsUsed]
		   ,[InvoiceNumber]
           ,[InvoiceAmount]
           ,[QRCode]
           ,[PaymentReference]
           ,[PaymentExpiry]
           ,[PaymentStatus]
		   ,[iseCoponCustomer])
     VALUES
           (	@ReferenceNumber,
				@MembershipID,
				@CRNumber,
				@CorporateName,
				@RequesterName,
				@RequesterEmail,
				@RequesterMobile,
				@CompetitionName ,
				@CompetitionStartDate,
				@CompetitionEndDate,
				@NumberofCopons,
				@AddDate,
				@AddUser,
				@IsPaid,
				0,
				@InvoiceNumber,
				@InvoiceAmount,
				@QRCode,
				@PaymentReference,
				@PaymentExpiry,
				@PaymentStatus,
				@iseCoponCustomer
			)
		
		SELECT SCOPE_IDENTITY()

		END
	SET NOCOUNT OFF




GO
/****** Object:  StoredProcedure [dbo].[JCCI_InsertCompetitionDraw]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[JCCI_InsertCompetitionDraw]  
	@CompetitionID int = NULL,
	@NumberOfDraws int= NULL,
	@DateOfDraw datetime = NULL,
	@LocationOfDraw Name= NULL,
	@AddDate datetime= NULL
	
AS
	SET NOCOUNT ON
		BEGIN

		SELECT @AddDate = getdate()

INSERT INTO [dbo].[jcci_Competition_Draw]
           ([CompetitionID]
           ,[NumberOfDraws]
           ,[DateOfDraw]
           ,[LocationOfDraw]
           ,[AddDate])
     VALUES
           (	@CompetitionID,
				@NumberOfDraws,
				@DateOfDraw,
				@LocationOfDraw,
				@AddDate
			)
		SELECT SCOPE_IDENTITY()
		END
	SET NOCOUNT OFF
	

GO
/****** Object:  StoredProcedure [dbo].[KioskPrintTicket]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[KioskPrintTicket]
	@MacAddress  [NullCode]=NULL,
	@TicketNo [NullDescription]=NULL
AS
SET NOCOUNT ON 
	DECLARE @CorporateID INTEGER
	DECLARE @LanguageID INTEGER
	DECLARE @EServiceBarcodeID INTEGER
	DECLARE @EServiceID INTEGER
	DECLARE @KioskID INTEGER

	SELECT @LanguageID =LanguageID FROM coc_Languages(NOLOCK) WHERE IsDefaultLanguage=1
	
	SELECT TOP 1 @EServiceBarcodeID=EServiceBarcodeID FROM coc_EServiceBarcodes(NOLOCK) WHERE Barcode=@TicketNo AND IsUsed=1 
	SELECT TOP 1 @KioskID=KioskLocationID FROM coc_KioskLocations(NOLOCK) WHERE MacAddress1=@MacAddress
	SELECT TOP 1 @EServiceID=EServiceBarcodeID FROM coc_Tickets(NOLOCK) WHERE EServiceBarcodeID=@EServiceBarcodeID

	SELECT DISTinct TT.ConsumerID,CC.FirstName,CC.EmailID, FORMAT(EE.EventDate,'dd/MM/yyyy') [EventDate], FORMAT(EE.PurchaseStartDate,'dd/MM/yyyy') [PurchaseStartDate],EE.PurchaseEndDate, 
			TT.EServiceEventID ,CC.PrimaryMobile,EE.EventDescription,EServiceBarcodeID,TT.TicketID,EL.EService [EventName],TT.CustomerName,TT.CustomerMobile,KL.MacAddress1 
		FROM coc_RetailOutlets RO(NOLOCK)
			INNER JOIN coc_Consumers(NOLOCK) CC ON RO.CityID=CC.CityID AND RO.CountryID=CC.CountryID
			INNER JOIN coc_Tickets(NOLOCK) TT ON CC.ConsumerID=TT.ConsumerID
			INNER JOIN coc_EServiceEvents(NOLOCK) EE ON TT.EServiceEventID=EE.EServiceEventID
			INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON EE.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
			INNER JOIN coc_KioskLocationRetailOutlets KR (NOLOCK) ON RO.RetailOutletID=KR.RetailOutletID
			INNER JOIN coc_KioskLocations KL (NOLOCK) ON KL.KioskLocationID=KR.KioskLocationID
		WHERE TT.EServiceBarcodeID=@EServiceID AND KL.KioskLocationID=@KioskID
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[LoadVoucherCategory]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[LoadVoucherCategory]	
	 @LanguageID		INTEGER		=	1
AS
	SET NOCOUNT ON
		BEGIN
		--	--Table[0]--
		--	SELECT *
		--			FROM coc_EVoucherCategory (NOLOCK) 

		----Table[1]--
		--	SELECT *
		--			FROM coc_EVoucherCategoryLanguages (NOLOCK) 

		--		Updated By VIkram		28-Nov-2017				[START]
			SELECT
				coc_EVoucherCategory.EVoucherCategoryID AS VoucherCategoryID, coc_EVoucherCategoryLanguages.ResourceValue AS VoucherCategoryName
			FROM
				coc_EVoucherCategory (NOLOCK) INNER JOIN
				coc_EVoucherCategoryLanguages(NOLOCK) ON coc_EVoucherCategory.EVoucherCategoryID = coc_EVoucherCategoryLanguages.EVoucherCategoryID
			WHERE
				coc_EVoucherCategory.IsActive				=	1	AND
				coc_EVoucherCategoryLanguages.LanguageID	=	@LanguageID


		--		Updated By VIkram		28-Nov-2017				[END]

		END
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[PrintTicket]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[PrintTicket]
  @EServiceEventID INTEGER=NULL
AS
	SET NOCOUNT ON

SELECT TOP(1) CE.EServiceID,CT.EServiceEventID,CT.TicketDate,CT.CustomerName,CT.CustomerMobile,ES.Eservice,CE.DisplayImage,EB.Barcode
FROM coc_Tickets CT(NOLOCK)
	LEFT JOIN coc_EServiceEvents CE(NOLOCK) ON CT.EServiceEventID=CE.EServiceEventID
	INNER JOIN coc_EServiceBarcodes EB(NOLOCK) ON CT.EServiceBarcodeID=EB.EServiceBarcodeID
	INNER JOIN coc_EServiceLanguages ES(NOLOCK) ON CE.EserviceID=ES.EserviceID
		WHERE CT.EServiceEventID=@EServiceEventID order by TicketDate DESC

	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[ProcessConsumerLoyaltyPoint]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ProcessConsumerLoyaltyPoint]
	@ConsumerRedemptionID INTEGER,
	@VerifyUserID INTEGER=NULL,
	@OtpID INTEGER=NULL,
	@Remark [Remark],
	@ReturnValue [Remark] OUTPUT
AS
	SET NOCOUNT ON
		BEGIN
			UPDATE coc_ConsumerRedemptions				
				SET Remarks=@Remark,
					VerificationUserID=@VerifyUserID
				WHERE ConsumerRedemptionID=@ConsumerRedemptionID
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[ReadNotificationDetail]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ReadNotificationDetail] 
	@ConsumerNotificationID INTEGER,
	@ConsumerID INTEGER,
	@LanguageID INTEGER,
	@ActionSource INTEGER=1,
	@NotificationDetails [Remark] OUTPUT
AS
	SET NOCOUNT ON
	BEGIN		
		DECLARE @NotificationSendID INTEGER
		DECLARE @NotificationID INTEGER

		IF EXISTS(SELECT 1 FROM coc_ConsumerNotifications(NOLOCK) WHERE HasChecked=0 AND ConsumerID=@ConsumerID)
		BEGIN
			UPDATE coc_ConsumerNotifications 
				SET HasChecked=1,
					CheckedDate=GETDATE(),
					ActionSource=@ActionSource
			WHERE ConsumerNotificationID=@ConsumerNotificationID AND ConsumerID=@ConsumerID

			SELECT @NotificationSendID=NotificationSendID FROM coc_ConsumerNotifications(NOLOCK) WHERE ConsumerNotificationID=@ConsumerNotificationID
			SELECT @NotificationID=NotificationID FROM coc_NotificationSends(NOLOCK) WHERE NotificationSendID=@NotificationSendID
			if(@NotificationID is not null)
			begin
				UPDATE coc_Notifications 
					SET NotificationRead = ISNULL(NotificationRead,0)+1
				WHERE NotificationID=@NotificationID
			end
		END
	END
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[ReceiveVoucher]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ReceiveVoucher]
 @ConsumerID INTEGER 
,@LanguageID INTEGER = 1
,@EVoucherBundleEligibilityForConsumersID INTEGER
,@VoucherID INTEGER 
,@NumberOfVouchers INTEGER
,@NoOfReceivedVouchers INTEGER OUTPUT
,@VoucherSentMessage NVARCHAR(100) OUTPUT


AS

BEGIN
 DECLARE @CorporateID INTEGER
 DECLARE @ServiceID INTEGER
 DECLARE @NotificationID INTEGER
 SELECT @ServiceID=EServiceID FROM coc_EVoucher (NOLOCK)  WHERE EVoucherID=@VoucherID
 SELECT @NotificationID=NotificationID FROM coc_Notifications (NOLOCK) WHERE EServiceID=@ServiceID
 SELECT @CorporateID=CorporateID FROM coc_EVoucherBundleQRCode VQ (NOLOCK)
  INNER JOIN coc_EVoucherBundleEligibilityForConsumers VE(NOLOCK)  ON VQ.EVoucherBundleQRCodeID=VE.EVoucherBundleQRCodeID
  WHERE VE.EVoucherBundleEligibilityForConsumersID = @EVoucherBundleEligibilityForConsumersID

 DECLARE @AvailableVouchers INTEGER 
 SELECT @AvailableVouchers=Count(*) FROM coc_EServiceBarcodes (NOLOCK) WHERE NotificationID=@NotificationID AND ConsumerID =@ConsumerID AND EVoucherID IS NULL

 PRINT @AvailableVouchers
 PRINT @NumberOfVouchers

 IF(@AvailableVouchers<@NumberOfVouchers)
 BEGIN
	SET @NumberOfVouchers=@AvailableVouchers
 END

 SET @NoOfReceivedVouchers=@NumberOfVouchers
 SELECT  @VoucherSentMessage = ResourceValue from coc_EBundleLanguages(NOLOCK) WHERE ResourceKey ='VoucherSentMessage' AND LanguageID = @LanguageID
 DECLARE @Iterator INT
SET @Iterator = 0
 
 DECLARE @eServiceBarcodeID INTEGER

WHILE (@Iterator < @NumberOfVouchers)
BEGIN

SELECT TOP 1 @eServiceBarcodeID = EServiceBarcodeID FROM coc_EServiceBarcodes (NOLOCK) WHERE NotificationID=@NotificationID AND ConsumerID =@ConsumerID  AND EVoucherID IS NULL and IsUsed = 0
    UPDATE 
       top (1) coc_EServiceBarcodes
    SET
        ConsumerID = @ConsumerID
		,EVoucherID = @VoucherID
    WHERE
        EServiceBarcodeID = @eServiceBarcodeID
 
    Set @Iterator = @Iterator + 1

	DECLARE	@return_value int
	EXEC	@return_value = [dbo].[SaveNotificationForReceiveVoucher] @TemplateID=0,@EVoucherBundleEligibilityForConsumersID=@EVoucherBundleEligibilityForConsumersID,@EServiceBarCodeID = @eServiceBarcodeID
						
END 

UPDATE coc_EVoucherBundleEligibilityForConsumers SET IsUsed = 1 WHERE EVoucherBundleEligibilityForConsumersID=@EVoucherBundleEligibilityForConsumersID

END
GO
/****** Object:  StoredProcedure [dbo].[ReceiveVoucherEligibility]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ReceiveVoucherEligibility]
 @ConsumerID INTEGER 
,@LanguageID INTEGER = 1
,@VoucherID INTEGER = NULL
,@CorporateID INTEGER
,@EBundleID INTEGER
,@NumberOfEligibleVouchers INTEGER
,@EVoucherBundleQRCodeID INTEGER

AS

BEGIN

SELECT EVoucherBundleQRCodeID FROM coc_EVoucherBundleQRCode (NOLOCK)
WHERE EBundleID = @EBundleID AND CorporateID = @CorporateID 
	AND NumberOfEligibleVouchers = @NumberOfEligibleVouchers
	AND EVoucherBundleQRCodeID = @EVoucherBundleQRCodeID

END
GO
/****** Object:  StoredProcedure [dbo].[ReceiveVoucherForAddOn]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ReceiveVoucherForAddOn]
@ConsumerID INTEGER,
@EServiceAddOnId INTEGER,
@ConsumerEServiceAddOnID INTEGER,
@ErrorMessage NVARCHAR(200) OUTPUT
AS
	BEGIN 
	SET @ErrorMessage='0'

	--//----------------------------------------------------------------
		
		DECLARE @errortext [Remark]
		DECLARE	@return_value int
		EXEC	@return_value = [dbo].[VerifyAddonServiceParticipationCount]
		@EServiceAddOnId = @EServiceAddOnId,
		@errortext = @errortext OUTPUT

		print @errortext

		IF( @errortext != '0' )
		BEGIN
			SET @ErrorMessage = @errortext
			SELECT @ErrorMessage
			Return
		END
		
-------------------------------------------------------------------//
		DECLARE @EServiceID INTEGER
		DECLARE @NotificationID INTEGER 
		DECLARE @VoucherID INTEGER

		SELECT @EServiceID = AddOnServiceID FROM coc_eServiceAddOn (NOLOCK) WHERE EServiceAddOnId = @EServiceAddOnId
		SELECT @NotificationID=NotificationID FROM coc_Notifications(NOLOCK) WHERE EServiceID=@EServiceID
		SELECT @VoucherID = EVoucherID FROM coc_EVoucher(NOLOCK) WHERE EServiceID = @EServiceID

		DECLARE @eServiceBarcodeID INTEGER
		DECLARE @barcode varchar(100)
		SET @eServiceBarcodeID = NULL
		
		SELECT TOP 1 @eServiceBarcodeID = EServiceBarcodeID, @barcode = Barcode FROM coc_EServiceBarcodes(NOLOCK) WHERE NotificationID=@NotificationID AND EVoucherID IS NULL AND ConsumerID IS NULL AND IsUsed =0 AND EServiceAddOnId IS NULL

		PRINT '@eServiceBarcodeID'
		PRINT @eServiceBarcodeID
		PRINT '@NotificationID'
		PRINT @NotificationID

		DECLARE @NotificationSendID INTEGER
		DECLARE @ConsumerName NVARCHAR(300)
		DECLARE @minLangaugeID INTEGER
		DECLARE @maxLanguageID INTEGER 
		DECLARE @languageID INTEGER

		IF(@eServiceBarcodeID IS NOT NULL)
			BEGIN
				UPDATE 
				top (1) coc_EServiceBarcodes
				SET
				ConsumerID = @ConsumerID
				,EVoucherID = @VoucherID
				,EServiceAddOnId=@EServiceAddOnId				
				WHERE
				EServiceBarcodeID = @eServiceBarcodeID
						
				PRINT 'Insert into notifications table'
				INSERT INTO coc_Notifications(EServiceAddOnId,NotificationRead,NotificationSend,NotificationCount,ResendCounter)
				SELECT @EServiceAddOnId,0,0,0,0
				SET @NotificationID = SCOPE_IDENTITY()	

				PRINT 'Insert into notificationSends table'
				INSERT INTO coc_NotificationSends(NotificationID,SendingDate,SendingType,SearchCount,NotificationCount)
					SELECT @NotificationID,GETDATE(),4,0,0
				SET @NotificationSendID = SCOPE_IDENTITY()

				SELECT @ConsumerName= FirstName +' ' + SecondName + ' '+ FamilyName 
					FROM coc_Consumers(NOLOCK) CU WHERE CU.ConsumerID=@ConsumerID
	 
			 SELECT @minLangaugeID = MIN(LanguageID) ,@maxLanguageID = MAX(LanguageID) from coc_Languages (NOLOCK)

			 PRINT @ConsumerName
			 PRINT @minLangaugeID
			 PRINT @maxLanguageID
	 
			 SET @languageID = @minLangaugeID
			 WHILE (@languageID<=@maxLanguageID)
				BEGIN
					INSERT INTO coc_NotificationSendLanguages (NotificationSendID, LanguageID, [Subject],[Message]) Values
					--(@NotificationSendID,@languageID,'Congratulations, you have received new voucher','You have received a voucher for @corporate with the barcode @barcode')
					(@NotificationSendID,@languageID,'Congratulations, you have received new voucher','You have received a voucher with the barcode ~'+@barcode)
					PRINT 'NotificaitonSendLanguages'
					PRINT SCOPE_IDENTITY()
					SET @languageID = @languageID+1
				END
		
			INSERT INTO coc_consumernotifications (NotificationSendID, ConsumerID, SendDate,HasChecked)
				VALUES (@NotificationSendID, @ConsumerID, GETDATE(),0)
			 PRINT SCOPE_IDENTITY()


			END
		ELSE
			BEGIN
				SET @ErrorMessage='Voucher Not Available'
				RETURN 
			END
			--END
	END
GO
/****** Object:  StoredProcedure [dbo].[ReceiveVoucherNew]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ReceiveVoucherNew]
 @ConsumerID INTEGER 
,@LanguageID INTEGER = 1
,@EVoucherBundleEligibilityForConsumersID INTEGER
,@VouchersXML XML
,@NoOfReceivedVouchers INTEGER OUTPUT
,@VoucherSentMessage NVARCHAR(100) OUTPUT
,@ErrorMessage NVARCHAR(200) OUTPUT
,@Barcode NVARCHAR(100) OUTPUT
AS

BEGIN
 DECLARE @CorporateID INTEGER
 DECLARE @ServiceID INTEGER
 DECLARE @NotificationID INTEGER
 DECLARE @VoucherID INTEGER 
 DECLARE @EBundleID INTEGER 

 SET @VoucherSentMessage = '';

 DECLARE @Vouchers AS TABLE 
		(
		Id INTEGER Identity(1,1),
		VoucherID INTEGER,
		NoOfVouchers INTEGER
		)
INSERT INTO @Vouchers (VoucherID, NoOfVouchers)  
SELECT voucher.value('(VoucherID[1])','INTEGER'), 
			voucher.value('(NoOfVouchers[1])','INTEGER') FROM @VouchersXML.nodes('/ECouponVoucher/Voucher') AS Data(voucher)

DECLARE @NumberOfVouchers INTEGER
DECLARE @voucherCount INTEGER
SELECT @voucherCount= COUNT(*) FROM @Vouchers
DECLARE @id INTEGER
SET @id=1
PRINT '@voucherCount'
PRINT @voucherCount

SELECT @EBundleID = q.EBundleID FROM coc_EVoucherBundleQRCode q (NOLOCK)
INNER JOIN coc_EVoucherBundleEligibilityForConsumers e (NOLOCK) ON e.EVoucherBundleQRCodeID = q.EVoucherBundleQRCodeID
WHERE e.EVoucherBundleEligibilityForConsumersID = @EVoucherBundleEligibilityForConsumersID

BEGIN TRANSACTION TRN_ReceiveVoucher
WHILE @id<=@voucherCount
BEGIN
		
		SELECT @VoucherID=VoucherID , @NumberOfVouchers=NoOfVouchers FROM @Vouchers WHERE Id=@id
		
		PRINT '@voucherid'
		PRINT @VoucherID

		SELECT @ServiceID=EServiceID FROM coc_EVoucher (NOLOCK)  WHERE EVoucherID=@VoucherID
		SELECT @NotificationID=NotificationID FROM coc_Notifications (NOLOCK) WHERE EServiceID=@ServiceID
		PRINT '@ServicecID'
		PRINT @ServiceID
		PRINT '@NotificationID'
		PRINT @NotificationID

		SELECT @CorporateID=CorporateID FROM coc_EVoucherBundleQRCode VQ (NOLOCK)
		INNER JOIN coc_EVoucherBundleEligibilityForConsumers VE (NOLOCK) ON VQ.EVoucherBundleQRCodeID=VE.EVoucherBundleQRCodeID
		WHERE VE.EVoucherBundleEligibilityForConsumersID = @EVoucherBundleEligibilityForConsumersID

		DECLARE @AvailableVouchers INTEGER 
		SELECT @AvailableVouchers=Count(*) FROM coc_EServiceBarcodes (NOLOCK) WHERE  NotificationID=@NotificationID  AND EVoucherID IS NULL AND ConsumerID IS NULL AND IsUsed =0
 
		
		SET @NoOfReceivedVouchers=0
		PRINT '@AvailableVouchers'
		PRINT @AvailableVouchers
		PRINT '@NumberOfVouchers'
		PRINT @NumberOfVouchers
		
		IF(@AvailableVouchers<@NumberOfVouchers)
		BEGIN
			SET @NumberOfVouchers=@AvailableVouchers
			SET @ErrorMessage='Vch_VouchersNotFullyAvailable'
			SET @VoucherSentMessage = ''
			ROLLBACK TRANSACTION TRN_ReceiveVoucher
			RETURN
		END


		SELECT  @VoucherSentMessage = ResourceValue from coc_EBundleLanguages (NOLOCK) WHERE ResourceKey ='VoucherSentMessage' AND LanguageID = @LanguageID
		DECLARE @Iterator INT
		SET @Iterator = 0
 
		DECLARE @eServiceBarcodeID INTEGER
		--Declare @barcode nvarchar(100)

		WHILE (@Iterator < @NumberOfVouchers)
		BEGIN
			SET @eServiceBarcodeID = NULL

			SELECT TOP 1 @eServiceBarcodeID = EServiceBarcodeID, @Barcode =Barcode  FROM coc_EServiceBarcodes (NOLOCK) WHERE NotificationID=@NotificationID AND EVoucherID IS NULL AND ConsumerID IS NULL AND IsUsed =0

			PRINT '@eServiceBarcodeID'
			PRINT @eServiceBarcodeID

			PRINT '@NotificationID'
			PRINT @NotificationID


			IF(@eServiceBarcodeID IS NOT NULL)
			BEGIN
					UPDATE 
					top (1) coc_EServiceBarcodes
					SET
					ConsumerID = @ConsumerID
					,EVoucherID = @VoucherID
					,DistributorCorporateID=@CorporateID
					,EVoucherBundleEligibilityForConsumersID= @EVoucherBundleEligibilityForConsumersID
					,EBundleID = @EBundleID
					-- Arya [30-01-2018]
					--,IsUsed = 1
					--,UsedDate = getdate()
					--//
					WHERE
					EServiceBarcodeID = @eServiceBarcodeID
					SET @NoOfReceivedVouchers=@NoOfReceivedVouchers + 1
					Set @Iterator = @Iterator + 1

					--DECLARE	@return_value int
					--EXEC	@return_value = [dbo].[SaveNotificationForReceiveVoucher] @TemplateID=0,@EVoucherBundleEligibilityForConsumersID=@EVoucherBundleEligibilityForConsumersID,@EServiceBarCodeID = @eServiceBarcodeID
					DECLARE	@return_value int
					EXEC	@return_value = [dbo].[SaveNotificationForConsumer] 
							@TemplateID=NULL,
							@MessageTitleText = "New Voucher",
							@MessageText = "Dear @name, You have received new voucher from @corporate. The barcode is @barcode",
							@ConsumerID = @ConsumerID,
							@EServiceID = @ServiceID,
							@Barcode = @Barcode

			END
			ELSE
			BEGIN
					SET @ErrorMessage='Vch_VouchersNotFullyAvailable'
					SET @VoucherSentMessage=''
				ROLLBACK TRANSACTION TRN_ReceiveVoucher
				RETURN 
			END
					
		END 
			
		UPDATE coc_EVoucherBundleEligibilityForConsumers SET IsUsed = 1 WHERE EVoucherBundleEligibilityForConsumersID=@EVoucherBundleEligibilityForConsumersID
		SET @id= @id+1
END
COMMIT TRANSACTION TRN_ReceiveVoucher 
END
GO
/****** Object:  StoredProcedure [dbo].[RedeemConsumerPoint]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[RedeemConsumerPoint]
	@LoyaltyPoint INTEGER,
	@RedemptionPlanID INTEGER,
	@ConsumerID INTEGER,
	@RedemptionCode [Code],
	@RetailOutletID INTEGER,
	@ReturnValue [Remark] OUTPUT
AS
	SET NOCOUNT ON
	BEGIN
		BEGIN TRANSACTION RedeemConsumerPoint
		BEGIN TRY
			 
			INSERT INTO coc_ConsumerPointDetails(ConsumerID,LoyaltyPoint,RedeemPoint,PointSource)
				SELECT @ConsumerID,@LoyaltyPoint,@LoyaltyPoint,104

			INSERT INTO coc_ConsumerRedemptions(RedemptionCode,ConsumerID,RedemptionPlanID,RetailOutletID,RedemptionDate,IsVerified)
				SELECT @RedemptionCode,@ConsumerID,@RedemptionPlanID,@RetailOutletID,GETDATE(),0

			UPDATE coc_Consumers
				SET RedeemPoint=RedeemPoint+@LoyaltyPoint--,LoyaltyPoint=LoyaltyPoint-@LoyaltyPoint
			WHERE ConsumerID=@ConsumerID

		COMMIT TRANSACTION RedeemConsumerPoint
		END TRY
		BEGIN CATCH
			SELECT ERROR_LINE()
			SELECT ERROR_MESSAGE()
			ROLLBACK TRANSACTION RedeemConsumerPoint
		END CATCH
	END
	SET NOCOUNT OFF




GO
/****** Object:  StoredProcedure [dbo].[ResendNotifications]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  CREATE PROCEDURE [dbo].[ResendNotifications]
	@NotificationID INTEGER,
	@NotificationCount INTEGER,
	@ErrorMessage [Remark] OUTPUT
AS 
SET NOCOUNT ON
	BEGIN TRY 
	DECLARE @NotificationSendID INTEGER
	DECLARE @NofitcationSndPrevID INTEGER
	DECLARE @Counter INTEGER
	DECLARE @ResedCounter INTEGER

	BEGIN TRANSACTION TRN_SaveNotifications
	SET @ErrorMessage=''

		SELECT @NofitcationSndPrevID= NotificationSendID FROM coc_NotificationSends(NOLOCK) WHERE NotificationID=@NotificationID; 
		DECLARE @Consumers AS TABLE
		(
			UniqueID INTEGER IDENTITY(1,1) ,
			ConsumerID INTEGER
		);

		--WITH CTE AS(
		--   SELECT ROW_NUMBER() OVER (ORDER BY ConsumerID) RowNumbers,ConsumerID,SendDate,HasChecked,CheckedDate,ActionSource 
		--			FROM coc_ConsumerNotifications (NOLOCK) 
		--		WHERE NotificationSendID=@NofitcationSndPrevID AND HasChecked=0  
		--)
		--INSERT INTO coc_ConsumerNotifications
		--	 SELECT @NofitcationSndPrevID,ConsumerID,SendDate,HasChecked,CheckedDate,ActionSource 
		--		FROM CTE
		--	WHERE RowNumbers <= @NotificationCount
	
		SELECT @ResedCounter=ResendCounter FROM coc_Notifications(NOLOCK) WHERE NotificationID=@NotificationID

		IF(@ResedCounter<2)
		BEGIN
			UPDATE coc_Notifications
			SET ResendCounter =ISNULL(ResendCounter,0)+1
			WHERE NotificationID=@NotificationID
		 
			INSERT INTO @Consumers
				SELECT DISTINCT ConsumerID 
					FROM coc_ConsumerNotifications(NOLOCK) 
				WHERE NotificationSendID=@NofitcationSndPrevID AND HasChecked=0

			SELECT @Counter=MIN (UniqueID) FROM @Consumers
			WHILE @Counter IS NOT NULL
			BEGIN	
				INSERT INTO coc_ConsumerNotifications(NotificationSendID,ConsumerID,SendDate,HasChecked)
					SELECT @NofitcationSndPrevID,ConsumerID,GETDATE(),0 FROM @Consumers WHERE UniqueID=@Counter
			 
				SELECT @Counter=MIN(UniqueID) FROM @Consumers WHERE UniqueID>@Counter
			END
		END
		ELSE BEGIN
			SET @ErrorMessage='-500'
		END 
	COMMIT TRANSACTION TRN_SaveNotifications
	END TRY
	BEGIN CATCH									
		SELECT @ErrorMessage= ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);			
	END CATCH

SET NOCOUNT OFF










GO
/****** Object:  StoredProcedure [dbo].[ResetPassword]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--select * from coc_users where mobilenumber like '%557476051%'  
  
--select * from coc_users where username like '%shamim%'  
  
--update coc_users set isdeleted = 0 where mobilenumber like '%557476051%'  
  
--use ecoponlive --sp_helptext  ResetPassword  
  
--CREATE PROCEDURE [dbo].[GetUserRole]  
--declare @msg varchar(50)  
--exec resetpassword '00966557476051',null,'o7PKXf6DIlqHi5dBvrMeQA==',@msg out  
--print @msg  
  
CREATE PROCEDURE [dbo].[ResetPassword] 
@MobileNo nvarchar(15)     = NULL  
,@Email nvarchar(100) = null  
,@Password NVARCHAR(55)  
,@ErrorMessage [Remark] OUTPUT  
AS  
 SET NOCOUNT ON  
 SET @ErrorMessage = ''  
 BEGIN TRY  
 declare @UserID int;  
 IF (@Email is not null) AND EXISTS(SELECT EmailId  
  FROM COC_USERS (NOLOCK)  
  WHERE EmailID = @Email AND (IsActive = 1 and IsDeleted = 0))  
 BEGIN  
  print('inside email')  
  select @UserID = UserID  
  FROM COC_USERS (NOLOCK)  
  WHERE EmailID = @Email AND (IsActive = 1 and IsDeleted = 0)  
  
  print @UserID  
  
  UPDATE COC_USERS  
  SET [Password]    = @Password  
  ,   ResetRequired = 0  
  WHERE EmailID = @Email and userid = @UserID  
  print ('email done')  
 END  
 ELSE IF (@MobileNo is not null) and EXISTS(SELECT MobileNumber  
   FROM COC_USERS (NOLOCK)  
   WHERE MobileNumber = @MobileNo AND @MobileNo IS NOT NULL and (IsActive = 1 and IsDeleted = 0))  
  
  BEGIN  
   print('inside phone')  
   select @UserID = UserID  
   FROM COC_USERS (NOLOCK)  
   where MobileNumber = @MobileNo AND @MobileNo IS NOT NULL and (IsActive = 1 and IsDeleted = 0) 
   print @UserID  
   UPDATE COC_USERS  
   SET [Password]    = @Password  
   ,   ResetRequired = 0  
   WHERE MobileNumber = @MobileNo and userid = @UserID  
   print ('phone done')  
  END  
 END TRY  
 BEGIN CATCH  
 SELECT @ErrorMessage=ERROR_MESSAGE()  
 RAISERROR(@ErrorMessage, 16, 1);  
 END CATCH  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[rpt_GetAllActiveCorporates]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[rpt_GetAllActiveCorporates]  

@LanguageID INTEGER=1              
,@EServiceID INTEGER = NULL              
,@CorporateID INTEGER =NULL              
,@CompetitionID INTEGER = NULL              
AS              
BEGIN 
    


SELECT         
  
  CR.CorporateID as value,         
  
  (isnull(CR.FirstName,'')+' '+isnull(CR.CorporateName,'') ) FullName,      
  
  CR.EmailID,      
  
  iif(CR.CorporateName is null , CR.FirstName+' '+CR.CorporateName , CR.CorporateName)  as  text         
  
 FROM coc_Corporates(NOLOCK) CR where CR.IsActive=1 and CR.CorporateName is not null   order by 1 desc

 end
GO
/****** Object:  StoredProcedure [dbo].[rpt_GetEserviceNames]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[rpt_GetEserviceNames]     
 @CorporateID int = NULL ,       
 @LanguageID int=1             
      
    
  AS      
  BEGIN          
   if @LanguageID=0        
   begin        
   set @LanguageID=1        
   end        
        
  select ec.ECouponID as value,esl.EService as text from coc_EServices es   (NOLOCK)        
 inner join coc_ECoupons ec (NOLOCK) on es.EServiceID = ec.EServiceID          
 Left join coc_EServiceLanguages esl(NOLOCK) on esl.EServiceID = es.EServiceID and esl.LanguageID = @LanguageID            
 where es.IsActive = 1  and (@CorporateID is null or es.CorporateID=@CorporateID) order by ec.ECouponID desc          
      
  END
GO
/****** Object:  StoredProcedure [dbo].[rpt_usp_GetWinnersReportTest]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[rpt_usp_GetWinnersReportTest]  -- For Report                                            
  @LanguageID  int=1                                                 
 ,@ECouponID  BIGINT=null                                         
 ,@DrawID BIGINT=null                                              
 ,@DrawDate  nvarchar(20)=null                                         
 ,@PageSize  int=100                                          
 ,@RecordCount bigint    output                                       
 ,@PageIndex int=1                            
 ,@Mobile nvarchar(100) =NULL                            
 ,@EmailID varchar(50)=NULL    
 ,@CorporateID   varchar(50)=NULL                          
 --,@CompetitionName nvarchar(100)=NULL                            
 ,@Name nvarchar(200)=NULL                   
                                        
AS                                                  
BEGIN                                                        
  SET NOCOUNT ON;                                        
   declare @offset int,@fetch int;                                               
  set @offset =@PageSize*(@PageIndex-1);                                            
  set @fetch =@PageSize;                                    
                                     
                                        
                                  
  declare  @GetWinnersReportData table(SNo bigint IDENTITY(1,1) PRIMARY KEY,[Draw Date Time]  nvarchar(25),[Membership ID] nvarchar(100),Email nvarchar(100),[Draw Name] nvarchar(300), [Draw Place] nvarchar(500),                                  
  [Competion Name] nvarchar(1000),[Winner Name] nvarchar(200),[Winner Mobile] varchar(15),[Prize Name] nvarchar(300),                                  
  Barcode nvarchar(100),[City] nvarchar(100),[Nationality] nvarchar(100))                                  
                                  
  insert into @GetWinnersReportData                                   
  select distinct( CONVERT(VARCHAR(11),ew.DrawDateTime, 106)) [Draw Date Time],        
  ew.MembershipID as [Membership ID],        
     ew.Email,                                      
             edl.Value as [Draw Name],                           
     ed.Location as [Draw Place],                                        
     esl.EService as  [Competion Name] ,                                               
     ew.ConsumerName [Winner Name],                                                  
        ew.MobileNumber [Winner Mobile],                                            
        ECPL.Value [Prize Name] ,                                             
           isnull(ECP.Barcode,'') ,                          
     cl.City [City],                                           
        NL.Nationality [Nationality]              
                             from coc_ECouponWinners ew (NOLOCK)                                         
left join coc_Consumers c (NOLOCK) on ew.ConsumerID = c.ConsumerID                                         
inner join coc_ECouponDrawPrizes edp (NOLOCK) on edp.ECouponDrawPrizeID = ew.ECouponDrawPrizeID                                         
inner join coc_ECouponDraw ed (NOLOCK) on ed.ECouponDrawID = edp.ECouponDrawID                           
left join coc_ECouponPrizesLanguages ECPL(NOLOCK) on ECPL.ECouponPrizeID=ew.ECouponPrizeID   and ECPL.ResourceKey= 'PrizeDetail' and ECPL.LanguageID=@LanguageID                                      
inner join coc_ECouponDrawLanguages edl(NOLOCK) on edl.ECouponDrawID = ed.ECouponDrawID and edl.LanguageID =@LanguageID and edl.ResourceKey = 'Name'                                        
left join coc_ECouponLanguages ecl(NOLOCK) on ecl.ECouponID = ed.ECouponID and ecl.LanguageID =@LanguageID                                        
left join coc_CityLanguages cl(NOLOCK) on cl.CityID = c.CityID and cl.LanguageID =@LanguageID                                         
inner join coc_ECoupons ec(NOLOCK) on ec.ECouponID= ecl.ECouponID      
 inner join  coc_EServices  es(NOLOCK) on es.EServiceID = ec.EServiceID                                        
inner join coc_EServiceLanguages esl(NOLOCK) on esl.EServiceID= ec.EServiceID     and esl.LanguageID= @LanguageID                                        
left join coc_ECouponParticipations ECP(NOLOCK) on ECP.ECouponParticipationID = ew.ECouponParticipationID                                   
left join coc_NationalityLanguages NL(NOLOCK) on NL.NationalityID=c.NationalityID and nl.LanguageID=@LanguageID     and ECPL.LanguageID=@LanguageID                 
where (@ECouponID is null or ed.ECouponID =@ECouponID)                        
and (@Mobile is null or  ew.MobileNumber like'%'+@Mobile+'%')                            
and (@EmailID is null or ew.Email like'%'+@EmailID+'%')                     
and (@Name is null or ew.ConsumerName like'%'+@Name+'%' or isnull(c.FirstName,'')+' '+isnull(c.SecondName,'')+' '+isnull(c.FamilyName,'') like'%'+@Name+'%')                  
and (@DrawID is null or ed.ECouponDrawID=@DrawID )     
 and (@CorporateID is null or es.CorporateID=@CorporateID)                                     
and (@DrawDate is null or Convert(date,ew.DrawDateTime)=Convert(date,@DrawDate))                                  
                 
select  SNo,[Draw Date Time] ,[Draw Name], [Draw Place] ,                                  
  [Competion Name] ,[Winner Name] ,[Winner Mobile] ,[Prize Name],                                  
  [City] ,[Nationality],Barcode ,Email,[Membership ID]  from  @GetWinnersReportData                                  
    order by SNo asc    OFFSET @offset ROWS                                            
FETCH NEXT @fetch ROWS ONLY                                                                    
select @RecordCount =count(*) from @GetWinnersReportData                                      
                                                    
END                 
  
GO
/****** Object:  StoredProcedure [dbo].[SaveAdminUser]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveAdminUser]
	@UserID INTEGER,
	@UserTypeID INTEGER,
	@UserName [Name], 
	@EmailID [Email],
	@MobileNumber [Mobile],
	@Password [Remark], 
	@FullName [Name],
	@ResetRequired BIT,
	@IsActive BIT, 	  
	@ReturnValue [Remark] OUTPUT
AS
	SET NOCOUNT ON
	BEGIN TRY
	BEGIN TRANSACTION SaveAdminUser
		IF(@UserID=0)
		BEGIN
			IF NOT EXISTS(SELECT 1 FROM coc_Users (NOLOCK) WHERE UserName=@EmailID)
			BEGIN
				INSERT INTO coc_Users(UserName,[Password],RoleID,MobileNumber,EmailID,ResetRequired,IsActive,CreatedDate,FullName)
					SELECT @EmailID,@Password,@UserTypeID,@MobileNumber,@EmailID,@ResetRequired,@IsActive,GETDATE(),@FullName
				SET @ReturnValue=SCOPE_IDENTITY()
			END
			ELSE BEGIN
					SET @ReturnValue='0'
				 END
		END
		ELSE BEGIN
				UPDATE coc_Users
					SET UserName=@EmailID,
						[Password]=@Password,
						RoleID=@UserTypeID,
						FullName=@FullName,
						MobileNumber=@MobileNumber,
						EmailID=@EmailID,
						EditdDate=GETDATE(),					 
						IsActive=@IsActive,
						ResetRequired=@ResetRequired
					WHERE UserID=@UserID
			END
	COMMIT TRANSACTION SaveAdminUser
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION SaveAdminUser
		SELECT ERROR_LINE(),ERROR_NUMBER()
		SELECT @ReturnValue=ERROR_MESSAGE()
	END CATCH
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[SaveAdvertisement]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SaveAdvertisement]
	@AdvertisementID INTEGER,
	@AdvertisementName NVARCHAR(125)=NULL,
	@PopupHeight INTEGER,
	@PopupWidth INTEGER,
	@AdvertisementDisplayID INTEGER,
	@Cost DECIMAL(15,4),
	@DisplayTypeID INTEGER,
	@Duration INTEGER,
	@ExternalWebsite NVARCHAR(125),
	@File XML,
	@NextVideo BIT,
	@SiteLocationID INTEGER= NULL,	 
	@StartDate DATETIME,
	@UserID INTEGER,
	@Status BIT,
	@PageXml XML=NULL,
	@IsImage BIT,
	@IsVideo BIT,
	@ReturnValue [Remark] OUTPUT
AS
	SET NOCOUNT ON
	BEGIN TRANSACTION SaveECouponConfiguration
	BEGIN TRY
	BEGIN
		DECLARE @FileName NVARCHAR(125)
		DECLARE @AdvertisementFiles TABLE
		(
			FilePath [NullName],
			IsURL BIT 
		)
		DECLARE @AdvertisementPage TABLE
		(
			PageID INTEGER
		)
		 
		INSERT INTO @AdvertisementFiles(FilePath,IsURL)
			SELECT advertismentImage.value('(FileName[1])', '[NullName]'),advertismentImage.value('(IsURL[1])', 'BIT')
				FROM @File.nodes('/AdvertisementFiles/Files') AS Data(advertismentImage)

		INSERT INTO @AdvertisementPage(PageID)
			SELECT advertismentPage.value('(PageID[1])', 'INTEGER')
				FROM @PageXml.nodes('/Advertisement/PageData') AS Data(advertismentPage)
				 
		IF(@AdvertisementID=0)
		BEGIN
			IF NOT EXISTS(SELECT 1 FROM coc_Advertisements (NOLOCK) WHERE  (DisplayTypeID=@DisplayTypeID AND PositionID=@SiteLocationID AND (@StartDate BETWEEN StartDate AND DATEADD(day,Duration,StartDate)))) OR @DisplayTypeID=2
			BEGIN
				INSERT INTO coc_Advertisements(AdvertisementName,PopupHeight,PopupWidth,TargetPlateform,PositionID,DisplayTypeID,StartDate,Duration,Cost,AddUserID,AddDate,IsImage,IsVideo,TargetURL,HasNextVideo)--,AdvertisementName,AdvertisementName
					SELECT @AdvertisementName,@PopupHeight,@PopupWidth,@AdvertisementDisplayID,@SiteLocationID,@DisplayTypeID,@StartDate,@Duration,@Cost,@UserID,GETDATE(),@IsImage,@IsVideo,@ExternalWebsite,@NextVideo--,@AdvertisementArabic,@AdvertisementUrdu
			
				SET @AdvertisementID=SCOPE_IDENTITY()

				INSERT INTO coc_AdvertisementPages(AdvertisementID,PageID)
					SELECT @AdvertisementID,AP.PageID 
						FROM @AdvertisementPage AP 
				SELECT @FileName=FilePath FROM @AdvertisementFiles
				IF(ISNULL(@FileName,'')!='')
				BEGIN
					INSERT INTO coc_AdvertisementFiles(AdvertisementText,AdvertisementID,FilePath,IsURL)
						SELECT @AdvertisementName,@AdvertisementID,FL.FilePath,FL.IsURL 
							FROM @AdvertisementFiles FL 
				END
			END
		ELSE BEGIN
				SET @ReturnValue='Already an image or video added for this Site and Display Type.'
			 END
		END
		ELSE BEGIN
				UPDATE coc_Advertisements 
					SET AdvertisementName=@AdvertisementName,
						PopupHeight=@PopupHeight,
						PopupWidth=@PopupWidth,
						TargetPlateform=@AdvertisementDisplayID,
						PositionID=@SiteLocationID,
						DisplayTypeID=@DisplayTypeID,
						StartDate=@StartDate,
						Duration=@Duration,
						Cost=@Cost,
						EditUserID=@UserID,
						EditDate=GETDATE(),
						IsImage=@IsImage,
						IsVideo=@IsVideo,
						IsActive=@Status,
						TargetURL=@ExternalWebsite,
						HasNextVideo=@NextVideo
				WHERE AdvertisementID=@AdvertisementID

				DELETE FROM coc_AdvertisementPages WHERE AdvertisementID=@AdvertisementID

				INSERT INTO coc_AdvertisementPages(AdvertisementID,PageID)
					SELECT @AdvertisementID,AP.PageID 
						FROM @AdvertisementPage AP 

				DELETE FROM coc_AdvertisementFiles WHERE AdvertisementID=@AdvertisementID

				INSERT INTO coc_AdvertisementFiles(AdvertisementText,AdvertisementID,FilePath,IsURL)
					SELECT @AdvertisementName,@AdvertisementID,FL.FilePath,FL.IsURL 
						FROM @AdvertisementFiles FL 
			 END
			SET @ReturnValue=@ReturnValue
		END 
		COMMIT TRANSACTION SaveECouponConfiguration
		END TRY
		BEGIN CATCH
			ROLLBACK TRANSACTION SaveECouponConfiguration
			SELECT ERROR_LINE()
			SELECT ERROR_MESSAGE()
		END CATCH
	SET NOCOUNT OFF

	 




GO
/****** Object:  StoredProcedure [dbo].[SaveAllowSentVoucherForEcoupon]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	Arya
-- Create date	:	16-12-2017
-- Description	:	Save Allow SentVoucher For Ecoupon
-- =============================================

CREATE PROCEDURE [dbo].[SaveAllowSentVoucherForEcoupon]
@EServiceID INTEGER,
@SentEVoucher BIT
AS
	BEGIN
		UPDATE coc_ECoupons SET SentEVoucher = @SentEVoucher WHERE EServiceID = @EServiceID
	END
GO
/****** Object:  StoredProcedure [dbo].[SaveAndroidDeviceToken]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[SaveAndroidDeviceToken]  
 @ConsumerID INTEGER,  
 @AndroidDeviceToken nvarchar(250),  
 @ErrorMessage [Remark] OUTPUT   
  
AS  
 BEGIN  
  UPDATE coc_Consumers SET AndroidDeviceToken=@AndroidDeviceToken WHERE ConsumerID=@ConsumerID  
    SET @ErrorMessage=''  
    
 END  
  
   
 
GO
/****** Object:  StoredProcedure [dbo].[SaveAPIUserData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[SaveAPIUserData]   
 @CorporateID int,  
 @APIKey nvarchar(50),  
 @Password nvarchar(100),  
 @CreatedBy int,  
 @ReturnValue VARCHAR(1000)   = NULL OUTPUT  
    
 AS  
 SET NOCOUNT ON  
 BEGIN    
  BEGIN TRY   
      declare @CorporateAPIUserID int=0  
   select @CorporateAPIUserID=CorporateAPIUserID from coc_CorporateAPIUser  (NOLOCK)
      where CorporateID=@CorporateID  
            if(@CorporateAPIUserID=0)  
   begin  
   insert into coc_CorporateAPIUser(APIKey,Password,CorporateID,IsActive,CreatedBy,CreatedDate) values(@APIKey,@Password,@CorporateID,1,@CreatedBy,getdate())  
          
   end  
   else  
   begin  
       update coc_CorporateAPIUser set Password=@Password,ModifiedBy=@CreatedBy,ModifiedDate=getdate() where CorporateAPIUserID=@CorporateAPIUserID  
   end  
  
  END TRY  
  BEGIN CATCH  
  SELECT Error_line()  
  SELECT Error_message()  
  SET @ReturnValue = '-505'  
  END CATCH  
 SET NOCOUNT OFF   
 END   
   
  
  
  
  
  
   
  
GO
/****** Object:  StoredProcedure [dbo].[SaveBarcodeConfiguration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveBarcodeConfiguration]
	@BarcodeConfigurationID INTEGER=NULL,
	@ServiceTypeID INTEGER,
	@BarcodeConmbination NVARCHAR(20),
	@BarcodeConmbinationXml XML=NULL,
	@Status INTEGER,
	@UserID INTEGER,
	@ReturnValue [Remark] OUTPUT
AS
	SET NOCOUNT ON
	DECLARE @BarcodeConfiguration TABLE
	(
		ServiceTypeID INTEGER,
		BarcodeCombinationID INTEGER,
		CombinationLength INTEGER,
		CombinationValue TINYINT,
		Sequence TINYINT
	)

	INSERT INTO @BarcodeConfiguration(ServiceTypeID,BarcodeCombinationID,CombinationLength,CombinationValue,Sequence)
		SELECT @ServiceTypeID,eBarcodeConfiguration.value('(BarcodeCombinationID[1])', 'INTEGER'),
			eBarcodeConfiguration.value('(CombinationLength[1])', 'INTEGER'),
			eBarcodeConfiguration.value('(CombinationValue[1])', 'TINYINT'),
			eBarcodeConfiguration.value('(Sequence[1])', 'TINYINT')
		FROM @BarcodeConmbinationXml.nodes('/Barcode/BarcodeConfiguration') AS Data(eBarcodeConfiguration)
	
					 
	IF(@Status=0)
	BEGIN
		UPDATE BC SET 
			BC.BarcodeCombinationID=TB.BarcodeCombinationID,
			BC.EditCombinationLength=TB.CombinationLength,
			BC.EditCombinationValue=TB.CombinationValue,
			BC.EditSequence=TB.Sequence,
			BC.EditUserID=@UserID,
			BC.EditDate=GETDATE(),
			BC.IsApproved =0,
			BC.CheckerDate =NULL,
			BC.CheckerUserID =NULL
		FROM coc_BarcodeConfigurations BC 
			INNER JOIN @BarcodeConfiguration TB ON TB.ServiceTypeID=BC.ServiceTypeID 
				AND BC.BarcodeCombinationID=TB.BarcodeCombinationID
		 WHERE BC.ServiceTypeID= @ServiceTypeID
	END
	ELSE BEGIN
		UPDATE BC SET 							
			BC.CombinationLength=CASE WHEN @Status=1 THEN BT.EditCombinationLength ELSE BC.CombinationLength END,
			BC.CombinationValue=CASE WHEN @Status=1 THEN BT.EditCombinationValue ELSE BC.CombinationValue END,
			BC.Sequence=CASE WHEN @Status=1 THEN BT.EditSequence ELSE BC.Sequence END,
			BC.EditCombinationLength= 0,
			BC.EditCombinationValue=0,
			BC.EditSequence= 0,
			BC.CheckerUserID=@UserID,
			BC.CheckerDate=GETDATE(),
			BC.IsApproved=1
		FROM coc_BarcodeConfigurations BC(nolock)
			INNER JOIN coc_BarcodeConfigurations BT(nolock) ON BT.ServiceTypeID=@ServiceTypeID 
				AND BC.BarcodeCombinationID=BT.BarcodeCombinationID
		 WHERE BC.ServiceTypeID= @ServiceTypeID
	END 
	SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[SaveBarcodeDownload]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveBarcodeDownload]      
 @CorporateID INTEGER,  
 @NotificationID INTEGER,  
 @NoOfBarcodes INTEGER,  
 @UserID INTEGER,  
 @ServiceID INTEGER,  
 @IsECoupon BIT=1,  
 @BarcodePrintID BIGINT OUTPUT,  
 @ErrorMessage [Remark] OUTPUT   
AS   
SET NOCOUNT ON  
 BEGIN TRY   
    
  DECLARE @EServiceBarcodes AS TABLE   
 (  
  UniqueID INTEGER NOT NULL IDENTITY(1,1),  
  BarcodePrintID BIGINT NULL,  
  Barcode nvarchar(100),  
  EServiceBarcodeID BIGINT NULL,  
  CorporateID INTEGER NULL,  
  NotificationID INTEGER NULL  
 )  
      
 SET @ErrorMessage =''  
 BEGIN TRANSACTION TRN_SaveBarcodes  
  
  
  INSERT INTO coc_BarcodePrints(NotificationID,PrintCount,PrintDate,PrintUserID)  
   SELECT @NotificationID,@NoOfBarcodes,GETDATE(),@UserID  
  SET @BarcodePrintID =SCOPE_IDENTITY();  
  
  INSERT INTO @EServiceBarcodes(BarcodePrintID,Barcode,EServiceBarcodeID,CorporateID,NotificationID)  
   SELECT TOP(@NoOfBarcodes) @BarcodePrintID, Barcode,EServiceBarcodeID,CorporateID,NotificationID  
    FROM coc_EServiceBarcodes(NOLOCK)   
   WHERE NotificationID=@NotificationID AND CorporateID = @CorporateID AND IsUsed=0    
  
  INSERT INTO coc_BarcodePrintDetails  
   SELECT BarcodePrintID,EServiceBarcodeID   
    FROM @EServiceBarcodes WHERE UniqueID <= @NoOfBarcodes   
	
  UPDATE SB  
    --IsDownloaded=1 added for getting Is it Downloaded
   SET IsUsed=1,IsDownloaded=1,UsedDate=GETDATE()  
  FROM coc_EServiceBarcodes SB,@EServiceBarcodes EB  
  WHERE SB.EServiceBarcodeID=EB.EServiceBarcodeID AND SB.CorporateID = @CorporateID AND EB.UniqueID <= @NoOfBarcodes  
     
    
   -- DECLARE @Template nvarchar(1000)  
   -- SELECT @Template = ECouponTemplate FROM coc_ECoupons WHERE EServiceID=@ServiceID  
   
   --SELECT Barcode,@Template [TicketDescription]  
   -- FROM @EServiceBarcodes   
  
  
 COMMIT TRANSACTION TRN_SaveBarcodes  
 --ROLLBACK TRANSACTION TRN_SaveBarcodes  
 END TRY  
 BEGIN CATCH           
  SELECT @ErrorMessage=ERROR_MESSAGE()  
  RAISERROR(@ErrorMessage, 16, 1);    
  ROLLBACK TRANSACTION TRN_SaveBarcodes   
 END CATCH  
  
SET NOCOUNT OFF  
  
  
  
/****** Object:  StoredProcedure [dbo].[SaveAdminUser]    Script Date: 08-07-2017 14:55:36 ******/  
SET ANSI_NULLS ON  
GO
/****** Object:  StoredProcedure [dbo].[SaveBarcodeForSending]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveBarcodeForSending] @ECouponID integer,  
@ConsumerID integer,  
@GuestID integer,  
@AssignedCoupons integer,  
@RetailOutletID integer,  
@OTP integer,  
@KioskID integer  
  
AS  
  
  SET NOCOUNT ON    
  BEGIN TRANSACTION SaveBarcodeForSending    
    BEGIN TRY    
      BEGIN    
    
         --Recursive                          
   DECLARE @RecursiveHoursParticipationDuration INTEGER                                    
   DECLARE @RecursiveHoursNumberOfParticipations INTEGER                                    
   --Recursive                          
   DECLARE @RecursiveHoursNumberOfParticipationsCount INTEGER        
    
    
        IF @ConsumerID = 0    
          SELECT    
            @ConsumerID = NULL    
        IF @GuestID = 0    
          SELECT    
            @GuestID = NULL    
        DECLARE @MobileNumber [Mobile],    
                @Email [Email],    
                @ConsumerName [Name]    
    
        DECLARE @CouponCount integer,    
                @NumberOfConsumerParticipations integer,    
                @NumberOfGuestParticipations integer,    
                @ParticipationCount integer,    
                @_APIParticipationCount int, 
				@AllowExternalBarcode bit;

		
		SELECT    
          @AllowExternalBarcode = isnull(AllowExternalBarcode,0)    
        FROM coc_Eservices(NOLOCK)    
        WHERE EServiceID = (Select EServiceID from coc_ECoupons(nolock) where ECouponID=@ECouponID )


    
        SELECT    
          @NumberOfConsumerParticipations = isnull(NumberOfConsumerParticipations,0),    
          @NumberOfGuestParticipations = isnull(NumberOfGuestParticipations,0),    
          @ParticipationCount = ParticipationCount ,    
          @RecursiveHoursParticipationDuration = isnull(RecursiveHoursParticipationDurationKiosk,0),                          
          @RecursiveHoursNumberOfParticipations = ISNULL(RecursiveHoursNumberOfParticipationsKiosk,0) ,
		  @_APIParticipationCount = ISNULL(APIParticipationCount,0)
        FROM coc_ECoupons(NOLOCK)    
        WHERE ECouponID = @ECouponID    

		IF(@AllowExternalBarcode=1 and @_APIParticipationCount >0)
		  begin
		    set @NumberOfConsumerParticipations = @_APIParticipationCount;
			set @NumberOfGuestParticipations = @_APIParticipationCount;
		  end
    
    if @RetailOutletID is null and @KioskID is not null  
  select @RetailOutletID= RetailOutletID from coc_KioskLocationRetailOutlets where KioskLocationID= @KioskID  
  
          --Recursive Get latest participation datetime   @Rafeeq                       
    IF (@RecursiveHoursParticipationDuration <> 0 and @RetailOutletID <> 0 and   
           Exists(select RetailOutletID from coc_ECouponOutlets(nolock) where ECouponID = @ECouponID and RetailOutletID = @RetailOutletID and AllowedParticipationByKiosk = 1 ))                          
     begin                          
                 
          Declare @TotalParticipationCount Int;  
          --Declare @TotalAllowedParticipationCount Int;  
          Declare @TotalAllowedParticipationPerCustomerInRetailoutlet Int;  
            
          Select @TotalAllowedParticipationPerCustomerInRetailoutlet = TotalAllowedParticipationPerCustomer from coc_ECouponOutlets(nolock)   
          where ECouponID = @ECouponID and RetailOutletID = @RetailOutletID and AllowedParticipationByKiosk = 1;   
  
          SELECT @TotalParticipationCount = count(*) FROM coc_ECouponParticipations(NOLOCK)                                    
          WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID) AND ECouponID = @EcouponID  and RetailOutletID = @RetailOutletID;  
  
          --set @TotalAllowedParticipationCount = @TotalAllowedParticipationPerCustomerInRetailoutlet + @NumberOfConsumerParticipations;  
  
         SELECT @RecursiveHoursNumberOfParticipationsCount = count(*) FROM coc_ECouponParticipations(NOLOCK)                                    
         WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID) AND ECouponID = @EcouponID  and RetailOutletID = @RetailOutletID                        
         AND (ParticipationDate >= DATEADD(hh,-(@RecursiveHoursParticipationDuration),GETDATE()))                                                
            
          IF ( (@RecursiveHoursNumberOfParticipationsCount+1) > @RecursiveHoursNumberOfParticipations )                          
           begin                          
             SELECT 'KioskDailyParticipationLimitExceeded' AS 'ErrorMessage'                           
              ROLLBACK TRANSACTION SaveBarcodeForSending                            
              RETURN                           
      end  
          else if (@TotalParticipationCount >= @TotalAllowedParticipationPerCustomerInRetailoutlet)  
             begin  
                SELECT 'msgRetailoutParticipationLimitExceeded' AS 'ErrorMessage'                           
                ROLLBACK TRANSACTION SaveBarcodeForSending                            
                RETURN ;  
             end  
      end     
    
    
        IF @ConsumerID IS NOT NULL    
        BEGIN    
    
          SELECT    
            @CouponCount = COUNT(*)    
          FROM coc_EServiceBarcodes(NOLOCK) EB    
          INNER JOIN coc_Notifications(NOLOCK) N    
            ON N.NotificationID = EB.NotificationID    
            INNER JOIN coc_EServices(NOLOCK) ES    
              ON ES.EServiceID = N.EServiceID    
            INNER JOIN coc_ECoupons(NOLOCK) EC    
              ON EC.EServiceID = ES.EServiceID    
          WHERE ECouponID = @ECouponID    
          AND (ConsumerID = @ConsumerID)    
    
          SELECT    
            @ParticipationCount = @NumberOfConsumerParticipations    
    
          SELECT    
            @MobileNumber = CU.PrimaryMobile,    
            @Email = EmailID,    
            @ConsumerName = FirstName + ' ' + SecondName + ' ' + FamilyName    
          FROM coc_Consumers(NOLOCK) CU    
          WHERE CU.ConsumerID = @ConsumerID    
          SELECT    
            @GuestID = NULL    
        END    
        ELSE    
        IF @GuestID IS NOT NULL    
        BEGIN    
          SELECT    
            @CouponCount = COUNT(*)    
          FROM coc_EServiceBarcodes(NOLOCK) EB    
          INNER JOIN coc_Notifications(NOLOCK) N    
            ON N.NotificationID = EB.NotificationID    
            INNER JOIN coc_EServices(NOLOCK) ES    
              ON ES.EServiceID = N.EServiceID    
            INNER JOIN coc_ECoupons(NOLOCK) EC    
              ON EC.EServiceID = ES.EServiceID    
          WHERE ECouponID = @ECouponID    
          AND (GuestID = @GuestID)    
    
          SELECT    
            @ParticipationCount = @NumberOfGuestParticipations    
    
          SELECT    
            @MobileNumber = CU.PrimaryMobile,    
            @Email = EmailID,    
            @ConsumerName = FullName    
          FROM coc_Guests(NOLOCK) CU    
          WHERE CU.GuestID = @GuestID    
        END    
    
        IF @ParticipationCount IS NULL    
          OR ISNULL(@ParticipationCount, 0) = 0    
          SELECT    
            @ParticipationCount = 10    
    
    
        IF (ISNULL(@CouponCount, 0) + ISNULL(@AssignedCoupons, 0)) > @ParticipationCount    
          SELECT    
            'msgCoponExceedLimit' AS 'ErrorMessage'    
        ELSE    
        IF @MobileNumber IS NULL    
          SELECT    
            'msgEnterMobile' AS 'ErrorMessage'    
        ELSE    
        BEGIN    
    
    
          --DECLARE @Barcode [NullDescription] =NULL    
          DECLARE @NotificationID integer    
          DECLARE @NotificationSendID integer    
          DECLARE @LanguageID integer = NULL    
    
          DECLARE @BarCodes TABLE (    
            EServiceBarcodeID integer,    
            AsignedMoile [Mobile],    
            Barcode [NullDescription],    
            NotificationID integer,    
            IsUsed bit    
          )    
    
          IF (ISNULL(@AssignedCoupons, 0) = 0)    
            SET @AssignedCoupons = 1    
    
          INSERT INTO @BarCodes (EServiceBarcodeID, AsignedMoile, Barcode, NotificationID, IsUsed)    
            SELECT TOP (@AssignedCoupons)    
              BC.EServiceBarcodeID,    
              @MobileNumber,    
              BC.Barcode,    
              BC.NotificationID,    
              1    
            FROM coc_EServiceBarcodes(NOLOCK) BC    
            INNER JOIN coc_Notifications(NOLOCK) NF    
              ON NF.NotificationID = BC.NotificationID    
              INNER JOIN coc_ECoupons(NOLOCK) EC    
                ON EC.EServiceID = NF.EServiceID    
            WHERE BC.IsUsed = 0    
            AND EC.ECouponID = @ECouponID    
            ORDER BY NEWID()   
    
          DECLARE @AssignedCodes int    
          SELECT    
            @AssignedCodes = COUNT(*)    
          FROM @BarCodes    
          IF @AssignedCodes < @AssignedCoupons    
            SELECT    
              'msgCoponsDepleted' AS 'ErrorMessage'    
          ELSE    
          BEGIN    
            UPDATE EB    
            SET ConsumerID = @ConsumerID,    
                GuestID = @GuestID,    
                AsignedMoile = @MobileNumber,    
                IsUsed = 1,    
                UsedDate = GETDATE()    
            FROM coc_EServiceBarcodes EB    
            WHERE EServiceBarcodeID IN (SELECT    
              EServiceBarcodeID    
            FROM @BarCodes)    
            AND IsUsed = 0    
            IF @@ROWCOUNT <> @AssignedCoupons    
              SELECT    
                'GenericError' AS 'ErrorMessage'    
    
            INSERT INTO coc_ECouponParticipations (ECouponID, ParticipationDate, Barcode, ParticipationMobile, ParticipationEmailID, ConsumerID, ConsumerName, GuestID, RetailOutletID, KioskID)    
              SELECT    
                @EcouponID,    
                GETDATE(),    
                Barcode,    
                @MobileNumber,    
                @Email,    
                @ConsumerID,    
                @ConsumerName,    
                @GuestID,    
                @RetailOutletID,    
                @KioskID    
              FROM @BarCodes    
    
    
            IF @ConsumerID IS NOT NULL    
            BEGIN    
              DECLARE @ServiceID integer    
              SELECT    
                @ServiceID = EServiceID    
              FROM coc_ECoupons(NOLOCK)    
              WHERE ECouponID = @ECouponID    
              SELECT    
                @NotificationID = NotificationID    
              FROM coc_Notifications(NOLOCK)    
              WHERE EServiceID = @ServiceID    
              UPDATE coc_Notifications    
              SET NotificationSend = ISNULL(NotificationSend, 0) + @AssignedCoupons    
              WHERE EServiceID = @ServiceID    
              DECLARE BarcodeList CURSOR FOR    
              SELECT    
                Barcode    
              FROM @BarCodes    
    
              DECLARE @c_Barcode [NullDescription]    
              OPEN BarcodeList    
              FETCH NEXT FROM BarcodeList INTO @c_Barcode    
    
              WHILE @@FETCH_STATUS = 0    
              BEGIN    
                INSERT INTO coc_NotificationSends (NotificationID, SendingDate, SendingType, SearchCount, NotificationCount)    
                  SELECT    
                    @NotificationID,    
                    GETDATE(),    
                    4,    
                    0,    
                    0    
                SET @NotificationSendID = SCOPE_IDENTITY()    
    
                IF (ISNULL(@NotificationSendID, 0) > 0)    
                  AND (NOT EXISTS (SELECT    
                    NULL    
                  FROM coc_NotificationSendLanguages(NOLOCK)    
                  WHERE NotificationSendID = @NotificationSendID)    
                  )    
                BEGIN    
                  INSERT INTO coc_ConsumerNotifications (NotificationSendID, ConsumerID, SendDate, HasChecked)    
                    SELECT    
                      @NotificationSendID,    
                      @ConsumerID,    
                      GETDATE(),    
                      0 --FROM coc_NotificationSends(NOLOCK) WHERE NotificationID=@NotificationID    
                  --SELECT @NotificationSendID,@ConsumerID,GETDATE(),0    
                  INSERT INTO coc_NotificationSendLanguages (NotificationSendID, LanguageID, Subject, Message)    
                    SELECT    
                      @NotificationSendID,    
                      LG.LanguageID,    
                      'Congratulations!',    
                      'Your Barcode is :~' + @c_Barcode    
                    FROM coc_Languages LG    
                --WHERE @LanguageID IS NULL or LG.LanguageID = @LanguageID    
    
                END    
    
        FETCH NEXT FROM BarcodeList INTO @c_Barcode    
              END    
    
              CLOSE BarcodeList    
              DEALLOCATE BarcodeList    
    
    
    
              SELECT    
                @NotificationID = CN.NotificationID    
              FROM coc_ECoupons EC (NOLOCK)    
              INNER JOIN coc_Notifications CN (NOLOCK)    
                ON EC.EServiceID = CN.EServiceID    
              WHERE ECouponID = @EcouponID    
            END    
    
            SELECT TOP (@AssignedCoupons)    
              Barcode    
            FROM coc_EServiceBarcodes(NOLOCK)    
            WHERE AsignedMoile = @MobileNumber    
            AND EServiceBarcodeID IN (SELECT    
              EServiceBarcodeID    
            FROM @BarCodes)    
            --ORDER BY EServiceBarcodeID DESC     
            ORDER BY NEWID()    
    
    
    
            DECLARE @SMSStringEnglish nvarchar(200),    
                    @SMSStringArabic nvarchar(200)    
            DECLARE @ThankYouEnglish nvarchar(200),    
                    @ThankYouArabic nvarchar(200)    
            SELECT    
              @SMSStringEnglish = EnumValue    
            FROM coc_EnumValueLanguages(NOLOCK)    
            WHERE EnumValueID = 145    
            AND LanguageID = 1    
            SELECT    
              @SMSStringArabic = EnumValue    
            FROM coc_EnumValueLanguages(NOLOCK)    
            WHERE EnumValueID = 145    
            AND LanguageID = 2    
    
            DECLARE @EServiceEnglish nvarchar(200),    
                    @EServiceArabic nvarchar(200)    
    
            SELECT    
              @SMSStringEnglish = REPLACE(@SMSStringEnglish, '@name', @ConsumerName)    
            SELECT    
              @SMSStringArabic = REPLACE(@SMSStringArabic, '@name', @ConsumerName)    
    
            SELECT    
              @EServiceEnglish = esl.EService    
            FROM coc_ECoupons(NOLOCK) Ec    
            INNER JOIN coc_EServiceLanguages(NOLOCK) Esl    
              ON Esl.EServiceID = ec.EServiceID    
            WHERE ECouponID = @ECouponID    
            AND esl.LanguageID = 1    
    
            SELECT    
              @EServiceArabic = esl.EService    
            FROM coc_ECoupons(NOLOCK) Ec    
            INNER JOIN coc_EServiceLanguages(NOLOCK) Esl    
              ON Esl.EServiceID = ec.EServiceID    
            WHERE ECouponID = @ECouponID    
            AND esl.LanguageID = 2    
    
            SELECT    
              @SMSStringEnglish = REPLACE(@SMSStringEnglish, '@name', @ConsumerName)    
            SELECT    
              @SMSStringArabic = REPLACE(@SMSStringArabic, '@name', @ConsumerName)    
    
            SELECT    
              @SMSStringEnglish = REPLACE(@SMSStringEnglish, '@competition', @EServiceEnglish)    
            SELECT    
              @SMSStringArabic = REPLACE(@SMSStringArabic, '@competition', @EServiceArabic)    
    
    
            SELECT    
              @ThankYouEnglish = 'Thank You for Participating in @competition'    
            SELECT    
              @ThankYouArabic = 'Thank You for Participating in @competition'    
    
            SELECT    
              @ThankYouEnglish = REPLACE(@ThankYouEnglish, '@competition', @EServiceEnglish)    
            SELECT    
              @ThankYouArabic = REPLACE(@ThankYouArabic, '@competition', @EServiceArabic)    
    
    
            IF ISNULL(@SMSStringEnglish, '') = ''    
            BEGIN    
              SELECT    
                @SMSStringEnglish = 'Thanks for participate in @competition. Barcodes: @barcodes'    
              SELECT    
                @SMSStringArabic = N'Thanks for participate in @competition. Barcodes: @barcodes'    
              SELECT    
                @SMSStringEnglish = REPLACE(@SMSStringEnglish, '@competition', @EServiceEnglish)    
              SELECT    
                @SMSStringArabic = REPLACE(@SMSStringArabic, '@competition', @EServiceArabic)    
    
            END    
    
    
            SELECT    
              @SMSStringEnglish,    
    @MobileNumber,    
              @Email,    
              @ThankYouEnglish,    
              1    
            UNION    
            SELECT    
              @SMSStringArabic,    
              @MobileNumber,    
              @Email,    
              @ThankYouArabic,    
              2    
          END    
        END    
    
    
      END    
    COMMIT TRANSACTION SaveBarcodeForSending    
  END TRY    
  BEGIN CATCH    
    SELECT    
      ERROR_LINE()    
    SELECT    
      ERROR_MESSAGE()    
    ROLLBACK TRANSACTION SaveBarcodeForSending    
  END CATCH    
  SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveBarcodeGeneration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveBarcodeGeneration]
	@CorporateID INTEGER,
	@ServiceID INTEGER,
	@NoOfBarcodes INTEGER,
	@NotificationID INTEGER,
	@BarcodeXML XML,	
	@lastBatch BIT = 0 ,
	@ErrorMessage [Remark] OUTPUT
AS 
SET NOCOUNT ON
	BEGIN TRY 

	DECLARE @Barcodes AS TABLE 
	(
		ID INTEGER IDENTITY(1,1),
		Barcode [NullDescription]
	)
 	
	DECLARE @EServiceBarcodes AS TABLE 
	(
		NotificationID	BIGINT NULL,
		CorporateID	INTEGER,
		BarcodeTypeID INTEGER,--72
		Barcode	[Remark],
		CanDelete	BIT NOT NULL DEFAULT 0,
		IsUsed	BIT NOT NULL DEFAULT 0,
		AsignedMoile [Mobile],
		AsignedEmailID	[Email],
		UsedDate	DATETIME NULL ,
		ConsumerNotificationID	BIGINT NULL,
		ConsumerID	INTEGER NULL
	)

	INSERT INTO @Barcodes
	SELECT  
		Barcode.value('(Barcode[1])', '[NullDescription]')
	FROM @BarcodeXML.nodes('/BarcodeXML/BarcodeData') AS ECoupons(Barcode);

	BEGIN TRANSACTION TRN_SaveBarcodes
			 
	INSERT INTO @EServiceBarcodes
	(
		NotificationID,
		CorporateID,
		BarcodeTypeID,
		Barcode
	)
	SELECT @NotificationID,@CorporateID,72,Barcode
		FROM @Barcodes
			
	IF(@lastBatch = 1)
	BEGIN	 
		UPDATE coc_EServiceInvoices
			SET IsBarcodeGenerated = 1
		WHERE EServiceID = @ServiceID AND NotificationCount = @NoOfBarcodes
	END

	SET @ErrorMessage =''
	  
	INSERT INTO coc_EServiceBarcodes(NotificationID,CorporateID,BarcodeTypeID,Barcode)
		SELECT NotificationID,CorporateID,BarcodeTypeID,Barcode
			FROM @EServiceBarcodes
	   
	 COMMIT TRANSACTION TRN_SaveBarcodes
	END TRY
	BEGIN CATCH									
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);			
	END CATCH

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveBarcodePrintFile]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveBarcodePrintFile]
	@BarcodePrintID INTEGER,
	@PrintCount INTEGER,
	@FileName NVARCHAR(400),	
	@ReturnValue [Remark] OUTPUT
AS
	SET NOCOUNT ON
	SET @ReturnValue ='';
	BEGIN TRY
		SELECT * FROM coc_BarcodePrintFile (NOLOCK)
	
	INSERT INTO coc_BarcodePrintFile(BarcodePrintID,[PrintCount],[FileName])
		   VALUES (@BarcodePrintID,@PrintCount,@FileName)
	END TRY
	BEGIN CATCH		
		SELECT ERROR_LINE(),ERROR_NUMBER()
		SELECT @ReturnValue=ERROR_MESSAGE()
	END CATCH
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveBarcodePurchase]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveBarcodePurchase]
	@Barcode [NullCode],
	@ConsumerID INTEGER,
	@EcouponID INTEGER,
	@Mobile [Mobile],
	@Email [Email],
	@ErrorMessage [Remark] OUTPUT 
AS
	SET NOCOUNT ON 
	BEGIN TRY 

		DECLARE @EserviceTypeID INTEGER
		DECLARE @EServiceBarcodeID INTEGER

		SELECT @EserviceTypeID=EC.EntryTypeID 
			FROM coc_ECoupons EC (NOLOCK)
				INNER JOIN coc_Notifications NS (NOLOCK) ON NS.EServiceID=EC.EServiceID
				INNER JOIN coc_EServiceBarcodes BC (NOLOCK) ON BC.NotificationID=NS.NotificationID
			WHERE BC.Barcode=@BarCode

		IF NOT EXISTS(SELECT NULL FROM  coc_EServiceBarcodes(NOLOCK) WHERE Barcode=@BarCode AND @EserviceTypeID IN(43))
		BEGIN
			SET @ErrorMessage = 'Barcode is Already Used OR Invalid Barcode' 
		END
		ELSE BEGIN
			INSERT INTO coc_ECouponParticipations(ECouponID,ParticipationDate,Barcode,ParticipationMobile,ParticipationEmailID,ConsumerID)
				SELECT @EcouponID,GETDATE(),@Barcode,@Mobile,@Email,@ConsumerID
				
			SELECT TOP(1) @EServiceBarcodeID=EServiceBarcodeID FROM coc_EServiceBarcodes(NOLOCK) WHERE Barcode=@BarCode
			UPDATE coc_EServiceBarcodes SET
				AsignedMoile=@Mobile,
				IsUsed=1,
				UsedDate=GETDATE(),
				ConsumerID=@ConsumerID
				WHERE EServiceBarcodeID=@EServiceBarcodeID

			INSERT INTO coc_ConsumerPointDetails
				SELECT @ConsumerID,GETDATE(),0,500,0
			SET @ErrorMessage=''
		END
			SELECT @ErrorMessage 
	END TRY
	BEGIN CATCH									
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);			
	END CATCH
	SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[SaveBroadcastEmail]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[SaveBroadcastEmail]  
	(
	@BroadcastEmail UT_coc_BroadcastEmail Readonly
	)
	AS
	SET NOCOUNT ON
		BEGIN		
	INSERT INTO   coc_BroadcastEmail(EServiceID,CustomerName,EmailAddress,EmailBody,UserID,EntryTime)
	SELECT EServiceID,CustomerName,EmailAddress,EmailBody,UserID,EntryTime FROM @BroadcastEmail
	select getdate()
		END
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveChannelName]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveChannelName]
	@ConsumerID INTEGER,
	@ChannelName NVARCHAR(MAX),
	@ErrorMessage [Remark] OUTPUT 

AS
	BEGIN
		UPDATE coc_Consumers SET ChannelName=@ChannelName WHERE ConsumerID=@ConsumerID
		SET @ErrorMessage=''
	END

	


GO
/****** Object:  StoredProcedure [dbo].[SaveCities]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveCities]
	@CountryID INTEGER,
	@CityID INTEGER, 
	@DynamicQuery XML,
	@IsActive BIT=NULL,
	@IsIntigration BIT=NULL,
	@ReturnValue [Remark] OUTPUT
AS
SET NOCOUNT ON
	BEGIN 
		 
		BEGIN TRANSACTION TRN_Cities
		BEGIN TRY 
		DECLARE @Value TABLE
		( 
			LanguageID INTEGER, 
			Value [Remark]
		)
		INSERT INTO @Value (LanguageID,Value)
		SELECT	XmlTable.value('@LanguageID','INTEGER'),
				XmlTable.value('@Value','[Remark]')
				FROM @DynamicQuery.nodes('/Xml/Row') AS Data(XmlTable)

		IF(ISNULL(@CityID,0)=0)
		BEGIN
			SELECT @CityID=MAX(ISNULL(CityID,0))+1 FROM [coc_Cities](NOLOCK) 
			INSERT INTO [coc_Cities](CityID,CountryID,IsActive)
				SELECT @CityID,@CountryID,1  
 
			INSERT INTO coc_CityLanguages (CityID,LanguageID,City)
				SELECT @CityID,LanguageID,Value FROM @Value 

		END	ELSE
		BEGIN
			UPDATE [coc_Cities]
				SET CountryID=@CountryID,
					IsActive=@IsActive,
					HasIntegration=@IsIntigration
				WHERE CityID=@CityID

			DELETE FROM coc_CityLanguages WHERE CityID=@CityID
			INSERT INTO coc_CityLanguages (CityID,LanguageID,City)
				SELECT @CityID,LanguageID,Value FROM @Value
		END
		SET @ReturnValue ='' 
		COMMIT TRANSACTION TRN_Cities
		
		END TRY
		BEGIN CATCH
			SELECT @ReturnValue= ERROR_MESSAGE()
		ROLLBACK TRANSACTION TRN_Cities
		END CATCH
	END
SET NOCOUNT OFF 


GO
/****** Object:  StoredProcedure [dbo].[SaveConsumerInvoice]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveConsumerInvoice]
	@ECouponInvoiceID INTEGER,
	@ConsumerID INTEGER,
	@ECouponID INTEGER,
	@AssignedCoupons INTEGER,
	@ECouponInvoiceXml XML=NULL,
	@EligibleCoupons INTEGER,
	@InvoiceDate DATETIME,
	@MobileNumber [Mobile],
	@UserID INTEGER,
	@NewConsumer INTEGER,
	@ConsumerName [Name],
	@UserTerm [Remark], 
	@ReturnValue [Remark] OUTPUT
AS
	SET NOCOUNT ON 
	BEGIN TRANSACTION SaveConsumerInvoice
	BEGIN TRY 
	BEGIN
		DECLARE @InvoiceDetail TABLE
		( 
			InvoiceNumber [Code],
			InvoiceDate DATETIME,
			InvoiceAmount [Amount],
			Remarks [Remark],
			EligibleCoupons INTEGER,
			MaxCoupons INTEGER
		)

		INSERT INTO @InvoiceDetail(InvoiceNumber,InvoiceDate,InvoiceAmount,Remarks,EligibleCoupons,MaxCoupons)
			SELECT invoice.value('(InvoiceNumber[1])', '[Code]'),
					invoice.value('(InvoiceDate[1])', '[DATETIME]'),
					invoice.value('(InvoiceAmount[1])', '[Amount]'),
					invoice.value('(Remarks[1])', '[Remark]'),
					invoice.value('(EligibleCoupons[1])', '[INTEGER]'),
					invoice.value('(MaxCoupons[1])', '[INTEGER]')
				FROM @ECouponInvoiceXml.nodes('/ECoupon/Invoice') AS Data(invoice);
		IF(@ECouponInvoiceID=0)
		BEGIN
			SELECT @ConsumerID = CU.ConsumerID FROM coc_Consumers(NOLOCK) CU WHERE CU.PrimaryMobile=@MobileNumber
			IF(@ConsumerID=0)
				SET @ConsumerID=NULL

			INSERT INTO coc_ECouponInvoices(ECouponID,InvoiceDate,MobileNumber,ConsumerID,EligibleCoupons,AssignedCoupons,UsesTerm,AddDate,AddUserID)
				SELECT @ECouponID,@InvoiceDate,@MobileNumber,@ConsumerID,@EligibleCoupons,@AssignedCoupons,@UserTerm,GETDATE(),@UserID

			SET @ECouponInvoiceID=SCOPE_IDENTITY()

			INSERT INTO coc_ECouponInvoiceDetails(ECouponInvoiceID,InvoiceNumber,InvoiceDate,InvoiceAmount,Remarks,EligibleCoupons,MaxCoupons,AssignedCoupons)
				SELECT @ECouponInvoiceID,IT.InvoiceNumber,IT.InvoiceDate,IT.InvoiceAmount,IT.Remarks,IT.EligibleCoupons,IT.MaxCoupons,@AssignedCoupons
					FROM @InvoiceDetail IT 

			EXEC SaveECouponPurchases @Barcode=NULL,@EcouponID=@ECouponID,@ConsumerID=@ConsumerID,@Mobile=@MobileNumber,@Email=NULL,@EligibleCoupons=@EligibleCoupons,@ErrorMessage=@ReturnValue
			SET @ReturnValue=''
		END
	END
	COMMIT TRANSACTION SaveConsumerInvoice
	END TRY
	BEGIN CATCH
		SELECT ERROR_LINE()
		SELECT ERROR_MESSAGE()
	ROLLBACK TRANSACTION SaveConsumerInvoice
	END CATCH 
	SET NOCOUNT OFF




GO
/****** Object:  StoredProcedure [dbo].[SaveConsumerNotifications]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveConsumerNotifications]   
 @ErrorMessage [Remark] OUTPUT   
AS   
SET NOCOUNT ON   
 SET @ErrorMessage =''  
 BEGIN TRY   
 BEGIN TRANSACTION TRN_ProcessNotifications  
    
  insert into coc_ConsumerNotifications (  
   NotificationSendID  
  ,ConsumerID  
  ,SendDate  
  ,HasChecked        
  ,SendPushNotification    
)    
select ns.NotificationSendID, cs.ConsumerID, ns.SendingDate, 'False' as HasChecked, 
(Case when (isnull(cs.androiddevicetoken,'')!='' or isnull(cs.devicetoken,'')!='') then 'True' else 'False' end) as SendPushNotification 
from coc_GeneralNotification(NOLOCK)  gn  
inner join coc_NotificationSends(NOLOCK) ns on ns.GeneralNotificationId = gn.GeneralNotificationId  
left join coc_Consumers(NOLOCK) cs on isnull(cs.IsActive, 0) = 'True' and isnull(cs.IsDeleted, 0) = 'False'  
where Convert(date,getdate()) between Convert(date,gn.ScheduleFromDate) and Convert(date,gn.ScheduleToDate)  
and isnull(gn.IsActive, 0) = 'True'  
and isnull(gn.IsBrodaCast, 0) = 'True'  
and (ns.CityID is null or cs.CityID = ns.CityID)  
and (ns.Gender is null or cs.Gender = ns.Gender)  
and (ns.AgeGroupID  is null or cs.AgeGroupID = ns.AgeGroupID)  
and (ns.CityID is null or cs.CityID = ns.CityID)  
  
and ns.SendingDate<=GETDATE()  
and not exists(select top 1 1 from coc_ConsumerNotifications(NOLOCK) cn where cn.ConsumerID = cs.ConsumerID and cn.NotificationSendID = ns.NotificationSendID)  
  
 COMMIT TRANSACTION TRN_ProcessNotifications  
 END TRY  
 BEGIN CATCH           
  ROLLBACK TRANSACTION TRN_ProcessNotifications  
  SELECT @ErrorMessage=ERROR_MESSAGE()  
 END CATCH  
  
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveConsumerNotificationsFromGeneralNotificationsForJob]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveConsumerNotificationsFromGeneralNotificationsForJob]       
AS     
SET NOCOUNT ON       
 BEGIN TRY     
 BEGIN TRANSACTION TRN_ProcessNotifications    
      
  insert into coc_ConsumerNotifications (    
   NotificationSendID    
  ,ConsumerID    
  ,SendDate    
  ,HasChecked          
  ,SendPushNotification      
)      
select ns.NotificationSendID, cs.ConsumerID, ns.SendingDate, 'False' as HasChecked,   
(Case when (isnull(cs.androiddevicetoken,'')!='' or isnull(cs.devicetoken,'')!='') then 'True' else 'False' end) as SendPushNotification   
from coc_GeneralNotification(NOLOCK)  gn    
inner join coc_NotificationSends(NOLOCK) ns on ns.GeneralNotificationId = gn.GeneralNotificationId    
left join coc_Consumers(NOLOCK) cs on isnull(cs.IsActive, 0) = 'True' and isnull(cs.IsDeleted, 0) = 'False'    
where Convert(date,getdate()) between Convert(date,gn.ScheduleFromDate) and Convert(date,gn.ScheduleToDate)    
and isnull(gn.IsActive, 0) = 'True'    
and isnull(gn.IsBrodaCast, 0) = 'True'    
and (ns.CityID is null or cs.CityID = ns.CityID)    
and (ns.Gender is null or cs.Gender = ns.Gender)    
and (ns.AgeGroupID  is null or cs.AgeGroupID = ns.AgeGroupID)    
and (ns.CityID is null or cs.CityID = ns.CityID)    
    
and Convert(date,ns.SendingDate)<=Convert(date,GETDATE())
and not exists(select top 1 1 from coc_ConsumerNotifications(NOLOCK) cn where cn.ConsumerID = cs.ConsumerID and cn.NotificationSendID = ns.NotificationSendID)    
    
 COMMIT TRANSACTION TRN_ProcessNotifications    
 END TRY    
 BEGIN CATCH             
  ROLLBACK TRANSACTION TRN_ProcessNotifications    
 END CATCH    
    
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveConsumers]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveConsumers]
	@ConsumerID INTEGER,
	@ConsumerXML XML,
	@VerificationCode [NullPin],
	@InvitationCode [NullPin],
	@IntrestedCityXml XML=NULL,
	@InviteeID INTEGER=NULL,
	@ErrorMessage [Remark] OUTPUT 
AS
SET NOCOUNT ON
	BEGIN TRY 
	 DECLARE @LoyaltyPoint INTEGER
	 DECLARE @MemberShipID  NVARCHAR(40)=NEWID()
	 DECLARE @yearDiff INTEGER
	 DECLARE @AgeGroupID INTEGER
	 DECLARE @ConsumerIntrestedCities TABLE
	 (
		CityID INTEGER
	 )
 	 DECLARE @Consumers AS TABLE 
		(
			ConsumerID	INTEGER,
			FirstName [Name],
			SecondName	[NullName],
			FamilyName	[NullName],
			UserID	INTEGER,
			Gender	SMALLINT,
			BirthDate	DATETIME,
			AgeGroupID	INTEGER,
			KnowECouponID	INTEGER,
			Address1	Address,
			Address2	Address,
			PrimaryMobile	[Mobile],
			SecondaryMobile	[Mobile],
			EmailID	[Email],
			FacebookID	[Email],
			CityID	INTEGER,
			CountryID	INTEGER,
			ImageFile [NullDescription],
			OtpID [NullPin],
			IsVerified	BIT,
			VerificationDate DATETIME,
			IsActive	BIT,
			AcceptedTerms BIT,
			HideApplicationTour	BIT,
			IsFacebookUser	BIT,
			LoyaltyPoint INTEGER,
			RedeemPoint	INTEGER,
			BalancePoint INTEGER,
			NotificationCount INTEGER,
			[Password] [NullName],
			MembershipNumber [NullCode],
			KnowECouponOthers [NullDescription],
			Iqama [NullCode],
			NationalityID INTEGER,
			DeviceToken [NullDescription]
		)
		  
	 INSERT INTO @Consumers
		(
			ConsumerID,
			FirstName,
			SecondName,
			FamilyName,
			UserID,
			Gender,
			BirthDate,
			AgeGroupID,
			KnowECouponID,
			Address1,
			Address2,
			PrimaryMobile,
			SecondaryMobile,
			EmailID,
			FacebookID,
			CityID,
			CountryID,
			ImageFile,
			OtpID,
			IsVerified,
			VerificationDate,
			IsActive,
			AcceptedTerms,
			HideApplicationTour,
			IsFacebookUser,
			LoyaltyPoint,
			RedeemPoint,
			BalancePoint,
			NotificationCount,
			[Password],
			MembershipNumber,
			KnowECouponOthers,
			Iqama,
			NationalityID,
			DeviceToken
		)
		SELECT  ISNULL(@ConsumerID,0), 
			Consumers.value('(FirstName[1])', '[Name]'),
			Consumers.value('(SecondName[1])', '[NullName]'),
			Consumers.value('(FamilyName[1])', '[NullName]'),
			Consumers.value('(UserID[1])', '[INTEGER]'),
			Consumers.value('(Gender[1])', '[SMALLINT]'),
			Consumers.value('(BirthDate[1])', '[DATETIME]'),
			Consumers.value('(AgeGroupID[1])', '[INTEGER]'),
			CASE WHEN @VerificationCode IS NOT NULL AND @VerificationCode <> 0  THEN 21 ELSE Consumers.value('(KnowECouponID[1])', '[INTEGER]') END,
			Consumers.value('(Address1[1])', '[Address]'),
			Consumers.value('(Address2[1])', '[Address]'),
			Consumers.value('(PrimaryMobile[1])', '[Mobile]'),
			Consumers.value('(SecondaryMobile[1])', '[Mobile]'),
			Consumers.value('(EmailID[1])', '[Email]'),
			Consumers.value('(FacebookID[1])', '[Email]'),
			CASE WHEN @VerificationCode IS NOT NULL AND @VerificationCode <> 0  THEN 1 ELSE Consumers.value('(CityID[1])', '[INTEGER]') END,
			CASE WHEN @VerificationCode IS NOT NULL AND @VerificationCode <> 0  THEN 183 ELSE Consumers.value('(CountryID[1])', '[INTEGER]') END,
			Consumers.value('(ImageFile[1])', '[NullDescription]'),
			Consumers.value('(OtpID[1])', '[INTEGER]'),
			Consumers.value('(IsVerified[1])', '[BIT]'),
			CASE WHEN @VerificationCode IS NOT NULL AND @VerificationCode <> 0 THEN GETDATE() ELSE NULL END,
			--Consumers.value('(VerificationDate[1])', '[DATETIME]'),
			Consumers.value('(IsActive[1])', '[BIT]'),
			Consumers.value('(AcceptedTerms[1])', '[BIT]'),
			Consumers.value('(HideApplicationTour[1])', '[BIT]'),
			Consumers.value('(IsFacebookUser[1])', '[BIT]'),
			Consumers.value('(LoyaltyPoint[1])', '[INTEGER]'),
			Consumers.value('(RedeemPoint[1])', '[INTEGER]'),
			Consumers.value('(BalancePoint[1])', '[INTEGER]'),
			Consumers.value('(NotificationCount[1])', '[INTEGER]'),
			Consumers.value('(Password[1])', 'NVARCHAR'),
			CONVERT(NVARCHAR(10),@MemberShipID) ,
			Consumers.value('(HowYouknowText[1])', '[NullDescription]'),
			Consumers.value('(Iqama[1])', '[NullCode]'),
			Consumers.value('(NationalityID[1])', 'NVARCHAR'),
			Consumers.value('(DeviceToken[1])', 'NVARCHAR')
		FROM @ConsumerXML.nodes('/Registrations/RegistrationData') AS ECoupons(Consumers);
		SET @ErrorMessage =''
	
		INSERT INTO @ConsumerIntrestedCities
		SELECT   
			intrestedCity.value('(CityID[1])', '[INTEGER]')
			from @IntrestedCityXml.nodes('/IntrestedCity/City') AS ECoupons(intrestedCity);

	SELECT @yearDiff=DATEDIFF(YY,BirthDate,GETDATE()) FROM @Consumers
	IF(@yearDiff >= 7 AND @yearDiff <=17)
	 SET @AgeGroupID=11
	ELSE IF(@yearDiff>=18 AND @yearDiff<=25)
	 SET @AgeGroupID=12
	ELSE IF(@yearDiff>=26 AND @yearDiff<=35)
	 SET @AgeGroupID=13
	ELSE IF(@yearDiff>=36 AND @yearDiff<=45)
	 SET @AgeGroupID=14
	ELSE IF(@yearDiff>45)
	 SET @AgeGroupID=15
	ELSE
	 SET @AgeGroupID=11
	

	SELECT @LoyaltyPoint=SetupValue FROM coc_LoyaltyPointSetups(NOLOCK) WHERE LoyaltyPointSetupID=101
	 BEGIN TRANSACTION TRN_SaveConsumers
	 	IF (ISNULL(@ConsumerID,0) = 0 )
			BEGIN
				--IF NOT EXISTS(SELECT NULL FROM coc_Consumers(NOLOCK) WHERE IsVerified=1 AND (EmailID IN(SELECT EmailID FROM @Consumers) OR PrimaryMobile IN(SELECT PrimaryMobile FROM @Consumers)) OR (FacebookID IN (SELECT FacebookID FROM @Consumers WHERE IsFacebookUser=1)))
				IF NOT EXISTS(SELECT NULL FROM coc_Consumers(NOLOCK) WHERE (EmailID IN(SELECT EmailID FROM @Consumers) OR PrimaryMobile IN(SELECT PrimaryMobile FROM @Consumers)) OR (FacebookID IN (SELECT FacebookID FROM @Consumers WHERE IsFacebookUser=1)))
				BEGIN
					INSERT INTO COC_Consumers(FirstName,SecondName,FamilyName,UserID,Gender,BirthDate,AgeGroupID,KnowECouponID,Address1,Address2,
						PrimaryMobile,SecondaryMobile,EmailID,FacebookID,CityID,CountryID,ImageFile,OtpID,IsVerified,VerificationDate,IsActive,AcceptedTerms,
						HideApplicationTour,IsFacebookUser,LoyaltyPoint,RedeemPoint,NotificationCount,AddDate,MembershipNumber,KnowECouponOthers,NationalityID,IqamaNumber,DeviceToken)
						SELECT FirstName,SecondName,FamilyName,NULL,Gender,BirthDate,@AgeGroupID,KnowECouponID,Address1,Address2,PrimaryMobile,
							SecondaryMobile,EmailID,FacebookID,CityID,CountryID,ImageFile,OtpID,IsVerified,VerificationDate,IsActive,AcceptedTerms,
							HideApplicationTour,IsFacebookUser,@LoyaltyPoint,0,NotificationCount,GETDATE(),MembershipNumber,KnowECouponOthers,NationalityID,Iqama,DeviceToken
						FROM @Consumers
					SET @ConsumerID=SCOPE_IDENTITY()

					INSERT INTO coc_ConsumerPointDetails(ConsumerID,PointDate,LoyaltyPoint,RedeemPoint,PointSource) 
						SELECT @ConsumerID,GETDATE(),@LoyaltyPoint,0,101

					INSERT INTO coc_ConsumerInterestedCities(ConsumerID,CityID)
						SELECT @ConsumerID,CI.CityID FROM @ConsumerIntrestedCities CI
					 
					SET  @ErrorMessage=@ConsumerID
				END
				ELSE 
				BEGIN
					UPDATE coc_Consumers SET 
						OtpID=(SELECT OtpID FROM @Consumers)
					WHERE ConsumerID=(SELECT ConsumerID FROM coc_Consumers(NOLOCK) WHERE EmailID IN(SELECT EmailID FROM @Consumers) OR PrimaryMobile IN(SELECT PrimaryMobile FROM @Consumers))

				SELECT @ErrorMessage= ConsumerID FROM coc_Consumers(NOLOCK) WHERE EmailID IN(SELECT EmailID FROM @Consumers) OR PrimaryMobile IN(SELECT PrimaryMobile FROM @Consumers)
				SET @ErrorMessage=@ErrorMessage
				END
			END
			ELSE
			 BEGIN
					UPDATE CR 
					  SET  
						CR.FirstName=CS.FirstName,
						CR.SecondName=CS.SecondName,
						CR.FamilyName=CS.FamilyName,
						CR.Gender=CS.Gender,
						CR.BirthDate=CS.BirthDate,
						CR.AgeGroupID=@AgeGroupID,
						CR.KnowECouponID=CS.KnowECouponID,
						CR.Address1=CS.Address1,
						CR.Address2=CS.Address2,
						CR.PrimaryMobile=CS.PrimaryMobile,
						CR.SecondaryMobile=CS.SecondaryMobile,
						CR.EmailID=CS.EmailID,
					--	CR.FacebookID=CS.FacebookID,
						CR.CityID=CS.CityID,
						CR.CountryID=CS.CountryID,
						CR.ImageFile=CS.ImageFile,
						CR.OtpID=CS.OtpID,
						CR.IsVerified=1,
						CR.VerificationDate=CS.VerificationDate,
						CR.IsActive=CS.IsActive,
						CR.AcceptedTerms=CS.AcceptedTerms,
						CR.HideApplicationTour=CS.HideApplicationTour,
						--CR.IsFacebookUser=CS.IsFacebookUser,
						CR.LoyaltyPoint=@LoyaltyPoint,
						--CR.RedeemPoint=CS.RedeemPoint,
						CR.NotificationCount=CS.NotificationCount,
						CR.KnowECouponOthers=CS.KnowECouponOthers,
						CR.NationalityID=CS.NationalityID,
						CR.IqamaNumber=CS.Iqama,
						CR.DeviceToken=CS.DeviceToken
						FROM COC_Consumers CR,@Consumers CS
					WHERE CR.ConsumerID = CS.ConsumerID
				
				DELETE FROM coc_ConsumerInterestedCities WHERE ConsumerID=@ConsumerID

				INSERT INTO coc_ConsumerInterestedCities(ConsumerID,CityID)
					SELECT @ConsumerID,CI.CityID FROM @ConsumerIntrestedCities CI

				IF(@InviteeID IS NOT NULL)
					BEGIN
						
						SELECT @LoyaltyPoint=ISNULL(SetupValue,0) FROM coc_LoyaltyPointSetups(NOLOCK) WHERE LoyaltyPointSetupID=102
						 
						INSERT INTO coc_ConsumerPointDetails(ConsumerID,PointDate,LoyaltyPoint,RedeemPoint,PointSource) 
							SELECT @InviteeID,GETDATE(),@LoyaltyPoint,0,102

						UPDATE COC_Consumers 
							SET LoyaltyPoint = ISNULL(LoyaltyPoint,0) + @LoyaltyPoint
						WHERE ConsumerID=@InviteeID

					END	
			END
			--IF(@InvitationCode!=0)
			--	BEGIN
			--		SELECT @ConsumerID =ConsumerID FROM coc_InviteFriends(NOLOCK) WHERE InvitationCode=@InvitationCode
			--		SELECT @LoyaltyPoint=SetupValue FROM coc_LoyaltyPointSetups(NOLOCK) WHERE LoyaltyPointSetupID=102

			--		INSERT INTO coc_ConsumerPointDetails(ConsumerID,PointDate,LoyaltyPoint,RedeemPoint) 
			--			SELECT @ConsumerID,GETDATE(),@LoyaltyPoint,0

			--		UPDATE coc_Consumers SET LoyaltyPoint = LoyaltyPoint+@LoyaltyPoint WHERE ConsumerID=@ConsumerID
			--	END
 		SET @ErrorMessage = CONVERT(NVARCHAR,@ConsumerID)
	 COMMIT TRANSACTION TRN_SaveConsumers
	END TRY
	BEGIN CATCH		
		ROLLBACK TRANSACTION TRN_SaveConsumers									
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);
	END CATCH

SET NOCOUNT OFF 











GO
/****** Object:  StoredProcedure [dbo].[SaveContactChanges]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveContactChanges]
	@UserID INTEGER,
	@EmailID [Email]=NULL,
	@MobileNo [Mobile]=NULL,
	@TypeID INTEGER,
	@ErrorMessage [Remark] OUTPUT 
AS
SET NOCOUNT ON
	BEGIN TRY 
	DECLARE @ConsumerID INTEGER
	 BEGIN TRANSACTION TRN_SaveConsumers

		SELECT @ConsumerID=ISNULL(ConsumerID ,0)
			FROM coc_Consumers(NOLOCK) 
		WHERE UserID=@UserID

	 	IF (ISNULL(@ConsumerID,0) > 0 )
		BEGIN
			 IF @TypeID=1
			 BEGIN
				UPDATE COC_Consumers 
					SET EmailID=@EmailID
					FROM COC_Consumers 
				WHERE ConsumerID = @ConsumerID

				UPDATE coc_Users 
					SET EmailID=@EmailID,UserName=@EmailID
					FROM coc_Users 
				WHERE UserID = @UserID
			END
			ELSE
			BEGIN
				UPDATE COC_Consumers 
					SET PrimaryMobile=@MobileNo
					--,SecondaryMobile =@MobileNo
					--FROM COC_Consumers 
				WHERE ConsumerID = @ConsumerID

				UPDATE coc_Users 
					SET MobileNumber=@MobileNo,
						PhoneNumber=@MobileNo
					FROM coc_Users 
				WHERE UserID = @UserID
			END
		END
		ELSE BEGIN
			IF (@TypeID =1)
			BEGIN
				UPDATE coc_Users 
					SET EmailID=@EmailID,UserName=@EmailID
					FROM coc_Users 
				WHERE UserID = @UserID
			END
			ELSE
			BEGIN
				UPDATE coc_Users 
					SET MobileNumber=@MobileNo,
						PhoneNumber=@MobileNo
					FROM coc_Users 
				WHERE UserID = @UserID
			END
		END
 		--SET @ErrorMessage = CONVERT(NVARCHAR,@ConsumerID)
	 COMMIT TRANSACTION TRN_SaveConsumers
	END TRY
	BEGIN CATCH									
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);			
	END CATCH

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveCorporateRegistration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveCorporateRegistration]
	@JcciNumber [Code],
	@CrNumber [NullCode],
	@EmailID  [Email],
	@MobileNumber [Phone],
	@Password  NVARCHAR(55),
	@LicenceExpiryDate DATE,
	@CRDocumentFile [NullDescription],
	@IDSponserFile [NullDescription],
	@LogoFile [NullDescription],
	@FirstName [NullName],
	@LastName [NullName],
	@MiddleName [NullName],
	@CountryID INT,
	@CityID INT,
	@Address [Address],
	@PhoneNumber [Mobile],
	@FaxNumber [Mobile],
	@IsEmailCommunication BIT,
	@IsSMSCommunication BIT,
	@IsMobileCommunication BIT,
	@CanContactMorning BIT,
	@CanContactEvening BIT,
	@NewsLetterNotification BIT,
	@PromotionNotification BIT,
	@VerificationCode [NullPin],
	@ReturnValue [Remark] OUTPUT 
AS 
SET NOCOUNT ON
	BEGIN TRY
 	     INSERT INTO coc_Corporates(JCCICode,CRNumber,EmailID,MobileNumber,AddDate,LicenseExpiryDate,CRDocumentFile,IDSponsorFile,LogoFile,
		 FirstName,LastName,MiddleName,CountryID,CityID,Address1,PhoneNumber,FaxNumber,[Password],IsEmailCommunication,IsSMSCommunication,IsMobileCommunication,CanContactMorning,
		 CanContactEvening,NewsLetterNotification,PromotionNotification)
			SELECT @JcciNumber,@CrNumber,@EmailID,@MobileNumber,GETDATE(),@LicenceExpiryDate,@CRDocumentFile,@IDSponserFile,@LogoFile,
			@FirstName,@LastName,@MiddleName,@CountryID,@CountryID,@Address,@PhoneNumber,@FaxNumber,@Password,@IsEmailCommunication,@IsMobileCommunication,@IsSMSCommunication,
			@CanContactMorning,@CanContactEvening,@NewsLetterNotification,@PromotionNotification
			SET @ReturnValue=SCOPE_IDENTITY()
	     INSERT INTO coc_Users(UserName,EmailID,[Password],MobileNumber,RoleID,IsActive)
			SELECT @FirstName,@EmailID,@Password,@MobileNumber,3,0
	END TRY
	BEGIN CATCH									
		SELECT @ReturnValue=ERROR_MESSAGE()
		RAISERROR(@ReturnValue, 16, 1);
	END CATCH
SET NOCOUNT OFF






GO
/****** Object:  StoredProcedure [dbo].[SaveCorporateUploadData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveCorporateUploadData]
	@XmlData XML,
	@UserID INTEGER,
	@ErrorMessage [Remark] OUTPUT 
AS
	SET NOCOUNT ON
		BEGIN TRY
		BEGIN TRANSACTION TRN_SaveCorporateUploadData	

		DECLARE @UsersID INTEGER
		DECLARE @Counter INTEGER

		DECLARE @CorporateUser AS TABLE 
		(
			ID INTEGER IDENTITY(1,1),
			FullName [Name], 
			StaffID [NullCode],
			Email [Email], 
			Mobile [Mobile],
			[Password] [Remark],
			ResetPassword BIT,
			CorporateID INTEGER,
			RetailOutletID INTEGER
		)		
		INSERT INTO @CorporateUser(FullName,StaffID,Email,Mobile,[Password],ResetPassword,CorporateID,RetailOutletID)
		SELECT  
			CorporateUser.value('(@FullName)', '[Name]'),
			CorporateUser.value('(@StaffID)', '[NullCode]'),
			CorporateUser.value('(@Email)', '[Email]'),
			CorporateUser.value('(@Mobile)', '[Mobile]'),
			CorporateUser.value('(@Password)', '[Remark]'),
			CorporateUser.value('(@ResetPassword)', 'BIT'),
			CorporateUser.value('(@CorporateID)', 'INTEGER'),
			CorporateUser.value('(@RetailOutletID)', 'INTEGER')
		FROM @XmlData.nodes('/XML/Row') AS Data(CorporateUser)

		SELECT @Counter = MIN(ID) FROM @CorporateUser

		WHILE @Counter IS NOT NULL
		BEGIN
			INSERT INTO coc_Users(UserName,Password,RoleID,MobileNumber,EmailID,ResetRequired,CreatedDate)
				SELECT FullName,Password,4,Mobile,Email,ResetPassword,GETDATE() FROM @CorporateUser WHERE ID=@Counter

			SET @UsersID=SCOPE_IDENTITY()

			INSERT INTO COC_CorporateUsers(CorporateNumber,EmployeeName,UserID,CorporateID,RetailOutletID,MobileNumber,EmailID,AddDate,AddUserID)
				SELECT StaffID,FullName,@UsersID,CorporateID,RetailOutletID,Mobile,Email,GETDATE(),@UserID
					FROM @CorporateUser WHERE ID=@Counter

			SELECT @Counter = MIN(ID) FROM @CorporateUser WHERE ID >@Counter
		END

		SELECT @ErrorMessage='';

		COMMIT TRANSACTION TRN_SaveCorporateUploadData
		END TRY
		BEGIN CATCH 
			SELECT @ErrorMessage=ERROR_MESSAGE()
			ROLLBACK TRANSACTION TRN_SaveCorporateUploadData
		END CATCH
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveCorporateUser]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveCorporateUser]
	@CorporateUserID INTEGER,
	@Name [Name],
	@UserName [Name],
	@EmailID [Email],
	@MobileNumber [Mobile],
	@Password [Remark],
	@RetailOutletID INTEGER=NULL,
	@UserID INTEGER,
	@IsActive BIT,
	@StaffIDNumber [NullCode],
	@ResetPassword BIT,
	@AllowRedeem BIT,
	@CorporateID INTEGER=NULL,
	@ReturnValue [Remark] OUTPUT
AS
	SET NOCOUNT ON
	BEGIN TRY
	
	DECLARE @usersID INTEGER

	BEGIN TRANSACTION SaveCorporateUser
		IF(@CorporateUserID=0)
		BEGIN
			IF NOT EXISTS(SELECT 1 FROM coc_Users (NOLOCK) WHERE (EmailID=@EmailID) OR UserName=@UserName or MobileNumber = @MobileNumber)
			BEGIN
				INSERT INTO coc_Users(UserName,[Password],RoleID,MobileNumber,EmailID,ResetRequired,CreatedDate)
					SELECT @EmailID,@Password,4,@MobileNumber,@EmailID,@ResetPassword,GETDATE()

				SET @usersID=SCOPE_IDENTITY()

				INSERT INTO coc_CorporateUsers(CorporateNumber,EmployeeName,UserID,CorporateID,RetailOutletID,MobileNumber,EmailID,AddDate,AddUserID,AllowRedeeming,IsActive)
					SELECT @StaffIDNumber,@Name,@usersID,@CorporateID,@RetailOutletID,@MobileNumber,@EmailID,GETDATE(),@UserID,@AllowRedeem,1
			END
			ELSE BEGIN
					SET @ReturnValue ='Email ID or User Name already exists'
			END
		END
		ELSE 
		BEGIN
			UPDATE coc_CorporateUsers
				SET CorporateNumber=@StaffIDNumber,
					EmployeeName=@Name,
					CorporateID=@CorporateID,
					RetailOutletID=@RetailOutletID,
					MobileNumber=@MobileNumber,
					EmailID=@EmailID,
					EditDate=GETDATE(),
					EditUserID=@UserID,
					IsActive=@IsActive,
					AllowRedeeming=@AllowRedeem
				WHERE CorporateUserID=@CorporateUserID

			SELECT @CorporateUserID

			UPDATE coc_Users 
			SET [Password]=@Password,
				EmailID=@EmailID,
				MobileNumber=@MobileNumber,
				ResetRequired=@ResetPassword,
				IsActive=@IsActive 
			WHERE UserID=(SELECT UserID FROM coc_CorporateUsers (NOLOCK) WHERE CorporateUserID=@CorporateUserID)
		END

	COMMIT TRANSACTION SaveCorporateUser
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION SaveCorporateUser
		SELECT ERROR_LINE(),ERROR_NUMBER()
		SELECT @ReturnValue=ERROR_MESSAGE()
	END CATCH
	SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[SaveCorporateUserRegistration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveCorporateUserRegistration] @UserID INTEGER  
 ,@CorporateUserXml XML  
 ,@Password [Remark]  
 ,@ErrorMessage [Remark] = null OUTPUT  
AS  
 SET NOCOUNT ON  
 BEGIN TRY  
 DECLARE @CorporateRegistration TABLE (   
  CorporateID            INTEGER  
  ,JCCICode               [Code]  
  ,CrNumber               [NullCode]  
  ,EmailID                [Email]  
  ,MobileNumber           [Phone]  
  ,UserID                 INT  
  ,[Password]             NVARCHAR(55)  
  ,LicenceExpiryDate      DATETIME  
  ,CRDocumentFile         [NullDescription]  
  ,IDSponserFile          [NullDescription]  
  ,LogoFile               [NullDescription]  
  ,FirstName              [NullName]  
  ,LastName               [NullName]  
  ,MiddleName             [NullName]  
  ,CountryID              INT  
  ,CityID                 INT NULL  
  ,[Address]              [Address]  
  ,PhoneNumber            [Mobile]  
  ,FaxNumber              [Mobile]  
  ,IsActive               BIT  
  ,IsEmailCommunication   BIT  
  ,IsSMSCommunication     BIT  
  ,IsMobileCommunication  BIT  
  ,CanContactMorning      BIT  
  ,CanContactEvening      BIT  
  ,NewsLetterNotification BIT  
  ,PromotionNotification  BIT  
  ,CorporateName          [NullDescription]  
  ,MerchantCode           [NullDescription]   
  ,CorporateType              INT  
  )  
SET @ErrorMessage = ''  
  
 INSERT INTO @CorporateRegistration (   
  JCCICode  
  ,CRNumber  
  ,EmailID  
  ,MobileNumber  
  ,UserID  
  ,[Password]  
  ,LicenceExpiryDate  
  ,CRDocumentFile  
  ,IDSponserFile  
  ,LogoFile  
  ,FirstName  
  ,LastName  
  ,MiddleName  
  ,CountryID  
  ,CityID  
  ,[Address]  
  ,PhoneNumber  
  ,FaxNumber  
  ,IsActive  
  ,IsEmailCommunication  
  ,IsSMSCommunication  
  ,IsMobileCommunication  
  ,CanContactMorning  
  ,CanContactEvening  
  ,NewsLetterNotification  
  ,PromotionNotification  
  ,CorporateName  
  ,MerchantCode  
  ,CorporateType  
  )  
 SELECT CorporateRegistration.value('JCCICode[1]', '[Code]')  
  ,CorporateRegistration.value('CRNumber[1]', '[NullCode]')  
  ,CorporateRegistration.value('EmailID[1]', '[Email]')  
  ,CorporateRegistration.value('MobileNumber[1]', '[Mobile]')  
  ,CorporateRegistration.value('UserID[1]', 'INT')  
  ,CorporateRegistration.value('Password[1]', '[CODE]')  
  ,CorporateRegistration.value('LicenceExpiryDate[1]', 'DATETIME')  
  ,CorporateRegistration.value('CRDocumentFile[1]', '[NullDescription]')  
  ,CorporateRegistration.value('IDSponserFile[1]', '[NullDescription]')  
  ,CorporateRegistration.value('LogoFile[1]', '[NullDescription]')  
  ,CorporateRegistration.value('FirstName[1]', '[NullName]')  
  ,CorporateRegistration.value('LastName[1]', '[NullName]')  
  ,CorporateRegistration.value('MiddleName[1]', '[NullName]')  
  ,CorporateRegistration.value('CountryID[1]', 'INT')  
  ,CorporateRegistration.value('CityID[1]', 'INT')  
  ,CorporateRegistration.value('Address[1]', '[Address]')  
  ,CorporateRegistration.value('PhoneNumber[1]', '[Mobile]')  
  ,CorporateRegistration.value('FaxNumber[1]', '[Mobile]')  
  ,CorporateRegistration.value('IsActive[1]', 'BIT')  
  ,CorporateRegistration.value('IsEmailCommunication[1]', 'BIT')  
  ,CorporateRegistration.value('IsSMSCommunication[1]', 'BIT')  
  ,CorporateRegistration.value('IsMobileCommunication[1]', 'BIT')  
  ,CorporateRegistration.value('CanContactMorning[1]', 'BIT')  
  ,CorporateRegistration.value('CanContactEvening[1]', 'BIT')  
  ,CorporateRegistration.value('NewsLetterNotification[1]', 'BIT')  
  ,CorporateRegistration.value('PromotionNotification[1]', 'BIT')  
  ,CorporateRegistration.value('CorporateName[1]', '[NullDescription]')  
  ,CorporateRegistration.value('MerchantCode[1]', '[NullDescription]')  
  ,CorporateRegistration.value('CorporateType[1]', 'INT')  
 FROM @CorporateUserXml.nodes('/Coorporates/CorporateData') AS ECoupons(CorporateRegistration);  
  
 BEGIN TRANSACTION TRN_Corporates  
   
 IF (ISNULL(@UserID, 0) = 0)  
 BEGIN  
  IF NOT EXISTS (  
   SELECT NULL  
   FROM coc_Users(NOLOCK)  
   WHERE IsActive = 1  
    AND (  
    EmailID IN (  
    SELECT EmailID  
    FROM @CorporateRegistration  
    )  
    )  
    AND (  
    MobileNumber IN (  
    SELECT MobileNumber  
    FROM @CorporateRegistration  
    )  
    )  
   )  
  BEGIN  
   print('insert coc_Users');  
   INSERT INTO coc_Users (   
   UserName  
   ,EmailID  
   ,[Password]  
   ,MobileNumber  
   ,RoleID  
   ,IsActive  
   ,ResetRequired  
   ,CreatedDate  
   )  
   SELECT CrNumber  
    ,EmailID  
    ,@Password  
   ,      MobileNumber  
   ,      3  
   ,      0  
   ,      0  
   ,      GETDATE()  
   FROM @CorporateRegistration  
  
   SET @UserID = SCOPE_IDENTITY()  
   print('insert coc_Users after: userid  = '+convert(varchar,@userid));  
     
   --auto generate 8 digit uniqu character for MerchantCode  
   DECLARE @UniqueID uniqueidentifier  
   DECLARE @MerchantCode nvarchar(100)  
   SET @UniqueID = NEWID()  
   set @MerchantCode = LEFT(@UniqueID,8);   
  
   INSERT INTO coc_Corporates (   
    JCCICode  
    ,CRNumber  
    ,UserID  
    ,EmailID  
    ,MobileNumber  
    ,AddDate  
    ,LicenseExpiryDate  
    ,CRDocumentFile  
    ,IDSponsorFile  
    ,LogoFile  
    ,FirstName  
    ,LastName  
    ,MiddleName  
    ,CountryID  
    ,CityID  
    ,Address1  
    ,PhoneNumber  
    ,FaxNumber  
    ,IsEmailCommunication  
    ,IsSMSCommunication  
    ,IsMobileCommunication  
    ,CanContactMorning  
    ,CanContactEvening  
    ,NewsLetterNotification  
    ,PromotionNotification  
    ,CorporateName  
    ,MerchantCode  
    ,CorporateType )  
   SELECT JCCICode  
   ,      CRNumber  
   ,      @UserID  
   ,      EmailID  
   ,      MobileNumber  
   ,      GETDATE()  
   ,      LicenceExpiryDate  
   ,      CRDocumentFile  
   ,      IDSponserFile  
   ,      LogoFile  
   ,      FirstName  
   ,      LastName  
   ,      MiddleName  
   ,      CountryID  
   ,      CityID  
   ,      [Address]  
   ,      PhoneNumber  
   ,      FaxNumber  
   ,      IsEmailCommunication  
   ,      IsMobileCommunication  
   ,      IsSMSCommunication  
   ,      CanContactMorning  
   ,      CanContactEvening  
   ,      NewsLetterNotification  
   ,      PromotionNotification  
   ,      CorporateName  
   ,      @MerchantCode  
   ,      CorporateType  
   FROM @CorporateRegistration  
   print('insert CorporateRegistration after');  
   --SET @ErrorMessage = @UserID  
   SET @ErrorMessage = ''  
  END  
 END  
 ELSE  
 BEGIN  
  UPDATE CT  
  SET 
	 -- CT.JCCICode               = CR.JCCICode  
  --,   CT.CRNumber               = CR.CrNumber  
  --,   CT.UserID                 = CR.UserID  
  --,   CT.EmailID                = CR.EmailID  
  --,   CT.MobileNumber           = CR.MobileNumber  
  --,   CT.LicenseExpiryDate      = CR.LicenceExpiryDate  
  --,   CT.CRDocumentFile         = CR.CRDocumentFile  
  --,   CT.IDSponsorFile          = CR.IDSponserFile  
  --,   CT.LogoFile               = CR.LogoFile  
  --,   CT.FirstName              = CR.FirstName  
  --,   CT.LastName               = CR.LastName  
  --,   CT.MiddleName             = CR.MiddleName  
  --,   CT.CountryID              = CR.CountryID  
  --,   CT.IsActive               = CR.IsActive  
  --,   CT.CityID                 = CR.CityID  
  --,   CT.Address1               = CR.Address  
  --,   CT.PhoneNumber            = CR.PhoneNumber  
  --,   CT.FaxNumber              = CR.FaxNumber  
  --,   CT.IsEmailCommunication   = CR.IsEmailCommunication  
  --,   CT.IsSMSCommunication     = CR.IsSMSCommunication  
  --,   CT.IsMobileCommunication  = CR.IsMobileCommunication  
  --,   CT.CanContactMorning      = CR.CanContactMorning  
  --,   CT.CanContactEvening      = CR.CanContactEvening  
  --,   CT.NewsLetterNotification = CR.NewsLetterNotification  
  --,   CT.PromotionNotification  = CR.PromotionNotification  
  --,   CT.CorporateName          = CR.CorporateName  
  --,   CT.MerchantCode           = CR.MerchantCode  

  CT.IsActive               = CR.IsActive  --modified by rafeeq
  FROM coc_Corporates         CT  
  ,    @CorporateRegistration CR  
  WHERE CT.UserID = CR.UserID  
  print('b4 coc_Users');  
  UPDATE CU  
  SET 
  --CU.UserName = CR.EmailID  
  --,CU.MobileNumber = CASE   
  -- WHEN CR.MobileNumber = ''   
  --  THEN NULL  
  --  ELSE CR.MobileNumber  
  -- END  
  --,   CU.[Password]   = @Password  
  --,   CU.IsActive     = CR.IsActive  
  CU.IsActive     = CR.IsActive  --modified by rafeeq
  FROM coc_Users              CU  
  ,    @CorporateRegistration CR  
  WHERE CU.UserID = CR.UserID  
  
  --SET @ErrorMessage = @UserID  
  SET @ErrorMessage = ''  
 END  
  
 COMMIT TRANSACTION TRN_Corporates  
 END TRY  
  
 BEGIN CATCH  
 ROLLBACK TRANSACTION TRN_Corporates  
  
 SELECT @ErrorMessage = ERROR_MESSAGE()  
  
 RAISERROR (  
 @ErrorMessage  
 ,16  
 ,1  
 );  
 END CATCH  
  
 SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[SaveCountry]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveCountry]
	@CountryID INTEGER,
	@CountryCode [Code], 
	@IsActive BIT=NULL,
	@DynamicQuery XML,
	@ReturnValue [Remark] OUTPUT
AS
SET NOCOUNT ON
	BEGIN

		BEGIN TRANSACTION TRN_Countries
		BEGIN TRY
		DECLARE @Value TABLE
		( 
			LanguageID INTEGER, 
			Value [Remark]
		)
		INSERT INTO @Value (LanguageID,Value)
		SELECT	XmlTable.value('@LanguageID','INTEGER'),
				XmlTable.value('@Value','[Remark]')
				FROM @DynamicQuery.nodes('/Xml/Row') AS Data(XmlTable)
		 
		IF(ISNULL(@CountryID,0)=0)
		BEGIN 
			SELECT @CountryID=MAX(ISNULL(CountryID,0))+1 FROM [coc_Countries](NOLOCK) 
			INSERT INTO [coc_Countries](CountryID,CountryCode,IsActive)
				SELECT @CountryID,@CountryCode,1    
					 
			INSERT INTO coc_CountryLanguages (CountryID,LanguageID,Country)
				SELECT @CountryID,LanguageID,Value FROM @Value 

		END	ELSE
		BEGIN 
			PRINT @CountryID
			UPDATE [coc_Countries]
				SET CountryCode=@CountryCode, 
					IsActive=@IsActive
				WHERE CountryID=@CountryID 
			
			DELETE FROM coc_CountryLanguages WHERE CountryID=@CountryID
			PRINT @CountryID
			INSERT INTO coc_CountryLanguages (CountryID,LanguageID,Country)
				SELECT @CountryID,LanguageID,Value FROM @Value
		END   
		SET @ReturnValue ='' 
		COMMIT TRANSACTION TRN_Countries
		
		END TRY
		BEGIN CATCH
			SELECT @ReturnValue= ERROR_MESSAGE()
		ROLLBACK TRANSACTION TRN_Countries
		END CATCH
		END
SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[SaveDeviceToken]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[SaveDeviceToken]  
 @ConsumerID INTEGER,  
 @DeviceToken nvarchar(250),  
 @ErrorMessage [Remark] OUTPUT   
  
AS  
 BEGIN  
  UPDATE coc_Consumers SET DeviceToken=@DeviceToken WHERE ConsumerID=@ConsumerID  
  SET @ErrorMessage=''  
 END  
  
   
GO
/****** Object:  StoredProcedure [dbo].[SaveEbundleData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveEbundleData]  
 @EBundleID INTEGER = 0,  
 @DescriptionXml XML=NULL,  
 @BundleNameXml XML=NULL,  
 @EligibilityMessageXml XML=NULL,  
 @ListMessageXml XML=NULL,  
 @NotificationMessageXml XML=NULL,  
 @NotificationMessageTitleXml XML=NULL,  
 @VoucherSendMessageXml XML=NULL,  
 @UserID INTEGER,  
 @ReturnValue BIGINT OUTPUT  
AS  
BEGIN  
--DECLARE @EbundleID INTEGER  
 IF(@EBundleID > 0)  
 BEGIN  
  UPDATE coc_EBundle SET EditDate = GETDATE(), EditedUserID = @UserID WHERE EBundleID = @EBundleID  
    
  DELETE FROM coc_EBundleLanguages   
  WHERE (EBundleID = @EBundleID) AND ([ResourceKey] = 'BundleName' OR [ResourceKey] ='Description' OR [ResourceKey] ='EligibilityMessage'   
  OR [ResourceKey]='ListMessage' OR [ResourceKey] ='NotificationMessage' OR [ResourceKey] ='VoucherSentMessage' OR [ResourceKey] ='NotificationMessageTitle' )  
 END   
 ELSE  
 BEGIN  
INSERT INTO coc_EBundle (Description,AddDate,CreatedUserID,IsActive)  
VALUES ('Description',GETDATE(),@UserID,1)  
  
SET @EBundleID=SCOPE_IDENTITY();  
 END  
  
INSERT INTO coc_EBundleLanguages (EBundleID,[ResourceKey], LanguageID,[ResourceValue])  
    SELECT @EBundleID, 'BundleName',ebundle.value('(Language[1])','INTEGER'),      
    ebundle.value('(Name[1])','NVARCHAR(1000)')  
   FROM @BundleNameXml.nodes('/Xml/ECouponData') AS Data(ebundle)  
  
 INSERT INTO coc_EBundleLanguages (EBundleID,[ResourceKey], LanguageID,[ResourceValue])  
    SELECT @EBundleID, 'Description',ebundle.value('(Language[1])','INTEGER'),      
    ebundle.value('(Description[1])','NVARCHAR(1000)')  
   FROM @DescriptionXml.nodes('/Xml/ECouponData') AS Data(ebundle)  
  
   INSERT INTO coc_EBundleLanguages (EBundleID,[ResourceKey], LanguageID,[ResourceValue])  
    SELECT @EBundleID, 'EligibilityMessage',ebundle.value('(Language[1])','INTEGER'),      
    ebundle.value('(EligibilityMessage[1])','NVARCHAR(1000)')  
   FROM @EligibilityMessageXml.nodes('/Xml/ECouponData') AS Data(ebundle)  
  
   INSERT INTO coc_EBundleLanguages (EBundleID,[ResourceKey], LanguageID,[ResourceValue])  
    SELECT @EBundleID, 'ListMessage',ebundle.value('(Language[1])','INTEGER'),      
    ebundle.value('(ListMessage[1])','NVARCHAR(1000)')  
   FROM @ListMessageXml.nodes('/Xml/ECouponData') AS Data(ebundle)  
  
   INSERT INTO coc_EBundleLanguages (EBundleID,[ResourceKey], LanguageID,[ResourceValue])  
    SELECT @EBundleID, 'NotificationMessage',ebundle.value('(Language[1])','INTEGER'),      
    ebundle.value('(NotificationMessage[1])','NVARCHAR(1000)')  
   FROM @NotificationMessageXml.nodes('/Xml/ECouponData') AS Data(ebundle)  
  
   INSERT INTO coc_EBundleLanguages (EBundleID,[ResourceKey], LanguageID,[ResourceValue])  
    SELECT @EBundleID, 'NotificationMessageTitle',ebundle.value('(Language[1])','INTEGER'),      
    ebundle.value('(NotificationMessagetitle[1])','NVARCHAR(1000)')  
   FROM @NotificationMessageTitleXml.nodes('/Xml/ECouponData') AS Data(ebundle)  
  
   INSERT INTO coc_EBundleLanguages (EBundleID,[ResourceKey], LanguageID,[ResourceValue])  
    SELECT @EBundleID, 'VoucherSentMessage',ebundle.value('(Language[1])','INTEGER'),      
    ebundle.value('(VoucherSendMessage[1])','NVARCHAR(1000)')  
   FROM @VoucherSendMessageXml.nodes('/Xml/ECouponData') AS Data(ebundle)  
  
   SET @ReturnValue=@EBundleID;  
  
   END
GO
/****** Object:  StoredProcedure [dbo].[SaveEcouponConfig]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveEcouponConfig] @ECouponID INTEGER  
 ,@EcouponConfigXml XML = NULL  
 ,@ECouponOutletXml XML = NULL  
 ,@ECouponDescriptionXml XML = NULL  
 ,@UserID INTEGER  
 ,@ReturnValue VARCHAR(1000) = NULL OUTPUT  
AS  
BEGIN  
 SET NOCOUNT ON;  
  
 BEGIN TRANSACTION saveecouponconfig  
  
 DECLARE @UsesTermEN [RemarkBig];  
 DECLARE @UsesTermAr [RemarkBig];  
  
 BEGIN TRY  
  BEGIN  
   DECLARE @Ecoupons TABLE (  
    eserviceid INTEGER  
    ,entrytypeid INTEGER NULL  
    ,imagefile [NULLDESCRIPTION]  
    ,participationbykiosk BIT  
    ,memberonly BIT  
    ,registrationrequired BIT  
    ,location [NULLDESCRIPTION]  
    ,locationurl [NULLDESCRIPTION]  
    ,allowstandardbarcode BIT  
    ,standardbarcodevalue [NULLDESCRIPTION]  
    ,multipleparticipation BIT  
    ,ParticipationCount INTEGER  
    ,numberofconsumerparticipations INTEGER  
    ,NumberOfGuestParticipations INTEGER  
    )  
   DECLARE @ECouponOutlets TABLE (retailoutletid INTEGER)  
   DECLARE @LanguageResources TABLE (  
    ecouponid INTEGER  
    ,languageid INTEGER  
    ,[resourcekey] VARCHAR(100)  
    ,[value] [RemarkBig]  
    ,[valueAr] [RemarkBig]  
    ,LocationEn NVARCHAR(max)  
    ,LocationAr NVARCHAR(max)  
    )  
  
   INSERT INTO @Ecoupons (  
    eserviceid  
    ,entrytypeid  
    ,imagefile  
    ,participationbykiosk  
    ,memberonly  
    ,registrationrequired  
    ,location  
    ,locationurl  
    ,allowstandardbarcode  
    ,standardbarcodevalue  
    ,multipleparticipation  
    ,ParticipationCount  
    ,Numberofconsumerparticipations  
    ,NumberOfGuestParticipations  
    )  
   SELECT ecoupon.value('(EServiceID[1])', 'INTEGER')  
    ,CASE   
     WHEN ecoupon.value('(EntryTypeID[1])', 'INTEGER') = 0  
      THEN NULL  
     ELSE ecoupon.value('(EntryTypeID[1])', 'INTEGER')  
     END  
    ,ecoupon.value('(ImageFile[1])', '[NullDescription]')  
    ,ecoupon.value('(ParticipationByKiosk[1])', 'INTEGER')  
    ,Isnull(ecoupon.value('(MemberOnly[1])', 'BIT'), 0)  
    ,Isnull(ecoupon.value('(RegistrationRequired[1])', 'BIT'), 0)  
    ,ecoupon.value('(Location[1])', '[NullDescription]')  
    ,ecoupon.value('(LocationURL[1])', '[NullDescription]')  
    ,Isnull(ecoupon.value('(AllowStandardBarcode[1])', 'BIT'), 0)  
    ,ecoupon.value('(StandardBarcodeValue[1])', '[NullDescription]')  
    ,Isnull(ecoupon.value('(MultipleParticipation[1])', 'BIT'), 0)  
    ,ecoupon.value('(ParticipationCount[1])', 'INTEGER')  
    ,ecoupon.value('(NumberOfConsumerParticipations[1])', 'INTEGER')  
    ,ecoupon.value('(NumberOfGuestParticipations[1])', 'INTEGER')  
   FROM @EcouponConfigXml.nodes('/ECouponConfigXml/ECouponData') AS Data(ecoupon)  
  
   INSERT INTO @ECouponOutlets (retailoutletid)  
   SELECT ecouponoutlet.value('(RetailOutletID[1])', 'INTEGER')  
   FROM @ECouponOutletXml.nodes('/ECoupon/RetailOutlet') AS Data(ecouponoutlet)  
  
   INSERT INTO @LanguageResources (  
    ecouponid  
    ,[resourcekey]  
    ,languageid  
    ,[value]  
    ,[valueAr]  
    ,LocationEn  
    ,LocationAr  
    )  
   SELECT @ECouponID  
    ,'Description'  
    ,ecoupondescription.value('(Language[1])', 'INTEGER')  
    ,ecoupondescription.value('(Description[1])', 'NVARCHAR(MAX)')  
    ,ecoupondescription.value('(DescriptionAr[1])', 'NVARCHAR(MAX)')  
    ,ecoupondescription.value('(LocationEn[1])', 'NVARCHAR(MAX)')  
    ,ecoupondescription.value('(LocationAr[1])', 'NVARCHAR(MAX)')  
   FROM @ECouponDescriptionXml.nodes('/Xml/ECouponData') AS Data(ecoupondescription)  
  
   IF (@ECouponID = 0)  
   BEGIN  
    INSERT INTO coc_ecoupons (  
     eserviceid  
     ,entrytypeid  
     ,imagefile  
     ,participationbykiosk  
     ,memberonly  
     ,registrationrequired  
     ,location  
     ,locationurl  
     ,allowstandardbarcode  
     ,standardbarcodevalue  
     ,multipleparticipation  
     ,ParticipationCount  
     ,NumberOfConsumerParticipations       
     ,NumberOfGuestParticipations  
     ,adduserid  
     ,adddate  
     )  
    SELECT EC.*  
     ,@UserID  
     ,Getdate()  
    FROM @Ecoupons EC  
  
    SET @ECouponID = Scope_identity();  
  
    INSERT INTO coc_ecouponoutlets (  
     ecouponid  
     ,retailoutletid  
     )  
    SELECT @ECouponID  
     ,EO.retailoutletid  
    FROM @ECouponOutlets EO  
  
    INSERT INTO coc_ecouponlanguages (  
     ecouponid  
     ,languageid  
     ,resourcekey  
     ,value  
     ,location  
     )  
    SELECT @ECouponID  
     ,1  
     ,'Description'  
     ,ED.value  
     ,ED.LocationEn  
    FROM @LanguageResources ED  
  
    INSERT INTO coc_ecouponlanguages (  
     ecouponid  
     ,languageid  
     ,resourcekey  
     ,value  
     ,location  
     )  
    SELECT @ECouponID  
     ,2  
     ,'Description'  
     ,ED.valueAr  
     ,ED.LocationAr  
    FROM @LanguageResources ED  
  
    SET @ReturnValue = @ECouponID;  
   END  
   ELSE  
   BEGIN  
    SELECT @UsesTermEN = EL.UsesTerm  
     ,@UsesTermAR = ECL.UsesTerm  
    FROM coc_ECoupons E (NOLOCK) 
    INNER JOIN coc_ECouponLanguages EL(NOLOCK) ON EL.ECouponID = E.ECouponID  
     AND EL.LanguageID = 1  
    INNER JOIN coc_ECouponLanguages ECL(NOLOCK) ON ECL.ECouponID = E.ECouponID  
     AND ECL.LanguageID = 2  
    WHERE E.ECouponID = @ECouponID  
  
    UPDATE coc_ecoupons  
    SET eserviceid = (  
      SELECT EC.eserviceid  
      FROM @Ecoupons EC  
      )  
     ,entrytypeid = (  
      SELECT EC.entrytypeid  
      FROM @Ecoupons EC  
      )  
     ,imagefile = (  
      SELECT EC.imagefile  
      FROM @Ecoupons EC  
      )  
     ,location = (  
      SELECT EC.location  
      FROM @Ecoupons EC  
      )  
     ,locationurl = (  
      SELECT EC.locationurl  
      FROM @Ecoupons EC  
      )  
     ,participationbykiosk = (  
      SELECT EC.participationbykiosk  
      FROM @Ecoupons EC  
      )  
     ,memberonly = (  
      SELECT EC.memberonly  
      FROM @Ecoupons EC  
      )  
     ,registrationrequired = (  
      SELECT EC.registrationrequired  
      FROM @Ecoupons EC  
      )  
     ,edituserid = @UserID  
     ,editdate = Getdate()  
     ,allowstandardbarcode = (  
      SELECT EC.allowstandardbarcode  
      FROM @Ecoupons EC  
      )  
     ,standardbarcodevalue = (  
      SELECT EC.standardbarcodevalue  
      FROM @Ecoupons EC  
      )  
     ,multipleparticipation = (  
      SELECT EC.multipleparticipation  
      FROM @Ecoupons EC  
      )  
     ,NumberOfConsumerParticipations = (  
      SELECT EC.NumberOfConsumerParticipations  
      FROM @Ecoupons EC  
      )  
     ,ParticipationCount = (  
      SELECT EC.ParticipationCount  
      FROM @Ecoupons EC  
      )  
     ,NumberOfGuestParticipations = (  
      SELECT EC.NumberOfGuestParticipations  
      FROM @Ecoupons EC  
      )  
    WHERE coc_ecoupons.ecouponid = @ECouponID  
  
    DELETE  
    FROM coc_ecouponoutlets  
    WHERE ecouponid = @ECouponID  
  
    INSERT INTO coc_ecouponoutlets (  
     ecouponid  
     ,retailoutletid  
     )  
    SELECT @ECouponID  
     ,EO.retailoutletid  
    FROM @ECouponOutlets EO  
  
    DELETE  
    FROM coc_ecouponlanguages  
    WHERE ecouponid = @ECouponID  
  
    INSERT INTO coc_ecouponlanguages (  
     ecouponid  
     ,languageid  
     ,resourcekey  
     ,value  
     ,Location  
     ,UsesTerm  
     )  
    SELECT @ECouponID  
     ,1  
     ,'Description'  
     ,ED.value  
     ,ED.LocationEn  
     ,@UsesTermEN  
    FROM @LanguageResources ED  
  
    INSERT INTO coc_ecouponlanguages (  
     ecouponid  
     ,languageid  
     ,resourcekey  
     ,value  
     ,Location  
     ,UsesTerm  
     )  
    SELECT @ECouponID  
     ,2  
     ,'Description'  
     ,ED.valueAr  
     ,ED.LocationAr  
     ,'<div dir= ''rtl'' >' + @UsesTermAR + '</div>'  
    FROM @LanguageResources ED  
  
    SET @ReturnValue = @ECouponID  
   END  
  END  
  
  COMMIT TRANSACTION saveecouponconfig  
 END TRY  
  
 BEGIN CATCH  
  ROLLBACK TRANSACTION saveecouponconfig  
  
  SELECT Error_line()  
  
  SELECT Error_message()  
  
  SET @ReturnValue = '-505'  
 END CATCH  
  
 SET NOCOUNT OFF  
END  
GO
/****** Object:  StoredProcedure [dbo].[SaveEcouponConfigQuestionaire]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveEcouponConfigQuestionaire]    
 @ECouponID INTEGER,    
 @QuestionXml XML=NULL,    
 @OptionXml XML=NULL,    
 @QuestionCount INTEGER=NULL,    
 @AllowMultipleParticipation BIT=NULL,    
 @ParticipationCount INTEGER=NULL,    
 @UserID INTEGER,    
 @ReturnValue [Remark] OUTPUT    
AS    
BEGIN    
     
 SET NOCOUNT ON;    
    
    BEGIN TRANSACTION sp_SaveEcouponConfigQuestionaire    
 BEGIN TRY    
  BEGIN    
    
   DECLARE @QuestionBankID INTEGER    
   DECLARE @QuestionOptionID INTEGER    
   DECLARE @QuestionNo INTEGER=0    
   DECLARE @CorrectAnswer INTEGER=0    
   DECLARE @LanguageCounter INTEGER=0    
    
   DECLARE @QuestionBanks TABLE    
    (    
     ID INTEGER IDENTITY(1,1),    
     QuestionNo INTEGER NULL,    
     LanguageID INTEGER,    
     Question [Remark]    
    )    
    
   DECLARE @QuestionOptions TABLE    
    (     
     ID INTEGER IDENTITY(1,1),    
     QuestionNo INTEGER NULL,    
     LanguageID INTEGER,    
     Options1 [Remark],    
     Options2 [Remark],    
     Options3 [Remark],    
     Options4 [Remark],    
     IsCorrect INTEGER      
    )     
    
   INSERT INTO @QuestionBanks(QuestionNo,LanguageID,Question)    
    SELECT QuestionBanks.value('RowID[1]','INTEGER'),     
        QuestionBanks.value('LanguageID[1]','INTEGER'),    
        QuestionBanks.value('Value[1]','[Remark]')       
     FROM @QuestionXml.nodes('/XML/QuestionBank/Questions/ECoupon') AS Data(QuestionBanks)    
    
   INSERT INTO @QuestionOptions(QuestionNo,LanguageID,Options1,Options2,Options3,Options4,IsCorrect)    
    SELECT ecouponQuestionOption.value('RowID[1]','INTEGER'),    
        ecouponQuestionOption.value('LanguageID[1]','INTEGER'),    
        ecouponQuestionOption.value('Options1[1]','[Remark]'),    
        ecouponQuestionOption.value('Options2[1]','[Remark]'),    
        ecouponQuestionOption.value('Options3[1]','[Remark]'),    
        ecouponQuestionOption.value('Options4[1]','[Remark]'),    
        ecouponQuestionOption.value('IsCorrect[1]','INTEGER')    
     FROM @QuestionXml.nodes('/XML/QuestionBank/Questions/ECoupon/AnswerOptions/Option') AS Data(ecouponQuestionOption)    
    
       
   --UPDATE coc_ECoupons SET QuestionCount=@QuestionCount,MultipleParticipation=@AllowMultipleParticipation,ParticipationCount=@ParticipationCount WHERE ECouponID=@ECouponID    
    UPDATE coc_ECoupons SET QuestionCount=@QuestionCount,MultipleParticipation=@AllowMultipleParticipation WHERE ECouponID=@ECouponID    

   DELETE FROM coc_QuestionOptionLanguages WHERE QuestionOptionID IN(SELECT QuestionOptionID FROM coc_QuestionOptions(NOLOCK) WHERE QuestionBankID IN(SELECT QuestionBankID FROM coc_QuestionBanks(NOLOCK) WHERE ECouponID=@ECouponID))    
   DELETE FROM coc_QuestionOptions WHERE QuestionBankID IN(SELECT QuestionBankID FROM coc_QuestionBanks(NOLOCK) WHERE ECouponID=@ECouponID)    
   DELETE FROM coc_QuestionLanguages WHERE QuestionBankID IN(SELECT QuestionBankID FROM coc_QuestionBanks(NOLOCK) WHERE ECouponID=@ECouponID)    
   DELETE FROM coc_QuestionBanks WHERE ECouponID=@ECouponID    
    
   SELECT @QuestionNo=MIN(QuestionNo) FROM @QuestionBanks     
   WHILE (@QuestionNo IS NOT NULL )    
   BEGIN    
    SET @CorrectAnswer=(SELECT TOP 1 IsCorrect FROM @QuestionOptions WHERE QuestionNo=@QuestionNo)    
    
    INSERT INTO coc_QuestionBanks(ECouponID)--,ArabicQuestion,EnglishQuestion,UrduQuestion    
     SELECT @ECouponID--,QB.ArabicQuestion,QB.EnglishQuestion,QB.UrduQuestion     
      --FROM @QuestionBanks QB where ID=@QuestionNo+1    
    
    SET @QuestionBankID=SCOPE_IDENTITY()    
    SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo    
    WHILE (@LanguageCounter IS NOT NULL )    
    BEGIN    
     INSERT INTO coc_QuestionLanguages(QuestionBankID,LanguageID,Question)    
       SELECT @QuestionBankID,@LanguageCounter,Question FROM @QuestionBanks WHERE QuestionNo=@QuestionNo AND LanguageID=@LanguageCounter    
    
      SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo AND LanguageID>@LanguageCounter    
    END    
    
    INSERT INTO coc_QuestionOptions(QuestionBankID,IsCorrect)    
       SELECT @QuestionBankID,CASE WHEN @CorrectAnswer=1 THEN 1 ELSE 0 END    
      SET @QuestionOptionID=SCOPE_IDENTITY()    
    
    SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo    
    WHILE (@LanguageCounter IS NOT NULL )    
    BEGIN    
     INSERT INTO coc_QuestionOptionLanguages(QuestionOptionID,LanguageID,QuestionOption)    
       SELECT @QuestionOptionID,@LanguageCounter,Options1 FROM @QuestionOptions WHERE QuestionNo=@QuestionNo AND LanguageID=@LanguageCounter    
          
     SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo AND LanguageID>@LanguageCounter    
    END    
    
    INSERT INTO coc_QuestionOptions(QuestionBankID,IsCorrect)    
     SELECT @QuestionBankID,CASE WHEN @CorrectAnswer=2 THEN 1 ELSE 0 END    
    SET @QuestionOptionID=SCOPE_IDENTITY()    
    
    SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo    
    WHILE (@LanguageCounter IS NOT NULL )    
    BEGIN    
     INSERT INTO coc_QuestionOptionLanguages(QuestionOptionID,LanguageID,QuestionOption)    
       SELECT @QuestionOptionID,@LanguageCounter,Options2 FROM @QuestionOptions WHERE QuestionNo=@QuestionNo AND LanguageID=@LanguageCounter    
          
     SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo AND LanguageID>@LanguageCounter    
    END    
    
    INSERT INTO coc_QuestionOptions(QuestionBankID,IsCorrect)    
       SELECT @QuestionBankID,CASE WHEN @CorrectAnswer=3 THEN 1 ELSE 0 END    
      SET @QuestionOptionID=SCOPE_IDENTITY()    
    
    SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo    
    WHILE (@LanguageCounter IS NOT NULL )    
    BEGIN    
     INSERT INTO coc_QuestionOptionLanguages(QuestionOptionID,LanguageID,QuestionOption)    
       SELECT @QuestionOptionID,@LanguageCounter,Options3 FROM @QuestionOptions WHERE QuestionNo=@QuestionNo AND LanguageID=@LanguageCounter    
          
     SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo AND LanguageID>@LanguageCounter    
    END    
    
    INSERT INTO coc_QuestionOptions(QuestionBankID,IsCorrect)    
     SELECT @QuestionBankID,CASE WHEN @CorrectAnswer=4 THEN 1 ELSE 0 END    
    SET @QuestionOptionID=SCOPE_IDENTITY()    
    
    SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo    
    WHILE (@LanguageCounter IS NOT NULL )    
    BEGIN    
     INSERT INTO coc_QuestionOptionLanguages(QuestionOptionID,LanguageID,QuestionOption)    
      SELECT @QuestionOptionID,@LanguageCounter,Options4 FROM @QuestionOptions WHERE QuestionNo=@QuestionNo AND LanguageID=@LanguageCounter    
          
     SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo AND LanguageID>@LanguageCounter    
    END    
            
    SELECT @QuestionNo=MIN(QuestionNo) FROM @QuestionBanks WHERE QuestionNo>@QuestionNo    
   END    
    
   SET @ReturnValue=''    
  END    
    
 COMMIT TRANSACTION sp_SaveEcouponConfigQuestionaire    
 END TRY    
    
 BEGIN CATCH    
  ROLLBACK TRANSACTION sp_SaveEcouponConfigQuestionaire    
 SELECT    
    ERROR_NUMBER() AS ErrorNumber    
    ,ERROR_SEVERITY() AS ErrorSeverity    
    ,ERROR_STATE() AS ErrorState    
    ,ERROR_PROCEDURE() AS ErrorProcedure    
    ,ERROR_LINE() AS ErrorLine    
    ,ERROR_MESSAGE() AS ErrorMessage;    
  SET @ReturnValue='Cannot Updated'    
 END CATCH    
    
END  
GO
/****** Object:  StoredProcedure [dbo].[SaveECouponConfiguration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveECouponConfiguration]
	@ECouponID INTEGER,
	@ECouponOutletXml XML=NULL,
	@ECouponPrizeXml XML=NULL,
	@ECouponProductXml XML=NULL,
	@ECouponXml XML=NULL,
	@QuestionBankXml XML=NULL,
	@QuestionOptionXml XML=NULL,
	@UserID INTEGER,
	@DisplayImage [NullDescription]=NULL,
	@EcouponLanguagesXML XML=NULL,
	@ReturnValue [Remark] OUTPUT
AS
BEGIN
	SET NOCOUNT ON
		BEGIN TRANSACTION SaveECouponConfiguration
		BEGIN TRY
			BEGIN
			DECLARE @QuestionBankID INTEGER
			DECLARE @QuestionOptionID INTEGER
			DECLARE @QuestionNo INTEGER=0
			DECLARE @CorrectAnswer INTEGER=0
			DECLARE @LanguageCounter INTEGER=0
			DECLARE @Count INTEGER 	
			DECLARE @EServiceID INTEGER 
			DECLARE @CorporateID INTEGER 
			DECLARE @NotificationID INTEGER 			
			DECLARE @Counter INTEGER=0 				
			DECLARE @NotificationCount INTEGER=0 			
			DECLARE @Ecoupons TABLE
			(
				EServiceID INTEGER,
				ResultDate DATETIME,
				WinnerCount TINYINT,
				EntryTypeID INTEGER NULL,
				MinInvoiceValue [Amount],
				AdditionalCouponValue [NullAmount],
				AllowMultipleInvoices BIT,
				CouponPerInvoice INTEGER,
				CouponPerMember INTEGER,
				QuestionCount INTEGER,
				ImageFile [NullDescription],
				UsesTerm [Remark],
				ECouponTemplate [Remark],
				Location [NullDescription],
				ParticipationByKiosk BIT,
				MemberOnly BIT,
				RegistrationRequired BIT,
				IsApproved BIT, 
				IsActive BIT,
				UserAurthorised BIT
			)
			DECLARE @ECouponPrizes TABLE
			( 
				PrizeTypeID INTEGER,
				PrizeHeader [Description],
				PrizeDetail [Remark], 
				ImageFile [NullDescription]
			)
			DECLARE @ECouponOutlets TABLE
			(
				RetailOutletID INTEGER
			)			
			DECLARE  @ECouponProducts TABLE
			(
				ProductCode [NullDescription] 
			)
			 
			DECLARE @QuestionBanks TABLE
			(
				ID INTEGER IDENTITY(1,1),
				QuestionNo INTEGER NULL,
				LanguageID INTEGER,
				Question [Remark]
			)

			DECLARE @QuestionOptions TABLE
			(	
				ID INTEGER IDENTITY(1,1),
				QuestionNo INTEGER NULL,
				LanguageID INTEGER,
				Options1 [Remark],
				Options2 [Remark],
				Options3 [Remark],
				Options4 [Remark],
				IsCorrect INTEGER  
			) 
			  
			DECLARE @EcouponLanguages TABLE
			(	
				ECouponID BIGINT,
				LanguageID INTEGER,
				UsesTerm [Remark],
				ECouponTemplate [Remark]
			) 

			INSERT INTO @Ecoupons(EServiceID,ResultDate,WinnerCount,EntryTypeID,MinInvoiceValue,AdditionalCouponValue,AllowMultipleInvoices,CouponPerInvoice,CouponPerMember,
								  QuestionCount,ImageFile,UsesTerm,ECouponTemplate,Location,ParticipationByKiosk,MemberOnly,RegistrationRequired,IsApproved,IsActive,UserAurthorised)
				SELECT ecoupon.value('(EServiceID[1])', 'INTEGER'),
					   ecoupon.value('(ResultDate[1])', 'DATETIME'),
					   ecoupon.value('(WinnerCount[1])', 'TINYINT'),
					   CASE WHEN ecoupon.value('(EntryTypeID[1])', 'INTEGER')=0 THEN NULL ELSE ecoupon.value('(EntryTypeID[1])', 'INTEGER') END ,
					   ecoupon.value('(MinInvoiceValue[1])', '[Amount]'),
					   ecoupon.value('(AdditionalCouponValue[1])', '[NullAmount]'),
					   ecoupon.value('(AllowMultipleInvoices[1])', 'BIT'),
					   ecoupon.value('(CouponPerInvoice[1])', 'INTEGER'),
					   ecoupon.value('(CouponPerMember[1])', 'INTEGER'),
					   ecoupon.value('(QuestionCount[1])', 'INTEGER'),
					   ecoupon.value('(ImageFile[1])', '[NullDescription]'),
					   ecoupon.value('(UsesTerm[1])', '[Remark]'),
					   ecoupon.value('(ECouponTemplate[1])', '[Remark]'),
					   ecoupon.value('(Location[1])', '[NullDescription]'),
					   ecoupon.value('(ParticipationByKiosk[1])', 'INTEGER'),
					   ISNULL(ecoupon.value('(MemberOnly[1])', 'BIT'),0),
					   ISNULL(ecoupon.value('(RegistrationRequired[1])', 'BIT'),0),
					   ecoupon.value('(IsApproved[1])', 'BIT'),
					   ecoupon.value('(IsActive[1])', 'BIT'),
					    ecoupon.value('(UserAurthorised[1])', 'BIT')
					FROM @ECouponXml.nodes('/ECouponXml/ECouponData') AS Data(ecoupon)

			INSERT INTO @ECouponOutlets(RetailOutletID)
				SELECT ecouponoUtlet.value('(RetailOutletID[1])', 'INTEGER')
					FROM @ECouponOutletXml.nodes('/ECoupon/RetailOutlet') AS Data(ecouponoUtlet)

			INSERT INTO @ECouponPrizes(PrizeTypeID,PrizeHeader,PrizeDetail,ImageFile)
				SELECT ecouponPrize.value('(PrizeTypeID[1])', '[INTEGER]'),
					   ecouponPrize.value('(PrizeHeader[1])', '[Description]'),
					   ecouponPrize.value('(PrizeDetail[1])', '[Remark]'),
					   ecouponPrize.value('(ImageFile[1])', '[NullDescription]')
					FROM @ECouponPrizeXml.nodes('/ECoupon/Prize') AS Data(ecouponPrize)

			INSERT INTO @QuestionBanks(QuestionNo,LanguageID,Question)
				SELECT QuestionBanks.value('RowID[1]','INTEGER'), 
					   QuestionBanks.value('LanguageID[1]','INTEGER'),
					   QuestionBanks.value('Value[1]','[Remark]')   
					FROM @QuestionBankXml.nodes('/XML/QuestionBank/Questions/ECoupon') AS Data(QuestionBanks)
					 
			INSERT INTO @QuestionOptions(QuestionNo,LanguageID,Options1,Options2,Options3,Options4,IsCorrect)
				SELECT ecouponQuestionOption.value('RowID[1]','INTEGER'),
					   ecouponQuestionOption.value('LanguageID[1]','INTEGER'),
					   ecouponQuestionOption.value('Options1[1]','[Remark]'),
					   ecouponQuestionOption.value('Options2[1]','[Remark]'),
					   ecouponQuestionOption.value('Options3[1]','[Remark]'),
					   ecouponQuestionOption.value('Options4[1]','[Remark]'),
					   ecouponQuestionOption.value('IsCorrect[1]','INTEGER')
					FROM @QuestionBankXml.nodes('/XML/QuestionBank/Questions/ECoupon/AnswerOptions/Option') AS Data(ecouponQuestionOption)


			INSERT INTO @ECouponProducts(ProductCode)--,IsUsed,UsedDate,MobileUsed)
				SELECT ecouponProduct.value('(ProductCode[1])', '[NullDescription]')
					FROM @ECouponProductXml.nodes('/NewDataSet/Table1') AS Data(ecouponProduct)
			
			INSERT INTO @EcouponLanguages(ECouponID,LanguageID,UsesTerm,ECouponTemplate)
				SELECT 0,ecouponProduct.value('(LanguageID[1])', 'INTEGER'),
					   ecouponProduct.value('(TermsValue[1])', '[Remark]'),
					   ecouponProduct.value('(TemplateValue[1])', '[Remark]')
						FROM @EcouponLanguagesXML.nodes('/XML/Row') AS Data(ecouponProduct)


			SELECT TOP 1 @EServiceID=EC.EServiceID,@CorporateID=ES.CorporateID  
				FROM @Ecoupons EC
					INNER JOIN coc_EServices(NOLOCK) ES ON EC.EServiceID=ES.EServiceID
			IF(@ECouponID=0)
			BEGIN 
				INSERT INTO coc_ECoupons(EServiceID,ResultDate,WinnerCount,EntryTypeID,MinInvoiceValue,AdditionalCouponValue,AllowMultipleInvoices,CouponPerInvoice,CouponPerMember,QuestionCount,
							ImageFile,UsesTerm,ECouponTemplate,Location,ParticipationByKiosk,MemberOnly,RegistrationRequired,IsApproved,IsActive,UserAurthorised,AddUserID,AddDate,DisplayImage)
					SELECT EC.*,@UserID,GETDATE(),@DisplayImage
						FROM @Ecoupons EC

				SET @ECouponID=SCOPE_IDENTITY();
				INSERT INTO coc_ECouponOutlets(ECouponID,RetailOutletID)
					SELECT @ECouponID,EO.RetailOutletID 
						FROM @ECouponOutlets EO

				INSERT INTO coc_ECouponPrizes(ECouponID,PrizeTypeID,PrizeHeader,PrizeDetail,ImageFile)
					SELECT @ECouponID,EP.PrizeTypeID,EP.PrizeHeader,EP.PrizeDetail,EP.ImageFile 
						FROM @ECouponPrizes EP			
				
				INSERT INTO coc_ECouponProducts(ECouponID,ProductCode,IsUsed,MobileUsed,UsedDate)
					SELECT @ECouponID,EP.ProductCode,0,NULL,NULL--,EP.IsUsed,EP.MobileUsed,EP.UsedDate
						FROM @ECouponProducts EP

				INSERT INTO coc_ECouponLanguages(ECouponID,LanguageID,UsesTerm,ECouponTemplate) 
					SELECT @ECouponID,LanguageID,UsesTerm,ECouponTemplate FROM @EcouponLanguages
				--SELECT @EServiceID=EC.EServiceID,@NotificationCount=ES.NotificationSend,@CorporateID=ES.CorporateID
				--	FROM coc_ECoupons(NOLOCK) EC 
				--		INNER JOIN coc_EServices ES ON EC.EServiceID=ES.EServiceID
				--	WHERE ECouponID=@ECouponID
				 
				SELECT @Counter= COUNT(ProductCode) FROM @ECouponProducts
				IF(@Counter>0)
				BEGIN
					INSERT INTO coc_Notifications(EServiceID,NotificationCount,NotificationSend,NotificationRead,ResendCounter)
						SELECT EServiceID,1,NULL,0,0 FROM @Ecoupons
					SET @NotificationID = SCOPE_IDENTITY()

					INSERT INTO coc_EServiceBarcodes(NotificationID,CorporateID,BarcodeTypeID,Barcode,CanDelete,IsUsed,AsignedMoile,AsignedEmailID,UsedDate,ConsumerNotificationID,ConsumerID)
						SELECT @NotificationID,@CorporateID,72,ProductCode,1,0,NULL,NULL,NULL,NULL,NULL FROM @ECouponProducts
				END
			END
			ELSE
			BEGIN 
				UPDATE coc_ECoupons
					SET EServiceID=(SELECT EC.EServiceID FROM @Ecoupons EC),
						ResultDate=(SELECT EC.ResultDate FROM @Ecoupons EC),
						WinnerCount=(SELECT EC.WinnerCount FROM @Ecoupons EC),
						EntryTypeID=(SELECT EC.EntryTypeID FROM @Ecoupons EC),
						MinInvoiceValue=(SELECT EC.MinInvoiceValue FROM @Ecoupons EC),
						AdditionalCouponValue=(SELECT EC.AdditionalCouponValue FROM @Ecoupons EC),
						AllowMultipleInvoices=(SELECT EC.AllowMultipleInvoices FROM @Ecoupons EC),
						CouponPerInvoice=(SELECT EC.CouponPerInvoice FROM @Ecoupons EC),
						CouponPerMember=(SELECT EC.CouponPerMember FROM @Ecoupons EC),
						QuestionCount=(SELECT EC.QuestionCount FROM @Ecoupons EC),
						ImageFile=(SELECT EC.ImageFile FROM @Ecoupons EC),
						UsesTerm=(SELECT EC.UsesTerm FROM @Ecoupons EC),
						ECouponTemplate=(SELECT EC.ECouponTemplate FROM @Ecoupons EC),
						Location=(SELECT EC.Location FROM @Ecoupons EC),
						ParticipationByKiosk=(SELECT EC.ParticipationByKiosk FROM @Ecoupons EC),
						MemberOnly=(SELECT EC.MemberOnly FROM @Ecoupons EC),
						RegistrationRequired=(SELECT EC.RegistrationRequired FROM @Ecoupons EC),
						IsApproved=(SELECT EC.IsApproved FROM @Ecoupons EC),
						IsActive=(SELECT EC.IsActive FROM @Ecoupons EC),
						UserAurthorised=(SELECT EC.UserAurthorised FROM @Ecoupons EC),
						EditUserID=@UserID,EditDate=GETDATE(),
						DisplayImage=@DisplayImage
					WHERE coc_ECoupons.ECouponID=@ECouponID
				
				DELETE FROM coc_ECouponOutlets WHERE ECouponID=@ECouponID
				
				INSERT INTO coc_ECouponOutlets(ECouponID,RetailOutletID)
					SELECT @ECouponID,EO.RetailOutletID 
						FROM @ECouponOutlets EO	

				DELETE FROM coc_ECouponPrizes WHERE ECouponID=@ECouponID

				DELETE FROM coc_ECouponLanguages WHERE ECouponID=@ECouponID

				INSERT INTO coc_ECouponLanguages(ECouponID,LanguageID,UsesTerm,ECouponTemplate) 
					SELECT @ECouponID,LanguageID,UsesTerm,ECouponTemplate FROM @EcouponLanguages

				INSERT INTO coc_ECouponPrizes(ECouponID,PrizeTypeID,PrizeHeader,PrizeDetail,ImageFile)
					SELECT @ECouponID,EP.PrizeTypeID,EP.PrizeHeader,EP.PrizeDetail,EP.ImageFile 
						FROM @ECouponPrizes EP
				--DELETE FROM coc_ECouponProducts WHERE ECouponID=@ECouponID
				IF NOT EXISTS(SELECT NULL FROM coc_ECouponProducts(NOLOCK) WHERE ECouponID=@ECouponID)
				BEGIN
					INSERT INTO coc_ECouponProducts(ECouponID,ProductCode,IsUsed,MobileUsed,UsedDate)
						SELECT @ECouponID,EP.ProductCode,0,NULL,NULL--EP.IsUsed,EP.MobileUsed,EP.UsedDate
							FROM @ECouponProducts EP

					SELECT @Counter= COUNT(ProductCode) FROM @ECouponProducts
					SELECT @NotificationID=NotificationID FROM coc_Notifications(NOLOCK) WHERE EServiceID=@EServiceID
					IF(@Counter>0)
					BEGIN
						--INSERT INTO coc_Notifications(EServiceID,NotificationCount,NotificationSend,NotificationRead,ResendCounter)
						--	SELECT EServiceID,1,NULL,0,0 FROM @Ecoupons
						--SET @NotificationID = SCOPE_IDENTITY()

						INSERT INTO coc_EServiceBarcodes(NotificationID,CorporateID,BarcodeTypeID,Barcode,CanDelete,IsUsed,AsignedMoile,AsignedEmailID,UsedDate,ConsumerNotificationID,ConsumerID)
							SELECT @NotificationID,@CorporateID,72,ProductCode,1,0,NULL,NULL,NULL,NULL,NULL FROM @ECouponProducts
					END
				END
					 
				DELETE FROM coc_QuestionOptionLanguages WHERE QuestionOptionID IN(SELECT QuestionOptionID FROM coc_QuestionOptions(NOLOCK) WHERE QuestionBankID IN(SELECT QuestionBankID FROM coc_QuestionBanks(NOLOCK) WHERE ECouponID=@ECouponID))
				DELETE FROM coc_QuestionOptions WHERE QuestionBankID IN(SELECT QuestionBankID FROM coc_QuestionBanks(NOLOCK) WHERE ECouponID=@ECouponID)
				DELETE FROM coc_QuestionLanguages WHERE QuestionBankID IN(SELECT QuestionBankID FROM coc_QuestionBanks(NOLOCK) WHERE ECouponID=@ECouponID)
				DELETE FROM coc_QuestionBanks WHERE ECouponID=@ECouponID

			END
			
			SELECT @QuestionNo=MIN(QuestionNo) FROM @QuestionBanks	
			WHILE (@QuestionNo IS NOT NULL )
			BEGIN
				SET @CorrectAnswer=(SELECT TOP 1 IsCorrect FROM @QuestionOptions WHERE QuestionNo=@QuestionNo)

				INSERT INTO coc_QuestionBanks(ECouponID)--,ArabicQuestion,EnglishQuestion,UrduQuestion
					SELECT @ECouponID--,QB.ArabicQuestion,QB.EnglishQuestion,QB.UrduQuestion 
						--FROM @QuestionBanks QB where ID=@QuestionNo+1

				SET @QuestionBankID=SCOPE_IDENTITY()
				SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo
				WHILE (@LanguageCounter IS NOT NULL )
				BEGIN
					INSERT INTO coc_QuestionLanguages(QuestionBankID,LanguageID,Question)
							SELECT @QuestionBankID,@LanguageCounter,Question FROM @QuestionBanks WHERE QuestionNo=@QuestionNo AND LanguageID=@LanguageCounter

						SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo AND LanguageID>@LanguageCounter
				END

				INSERT INTO coc_QuestionOptions(QuestionBankID,IsCorrect)
							SELECT @QuestionBankID,CASE WHEN @CorrectAnswer=1 THEN 1 ELSE 0 END
						SET @QuestionOptionID=SCOPE_IDENTITY()

				SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo
				WHILE (@LanguageCounter IS NOT NULL )
				BEGIN
					INSERT INTO coc_QuestionOptionLanguages(QuestionOptionID,LanguageID,QuestionOption)
							SELECT @QuestionOptionID,@LanguageCounter,Options1 FROM @QuestionOptions WHERE QuestionNo=@QuestionNo AND LanguageID=@LanguageCounter
						
					SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo AND LanguageID>@LanguageCounter
				END

				INSERT INTO coc_QuestionOptions(QuestionBankID,IsCorrect)
					SELECT @QuestionBankID,CASE WHEN @CorrectAnswer=2 THEN 1 ELSE 0 END
				SET @QuestionOptionID=SCOPE_IDENTITY()

				SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo
				WHILE (@LanguageCounter IS NOT NULL )
				BEGIN
					INSERT INTO coc_QuestionOptionLanguages(QuestionOptionID,LanguageID,QuestionOption)
							SELECT @QuestionOptionID,@LanguageCounter,Options2 FROM @QuestionOptions WHERE QuestionNo=@QuestionNo AND LanguageID=@LanguageCounter
						
					SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo AND LanguageID>@LanguageCounter
				END

				INSERT INTO coc_QuestionOptions(QuestionBankID,IsCorrect)
							SELECT @QuestionBankID,CASE WHEN @CorrectAnswer=3 THEN 1 ELSE 0 END
						SET @QuestionOptionID=SCOPE_IDENTITY()

				SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo
				WHILE (@LanguageCounter IS NOT NULL )
				BEGIN
					INSERT INTO coc_QuestionOptionLanguages(QuestionOptionID,LanguageID,QuestionOption)
							SELECT @QuestionOptionID,@LanguageCounter,Options3 FROM @QuestionOptions WHERE QuestionNo=@QuestionNo AND LanguageID=@LanguageCounter
						
					SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo AND LanguageID>@LanguageCounter
				END

				INSERT INTO coc_QuestionOptions(QuestionBankID,IsCorrect)
					SELECT @QuestionBankID,CASE WHEN @CorrectAnswer=4 THEN 1 ELSE 0 END
				SET @QuestionOptionID=SCOPE_IDENTITY()

				SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo
				WHILE (@LanguageCounter IS NOT NULL )
				BEGIN
					INSERT INTO coc_QuestionOptionLanguages(QuestionOptionID,LanguageID,QuestionOption)
						SELECT @QuestionOptionID,@LanguageCounter,Options4 FROM @QuestionOptions WHERE QuestionNo=@QuestionNo AND LanguageID=@LanguageCounter
						
					SELECT @LanguageCounter = MIN(LanguageID) FROM @QuestionBanks WHERE QuestionNo=@QuestionNo AND LanguageID>@LanguageCounter
				END
					   
				SELECT @QuestionNo=MIN(QuestionNo) FROM @QuestionBanks WHERE QuestionNo>@QuestionNo
			END

			SET @ReturnValue=''
		END
		 
		--	ROLLBACK TRANSACTION SaveECouponConfiguration
		COMMIT TRANSACTION SaveECouponConfiguration
		END TRY
		BEGIN CATCH
			ROLLBACK TRANSACTION SaveECouponConfiguration
			SELECT ERROR_LINE()
			SELECT ERROR_MESSAGE()
			SET @ReturnValue='Can not Updated'
		END CATCH
	SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[SaveECouponDownload]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveECouponDownload]
    @BarcodePrintID BIGINT=NULL,
	@CorporateID INTEGER,
	@NotificationID INTEGER,
	@NoOfBarcodes INTEGER,
	@UserID INTEGER,
	@ServiceID INTEGER,
	@IsECoupon BIT=1,
	@ErrorMessage [Remark] OUTPUT 
AS 
SET NOCOUNT ON
	BEGIN TRY 
	 
 	DECLARE @EServiceBarcodes AS TABLE 
	(
		UniqueID INTEGER NOT NULL IDENTITY(1,1),
		BarcodePrintID BIGINT NULL,
		EServiceBarcodeID	BIGINT NULL,
		CorporateID	INTEGER NULL,
		NotificationID	INTEGER NULL
	)
	   
	SET @ErrorMessage =''
	BEGIN TRANSACTION TRN_SaveBarcodes

	 IF(ISNULL(@BarcodePrintID,0)=0)
	 BEGIN
		INSERT INTO coc_BarcodePrints(NotificationID,PrintCount,PrintDate,PrintUserID)
			SELECT @NotificationID,@NoOfBarcodes,GETDATE(),@UserID
		SET @BarcodePrintID =SCOPE_IDENTITY();

		INSERT INTO @EServiceBarcodes
			SELECT @BarcodePrintID,EServiceBarcodeID ,CorporateID,NotificationID
				FROM coc_EServiceBarcodes(NOLOCK) 
			WHERE NotificationID=@NotificationID AND CorporateID = @CorporateID AND IsUsed=0  

		INSERT INTO coc_BarcodePrintDetails
			SELECT BarcodePrintID,EServiceBarcodeID 
				FROM @EServiceBarcodes WHERE UniqueID <= @NoOfBarcodes

		UPDATE SB
			SET IsUsed=1,UsedDate=GETDATE()
		FROM coc_EServiceBarcodes SB,@EServiceBarcodes EB
		WHERE SB.EServiceBarcodeID=EB.EServiceBarcodeID AND SB.CorporateID = @CorporateID AND EB.UniqueID <= @NoOfBarcodes
	   END

	   IF (ISNULL(@IsECoupon,0) =1)
	   BEGIN
		   SELECT BC.Barcode,EE.ECouponTemplate [TicketDescription],ISNULL(ES.CompetitionID,0)CompetitionID
				FROM coc_EServiceBarcodes BC(NOLOCK)
					INNER JOIN coc_BarcodePrintDetails PD(NOLOCK) ON BC.EServiceBarcodeID=PD.EServiceBarcodeID
					INNER JOIN coc_Notifications NT(NOLOCK) ON BC.NotificationID=NT.NotificationID
					INNER JOIN coc_ECoupons EE(NOLOCK) ON EE.EServiceID=NT.EServiceID
					INNER JOIN @EServiceBarcodes EB ON BC.EServiceBarcodeID=EB.EServiceBarcodeID AND EB.NotificationID=BC.NotificationID AND EB.CorporateID=BC.CorporateID
					LEFT JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID=NT.EServiceID
			WHERE BC.NotificationID=@NotificationID AND BC.CorporateID=@CorporateID
	    END
		ELSE BEGIN
			SELECT BC.Barcode,EE.TicketDescription [TicketDescription],ISNULL(ES.CompetitionID,0)CompetitionID
				FROM coc_EServiceBarcodes BC(NOLOCK)
					INNER JOIN coc_BarcodePrintDetails PD(NOLOCK) ON BC.EServiceBarcodeID=PD.EServiceBarcodeID
					INNER JOIN coc_Notifications NT(NOLOCK) ON BC.NotificationID=NT.NotificationID
					INNER JOIN coc_EServiceEvents EE(NOLOCK) ON EE.EServiceID=NT.EServiceID
					INNER JOIN @EServiceBarcodes EB ON BC.EServiceBarcodeID=EB.EServiceBarcodeID AND EB.NotificationID=BC.NotificationID AND EB.CorporateID=BC.CorporateID
					LEFT JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID=NT.EServiceID
			WHERE BC.NotificationID=@NotificationID AND BC.CorporateID=@CorporateID
		END 
	COMMIT TRANSACTION TRN_SaveBarcodes
	--ROLLBACK TRANSACTION TRN_SaveBarcodes
	END TRY
	BEGIN CATCH									
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);		
		ROLLBACK TRANSACTION TRN_SaveBarcodes	
	END CATCH

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[SaveEcouponDrawConfig]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveEcouponDrawConfig]
 @RetailXml XML=NULL
 ,@PrizeXml XML=NULL
 ,@DrawXml  XML=NULL
 ,@EcouponID INTEGER
 ,@DrawID INTEGER
 , @ReturnValue NVARCHAR(50) OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRANSACTION SaveEcouponDrawConfig
	BEGIN TRY
		BEGIN
			DECLARE @DrawPrizes TABLE
			( 
			PrizeID INTEGER,
			PrizeCount INTEGER
			)
			DECLARE @DrawOutlets TABLE
			(
			RetailOutletID INTEGER
			)   
			DECLARE  @EcouponDraw TABLE
			(
			nameEng [NULLDescription]
			,nameAr [NullDescription]
			,location [NullDescription]
			,locationURL [NullDescription]
			,drawdate DATETIME
			,descriptionEng [NullDescription]
			,descriptionAr [NullDescription]
			,latitude [NullCode]
			,longitude [NullCode]
			)
    
			INSERT INTO @DrawOutlets(RetailOutletID)
			SELECT drawUtlet.value('(RetailOutletID[1])', 'INTEGER')
			FROM @RetailXml.nodes('/ECoupon/RetailOutlet') AS Data(drawUtlet)

			INSERT INTO @DrawPrizes(PrizeID,PrizeCount)
			SELECT drawPrize.value('(PrizeID[1])', '[INTEGER]'),
			drawPrize.value('(PrizeCount[1])', '[INTEGER]')   
			FROM @PrizeXml.nodes('/ECoupon/Prize') AS Data(drawPrize)

			INSERT INTO @EcouponDraw(nameEng,nameAr,location, locationURL, drawdate,descriptionEng,descriptionAr,latitude,longitude)
			SELECT draw.value('(nameEng[1])', '[Description]'),
			draw.value('(nameAr[1])', '[Description]'),
			draw.value('(location[1])', '[Remark]'),
			draw.value('(locationURL[1])', '[NullDescription]'),
			convert(datetime, draw.value('(drawdate[1])', '[NullDescription]'),103),
			draw.value('(descriptionEng[1])', '[NullDescription]'),
			draw.value('(descriptionAr[1])', '[NullDescription]'),
			draw.value('(latitude[1])', '[NullCode]'),
			draw.value('(longitude[1])', '[NullCode]')
			FROM @DrawXml.nodes('/ECoupon/Draw') AS Data(draw)

			DECLARE @LanguageID INTEGER 
			IF(@DrawID > 0)
			BEGIN   
				UPDATE coc_ECouponDraw SET DrawDate=ED.drawdate,Location=ED.location,LocationURL=ED.locationURL,Latitude=ED.latitude,Longitude=ED.longitude FROM @EcouponDraw ED
				WHERE ECouponDrawID = @DrawID  

				UPDATE coc_ECouponDrawLanguages SET value = ED.nameEng FROM @EcouponDraw ED 
				WHERE ECouponDrawID = @DrawID AND ResourceKey='Name' AND LanguageID = 1

				UPDATE coc_ECouponDrawLanguages SET value = ED.nameAr FROM @EcouponDraw ED 
				WHERE ECouponDrawID = @DrawID AND ResourceKey='Name' AND LanguageID = 2

				UPDATE coc_ECouponDrawLanguages SET value = ED.descriptionEng FROM @EcouponDraw ED 
				WHERE ECouponDrawID = @DrawID AND ResourceKey='DrawDetail' AND LanguageID = 1

				UPDATE coc_ECouponDrawLanguages SET value = ED.descriptionAr FROM @EcouponDraw ED 
				WHERE ECouponDrawID = @DrawID AND ResourceKey='DrawDetail' AND LanguageID = 2

				--DELETE FROM coc_ECouponDrawRetailOutlets WHERE ECoponDrawID = @DrawID

				--INSERT INTO coc_ECouponDrawRetailOutlets(ECoponDrawID,RetailOutletID)
				--SELECT @DrawID,DO.RetailOutletID 
				--FROM @DrawOutlets DO

				DELETE FROM coc_ECouponDrawPrizes WHERE ECouponDrawID = @DrawID

				INSERT INTO coc_ECouponDrawPrizes(ECouponDrawID,ECouponPrizeID,Frequency)
				SELECT @DrawID,DP.PrizeID,DP.PrizeCount 
				FROM @DrawPrizes DP 

				DELETE FROM coc_ECouponDrawLanguages WHERE ECouponDrawID = @DrawID AND ResourceKey='LocationDescription'
	    
				SELECT @LanguageID=MIN(LanguageID) FROM coc_Languages(NOLOCK)
				WHILE @LanguageID IS NOT NULL
				BEGIN
					INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,LanguageID,ResourceKey,value)
						SELECT @DrawID,@LanguageID,'LocationDescription',ED.location FROM @EcouponDraw ED 

					SELECT @LanguageID=MIN(LanguageID) FROM coc_Languages(NOLOCK) WHERE LanguageID>@LanguageID
			
				END
			END

			ELSE
			BEGIN
				DECLARE @ECouponDrawID int = 0;

				INSERT INTO coc_ECouponDraw(ECouponID,DrawDate,Location,Latitude,Longitude)
				SELECT @EcouponID,ED.drawdate,ED.location,ED.latitude,ED.longitude
				FROM @EcouponDraw ED
				SET @ECouponDrawID=SCOPE_IDENTITY();

				INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,ResourceKey,Value,LanguageID)
				SELECT @ECouponDrawID,'Name',ED.nameEng,1 
				FROM @EcouponDraw ED

				INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,ResourceKey,Value,LanguageID)
				SELECT @ECouponDrawID,'Name',ED.nameAr,2
				FROM @EcouponDraw ED
     
				INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,ResourceKey,Value,LanguageID)
				SELECT @ECouponDrawID,'DrawDetail',ED.descriptionEng,1 
				FROM @EcouponDraw ED

				INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,ResourceKey,Value,LanguageID)
				SELECT @ECouponDrawID,'DrawDetail',ED.descriptionAr,2
				FROM @EcouponDraw ED 
     
				--INSERT INTO coc_ECouponDrawRetailOutlets(ECoponDrawID,RetailOutletID)
				--SELECT @ECouponDrawID,DO.RetailOutletID 
				--FROM @DrawOutlets DO
   
				INSERT INTO coc_ECouponDrawPrizes(ECouponDrawID,ECouponPrizeID,Frequency)
				SELECT @ECouponDrawID,DP.PrizeID,DP.PrizeCount 
				FROM @DrawPrizes DP 

				SELECT @LanguageID=MIN(LanguageID) FROM coc_Languages(NOLOCK)
				WHILE @LanguageID IS NOT NULL
				BEGIN
					INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,LanguageID,ResourceKey,value)
						SELECT @ECouponDrawID,@LanguageID,'LocationDescription',ED.location FROM @EcouponDraw ED 

					SELECT @LanguageID=MIN(LanguageID) FROM coc_Languages(NOLOCK) WHERE LanguageID>@LanguageID
			
				END

			END    
		END
		COMMIT TRANSACTION SaveEcouponDrawConfig
		SET @ReturnValue=''
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION SaveEcouponDrawConfig
		SELECT ERROR_LINE()
		SELECT ERROR_MESSAGE()
		SET @ReturnValue='-505'
	END CATCH
	SET NOCOUNT OFF
END


---------------------------------------------------------------------------------------------------------------------------------------------------------------



GO
/****** Object:  StoredProcedure [dbo].[SaveECouponInstantGiftParticipationFromCompetitionLink]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveECouponInstantGiftParticipationFromCompetitionLink]                                     
 @Barcode [NullDescription] = NULL                                    
 ,@EcouponID INTEGER                                    
 ,@ConsumerID INTEGER  = null                                  
 ,@GuestID int = null                                  
 ,@Mobile [Mobile] = NULL                                    
 ,@Email [Email] = NULL                                    
 ,@EligibleCoupons INTEGER = NULL                                    
 ,@WrongAnswer INTEGER = NULL                                    
 ,@ErrorMessage [Remark] = NULL OUTPUT,              
  @ParticipantsEServiceID int = null,                 
  @DeviceSource nvarchar(200) = null,                
  @MacAddress nvarchar(200) = null,                
  @ConsumerLatitude nvarchar(200) = null,                
  @ConsumerLongitude nvarchar(200) = null,                 
  @ClosestRetailoutletID int = null ,              
  @EnteredBarcode [NullDescription] = NULL ,    
  @ParticipationBarcode [Remark] = NULL OUTPUT,
  @IsInstantGiftWinner bit=0 OUTPUT,
  @ParticipationEmail [Email] = NULL OUTPUT,
  @ParticipationMobile [Mobile] = NULL OUTPUT,
  @CompetitionName nvarchar(250)=NULL OUTPUT,
  @ConsumerName nvarchar(250)=NULL OUTPUT
AS                                  
SET XACT_ABORT ON;                                     
BEGIN                                    
   set @IsInstantGiftWinner=0                                 
  if(@ConsumerID = 0)                                  
    set @ConsumerID = null;                                  
   if(@GuestID = 0)                                  
    set @GuestID = null                                  
   --DECLARE @NumberOfConsumerParticipations_N INT                                                
   --DECLARE @NumberOfGuestParticipations_N INT                                   
   --DECLARE @Participations_N INT                                                
   DECLARE @NoOfCoponsLeft INT;                                     
   DECLARE @NumberOfCopons INT;                                  
   set @NumberOfCopons = 1;                                  
                        
   if(@EcouponID=10255)                        
   begin                        
      SET @ErrorMessage = 'CoronaMSG';                                  
      RETURN;                           
   end                        
                        
   if(@EcouponID=10184 and                         
   (LEFT(@Mobile, 5)='00966'                         
   OR LEFT((select PrimaryMobile from coc_Consumers(NOLOCK) where ConsumerID=@ConsumerID),5)='00966'                        
   OR LEFT((select PrimaryMobile from coc_Guests(NOLOCK) where GuestID=@GuestID),5)='00966'))                        
   begin                        
      SET @ErrorMessage = 'AttentionMSG';                                  
      RETURN;                           
   end                        
                        
 BEGIN TRANSACTION SaveECouponPurchases                                    
 BEGIN TRY                                    
  DECLARE @EserviceTypeID INTEGER                                    
  DECLARE @EServiceBarcodeID INTEGER                                    
  --DECLARE @Points INTEGER                                    
  DECLARE @QuestionOptionID INTEGER                                    
  DECLARE @SelectedAnswer INTEGER                         
  DECLARE @EServiceID INTEGER                                    
  DECLARE @NotificationID INTEGER                                    
  --DECLARE @NotificationSendID INTEGER                                    
  DECLARE @LanguageID INTEGER                                    
  DECLARE @EnteredStandardBarcode [NullDescription]                                    
  DECLARE @LoyaltyPointSetupID int = 103                                    
  DECLARE @GeneralNotificationTemplateID int = 14                                    
                                     
  SET @ErrorMessage = ''                                    
                                    
  if(@ConsumerID is not null)                                  
    begin     
	if @ConsumerName is null
	 SELECT @ConsumerName = Isnull(FullName,isnull(FirstName,'user'))                                    
		FROM coc_Consumers(NOLOCK)                                    
		WHERE ConsumerID = @ConsumerID      
   IF @Email IS NULL                                    
    SELECT @Email = EmailID                                    
    FROM coc_Consumers(NOLOCK)                                    
    WHERE ConsumerID = @ConsumerID                                    
                                    
   IF @Mobile IS NULL                                    
    SELECT @Mobile = PrimaryMobile                                    
    FROM coc_Consumers(NOLOCK)                                    
    WHERE ConsumerID = @ConsumerID                                    
    end                                  
 else if(@GuestID is not null)                                  
    begin  
	if @ConsumerName is null
	 SELECT @ConsumerName = Isnull(FullName,isnull(FirstName,'user'))                                 
		FROM coc_guests(NOLOCK)                                    
		WHERE GuestID = @GuestID      
   IF @Email IS NULL                                    
    SELECT @Email = EmailID                                    
    FROM coc_guests(NOLOCK)                                    
    WHERE GuestID = @GuestID                                    
                                    
   IF @Mobile IS NULL                                    
    SELECT @Mobile = PrimaryMobile                                    
    FROM coc_guests(NOLOCK)                                    
    WHERE GuestID = @GuestID                                    
    end                                  
                  
                                 
  IF @EcouponID = 10066 and (@Mobile IS NULL                                    
   OR len(@Mobile) <> 14                                    
   OR (SUBSTRING(@Mobile, 1, 6) <> '009627' and SUBSTRING(@Mobile, 1, 6) <> '009665'))                                    
  BEGIN                                    
   SET @ErrorMessage = 'InvalidMobile'                                    
  END                                    
  ELSE IF @EcouponID = 10100 and (@Mobile IS NULL                                    
   OR len(@Mobile) <> 14                                    
   OR (SUBSTRING(@Mobile, 1, 6) <> '009715' and SUBSTRING(@Mobile, 1, 6) <> '009665'))                                    
  BEGIN                                    
   SET @ErrorMessage = 'InvalidMobile'                                    
  END                                    
  ELSE IF @EcouponID <> 10100 and @EcouponID <> 10066 and @EcouponID <> 10184 and @EcouponID <> 10278 and  (@Mobile IS NULL                                    
   OR len(@Mobile) <> 14                                    
   OR SUBSTRING(@Mobile, 1, 6) <> '009665')                                    
  BEGIN                               
   SET @ErrorMessage = 'InvalidMobile'                                    
  END                                    
  ELSE IF @Email IS NULL                                    
  BEGIN                                    
   SET @ErrorMessage = 'InvalidEmail'                                    
  END                                    
  ELSE                                    
  BEGIN                                    
   IF (ISNULL(@EligibleCoupons, 0) = 0)                                    
    SET @EligibleCoupons = 1                                    
                       
   DECLARE @BarCodes TABLE (                                    
    EServiceBarcodeID INTEGER                                    
    ,AsignedMoile [Mobile]                                    
    ,Barcode [NullDescription]                                    
    ,NotificationID INTEGER                                    
    ,IsUsed BIT                       
    )                                    
                                    
   --//----------------------------------------------------------------                                    
   SELECT @EServiceID = EServiceID                                    
   FROM coc_ECoupons(NOLOCK)                                    
   WHERE EcouponID = @EcouponID                                    
                                    
   DECLARE @errortext [Remark]                                    
   DECLARE @return_value INT                                    
  if(@ConsumerId is not null)                                  
  begin                                  
   EXEC @return_value = [dbo].[ValidateConsumerForECouponVoucher] @ConsumerId = @ConsumerID                                    
    ,@EserviceId = @EServiceID                                    
    ,@errortext = @errortext OUTPUT                                    
   PRINT @ConsumerId                                    
   PRINT @EserviceId                              
   PRINT @errortext                                    
   IF (@errortext != '0')                                    
   BEGIN                                    
    SET @ErrorMessage = @errortext                                    
    SELECT @ErrorMessage                                
 ROLLBACK TRANSACTION SaveECouponPurchases                                 
    RETURN  END                                    
  end                                  
   SET XACT_ABORT ON;                                    
                                    
                                   
   DECLARE @AllowStandardBarcode BIT                                    
   DECLARE @StandardBarcodeValue [NullDescription]                   
   DECLARE @NumberOfConsumerParticipations INT                                    
   DECLARE @StandardBarcodeByRetailOutlet BIT                                    
   DECLARE @StandardBarcodeByQuestionBank BIT                                    
   DECLARE @TotalAllowedParticipationPerCustomer INT                                    
   DECLARE @TotalAllowedParticipationPerCustomerPerDay INT                                    
   DECLARE @AllowedParticipationPerBarcodePerCustomer INT                                    
   DECLARE @AllowedParticipationPerBarcodePerCustomerPerDay INT                                    
   --declare @TotalAllowedParticipationPerGuest int                                    
   --declare @TotalAllowedParticipationPerGuestPerDay int                                    
   DECLARE @ECouponStandardBarcodeID BIGINT                                    
   DECLARE @Outlet_TotalAllowedParticipationPerCustomer INT                                    
   DECLARE @Outlet_TotalAllowedParticipationPerCustomerPerDay INT                                    
   DECLARE @Outlet_TotalAllowedParticipationInOutlet INT                                    
   DECLARE @Outlet_TotalAllowedParticipationPerBarcode INT                                    
   DECLARE @RetailOutletID INT                                    
                                       
   DECLARE @cnt_TotalCompetitionParticipation INTEGER          
   DECLARE @cnt_TotalCompetitionParticipationToday INTEGER                                    
   DECLARE @cnt_TotalCompetitionBarcodeParticipation INTEGER                                    
   DECLARE @cnt_TotalCompetitionParticipationForOutlet INTEGER                                    
   DECLARE @cnt_TotalCustParticipation INTEGER                                    
   DECLARE @cnt_TotalCustParticipationToday INTEGER                                    
   DECLARE @cnt_TotalCustBarcodeParticipation INTEGER                                    
   DECLARE @cnt_TotalCustBarcodeParticipationToday INTEGER                                    
   DECLARE @cnt_TotalOutletParticipation INTEGER                                    
   DECLARE @cnt_TotalCustOutletParticipation INTEGER                                    
   DECLARE @cnt_TotalCustOutletParticipationToday INTEGER                               
                             
   --Recursive                          
   DECLARE @RecursiveHoursParticipationDuration INTEGER                                    
   DECLARE @RecursiveHoursNumberOfParticipations INTEGER                                    
   --Recursive                          
   DECLARE @RecursiveHoursLastParticipatedOn datetime                           
   DECLARE @RecursiveHoursNumberOfParticipationsCount INTEGER                                   
                             
   --StandardBarcode-Recursive                          
   DECLARE @StandardBarcodeRecursiveHoursParticipationDuration INTEGER                                    
   DECLARE @StandardBarcodeRecursiveHoursNumberOfParticipations INTEGER                                       
   DECLARE @StandardBarcodeRecursiveHoursNumberOfParticipationsCount INTEGER                           
                                    
   SELECT @EServiceID = EServiceID                                    
    ,@AllowStandardBarcode = ISNULL(AllowStandardBarcode, 0)                                    
    ,@StandardBarcodeValue = ISNULL(StandardBarcodeValue, '')                                    
    ,@NumberOfConsumerParticipations = ISNULL(NumberOfConsumerParticipations, 1)                                    
    ,@StandardBarcodeByRetailOutlet = ISNULL(StandardBarcodeByRetailOutlet, 0)                                    
    ,@StandardBarcodeByQuestionBank = ISNULL(StandardBarcodeByQuestionBank,0)                                    
    ,@TotalAllowedParticipationPerCustomer = ISNULL(TotalAllowedParticipationPerCustomer, 0)                                    
    ,@TotalAllowedParticipationPerCustomerPerDay = ISNULL(TotalAllowedParticipationPerCustomerPerDay, ISNULL(TotalAllowedParticipationPerCustomer, 0))                                    
    ,@AllowedParticipationPerBarcodePerCustomer = ISNULL(AllowedParticipationPerBarcodePerCustomer, 0)                                    
    ,@AllowedParticipationPerBarcodePerCustomerPerDay = ISNULL(AllowedParticipationPerBarcodePerCustomerPerDay, ISNULL(AllowedParticipationPerBarcodePerCustomer, 0))                                   
    ,                              
  --@TotalAllowedParticipationPerGuest = ISNULL(TotalAllowedParticipationPerGuest, 0),                                    
    --@TotalAllowedParticipationPerGuestPerDay = ISNULL(TotalAllowedParticipationPerGuestPerDay, 0),                                    
    @EserviceTypeID = EntryTypeID                                    
 ,@RecursiveHoursParticipationDuration = isnull(RecursiveHoursParticipationDuration,0)                          
 ,@RecursiveHoursNumberOfParticipations = ISNULL(RecursiveHoursNumberOfParticipations,0)                          
   FROM coc_ECoupons(NOLOCK)                                    
   WHERE ECouponID = @EcouponID                                    

   SET @ParticipationEmail = @Email
   SET @ParticipationMobile = @Mobile
   Select @CompetitionName=EService from coc_EServiceLanguages(nolock) where EServiceID=@EServiceID and LanguageID=1   
                           
                                    
   IF (@EserviceTypeID = 46)                                    
   BEGIN                                    
    IF @AllowStandardBarcode = 1   and @StandardBarcodeValue = @Barcode                                 
     SELECT @EnteredStandardBarcode = @Barcode 
	
    declare @IsCorrectAnswer int                                    
                           
                         
  SELECT @ECouponStandardBarcodeID = ECB.ECouponStandardBarcodeID                                        
      ,@RetailOutletID = ECO.RetailOutletID                                                             
     FROM coc_ECouponStandardBarcodes(NOLOCK) ECB                                        
      INNER JOIN coc_ECoupons(NOLOCK) EC ON ECB.ECouponID = EC.ECouponID             
      LEFT JOIN  coc_ECouponOutlets(NOLOCK) ECO ON ECO.ECouponOutletID = ECB.ECouponOutletID                                        
       AND ((ECO.ECouponOutletID IS not NULL and  ISNULL(ECO.IsActive,1) = 1) or ECO.ECouponOutletID IS NULL)                                        
     WHERE ECB.ECouponID = @EcouponID                                        
      AND ECB.StandardBarcode = @Barcode                                        
      AND ECB.IsActive = 1               
     if  @ECouponStandardBarcodeID is not null
	   SELECT @EnteredStandardBarcode = @Barcode 
      declare @CorporateID int            
   declare @AllowExternalBarcode bit            
   select @AllowExternalBarcode=AllowExternalBarcode,@CorporateID=CorporateID from coc_EServices(nolock) where EServiceID=@EServiceID and AllowExternalBarcode=1             
            
 if @ECouponStandardBarcodeID is null and @AllowExternalBarcode=1            
 begin            
  declare @ReturnMessage nvarchar(500),              @ReturnStatus int                    
     exec USP_CORE_ExternalBarcodeParticipation @EServiceID,@EcouponID,@EnteredBarcode,@Mobile,@Email,@ConsumerID,NULL,@ReturnMessage Output,@ReturnStatus Output,@CorporateID,0,@RetailOutletID            
              
    SET @ErrorMessage = @ReturnMessage ;            
     
   Commit TRANSACTION SaveECouponPurchases                                     
   RETURN;            
            
 end  
  
 
 IF @AllowStandardBarcode = 1                                    
     AND @StandardBarcodeByQuestionBank = 1                    
    BEGIN                                    
     SELECT @ECouponStandardBarcodeID = ECB.ECouponStandardBarcodeID                                    
      ,@RetailOutletID = ECO.RetailOutletID                                    
      --,@RetailOutletID = ECO.RetailOutletID                                    
      ,@IsCorrectAnswer = QO.IsCorrect                                
     FROM coc_ECouponStandardBarcodes(NOLOCK) ECB                                    
      INNER JOIN coc_ECoupons(NOLOCK) EC ON ECB.ECouponID = EC.ECouponID                                    
      INNER JOIN coc_QuestionBanks(NOLOCK) QB ON QB.ECouponID = EC.ECouponID                                    
      INNER JOIN coc_QuestionOptions(NOLOCK) QO ON QO.QuestionBankID = QB.QuestionBankID and ECB.QuestionOptionID = QO.QuestionOptionID                                    
      LEFT JOIN  coc_ECouponOutlets(NOLOCK) ECO ON ECO.ECouponOutletID = ECB.ECouponOutletID                                    
       AND ((ECO.ECouponOutletID IS not NULL and  ISNULL(ECO.IsActive,1) = 1) or ECO.ECouponOutletID IS NULL)                                    
     WHERE ECB.ECouponID = @EcouponID                                    
      AND ECB.StandardBarcode = @Barcode               
      AND ECB.IsActive = 1                                    
                                    
     IF @ECouponStandardBarcodeID IS NULL                                    
      SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                           
     ELSE                                    
     BEGIN                                    
                                          
      SELECT @cnt_TotalCompetitionParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                                    
                                    
      SELECT @cnt_TotalCompetitionParticipation = @cnt_TotalCompetitionParticipation+ count(*)                                    
      FROM coc_ECouponParticipationsInvalid(NOLOCK)                    
      WHERE ECouponID = @EcouponID                                    
                              
      SELECT @cnt_TotalCompetitionParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
      SELECT @cnt_TotalCompetitionParticipationToday = @cnt_TotalCompetitionParticipationToday + count(*)                                    
      FROM coc_ECouponParticipationsInvalid(NOLOCK)                                
      WHERE ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
      SELECT @cnt_TotalCustParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
                                    
      SELECT @cnt_TotalCustParticipation = @cnt_TotalCustParticipation+ count(*)                                    
      FROM coc_ECouponParticipationsInvalid(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID)                                  
       AND ECouponID = @EcouponID                                    
                                    
      SELECT @cnt_TotalCustParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                   
       AND ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                          
      SELECT @cnt_TotalCustParticipationToday = @cnt_TotalCustParticipationToday + count(*)                                    
      FROM coc_ECouponParticipationsInvalid(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID)                                  
       AND ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
      IF @cnt_TotalCustParticipation >= @TotalAllowedParticipationPerCustomer                    
       SET @ErrorMessage = '101ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustParticipationToday >= @TotalAllowedParticipationPerCustomerPerDay                                    
       SET @ErrorMessage = '102DailyParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustOutletParticipation >= @Outlet_TotalAllowedParticipationPerCustomer                                    
       SET @ErrorMessage = '105ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustOutletParticipationToday >= @Outlet_TotalAllowedParticipationPerCustomerPerDay                                    
       SET @ErrorMessage = '106DailyParticipationLimitExceeded'                                    
      ELSE                                    
      BEGIN                                    
   select @EServiceBarcodeID = null                            
       SELECT TOP 1 @EServiceBarcodeID = EServiceBarcodeID                                    
         ,@Barcode = Barcode                                    
         ,@NotificationID = NT.NotificationID                                    
        FROM coc_EServiceBarcodes EB(NOLOCK)                                    
        INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID = NT.NotificationID                                    
         AND NT.EServiceID = @EServiceID                                    
        WHERE IsUsed = 0                   
         AND EB.AsignedMoile IS NULL                            
  order by NEWID()                          
  --ORDER BY EServiceBarcodeID                              
  -- changed order to NEWID() on 6th Aug 2019 by Shamim to improve performance                          
  print @EServiceBarcodeID                            
  if @EServiceBarcodeID is null                             
  begin                            
   print 213132123                            
   SET @ErrorMessage = 'CompetitionBarcodesFinished'                               
  end                             
  else                            
  begin                            
                            
     if (@IsCorrectAnswer = 1)                                    
                                    
   INSERT INTO coc_ECouponParticipations (                                    
    ECouponID                                    
    ,ParticipationDate                                    
    ,Barcode                                    
    ,ParticipationMobile                                    
    ,ParticipationEmailID                                    
    ,ConsumerID                                    
    ,GuestID                                  
     ,RetailOutletID                                    
    ,EnteredStandardBarcode    
 ,Longitude    
 ,Latitude    
 ,ClosestRetailoutletID                                  
    )                                    
   SELECT @EcouponID                                    
    ,GETDATE()                                    
    ,@Barcode                                    
    ,@Mobile                                    
    ,@Email                                    
    ,@ConsumerID                                   
    ,@GuestID                                   
    ,@RetailOutletID                                    
    ,@EnteredStandardBarcode    
    ,@ConsumerLongitude    
 ,@ConsumerLatitude    
 ,@ClosestRetailoutletID    
     
     else                                    
   INSERT INTO coc_ECouponParticipationsInvalid (                   
    ECouponID                                    
,ParticipationDate                                    
    ,Barcode                                    
    ,ParticipationMobile                        
    ,ParticipationEmailID                                    
    ,ConsumerID                                    
    ,RetailOutletID                                    
    ,EnteredStandardBarcode                                    
    ,Reason                                    
    )                                    
   SELECT @EcouponID                                    
    ,GETDATE()                                    
    ,@Barcode                                    
    ,@Mobile                                    
    ,@Email                                    
 ,@ConsumerID                                   
    ,@RetailOutletID                                    
    ,@EnteredStandardBarcode                           
    ,'W'                                    
                                    
     UPDATE coc_EServiceBarcodes                                    
     SET AsignedMoile = @Mobile                                    
   ,IsUsed = 1                                    
   ,UsedDate = GETDATE()                                    
   ,ConsumerID = @ConsumerID                                    
   ,GuestID = @GuestID                          
   ,StandardBarcodeValue = @StandardBarcodeValue                                    
     WHERE EServiceBarcodeID = @EServiceBarcodeID                                    
                                    
   if(@ConsumerID is not null)   
   begin                                  
     EXEC AddCustomerLoyaltyPoints                                     
   @EcouponID,                                    
   @ConsumerID,                                    
   @LoyaltyPointSetupID,                                    
   @ErrorMessage OUTPUT                                    
                                    
     EXEC SaveNotificationSending                                    
   @NotificationID                                    
   ,@EcouponID                                    
   ,@ConsumerID                                    
   ,@GeneralNotificationTemplateID                                    
   ,@EServiceID                                    
   ,@Barcode                                    
    ,@ErrorMessage OUTPUT                            
   end                                  
       end                               
      END                                    
     END               
    END                                    
    ELSE IF @AllowStandardBarcode = 1                                    
     AND @StandardBarcodeByRetailOutlet = 1 and @StandardBarcodeValue <> @Barcode               
     BEGIN                                    
          --  SELECT @ECouponStandardBarcodeID = ECB.ECouponStandardBarcodeID                                    
		   --   ,@RetailOutletID = ECO.RetailOutletID                                    
		   --   ,@Outlet_TotalAllowedParticipationPerCustomer =  ISNULL(ECO.TotalAllowedParticipationPerCustomer, EC.TotalAllowedParticipationPerCustomer)                                    
		   --   ,@Outlet_TotalAllowedParticipationPerCustomerPerDay = ISNULL(ECO.TotalAllowedParticipationPerCustomerPerDay, EC.TotalAllowedParticipationPerCustomerPerDay)                                    
		   --   ,@Outlet_TotalAllowedParticipationInOutlet = ISNULL(ECO.TotalAllowedParticipationinOutlet, EC.NumberOfConsumerParticipations)                                    
		   --   ,@Outlet_TotalAllowedParticipationPerBarcode = ISNULL(ECO.TotalAllowedParticipationPerBarcode, EC.AllowedParticipationPerBarcodePerCustomer)                                    
		   -- ,@StandardBarcodeRecursiveHoursParticipationDuration = ECB.RecursiveHoursParticipationDuration                               
		   --,@StandardBarcodeRecursiveHoursNumberOfParticipations = ECB.RecursiveHoursNumberOfParticipations                          
		   --  FROM coc_ECouponStandardBarcodes(NOLOCK) ECB                                    
		   --   inner join coc_ECoupons(NOLOCK) EC ON ECB.ECouponID = EC.ECouponID                                    
		   --   LEFT JOIN coc_ECouponOutlets(NOLOCK) ECO ON ECO.ECouponOutletID = ECB.ECouponOutletID                                    
		   --    AND ((ECO.ECouponOutletID IS not NULL and  ISNULL(ECO.IsActive,1) = 1) or ECO.ECouponOutletID IS NULL)                                    
		   --  inner join coc_RetailOutlets RO ON RO.RetailOutletID = ECO.RetailOutletID                               WHERE ECB.ECouponID = @EcouponID                                    
		   --   AND ECB.StandardBarcode = @Barcode                                    
		   --   AND ECB.IsActive = 1                                    
      SELECT @cnt_TotalCompetitionParticipation = count(*)                                
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                                    
                                    
      SELECT @cnt_TotalCompetitionParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
      SELECT @cnt_TotalCompetitionBarcodeParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                 
       AND EnteredStandardBarcode = @EnteredStandardBarcode                                    
                                    
      SELECT @cnt_TotalCompetitionParticipationForOutlet = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                                    
       AND RetailOutletID = @RetailOutletID                                    
                                    
      SELECT @cnt_TotalCustParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
                                    
      SELECT @cnt_TotalCustParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
      SELECT @cnt_TotalCustBarcodeParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
       AND EnteredStandardBarcode = @EnteredStandardBarcode                                    
                                    
      SELECT @cnt_TotalCustBarcodeParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
       AND EnteredStandardBarcode = @EnteredStandardBarcode                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                              
                           
      SELECT @cnt_TotalOutletParticipation = count(*)                              
      FROM coc_ECouponParticipations(NOLOCK)       
      WHERE ECouponID = @EcouponID                                    
       AND RetailOutletID = @RetailOutletID      and  (ConsumerID = @ConsumerID  or GuestID = @GuestID)                          
                              
                                    
      SELECT @cnt_TotalCustOutletParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
       AND RetailOutletID = @RetailOutletID                                    
                                    
      SELECT @cnt_TotalCustOutletParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                   
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                             
       AND ECouponID = @EcouponID                    
       AND RetailOutletID = @RetailOutletID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
--StandardBarcode-Recursive                          
 IF ( @StandardBarcodeRecursiveHoursParticipationDuration <> 0 )                          
     begin                          
  SELECT @StandardBarcodeRecursiveHoursNumberOfParticipationsCount = count(*) FROM coc_ECouponParticipations(NOLOCK)                                    
   WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID) AND ECouponID = @EcouponID                           
   AND (ParticipationDate >= DATEADD(hh,-(@StandardBarcodeRecursiveHoursParticipationDuration),GETDATE()))                          
                          
   IF(@StandardBarcodeRecursiveHoursNumberOfParticipationsCount+1) > @StandardBarcodeRecursiveHoursNumberOfParticipations                          
    begin                          
    SET @ErrorMessage = '105ConsumerParticipationLimitExceeded'                           
    ROLLBACK TRANSACTION SaveECouponPurchases                                 
    RETURN                           
    end                               
       end                          
    select @cnt_TotalCustBarcodeParticipation, @AllowedParticipationPerBarcodePerCustomer                          
      IF @cnt_TotalCustParticipation >= @TotalAllowedParticipationPerCustomer                                    
       SET @ErrorMessage = '101ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustParticipationToday >= @TotalAllowedParticipationPerCustomerPerDay                                    
       SET @ErrorMessage = '102DailyParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustBarcodeParticipation >= @AllowedParticipationPerBarcodePerCustomer                                   
       SET @ErrorMessage = '103ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustBarcodeParticipationToday >= @AllowedParticipationPerBarcodePerCustomerPerDay                                    
       SET @ErrorMessage = '104DailyParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustOutletParticipation >= @Outlet_TotalAllowedParticipationPerCustomer                                    
       SET @ErrorMessage = '105ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustOutletParticipationToday >= @Outlet_TotalAllowedParticipationPerCustomerPerDay                                    
       SET @ErrorMessage = '106DailyParticipationLimitExceeded'                               
      ELSE IF @cnt_TotalOutletParticipation >= @Outlet_TotalAllowedParticipationInOutlet                                    
       SET @ErrorMessage = '107ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustBarcodeParticipation >= @Outlet_TotalAllowedParticipationPerBarcode                                    
       SET @ErrorMessage = '108ConsumerParticipationLimitExceeded'                                    
      ELSE          BEGIN                               
   select @EServiceBarcodeID = null                            
       SELECT TOP 1 @EServiceBarcodeID = EB.EServiceBarcodeID                                    
         ,@NotificationID = NT.NotificationID                                    
        FROM coc_EServiceBarcodes EB(NOLOCK)                                    
        INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID = NT.NotificationID                                    
         AND NT.EServiceID = @EServiceID                                    
        WHERE EB.IsUsed = 1                                    
         AND isnull(EB.AsignedMoile,0)=0 
		 AND isnull(EB.AsignedEmailID,0)=0 
		 AND isnull(EB.ConsumerID,0)=0 
		 AND isnull(EB.GuestID,0)=0 
        AND EB.Barcode = @Barcode                        
  if @EServiceBarcodeID is null                             
  begin                            
   SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                               
  end                             
  else                            
  begin                            
 if exists(Select null from coc_EServiceExternalBarcodes(nolock) where EServiceID=@EServiceID and IsUsed=0 and isnull(EServiceBarcodeID,0)=0)
 begin
    set @IsInstantGiftWinner=1
 end
 INSERT INTO coc_ECouponParticipations (         
       ECouponID                                    
       ,ParticipationDate                                    
       ,Barcode                                    
       ,ParticipationMobile                                    
       ,ParticipationEmailID                                    
       ,ConsumerID                                    
    ,GuestID    
  ,RetailOutletID                                    
 ,Longitude    
 ,Latitude    
 ,ClosestRetailoutletID
 ,IsInstantGiftWinner
       )                                    
      SELECT @EcouponID                                    
       ,GETDATE()                                    
       ,@Barcode                                    
       ,@Mobile                                    
       ,@Email                                    
       ,@ConsumerID                                   
    ,@GuestID      
  ,@RetailOutletID                                    
    ,@ConsumerLongitude    
 ,@ConsumerLatitude    
 ,@ClosestRetailoutletID 
 ,@IsInstantGiftWinner

    UPDATE coc_EServiceBarcodes                                    
    SET AsignedMoile = @Mobile
	 ,ConsumerID=@ConsumerID
	 ,GuestID=@GuestID
	 ,AsignedEmailID=@Email
     ,IsUsed = 1                                    
     ,UsedDate = GETDATE()       
    WHERE EServiceBarcodeID = @EServiceBarcodeID                                    
                              
    select @ParticipationBarcode = @Barcode                              
   if(@ConsumerID is not null)                                  
   begin                                  
     EXEC AddCustomerLoyaltyPoints                                     
   @EcouponID,                                    
   @ConsumerID,                                    
   @LoyaltyPointSetupID,                                    
   @ErrorMessage OUTPUT                       
                                    
     EXEC SaveNotificationSending                                    
   @NotificationID                                    
   ,@EcouponID                                    
   ,@ConsumerID                                    
   ,@GeneralNotificationTemplateID                                    
   ,@EServiceID                       
   ,@Barcode                                    
   ,@ErrorMessage OUTPUT                                    
                                    
  end                                  
  end                            
      END                                    
     END                               
     
    ELSE IF @AllowStandardBarcode = 1                                 
     AND @StandardBarcodeValue <> @Barcode                                 
    BEGIN                                    
     SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                                    
    END                                    
    ELSE IF @AllowStandardBarcode = 1                                    
     AND @StandardBarcodeValue = @Barcode       
    BEGIN                                    
     DECLARE @cnt INTEGER                                    
     IF exists(Select ECouponID From coc_ECouponParticipations(nolock) where EnteredStandardBarcode=@Barcode and ConsumerID=@ConsumerID )            
	  BEGIN                   
	  Set @ErrorMessage='101ConsumerParticipationLimitExceeded'; 
	  END                   
      Else                   
      begin                  
        SELECT @cnt = count(*)                                    
        FROM coc_ECouponParticipations(NOLOCK)                                    
        WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
         AND ECouponID = @EcouponID                                    
        select @EServiceBarcodeID= null                            
        SELECT TOP 1 @EServiceBarcodeID = EServiceBarcodeID                       
         ,@Barcode = Barcode                                    
         ,@NotificationID = NT.NotificationID                                    
        FROM coc_EServiceBarcodes EB(NOLOCK)                                    
        INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID = NT.NotificationID                                    
         AND NT.EServiceID = @EServiceID                                    
        WHERE IsUsed = 0                                    
         AND EB.AsignedMoile IS NULL                                    
        order by rand()                          
     --ORDER BY EServiceBarcodeID                              
     -- changed order to NEWID() on 6th Aug 2019 by Shamim to improve performance                          
     print @EServiceBarcodeID                            
    if @EServiceBarcodeID is null                             
    begin                            
     print 565656                            
     SET @ErrorMessage = 'CompetitionBarcodesFinished'                               
    end                             
    else                            
    begin                               
      IF @cnt >= @NumberOfConsumerParticipations                                    
       SET @ErrorMessage = 'ConsumerParticipationDepleted'                                    
      ELSE                                    
      BEGIN                                    
       INSERT INTO coc_ECouponParticipations (                                    
        ECouponID                                    
        ,ParticipationDate                                
        ,Barcode                                    
        ,ParticipationMobile                                    
        ,ParticipationEmailID                                    
        ,ConsumerID                                    
         ,GuestID                                  
        ,RetailOutletID                                    
    ,EnteredStandardBarcode    
 ,Longitude    
 ,Latitude    
 ,ClosestRetailoutletID                                    
        )                                    
       SELECT @EcouponID                                    
        ,GETDATE()                                    
        ,@Barcode                                    
        ,@Mobile                                    
        ,@Email                                    
        ,@ConsumerID                                  
     ,@GuestID                                    
         ,@RetailOutletID                                    
    ,@EnteredStandardBarcode    
    ,@ConsumerLongitude    
 ,@ConsumerLatitude    
 ,@ClosestRetailoutletID                                    
                                       
       UPDATE coc_EServiceBarcodes                                    
       SET AsignedMoile = @Mobile                                    
        ,IsUsed = 1                                    
        ,UsedDate = GETDATE()                                    
        ,ConsumerID = @ConsumerID                                    
     ,GuestID = @GuestID                                  
        ,StandardBarcodeValue = @StandardBarcodeValue                                    
       WHERE EServiceBarcodeID = @EServiceBarcodeID                                    
      if(@ConsumerID is not null)                                  
      begin                                  
       EXEC AddCustomerLoyaltyPoints                                     
      @EcouponID,                                    
      @ConsumerID,          @LoyaltyPointSetupID,                                    
      @ErrorMessage OUTPUT                                    
                                       
       EXEC SaveNotificationSending                                    
        @NotificationID                                    
        ,@EcouponID                                    
        ,@ConsumerID                                    
        ,@GeneralNotificationTemplateID                                    
        ,@EServiceID                                    
        ,@Barcode                                    
        ,@ErrorMessage OUTPUT                                    
  end                                  
   end                     
   END                  
     END                                    
    END                                    
    ELSE                       
    BEGIN   
     IF NOT EXISTS (                                    
       SELECT NULL                                    
       FROM coc_ECouponParticipations(NOLOCK)                   
       WHERE Barcode = @Barcode                                    
        AND (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                    
        AND ECouponID = @EcouponID                                    
       )                                    
     BEGIN                                    
       SET @EServiceBarcodeID = null                            
       SELECT TOP 1 @EServiceBarcodeID = EB.EServiceBarcodeID                                    
         ,@NotificationID = NT.NotificationID                                    
        FROM coc_EServiceBarcodes EB(NOLOCK)                                    
        INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID = NT.NotificationID                                    
         AND NT.EServiceID = @EServiceID                                    
        WHERE EB.IsUsed = 1                                    
         AND EB.AsignedMoile IS NULL 
		 AND EB.AsignedEmailID IS NULL
		 AND EB.ConsumerID IS NULL
		 AND EB.GuestID IS NULL
        AND EB.Barcode = @Barcode  order by Rand()                         
        --order by NEWID()                          
  --ORDER BY EServiceBarcodeID                              
  -- changed order to NEWID() on 6th Aug 2019 by Shamim to improve performance                          
        print @EServiceBarcodeID                            
 if @EServiceBarcodeID is null                             
 begin                            
  SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                               
 end                             
 else                            
 begin   
 if exists(Select null from coc_EServiceExternalBarcodes(nolock) where EServiceID=@EServiceID and IsUsed=0 and EServiceBarcodeID is null)
 begin
    set @IsInstantGiftWinner=1
 end
 INSERT INTO coc_ECouponParticipations (         
       ECouponID                                    
       ,ParticipationDate                                    
       ,Barcode                                    
       ,ParticipationMobile                                    
       ,ParticipationEmailID                                    
       ,ConsumerID                                    
    ,GuestID    
  ,RetailOutletID                                    
 ,Longitude    
 ,Latitude    
 ,ClosestRetailoutletID
 ,IsInstantGiftWinner
       )                                    
      SELECT @EcouponID                                    
       ,GETDATE()                                    
       ,@Barcode                                    
       ,@Mobile                                    
       ,@Email                                    
       ,@ConsumerID                                   
    ,@GuestID      
  ,@RetailOutletID                                    
    ,@ConsumerLongitude    
 ,@ConsumerLatitude    
 ,@ClosestRetailoutletID 
 ,@IsInstantGiftWinner
    --SELECT TOP (1) @EServiceBarcodeID = EServiceBarcodeID                                    
    --FROM coc_EServiceBarcodes(NOLOCK)                                    
    --WHERE Barcode = @BarCode                                    
                                    
    UPDATE coc_EServiceBarcodes                                    
    SET AsignedMoile = @Mobile
	 ,ConsumerID=@ConsumerID
	 ,GuestID=@GuestID
	 ,AsignedEmailID=@Email
     ,IsUsed = 1                                    
     ,UsedDate = GETDATE()       
    WHERE EServiceBarcodeID = @EServiceBarcodeID   
	
	SELECT @ErrorMessage                        
    select @ParticipationBarcode = @Barcode   

   if (@ConsumerID is not null)                                  
   begin                        
    EXEC AddCustomerLoyaltyPoints                                     
   @EcouponID,                                    
   @ConsumerID,                                    
@LoyaltyPointSetupID,                                    
   @ErrorMessage OUTPUT                                    
                                    
    EXEC SaveNotificationSending                                    
     @NotificationID                                    
     ,@EcouponID          
     ,@ConsumerID                     
     ,@GeneralNotificationTemplateID                                    
     ,@EServiceID                                    
     ,@Barcode                                    
     ,@ErrorMessage OUTPUT                                   
  end                                  
  end                            
     END                                    
     ELSE                                    
     BEGIN                                    
      SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                                    
     END                                    
    END                   
   END                                    
                                    
   IF @ErrorMessage = ''                                    
   BEGIN                                    
    -------------------------------------------------------------------//                                    
    --//-------------------------------------------------------                                    
    DECLARE @return_value1 INT                                    
  if(@ConsumerID is not null)                                  
    EXEC @return_value1 = [dbo].[SaveEServiceAddOnConsumers] @ConsumerID = @ConsumerID                                    
     ,@EServiceID = @EServiceID                                    
                  
    PRINT '@return_value1'                                    
    PRINT @return_value1                                    
     --------------------------------------------------------------------//                                    
   END    
   
  END                                    
   
  COMMIT TRANSACTION SaveECouponPurchases                                   
 END TRY                                    
                                    
 BEGIN CATCH                                    
 ROLLBACK TRANSACTION SaveECouponPurchases                                    
 SELECT @ErrorMessage = ERROR_MESSAGE();                                  
 declare @error int; select @error = ERROR_NUMBER();                                    
 Raiserror ('SaveECouponPurchases: %d: %s', 16, 1, @error, @ErrorMessage) ;                                  
 END CATCH                
                                    
END                       
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveEcouponInvoice]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveEcouponInvoice]
	@ECouponID INTEGER,
	@EcouponInvoiceXml XML=NULL,
	@UserID INTEGER,
	@ReturnValue INTEGER OUTPUT
AS
BEGIN
	
	SET NOCOUNT ON
	DECLARE @Invoice TABLE
			(
				MinInvoiceValue [Amount],
				AdditionalCouponValue [NullAmount],
				AllowMultipleInvoices BIT,
				CouponPerInvoice INTEGER,
				CouponPerMember INTEGER,
				UserAurthorised BIT
			)

	INSERT INTO @Invoice(MinInvoiceValue,AdditionalCouponValue,AllowMultipleInvoices,CouponPerInvoice,CouponPerMember,UserAurthorised)
		SELECT ecoupon.value('(MinInvoiceValue[1])', '[Amount]'),
				ecoupon.value('(AdditionalCouponValue[1])', '[NullAmount]'),
				ecoupon.value('(AllowMultipleInvoices[1])', 'BIT'),
				ecoupon.value('(CouponPerInvoice[1])', 'INTEGER'),
				ecoupon.value('(CouponPerMember[1])', 'INTEGER'),
				ecoupon.value('(UserAurthorised[1])', 'BIT')
			FROM @EcouponInvoiceXml.nodes('/EcouponInvoiceXml/InvoiceData') AS Data(ecoupon)

	IF(@ECouponID>0)
	BEGIN
		UPDATE coc_ECoupons
			SET MinInvoiceValue=(SELECT INV.MinInvoiceValue FROM @Invoice INV),
				AdditionalCouponValue=(SELECT INV.AdditionalCouponValue FROM @Invoice INV),
				AllowMultipleInvoices=(SELECT INV.AllowMultipleInvoices FROM @Invoice INV),
				CouponPerInvoice=(SELECT INV.CouponPerInvoice FROM @Invoice INV),
				CouponPerMember=(SELECT INV.CouponPerMember FROM @Invoice INV),
				UserAurthorised=(SELECT INV.UserAurthorised FROM @Invoice INV)
			WHERE coc_ECoupons.ECouponID=@ECouponID

		SET @ReturnValue=@ECouponID
	END
END

GO
/****** Object:  StoredProcedure [dbo].[SaveECouponInvoiceParticipationFromCompetitionLink]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveECouponInvoiceParticipationFromCompetitionLink]                           
  @EcouponID INTEGER                            
 ,@ConsumerID INTEGER                            
 ,@GuestID INTEGER                           
 ,@Mobile [Mobile] = NULL                            
 ,@Email [Email] = NULL                            
 ,@AnswersXML XML                             
 ,@RetailoutletID INT = NULL                            
 ,@ParticipationBarcode NVARCHAR(100) = NULL OUTPUT                            
 ,@ErrorMessage [Remark] = NULL OUTPUT                            
 ,@NumberOfCopons INT = 1                            
 ,@SPStatus INT = NULL OUT                            
 ,@SPReturnMessage NVARCHAR(500) = NULL OUT                            
 ,@APIKey nvarchar(50) = null                    
 ,@RequestSourceType int = null                  
 ,@ReferenceNumber nvarchar(150)=null                
 ,@UploadImagePath NVARCHAR(200) = NULL   
 ,@UploadImagePath2 NVARCHAR(200) = NULL 
 ,@IsNotRequiredEmail bit=0         
 ,@ConsumerName NVARCHAR(200) =NULL            
 ,@BranchName NVARCHAR(150) =NULL          
 ,@Question1 decimal(18,2)=NULL
 ,@Supermarket nvarchar(100)=NULL
 ,@Question2 nvarchar(1000)=NULL 
 ,@IdentificationNumber NVARCHAR(200) =NULL 
 ,@TamimiRewardsMembershipNumber NVARCHAR(200) =NULL 
 ,@XMLData XML=NULL
 ,@UserName nvarchar(1000)=NULL
 ,@SocialMediaID INTEGER=NULL
AS                            
SET NOCOUNT ON                            
BEGIN TRANSACTION SaveECouponConfiguration                            
BEGIN TRY                            
        
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;                            
        
 SET @SPStatus = 0;                            
        
 SET @SPReturnMessage = '';                            
        
                            
 Declare @Answer1 nvarchar(1000)= NULL
 Declare @Answer2 nvarchar(1000)= NULL 
 Declare @Answer3 nvarchar(1000)= NULL  
 DECLARE @EserviceTypeID INTEGER                            
        
 DECLARE @EServiceBarcodeID BIGINT                            
        
 DECLARE @Points INTEGER                            
        
 DECLARE @SelectedAnswer INTEGER                            
        
 DECLARE @EServiceID INTEGER                            
        
 DECLARE @NotificationID INTEGER                            
        
 DECLARE @NotificationSendID INTEGER                            
        
 DECLARE @LanguageID INTEGER                            
        
 DECLARE @CompetitionName NVARCHAR(200)                            
        
 --DECLARE @ConsumerName NVARCHAR(100)                            
        
 --DECLARE @EligibleCoupons integer                                          
        
 DECLARE @Barcode NVARCHAR(100)                          
        
                             
        
                          
        
 DECLARE @SMSBody nvarchar(max)                          
        
 DECLARE @EmailBody nvarchar(max)                          
        
                             
        
 DECLARE @TempBarcodeTable TABLE (                            
        
  Barcode NVARCHAR(100)                            
        
  ,EServiceBarcodeID INT                            
        
  ,NotificationID INT                            
        
  );                            
        
  if(@Mobile='')    
 set @Mobile=NULL    
 if(@Email='')    
 set @Email=NULL                           
        
 IF @ConsumerID = 0                            
        
  SET @ConsumerID = NULL                            
        
                            
        
 IF @GuestID = 0                            
        
  SET @GuestID = NULL                            
        
                            
        
 IF @RetailoutletID = 0                             
        
  set @RetailoutletID = null                            
        
                            
        
 if @RetailoutletID is not null                            
        
 begin                            
        
  if not exists (select * from [dbo].[coc_ECouponOutlets](NOLOCK) where retailoutletid = @RetailoutletID and ecouponid = @EcouponID and isactive = 1)                            
        
  begin                
        
   SET @ErrorMessage = 'Invalid Retail Outlet ID';                            
        
   SET @SPStatus = 1;                            
        
   SET @SPReturnMessage = @ErrorMessage;                            
        
   select * from @TempBarcodeTable;                            
        
   ROLLBACK TRANSACTION SaveECouponConfiguration;                              
        
   RETURN;                            
        
  end                            
        
 end                            
        
                  
        
 if not exists (select * from [dbo].[coc_ECoupons](NOLOCK) EC inner join [dbo].[coc_EServices] ES(NOLOCK) ON EC.eserviceid = ES.eserviceid                            
        
   where convert(date, getdate()) between convert(date, ES.FromDate)  and convert(date, ES.ToDate) and ES.isactive = 1 and EC.isactive =1)                            
        
 begin                            
        
  SET @ErrorMessage = 'Competition Not active';                         
        
  SET @SPStatus = 1;                            
        
  SET @SPReturnMessage = @ErrorMessage;                            
        
  select * from @TempBarcodeTable;                            
        
  ROLLBACK TRANSACTION SaveECouponConfiguration;                              
        
  RETURN;                            
        
 end                           
        
  IF @Email IS NOT NULL or @Mobile IS NOT NULL        
    BEGIN           
       DECLARE @ParticipationsCount int          
       SELECT @ParticipationsCount = count(*)              
       FROM coc_ECouponParticipations(NOLOCK)         
       WHERE  (ParticipationEmailID= @Email  or ParticipationMobile=@Mobile )         
        AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                                
        IF ( @ParticipationsCount >= 1)       
         BEGIN      
   SET @SPStatus = 1;                                  
            
   SET @SPReturnMessage = 'Already Participated with Same Mobile Or Email';                                  
            
   SET @SPReturnMessage = 'Already Participated with Same Mobile Or Email';                                  
            
   SET @ErrorMessage = 'Already Participated with Same Mobile Or Email';                                  
            
   select * from @TempBarcodeTable;                                  
            
   ROLLBACK TRANSACTION SaveECouponConfiguration;                                  
            
   RETURN;                                              
  END                                              
   END                  
        
                            
        
 print('@ConsumerID IS NULL   AND @GuestID IS NULL  ')                            
        
 print('@ConsumerID = '+ convert(varchar,@consumerid) )           
        
 print('@GuestID = '+ convert(varchar,@GuestID) )                   
        
                
        
 IF (                            
        
   @ConsumerID IS NULL                            
        
   AND @GuestID IS NULL                            
        
  )                            
        
 BEGIN                            
        
  INSERT INTO coc_ECouponParticipationsInvalid (                            
        
   ECouponID                            
        
   ,ParticipationDate                            
        
   ,Barcode                            
        
   ,ParticipationMobile                            
        
   ,ParticipationEmailID                            
        
   ,ConsumerID                            
        
   ,Reason                            
        
   ,ConsumerName                            
        
   )                            
        
  SELECT @EcouponID                   
        
   ,GETDATE()                            
        
   ,@Barcode                            
        
   ,@Mobile                            
        
   ,@Email                            
        
   ,@ConsumerID           
        
   ,'P'                            
        
   ,@ConsumerName                            
        
                            
        
  SET @ErrorMessage = 'Barcode is Not There to Asign';                            
        
  SET @SPStatus = 1;                            
        
  SET @SPReturnMessage = @ErrorMessage;                            
        
  select * from @TempBarcodeTable;                            
        
  ROLLBACK TRANSACTION SaveECouponConfiguration;                              
        
  RETURN;                            
        
 END                            
        
                            
        
 IF @ConsumerID IS NOT NULL                            
        
 BEGIN                            
        
  IF @Email IS NULL                            
        
   SELECT @Email = EmailID                            
        
   FROM coc_Consumers(NOLOCK)                            
        
   WHERE ConsumerID = @ConsumerID                            
        
    AND IsActive = 1                            
        
    AND IsDeleted = 0                            
        
    --AND IsVerified = 1                            
        
                            
        
  IF @ConsumerName IS NULL                            
        
   SELECT @ConsumerName = isnuLL(FirstName, '') + ' ' + isnull(SecondName, '') + ' ' + isnull(FamilyName, '')                            
        
   FROM coc_Consumers(NOLOCK)                            
        
   WHERE ConsumerID = @ConsumerID                            
        
    AND IsActive = 1                            
        
    AND IsDeleted = 0                            
        
    --AND IsVerified = 1                            
        
                            
        
  IF @Mobile IS NULL          
        
   SELECT @Mobile = PrimaryMobile                            
        
   FROM coc_Consumers(NOLOCK)                            
        
   WHERE ConsumerID = @ConsumerID                            
        
    AND IsActive = 1                            
        
    AND IsDeleted = 0                            
        
    --AND IsVerified = 1                            
        
 END                            
        
ELSE                            
        
 BEGIN                            
        
  IF @Email IS NULL                            
        
   SELECT @Email = EmailID                            
        
   FROM coc_Guests(NOLOCK)                            
        
   WHERE GuestID = @GuestID                    
        
    AND IsActive = 1                            
        
    --AND IsVerified = 1                            
        
                            
        
  IF @ConsumerName IS NULL                            
        
   SELECT @ConsumerName = isnuLL(FullName, '')                            
        
   FROM coc_Guests(NOLOCK)                            
        
   WHERE GuestID = @GuestID                            
        
    AND IsActive = 1                            
        
    --AND IsVerified = 1                            
        
                            
        
  IF @Mobile IS NULL                            
        
   SELECT @Mobile = PrimaryMobile                            
        
   FROM coc_Guests(NOLOCK)               
        
   WHERE GuestID = @GuestID                            
        
    AND IsActive = 1                            
        
    --AND IsVerified = 1                            
        
 END                            
        
                            
        
 IF @Mobile IS NULL                            
        
  OR len(@Mobile) <> 14                            
        
  OR SUBSTRING(@Mobile, 1, 6) <> '009665'                            
        
 BEGIN                            
        
  SET @ErrorMessage = 'InvalidMobile'   ;                
        
  SET @SPReturnMessage = @ErrorMessage;                           
        
 END                            
        
 ELSE IF @Email IS NULL and @IsNotRequiredEmail=0               
        
 BEGIN                            
        
  SET @ErrorMessage = 'InvalidEmail'   ;                
        
  SET @SPReturnMessage = @ErrorMessage;                               
        
 END                            
        
ELSE                            
        
 BEGIN                            
        
                                      
        
  DECLARE @Answers AS TABLE (                            
        
   ID INTEGER Identity(1, 1)                
        
   ,QuestionBankID INTEGER                            
        
   ,QuestionOptionID INTEGER                            
        
   ,AnswerRank INTEGER                            
        
   ,AnswerValue VARCHAR(100)                            
        
   )                            
        
                            
        
  INSERT INTO @Answers (                            
        
   QuestionBankID                            
        
   ,QuestionOptionID                            
        
   ,AnswerRank                            
        
 ,AnswerValue                            
        
   )                            
        
  SELECT Answer.value('(QuestionID[1])', 'INTEGER')                            
        
   ,Answer.value('(AnswerID[1])', 'INTEGER')                            
        
   ,Answer.value('(AnswerRank[1])', 'INTEGER')                            
        
   ,Answer.value('(AnswerValue[1])', 'VARCHAR(100)')                            
        
  FROM @AnswersXML.nodes('/ECouponParticipation/Answers') AS Data(Answer)                
        
                            
        
  UPDATE @Answers                            
        
  SET QuestionOptionID = NULL                            
        
  WHERE QuestionOptionID = 0                            
        
                                        
        
  SELECT @EServiceID = EServiceID                            
        
  FROM coc_ECoupons(NOLOCK)                            
        
  WHERE EcouponID = @EcouponID                            
        
                            
        
  DECLARE @errortext [Remark]                            
        
  DECLARE @return_value INT                            
        
                            
        
                                       
        
  PRINT @ConsumerId                            
        
  PRINT @EserviceId                            
        
  PRINT @errortext                            
        
                            
        
                                        
        
                              
        
                            
        
  DECLARE @NumberOfConsumerParticipations INT                            
        
  DECLARE @NumberOfGuestParticipations INT                            
        
  DECLARE @NumberOfParticipations INT                            
        
  DECLARE @LoyaltyPointSetupID INT = 103;                            
        
  DECLARE @AllowMultiple bit                            
        
  DECLARE @GeneralNotificationTemplateID INT                            
        
                            
        
  SELECT @EServiceID = EServiceID                            
        
   ,@NumberOfConsumerParticipations = ISNULL(NumberOfConsumerParticipations, 0)                            
        
   ,@NumberOfGuestParticipations = ISNULL(NumberOfGuestParticipations, 0)                            
        
   ,@NumberOfParticipations = ISNULL(participationCount, 0)                            
        
   ,@EserviceTypeID = EntryTypeID                            
        
   ,@AllowMultiple = MultipleParticipation                            
        
   ,@GeneralNotificationTemplateID = ParticipationNotificationTemplateID                            
        
  FROM coc_ECoupons(NOLOCK)                            
        
  WHERE ECouponID = @EcouponID                            
        
                            
        
  if(@AllowMultiple=0)                            
        
    set @NumberOfCopons = 1;                                    
                            
        
  if(isnull(@NumberOfParticipations,0)=0)                            
        
   set @NumberOfParticipations= 100                            
        
                            
        
         
        
 IF (                            
        
    @EserviceTypeID = 42                            
        
    OR @EserviceTypeID = 41                            
    OR @EserviceTypeID = 46 
    )                            
        
  BEGIN                            
        
   DECLARE @Participations INT                            
        
   DECLARE @NoOfCoponsLeft INT;                            
        
                            
        
   IF @ConsumerID IS NOT NULL                            
        
   BEGIN                            
        
    SELECT @Participations = count(*) --, @NumberOfParticipations = @NumberOfConsumerParticipations                                           
        
    FROM coc_ECouponParticipations(NOLOCK) CP                            
        
    WHERE ConsumerID = @ConsumerID                            
        
     AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                          
        
                            
        
    IF (@NumberOfConsumerParticipations < (@NumberOfCopons + @Participations))                            
        
    BEGIN                            
        
     SET @NoOfCoponsLeft = @NumberOfConsumerParticipations - @Participations;                            
        
     SET @SPStatus = 1;                            
        
     SET @SPReturnMessage = 'Number of coupons exceeds Number of consumer participations count';                            
        
     SET @SPReturnMessage += ' you have only ' + convert(VARCHAR, @NoOfCoponsLeft) + ' coupons left';                            
        
   SET @ErrorMessage = 'You Already Participated';                            
        
     select * from @TempBarcodeTable;                            
        
     ROLLBACK TRANSACTION SaveECouponConfiguration;                            
        
     RETURN;                            
        
    END                            
        
   END                            
        
  ELSE                            
        
   BEGIN                            
        
    SELECT @Participations = count(*) --, @NumberOfParticipations = @NumberOfGuestParticipations                                             
        
    FROM coc_ECouponParticipations(NOLOCK) CP                            
        
    WHERE GuestID = @GuestID                    
        
     AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                           
        
                            
        
    IF (@NumberOfGuestParticipations < (@NumberOfCopons + @Participations))                            
        
    BEGIN                            
        
     SET @NoOfCoponsLeft = @NumberOfGuestParticipations - @Participations;                            
        
     SET @SPStatus = 1;                            
        
     SET @SPReturnMessage = 'Number of coupons exceeds Number of guest participations count';                            
        
     SET @SPReturnMessage += ' you have only ' + convert(VARCHAR, @NoOfCoponsLeft) + ' coupons left';               
        
  SET @ErrorMessage = 'You Already Participated';                            
        
     select * from @TempBarcodeTable;                            
        
     ROLLBACK TRANSACTION SaveECouponConfiguration;                                 
        
     RETURN;                                
    END                            
        
   END                              
        
                            
        
   IF ISNULL(@Participations, 0) < @NumberOfParticipations                            
        
   BEGIN                            
        
                     
        
    select @NotificationID = NotificationID from coc_notifications(NOLOCK) where eserviceid = @EServiceID                             
        
                            
        
    INSERT INTO @TempBarcodeTable (                            
        
     Barcode                          
        
     ,EServiceBarcodeID                           
        
     ,NotificationID                            
        
     )                            
        
    SELECT TOP (@NumberOfCopons)                             
        
     Barcode                            
        
     ,EServiceBarcodeID                            
        
     ,NotificationID                            
        
    FROM coc_EServiceBarcodes(NOLOCK) --WITH(XLOCK, ROWLOCK)                            
        
    WHERE                            
        
     Notificationid = @NotificationID                             
        
     AND IsUsed = 0                            
        
     AND AsignedMoile IS NULL                            
        
    ORDER BY Rand()                            
        
                    
        
 set @Barcode =(select top 1 Barcode from @TempBarcodeTable)                        
        
    --WAITFOR DELAY '00:00:4';                            
        
       print('barcode = ' +@Barcode )                           
        
    IF @ConsumerID IS NOT NULL                            
        
    BEGIN                            
        
                                
        
       EXEC AddCustomerLoyaltyPoints                             
        
        @EcouponID,                            
        
        @ConsumerID,                            
        
        @LoyaltyPointSetupID,                            
        
        @ErrorMessage OUTPUT                                
        
                                
        
    END                            
        
                            
        
  Declare @UsedByAPI bit;                    
        
  if(@APIKey is not null)                    
        
   set @UsedByAPI = 1;                    
        
                    
        
    UPDATE EB                            
        
    SET ConsumerID = @ConsumerID                            
        
     ,AsignedMoile = @Mobile                            
        
     ,IsUsed = 1                     
        
     ,UsedDate = GETDATE()                     
        
     ,GuestID = @GuestID                          
        
  ,UsedByAPI=@UsedByAPI                        
        
  ,RetailoutletID=@RetailoutletID                        
        
     ,APIKey=@APIKey                        
        
    FROM coc_EServiceBarcodes(NOLOCK) EB              
        
    WHERE EServiceBarcodeID IN (                            
        
      SELECT EServiceBarcodeID                            
        
      FROM @TempBarcodeTable                            
        
      )        and IsUsed= 0     AND AsignedMoile IS NULL                   
        
                   
        
           if @@ROWCOUNT <> @NumberOfCopons        
        
   begin                            
        
     SET @ErrorMessage = 'Transaction Error';                            
        
     SET @SPStatus = 1;                            
        
     SET @SPReturnMessage = @ErrorMessage;                            
        
     select * from @TempBarcodeTable;                            
        
     ROLLBACK TRANSACTION SaveECouponConfiguration;                              
        
     RETURN;                            
        
    end                              
        
    IF (ISNULL(@Barcode, '0') != '0') OR EXISTS ( SELECT *FROM @TempBarcodeTable)                 
        
 BEGIN                            
     if(@XMLData is not null)
	begin
	    --Declare @TempID int,@DynamicLinkQAID bigint,@QAOption nvarchar(1000)
	    DECLARE @DynamicLinkQATemp Table (ID int identity(1,1),DynamicLinkQAID bigint,QAOption nvarchar(1000))
	    INSERT INTO @DynamicLinkQATemp(DynamicLinkQAID,QAOption)                         
		    SELECT DynamicLinkQA.value('(@QAID)','BIGINT'),DynamicLinkQA.value('(@SelectedValue)','NVARCHAR(1000)')                         
				  FROM @XMLData.nodes('/XML/Row') AS Data(DynamicLinkQA) 
		if exists(select * from @DynamicLinkQATemp)
		begin
		  select @Answer1=QAOption from @DynamicLinkQATemp where ID=1
		  select @Answer2=QAOption from @DynamicLinkQATemp where ID=2
		  select @Answer3=QAOption from @DynamicLinkQATemp where ID=3
		end
	end    
     DECLARE @ECouponParticipationID BIGINT                            
        
                            
        
     INSERT INTO coc_ECouponParticipations (                            
        
      ECouponID                            
        
      ,ParticipationDate                            
        
      ,Barcode                            
        
,ParticipationMobile                            
        
      ,ParticipationEmailID                            
        
      ,ConsumerID                            
        
      ,GuestID                            
        
      ,ConsumerName                            
        
      ,RetailoutletID                     
        
   ,RequestSourceType                  
        
   ,ReferenceNumber              
        
   ,UploadImagePath        
   ,UploadImagePath2     
   ,IsFromCompetitionLink                         
   ,BranchName        
   ,InvoiceAmount 
   ,Supermarket
   ,InvoiceNumber 
   ,IdentificationNumber
   ,TamimiRewardsMembershipNumber
   ,Question1
   ,Question2
   ,Question3
   ,UserName
   ,SocialMediaID
   )                            
        
     SELECT @EcouponID                            
        
      ,GETDATE()                            
        
      ,Barcode                            
        
      ,@Mobile                            
        
      ,@Email                            
        
      ,@ConsumerID                            
        
      ,@GuestID                            
        
      ,@ConsumerName                            
        
      ,@RetailoutletID                  
        
   ,@RequestSourceType                   
        
   ,@ReferenceNumber                
        
   ,@UploadImagePath             
    ,@UploadImagePath2    
   ,1                
   ,@BranchName        
   ,@Question1 
   ,@Supermarket
   ,@Question2
   ,@IdentificationNumber
   ,@TamimiRewardsMembershipNumber
   ,@Answer1
   ,@Answer2
   ,@Answer3
   ,@UserName
   ,@SocialMediaID
     FROM @TempBarcodeTable                            
        
                            
        
     --SELECT @NotificationSendID = NotificationSendID                            
        
     --FROM coc_NotificationSends(NOLOCK)                            
        
     --WHERE NotificationID = @NotificationID                            
        
                            
        
     SELECT @ECouponParticipationID = SCOPE_IDENTITY()                            
        
                            
        
     DECLARE @ID INTEGER                            
        
     DECLARE @QuestionBankID INTEGER                            
        
     DECLARE @QuestionOptionID INTEGER                            
        
     DECLARE @AnswerRank INTEGER                       
        
     DECLARE @AnswerValue VARCHAR(100)                            
        
                            
        
     --@Answers (ID, QuestionBankID, QuestionOptionID, AnswerRank)                                            
        
     SELECT TOP 1 @ID = ID                            
        
      ,@QuestionBankID = QuestionBankID                            
        
      ,@QuestionOptionID = QuestionOptionID                            
        
      ,@AnswerRank = AnswerRank                            
        
      ,@AnswerValue = AnswerValue                            
        
     FROM @Answers                            
        
                            
        
     DECLARE @ActiveID INTEGER                            
        
                            
        
     WHILE @ID IS NOT NULL                       
        
      AND @ID <> ISNULL(@ActiveID, 0)                            
        
     BEGIN                            
        
      SET @ActiveID = @ID                            
        
                            
        
      INSERT INTO coc_ECouponParticipationAnswers (                            
        
       QuestionBankID                            
        
       ,QuestionOptionID                            
        
       ,AnswerRank                            
        
       ,ECouponParticipationID                            
        
       ,AnswerValue                            
        
       )                         
        
      VALUES (           
        
       @QuestionBankID              
        
       ,@QuestionOptionID                            
        
       ,@AnswerRank                            
        
       ,@ECouponParticipationID                            
        
       ,@AnswerValue                          
        
   )                            
        
                            
        
      SELECT TOP 1 @ID = ID                            
        
       ,@QuestionBankID = QuestionBankID                            
        
       ,@QuestionOptionID = QuestionOptionID                            
        
       ,@AnswerRank = AnswerRank                            
        
       ,@AnswerValue = AnswerValue                            
        
      FROM @Answers                            
        
      WHERE ID > @ActiveID                            
        
     END                            
        
                            
        
     IF @ConsumerID IS NOT NULL                            
        
     BEGIN                            
        
                             
        
      SELECT @EServiceBarcodeID = null                            
        
      SELECT *                            
        
       FROM @TempBarcodeTable order by EServiceBarcodeID ASC                            
        
      SELECT top 1 @EServiceBarcodeID = EServiceBarcodeID                            
        
       ,@Barcode = Barcode                            
        
      FROM @TempBarcodeTable order by EServiceBarcodeID ASC                            
        
      print '@EServiceBarcodeID: '+convert(varchar,@EServiceBarcodeID)                            
        
      WHILE @EServiceBarcodeID IS NOT NULL AND @EServiceBarcodeID <> ISNULL(@ActiveID, 0)                            
        
      BEGIN                            
        
       SET @ActiveID = @EServiceBarcodeID                            
        
                   
        
                              
        
                                
        
       EXEC SaveNotificationSending                            
        
          @NotificationID                            
        
         ,@EcouponID                            
        
         ,@ConsumerID                            
        
         ,@GeneralNotificationTemplateID                            
        
         ,@EServiceID                            
        
         ,@Barcode                            
        
         ,@ErrorMessage OUTPUT                            
        
       SELECT top 1 @EServiceBarcodeID = EServiceBarcodeID                            
        
        ,@Barcode = Barcode                            
        
       FROM @TempBarcodeTable                             
        
       WHERE EServiceBarcodeID > @ActiveID                            
        
       order by EServiceBarcodeID ASC                            
        
      END                           
        
     END                            
        
     SET @ParticipationBarcode = @Barcode;                            
        
     SELECT Barcode                            
        
      ,EServiceBarcodeID                            
        
      ,NotificationID                            
        
     FROM @TempBarcodeTable                            
        
     SET @ErrorMessage = ''                            
        
    END                            
        
    ELSE                            
        
    BEGIN                            
        
     SET @ErrorMessage = 'Barcode is Not There to Asign'                            
        
     SET @SPStatus = 1;                      
        
     SET @SPReturnMessage = @ErrorMessage;                            
        
     select * from @TempBarcodeTable;                            
        
    END                            
        
   END                            
        
 ELSE                            
        
   BEGIN                            
        
    INSERT INTO coc_ECouponParticipationsInvalid (                            
        
     ECouponID                            
        
     ,ParticipationDate                            
        
     ,Barcode                            
        
     ,ParticipationMobile                            
        
     ,ParticipationEmailID                            
        
     ,ConsumerID                      
        
     ,Reason                            
        
     ,ConsumerName   
        
     )                            
        
    SELECT @EcouponID                            
        
     ,GETDATE()                            
        
     ,Barcode                            
        
     ,@Mobile                            
        
     ,@Email                            
        
     ,@ConsumerID                            
        
     ,'P'                            
        
     ,@ConsumerName                            
        
    FROM @TempBarcodeTable                            
        
    select * from @TempBarcodeTable;           
        
    SET @ErrorMessage = 'You Already Participated'                            
        
    SET @SPStatus = 1;                            
        
    SET @SPReturnMessage = @ErrorMessage;                            
        
   END                            
        
  END                            
        
 ELSE -- else entrytypeid not in 41 or 42                            
        
  BEGIN                            
        
   select * from @TempBarcodeTable;                            
        
   SET @ErrorMessage = 'Invalid Competition Type'                            
        
   SET @SPStatus = 1;                            
        
   SET @SPReturnMessage = @ErrorMessage;                        
        
  END                            
        
                            
        
  IF (ISNULL(@ErrorMessage, '') <> '')                            
        
  BEGIN                            
        
   IF @ConsumerID IS NOT NULL                            
        
   BEGIN                  -------------------------------------------------------------------//                                       
        
    --//-------------------------------------------------------                                          
        
    DECLARE @return_value1 INT                            
        
                            
        
    EXEC @return_value1 = [dbo].[SaveEServiceAddOnConsumers] @ConsumerID = @ConsumerID                            
        
     ,@EServiceID = @EServiceID                            
        
                            
        
    PRINT '@return_value1'                            
        
    PRINT @return_value1                            
        
                            
        
    --------------------------------------------------------------------//                                          
        
    SET XACT_ABORT ON;                            
        
   END                            
        
  END                            
        
                            
        
  SELECT @ErrorMessage                            
        
                            
        
                          
        
 END                            
        
                   
        
                          
        
 COMMIT TRANSACTION SaveECouponConfiguration                            
        
END TRY                            
        
                            
        
BEGIN CATCH                            
        
 ROLLBACK TRANSACTION SaveECouponConfiguration                            
        
                            
        
 SELECT @ErrorMessage = ERROR_MESSAGE()                            
        
                            
        
 SET @SPStatus = 1;                            
        
 SET @SPReturnMessage = @ErrorMessage;                            
        
                            
        
 RAISERROR (          
        
   @ErrorMessage                            
        
   ,16                            
        
   ,1                            
        
   );                            
        
END CATCH                            
        
                            
        
SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[SaveECouponParticipationByBarcode]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveECouponParticipationByBarcode]                                     
 @Barcode [NullDescription] = NULL                                    
 ,@EcouponID INTEGER                                    
 ,@ConsumerID INTEGER  = null                                  
 ,@GuestID int = null                                  
 ,@Mobile [Mobile] = NULL                                    
 ,@Email [Email] = NULL                                    
 ,@EligibleCoupons INTEGER = NULL                                    
 ,@WrongAnswer INTEGER = NULL                                    
 ,@ErrorMessage [Remark] = NULL OUTPUT,              
  @ParticipantsEServiceID int = null,                 
  @DeviceSource nvarchar(200) = null,                
  @MacAddress nvarchar(200) = null,                
  @ConsumerLatitude nvarchar(200) = null,                
  @ConsumerLongitude nvarchar(200) = null,                 
  @ClosestRetailoutletID int = null ,              
  @EnteredBarcode [NullDescription] = NULL ,    
  @ParticipationBarcode [Remark] = NULL OUTPUT,
  @ParticipationEmail [Email] = NULL OUTPUT,
  @ParticipationMobile [Mobile] = NULL OUTPUT,
  @CompetitionName nvarchar(250)=NULL OUTPUT,
  @ConsumerName nvarchar(250)=NULL OUTPUT
AS                                  
SET XACT_ABORT ON;                                     
BEGIN                                    
                                 
  if(@ConsumerID = 0)                                  
    set @ConsumerID = null;                                  
   if(@GuestID = 0)                                  
    set @GuestID = null                                  
   --DECLARE @NumberOfConsumerParticipations_N INT                                                
   --DECLARE @NumberOfGuestParticipations_N INT                                   
   --DECLARE @Participations_N INT                                                
   DECLARE @NoOfCoponsLeft INT;                                     
   DECLARE @NumberOfCopons INT;                                  
   set @NumberOfCopons = 1;                                  
                        
   if(@EcouponID=10255)                        
   begin                        
      SET @ErrorMessage = 'CoronaMSG';                                  
      RETURN;                           
   end                        
                        
   if(@EcouponID=10184 and                         
   (LEFT(@Mobile, 5)='00966'                         
   OR LEFT((select PrimaryMobile from coc_Consumers(NOLOCK) where ConsumerID=@ConsumerID),5)='00966'                        
   OR LEFT((select PrimaryMobile from coc_Guests(NOLOCK) where GuestID=@GuestID),5)='00966'))                        
   begin                        
      SET @ErrorMessage = 'AttentionMSG';                                  
      RETURN;                           
   end                        
                        
 BEGIN TRANSACTION SaveECouponPurchases                                    
 BEGIN TRY                                    
  DECLARE @EserviceTypeID INTEGER                                    
  DECLARE @EServiceBarcodeID INTEGER                                    
  --DECLARE @Points INTEGER                                    
  DECLARE @QuestionOptionID INTEGER                                    
  DECLARE @SelectedAnswer INTEGER                         
  DECLARE @EServiceID INTEGER                                    
  DECLARE @NotificationID INTEGER                                    
  --DECLARE @NotificationSendID INTEGER                                    
  DECLARE @LanguageID INTEGER                                    
  DECLARE @EnteredStandardBarcode [NullDescription]                                    
  DECLARE @LoyaltyPointSetupID int = 103                                    
  DECLARE @GeneralNotificationTemplateID int = 14                                    
                                     
  SET @ErrorMessage = ''                                    
                                    
  if(@ConsumerID is not null)                                  
    begin     
	if @ConsumerName is null
	 SELECT @ConsumerName = Isnull(FullName,isnull(FirstName,'user'))                                    
		FROM coc_Consumers(NOLOCK)                                    
		WHERE ConsumerID = @ConsumerID      
   IF @Email IS NULL                                    
    SELECT @Email = EmailID                                    
    FROM coc_Consumers(NOLOCK)                                    
    WHERE ConsumerID = @ConsumerID                                    
                                    
   IF @Mobile IS NULL                                    
    SELECT @Mobile = PrimaryMobile                                    
    FROM coc_Consumers(NOLOCK)                                    
    WHERE ConsumerID = @ConsumerID                                    
    end                                  
 else if(@GuestID is not null)                                  
    begin  
	if @ConsumerName is null
	 SELECT @ConsumerName = Isnull(FullName,isnull(FirstName,'user'))                                 
		FROM coc_guests(NOLOCK)                                    
		WHERE GuestID = @GuestID      
   IF @Email IS NULL                                    
    SELECT @Email = EmailID                                    
    FROM coc_guests(NOLOCK)                                    
    WHERE GuestID = @GuestID                                    
                                    
   IF @Mobile IS NULL                                    
    SELECT @Mobile = PrimaryMobile                                    
    FROM coc_guests(NOLOCK)                                    
    WHERE GuestID = @GuestID                                    
    end                                  
                  
                                 
  IF @EcouponID = 10066 and (@Mobile IS NULL                                    
   OR len(@Mobile) <> 14                                    
   OR (SUBSTRING(@Mobile, 1, 6) <> '009627' and SUBSTRING(@Mobile, 1, 6) <> '009665'))                                    
  BEGIN                                    
   SET @ErrorMessage = 'InvalidMobile'                                    
  END                                    
  ELSE IF @EcouponID = 10100 and (@Mobile IS NULL                                    
   OR len(@Mobile) <> 14                                    
   OR (SUBSTRING(@Mobile, 1, 6) <> '009715' and SUBSTRING(@Mobile, 1, 6) <> '009665'))                                    
  BEGIN                                    
   SET @ErrorMessage = 'InvalidMobile'                                    
  END                                    
  ELSE IF @EcouponID <> 10100 and @EcouponID <> 10066 and @EcouponID <> 10184 and @EcouponID <> 10278 and  (@Mobile IS NULL                                    
   OR len(@Mobile) <> 14                                    
   OR SUBSTRING(@Mobile, 1, 6) <> '009665')                                    
  BEGIN                               
   SET @ErrorMessage = 'InvalidMobile'                                    
  END                                    
  ELSE IF @Email IS NULL                                    
  BEGIN                                    
   SET @ErrorMessage = 'InvalidEmail'                                    
  END                                    
  ELSE                                    
  BEGIN                                    
   IF (ISNULL(@EligibleCoupons, 0) = 0)                                    
    SET @EligibleCoupons = 1                                    
                       
   DECLARE @BarCodes TABLE (                                    
    EServiceBarcodeID INTEGER                                    
    ,AsignedMoile [Mobile]                                    
    ,Barcode [NullDescription]                                    
    ,NotificationID INTEGER                                    
    ,IsUsed BIT                       
    )                                    
                                    
   --//----------------------------------------------------------------                                    
   SELECT @EServiceID = EServiceID                                    
   FROM coc_ECoupons(NOLOCK)                                    
   WHERE EcouponID = @EcouponID                                    
                                    
   DECLARE @errortext [Remark]                                    
   DECLARE @return_value INT                                    
  if(@ConsumerId is not null)                                  
  begin                                  
   EXEC @return_value = [dbo].[ValidateConsumerForECouponVoucher] @ConsumerId = @ConsumerID                                    
    ,@EserviceId = @EServiceID                                    
    ,@errortext = @errortext OUTPUT                                    
   PRINT @ConsumerId                                    
   PRINT @EserviceId                              
   PRINT @errortext                                    
   IF (@errortext != '0')                                    
   BEGIN                                    
    SET @ErrorMessage = @errortext                                    
    SELECT @ErrorMessage                                
 ROLLBACK TRANSACTION SaveECouponPurchases                                 
    RETURN  END                                    
  end                                  
   SET XACT_ABORT ON;                                    
                                    
                                   
   DECLARE @AllowStandardBarcode BIT                                    
   DECLARE @StandardBarcodeValue [NullDescription]                   
   DECLARE @NumberOfConsumerParticipations INT                                    
   DECLARE @StandardBarcodeByRetailOutlet BIT                                    
   DECLARE @StandardBarcodeByQuestionBank BIT                                    
   DECLARE @TotalAllowedParticipationPerCustomer INT                                    
   DECLARE @TotalAllowedParticipationPerCustomerPerDay INT                                    
   DECLARE @AllowedParticipationPerBarcodePerCustomer INT                                    
   DECLARE @AllowedParticipationPerBarcodePerCustomerPerDay INT                                    
   --declare @TotalAllowedParticipationPerGuest int                                    
   --declare @TotalAllowedParticipationPerGuestPerDay int                                    
   DECLARE @ECouponStandardBarcodeID BIGINT                                    
   DECLARE @Outlet_TotalAllowedParticipationPerCustomer INT                                    
   DECLARE @Outlet_TotalAllowedParticipationPerCustomerPerDay INT                                    
   DECLARE @Outlet_TotalAllowedParticipationInOutlet INT                                    
   DECLARE @Outlet_TotalAllowedParticipationPerBarcode INT                                    
   DECLARE @RetailOutletID INT                                    
                                       
   DECLARE @cnt_TotalCompetitionParticipation INTEGER          
   DECLARE @cnt_TotalCompetitionParticipationToday INTEGER                                    
   DECLARE @cnt_TotalCompetitionBarcodeParticipation INTEGER                                    
   DECLARE @cnt_TotalCompetitionParticipationForOutlet INTEGER                                    
   DECLARE @cnt_TotalCustParticipation INTEGER                                    
   DECLARE @cnt_TotalCustParticipationToday INTEGER                                    
   DECLARE @cnt_TotalCustBarcodeParticipation INTEGER                                    
   DECLARE @cnt_TotalCustBarcodeParticipationToday INTEGER                                    
   DECLARE @cnt_TotalOutletParticipation INTEGER                                    
   DECLARE @cnt_TotalCustOutletParticipation INTEGER                                    
   DECLARE @cnt_TotalCustOutletParticipationToday INTEGER                               
                             
   --Recursive                          
   DECLARE @RecursiveHoursParticipationDuration INTEGER                                    
   DECLARE @RecursiveHoursNumberOfParticipations INTEGER                                    
   --Recursive                          
   DECLARE @RecursiveHoursLastParticipatedOn datetime                           
   DECLARE @RecursiveHoursNumberOfParticipationsCount INTEGER                                   
                             
   --StandardBarcode-Recursive                          
   DECLARE @StandardBarcodeRecursiveHoursParticipationDuration INTEGER                                    
   DECLARE @StandardBarcodeRecursiveHoursNumberOfParticipations INTEGER                                       
   DECLARE @StandardBarcodeRecursiveHoursNumberOfParticipationsCount INTEGER                           
                                    
   SELECT @EServiceID = EServiceID                                    
    ,@AllowStandardBarcode = ISNULL(AllowStandardBarcode, 0)                                    
    ,@StandardBarcodeValue = ISNULL(StandardBarcodeValue, '')                                    
    ,@NumberOfConsumerParticipations = ISNULL(NumberOfConsumerParticipations, 1)                                    
    ,@StandardBarcodeByRetailOutlet = ISNULL(StandardBarcodeByRetailOutlet, 0)                                    
    ,@StandardBarcodeByQuestionBank = ISNULL(StandardBarcodeByQuestionBank,0)                                    
    ,@TotalAllowedParticipationPerCustomer = ISNULL(TotalAllowedParticipationPerCustomer, 0)                                    
    ,@TotalAllowedParticipationPerCustomerPerDay = ISNULL(TotalAllowedParticipationPerCustomerPerDay, ISNULL(TotalAllowedParticipationPerCustomer, 0))                                    
    ,@AllowedParticipationPerBarcodePerCustomer = ISNULL(AllowedParticipationPerBarcodePerCustomer, 0)                                    
    ,@AllowedParticipationPerBarcodePerCustomerPerDay = ISNULL(AllowedParticipationPerBarcodePerCustomerPerDay, ISNULL(AllowedParticipationPerBarcodePerCustomer, 0))                                   
    ,                              
  --@TotalAllowedParticipationPerGuest = ISNULL(TotalAllowedParticipationPerGuest, 0),                                    
    --@TotalAllowedParticipationPerGuestPerDay = ISNULL(TotalAllowedParticipationPerGuestPerDay, 0),                                    
    @EserviceTypeID = EntryTypeID                                    
 ,@RecursiveHoursParticipationDuration = isnull(RecursiveHoursParticipationDuration,0)                          
 ,@RecursiveHoursNumberOfParticipations = ISNULL(RecursiveHoursNumberOfParticipations,0)                          
   FROM coc_ECoupons(NOLOCK)                                    
   WHERE ECouponID = @EcouponID                                    

   SET @ParticipationEmail = @Email
   SET @ParticipationMobile = @Mobile
   Select @CompetitionName=EService from coc_EServiceLanguages(nolock) where EServiceID=@EServiceID and LanguageID=1   
                           
                                    
   IF (@EserviceTypeID = 46)                                    
   BEGIN                                    
    IF @AllowStandardBarcode = 1   and @StandardBarcodeValue = @Barcode                                 
     SELECT @EnteredStandardBarcode = @Barcode 
	
    declare @IsCorrectAnswer int                                    
                           
                         
  SELECT @ECouponStandardBarcodeID = ECB.ECouponStandardBarcodeID                                        
      ,@RetailOutletID = ECO.RetailOutletID                                                             
     FROM coc_ECouponStandardBarcodes(NOLOCK) ECB                                        
      INNER JOIN coc_ECoupons(NOLOCK) EC ON ECB.ECouponID = EC.ECouponID             
      LEFT JOIN  coc_ECouponOutlets(NOLOCK) ECO ON ECO.ECouponOutletID = ECB.ECouponOutletID                                        
       AND ((ECO.ECouponOutletID IS not NULL and  ISNULL(ECO.IsActive,1) = 1) or ECO.ECouponOutletID IS NULL)                                        
     WHERE ECB.ECouponID = @EcouponID                                        
      AND ECB.StandardBarcode = @Barcode                                        
      AND ECB.IsActive = 1               
     if  @ECouponStandardBarcodeID is not null
	   SELECT @EnteredStandardBarcode = @Barcode 
      declare @CorporateID int            
   declare @AllowExternalBarcode bit            
   select @AllowExternalBarcode=AllowExternalBarcode,@CorporateID=CorporateID from coc_EServices(nolock) where EServiceID=@EServiceID and AllowExternalBarcode=1             
            
 if @ECouponStandardBarcodeID is null and @AllowExternalBarcode=1            
 begin            
  declare @ReturnMessage nvarchar(500),              @ReturnStatus int                    
     exec USP_CORE_ExternalBarcodeParticipation @EServiceID,@EcouponID,@EnteredBarcode,@Mobile,@Email,@ConsumerID,NULL,@ReturnMessage Output,@ReturnStatus Output,@CorporateID,0,@RetailOutletID            
              
    SET @ErrorMessage = @ReturnMessage ;            
     
   Commit TRANSACTION SaveECouponPurchases                                     
   RETURN;            
            
 end  
  
 
 IF @AllowStandardBarcode = 1                                    
     AND @StandardBarcodeByQuestionBank = 1                    
    BEGIN                                    
     SELECT @ECouponStandardBarcodeID = ECB.ECouponStandardBarcodeID                                    
      ,@RetailOutletID = ECO.RetailOutletID                                    
      --,@RetailOutletID = ECO.RetailOutletID                                    
      ,@IsCorrectAnswer = QO.IsCorrect                                
     FROM coc_ECouponStandardBarcodes(NOLOCK) ECB                                    
      INNER JOIN coc_ECoupons(NOLOCK) EC ON ECB.ECouponID = EC.ECouponID                                    
      INNER JOIN coc_QuestionBanks(NOLOCK) QB ON QB.ECouponID = EC.ECouponID                                    
      INNER JOIN coc_QuestionOptions(NOLOCK) QO ON QO.QuestionBankID = QB.QuestionBankID and ECB.QuestionOptionID = QO.QuestionOptionID                                    
      LEFT JOIN  coc_ECouponOutlets(NOLOCK) ECO ON ECO.ECouponOutletID = ECB.ECouponOutletID                                    
       AND ((ECO.ECouponOutletID IS not NULL and  ISNULL(ECO.IsActive,1) = 1) or ECO.ECouponOutletID IS NULL)                                    
     WHERE ECB.ECouponID = @EcouponID                                    
      AND ECB.StandardBarcode = @Barcode               
      AND ECB.IsActive = 1                                    
                                    
     IF @ECouponStandardBarcodeID IS NULL                                    
      SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                           
     ELSE                                    
     BEGIN                                    
                                          
      SELECT @cnt_TotalCompetitionParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                                    
                                    
      SELECT @cnt_TotalCompetitionParticipation = @cnt_TotalCompetitionParticipation+ count(*)                                    
      FROM coc_ECouponParticipationsInvalid(NOLOCK)                    
      WHERE ECouponID = @EcouponID                                    
                              
      SELECT @cnt_TotalCompetitionParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
      SELECT @cnt_TotalCompetitionParticipationToday = @cnt_TotalCompetitionParticipationToday + count(*)                                    
      FROM coc_ECouponParticipationsInvalid(NOLOCK)                                
      WHERE ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
      SELECT @cnt_TotalCustParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
                                    
      SELECT @cnt_TotalCustParticipation = @cnt_TotalCustParticipation+ count(*)                                    
      FROM coc_ECouponParticipationsInvalid(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID)                                  
       AND ECouponID = @EcouponID                                    
                                    
      SELECT @cnt_TotalCustParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                   
       AND ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                          
      SELECT @cnt_TotalCustParticipationToday = @cnt_TotalCustParticipationToday + count(*)                                    
      FROM coc_ECouponParticipationsInvalid(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID)                                  
       AND ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
      IF @cnt_TotalCustParticipation >= @TotalAllowedParticipationPerCustomer                    
       SET @ErrorMessage = '101ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustParticipationToday >= @TotalAllowedParticipationPerCustomerPerDay                                    
       SET @ErrorMessage = '102DailyParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustOutletParticipation >= @Outlet_TotalAllowedParticipationPerCustomer                                    
       SET @ErrorMessage = '105ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustOutletParticipationToday >= @Outlet_TotalAllowedParticipationPerCustomerPerDay                                    
       SET @ErrorMessage = '106DailyParticipationLimitExceeded'                                    
      ELSE                                    
      BEGIN                                    
   select @EServiceBarcodeID = null                            
       SELECT TOP 1 @EServiceBarcodeID = EServiceBarcodeID                                    
         ,@Barcode = Barcode                                    
         ,@NotificationID = NT.NotificationID                                    
        FROM coc_EServiceBarcodes EB(NOLOCK)                                    
        INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID = NT.NotificationID                                    
         AND NT.EServiceID = @EServiceID                                    
        WHERE IsUsed = 0                   
         AND EB.AsignedMoile IS NULL                            
  order by Rand()                          
  --ORDER BY EServiceBarcodeID                              
  -- changed order to NEWID() on 6th Aug 2019 by Shamim to improve performance                          
  print @EServiceBarcodeID                            
  if @EServiceBarcodeID is null                             
  begin                            
   print 213132123                            
   SET @ErrorMessage = 'CompetitionBarcodesFinished'                               
  end                             
  else                            
  begin                            
                            
     if (@IsCorrectAnswer = 1)                                    
                                    
   INSERT INTO coc_ECouponParticipations (                                    
    ECouponID                                    
    ,ParticipationDate                                    
    ,Barcode                                    
    ,ParticipationMobile                                    
    ,ParticipationEmailID                                    
    ,ConsumerID                                    
    ,GuestID                                  
     ,RetailOutletID                                    
    ,EnteredStandardBarcode    
 ,Longitude    
 ,Latitude    
 ,ClosestRetailoutletID                                  
    )                                    
   SELECT @EcouponID                                    
    ,GETDATE()                                    
    ,@Barcode                                    
    ,@Mobile                                    
    ,@Email                                    
    ,@ConsumerID                                   
    ,@GuestID                                   
    ,@RetailOutletID                                    
    ,@EnteredStandardBarcode    
    ,@ConsumerLongitude    
 ,@ConsumerLatitude    
 ,@ClosestRetailoutletID    
     
     else                                    
   INSERT INTO coc_ECouponParticipationsInvalid (                   
    ECouponID                                    
,ParticipationDate                                    
    ,Barcode                                    
    ,ParticipationMobile                        
    ,ParticipationEmailID                                    
    ,ConsumerID                                    
    ,RetailOutletID                                    
    ,EnteredStandardBarcode                                    
    ,Reason                                    
    )                                    
   SELECT @EcouponID                                    
    ,GETDATE()                                    
    ,@Barcode                                    
    ,@Mobile                                    
    ,@Email                                    
 ,@ConsumerID                                   
    ,@RetailOutletID                                    
    ,@EnteredStandardBarcode                           
    ,'W'                                    
                                    
     UPDATE coc_EServiceBarcodes                                    
     SET AsignedMoile = @Mobile                                    
   ,IsUsed = 1                                    
   ,UsedDate = GETDATE()                                    
   ,ConsumerID = @ConsumerID                                    
   ,GuestID = @GuestID                          
   ,StandardBarcodeValue = @StandardBarcodeValue                                    
     WHERE EServiceBarcodeID = @EServiceBarcodeID                                    
                                    
   if(@ConsumerID is not null)   
   begin                                  
     EXEC AddCustomerLoyaltyPoints                                     
   @EcouponID,                                    
   @ConsumerID,                                    
   @LoyaltyPointSetupID,                                    
   @ErrorMessage OUTPUT                                    
                                    
     EXEC SaveNotificationSending                                    
   @NotificationID                                    
   ,@EcouponID                                    
   ,@ConsumerID                                    
   ,@GeneralNotificationTemplateID                                    
   ,@EServiceID                                    
   ,@Barcode                                    
    ,@ErrorMessage OUTPUT                            
   end                                  
       end                               
      END                                    
     END               
    END                                    
    ELSE IF @AllowStandardBarcode = 1                                    
     AND @StandardBarcodeByRetailOutlet = 1 and @StandardBarcodeValue <> @Barcode               
     BEGIN                                    
          --  SELECT @ECouponStandardBarcodeID = ECB.ECouponStandardBarcodeID                                    
		   --   ,@RetailOutletID = ECO.RetailOutletID                                    
		   --   ,@Outlet_TotalAllowedParticipationPerCustomer =  ISNULL(ECO.TotalAllowedParticipationPerCustomer, EC.TotalAllowedParticipationPerCustomer)                                    
		   --   ,@Outlet_TotalAllowedParticipationPerCustomerPerDay = ISNULL(ECO.TotalAllowedParticipationPerCustomerPerDay, EC.TotalAllowedParticipationPerCustomerPerDay)                                    
		   --   ,@Outlet_TotalAllowedParticipationInOutlet = ISNULL(ECO.TotalAllowedParticipationinOutlet, EC.NumberOfConsumerParticipations)                                    
		   --   ,@Outlet_TotalAllowedParticipationPerBarcode = ISNULL(ECO.TotalAllowedParticipationPerBarcode, EC.AllowedParticipationPerBarcodePerCustomer)                                    
		   -- ,@StandardBarcodeRecursiveHoursParticipationDuration = ECB.RecursiveHoursParticipationDuration                               
		   --,@StandardBarcodeRecursiveHoursNumberOfParticipations = ECB.RecursiveHoursNumberOfParticipations                          
		   --  FROM coc_ECouponStandardBarcodes(NOLOCK) ECB                                    
		   --   inner join coc_ECoupons(NOLOCK) EC ON ECB.ECouponID = EC.ECouponID                                    
		   --   LEFT JOIN coc_ECouponOutlets(NOLOCK) ECO ON ECO.ECouponOutletID = ECB.ECouponOutletID                                    
		   --    AND ((ECO.ECouponOutletID IS not NULL and  ISNULL(ECO.IsActive,1) = 1) or ECO.ECouponOutletID IS NULL)                                    
		   --  inner join coc_RetailOutlets RO ON RO.RetailOutletID = ECO.RetailOutletID                               WHERE ECB.ECouponID = @EcouponID                                    
		   --   AND ECB.StandardBarcode = @Barcode                                    
		   --   AND ECB.IsActive = 1                                    
      SELECT @cnt_TotalCompetitionParticipation = count(*)                                
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                                    
                                    
      SELECT @cnt_TotalCompetitionParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
      SELECT @cnt_TotalCompetitionBarcodeParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                 
       AND EnteredStandardBarcode = @EnteredStandardBarcode                                    
                                    
      SELECT @cnt_TotalCompetitionParticipationForOutlet = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                                    
       AND RetailOutletID = @RetailOutletID                                    
                                    
      SELECT @cnt_TotalCustParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
                                    
      SELECT @cnt_TotalCustParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
      SELECT @cnt_TotalCustBarcodeParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
       AND EnteredStandardBarcode = @EnteredStandardBarcode                                    
                                    
      SELECT @cnt_TotalCustBarcodeParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
       AND EnteredStandardBarcode = @EnteredStandardBarcode                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                              
                           
      SELECT @cnt_TotalOutletParticipation = count(*)                              
      FROM coc_ECouponParticipations(NOLOCK)       
      WHERE ECouponID = @EcouponID                                    
       AND RetailOutletID = @RetailOutletID      and  (ConsumerID = @ConsumerID  or GuestID = @GuestID)                          
                              
                                    
      SELECT @cnt_TotalCustOutletParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
       AND RetailOutletID = @RetailOutletID                                    
                                    
      SELECT @cnt_TotalCustOutletParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                   
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                             
       AND ECouponID = @EcouponID                    
       AND RetailOutletID = @RetailOutletID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
--StandardBarcode-Recursive                          
 IF ( @StandardBarcodeRecursiveHoursParticipationDuration <> 0 )                          
     begin                          
  SELECT @StandardBarcodeRecursiveHoursNumberOfParticipationsCount = count(*) FROM coc_ECouponParticipations(NOLOCK)                                    
   WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID) AND ECouponID = @EcouponID                           
   AND (ParticipationDate >= DATEADD(hh,-(@StandardBarcodeRecursiveHoursParticipationDuration),GETDATE()))                          
                          
   IF(@StandardBarcodeRecursiveHoursNumberOfParticipationsCount+1) > @StandardBarcodeRecursiveHoursNumberOfParticipations                          
    begin                          
    SET @ErrorMessage = '105ConsumerParticipationLimitExceeded'                           
    ROLLBACK TRANSACTION SaveECouponPurchases                                 
    RETURN                           
    end                               
       end                          
    select @cnt_TotalCustBarcodeParticipation, @AllowedParticipationPerBarcodePerCustomer                          
      IF @cnt_TotalCustParticipation >= @TotalAllowedParticipationPerCustomer                                    
       SET @ErrorMessage = '101ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustParticipationToday >= @TotalAllowedParticipationPerCustomerPerDay                                    
       SET @ErrorMessage = '102DailyParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustBarcodeParticipation >= @AllowedParticipationPerBarcodePerCustomer                                   
       SET @ErrorMessage = '103ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustBarcodeParticipationToday >= @AllowedParticipationPerBarcodePerCustomerPerDay                                    
       SET @ErrorMessage = '104DailyParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustOutletParticipation >= @Outlet_TotalAllowedParticipationPerCustomer                                    
       SET @ErrorMessage = '105ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustOutletParticipationToday >= @Outlet_TotalAllowedParticipationPerCustomerPerDay                                    
       SET @ErrorMessage = '106DailyParticipationLimitExceeded'                               
      ELSE IF @cnt_TotalOutletParticipation >= @Outlet_TotalAllowedParticipationInOutlet                                    
       SET @ErrorMessage = '107ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustBarcodeParticipation >= @Outlet_TotalAllowedParticipationPerBarcode                                    
       SET @ErrorMessage = '108ConsumerParticipationLimitExceeded'                                    
      ELSE          BEGIN                               
   select @EServiceBarcodeID = null                            
       SELECT TOP 1 @EServiceBarcodeID = EB.EServiceBarcodeID                                    
         ,@NotificationID = NT.NotificationID                                    
        FROM coc_EServiceBarcodes EB(NOLOCK)                                    
        INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID = NT.NotificationID                                    
         AND NT.EServiceID = @EServiceID                                    
        WHERE EB.IsUsed = 1                                    
         AND isnull(EB.AsignedMoile,0)=0 
		 AND isnull(EB.AsignedEmailID,0)=0 
		 AND isnull(EB.ConsumerID,0)=0 
		 AND isnull(EB.GuestID,0)=0 
        AND EB.Barcode = @Barcode                        
  if @EServiceBarcodeID is null                             
  begin                            
   SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                               
  end                             
  else                            
  begin                            
 INSERT INTO coc_ECouponParticipations (         
       ECouponID                                    
       ,ParticipationDate                                    
       ,Barcode                                    
       ,ParticipationMobile                                    
       ,ParticipationEmailID                                    
       ,ConsumerID                                    
    ,GuestID    
  ,RetailOutletID                                    
 ,Longitude    
 ,Latitude    
 ,ClosestRetailoutletID
       )                                    
      SELECT @EcouponID                                    
       ,GETDATE()                                    
       ,@Barcode                                    
       ,@Mobile                                    
       ,@Email                                    
       ,@ConsumerID                                   
    ,@GuestID      
  ,@RetailOutletID                                    
    ,@ConsumerLongitude    
 ,@ConsumerLatitude    
 ,@ClosestRetailoutletID 

    UPDATE coc_EServiceBarcodes                                    
    SET AsignedMoile = @Mobile
	 ,ConsumerID=@ConsumerID
	 ,GuestID=@GuestID
	 ,AsignedEmailID=@Email
     ,IsUsed = 1                                    
     ,UsedDate = GETDATE()       
    WHERE EServiceBarcodeID = @EServiceBarcodeID                                    
                              
    select @ParticipationBarcode = @Barcode                              
   if(@ConsumerID is not null)                                  
   begin                                  
     EXEC AddCustomerLoyaltyPoints                                     
   @EcouponID,                                    
   @ConsumerID,                                    
   @LoyaltyPointSetupID,                                    
   @ErrorMessage OUTPUT                       
                                    
     EXEC SaveNotificationSending                                    
   @NotificationID                                    
   ,@EcouponID                                    
   ,@ConsumerID                                    
   ,@GeneralNotificationTemplateID                                    
   ,@EServiceID                       
   ,@Barcode                                    
   ,@ErrorMessage OUTPUT                                    
                                    
  end                                  
  end                            
      END                                    
     END                               
     
    ELSE IF @AllowStandardBarcode = 1                                 
     AND @StandardBarcodeValue <> @Barcode                                 
    BEGIN                                    
     SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                                    
    END                                    
    ELSE IF @AllowStandardBarcode = 1                                    
     AND @StandardBarcodeValue = @Barcode       
    BEGIN                                    
     DECLARE @cnt INTEGER                                    
     IF exists(Select ECouponID From coc_ECouponParticipations(nolock) where EnteredStandardBarcode=@Barcode and ConsumerID=@ConsumerID )            
	  BEGIN                   
	  Set @ErrorMessage='101ConsumerParticipationLimitExceeded'; 
	  END                   
      Else                   
      begin                  
        SELECT @cnt = count(*)                                    
        FROM coc_ECouponParticipations(NOLOCK)                                    
        WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
         AND ECouponID = @EcouponID                                    
        select @EServiceBarcodeID= null                            
        SELECT TOP 1 @EServiceBarcodeID = EServiceBarcodeID                       
         ,@Barcode = Barcode                                    
         ,@NotificationID = NT.NotificationID                                    
        FROM coc_EServiceBarcodes EB(NOLOCK)                                    
        INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID = NT.NotificationID                                    
         AND NT.EServiceID = @EServiceID                                    
        WHERE IsUsed = 0                                    
         AND EB.AsignedMoile IS NULL                                    
        order by rand()                          
     --ORDER BY EServiceBarcodeID                              
     -- changed order to NEWID() on 6th Aug 2019 by Shamim to improve performance                          
     print @EServiceBarcodeID                            
    if @EServiceBarcodeID is null                             
    begin                            
     print 565656                            
     SET @ErrorMessage = 'CompetitionBarcodesFinished'                               
    end                             
    else                            
    begin                               
      IF @cnt >= @NumberOfConsumerParticipations                                    
       SET @ErrorMessage = 'ConsumerParticipationDepleted'                                    
      ELSE                                    
      BEGIN                                    
       INSERT INTO coc_ECouponParticipations (                                    
        ECouponID                                    
        ,ParticipationDate                                
        ,Barcode                                    
        ,ParticipationMobile                                    
        ,ParticipationEmailID                                    
        ,ConsumerID                                    
         ,GuestID                                  
        ,RetailOutletID                                    
    ,EnteredStandardBarcode    
 ,Longitude    
 ,Latitude    
 ,ClosestRetailoutletID                                    
        )                                    
       SELECT @EcouponID                                    
        ,GETDATE()                                    
        ,@Barcode                                    
        ,@Mobile                                    
        ,@Email                                    
        ,@ConsumerID                                  
     ,@GuestID                                    
         ,@RetailOutletID                                    
    ,@EnteredStandardBarcode    
    ,@ConsumerLongitude    
 ,@ConsumerLatitude    
 ,@ClosestRetailoutletID                                    
                                       
       UPDATE coc_EServiceBarcodes                                    
       SET AsignedMoile = @Mobile                                    
        ,IsUsed = 1                                    
        ,UsedDate = GETDATE()                                    
        ,ConsumerID = @ConsumerID                                    
     ,GuestID = @GuestID                                  
        ,StandardBarcodeValue = @StandardBarcodeValue                                    
       WHERE EServiceBarcodeID = @EServiceBarcodeID                                    
      if(@ConsumerID is not null)                                  
      begin                                  
       EXEC AddCustomerLoyaltyPoints                                     
      @EcouponID,                                    
      @ConsumerID,          @LoyaltyPointSetupID,                                    
      @ErrorMessage OUTPUT                                    
                                       
       EXEC SaveNotificationSending                                    
        @NotificationID                                    
        ,@EcouponID                                    
        ,@ConsumerID                                    
        ,@GeneralNotificationTemplateID                                    
        ,@EServiceID                                    
        ,@Barcode                                    
        ,@ErrorMessage OUTPUT                                    
  end                                  
   end                     
   END                  
     END                                    
    END                                    
    ELSE                       
    BEGIN   
     IF NOT EXISTS (                                    
       SELECT NULL                                    
       FROM coc_ECouponParticipations(NOLOCK)                   
       WHERE Barcode = @Barcode                                    
        AND (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                    
        AND ECouponID = @EcouponID                                    
       )                                    
     BEGIN                                    
       SET @EServiceBarcodeID = null                            
       SELECT TOP 1 @EServiceBarcodeID = EB.EServiceBarcodeID                                    
         ,@NotificationID = NT.NotificationID                                    
        FROM coc_EServiceBarcodes EB(NOLOCK)                                    
        INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID = NT.NotificationID                                    
         AND NT.EServiceID = @EServiceID                                    
        WHERE EB.IsUsed = 1                                    
         AND EB.AsignedMoile IS NULL 
		 AND EB.AsignedEmailID IS NULL
		 AND EB.ConsumerID IS NULL
		 AND EB.GuestID IS NULL
        AND EB.Barcode = @Barcode                          
        --order by NEWID()                          
  --ORDER BY EServiceBarcodeID                              
  -- changed order to NEWID() on 6th Aug 2019 by Shamim to improve performance                          
        print @EServiceBarcodeID                            
 if @EServiceBarcodeID is null                             
 begin                            
  SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                               
 end                             
 else                            
 begin   
 
 INSERT INTO coc_ECouponParticipations (         
       ECouponID                                    
       ,ParticipationDate                                    
       ,Barcode                                    
       ,ParticipationMobile                                    
       ,ParticipationEmailID                                    
       ,ConsumerID                                    
    ,GuestID    
  ,RetailOutletID                                    
 ,Longitude    
 ,Latitude    
 ,ClosestRetailoutletID
       )                                    
      SELECT @EcouponID                                    
       ,GETDATE()                                    
       ,@Barcode                                    
       ,@Mobile                                    
       ,@Email                                    
       ,@ConsumerID                                   
    ,@GuestID      
  ,@RetailOutletID                                    
    ,@ConsumerLongitude    
 ,@ConsumerLatitude    
 ,@ClosestRetailoutletID 
    --SELECT TOP (1) @EServiceBarcodeID = EServiceBarcodeID                                    
    --FROM coc_EServiceBarcodes(NOLOCK)                                    
    --WHERE Barcode = @BarCode                                    
                                    
    UPDATE coc_EServiceBarcodes                                    
    SET AsignedMoile = @Mobile
	 ,ConsumerID=@ConsumerID
	 ,GuestID=@GuestID
	 ,AsignedEmailID=@Email
     ,IsUsed = 1                                    
     ,UsedDate = GETDATE()       
    WHERE EServiceBarcodeID = @EServiceBarcodeID   
	
	SELECT @ErrorMessage                        
    select @ParticipationBarcode = @Barcode   

   if (@ConsumerID is not null)                                  
   begin                        
    EXEC AddCustomerLoyaltyPoints                                     
   @EcouponID,                                    
   @ConsumerID,                                    
@LoyaltyPointSetupID,                                    
   @ErrorMessage OUTPUT                                    
                                    
    EXEC SaveNotificationSending                                    
     @NotificationID                                    
     ,@EcouponID          
     ,@ConsumerID                     
     ,@GeneralNotificationTemplateID                                    
     ,@EServiceID                                    
     ,@Barcode                                    
     ,@ErrorMessage OUTPUT                                   
  end                                  
  end                            
     END                                    
     ELSE                                    
     BEGIN                                    
      SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                                    
     END                                    
    END                   
   END                                    
                                    
   IF @ErrorMessage = ''                                    
   BEGIN                                    
    -------------------------------------------------------------------//                                    
    --//-------------------------------------------------------                                    
    DECLARE @return_value1 INT                                    
  if(@ConsumerID is not null)                                  
    EXEC @return_value1 = [dbo].[SaveEServiceAddOnConsumers] @ConsumerID = @ConsumerID                                    
     ,@EServiceID = @EServiceID                                    
                  
    PRINT '@return_value1'                                    
    PRINT @return_value1                                    
     --------------------------------------------------------------------//                                    
   END    
   
  END                                    
   
  COMMIT TRANSACTION SaveECouponPurchases                                   
 END TRY                                    
                                    
 BEGIN CATCH                                    
 ROLLBACK TRANSACTION SaveECouponPurchases                                    
 SELECT @ErrorMessage = ERROR_MESSAGE();                                  
 declare @error int; select @error = ERROR_NUMBER();                                    
 Raiserror ('SaveECouponPurchases: %d: %s', 16, 1, @error, @ErrorMessage) ;                                  
 END CATCH                
                                    
END                       
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveECouponParticipationFromCompetitionLink]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveECouponParticipationFromCompetitionLink]                           
        
  @EcouponID INTEGER                            
        
 ,@ConsumerID INTEGER                            
        
 ,@GuestID INTEGER                           
        
 ,@Mobile [Mobile] = NULL                            
        
 ,@Email [Email] = NULL                            
        
 ,@AnswersXML XML                             
        
 ,@RetailoutletID INT = NULL                            
        
 ,@ParticipationBarcode NVARCHAR(100) = NULL OUTPUT                            
        
 ,@ErrorMessage [Remark] = NULL OUTPUT                            
        
 ,@NumberOfCopons INT = 1                            
        
 ,@SPStatus INT = NULL OUT                            
        
 ,@SPReturnMessage NVARCHAR(500) = NULL OUT                            
        
 ,@APIKey nvarchar(50) = null                    
        
 ,@RequestSourceType int = null                  
        
 ,@ReferenceNumber nvarchar(150)=null                
        
 ,@UploadImagePath NVARCHAR(200) = NULL         
        
 ,@IsNotRequiredEmail bit=0         
        
 ,@ConsumerName NVARCHAR(200) =NULL            
 ,@BranchName NVARCHAR(150) =NULL          
 ,@Question1 nvarchar(1000)=NULL        
 ,@Question2 nvarchar(1000)=NULL   
 ,@ExternalBarcode nvarchar(100) = NULL
AS                            
        
SET NOCOUNT ON                            
        
BEGIN TRANSACTION SaveECouponConfiguration                            
        
BEGIN TRY                            
        
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;                            
        
 SET @SPStatus = 0;                            
        
 SET @SPReturnMessage = '';                            
        
                            
        
 DECLARE @EserviceTypeID INTEGER                            
        
 DECLARE @EServiceBarcodeID BIGINT                            
        
 DECLARE @Points INTEGER                            
        
 DECLARE @SelectedAnswer INTEGER                            
        
 DECLARE @EServiceID INTEGER                            
        
 DECLARE @NotificationID INTEGER                            
        
 DECLARE @NotificationSendID INTEGER                            
        
 DECLARE @LanguageID INTEGER                            
        
 DECLARE @CompetitionName NVARCHAR(200)                            
        
 --DECLARE @ConsumerName NVARCHAR(100)                            
        
 --DECLARE @EligibleCoupons integer                                          
        
 DECLARE @Barcode NVARCHAR(100)                          
        
                             
        
                          
        
 DECLARE @SMSBody nvarchar(max)                          
        
 DECLARE @EmailBody nvarchar(max)                          
        
                             
        
 DECLARE @TempBarcodeTable TABLE (                            
        
  Barcode NVARCHAR(100)                            
        
  ,EServiceBarcodeID INT                            
        
  ,NotificationID INT                            
        
  );                            
        
  if(@Mobile='')    
 set @Mobile=NULL    
 if(@Email='')    
 set @Email=NULL                           
        
 IF @ConsumerID = 0                            
        
  SET @ConsumerID = NULL                            
        
                            
        
 IF @GuestID = 0                            
        
  SET @GuestID = NULL                            
        
                            
        
 IF @RetailoutletID = 0                             
        
  set @RetailoutletID = null                            
        
                            
        
 if @RetailoutletID is not null                            
        
 begin                            
        
  if not exists (select * from [dbo].[coc_ECouponOutlets](NOLOCK) where retailoutletid = @RetailoutletID and ecouponid = @EcouponID and isactive = 1)                            
        
  begin                
        
   SET @ErrorMessage = 'Invalid Retail Outlet ID';                            
        
   SET @SPStatus = 1;                            
        
   SET @SPReturnMessage = @ErrorMessage;                            
        
   select * from @TempBarcodeTable;                            
        
   ROLLBACK TRANSACTION SaveECouponConfiguration;                              
        
   RETURN;                            
        
  end     
  
  end
        
 declare @CompetitionType int

select @CompetitionType = CompetitionType from Coc_Core_DynamicLinks where EcouponID= @EcouponID

        
 if not exists (select * from [dbo].[coc_ECoupons](NOLOCK) EC inner join [dbo].[coc_EServices] ES (NOLOCK) ON EC.eserviceid = ES.eserviceid                            
        
   where convert(date, getdate()) between convert(date, ES.FromDate)  and convert(date, ES.ToDate) and ES.isactive = 1 and EC.isactive =1 and EC.ECouponID=@EcouponID)                            
        
 begin                            
        
  SET @ErrorMessage = 'Competition Not active';                         
        
  SET @SPStatus = 1;                            
        
  SET @SPReturnMessage = @ErrorMessage;                            
        
  select * from @TempBarcodeTable;                            
        
  ROLLBACK TRANSACTION SaveECouponConfiguration;                              
        
  RETURN;                            
        
 end                           
        
  IF @Email IS NOT NULL or @Mobile IS NOT NULL        
    BEGIN           
       DECLARE @ParticipationsCount int          
       SELECT @ParticipationsCount = count(*)              
       FROM coc_ECouponParticipations(NOLOCK)         
       WHERE  (ParticipationEmailID= @Email  or ParticipationMobile=@Mobile )         
        AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                                
        IF ( @ParticipationsCount >= 1)       
         BEGIN      
   SET @SPStatus = 1;                                  
            
   SET @SPReturnMessage = 'Already Participated with Same Mobile Or Email';                                  
            
   SET @SPReturnMessage = 'Already Participated with Same Mobile Or Email';                                  
            
   SET @ErrorMessage = 'Already Participated with Same Mobile Or Email';                                  
            
   select * from @TempBarcodeTable;                                  
            
   ROLLBACK TRANSACTION SaveECouponConfiguration;                                  
            
   RETURN;                                              
  END                                              
   END                  
        
                            
        
 print('@ConsumerID IS NULL   AND @GuestID IS NULL  ')                            
        
 print('@ConsumerID = '+ convert(varchar,@consumerid) )           
        
 print('@GuestID = '+ convert(varchar,@GuestID) )                   
        
                
        
 IF (                            
        
   @ConsumerID IS NULL                            
        
   AND @GuestID IS NULL                            
        
  )                            
        
 BEGIN                            
        
  INSERT INTO coc_ECouponParticipationsInvalid (                            
        
   ECouponID                            
        
   ,ParticipationDate                            
        
   ,Barcode                            
        
   ,ParticipationMobile                            
        
   ,ParticipationEmailID                            
        
   ,ConsumerID                            
        
   ,Reason                            
        
   ,ConsumerName                            
        
   )                            
        
  SELECT @EcouponID                   
        
   ,GETDATE()                            
        
   ,@Barcode                            
        
   ,@Mobile                            
        
   ,@Email                            
        
   ,@ConsumerID           
        
   ,'P'                            
        
   ,@ConsumerName                            
        
                            
        
  SET @ErrorMessage = 'Barcode is Not There to Asign';                            
        
  SET @SPStatus = 1;                            
        
  SET @SPReturnMessage = @ErrorMessage;                            
        
  select * from @TempBarcodeTable;                            
        
  ROLLBACK TRANSACTION SaveECouponConfiguration;                              
        
  RETURN;                            
        
 END                            
        
                            
        
 IF @ConsumerID IS NOT NULL                            
        
 BEGIN                            
        
  IF @Email IS NULL                            
        
   SELECT @Email = EmailID                            
        
   FROM coc_Consumers(NOLOCK)                            
        
   WHERE ConsumerID = @ConsumerID                            
        
    AND IsActive = 1                            
        
    AND IsDeleted = 0                            
        
    AND IsVerified = 1                            
        
                            
        
  IF @ConsumerName IS NULL                            
        
   SELECT @ConsumerName = isnuLL(FirstName, '') + ' ' + isnull(SecondName, '') + ' ' + isnull(FamilyName, '')                            
        
   FROM coc_Consumers(NOLOCK)                            
        
   WHERE ConsumerID = @ConsumerID                            
        
    AND IsActive = 1                            
        
    AND IsDeleted = 0                            
        
    AND IsVerified = 1                            
        
                            
        
  IF @Mobile IS NULL          
        
   SELECT @Mobile = PrimaryMobile                            
        
   FROM coc_Consumers(NOLOCK)                            
        
   WHERE ConsumerID = @ConsumerID                            
        
    AND IsActive = 1                            
        
    AND IsDeleted = 0                            
        
    AND IsVerified = 1                            
        
 END                            
        
ELSE                            
        
 BEGIN                            
        
  IF @Email IS NULL                            
        
   SELECT @Email = EmailID                            
        
   FROM coc_Guests(NOLOCK)                            
        
   WHERE GuestID = @GuestID                    
        
    AND IsActive = 1                            
        
    AND IsVerified = 1                            
        
                            
        
  IF @ConsumerName IS NULL                            
        
   SELECT @ConsumerName = isnuLL(FullName, '')                            
        
   FROM coc_Guests(NOLOCK)                            
        
   WHERE GuestID = @GuestID                            
        
    AND IsActive = 1                            
        
    AND IsVerified = 1                            
        
                            
        
  IF @Mobile IS NULL                            
        
   SELECT @Mobile = PrimaryMobile                            
        
   FROM coc_Guests(NOLOCK)               
        
   WHERE GuestID = @GuestID                            
        
    AND IsActive = 1                            
        
    AND IsVerified = 1                            
        
 END                            
        
                            
        
 IF @Mobile IS NULL                            
        
  OR len(@Mobile) <> 14                            
        
  OR SUBSTRING(@Mobile, 1, 6) <> '009665'                            
        
 BEGIN                            
        
  SET @ErrorMessage = 'InvalidMobile'   ;                
        
  SET @SPReturnMessage = @ErrorMessage;                           
        
 END                            
        
 ELSE IF @Email IS NULL and @IsNotRequiredEmail=0               
        
 BEGIN                            
        
  SET @ErrorMessage = 'InvalidEmail'   ;                
        
  SET @SPReturnMessage = @ErrorMessage;                               
        
 END                            
        
ELSE                            
        
 BEGIN                            
        
                                      
        
  DECLARE @Answers AS TABLE (                            
        
   ID INTEGER Identity(1, 1)                
        
   ,QuestionBankID INTEGER                            
        
   ,QuestionOptionID INTEGER                            
        
   ,AnswerRank INTEGER                            
        
   ,AnswerValue VARCHAR(100)                            
        
   )                            
        
                            
        
  INSERT INTO @Answers (                            
        
   QuestionBankID                            
        
   ,QuestionOptionID                            
        
   ,AnswerRank                            
        
 ,AnswerValue                            
        
   )                            
        
  SELECT Answer.value('(QuestionID[1])', 'INTEGER')                            
        
   ,Answer.value('(AnswerID[1])', 'INTEGER')                            
        
   ,Answer.value('(AnswerRank[1])', 'INTEGER')                            
        
   ,Answer.value('(AnswerValue[1])', 'VARCHAR(100)')                            
        
  FROM @AnswersXML.nodes('/ECouponParticipation/Answers') AS Data(Answer)                
        
                            
        
  UPDATE @Answers                            
        
  SET QuestionOptionID = NULL                            
        
  WHERE QuestionOptionID = 0                            
        
                                        
        
  SELECT @EServiceID = EServiceID                            
        
  FROM coc_ECoupons(NOLOCK)                            
        
  WHERE EcouponID = @EcouponID                            
        
                            
        
  DECLARE @errortext [Remark]                            
        
  DECLARE @return_value INT                            
        
                            
        
                                       
        
  PRINT @ConsumerId                            
        
  PRINT @EserviceId                            
        
  PRINT @errortext                            
        
                            
        
                                        
        
                              
        
                            
        
  DECLARE @NumberOfConsumerParticipations INT                            
        
  DECLARE @NumberOfGuestParticipations INT                            
        
  DECLARE @NumberOfParticipations INT                            
        
  DECLARE @LoyaltyPointSetupID INT = 103;                            
        
  DECLARE @AllowMultiple bit                            
        
  DECLARE @GeneralNotificationTemplateID INT                            
        
                            
        
  SELECT @EServiceID = EServiceID                            
        
   ,@NumberOfConsumerParticipations = ISNULL(NumberOfConsumerParticipations, 0)                            
        
   ,@NumberOfGuestParticipations = ISNULL(NumberOfGuestParticipations, 0)                            
        
   ,@NumberOfParticipations = ISNULL(participationCount, 0)                            
        
   ,@EserviceTypeID = EntryTypeID                            
        
   ,@AllowMultiple = MultipleParticipation                            
        
   ,@GeneralNotificationTemplateID = ParticipationNotificationTemplateID                            
        
  FROM coc_ECoupons(NOLOCK)                            
        
  WHERE ECouponID = @EcouponID                            
        
                            
        
  if(@AllowMultiple=0)                            
        
    set @NumberOfCopons = 1;                                    
                            
        
  if(isnull(@NumberOfParticipations,0)=0)                            
        
   set @NumberOfParticipations= 100                            
        
                            
        
         
        
 IF (                            
        
    @EserviceTypeID = 42                            
        
    OR @EserviceTypeID = 41  
	
	OR @EserviceTypeID = 46 
        
    )                            
        
  BEGIN                            
        
   DECLARE @Participations INT                            
        
   DECLARE @NoOfCoponsLeft INT;                            
        
                            
        
   IF @ConsumerID IS NOT NULL                            
        
   BEGIN                            
        
    SELECT @Participations = count(*) --, @NumberOfParticipations = @NumberOfConsumerParticipations                                           
        
    FROM coc_ECouponParticipations(NOLOCK) CP                            
        
    WHERE ConsumerID = @ConsumerID                            
        
     AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                          
        
                            
        
    IF (@NumberOfConsumerParticipations < (@NumberOfCopons + @Participations))                            
        
    BEGIN                            
        
     SET @NoOfCoponsLeft = @NumberOfConsumerParticipations - @Participations;                            
        
     SET @SPStatus = 1;                            
        
     SET @SPReturnMessage = 'Number of coupons exceeds Number of consumer participations count';                            
        
     SET @SPReturnMessage += ' you have only ' + convert(VARCHAR, @NoOfCoponsLeft) + ' coupons left';                            
        
   SET @ErrorMessage = 'You Already Participated';                            
        
     select * from @TempBarcodeTable;                            
        
     ROLLBACK TRANSACTION SaveECouponConfiguration;                            
        
     RETURN;                            
        
    END                            
        
   END                            
        
  ELSE                            
        
   BEGIN                            
        
    SELECT @Participations = count(*) --, @NumberOfParticipations = @NumberOfGuestParticipations                                             
        
    FROM coc_ECouponParticipations(NOLOCK) CP                            
        
    WHERE GuestID = @GuestID                    
        
     AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                           
        
                            
        
    IF (@NumberOfGuestParticipations < (@NumberOfCopons + @Participations))                            
        
    BEGIN                            
        
     SET @NoOfCoponsLeft = @NumberOfGuestParticipations - @Participations;                            
        
     SET @SPStatus = 1;                            
        
     SET @SPReturnMessage = 'Number of coupons exceeds Number of guest participations count';                            
        
     SET @SPReturnMessage += ' you have only ' + convert(VARCHAR, @NoOfCoponsLeft) + ' coupons left';               
        
  SET @ErrorMessage = 'You Already Participated';                            
        
     select * from @TempBarcodeTable;                            
        
     ROLLBACK TRANSACTION SaveECouponConfiguration;                                 
        
     RETURN;                                
    END                            
        
   END         
   declare @EServiceExternalBarcodeID bigint =  NULL
	IF ISNULL(@Participations, 0) < @NumberOfParticipations   and @CompetitionType= 6
	BEGIN
		select @EServiceExternalBarcodeID = EServiceExternalBarcodeID from coc_EServiceExternalBarcodes where ExternalBarcode = @ExternalBarcode and EServiceID = @EServiceID and isnull(isused,0) = 0
		if @EServiceExternalBarcodeID is null and @EServiceID not in (648,654)
		BEGIN
			    
			 SET @SPStatus = 1;                            
			 SET @SPReturnMessage = 'You have entered invalid ID';                            
			 SET @ErrorMessage = 'You have entered invalid ID';                            
			 select * from @TempBarcodeTable;                            
        
			 ROLLBACK TRANSACTION SaveECouponConfiguration;                                 
        
			 RETURN;                           

		END

	END

                            
        
   IF ISNULL(@Participations, 0) < @NumberOfParticipations                            
        
   BEGIN                            
        
                     
        
    select @NotificationID = NotificationID from coc_notifications(NOLOCK) where eserviceid = @EServiceID                             
        
                            
        
    INSERT INTO @TempBarcodeTable (                            
        
     Barcode                          
        
     ,EServiceBarcodeID                           
        
     ,NotificationID                            
        
     )                            
        
    SELECT TOP (@NumberOfCopons)                             
        
     Barcode                            
        
     ,EServiceBarcodeID                            
        
     ,NotificationID                            
        
    FROM coc_EServiceBarcodes(NOLOCK) --WITH(XLOCK, ROWLOCK)                            
        
    WHERE                            
        
     Notificationid = @NotificationID                             
        
     AND IsUsed = 0                            
        
     AND AsignedMoile IS NULL                            
        
    ORDER BY Rand()                            
        
                    
        
 set @Barcode =(select top 1 Barcode from @TempBarcodeTable)                        
        
    --WAITFOR DELAY '00:00:4';                            
        
       print('barcode = ' +@Barcode )                           
        
    IF @ConsumerID IS NOT NULL                            
        
    BEGIN                            
        
                                
        
       EXEC AddCustomerLoyaltyPoints                             
        
        @EcouponID,                            
        
        @ConsumerID,                            
        
        @LoyaltyPointSetupID,                            
        
        @ErrorMessage OUTPUT                                
        
                                
        
    END                            
        
                            
        
  Declare @UsedByAPI bit;                    
        
  if(@APIKey is not null)                    
        
   set @UsedByAPI = 1;                    
   
   if @CompetitionType= 6 
   begin
     if(@EServiceExternalBarcodeID is not null)
	 begin
      update coc_EServiceExternalBarcodes set IsUsed= 1, UsedDate= getdate(), EServiceBarcodeID= (select top 1 a.EServiceBarcodeID from @TempBarcodeTable a) 
		where EServiceExternalBarcodeID= @EServiceExternalBarcodeID  
	 end
	 else
	 begin
	    set @Question1=@ExternalBarcode
	 end   
   end
    UPDATE EB                            
        
    SET ConsumerID = @ConsumerID                            
        
     ,AsignedMoile = @Mobile                            
        
     ,IsUsed = 1                     
        
     ,UsedDate = GETDATE()                     
        
     ,GuestID = @GuestID                          
        
  ,UsedByAPI=@UsedByAPI                        
        
  ,RetailoutletID=@RetailoutletID                        
        
     ,APIKey=@APIKey                        
        
    FROM coc_EServiceBarcodes(NOLOCK) EB              
        
    WHERE EServiceBarcodeID IN (                            
        
      SELECT EServiceBarcodeID                            
        
      FROM @TempBarcodeTable                            
        
      )        and IsUsed= 0     AND AsignedMoile IS NULL                   
        
                   
        
           if @@ROWCOUNT <> @NumberOfCopons        
        
   begin                            
        
     SET @ErrorMessage = 'Transaction Error';                            
        
     SET @SPStatus = 1;                            
        
     SET @SPReturnMessage = @ErrorMessage;                            
        
     select * from @TempBarcodeTable;                            
        
     ROLLBACK TRANSACTION SaveECouponConfiguration;                              
        
     RETURN;                            
        
    end                              
        
    IF (ISNULL(@Barcode, '0') != '0') OR EXISTS ( SELECT *FROM @TempBarcodeTable)                 
        
 BEGIN                            
        
     DECLARE @ECouponParticipationID BIGINT                            
        
                            
        
     INSERT INTO coc_ECouponParticipations (                            
        
      ECouponID                            
        
      ,ParticipationDate                            
        
      ,Barcode                            
        
,ParticipationMobile                            
        
      ,ParticipationEmailID                            
        
      ,ConsumerID                            
        
      ,GuestID                            
        
      ,ConsumerName                            
        
      ,RetailoutletID                     
        
   ,RequestSourceType                  
        
   ,ReferenceNumber              
        
   ,UploadImagePath        
        
   ,IsFromCompetitionLink                         
   ,BranchName        
   ,Question1        
   ,Question2        
   )                            
        
     SELECT @EcouponID                            
        
      ,GETDATE()                            
        
      ,Barcode                            
        
      ,@Mobile                            
        
      ,@Email                            
        
      ,@ConsumerID                            
        
      ,@GuestID                            
        
      ,@ConsumerName                            
        
      ,@RetailoutletID                  
        
   ,@RequestSourceType                   
        
   ,@ReferenceNumber                
        
   ,@UploadImagePath             
        
   ,1                
   ,@BranchName        
   ,@Question1        
   ,@Question2        
     FROM @TempBarcodeTable                            
        
                            
        
     --SELECT @NotificationSendID = NotificationSendID                            
        
     --FROM coc_NotificationSends(NOLOCK)                            
        
     --WHERE NotificationID = @NotificationID                            
        
                            
        
     SELECT @ECouponParticipationID = SCOPE_IDENTITY()                            
        
                            
        
     DECLARE @ID INTEGER                            
        
     DECLARE @QuestionBankID INTEGER                            
        
     DECLARE @QuestionOptionID INTEGER                            
        
     DECLARE @AnswerRank INTEGER                       
        
     DECLARE @AnswerValue VARCHAR(100)                            
        
                            
        
     --@Answers (ID, QuestionBankID, QuestionOptionID, AnswerRank)                                            
        
     SELECT TOP 1 @ID = ID                            
        
      ,@QuestionBankID = QuestionBankID                            
        
      ,@QuestionOptionID = QuestionOptionID                            
        
      ,@AnswerRank = AnswerRank                            
        
      ,@AnswerValue = AnswerValue                            
        
     FROM @Answers                            
        
                            
        
     DECLARE @ActiveID INTEGER                            
        
                            
        
     WHILE @ID IS NOT NULL                       
        
      AND @ID <> ISNULL(@ActiveID, 0)                            
        
     BEGIN                            
        
      SET @ActiveID = @ID                            
        
                            
        
      INSERT INTO coc_ECouponParticipationAnswers (                            
        
       QuestionBankID                            
        
       ,QuestionOptionID                            
        
       ,AnswerRank                            
        
       ,ECouponParticipationID                            
        
       ,AnswerValue                            
        
       )                         
        
      VALUES (           
        
       @QuestionBankID              
        
       ,@QuestionOptionID                            
        
       ,@AnswerRank                            
        
       ,@ECouponParticipationID                            
        
       ,@AnswerValue                          
        
   )                            
        
                            
        
      SELECT TOP 1 @ID = ID                            
        
       ,@QuestionBankID = QuestionBankID                            
        
       ,@QuestionOptionID = QuestionOptionID                            
        
       ,@AnswerRank = AnswerRank                            
        
       ,@AnswerValue = AnswerValue                            
        
      FROM @Answers                            
        
      WHERE ID > @ActiveID                            
        
     END                            
        
                            
        
     IF @ConsumerID IS NOT NULL                            
        
     BEGIN                            
        
                             
        
      SELECT @EServiceBarcodeID = null                            
        
      SELECT *                            
        
       FROM @TempBarcodeTable order by EServiceBarcodeID ASC                            
        
      SELECT top 1 @EServiceBarcodeID = EServiceBarcodeID                            
        
       ,@Barcode = Barcode                            
        
      FROM @TempBarcodeTable order by EServiceBarcodeID ASC                            
        
      print '@EServiceBarcodeID: '+convert(varchar,@EServiceBarcodeID)                            
        
      WHILE @EServiceBarcodeID IS NOT NULL AND @EServiceBarcodeID <> ISNULL(@ActiveID, 0)                            
        
      BEGIN                            
        
       SET @ActiveID = @EServiceBarcodeID                            
        
                   
        
                              
        
                                
        
       EXEC SaveNotificationSending                            
        
          @NotificationID                            
        
         ,@EcouponID                            
        
         ,@ConsumerID                            
        
         ,@GeneralNotificationTemplateID                            
        
         ,@EServiceID                            
        
         ,@Barcode                            
        
         ,@ErrorMessage OUTPUT                            
        
       SELECT top 1 @EServiceBarcodeID = EServiceBarcodeID                            
        
        ,@Barcode = Barcode                            
        
       FROM @TempBarcodeTable                             
        
       WHERE EServiceBarcodeID > @ActiveID                            
        
       order by EServiceBarcodeID ASC                            
        
      END                           
        
     END                            
        
     SET @ParticipationBarcode = @Barcode;                            
        
     SELECT Barcode                            
        
      ,EServiceBarcodeID                            
        
      ,NotificationID                            
        
     FROM @TempBarcodeTable                            
        
     SET @ErrorMessage = ''                            
        
    END                            
        
    ELSE                            
        
    BEGIN                            
        
     SET @ErrorMessage = 'Barcode is Not There to Asign'                            
        
     SET @SPStatus = 1;                      
        
     SET @SPReturnMessage = @ErrorMessage;                            
        
     select * from @TempBarcodeTable;                            
        
    END                            
        
   END                            
        
 ELSE                            
        
   BEGIN                            
        
    INSERT INTO coc_ECouponParticipationsInvalid (                            
        
     ECouponID                            
        
     ,ParticipationDate                            
        
     ,Barcode                            
        
     ,ParticipationMobile                            
        
     ,ParticipationEmailID                            
        
     ,ConsumerID                      
        
     ,Reason                            
        
     ,ConsumerName   
        
     )                            
        
    SELECT @EcouponID                            
        
     ,GETDATE()                            
        
     ,Barcode                            
        
     ,@Mobile                            
        
     ,@Email                            
        
     ,@ConsumerID                            
        
     ,'P'                            
        
     ,@ConsumerName                            
        
    FROM @TempBarcodeTable                            
        
    select * from @TempBarcodeTable;           
        
    SET @ErrorMessage = 'You Already Participated'                            
        
    SET @SPStatus = 1;                            
        
    SET @SPReturnMessage = @ErrorMessage;                            
        
   END                            
        
  END                            
        
 ELSE -- else entrytypeid not in 41 or 42                            
        
  BEGIN                            
        
   select * from @TempBarcodeTable;                            
        
   SET @ErrorMessage = 'Invalid Competition Type'                            
        
   SET @SPStatus = 1;                            
        
   SET @SPReturnMessage = @ErrorMessage;                        
        
  END                            
        
                            
        
  IF (ISNULL(@ErrorMessage, '') <> '')                            
        
  BEGIN                            
        
   IF @ConsumerID IS NOT NULL                            
        
   BEGIN                  -------------------------------------------------------------------//                                       
        
    --//-------------------------------------------------------                                          
        
    DECLARE @return_value1 INT                            
        
                            
        
    EXEC @return_value1 = [dbo].[SaveEServiceAddOnConsumers] @ConsumerID = @ConsumerID                            
        
     ,@EServiceID = @EServiceID                            
        
                            
        
    PRINT '@return_value1'                            
        
    PRINT @return_value1                            
        
                            
        
    --------------------------------------------------------------------//                                          
        
    SET XACT_ABORT ON;                            
        
   END                            
        
  END                            
        
                            
        
  SELECT @ErrorMessage                            
        
                            
        
                          
        
 END                            
        
                   
        
                          
        
 COMMIT TRANSACTION SaveECouponConfiguration                            
        
END TRY                            
        
                            
        
BEGIN CATCH                            
        
 ROLLBACK TRANSACTION SaveECouponConfiguration                            
        
                            
        
 SELECT @ErrorMessage = ERROR_MESSAGE()                            
        
                            
        
 SET @SPStatus = 1;                            
        
 SET @SPReturnMessage = @ErrorMessage;                            
        
                            
        
 RAISERROR (          
        
   @ErrorMessage                            
        
   ,16                            
        
   ,1                            
        
   );                            
        
END CATCH                            
        
                            
        
SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[SaveECouponParticipationFromCompetitionLinkNew]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveECouponParticipationFromCompetitionLinkNew]                             
          
  @EcouponID INTEGER                              
          
 ,@ConsumerID INTEGER                              
          
 ,@GuestID INTEGER                             
          
 ,@Mobile [Mobile] = NULL                              
          
 ,@Email [Email] = NULL                              
          
 ,@AnswersXML XML                               
          
 ,@RetailoutletID INT = NULL                              
          
 ,@ParticipationBarcode NVARCHAR(100) = NULL OUTPUT                              
          
 ,@ErrorMessage [Remark] = NULL OUTPUT  
   
 ,@ParticipationOnDateTime  NVARCHAR(100) = NULL OUTPUT     
          
 ,@NumberOfCopons INT = 1                              
          
 ,@SPStatus INT = NULL OUT                              
          
 ,@SPReturnMessage NVARCHAR(500) = NULL OUT                              
          
 ,@APIKey nvarchar(50) = null                      
          
 ,@RequestSourceType int = null                    
          
 ,@ReferenceNumber nvarchar(150)=null                  
          
 ,@UploadImagePath NVARCHAR(200) = NULL           
          
 ,@IsNotRequiredEmail bit=0           
          
 ,@ConsumerName NVARCHAR(200) =NULL              
 ,@BranchName NVARCHAR(150) =NULL            
 ,@Question1 nvarchar(1000)=NULL          
 ,@Question2 nvarchar(1000)=NULL          
AS                              
          
SET NOCOUNT ON                              
          
BEGIN TRANSACTION SaveECouponConfiguration                              
          
BEGIN TRY                              
          
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;                              
          
 SET @SPStatus = 0;                              
          
 SET @SPReturnMessage = '';                              
          
                              
          
 DECLARE @EserviceTypeID INTEGER                              
          
 DECLARE @EServiceBarcodeID BIGINT                              
          
 DECLARE @Points INTEGER                              
          
 DECLARE @SelectedAnswer INTEGER                              
          
 DECLARE @EServiceID INTEGER                              
          
 DECLARE @NotificationID INTEGER                              
          
 DECLARE @NotificationSendID INTEGER                              
          
 DECLARE @LanguageID INTEGER                              
          
 DECLARE @CompetitionName NVARCHAR(200)                              
          
 --DECLARE @ConsumerName NVARCHAR(100)                              
          
 --DECLARE @EligibleCoupons integer                                            
          
 DECLARE @Barcode NVARCHAR(100)                            
          
                               
          
                            
          
 DECLARE @SMSBody nvarchar(max)                            
          
 DECLARE @EmailBody nvarchar(max)  
 DECLARE @UserIdentityTypeID INTEGER
 DECLARE @UserIdentityNumber NVARCHAR 
 DECLARE @IsMobileVerified BIT
                               
          
 DECLARE @TempBarcodeTable TABLE (                              
          
  Barcode NVARCHAR(100)                              
          
  ,EServiceBarcodeID INT                              
          
  ,NotificationID INT                              
          
  );                              
          
  if(@Mobile='')      
 set @Mobile=NULL      
 if(@Email='')      
 set @Email=NULL                             
          
 IF @ConsumerID = 0                              
          
  SET @ConsumerID = NULL                              
          
                              
          
 IF @GuestID = 0                              
          
  SET @GuestID = NULL                              
          
                              
          
 IF @RetailoutletID = 0                               
          
  set @RetailoutletID = null                              
          
                              
          
 if @RetailoutletID is not null          
          
 begin                              
          
  if not exists (select * from [dbo].[coc_ECouponOutlets](NOLOCK) where retailoutletid = @RetailoutletID and ecouponid = @EcouponID and isactive = 1)                              
          
  begin                  
          
   SET @ErrorMessage = 'Invalid Retail Outlet ID';                              
          
   SET @SPStatus = 1;                              
          
   SET @SPReturnMessage = @ErrorMessage;                              
          
   select * from @TempBarcodeTable;                              
          
   ROLLBACK TRANSACTION SaveECouponConfiguration;                                
          
   RETURN;                              
          
  end                              
          
 end                              
          
                    
          
 if not exists (select * from [dbo].[coc_ECoupons](NOLOCK) EC inner join [dbo].[coc_EServices] ES (NOLOCK) ON EC.eserviceid = ES.eserviceid                              
          
   where convert(date, getdate()) between convert(date, ES.FromDate)  and convert(date, ES.ToDate) and ES.isactive = 1 and EC.isactive =1 and EC.ECouponID=@EcouponID)                              
          
 begin                              
          
  SET @ErrorMessage = 'Competition Not active';                           
          
  SET @SPStatus = 1;                              
          
  SET @SPReturnMessage = @ErrorMessage;                              
          
  select * from @TempBarcodeTable;                              
          
  ROLLBACK TRANSACTION SaveECouponConfiguration;                                
          
  RETURN;                              
          
 end                             
          
  IF @Email IS NOT NULL or @Mobile IS NOT NULL          
    BEGIN             
       DECLARE @ParticipationsCount int   
     
       SELECT @ParticipationsCount = count(*)           
       FROM coc_ECouponParticipations(NOLOCK)           
       WHERE  (ParticipationEmailID= @Email  or ParticipationMobile=@Mobile )           
        AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                                  
        IF ( @ParticipationsCount >= 1)         
         BEGIN        
   SET @SPStatus = 1;                                    
              
   SET @SPReturnMessage = 'Already Participated with Same Mobile Or Email';                                    
              
   SET @SPReturnMessage = 'Already Participated with Same Mobile Or Email';                                    
              
   SET @ErrorMessage = 'Already Participated with Same Mobile Or Email';                                    
     
   --set date and time if user Already Participated    
 SELECT top 1  @ParticipationOnDateTime = ParticipationDate    FROM coc_ECouponParticipations(NOLOCK)     
      WHERE  (ParticipationEmailID= @Email  or ParticipationMobile=@Mobile )           
        AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)   
  
   select * from @TempBarcodeTable;                                    
              
   ROLLBACK TRANSACTION SaveECouponConfiguration;                                    
              
   RETURN;                                                
  END                                                
   END                    
          
                              
          
 print('@ConsumerID IS NULL   AND @GuestID IS NULL  ')                              
          
 print('@ConsumerID = '+ convert(varchar,@consumerid) )             
          
 print('@GuestID = '+ convert(varchar,@GuestID) )                     
          
                  
          
 IF (                              
          
   @ConsumerID IS NULL                              
          
   AND @GuestID IS NULL                              
          
  )                              
          
 BEGIN                              
          
  INSERT INTO coc_ECouponParticipationsInvalid (                              
          
   ECouponID                              
          
   ,ParticipationDate                              
          
   ,Barcode                              
          
   ,ParticipationMobile                              
          
   ,ParticipationEmailID                              
          
   ,ConsumerID                              
          
   ,Reason                              
          
   ,ConsumerName                              
          
   )                              
          
  SELECT @EcouponID                     
          
   ,GETDATE()                              
          
   ,@Barcode                              
          
   ,@Mobile                              
          
   ,@Email                              
          
   ,@ConsumerID             
          
   ,'P'                              
          
   ,@ConsumerName                              
          
                              
          
  SET @ErrorMessage = 'Barcode is Not There to Asign';                              
          
  SET @SPStatus = 1;                              
          
  SET @SPReturnMessage = @ErrorMessage;                              
          
  select * from @TempBarcodeTable;                              
          
  ROLLBACK TRANSACTION SaveECouponConfiguration;                                
          
  RETURN;                              
          
 END                              
          
                              
          
 IF @ConsumerID IS NOT NULL                              
          
 BEGIN      
 
    SELECT 
    @UserIdentityTypeID = UserIdentityTypeID, 
    @UserIdentityNumber = UserIdentityNumber
    FROM coc_Consumers 
    WHERE ConsumerID = @ConsumerID AND IsActive = 1 AND IsDeleted = 0 --AND IsVerified = 1  

    IF (ISNULL(@UserIdentityTypeID,0)=0 OR ISNULL(@UserIdentityNumber,'')='')
    BEGIN
        SET @ErrorMessage = 'ValidateIdentityNumber';                           
        SET @SPStatus = 1;                              
        SET @SPReturnMessage = @ErrorMessage;                              
        ROLLBACK TRANSACTION SaveECouponConfiguration;                                
        RETURN; 
    END

    --SELECT @IsMobileVerified = IsMobileVerified
    --FROM coc_Consumers 
    --WHERE ConsumerID = @ConsumerID AND IsActive = 1 AND IsDeleted = 0
    --IF(ISNULL(@IsMobileVerified,0)=0)
    --BEGIN
    --    SET @ErrorMessage = 'MobileNotVerified';                           
    --    SET @SPStatus = 1;                              
    --    SET @SPReturnMessage = @ErrorMessage;                              
    --    ROLLBACK TRANSACTION SaveECouponConfiguration;                                
    --    RETURN; 
    --END
          
  IF @Email IS NULL                              
          
   SELECT @Email = EmailID                              
          
   FROM coc_Consumers(NOLOCK)                              
          
   WHERE ConsumerID = @ConsumerID                              
          
    AND IsActive = 1                              
          
    AND IsDeleted = 0                              
          
    --AND IsVerified = 1                              
          
                              
          
  IF @ConsumerName IS NULL                              
          
   SELECT @ConsumerName = isnuLL(FirstName, '') + ' ' + isnull(SecondName, '') + ' ' + isnull(FamilyName, '')                              
          
   FROM coc_Consumers(NOLOCK)                              
          
   WHERE ConsumerID = @ConsumerID                              
          
    AND IsActive = 1                              
          
    AND IsDeleted = 0                              
          
    --AND IsVerified = 1                              
          
                              
          
  IF @Mobile IS NULL            
          
   SELECT @Mobile = PrimaryMobile                              
          
   FROM coc_Consumers(NOLOCK)                              
          
   WHERE ConsumerID = @ConsumerID                              
          
    AND IsActive = 1                              
          
    AND IsDeleted = 0                              
          
    --AND IsVerified = 1                              
          
 END                              
          
ELSE                              
          
 BEGIN                              
          
  IF @Email IS NULL                              
          
   SELECT @Email = EmailID                              
          
   FROM coc_Guests(NOLOCK)                              
          
   WHERE GuestID = @GuestID                      
          
    AND IsActive = 1                              
          
    --AND IsVerified = 1                              
          
                              
          
  IF @ConsumerName IS NULL                              
          
   SELECT @ConsumerName = isnuLL(FullName, '')                              
          
   FROM coc_Guests(NOLOCK)                              
          
   WHERE GuestID = @GuestID                              
          
    AND IsActive = 1                              
          
    --AND IsVerified = 1                              
          
                              
          
  IF @Mobile IS NULL                              
          
   SELECT @Mobile = PrimaryMobile                              
          
   FROM coc_Guests(NOLOCK)                 
          
   WHERE GuestID = @GuestID                              
          
    AND IsActive = 1                              
          
    --AND IsVerified = 1                              
          
 END                              
          
                              
          
 IF @Mobile IS NULL                              
          
  OR len(@Mobile) <> 14                              
          
  OR SUBSTRING(@Mobile, 1, 6) <> '009665'                              
          
 BEGIN                              
          
  SET @ErrorMessage = 'InvalidMobile'   ;                  
          
  SET @SPReturnMessage = @ErrorMessage;                             
          
 END                              
          
 ELSE IF @Email IS NULL and @IsNotRequiredEmail=0                 
          
 BEGIN                              
          
  SET @ErrorMessage = 'InvalidEmail'   ;                  
          
  SET @SPReturnMessage = @ErrorMessage;                                 
          
 END                              
          
ELSE                              
          
 BEGIN                              
          
                                        
          
  DECLARE @Answers AS TABLE (                              
          
   ID INTEGER Identity(1, 1)                  
          
   ,QuestionBankID INTEGER                              
          
   ,QuestionOptionID INTEGER                              
          
   ,AnswerRank INTEGER                              
          
   ,AnswerValue VARCHAR(100)                              
          
   )                              
          
                              
          
  INSERT INTO @Answers (                              
          
   QuestionBankID                              
          
   ,QuestionOptionID                              
          
   ,AnswerRank                              
          
 ,AnswerValue                              
          
   )                              
          
  SELECT Answer.value('(QuestionID[1])', 'INTEGER')                              
          
   ,Answer.value('(AnswerID[1])', 'INTEGER')                              
          
   ,Answer.value('(AnswerRank[1])', 'INTEGER')                              
          
   ,Answer.value('(AnswerValue[1])', 'VARCHAR(100)')                              
          
  FROM @AnswersXML.nodes('/ECouponParticipation/Answers') AS Data(Answer)                  
          
                              
          
  UPDATE @Answers                              
          
  SET QuestionOptionID = NULL                              
          
  WHERE QuestionOptionID = 0                              
          
                                          
          
  SELECT @EServiceID = EServiceID                              
          
  FROM coc_ECoupons(NOLOCK)                              
          
  WHERE EcouponID = @EcouponID                              
          
                              
          
  DECLARE @errortext [Remark]                              
          
  DECLARE @return_value INT                              
          
                              
          
                                         
          
  PRINT @ConsumerId                              
          
  PRINT @EserviceId                              
          
  PRINT @errortext                              
          
                              
          
                                          
          
                                
          
                              
          
  DECLARE @NumberOfConsumerParticipations INT                              
          
  DECLARE @NumberOfGuestParticipations INT                              
          
  DECLARE @NumberOfParticipations INT                              
          
  DECLARE @LoyaltyPointSetupID INT = 103;                              
          
  DECLARE @AllowMultiple bit                              
          
  DECLARE @GeneralNotificationTemplateID INT                              
          
                              
          
  SELECT @EServiceID = EServiceID                              
          
   ,@NumberOfConsumerParticipations = ISNULL(NumberOfConsumerParticipations, 0)                              
          
   ,@NumberOfGuestParticipations = ISNULL(NumberOfGuestParticipations, 0)                              
          
   ,@NumberOfParticipations = ISNULL(participationCount, 0)                              
          
   ,@EserviceTypeID = EntryTypeID                              
          
   ,@AllowMultiple = MultipleParticipation                              
          
   ,@GeneralNotificationTemplateID = ParticipationNotificationTemplateID                              
          
  FROM coc_ECoupons(NOLOCK)                              
          
  WHERE ECouponID = @EcouponID                              
          
                              
          
  if(@AllowMultiple=0)                              
          
    set @NumberOfCopons = 1;                                      
                              
          
  if(isnull(@NumberOfParticipations,0)=0)                              
          
   set @NumberOfParticipations= 100                              
          
                              
          
           
          
 IF (                              
          
    @EserviceTypeID = 42                              
          
    OR @EserviceTypeID = 41                              
      OR @EserviceTypeID = 46      
    )                              
          
  BEGIN                              
          
   DECLARE @Participations INT                              
          
   DECLARE @NoOfCoponsLeft INT;                              
          
                              
          
   IF @ConsumerID IS NOT NULL                              
          
   BEGIN                              
          
    SELECT @Participations = count(*) --, @NumberOfParticipations = @NumberOfConsumerParticipations                                             
          
    FROM coc_ECouponParticipations(NOLOCK) CP                              
          
    WHERE ConsumerID = @ConsumerID                              
          
     AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                            
          
                              
          
    IF (@NumberOfConsumerParticipations < (@NumberOfCopons + @Participations))                              
          
    BEGIN                              
          
     SET @NoOfCoponsLeft = @NumberOfConsumerParticipations - @Participations;                              
          
     SET @SPStatus = 1;                              
          
     SET @SPReturnMessage = 'Number of coupons exceeds Number of consumer participations count';                              
          
     SET @SPReturnMessage += ' you have only ' + convert(VARCHAR, @NoOfCoponsLeft) + ' coupons left';     
     
      SET @ErrorMessage = 'You Already Participated';     
     --set date and time if user Already Participated    
 SELECT top 1  @ParticipationOnDateTime = ParticipationDate    FROM coc_ECouponParticipations(NOLOCK)     
      WHERE  ConsumerID = @ConsumerID AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)     
          
     select * from @TempBarcodeTable;                              
          
     ROLLBACK TRANSACTION SaveECouponConfiguration;                              
          
     RETURN;                              
          
    END                              
          
   END    
          
  ELSE                              
          
   BEGIN                              
          
    SELECT @Participations = count(*) --, @NumberOfParticipations = @NumberOfGuestParticipations                                               
          
    FROM coc_ECouponParticipations(NOLOCK) CP                              
          
    WHERE GuestID = @GuestID                      
          
     AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                             
          
                              
          
    IF (@NumberOfGuestParticipations < (@NumberOfCopons + @Participations))                              
          
    BEGIN                              
          
     SET @NoOfCoponsLeft = @NumberOfGuestParticipations - @Participations;                              
          
     SET @SPStatus = 1;                              
          
     SET @SPReturnMessage = 'Number of coupons exceeds Number of guest participations count';                              
          
     SET @SPReturnMessage += ' you have only ' + convert(VARCHAR, @NoOfCoponsLeft) + ' coupons left';                 
          
     SET @ErrorMessage = 'You Already Participated';   
    
       --set date and time if user Already Participated    
 SELECT top 1  @ParticipationOnDateTime = ParticipationDate    FROM coc_ECouponParticipations(NOLOCK)     
      WHERE   GuestID = @GuestID              
        AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)   
          
     select * from @TempBarcodeTable;                              
          
     ROLLBACK TRANSACTION SaveECouponConfiguration;                                   
          
     RETURN;                                  
    END                              
          
   END                                
          
                              
          
   IF ISNULL(@Participations, 0) < @NumberOfParticipations                              
          
   BEGIN                              
          
                       
          
    select @NotificationID = NotificationID from coc_notifications(NOLOCK) where eserviceid = @EServiceID                               
          
                              
          
    INSERT INTO @TempBarcodeTable (                              
          
     Barcode                            
          
     ,EServiceBarcodeID                             
          
     ,NotificationID                              
          
     )                              
          
    SELECT TOP (@NumberOfCopons)                               
          
     Barcode                              
          
     ,EServiceBarcodeID                              
          
     ,NotificationID                              
          
    FROM coc_EServiceBarcodes(NOLOCK) --WITH(XLOCK, ROWLOCK)                              
          
    WHERE                              
          
     Notificationid = @NotificationID                               
          
     AND IsUsed = 0                              
          
     AND AsignedMoile IS NULL                              
          
    ORDER BY Rand()                              
          
                      
          
 set @Barcode =(select top 1 Barcode from @TempBarcodeTable)                          
          
    --WAITFOR DELAY '00:00:4';                              
          
       print('barcode = ' +@Barcode )                             
          
    IF @ConsumerID IS NOT NULL                              
          
    BEGIN                              
          
                                  
          
       EXEC AddCustomerLoyaltyPoints                               
          
        @EcouponID,                              
          
        @ConsumerID,                              
          
        @LoyaltyPointSetupID,                              
          
@ErrorMessage OUTPUT                                  
          
                                  
          
    END                              
          
                              
          
  Declare @UsedByAPI bit;                      
          
  if(@APIKey is not null)                      
          
   set @UsedByAPI = 1;                      
          
                      
          
    UPDATE EB                              
          
    SET ConsumerID = @ConsumerID                              
          
     ,AsignedMoile = @Mobile                              
          
     ,IsUsed = 1                       
          
     ,UsedDate = GETDATE()                       
          
     ,GuestID = @GuestID                            
          
  ,UsedByAPI=@UsedByAPI                          
          
  ,RetailoutletID=@RetailoutletID                          
          
     ,APIKey=@APIKey                          
          
    FROM coc_EServiceBarcodes(NOLOCK) EB                
          
    WHERE EServiceBarcodeID IN (                              
          
      SELECT EServiceBarcodeID                              
          
      FROM @TempBarcodeTable                              
          
      )        and IsUsed= 0     AND AsignedMoile IS NULL                     
          
                     
          
           if @@ROWCOUNT <> @NumberOfCopons          
          
   begin                              
          
     SET @ErrorMessage = 'Transaction Error';                              
          
     SET @SPStatus = 1;                              
          
     SET @SPReturnMessage = @ErrorMessage;                              
          
     select * from @TempBarcodeTable;                              
          
     ROLLBACK TRANSACTION SaveECouponConfiguration;                                
          
     RETURN;                              
          
    end                                
          
    IF (ISNULL(@Barcode, '0') != '0') OR EXISTS ( SELECT *FROM @TempBarcodeTable)                   
          
 BEGIN                              
          
     DECLARE @ECouponParticipationID BIGINT                              
          
                              
          
     INSERT INTO coc_ECouponParticipations (                              
          
      ECouponID                              
          
      ,ParticipationDate                              
          
      ,Barcode                              
          
,ParticipationMobile                              
          
      ,ParticipationEmailID                              
          
      ,ConsumerID                              
          
      ,GuestID                              
          
      ,ConsumerName                              
          
      ,RetailoutletID                       
          
   ,RequestSourceType                    
          
   ,ReferenceNumber                
          
   ,UploadImagePath          
          
   ,IsFromCompetitionLink                           
   ,BranchName          
   ,Question1          
   ,Question2          
   )                              
          
     SELECT @EcouponID                              
          
      ,GETDATE()                              
          
      ,Barcode                              
          
      ,@Mobile                              
          
      ,@Email                              
          
      ,@ConsumerID                              
          
      ,@GuestID                              
          
      ,@ConsumerName                              
          
      ,@RetailoutletID                    
          
   ,@RequestSourceType                     
          
   ,@ReferenceNumber                  
          
   ,@UploadImagePath               
          
   ,1                  
   ,@BranchName          
   ,@Question1          
   ,@Question2          
     FROM @TempBarcodeTable                              
          
                              
          
     --SELECT @NotificationSendID = NotificationSendID                              
          
     --FROM coc_NotificationSends(NOLOCK)                              
          
     --WHERE NotificationID = @NotificationID                              
          
                              
          
     SELECT @ECouponParticipationID = SCOPE_IDENTITY()                              
          
                              
          
     DECLARE @ID INTEGER                              
          
     DECLARE @QuestionBankID INTEGER                              
          
     DECLARE @QuestionOptionID INTEGER                              
          
     DECLARE @AnswerRank INTEGER                         
          
     DECLARE @AnswerValue VARCHAR(100)                              
          
                              
          
     --@Answers (ID, QuestionBankID, QuestionOptionID, AnswerRank)                                              
          
     SELECT TOP 1 @ID = ID                              
          
      ,@QuestionBankID = QuestionBankID                              
          
      ,@QuestionOptionID = QuestionOptionID                              
          
      ,@AnswerRank = AnswerRank                              
          
      ,@AnswerValue = AnswerValue                              
          
     FROM @Answers                              
          
                              
          
     DECLARE @ActiveID INTEGER                              
          
                              
          
     WHILE @ID IS NOT NULL                         
          
      AND @ID <> ISNULL(@ActiveID, 0)                              
          
     BEGIN                              
          
      SET @ActiveID = @ID                              
          
                              
          
      INSERT INTO coc_ECouponParticipationAnswers (                              
          
       QuestionBankID                              
          
       ,QuestionOptionID                              
          
       ,AnswerRank                              
          
       ,ECouponParticipationID                              
          
       ,AnswerValue                              
          
       )                           
          
      VALUES (             
          
       @QuestionBankID                
          
       ,@QuestionOptionID                              
          
       ,@AnswerRank                              
          
       ,@ECouponParticipationID                              
          
       ,@AnswerValue                            
          
   )                              
          
                              
          
      SELECT TOP 1 @ID = ID                              
          
       ,@QuestionBankID = QuestionBankID                              
          
       ,@QuestionOptionID = QuestionOptionID                              
          
       ,@AnswerRank = AnswerRank                              
          
       ,@AnswerValue = AnswerValue                              
          
      FROM @Answers                              
          
      WHERE ID > @ActiveID                              
          
     END                              
          
                              
          
     IF @ConsumerID IS NOT NULL                              
          
     BEGIN                              
          
                               
          
      SELECT @EServiceBarcodeID = null                              
          
      SELECT *                              
          
       FROM @TempBarcodeTable order by EServiceBarcodeID ASC                              
          
      SELECT top 1 @EServiceBarcodeID = EServiceBarcodeID                              
          
       ,@Barcode = Barcode                              
          
      FROM @TempBarcodeTable order by EServiceBarcodeID ASC                              
          
      print '@EServiceBarcodeID: '+convert(varchar,@EServiceBarcodeID)                              
          
      WHILE @EServiceBarcodeID IS NOT NULL AND @EServiceBarcodeID <> ISNULL(@ActiveID, 0)                              
          
      BEGIN                              
          
       SET @ActiveID = @EServiceBarcodeID                              
          
                     
          
                                
          
                                  
          
       EXEC SaveNotificationSending                              
          
          @NotificationID                              
          
         ,@EcouponID                              
          
         ,@ConsumerID                              
          
         ,@GeneralNotificationTemplateID                              
          
         ,@EServiceID                              
          
         ,@Barcode                              
          
         ,@ErrorMessage OUTPUT                              
          
       SELECT top 1 @EServiceBarcodeID = EServiceBarcodeID                              
          
        ,@Barcode = Barcode                              
          
       FROM @TempBarcodeTable                               
          
       WHERE EServiceBarcodeID > @ActiveID                              
          
       order by EServiceBarcodeID ASC                              
          
      END                             
          
     END                              
          
     SET @ParticipationBarcode = @Barcode;                              
          
     SELECT Barcode                              
          
      ,EServiceBarcodeID                              
          
      ,NotificationID                              
          
     FROM @TempBarcodeTable                              
          
     SET @ErrorMessage = ''                              
          
    END                              
          
    ELSE                              
          
    BEGIN                              
          
     SET @ErrorMessage = 'Barcode is Not There to Asign'                              
          
     SET @SPStatus = 1;                        
          
     SET @SPReturnMessage = @ErrorMessage;                              
          
     select * from @TempBarcodeTable;                              
          
    END                              
          
   END                              
          
 ELSE                              
          
   BEGIN                              
          
    INSERT INTO coc_ECouponParticipationsInvalid (                              
          
     ECouponID                              
          
     ,ParticipationDate                              
          
     ,Barcode                              
          
     ,ParticipationMobile                              
          
     ,ParticipationEmailID                              
          
     ,ConsumerID                        
          
     ,Reason                              
          
     ,ConsumerName     
          
     )                              
          
    SELECT @EcouponID                              
          
     ,GETDATE()                              
          
     ,Barcode                              
          
     ,@Mobile                              
          
     ,@Email                              
          
     ,@ConsumerID                              
          
     ,'P'                              
          
     ,@ConsumerName                              
          
    FROM @TempBarcodeTable                              
          
    select * from @TempBarcodeTable;             
          
    --set date and time if user Already Participated    
 SELECT top 1  @ParticipationOnDateTime = ParticipationDate    FROM coc_ECouponParticipations(NOLOCK)     
      WHERE  (ParticipationEmailID= @Email  or ParticipationMobile=@Mobile )           
        AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)    
  
    SET @ErrorMessage = 'You Already Participated';  
          
    SET @SPStatus = 1;                              
          
    SET @SPReturnMessage = @ErrorMessage;                              
          
   END                              
          
  END                              
          
 ELSE -- else entrytypeid not in 41 or 42                              
          
  BEGIN                              
          
   select * from @TempBarcodeTable;                              
          
   SET @ErrorMessage = 'Invalid Competition Type'                              
          
   SET @SPStatus = 1;                              
          
   SET @SPReturnMessage = @ErrorMessage;                          
          
  END                              
          
                              
          
  IF (ISNULL(@ErrorMessage, '') <> '')                              
          
  BEGIN                              
          
   IF @ConsumerID IS NOT NULL                              
          
   BEGIN                  -------------------------------------------------------------------//                                         
          
    --//-------------------------------------------------------                                            
          
    DECLARE @return_value1 INT                              
          
                              
          
    EXEC @return_value1 = [dbo].[SaveEServiceAddOnConsumers] @ConsumerID = @ConsumerID                              
          
     ,@EServiceID = @EServiceID                              
          
                              
          
    PRINT '@return_value1'                              
          
    PRINT @return_value1                              
          
                              
          
    --------------------------------------------------------------------//                                            
          
    SET XACT_ABORT ON;                              
          
   END                              
          
  END                              
          
                              
          
  SELECT @ErrorMessage                              
          
                              
          
                            
          
 END                              
          
                     
          
                            
          
 COMMIT TRANSACTION SaveECouponConfiguration                              
          
END TRY                              
          
                              
          
BEGIN CATCH                              
          
 ROLLBACK TRANSACTION SaveECouponConfiguration                              
          
                              
          
 SELECT @ErrorMessage = ERROR_MESSAGE()                              
          
                              
          
 SET @SPStatus = 1;                              
          
 SET @SPReturnMessage = @ErrorMessage;                              
          
                              
          
 RAISERROR (            
          
   @ErrorMessage                              
          
   ,16                              
          
   ,1                              
          
   );                              
          
END CATCH                              
          
                              
          
SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[SaveECouponParticipationFromCompetitionLinkNew16062021]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveECouponParticipationFromCompetitionLinkNew16062021]                             
          
  @EcouponID INTEGER                              
          
 ,@ConsumerID INTEGER                              
          
 ,@GuestID INTEGER                             
          
 ,@Mobile [Mobile] = NULL                              
          
 ,@Email [Email] = NULL                              
          
 ,@AnswersXML XML                               
          
 ,@RetailoutletID INT = NULL                              
          
 ,@ParticipationBarcode NVARCHAR(100) = NULL OUTPUT                              
          
 ,@ErrorMessage [Remark] = NULL OUTPUT  
   
 ,@ParticipationOnDateTime  NVARCHAR(100) = NULL OUTPUT     
          
 ,@NumberOfCopons INT = 1                              
          
 ,@SPStatus INT = NULL OUT                              
          
 ,@SPReturnMessage NVARCHAR(500) = NULL OUT                              
          
 ,@APIKey nvarchar(50) = null                      
          
 ,@RequestSourceType int = null                    
          
 ,@ReferenceNumber nvarchar(150)=null                  
          
 ,@UploadImagePath NVARCHAR(200) = NULL           
          
 ,@IsNotRequiredEmail bit=0           
          
 ,@ConsumerName NVARCHAR(200) =NULL              
 ,@BranchName NVARCHAR(150) =NULL            
 ,@Question1 nvarchar(1000)=NULL          
 ,@Question2 nvarchar(1000)=NULL          
AS                              
          
SET NOCOUNT ON                              
          
BEGIN TRANSACTION SaveECouponConfiguration                              
          
BEGIN TRY                              
          
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;                              
          
 SET @SPStatus = 0;                              
          
 SET @SPReturnMessage = '';                              
          
                              
          
 DECLARE @EserviceTypeID INTEGER                              
          
 DECLARE @EServiceBarcodeID BIGINT                              
          
 DECLARE @Points INTEGER                              
          
 DECLARE @SelectedAnswer INTEGER                              
          
 DECLARE @EServiceID INTEGER                              
          
 DECLARE @NotificationID INTEGER                              
          
 DECLARE @NotificationSendID INTEGER                              
          
 DECLARE @LanguageID INTEGER                              
          
 DECLARE @CompetitionName NVARCHAR(200)                              
          
 --DECLARE @ConsumerName NVARCHAR(100)                              
          
 --DECLARE @EligibleCoupons integer                                            
          
 DECLARE @Barcode NVARCHAR(100)                            
          
                               
          
                            
          
 DECLARE @SMSBody nvarchar(max)                            
          
 DECLARE @EmailBody nvarchar(max)            
       
                               
          
 DECLARE @TempBarcodeTable TABLE (                              
          
  Barcode NVARCHAR(100)                              
          
  ,EServiceBarcodeID INT                              
          
  ,NotificationID INT                              
          
  );                              
          
  if(@Mobile='')      
 set @Mobile=NULL      
 if(@Email='')      
 set @Email=NULL                             
          
 IF @ConsumerID = 0                              
          
  SET @ConsumerID = NULL                              
          
                              
          
 IF @GuestID = 0                              
          
  SET @GuestID = NULL                              
          
                              
          
 IF @RetailoutletID = 0                               
          
  set @RetailoutletID = null                              
          
                              
          
 if @RetailoutletID is not null          
          
 begin                              
          
  if not exists (select * from [dbo].[coc_ECouponOutlets](NOLOCK) where retailoutletid = @RetailoutletID and ecouponid = @EcouponID and isactive = 1)                              
          
  begin                  
          
   SET @ErrorMessage = 'Invalid Retail Outlet ID';                              
          
   SET @SPStatus = 1;                              
          
   SET @SPReturnMessage = @ErrorMessage;                              
          
   select * from @TempBarcodeTable;                              
          
   ROLLBACK TRANSACTION SaveECouponConfiguration;                                
          
   RETURN;                              
          
  end                              
          
 end                              
          
                    
          
 if not exists (select * from [dbo].[coc_ECoupons](NOLOCK) EC inner join [dbo].[coc_EServices] ES (NOLOCK) ON EC.eserviceid = ES.eserviceid                              
          
   where convert(date, getdate()) between convert(date, ES.FromDate)  and convert(date, ES.ToDate) and ES.isactive = 1 and EC.isactive =1 and EC.ECouponID=@EcouponID)                              
          
 begin                              
          
  SET @ErrorMessage = 'Competition Not active';                           
          
  SET @SPStatus = 1;                              
          
  SET @SPReturnMessage = @ErrorMessage;                              
          
  select * from @TempBarcodeTable;                              
          
  ROLLBACK TRANSACTION SaveECouponConfiguration;                                
          
  RETURN;                              
          
 end                             
          
  IF @Email IS NOT NULL or @Mobile IS NOT NULL          
    BEGIN             
       DECLARE @ParticipationsCount int   
     
       SELECT @ParticipationsCount = count(*)           
       FROM coc_ECouponParticipations(NOLOCK)           
       WHERE  (ParticipationEmailID= @Email  or ParticipationMobile=@Mobile )           
        AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                                  
        IF ( @ParticipationsCount >= 1)         
         BEGIN        
   SET @SPStatus = 1;                                    
              
   SET @SPReturnMessage = 'Already Participated with Same Mobile Or Email';                                    
              
   SET @SPReturnMessage = 'Already Participated with Same Mobile Or Email';                                    
              
   SET @ErrorMessage = 'Already Participated with Same Mobile Or Email';                                    
     
   --set date and time if user Already Participated    
 SELECT top 1  @ParticipationOnDateTime = ParticipationDate    FROM coc_ECouponParticipations(NOLOCK)     
      WHERE  (ParticipationEmailID= @Email  or ParticipationMobile=@Mobile )           
        AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)   
  
   select * from @TempBarcodeTable;                                    
              
   ROLLBACK TRANSACTION SaveECouponConfiguration;                                    
              
   RETURN;                                                
  END                                                
   END                    
          
                              
          
 print('@ConsumerID IS NULL   AND @GuestID IS NULL  ')                              
          
 print('@ConsumerID = '+ convert(varchar,@consumerid) )             
          
 print('@GuestID = '+ convert(varchar,@GuestID) )                     
          
                  
          
 IF (                              
          
   @ConsumerID IS NULL                              
          
   AND @GuestID IS NULL                              
          
  )                              
          
 BEGIN                              
          
  INSERT INTO coc_ECouponParticipationsInvalid (                              
          
   ECouponID                              
          
   ,ParticipationDate                              
          
   ,Barcode                              
          
   ,ParticipationMobile                              
          
   ,ParticipationEmailID                              
          
   ,ConsumerID                              
          
   ,Reason                              
          
   ,ConsumerName                              
          
   )                              
          
  SELECT @EcouponID                     
          
   ,GETDATE()                              
          
   ,@Barcode                              
          
   ,@Mobile                              
          
   ,@Email                              
          
   ,@ConsumerID             
          
   ,'P'                              
          
   ,@ConsumerName                              
          
                              
          
  SET @ErrorMessage = 'Barcode is Not There to Asign';                              
          
  SET @SPStatus = 1;                              
          
  SET @SPReturnMessage = @ErrorMessage;                              
          
  select * from @TempBarcodeTable;                              
          
  ROLLBACK TRANSACTION SaveECouponConfiguration;                                
          
  RETURN;                              
          
 END                              
          
                              
          
 IF @ConsumerID IS NOT NULL                              
          
 BEGIN                              
          
  IF @Email IS NULL                              
          
   SELECT @Email = EmailID                              
          
   FROM coc_Consumers(NOLOCK)                              
          
   WHERE ConsumerID = @ConsumerID                              
          
    AND IsActive = 1                              
          
    AND IsDeleted = 0                              
          
    AND IsVerified = 1                              
          
                              
          
  IF @ConsumerName IS NULL                              
          
   SELECT @ConsumerName = isnuLL(FirstName, '') + ' ' + isnull(SecondName, '') + ' ' + isnull(FamilyName, '')                              
          
   FROM coc_Consumers(NOLOCK)                              
          
   WHERE ConsumerID = @ConsumerID                              
          
    AND IsActive = 1                              
          
    AND IsDeleted = 0                              
          
    AND IsVerified = 1                              
          
                              
          
  IF @Mobile IS NULL            
          
   SELECT @Mobile = PrimaryMobile                              
          
   FROM coc_Consumers(NOLOCK)                              
          
   WHERE ConsumerID = @ConsumerID                              
          
    AND IsActive = 1                              
          
    AND IsDeleted = 0                              
          
    AND IsVerified = 1                              
          
 END                              
          
ELSE                              
          
 BEGIN                              
          
  IF @Email IS NULL                              
          
   SELECT @Email = EmailID                              
          
   FROM coc_Guests(NOLOCK)                              
          
   WHERE GuestID = @GuestID                      
          
    AND IsActive = 1                              
          
    AND IsVerified = 1                              
          
                              
          
  IF @ConsumerName IS NULL                              
          
   SELECT @ConsumerName = isnuLL(FullName, '')                              
          
   FROM coc_Guests(NOLOCK)                              
          
   WHERE GuestID = @GuestID                              
          
    AND IsActive = 1                              
          
    AND IsVerified = 1                              
          
                              
          
  IF @Mobile IS NULL                              
          
   SELECT @Mobile = PrimaryMobile                              
          
   FROM coc_Guests(NOLOCK)                 
          
   WHERE GuestID = @GuestID                              
          
    AND IsActive = 1                              
          
    AND IsVerified = 1                              
          
 END                              
          
                              
          
 IF @Mobile IS NULL                              
          
  OR len(@Mobile) <> 14                              
          
  OR SUBSTRING(@Mobile, 1, 6) <> '009665'                              
          
 BEGIN                              
          
  SET @ErrorMessage = 'InvalidMobile'   ;                  
          
  SET @SPReturnMessage = @ErrorMessage;                             
          
 END                              
          
 ELSE IF @Email IS NULL and @IsNotRequiredEmail=0                 
          
 BEGIN                              
          
  SET @ErrorMessage = 'InvalidEmail'   ;                  
          
  SET @SPReturnMessage = @ErrorMessage;                                 
          
 END                              
          
ELSE                              
          
 BEGIN                              
          
                                        
          
  DECLARE @Answers AS TABLE (                              
          
   ID INTEGER Identity(1, 1)                  
          
   ,QuestionBankID INTEGER                              
          
   ,QuestionOptionID INTEGER                              
          
   ,AnswerRank INTEGER                              
          
   ,AnswerValue VARCHAR(100)                              
          
   )                              
          
                              
          
  INSERT INTO @Answers (                              
          
   QuestionBankID                              
          
   ,QuestionOptionID                              
          
   ,AnswerRank                              
          
 ,AnswerValue                              
          
   )                              
          
  SELECT Answer.value('(QuestionID[1])', 'INTEGER')                              
          
   ,Answer.value('(AnswerID[1])', 'INTEGER')                              
          
   ,Answer.value('(AnswerRank[1])', 'INTEGER')                              
          
   ,Answer.value('(AnswerValue[1])', 'VARCHAR(100)')                              
          
  FROM @AnswersXML.nodes('/ECouponParticipation/Answers') AS Data(Answer)                  
          
                              
          
  UPDATE @Answers                              
          
  SET QuestionOptionID = NULL                              
          
  WHERE QuestionOptionID = 0                              
          
                                          
          
  SELECT @EServiceID = EServiceID                              
          
  FROM coc_ECoupons(NOLOCK)                              
          
  WHERE EcouponID = @EcouponID                              
          
                              
          
  DECLARE @errortext [Remark]                              
          
  DECLARE @return_value INT                              
          
                              
          
                                         
          
  PRINT @ConsumerId                              
          
  PRINT @EserviceId                              
          
  PRINT @errortext                              
          
                              
          
                                          
          
                                
          
                              
          
  DECLARE @NumberOfConsumerParticipations INT                              
          
  DECLARE @NumberOfGuestParticipations INT                              
          
  DECLARE @NumberOfParticipations INT                              
          
  DECLARE @LoyaltyPointSetupID INT = 103;                              
          
  DECLARE @AllowMultiple bit                              
          
  DECLARE @GeneralNotificationTemplateID INT                              
          
                              
          
  SELECT @EServiceID = EServiceID                              
          
   ,@NumberOfConsumerParticipations = ISNULL(NumberOfConsumerParticipations, 0)                              
          
   ,@NumberOfGuestParticipations = ISNULL(NumberOfGuestParticipations, 0)                              
          
   ,@NumberOfParticipations = ISNULL(participationCount, 0)                              
          
   ,@EserviceTypeID = EntryTypeID                              
          
   ,@AllowMultiple = MultipleParticipation                              
          
   ,@GeneralNotificationTemplateID = ParticipationNotificationTemplateID                              
          
  FROM coc_ECoupons(NOLOCK)                              
          
  WHERE ECouponID = @EcouponID                              
          
                              
          
  if(@AllowMultiple=0)                              
          
    set @NumberOfCopons = 1;                                      
                              
          
  if(isnull(@NumberOfParticipations,0)=0)                              
          
   set @NumberOfParticipations= 100                              
          
                              
          
           
          
 IF (                              
          
    @EserviceTypeID = 42                              
          
    OR @EserviceTypeID = 41                              
          
    )                              
          
  BEGIN                              
          
   DECLARE @Participations INT                              
          
   DECLARE @NoOfCoponsLeft INT;                              
          
                              
          
   IF @ConsumerID IS NOT NULL                              
          
   BEGIN                              
          
    SELECT @Participations = count(*) --, @NumberOfParticipations = @NumberOfConsumerParticipations                                             
          
    FROM coc_ECouponParticipations(NOLOCK) CP                              
          
    WHERE ConsumerID = @ConsumerID                              
          
     AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                            
          
                              
          
    IF (@NumberOfConsumerParticipations < (@NumberOfCopons + @Participations))                              
          
    BEGIN                              
          
     SET @NoOfCoponsLeft = @NumberOfConsumerParticipations - @Participations;                              
          
     SET @SPStatus = 1;                              
          
     SET @SPReturnMessage = 'Number of coupons exceeds Number of consumer participations count';                              
          
     SET @SPReturnMessage += ' you have only ' + convert(VARCHAR, @NoOfCoponsLeft) + ' coupons left';     
     
      SET @ErrorMessage = 'You Already Participated';     
     --set date and time if user Already Participated    
 SELECT top 1  @ParticipationOnDateTime = ParticipationDate    FROM coc_ECouponParticipations(NOLOCK)     
      WHERE  ConsumerID = @ConsumerID AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)     
          
     select * from @TempBarcodeTable;                              
          
     ROLLBACK TRANSACTION SaveECouponConfiguration;                              
          
     RETURN;                              
          
    END                              
          
   END    
          
  ELSE                              
          
   BEGIN                              
          
    SELECT @Participations = count(*) --, @NumberOfParticipations = @NumberOfGuestParticipations                                               
          
    FROM coc_ECouponParticipations(NOLOCK) CP                              
          
    WHERE GuestID = @GuestID                      
          
     AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                             
          
                              
          
    IF (@NumberOfGuestParticipations < (@NumberOfCopons + @Participations))                              
          
    BEGIN                              
          
     SET @NoOfCoponsLeft = @NumberOfGuestParticipations - @Participations;                              
          
     SET @SPStatus = 1;                              
          
     SET @SPReturnMessage = 'Number of coupons exceeds Number of guest participations count';                              
          
     SET @SPReturnMessage += ' you have only ' + convert(VARCHAR, @NoOfCoponsLeft) + ' coupons left';                 
          
     SET @ErrorMessage = 'You Already Participated';   
    
       --set date and time if user Already Participated    
 SELECT top 1  @ParticipationOnDateTime = ParticipationDate    FROM coc_ECouponParticipations(NOLOCK)     
      WHERE   GuestID = @GuestID              
        AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)   
          
     select * from @TempBarcodeTable;                              
          
     ROLLBACK TRANSACTION SaveECouponConfiguration;                                   
          
     RETURN;                                  
    END                              
          
   END                                
          
                              
          
   IF ISNULL(@Participations, 0) < @NumberOfParticipations                              
          
   BEGIN                              
          
                       
          
    select @NotificationID = NotificationID from coc_notifications(NOLOCK) where eserviceid = @EServiceID                               
          
                              
          
    INSERT INTO @TempBarcodeTable (                              
          
     Barcode                            
          
     ,EServiceBarcodeID                             
          
     ,NotificationID                              
          
     )                              
          
    SELECT TOP (@NumberOfCopons)                               
          
     Barcode                              
          
     ,EServiceBarcodeID                              
          
     ,NotificationID                              
          
    FROM coc_EServiceBarcodes(NOLOCK) --WITH(XLOCK, ROWLOCK)                              
          
    WHERE                              
          
     Notificationid = @NotificationID                               
          
     AND IsUsed = 0                              
          
     AND AsignedMoile IS NULL                              
          
    ORDER BY EServiceBarcodeID                              
          
                      
          
 set @Barcode =(select top 1 Barcode from @TempBarcodeTable)                          
          
    --WAITFOR DELAY '00:00:4';                              
          
       print('barcode = ' +@Barcode )                             
          
    IF @ConsumerID IS NOT NULL                              
          
    BEGIN                              
          
                                  
          
       EXEC AddCustomerLoyaltyPoints                               
          
        @EcouponID,                              
          
        @ConsumerID,                              
          
        @LoyaltyPointSetupID,                              
          
@ErrorMessage OUTPUT                                  
          
                                  
          
    END                              
          
                              
          
  Declare @UsedByAPI bit;                      
          
  if(@APIKey is not null)                      
          
   set @UsedByAPI = 1;                      
          
                      
          
    UPDATE EB                              
          
    SET ConsumerID = @ConsumerID                              
          
     ,AsignedMoile = @Mobile                              
          
     ,IsUsed = 1                       
          
     ,UsedDate = GETDATE()                       
          
     ,GuestID = @GuestID                            
          
  ,UsedByAPI=@UsedByAPI                          
          
  ,RetailoutletID=@RetailoutletID                          
          
     ,APIKey=@APIKey                          
          
    FROM coc_EServiceBarcodes(NOLOCK) EB                
          
    WHERE EServiceBarcodeID IN (                              
          
      SELECT EServiceBarcodeID                              
          
      FROM @TempBarcodeTable                              
          
      )        and IsUsed= 0     AND AsignedMoile IS NULL                     
          
                     
          
           if @@ROWCOUNT <> @NumberOfCopons          
          
   begin                              
          
     SET @ErrorMessage = 'Transaction Error';                              
          
     SET @SPStatus = 1;                              
          
     SET @SPReturnMessage = @ErrorMessage;                              
          
     select * from @TempBarcodeTable;                              
          
     ROLLBACK TRANSACTION SaveECouponConfiguration;                                
          
     RETURN;                              
          
    end                                
          
    IF (ISNULL(@Barcode, '0') != '0') OR EXISTS ( SELECT *FROM @TempBarcodeTable)                   
          
 BEGIN                              
          
     DECLARE @ECouponParticipationID BIGINT                              
          
                              
          
     INSERT INTO coc_ECouponParticipations (                              
          
      ECouponID                              
          
      ,ParticipationDate                              
          
      ,Barcode                              
          
,ParticipationMobile                              
          
      ,ParticipationEmailID                              
          
      ,ConsumerID                              
          
      ,GuestID                              
          
      ,ConsumerName                              
          
      ,RetailoutletID                       
          
   ,RequestSourceType                    
          
   ,ReferenceNumber                
          
   ,UploadImagePath          
          
   ,IsFromCompetitionLink                           
   ,BranchName          
   ,Question1          
   ,Question2          
   )                              
          
     SELECT @EcouponID                              
          
      ,GETDATE()                              
          
      ,Barcode                              
          
      ,@Mobile                              
          
      ,@Email                              
          
      ,@ConsumerID                              
          
      ,@GuestID                              
          
      ,@ConsumerName                              
          
      ,@RetailoutletID                    
          
   ,@RequestSourceType                     
          
   ,@ReferenceNumber                  
          
   ,@UploadImagePath               
          
   ,1                  
   ,@BranchName          
   ,@Question1          
   ,@Question2          
     FROM @TempBarcodeTable                              
          
                              
          
     --SELECT @NotificationSendID = NotificationSendID                              
          
     --FROM coc_NotificationSends(NOLOCK)                              
          
     --WHERE NotificationID = @NotificationID                              
          
                              
          
     SELECT @ECouponParticipationID = SCOPE_IDENTITY()                              
          
                              
          
     DECLARE @ID INTEGER                              
          
     DECLARE @QuestionBankID INTEGER                              
          
     DECLARE @QuestionOptionID INTEGER                              
          
     DECLARE @AnswerRank INTEGER                         
          
     DECLARE @AnswerValue VARCHAR(100)                              
          
                              
          
     --@Answers (ID, QuestionBankID, QuestionOptionID, AnswerRank)                                              
          
     SELECT TOP 1 @ID = ID                              
          
      ,@QuestionBankID = QuestionBankID                              
          
      ,@QuestionOptionID = QuestionOptionID                              
          
      ,@AnswerRank = AnswerRank                              
          
      ,@AnswerValue = AnswerValue                              
          
     FROM @Answers                              
          
                              
          
     DECLARE @ActiveID INTEGER                              
          
                              
          
     WHILE @ID IS NOT NULL                         
          
      AND @ID <> ISNULL(@ActiveID, 0)                              
          
     BEGIN                              
          
      SET @ActiveID = @ID                              
          
                              
          
      INSERT INTO coc_ECouponParticipationAnswers (                              
          
       QuestionBankID                              
          
       ,QuestionOptionID                              
          
       ,AnswerRank                              
          
       ,ECouponParticipationID                              
          
       ,AnswerValue                              
          
       )                           
          
      VALUES (             
          
       @QuestionBankID                
          
       ,@QuestionOptionID                              
          
       ,@AnswerRank                              
          
       ,@ECouponParticipationID                              
          
       ,@AnswerValue                            
          
   )                              
          
                              
          
      SELECT TOP 1 @ID = ID                              
          
       ,@QuestionBankID = QuestionBankID                              
          
       ,@QuestionOptionID = QuestionOptionID                              
          
       ,@AnswerRank = AnswerRank                              
          
       ,@AnswerValue = AnswerValue                              
          
      FROM @Answers                              
          
      WHERE ID > @ActiveID                              
          
     END                              
          
                              
          
     IF @ConsumerID IS NOT NULL                              
          
     BEGIN                              
          
                               
          
      SELECT @EServiceBarcodeID = null                              
          
      SELECT *                              
          
       FROM @TempBarcodeTable order by EServiceBarcodeID ASC                              
          
      SELECT top 1 @EServiceBarcodeID = EServiceBarcodeID                              
          
       ,@Barcode = Barcode                              
          
      FROM @TempBarcodeTable order by EServiceBarcodeID ASC                              
          
      print '@EServiceBarcodeID: '+convert(varchar,@EServiceBarcodeID)                              
          
      WHILE @EServiceBarcodeID IS NOT NULL AND @EServiceBarcodeID <> ISNULL(@ActiveID, 0)                              
          
      BEGIN                              
          
       SET @ActiveID = @EServiceBarcodeID                              
          
                     
          
                                
          
                                  
          
       EXEC SaveNotificationSending                              
          
          @NotificationID                              
          
         ,@EcouponID                              
          
         ,@ConsumerID                              
          
         ,@GeneralNotificationTemplateID                              
          
         ,@EServiceID                              
          
         ,@Barcode                              
          
         ,@ErrorMessage OUTPUT                              
          
       SELECT top 1 @EServiceBarcodeID = EServiceBarcodeID                              
          
        ,@Barcode = Barcode                              
          
       FROM @TempBarcodeTable                               
          
       WHERE EServiceBarcodeID > @ActiveID                              
          
       order by EServiceBarcodeID ASC                              
          
      END                             
          
     END                              
          
     SET @ParticipationBarcode = @Barcode;                              
          
     SELECT Barcode                              
          
      ,EServiceBarcodeID                              
          
      ,NotificationID                              
          
     FROM @TempBarcodeTable                              
          
     SET @ErrorMessage = ''                              
          
    END                              
          
    ELSE                              
          
    BEGIN                              
          
     SET @ErrorMessage = 'Barcode is Not There to Asign'                              
          
     SET @SPStatus = 1;                        
          
     SET @SPReturnMessage = @ErrorMessage;                              
          
     select * from @TempBarcodeTable;                              
          
    END                              
          
   END                              
          
 ELSE                              
          
   BEGIN                              
          
    INSERT INTO coc_ECouponParticipationsInvalid (                              
          
     ECouponID                              
          
     ,ParticipationDate                              
          
     ,Barcode                              
          
     ,ParticipationMobile                              
          
     ,ParticipationEmailID                              
          
     ,ConsumerID                        
          
     ,Reason                              
          
     ,ConsumerName     
          
     )                              
          
    SELECT @EcouponID                              
          
     ,GETDATE()                              
          
     ,Barcode                              
          
     ,@Mobile                              
          
     ,@Email                              
          
     ,@ConsumerID                              
          
     ,'P'                              
          
     ,@ConsumerName                              
          
    FROM @TempBarcodeTable                              
          
    select * from @TempBarcodeTable;             
          
    --set date and time if user Already Participated    
 SELECT top 1  @ParticipationOnDateTime = ParticipationDate    FROM coc_ECouponParticipations(NOLOCK)     
      WHERE  (ParticipationEmailID= @Email  or ParticipationMobile=@Mobile )           
        AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)    
  
    SET @ErrorMessage = 'You Already Participated';  
          
    SET @SPStatus = 1;                              
          
    SET @SPReturnMessage = @ErrorMessage;                              
          
   END                              
          
  END                              
          
 ELSE -- else entrytypeid not in 41 or 42                              
          
  BEGIN                              
          
   select * from @TempBarcodeTable;                              
          
   SET @ErrorMessage = 'Invalid Competition Type'                              
          
   SET @SPStatus = 1;                              
          
   SET @SPReturnMessage = @ErrorMessage;                          
          
  END                              
          
                              
          
  IF (ISNULL(@ErrorMessage, '') <> '')                              
          
  BEGIN                              
          
   IF @ConsumerID IS NOT NULL                              
          
   BEGIN                  -------------------------------------------------------------------//                                         
          
    --//-------------------------------------------------------                                            
          
    DECLARE @return_value1 INT                              
          
                              
          
    EXEC @return_value1 = [dbo].[SaveEServiceAddOnConsumers] @ConsumerID = @ConsumerID                              
          
     ,@EServiceID = @EServiceID                              
          
                              
          
    PRINT '@return_value1'                              
          
    PRINT @return_value1                              
          
                              
          
    --------------------------------------------------------------------//                                            
          
    SET XACT_ABORT ON;                              
          
   END                              
          
  END                              
          
                              
          
  SELECT @ErrorMessage                              
          
                              
          
                            
          
 END                              
          
                     
          
                            
          
 COMMIT TRANSACTION SaveECouponConfiguration                              
          
END TRY                              
          
                              
          
BEGIN CATCH                              
          
 ROLLBACK TRANSACTION SaveECouponConfiguration                              
          
                              
          
 SELECT @ErrorMessage = ERROR_MESSAGE()                              
          
                              
          
 SET @SPStatus = 1;                              
          
 SET @SPReturnMessage = @ErrorMessage;                              
          
                              
          
 RAISERROR (            
          
   @ErrorMessage                              
          
   ,16                              
          
   ,1                              
          
   );                              
          
END CATCH                              
          
                              
          
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveECouponParticipationWithAnswers]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveECouponParticipationWithAnswers]
	@EcouponID INTEGER,
	@ConsumerID INTEGER,
	@Mobile [Mobile]=NULL,
	@Email [Email]=NULL,
	@AnswersXML XML,
	@ParticipationBarcode nvarchar(100)=NULL OUTPUT,
	@ErrorMessage [Remark]=NULL OUTPUT
AS
	SET NOCOUNT ON 
	BEGIN TRY 
		DECLARE @EserviceTypeID INTEGER
		DECLARE @EServiceBarcodeID INTEGER
		DECLARE @Points INTEGER
		DECLARE @SelectedAnswer INTEGER
		DECLARE @EServiceID INTEGER
		DECLARE @NotificationID INTEGER
		DECLARE @NotificationSendID INTEGER
		DECLARE @LanguageID INTEGER
		DECLARE @CompetitionName nvarchar(200)
		--DECLARE @EligibleCoupons integer
		DECLARE @Barcode nvarchar(100)

		if @Email IS NULL
			select @Email = EmailID from coc_Consumers(NOLOCK) where ConsumerID = @ConsumerID

		if @Mobile IS NULL
			select @Mobile = PrimaryMobile from coc_Consumers(NOLOCK) where ConsumerID = @ConsumerID

		if @Mobile IS NULL or len(@Mobile) <> 14 or SUBSTRING(@Mobile,1,6) <> '009665'
		BEGIN
			SET @ErrorMessage='InvalidMobile'
		END
		else
		if @Email IS NULL 
		BEGIN
			SET @ErrorMessage='InvalidEmail'
		END
		else
		BEGIN

			--IF(ISNULL(@EligibleCoupons,0)=0)
			--	SET @EligibleCoupons=1

			DECLARE @Answers AS TABLE 
					(
					ID INTEGER Identity(1,1),
					QuestionBankID INTEGER,
					QuestionOptionID INTEGER,
					AnswerRank INTEGER
					)
			INSERT INTO @Answers (QuestionBankID, QuestionOptionID, AnswerRank)  
			SELECT Answer.value('(QuestionID[1])','INTEGER'), 
						Answer.value('(AnswerID[1])','INTEGER'),
						Answer.value('(AnswerRank[1])','INTEGER') FROM @AnswersXML.nodes('/ECouponParticipation/Answers') AS Data(Answer)

			--DECLARE @BarCodes TABLE
			--( 
			--	EServiceBarcodeID INTEGER,
			--	AsignedMoile [Mobile],
			--	Barcode [NullDescription],
			--	NotificationID INTEGER,
			--	IsUsed BIT
			--)

			--//----------------------------------------------------------------
			SELECT @EServiceID = EServiceID FROM coc_ECoupons(NOLOCK) WHERE EcouponID = @EcouponID
			DECLARE @errortext [Remark]
			DECLARE	@return_value int
			--EXEC	@return_value = [dbo].[ValidateConsumerForECouponVoucher]
			--@ConsumerId = @ConsumerID,
			--@EserviceId = @EServiceID,
			--@errortext = @errortext OUTPUT

			print @ConsumerId
			print @EserviceId
			print @errortext

			IF( @errortext != '0' )
			BEGIN
				SET @ErrorMessage = @errortext
				SELECT @ErrorMessage
				Return
			END
		
	-------------------------------------------------------------------//
	--//-------------------------------------------------------
			DECLARE	@return_value1 int
			EXEC	@return_value1 = [dbo].[SaveEServiceAddOnConsumers]
			@ConsumerID = @ConsumerID,
			@EServiceID = @EServiceID
			print '@return_value1'
			print @return_value1
	--------------------------------------------------------------------//
			SET XACT_ABORT ON;
			BEGIN TRANSACTION SaveECouponConfiguration
		
			declare @NumberOfConsumerParticipations int

			SELECT @EServiceID=EServiceID, 
					@NumberOfConsumerParticipations = ISNULL(NumberOfConsumerParticipations,0),
					@EserviceTypeID = EntryTypeID
				FROM coc_ECoupons(NOLOCK) WHERE ECouponID=@EcouponID
			IF(@EserviceTypeID=45)
			BEGIN
				SELECT @Points=SetupValue FROM coc_LoyaltyPointSetups(NOLOCK) WHERE LoyaltyPointSetupID=103

				
				DECLARE @Participations int
				select @Participations = count(*) from coc_ECouponParticipations (NOLOCK)CP where 
					ConsumerID = @ConsumerID and ECouponID = @EcouponID
				
				SELECT TOP 1 @EServiceBarcodeID=EServiceBarcodeID,@Barcode=Barcode ,@NotificationID=NT.NotificationID
					FROM coc_EServiceBarcodes EB(NOLOCK)
						INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID=NT.NotificationID AND NT.EServiceID =@EServiceID
					WHERE IsUsed=0 AND EB.AsignedMoile IS NULL 
						ORDER BY EServiceBarcodeID

				-- *****TEMP ONLY******
				if @ConsumerID = 13 or @ConsumerID = 31
				select @Participations =  0

				if ISNULL(@Participations,0) = 0
				BEGIN
			
					IF NOT EXISTS(SELECT 1 FROM coc_ConsumerPointDetails (NOLOCK) CP WHERE CP.ConsumerID=@ConsumerID AND CP.ECouponID=@EcouponID)
					BEGIN
						UPDATE coc_Consumers SET LoyaltyPoint=LoyaltyPoint+@Points WHERE ConsumerID = @ConsumerID 
						INSERT INTO coc_ConsumerPointDetails(ConsumerID,PointDate,PointSource,LoyaltyPoint,RedeemPoint,ECouponID)
							SELECT @ConsumerID,GETDATE(),103,@Points,0,@EcouponID
					
						--INSERT INTO @BarCodes(EServiceBarcodeID,AsignedMoile,Barcode,NotificationID,IsUsed)
						--	SELECT TOP (@EligibleCoupons) BC.EServiceBarcodeID,@Mobile,BC.Barcode,BC.NotificationID,1 
						--		FROM coc_EServiceBarcodes(NOLOCK)BC 
						--		WHERE BC.IsUsed=0
					END
					--SELECT TOP(1) @EServiceBarcodeID=EServiceBarcodeID FROM coc_EServiceBarcodes(NOLOCK) WHERE Barcode=@BarCode	AND NotificationID=@NotificationID
					UPDATE EB
						SET ConsumerID=@ConsumerID,AsignedMoile=@Mobile,IsUsed=1,UsedDate=GETDATE()
							FROM coc_EServiceBarcodes(NOLOCK) EB
						WHERE EServiceBarcodeID=@EServiceBarcodeID and IsUsed= 0

					IF(ISNULL(@Barcode,'0') != '0' and @@ROWCOUNT= 1)
					BEGIN 
						 
						Declare @ECouponParticipationID bigint
						INSERT INTO coc_ECouponParticipations(ECouponID,ParticipationDate,Barcode,ParticipationMobile,ParticipationEmailID,ConsumerID)
							SELECT @EcouponID,GETDATE(),@Barcode,@Mobile,@Email,@ConsumerID 
						SELECT @NotificationSendID=NotificationSendID FROM coc_NotificationSends(NOLOCK) WHERE NotificationID=@NotificationID
						SELECT @ECouponParticipationID = SCOPE_IDENTITY()

						DECLARE @ID Integer
						DECLARE @QuestionBankID Integer
						DECLARE @QuestionOptionID Integer
						DECLARE @AnswerRank integer


						--@Answers (ID, QuestionBankID, QuestionOptionID, AnswerRank)  
						SELECT top 1 @ID = ID, @QuestionBankID= QuestionBankID, @QuestionOptionID = QuestionOptionID, 
								@AnswerRank = AnswerRank  FROM @Answers
						DECLARE @ActiveID integer 
						WHILE @ID IS NOT NULL and @ID <> ISNULL(@ActiveID,0)
						BEGIN
							SET @ActiveID = @ID
							INSERT INTO coc_ECouponParticipationAnswers (QuestionBankID, QuestionOptionID , AnswerRank, ECouponParticipationID)
								VALUES
									(@QuestionBankID, @QuestionOptionID, @AnswerRank, @ECouponParticipationID)

							SELECT top 1 @ID = ID, @QuestionBankID= QuestionBankID, @QuestionOptionID = QuestionOptionID, 
								@AnswerRank = AnswerRank  FROM @Answers where ID > @ActiveID
						END

						IF (ISNULL(@NotificationSendID,0) > 0) AND (NOT EXISTS (SELECT NULL FROM coc_NotificationSendLanguages(NOLOCK) WHERE NotificationSendID = @NotificationSendID)) 
						BEGIN
							INSERT INTO coc_ConsumerNotifications(NotificationSendID,ConsumerID,SendDate,HasChecked)
								SELECT @NotificationSendID,@ConsumerID,GETDATE(),0

							SELECT top 1 @LanguageID = L.LanguageID, @CompetitionName= EL.EService FROM coc_Languages(NOLOCK) L INNER JOIN coc_EServiceLanguages  EL(NOLOCK) ON EL.LanguageID= L.LanguageID
								WHERE EL.EServiceID= @EServiceID order by L.LanguageID
							WHILE @LanguageID IS NOT NULL
							BEGIN
								INSERT INTO coc_NotificationSendLanguages(NotificationSendID,LanguageID,Subject,Message)
									SELECT @NotificationSendID,@LanguageID,'Congratulations',N'Your Barcode for '+@CompetitionName +N' is :~'+@Barcode
								--SELECT @LanguageID=MIN(LanguageID) FROM coc_Languages(NOLOCK) WHERE LanguageID>@LanguageID
								SELECT @LanguageID=MIN(LanguageID) FROM coc_EServiceLanguages(NOLOCK) WHERE LanguageID>@LanguageID and EServiceID= @EServiceID 
								SELECT top 1 @CompetitionName= ISNULL(EL.EService,'') FROM coc_EServiceLanguages  EL (NOLOCK)
									WHERE EL.LanguageID = @LanguageID and EL.EServiceID= @EServiceID order by EL.LanguageID
							END
						END
						ELSE BEGIN 
							INSERT INTO coc_NotificationSends(NotificationID,SendingDate,SendingType,SearchCount,NotificationCount)
								SELECT @NotificationID,GETDATE(),4,0,0
							SET @NotificationSendID = SCOPE_IDENTITY()
							INSERT INTO coc_ConsumerNotifications(NotificationSendID,ConsumerID,SendDate,HasChecked)
								SELECT @NotificationSendID,@ConsumerID,GETDATE(),0 
							
							SELECT top 1 @LanguageID = L.LanguageID, @CompetitionName= EL.EService FROM coc_Languages(NOLOCK) L INNER JOIN coc_EServiceLanguages  EL ON EL.LanguageID= L.LanguageID
								WHERE EL.EServiceID= @EServiceID order by L.LanguageID
							WHILE @LanguageID IS NOT NULL
							BEGIN
								INSERT INTO coc_NotificationSendLanguages(NotificationSendID,LanguageID,Subject,Message)
									SELECT @NotificationSendID,@LanguageID,'Congratulations',N'Your Barcode for '+@CompetitionName +N' is :~'+@Barcode
								--SELECT @LanguageID=MIN(LanguageID) FROM coc_Languages(NOLOCK) WHERE LanguageID>@LanguageID
								SELECT @LanguageID=MIN(LanguageID) FROM coc_EServiceLanguages(NOLOCK) WHERE LanguageID>@LanguageID and EServiceID= @EServiceID 
								SELECT top 1 @CompetitionName= ISNULL(EL.EService,'') FROM coc_EServiceLanguages  EL (NOLOCK)
									WHERE EL.LanguageID = @LanguageID and EL.EServiceID= @EServiceID order by EL.LanguageID
							END
						END
						SET @ParticipationBarcode = @Barcode
						SET @ErrorMessage='' 
					END
					ELSE BEGIN
						SET @ErrorMessage='Barcode is Not There to Asign'
					END
					
				
				END
				ELSE
				BEGIN
					INSERT INTO coc_ECouponParticipationsInvalid(ECouponID,ParticipationDate,Barcode,ParticipationMobile,ParticipationEmailID,ConsumerID, Reason)
									SELECT @EcouponID,GETDATE(),@Barcode,@Mobile,@Email,@ConsumerID, 'P'

					SET @ErrorMessage='YouAlreadyParticipated'
				END
			END
			else
			BEGIN
				SET @ErrorMessage='Invalid Competition Type'
			END
		
			SELECT @ErrorMessage
			COMMIT TRANSACTION SaveECouponConfiguration
		END
	END TRY
	BEGIN CATCH		
		ROLLBACK TRANSACTION SaveECouponConfiguration							
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);			
	END CATCH
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveECouponPrizeConfig]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveECouponPrizeConfig]
	@ECouponID INTEGER,
	@ECouponPrizeXml XML=NULL
	,@PrizeID INTEGER = 0
	,@ReturnValue [Remark] OUTPUT
AS
BEGIN
	SET NOCOUNT ON
	declare @EcouponPrizeId int;	
		BEGIN
			DECLARE @ECouponPrizes TABLE
			( 					
				PrizeDetailEng [Description],
				PrizeDetailAr [Description],
				NameEnglish [Description],
				NameArabic [Description], 
				PrizeCount INTEGER,
				ImageFile [NullDescription]
					
			)
			INSERT INTO @ECouponPrizes(PrizeDetailEng,PrizeDetailAr,NameEnglish,NameArabic,PrizeCount,ImageFile)
				SELECT 
					ecouponPrize.value('(PrizeDetailEng[1])', '[Description]'),
					ecouponPrize.value('(PrizeDetailAr[1])', '[Description]'),
					ecouponPrize.value('(NameEnglish[1])', '[Description]'),
					ecouponPrize.value('(NameArabic[1])', '[Description]'),
					ecouponPrize.value('(PrizeCount[1])', 'INTEGER'),
					ecouponPrize.value('(ImageFile[1])', '[NullDescription]')						  
				FROM @ECouponPrizeXml.nodes('/ECoupon/Prize') AS Data(ecouponPrize)

				if(@PrizeID > 0)
					begin
						UPDATE coc_ECouponPrizes SET ECouponID=@ECouponID,PrizeCount=EP.PrizeCount,ImageFile=EP.ImageFile 
						FROM @ECouponPrizes EP WHERE ECouponPrizeID = @PrizeID						
							
						UPDATE coc_ECouponPrizesLanguages SET Value = EP.NameEnglish FROM @ECouponPrizes EP 
						WHERE ECouponPrizeID = @PrizeID	AND ResourceKey='Name' AND LanguageID = 1

						UPDATE coc_ECouponPrizesLanguages SET Value = EP.NameArabic FROM @ECouponPrizes EP 
						WHERE ECouponPrizeID = @PrizeID	AND ResourceKey='Name' AND LanguageID = 2

						UPDATE coc_ECouponPrizesLanguages SET Value = EP.PrizeDetailEng FROM @ECouponPrizes EP 
						WHERE ECouponPrizeID = @PrizeID	AND ResourceKey='PrizeDetail' AND LanguageID = 1
							
						UPDATE coc_ECouponPrizesLanguages SET Value = EP.PrizeDetailAr FROM @ECouponPrizes EP 
						WHERE ECouponPrizeID = @PrizeID	AND ResourceKey='PrizeDetail' AND LanguageID = 2

						SET @ReturnValue = @PrizeID
					end
				else
					begin
						INSERT INTO coc_ECouponPrizes(ECouponID,PrizeCount,ImageFile)
						SELECT @ECouponID,EP.PrizeCount,EP.ImageFile 
						FROM @ECouponPrizes EP
						SET @EcouponPrizeId=SCOPE_IDENTITY()

						INSERT INTO coc_ECouponPrizesLanguages(ECouponPrizeID,ResourceKey,Value,LanguageID)
						SELECT @EcouponPrizeId,'Name',EP.NameEnglish,1 
						FROM @ECouponPrizes EP
						
						INSERT INTO coc_ECouponPrizesLanguages(ECouponPrizeID,ResourceKey,Value,LanguageID)
						SELECT @EcouponPrizeId,'Name',EP.NameArabic,2 
						FROM @ECouponPrizes EP

						INSERT INTO coc_ECouponPrizesLanguages(ECouponPrizeID,ResourceKey,Value,LanguageID)
						SELECT @EcouponPrizeId,'PrizeDetail',EP.PrizeDetailEng,1 
						FROM @ECouponPrizes EP
						
						INSERT INTO coc_ECouponPrizesLanguages(ECouponPrizeID,ResourceKey,Value,LanguageID)
						SELECT @EcouponPrizeId,'PrizeDetail',EP.PrizeDetailAr,2 
						FROM @ECouponPrizes EP

						SET @ReturnValue = @EcouponPrizeId
					end						
			END
	SET NOCOUNT OFF
END

GO
/****** Object:  StoredProcedure [dbo].[SaveECouponPurchase]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveECouponPurchase]
	@DetailXML XML,
	@ConsumerID INTEGER,
	@EcouponID INTEGER,
	@ErrorMessage [Remark] OUTPUT 
AS
	SET NOCOUNT ON 
	BEGIN TRY 
		DECLARE @Counter INTEGER
		DECLARE @TotalCount INTEGER
		DECLARE @EServiceID INTEGER
		DECLARE @QuestionOptionID INTEGER
		DECLARE @SelectedAnswer INTEGER
		DECLARE @Barcode [NullCode]
		DECLARE @Mobile [Mobile]
		DECLARE @Email [Email]
		DECLARE @NotificationID INTEGER
		DECLARE @Points INTEGER
		DECLARE @EcouponTypeID INTEGER

		SET @ErrorMessage=''
		SELECT @EcouponTypeID=EntryTypeID, @EServiceID=EServiceID,@TotalCount=QuestionCount FROM coc_ECoupons(NOLOCK) WHERE ECouponID=@EcouponID
		SELECT @Mobile =PrimaryMobile,@Email=EmailID FROM coc_Consumers (NOLOCK) WHERE ConsumerID = @ConsumerID

--//----------------------------------------------------------------
		
		DECLARE @errortext [Remark]
		DECLARE	@return_value int
		EXEC	@return_value = [dbo].[ValidateConsumerForECouponVoucher]
		@ConsumerId = @ConsumerID,
		@EserviceId = @EServiceID,
		@errortext = @errortext OUTPUT

		IF( @errortext != '0' )
		BEGIN
			SET @ErrorMessage = @errortext
			SELECT @ErrorMessage
			Return
		END
		
-------------------------------------------------------------------//


		DECLARE @ECouponPurchase AS TABLE 
		(
			ServiceID INTEGER,
			QuestionBankID	INTEGER,
			SelectedAnswer	INTEGER 
		)
		
		INSERT INTO @ECouponPurchase(ServiceID,QuestionBankID,SelectedAnswer)
			SELECT Details.value('(ServiceID[1])', 'INTEGER'),
			Details.value('(QuestionBankID[1])', 'INTEGER'),
			Details.value('(SelectedAnswer[1])', 'INTEGER') 
				FROM @DetailXML.nodes('/ResultXML/Answer') AS ECoupons(Details);

		SELECT @Counter=MIN(QuestionBankID) FROM @ECouponPurchase
		WHILE @Counter>0
		BEGIN
			SELECT @QuestionOptionID=QuestionOptionID FROM coc_QuestionOptions(NOLOCK) WHERE QuestionBankID=@Counter
			SELECT @SelectedAnswer=SelectedAnswer FROM @ECouponPurchase WHERE QuestionBankID=@Counter

			IF(@QuestionOptionID = @SelectedAnswer)
			 SET @TotalCount=@TotalCount-1
			
			SELECT @Counter=MIN(QuestionBankID) FROM @ECouponPurchase WHERE QuestionBankID>@Counter
		END

		IF(@TotalCount=0 AND @EcouponTypeID = 42)
		BEGIN
			SELECT TOP 1 @Barcode=Barcode ,@NotificationID=NT.NotificationID
				FROM coc_EServiceBarcodes EB(NOLOCK)
					INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID=NT.NotificationID AND NT.EServiceID =@EServiceID
				WHERE IsUsed=0 ORDER BY EServiceBarcodeID
				
			SELECT @Points=SetupValue FROM coc_LoyaltyPointSetups(NOLOCK) WHERE LoyaltyPointSetupID=103
						
			UPDATE EB
				SET ConsumerID=@ConsumerID,AsignedMoile=@Mobile,IsUsed=1,UsedDate=GETDATE()
					FROM coc_EServiceBarcodes EB
				WHERE Barcode=@Barcode AND EB.NotificationID=@NotificationID

			UPDATE coc_Consumers SET LoyaltyPoint=LoyaltyPoint+@Points WHERE ConsumerID = @ConsumerID

			INSERT INTO coc_ConsumerPointDetails
				SELECT @ConsumerID,GETDATE(),0,@Points,0,@EcouponID

			INSERT INTO coc_ECouponParticipations(ECouponID,ParticipationDate,Barcode,ParticipationMobile,ParticipationEmailID,ConsumerID)
				SELECT @EcouponID,GETDATE(),@Barcode,@Mobile,@Email,@ConsumerID
			
			SET @ErrorMessage=''
		END
		ELSE
		BEGIN
			SET @ErrorMessage='Error Occurred..'
		END
		SELECT @ErrorMessage
	END TRY
	BEGIN CATCH									
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);			
	END CATCH
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveECouponPurchases]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveECouponPurchases]                                     
 @Barcode [NullDescription] = NULL                                    
 ,@EcouponID INTEGER                                    
 ,@ConsumerID INTEGER  = null                                  
 ,@GuestID int = null                                  
 ,@Mobile [Mobile] = NULL                                    
 ,@Email [Email] = NULL                                    
 ,@EligibleCoupons INTEGER = NULL                                    
 ,@WrongAnswer INTEGER = NULL                                    
 ,@ErrorMessage [Remark] = NULL OUTPUT,              
  @ParticipantsEServiceID int = null,                 
  @DeviceSource nvarchar(200) = null,                
  @MacAddress nvarchar(200) = null,                
  @ConsumerLatitude nvarchar(200) = null,                
  @ConsumerLongitude nvarchar(200) = null,                 
  @ClosestRetailoutletID int = null ,              
  @EnteredBarcode [NullDescription] = NULL ,    
  @ParticipationBarcode [Remark] = NULL OUTPUT    
AS                                  
SET XACT_ABORT ON;                                     
BEGIN                                    
                                    
  if(@ConsumerID = 0)                                  
    set @ConsumerID = null;                                  
   if(@GuestID = 0)                                  
    set @GuestID = null                                  
   DECLARE @NumberOfConsumerParticipations_N INT                                                
   DECLARE @NumberOfGuestParticipations_N INT                                   
   DECLARE @Participations_N INT                                                
   DECLARE @NoOfCoponsLeft INT;                                     
   DECLARE @NumberOfCopons INT;                                  
   set @NumberOfCopons = 1;                                  
                            
                        
   if(@EcouponID=10255)                        
   begin                        
      SET @ErrorMessage = 'CoronaMSG';                                  
      RETURN;                           
   end                        
                         
                        
   if(@EcouponID=10184 and                         
   (LEFT(@Mobile, 5)='00966'                         
   OR LEFT((select PrimaryMobile from coc_Consumers(NOLOCK) where ConsumerID=@ConsumerID),5)='00966'                        
   OR LEFT((select PrimaryMobile from coc_Guests(NOLOCK) where GuestID=@GuestID),5)='00966'))                        
   begin                        
      SET @ErrorMessage = 'AttentionMSG';                                  
      RETURN;                           
   end                        
                        
   IF @ConsumerID IS NOT NULL                                                
   BEGIN   
   Declare @_APIParticipationCount int;
   SELECT @NumberOfConsumerParticipations_N = ISNULL(NumberOfConsumerParticipations, 0),@_APIParticipationCount=IsNull(APIParticipationCount,0) FROM coc_ECoupons(NOLOCK)  WHERE ECouponID = @EcouponID                                   
    SELECT @Participations_N = count(*) FROM coc_ECouponParticipations(NOLOCK) CP WHERE ConsumerID = @ConsumerID  AND ECouponID = @EcouponID                                                              
    IF (@NumberOfConsumerParticipations_N < (@NumberOfCopons + @Participations_N) and @_APIParticipationCount = 0)                                                
    BEGIN                                   
                                             
       SET @ErrorMessage = '101ConsumerParticipationLimitExceeded';      
        --allow external - integral shopper logic    
     Declare @_alloExternalRedirection bit,@_eXternalRedirectionUrl varchar(500),@_eServiceID int;    
     Select @_eServiceID  = EserviceID from coc_ecoupons(nolock) where EcouponID = @EcouponID    
     Select @_alloExternalRedirection = AllowExternalValidation,@_eXternalRedirectionUrl = ExternalRedirectionURL from coc_eservices(nolock)    
     where EserviceId = @_eServiceID;    
      if(IsNull(@_alloExternalRedirection,0)=1 and IsNull(@_eXternalRedirectionUrl ,'') <> '') and exists(select ECouponID from COC_CORE_ECOUPONINTEGRALSHOPPERS(nolock) where ECouponID = @EcouponID)    
        SET @ErrorMessage = '';       
      
     RETURN;                                                
    END                                                
   END                                                
  ELSE                                                
   BEGIN                                        
   SELECT @NumberOfGuestParticipations_N = ISNULL(NumberOfGuestParticipations, 0) FROM coc_ECoupons(NOLOCK)  WHERE ECouponID = @EcouponID                                           
    SELECT @Participations_N = count(*) FROM coc_ECouponParticipations(NOLOCK) CP WHERE GuestID = @GuestID  AND ECouponID = @EcouponID ;                                                
    IF (@NumberOfGuestParticipations_N < (@NumberOfCopons + @Participations_N))                                                
    BEGIN                 
  SET @ErrorMessage = 'Number of coupons exceeds Number of guest participations count';                                  
     RETURN;                                                
    END                                                
   END                                                  
                                      
            
                                    
 BEGIN TRANSACTION SaveECouponPurchases                                    
 BEGIN TRY                                    
  DECLARE @EserviceTypeID INTEGER                                    
  DECLARE @EServiceBarcodeID INTEGER                                    
  --DECLARE @Points INTEGER                                    
  DECLARE @QuestionOptionID INTEGER                                    
  DECLARE @SelectedAnswer INTEGER                         
  DECLARE @EServiceID INTEGER                                    
  DECLARE @NotificationID INTEGER                                    
  --DECLARE @NotificationSendID INTEGER                                    
  DECLARE @LanguageID INTEGER                                    
  DECLARE @CompetitionName NVARCHAR(200)                                    
  DECLARE @EnteredStandardBarcode [NullDescription]                                    
  DECLARE @LoyaltyPointSetupID int = 103                                    
  DECLARE @GeneralNotificationTemplateID int = 14                                    
                                     
  SET @ErrorMessage = ''                                    
                                    
  if(@ConsumerID is not null)                                  
    begin                          
   IF @Email IS NULL                                    
    SELECT @Email = EmailID                                    
    FROM coc_Consumers(NOLOCK)                                    
    WHERE ConsumerID = @ConsumerID                                    
                                    
   IF @Mobile IS NULL                                    
    SELECT @Mobile = PrimaryMobile                                    
    FROM coc_Consumers(NOLOCK)                                    
    WHERE ConsumerID = @ConsumerID                                    
    end                                  
 else if(@GuestID is not null)                                  
    begin                                  
   IF @Email IS NULL                                    
    SELECT @Email = EmailID                                    
    FROM coc_guests(NOLOCK)                                    
    WHERE GuestID = @GuestID                                    
                                    
   IF @Mobile IS NULL                                    
    SELECT @Mobile = PrimaryMobile                                    
    FROM coc_guests(NOLOCK)                                    
    WHERE GuestID = @GuestID                                    
    end                                  
                  
                                 
  IF @EcouponID = 10066 and (@Mobile IS NULL                                    
   OR len(@Mobile) <> 14                                    
   OR (SUBSTRING(@Mobile, 1, 6) <> '009627' and SUBSTRING(@Mobile, 1, 6) <> '009665'))                                    
  BEGIN                                    
   SET @ErrorMessage = 'InvalidMobile'                                    
  END                                    
  ELSE IF @EcouponID = 10100 and (@Mobile IS NULL                                    
   OR len(@Mobile) <> 14                                    
   OR (SUBSTRING(@Mobile, 1, 6) <> '009715' and SUBSTRING(@Mobile, 1, 6) <> '009665'))                                    
  BEGIN                                    
   SET @ErrorMessage = 'InvalidMobile'                                    
  END                                    
  ELSE IF @EcouponID <> 10100 and @EcouponID <> 10066 and @EcouponID <> 10184 and @EcouponID <> 10278 and  (@Mobile IS NULL                                    
   OR len(@Mobile) <> 14                                    
   OR SUBSTRING(@Mobile, 1, 6) <> '009665')                                    
  BEGIN                               
   SET @ErrorMessage = 'InvalidMobile'                                    
  END                                    
  ELSE IF @Email IS NULL                                    
  BEGIN                                    
   SET @ErrorMessage = 'InvalidEmail'                                    
  END                                    
  ELSE                                    
  BEGIN                                    
   IF (ISNULL(@EligibleCoupons, 0) = 0)                                    
    SET @EligibleCoupons = 1                                    
                       
   DECLARE @BarCodes TABLE (                                    
    EServiceBarcodeID INTEGER                                    
    ,AsignedMoile [Mobile]                                    
    ,Barcode [NullDescription]                                    
    ,NotificationID INTEGER                                    
    ,IsUsed BIT                       
    )                                    
                                    
   --//----------------------------------------------------------------                                    
   SELECT @EServiceID = EServiceID                                    
   FROM coc_ECoupons(NOLOCK)                                    
   WHERE EcouponID = @EcouponID                                    
                                    
   DECLARE @errortext [Remark]                                    
   DECLARE @return_value INT                                    
  if(@ConsumerId is not null)                                  
  begin                                  
   EXEC @return_value = [dbo].[ValidateConsumerForECouponVoucher] @ConsumerId = @ConsumerID                                    
    ,@EserviceId = @EServiceID                                    
    ,@errortext = @errortext OUTPUT                                    
                                    
   PRINT @ConsumerId                                    
   PRINT @EserviceId                              
   PRINT @errortext                                    
                                    
   IF (@errortext != '0')                                    
   BEGIN                                    
    SET @ErrorMessage = @errortext                                    
    SELECT @ErrorMessage                                
 ROLLBACK TRANSACTION SaveECouponPurchases                                 
    RETURN  END                                    
  end                                  
   SET XACT_ABORT ON;                                    
                                    
                                      
   DECLARE @AllowStandardBarcode BIT                                    
   DECLARE @StandardBarcodeValue [NullDescription]                   
   DECLARE @NumberOfConsumerParticipations INT                                    
   DECLARE @StandardBarcodeByRetailOutlet BIT                                    
   DECLARE @StandardBarcodeByQuestionBank BIT                                    
   DECLARE @TotalAllowedParticipationPerCustomer INT                                    
   DECLARE @TotalAllowedParticipationPerCustomerPerDay INT                                    
   DECLARE @AllowedParticipationPerBarcodePerCustomer INT                                    
   DECLARE @AllowedParticipationPerBarcodePerCustomerPerDay INT                                    
   --declare @TotalAllowedParticipationPerGuest int                                    
   --declare @TotalAllowedParticipationPerGuestPerDay int                                    
   DECLARE @ECouponStandardBarcodeID BIGINT                                    
   DECLARE @Outlet_TotalAllowedParticipationPerCustomer INT                                    
   DECLARE @Outlet_TotalAllowedParticipationPerCustomerPerDay INT                                    
   DECLARE @Outlet_TotalAllowedParticipationInOutlet INT                                    
   DECLARE @Outlet_TotalAllowedParticipationPerBarcode INT                                    
   DECLARE @RetailOutletID INT                                    
                                       
   DECLARE @cnt_TotalCompetitionParticipation INTEGER          
   DECLARE @cnt_TotalCompetitionParticipationToday INTEGER                                    
   DECLARE @cnt_TotalCompetitionBarcodeParticipation INTEGER                                    
   DECLARE @cnt_TotalCompetitionParticipationForOutlet INTEGER                                    
   DECLARE @cnt_TotalCustParticipation INTEGER                                    
   DECLARE @cnt_TotalCustParticipationToday INTEGER                                    
   DECLARE @cnt_TotalCustBarcodeParticipation INTEGER                                    
   DECLARE @cnt_TotalCustBarcodeParticipationToday INTEGER                                    
   DECLARE @cnt_TotalOutletParticipation INTEGER                                    
   DECLARE @cnt_TotalCustOutletParticipation INTEGER                                    
   DECLARE @cnt_TotalCustOutletParticipationToday INTEGER                               
                             
   --Recursive                          
   DECLARE @RecursiveHoursParticipationDuration INTEGER                                    
   DECLARE @RecursiveHoursNumberOfParticipations INTEGER                                    
   --Recursive                          
   DECLARE @RecursiveHoursLastParticipatedOn datetime                           
   DECLARE @RecursiveHoursNumberOfParticipationsCount INTEGER                                   
                             
   --StandardBarcode-Recursive                          
   DECLARE @StandardBarcodeRecursiveHoursParticipationDuration INTEGER                                    
   DECLARE @StandardBarcodeRecursiveHoursNumberOfParticipations INTEGER                                       
   DECLARE @StandardBarcodeRecursiveHoursNumberOfParticipationsCount INTEGER                           
                                    
   SELECT @EServiceID = EServiceID                                    
    ,@AllowStandardBarcode = ISNULL(AllowStandardBarcode, 0)                                    
    ,@StandardBarcodeValue = ISNULL(StandardBarcodeValue, '')                                    
    ,@NumberOfConsumerParticipations = ISNULL(NumberOfConsumerParticipations, 1)                                    
    ,@StandardBarcodeByRetailOutlet = ISNULL(StandardBarcodeByRetailOutlet, 0)                                    
    ,@StandardBarcodeByQuestionBank = ISNULL(StandardBarcodeByQuestionBank,0)                                    
    ,@TotalAllowedParticipationPerCustomer = ISNULL(TotalAllowedParticipationPerCustomer, 0)                                    
    ,@TotalAllowedParticipationPerCustomerPerDay = ISNULL(TotalAllowedParticipationPerCustomerPerDay, ISNULL(TotalAllowedParticipationPerCustomer, 0))                                    
    ,@AllowedParticipationPerBarcodePerCustomer = ISNULL(AllowedParticipationPerBarcodePerCustomer, 0)                                    
    ,@AllowedParticipationPerBarcodePerCustomerPerDay = ISNULL(AllowedParticipationPerBarcodePerCustomerPerDay, ISNULL(AllowedParticipationPerBarcodePerCustomer, 0))                                   
    ,                              
  --@TotalAllowedParticipationPerGuest = ISNULL(TotalAllowedParticipationPerGuest, 0),                                    
    --@TotalAllowedParticipationPerGuestPerDay = ISNULL(TotalAllowedParticipationPerGuestPerDay, 0),                                    
    @EserviceTypeID = EntryTypeID                                    
 ,@RecursiveHoursParticipationDuration = isnull(RecursiveHoursParticipationDuration,0)                          
 ,@RecursiveHoursNumberOfParticipations = ISNULL(RecursiveHoursNumberOfParticipations,0)                          
   FROM coc_ECoupons(NOLOCK)                                    
   WHERE ECouponID = @EcouponID                                    

IF @EserviceTypeID = 41                                    
    AND @AllowStandardBarcode = 0                             
                           
 -- commented by shamim on 1st Sept 2019 as it looks meaningless. value for @EserviceTypeID already selected above                          
    --SELECT @EserviceTypeID = EC.EntryTypeID                
    --FROM coc_ECoupons EC(NOLOCK)                    --INNER JOIN coc_Notifications NS(NOLOCK) ON NS.EServiceID = EC.EServiceID                                    
    --LEFT JOIN coc_EServiceBarcodes BC(NOLOCK) ON BC.NotificationID = NS.NotificationID                                    
    --WHERE (                                    
    --  @EcouponID IS NULL                                    
    --  OR EC.ECouponID = @EcouponID          
    --  )                                    
    -- AND (                                    
    --  @BarCode IS NULL                                    
    --  OR BC.Barcode = @BarCode                                    
    --  )                                    
                        
 ----Recursive Get latest participation datetime                          
 --   IF ( @RecursiveHoursParticipationDuration <> 0 )                          
 --    begin                          
 -- SELECT @RecursiveHoursNumberOfParticipationsCount = count(*) FROM coc_ECouponParticipations(NOLOCK)                                    
 --  WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID) AND ECouponID = @EcouponID                           
 --  AND (ParticipationDate >= DATEADD(hh,-(@RecursiveHoursParticipationDuration),GETDATE()))                          
                          
 --  IF(@RecursiveHoursNumberOfParticipationsCount+1) > @RecursiveHoursNumberOfParticipations                          
 --   begin                          
 --   SET @ErrorMessage = '105ConsumerParticipationLimitExceeded'                           
 --   ROLLBACK TRANSACTION SaveECouponPurchases                            
 --   RETURN                           
 --   end                          
 --      end                          
                          
   PRINT '@EserviceTypeID'                                    
   PRINT @EserviceTypeID                                    
                                    
   IF (@EserviceTypeID = 41)                                    
   BEGIN                                    
    IF @AllowStandardBarcode = 1   and @StandardBarcodeValue = @Barcode                                 
     SELECT @EnteredStandardBarcode = @Barcode                                    
    declare @IsCorrectAnswer int                                    
                           
                         
  SELECT @ECouponStandardBarcodeID = ECB.ECouponStandardBarcodeID                                        
      ,@RetailOutletID = ECO.RetailOutletID                                                             
     FROM coc_ECouponStandardBarcodes(NOLOCK) ECB                                        
      INNER JOIN coc_ECoupons(NOLOCK) EC ON ECB.ECouponID = EC.ECouponID             
      LEFT JOIN  coc_ECouponOutlets(NOLOCK) ECO ON ECO.ECouponOutletID = ECB.ECouponOutletID                                        
       AND ((ECO.ECouponOutletID IS not NULL and  ISNULL(ECO.IsActive,1) = 1) or ECO.ECouponOutletID IS NULL)                                        
     WHERE ECB.ECouponID = @EcouponID                                        
      AND ECB.StandardBarcode = @Barcode                                        
      AND ECB.IsActive = 1               
             
      declare @CorporateID int            
   declare @AllowExternalBarcode bit            
   select @AllowExternalBarcode=AllowExternalBarcode,@CorporateID=CorporateID from coc_EServices(nolock) where EServiceID=@EServiceID and AllowExternalBarcode=1             
            
 if @ECouponStandardBarcodeID is null and @AllowExternalBarcode=1            
 begin            
  declare @ReturnMessage nvarchar(500),              @ReturnStatus int                    
     exec USP_CORE_ExternalBarcodeParticipation @EServiceID,@EcouponID,@EnteredBarcode,@Mobile,@Email,@ConsumerID,NULL,@ReturnMessage Output,@ReturnStatus Output,@CorporateID,0,@RetailOutletID            
              
    SET @ErrorMessage = @ReturnMessage ;            
     
   Commit TRANSACTION SaveECouponPurchases                                     
   RETURN;            
            
 end             
          
          
    IF @AllowStandardBarcode = 1                                    
     AND @StandardBarcodeByQuestionBank = 1                    
    BEGIN                                    
     SELECT @ECouponStandardBarcodeID = ECB.ECouponStandardBarcodeID                                    
      ,@RetailOutletID = ECO.RetailOutletID                                    
      --,@RetailOutletID = ECO.RetailOutletID                                    
      ,@IsCorrectAnswer = QO.IsCorrect                                
     FROM coc_ECouponStandardBarcodes(NOLOCK) ECB                                    
      INNER JOIN coc_ECoupons(NOLOCK) EC ON ECB.ECouponID = EC.ECouponID                                    
      INNER JOIN coc_QuestionBanks(NOLOCK) QB ON QB.ECouponID = EC.ECouponID                                    
      INNER JOIN coc_QuestionOptions(NOLOCK) QO ON QO.QuestionBankID = QB.QuestionBankID and ECB.QuestionOptionID = QO.QuestionOptionID                                    
      LEFT JOIN  coc_ECouponOutlets(NOLOCK) ECO ON ECO.ECouponOutletID = ECB.ECouponOutletID                                    
       AND ((ECO.ECouponOutletID IS not NULL and  ISNULL(ECO.IsActive,1) = 1) or ECO.ECouponOutletID IS NULL)                                    
     WHERE ECB.ECouponID = @EcouponID                                    
      AND ECB.StandardBarcode = @Barcode               
      AND ECB.IsActive = 1                                    
                                    
     IF @ECouponStandardBarcodeID IS NULL                                    
      SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                           
     ELSE                                    
     BEGIN                                    
                                          
      SELECT @cnt_TotalCompetitionParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                                    
                                    
      SELECT @cnt_TotalCompetitionParticipation = @cnt_TotalCompetitionParticipation+ count(*)                                    
      FROM coc_ECouponParticipationsInvalid(NOLOCK)                    
      WHERE ECouponID = @EcouponID                                    
                              
      SELECT @cnt_TotalCompetitionParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
      SELECT @cnt_TotalCompetitionParticipationToday = @cnt_TotalCompetitionParticipationToday + count(*)                                    
      FROM coc_ECouponParticipationsInvalid(NOLOCK)                                
      WHERE ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
      SELECT @cnt_TotalCustParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
                                    
      SELECT @cnt_TotalCustParticipation = @cnt_TotalCustParticipation+ count(*)                                    
      FROM coc_ECouponParticipationsInvalid(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID)                                  
       AND ECouponID = @EcouponID                                    
                                    
      SELECT @cnt_TotalCustParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                   
       AND ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                          
      SELECT @cnt_TotalCustParticipationToday = @cnt_TotalCustParticipationToday + count(*)                                    
      FROM coc_ECouponParticipationsInvalid(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID)                                  
       AND ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
      IF @cnt_TotalCustParticipation >= @TotalAllowedParticipationPerCustomer                    
       SET @ErrorMessage = '101ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustParticipationToday >= @TotalAllowedParticipationPerCustomerPerDay                                    
       SET @ErrorMessage = '102DailyParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustOutletParticipation >= @Outlet_TotalAllowedParticipationPerCustomer                                    
       SET @ErrorMessage = '105ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustOutletParticipationToday >= @Outlet_TotalAllowedParticipationPerCustomerPerDay                                    
       SET @ErrorMessage = '106DailyParticipationLimitExceeded'                                    
      ELSE                                    
      BEGIN                                    
   select @EServiceBarcodeID = null                            
       SELECT TOP 1 @EServiceBarcodeID = EServiceBarcodeID                                    
         ,@Barcode = Barcode                                    
         ,@NotificationID = NT.NotificationID                                    
        FROM coc_EServiceBarcodes EB(NOLOCK)                                    
        INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID = NT.NotificationID                                    
         AND NT.EServiceID = @EServiceID                                    
        WHERE IsUsed = 0                   
         AND EB.AsignedMoile IS NULL                            
  order by Rand()                          
  --ORDER BY EServiceBarcodeID                              
  -- changed order to NEWID() on 6th Aug 2019 by Shamim to improve performance                          
  print @EServiceBarcodeID                            
  if @EServiceBarcodeID is null                             
  begin                            
   print 213132123                            
   SET @ErrorMessage = 'CompetitionBarcodesFinished'                               
  end                             
  else                            
  begin                            
                            
     if (@IsCorrectAnswer = 1)                                    
                                    
   INSERT INTO coc_ECouponParticipations (                                    
    ECouponID                                    
    ,ParticipationDate                                    
    ,Barcode                                    
    ,ParticipationMobile                                    
    ,ParticipationEmailID                                    
    ,ConsumerID                                    
    ,GuestID                                  
     ,RetailOutletID                                    
    ,EnteredStandardBarcode    
 ,Longitude    
 ,Latitude    
 ,ClosestRetailoutletID                                  
    )                                    
   SELECT @EcouponID                                    
    ,GETDATE()                                    
    ,@Barcode                                    
    ,@Mobile                                    
    ,@Email                                    
    ,@ConsumerID                                   
    ,@GuestID                                   
    ,@RetailOutletID                                    
    ,@EnteredStandardBarcode    
    ,@ConsumerLongitude    
 ,@ConsumerLatitude    
 ,@ClosestRetailoutletID    
     
     else                                    
   INSERT INTO coc_ECouponParticipationsInvalid (                   
    ECouponID                                    
,ParticipationDate                                    
    ,Barcode                                    
    ,ParticipationMobile                        
    ,ParticipationEmailID                                    
    ,ConsumerID                                    
    ,RetailOutletID                                    
    ,EnteredStandardBarcode                                    
    ,Reason                                    
    )                                    
   SELECT @EcouponID                                    
    ,GETDATE()                                    
    ,@Barcode                                    
    ,@Mobile                                    
    ,@Email                                    
 ,@ConsumerID                                   
    ,@RetailOutletID                                    
    ,@EnteredStandardBarcode                           
    ,'W'                                    
                                    
     UPDATE coc_EServiceBarcodes                                    
     SET AsignedMoile = @Mobile                                    
   ,IsUsed = 1                                    
   ,UsedDate = GETDATE()                                    
   ,ConsumerID = @ConsumerID                                    
   ,GuestID = @GuestID                          
   ,StandardBarcodeValue = @StandardBarcodeValue                                    
     WHERE EServiceBarcodeID = @EServiceBarcodeID                                    
                                    
   if(@ConsumerID is not null)   
   begin                                  
     EXEC AddCustomerLoyaltyPoints                                     
   @EcouponID,                                    
   @ConsumerID,                                    
   @LoyaltyPointSetupID,                                    
   @ErrorMessage OUTPUT                                    
                                    
     EXEC SaveNotificationSending                                    
   @NotificationID                                    
   ,@EcouponID                                    
   ,@ConsumerID                                    
   ,@GeneralNotificationTemplateID                                    
   ,@EServiceID                                    
   ,@Barcode                                    
    ,@ErrorMessage OUTPUT                            
   end                                  
       end                               
      END                                    
     END               
    END                                    
    ELSE IF @AllowStandardBarcode = 1                                    
     AND @StandardBarcodeByRetailOutlet = 1 and @StandardBarcodeValue <> @Barcode               
    BEGIN                                   
                              
     SELECT @ECouponStandardBarcodeID = ECB.ECouponStandardBarcodeID                                    
      ,@RetailOutletID = ECO.RetailOutletID                                    
      ,@Outlet_TotalAllowedParticipationPerCustomer =  ISNULL(ECO.TotalAllowedParticipationPerCustomer, EC.TotalAllowedParticipationPerCustomer)                                    
      ,@Outlet_TotalAllowedParticipationPerCustomerPerDay = ISNULL(ECO.TotalAllowedParticipationPerCustomerPerDay, EC.TotalAllowedParticipationPerCustomerPerDay)                                    
      ,@Outlet_TotalAllowedParticipationInOutlet = ISNULL(ECO.TotalAllowedParticipationinOutlet, EC.NumberOfConsumerParticipations)                                    
      ,@Outlet_TotalAllowedParticipationPerBarcode = ISNULL(ECO.TotalAllowedParticipationPerBarcode, EC.AllowedParticipationPerBarcodePerCustomer)                                    
    ,@StandardBarcodeRecursiveHoursParticipationDuration = ECB.RecursiveHoursParticipationDuration                               
   ,@StandardBarcodeRecursiveHoursNumberOfParticipations = ECB.RecursiveHoursNumberOfParticipations                          
     FROM coc_ECouponStandardBarcodes(NOLOCK) ECB                                    
      inner join coc_ECoupons(NOLOCK) EC ON ECB.ECouponID = EC.ECouponID                                    
      LEFT JOIN coc_ECouponOutlets(NOLOCK) ECO ON ECO.ECouponOutletID = ECB.ECouponOutletID                                    
       AND ((ECO.ECouponOutletID IS not NULL and  ISNULL(ECO.IsActive,1) = 1) or ECO.ECouponOutletID IS NULL)                                    
     inner join coc_RetailOutlets RO ON RO.RetailOutletID = ECO.RetailOutletID                               WHERE ECB.ECouponID = @EcouponID                                    
      AND ECB.StandardBarcode = @Barcode                                    
      AND ECB.IsActive = 1                                    
                                    
     IF @ECouponStandardBarcodeID IS NULL                                    
      SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                                    
     ELSE                                    
     BEGIN                                    
                                          
      SELECT @cnt_TotalCompetitionParticipation = count(*)                                
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                                    
                                    
      SELECT @cnt_TotalCompetitionParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
      SELECT @cnt_TotalCompetitionBarcodeParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                 
       AND EnteredStandardBarcode = @EnteredStandardBarcode                                    
                                    
      SELECT @cnt_TotalCompetitionParticipationForOutlet = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                                    
       AND RetailOutletID = @RetailOutletID                                    
                                    
      SELECT @cnt_TotalCustParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
                                    
      SELECT @cnt_TotalCustParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
      SELECT @cnt_TotalCustBarcodeParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
       AND EnteredStandardBarcode = @EnteredStandardBarcode                                    
                                    
      SELECT @cnt_TotalCustBarcodeParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
       AND EnteredStandardBarcode = @EnteredStandardBarcode                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                              
                           
      SELECT @cnt_TotalOutletParticipation = count(*)                              
      FROM coc_ECouponParticipations(NOLOCK)       
      WHERE ECouponID = @EcouponID                                    
       AND RetailOutletID = @RetailOutletID      and  (ConsumerID = @ConsumerID  or GuestID = @GuestID)                          
                              
                                    
      SELECT @cnt_TotalCustOutletParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
       AND RetailOutletID = @RetailOutletID                                    
                                    
      SELECT @cnt_TotalCustOutletParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                   
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                             
       AND ECouponID = @EcouponID                    
       AND RetailOutletID = @RetailOutletID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
--StandardBarcode-Recursive                          
 IF ( @StandardBarcodeRecursiveHoursParticipationDuration <> 0 )                          
     begin                          
  SELECT @StandardBarcodeRecursiveHoursNumberOfParticipationsCount = count(*) FROM coc_ECouponParticipations(NOLOCK)                                    
   WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID) AND ECouponID = @EcouponID                           
   AND (ParticipationDate >= DATEADD(hh,-(@StandardBarcodeRecursiveHoursParticipationDuration),GETDATE()))                          
                          
   IF(@StandardBarcodeRecursiveHoursNumberOfParticipationsCount+1) > @StandardBarcodeRecursiveHoursNumberOfParticipations                          
    begin                          
    SET @ErrorMessage = '105ConsumerParticipationLimitExceeded'                           
    ROLLBACK TRANSACTION SaveECouponPurchases                                 
    RETURN                           
    end                               
       end                          
    select @cnt_TotalCustBarcodeParticipation, @AllowedParticipationPerBarcodePerCustomer                          
      IF @cnt_TotalCustParticipation >= @TotalAllowedParticipationPerCustomer                                    
       SET @ErrorMessage = '101ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustParticipationToday >= @TotalAllowedParticipationPerCustomerPerDay                                    
       SET @ErrorMessage = '102DailyParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustBarcodeParticipation >= @AllowedParticipationPerBarcodePerCustomer                                   
       SET @ErrorMessage = '103ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustBarcodeParticipationToday >= @AllowedParticipationPerBarcodePerCustomerPerDay                                    
       SET @ErrorMessage = '104DailyParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustOutletParticipation >= @Outlet_TotalAllowedParticipationPerCustomer                                    
       SET @ErrorMessage = '105ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustOutletParticipationToday >= @Outlet_TotalAllowedParticipationPerCustomerPerDay                                    
       SET @ErrorMessage = '106DailyParticipationLimitExceeded'                               
      ELSE IF @cnt_TotalOutletParticipation >= @Outlet_TotalAllowedParticipationInOutlet                                    
       SET @ErrorMessage = '107ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustBarcodeParticipation >= @Outlet_TotalAllowedParticipationPerBarcode                                    
       SET @ErrorMessage = '108ConsumerParticipationLimitExceeded'                                    
      ELSE          BEGIN                               
   select @EServiceBarcodeID = null                            
       SELECT TOP 1 @EServiceBarcodeID = EServiceBarcodeID                                    
         ,@Barcode = Barcode                                    
         ,@NotificationID = NT.NotificationID                                    
        FROM coc_EServiceBarcodes EB(NOLOCK)                                   
        INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID = NT.NotificationID                                    
         AND NT.EServiceID = @EServiceID                                    
        WHERE IsUsed = 0                                    
         AND EB.AsignedMoile IS NULL                           
        order by Rand()                          
  --ORDER BY EServiceBarcodeID                              
  -- changed order to NEWID() on 6th Aug 2019 by Shamim to improve performance                          
        print @EServiceBarcodeID                            
  if @EServiceBarcodeID is null                             
  begin                            
   print 565656                            
   SET @ErrorMessage = 'CompetitionBarcodesFinished'                               
  end                             
  else                            
  begin                            
                            
     INSERT INTO coc_ECouponParticipations (                                    
   ECouponID                                    
   ,ParticipationDate                                    
   ,Barcode                                    
   ,ParticipationMobile                   
   ,ParticipationEmailID                                    
   ,ConsumerID                                    
   ,GuestID                                  
   ,RetailOutletID                                    
   ,EnteredStandardBarcode     
   ,Longitude    
 ,Latitude    
 ,ClosestRetailoutletID    
   )                                    
     SELECT @EcouponID                                    
   ,GETDATE()                                    
   ,@Barcode                                    
   ,@Mobile                                    
   ,@Email                                    
   ,@ConsumerID                                   
   ,@GuestID                                   
   ,@RetailOutletID                                    
   ,@EnteredStandardBarcode     
   ,@ConsumerLongitude    
 ,@ConsumerLatitude    
 ,@ClosestRetailoutletID    
    
                                    
     UPDATE coc_EServiceBarcodes                                    
     SET AsignedMoile = @Mobile                                    
   ,IsUsed = 1                                    
   ,UsedDate = GETDATE()                                    
   ,ConsumerID = @ConsumerID                                    
   ,GuestID= @GuestID                                  
   ,StandardBarcodeValue = @StandardBarcodeValue                                    
     WHERE EServiceBarcodeID = @EServiceBarcodeID                                    
                                    
   if(@ConsumerID is not null)                                  
   begin                                  
     EXEC AddCustomerLoyaltyPoints                                     
   @EcouponID,                                    
   @ConsumerID,                                    
   @LoyaltyPointSetupID,                                    
   @ErrorMessage OUTPUT                       
                                    
     EXEC SaveNotificationSending                                    
   @NotificationID                                    
   ,@EcouponID                                    
   ,@ConsumerID                                    
   ,@GeneralNotificationTemplateID                                    
   ,@EServiceID                       
   ,@Barcode                                    
   ,@ErrorMessage OUTPUT                                    
                                    
  end                                  
  end                            
      END                                    
     END                               
    END                                    
    ELSE IF @AllowStandardBarcode = 1                                 
     AND @StandardBarcodeValue <> @Barcode and @EcouponID NOT IN(10321,10322,10351,10380,10389,10481)                                   
    BEGIN                                    
     SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                                    
    END                                    
    ELSE IF @AllowStandardBarcode = 1                                    
     AND @StandardBarcodeValue = @Barcode       
    BEGIN                                    
     DECLARE @cnt INTEGER                                    
     IF exists(Select ECouponID From coc_ECouponParticipations(nolock) where (ECouponID= 10321 OR ECouponID=10322 or ECouponID = 10351 or ECouponID = 10380 or ECouponID = 10389 or ECouponID = 10481) and EnteredStandardBarcode=@Barcode and ConsumerID=@ConsumerID )            
       
  BEGIN                   
  Set @ErrorMessage='101ConsumerParticipationLimitExceeded';                  
  END                   
                    
  Else                   
    begin                  
        SELECT @cnt = count(*)                                    
        FROM coc_ECouponParticipations(NOLOCK)                                    
        WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
         AND ECouponID = @EcouponID                                    
        select @EServiceBarcodeID= null                            
        SELECT TOP 1 @EServiceBarcodeID = EServiceBarcodeID                       
         ,@Barcode = Barcode                                    
         ,@NotificationID = NT.NotificationID                                    
        FROM coc_EServiceBarcodes EB(NOLOCK)                                    
        INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID = NT.NotificationID                                    
         AND NT.EServiceID = @EServiceID                                    
        WHERE IsUsed = 0                                    
         AND EB.AsignedMoile IS NULL                                    
        order by Rand()                          
     --ORDER BY EServiceBarcodeID                              
     -- changed order to NEWID() on 6th Aug 2019 by Shamim to improve performance                          
     print @EServiceBarcodeID                            
    if @EServiceBarcodeID is null                             
    begin                            
     print 565656                            
     SET @ErrorMessage = 'CompetitionBarcodesFinished'                               
    end                             
    else                            
    begin                               
      IF @cnt >= @NumberOfConsumerParticipations                                    
       SET @ErrorMessage = 'ConsumerParticipationDepleted'                                    
      ELSE                                    
      BEGIN                                    
       INSERT INTO coc_ECouponParticipations (                                    
        ECouponID                                    
        ,ParticipationDate                                
        ,Barcode                                    
        ,ParticipationMobile                                    
        ,ParticipationEmailID                                    
        ,ConsumerID                                    
         ,GuestID                                  
        ,RetailOutletID                                    
    ,EnteredStandardBarcode    
 ,Longitude    
 ,Latitude    
 ,ClosestRetailoutletID                                    
        )                                    
       SELECT @EcouponID                                    
        ,GETDATE()                                    
        ,@Barcode                                    
        ,@Mobile                                    
        ,@Email                                    
        ,@ConsumerID                                  
     ,@GuestID                                    
         ,@RetailOutletID                                    
    ,@EnteredStandardBarcode    
    ,@ConsumerLongitude    
 ,@ConsumerLatitude    
 ,@ClosestRetailoutletID                                    
                                       
       UPDATE coc_EServiceBarcodes                                    
       SET AsignedMoile = @Mobile                                    
        ,IsUsed = 1                                    
        ,UsedDate = GETDATE()                                    
        ,ConsumerID = @ConsumerID                                    
     ,GuestID = @GuestID                                  
        ,StandardBarcodeValue = @StandardBarcodeValue                                    
       WHERE EServiceBarcodeID = @EServiceBarcodeID                                    
      if(@ConsumerID is not null)                                  
      begin                                  
       EXEC AddCustomerLoyaltyPoints                                     
      @EcouponID,                                    
      @ConsumerID,          @LoyaltyPointSetupID,                                    
      @ErrorMessage OUTPUT                                    
                                       
       EXEC SaveNotificationSending                                    
        @NotificationID                                    
        ,@EcouponID                                    
        ,@ConsumerID                                    
        ,@GeneralNotificationTemplateID                                    
        ,@EServiceID                                    
        ,@Barcode                                    
        ,@ErrorMessage OUTPUT                                    
  end                                  
   end                     
   END                  
     END                                    
    END                                    
    ELSE                       
 -- commented this condtion on September 1 2019 by shamim                          
 --IF NOT EXISTS (                                    
 -- SELECT NULL                                    
 --     FROM coc_EServiceBarcodes(NOLOCK)                                    
 --     WHERE Barcode = @BarCode                           
                             
 --      AND @EserviceTypeID IN (41)                                    
 --     )                                    
 --    AND @AllowStandardBarcode = 0 --AND ConsumerID=@ConsumerID                                    
 --   BEGIN                                    
 --    SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                                    
 --   END                                    
 --   ELSE                                    
    BEGIN                                    
     IF NOT EXISTS (                                    
       SELECT NULL                                    
       FROM coc_ECouponParticipations(NOLOCK)                   
       WHERE Barcode = @Barcode                                    
        AND (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                    
        AND ECouponID = @EcouponID                                    
       )                                    
     BEGIN                                    
       select @EServiceBarcodeID = null                            
       SELECT TOP 1 @EServiceBarcodeID = EServiceBarcodeID                                    
         ,@NotificationID = NT.NotificationID                                    
        FROM coc_EServiceBarcodes EB(NOLOCK)                                    
        INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID = NT.NotificationID                                    
         AND NT.EServiceID = @EServiceID                                    
        WHERE IsUsed = 1                                    
         AND EB.AsignedMoile IS NULL                               
   AND Barcode = @Barcode                          
        --order by NEWID()                          
  --ORDER BY EServiceBarcodeID                              
  -- changed order to NEWID() on 6th Aug 2019 by Shamim to improve performance                          
                                  
        print @EServiceBarcodeID                            
 if @EServiceBarcodeID is null                             
 begin                            
  print 565656                            
  SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                               
 end                             
 else                            
 begin                               
 INSERT INTO coc_ECouponParticipations (         
       ECouponID                                    
       ,ParticipationDate                                    
       ,Barcode                                    
       ,ParticipationMobile                                    
       ,ParticipationEmailID                                    
       ,ConsumerID                                    
    ,GuestID    
  ,RetailOutletID                                    
 ,Longitude    
 ,Latitude    
 ,ClosestRetailoutletID    
       )                                    
      SELECT @EcouponID                                    
       ,GETDATE()                                    
       ,@Barcode                                    
       ,@Mobile                                    
       ,@Email                                    
       ,@ConsumerID                                   
    ,@GuestID      
  ,@RetailOutletID                                    
    ,@ConsumerLongitude    
 ,@ConsumerLatitude    
 ,@ClosestRetailoutletID    
    SELECT TOP (1) @EServiceBarcodeID = EServiceBarcodeID                                    
    FROM coc_EServiceBarcodes(NOLOCK)                                    
    WHERE Barcode = @BarCode                                    
                                    
    UPDATE coc_EServiceBarcodes                                    
    SET AsignedMoile = @Mobile                                    
     ,IsUsed = 1                                    
     ,UsedDate = GETDATE()       
    WHERE EServiceBarcodeID = @EServiceBarcodeID                                    
   if (@ConsumerID is not null)                                  
   begin                        
    EXEC AddCustomerLoyaltyPoints                                     
   @EcouponID,                                    
   @ConsumerID,                                    
@LoyaltyPointSetupID,                                    
   @ErrorMessage OUTPUT                                    
                                    
    EXEC SaveNotificationSending                                    
     @NotificationID                                    
     ,@EcouponID          
     ,@ConsumerID                     
     ,@GeneralNotificationTemplateID                                    
     ,@EServiceID                                    
     ,@Barcode                                    
     ,@ErrorMessage OUTPUT                                   
  end                                  
  end                            
     END                                    
     ELSE                                    
     BEGIN                                    
      SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                                    
     END                                    
    END                   
   END                                    
   ELSE IF (@EserviceTypeID = 42)                                    
   BEGIN                                    
                                        
     select @EServiceBarcodeID = null                            
    SELECT TOP 1 @EServiceBarcodeID = EServiceBarcodeID                                    
     ,@Barcode = Barcode                                    
     ,@NotificationID = NT.NotificationID                                    
    FROM coc_EServiceBarcodes EB(NOLOCK)                                    
    INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID = NT.NotificationID                                    
     AND NT.EServiceID = @EServiceID                                    
    WHERE IsUsed = 0                                    
     AND EB.AsignedMoile IS NULL                                    
    order by Rand()                          
 --ORDER BY EServiceBarcodeID                              
 -- changed order to NEWID() on 6th Aug 2019 by Shamim to improve performanceORDER BY EServiceBarcodeID                                    
                                    
    DECLARE @Participations INT                                    
    DECLARE @ParticipationsInvalid INT                                    
                                    
    --select @Participations = count(*) from coc_EServiceBarcodes(NOLOCK)BC                                    
    --  INNER JOIN coc_Notifications NT(NOLOCK) ON BC.NotificationID=NT.NotificationID AND NT.EServiceID =@EServiceID                                    
    -- where ConsumerID=@ConsumerID                                   
    SELECT @Participations = count(*)                                    
    FROM coc_ECouponParticipations(NOLOCK) CP                                    
    WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
     AND ECouponID = @EcouponID                                    
                                    
    SELECT @ParticipationsInvalid = count(*)                                    
    FROM coc_ECouponParticipationsInvalid(NOLOCK) CP                                    
    WHERE (ConsumerID = @ConsumerID)                                  
     AND ECouponID = @EcouponID                                    
                                    
    SELECT @Participations = ISNULL(@Participations, 0) + ISNULL(@ParticipationsInvalid, 0)                                    
                                    
    IF ISNULL(@Participations, 0) = 0                                    
    BEGIN                                    
 IF (@ConsumerID) is not null AND NOT EXISTS ( SELECT 1  FROM coc_ConsumerPointDetails(NOLOCK) CP  WHERE CP.ConsumerID = @ConsumerID  AND CP.ECouponID = @EcouponID  )                                    
     BEGIN                                    
      INSERT INTO @BarCodes (                                    
       EServiceBarcodeID                                    
       ,AsignedMoile                                    
       ,Barcode                                    
       ,NotificationID                                    
       ,IsUsed                                    
       )                                    
      SELECT TOP (@EligibleCoupons) BC.EServiceBarcodeID                                    
       ,@Mobile                                    
       ,BC.Barcode                                    
       ,BC.NotificationID                            
       ,1                                    
      FROM coc_EServiceBarcodes(NOLOCK) BC                                    
      WHERE BC.IsUsed = 0                                    
                                    
      --SELECT TOP(1) @EServiceBarcodeID=EServiceBarcodeID FROM coc_EServiceBarcodes(NOLOCK) WHERE Barcode=@BarCode AND NotificationID=@NotificationID                                    
      IF (@WrongAnswer = 0)                                    
      BEGIN                                    
       UPDATE EB                                    
       SET ConsumerID = @ConsumerID                                    
     ,GuestID = @GuestID                                  
  ,AsignedMoile = @Mobile                                    
        ,IsUsed = 1                            
        ,UsedDate = GETDATE()                                    
       FROM coc_EServiceBarcodes EB                                    
       WHERE EServiceBarcodeID = @EServiceBarcodeID                                    
                                    
                                          
       IF (ISNULL(@Barcode, '0') != '0')                                    
       BEGIN                                    
        INSERT INTO coc_ECouponParticipations (                                    
         ECouponID                                    
         ,ParticipationDate                                    
         ,Barcode          
         ,ParticipationMobile                                    
         ,ParticipationEmailID                                    
         ,ConsumerID                                  
   ,GuestID       
    ,RetailOutletID                                    
 ,Longitude    
 ,Latitude    
 ,ClosestRetailoutletID    
         )                                    
        SELECT @EcouponID                                    
         ,GETDATE()                                    
         ,@Barcode                                    
         ,@Mobile                                
         ,@Email                                    
         ,@ConsumerID                                    
         ,@GuestID      
   ,@RetailOutletID                                    
    ,@ConsumerLongitude    
 ,@ConsumerLatitude    
 ,@ClosestRetailoutletID    
    
         if(@ConsumerID is not null)                                  
   begin                                  
    EXEC AddCustomerLoyaltyPoints                                     
     @EcouponID,                                    
@ConsumerID,                                    
     @LoyaltyPointSetupID,                                    
     @ErrorMessage OUTPUT                                    
                                    
    EXEC SaveNotificationSending                                    
     @NotificationID                                    
     ,@EcouponID                                    
     ,@ConsumerID                                    
     ,@GeneralNotificationTemplateID                                    
     ,@EServiceID                                    
     ,@Barcode                                    
     ,@ErrorMessage OUTPUT                                    
   end                                  
       END                                    
       ELSE                                    
       BEGIN                                    
 SET @ErrorMessage = 'Barcode is Not There to Asign'                                    
       END                   
 END                                    
      ELSE                                    
      BEGIN                                    
                                  
   if(@ConsumerID is not null)                                  
begin                                  
       INSERT INTO coc_ECouponParticipationsInvalid (                                    
        ECouponID                       
        ,ParticipationDate                                    
        ,Barcode                                    
        ,ParticipationMobile                                    
        ,ParticipationEmailID                                    
        ,ConsumerID                                    
        ,Reason                                    
        )                                    
       SELECT @EcouponID                                    
        ,GETDATE()                                    
        ,@Barcode                                    
        ,@Mobile                                    
     ,@Email                                    
        ,@ConsumerID                                    
        ,'W'                                    
                                    
       EXEC AddCustomerLoyaltyPoints                                     
         @EcouponID,                                    
         @ConsumerID,                                    
         @LoyaltyPointSetupID,                                    
         @ErrorMessage OUTPUT                                    
                                    
       EXEC SaveNotificationSending                                    
        @NotificationID                                    
        ,@EcouponID                                    
        ,@ConsumerID                                    
        ,@GeneralNotificationTemplateID                                    
        ,@EServiceID                                    
        ,@Barcode                                    
        ,@ErrorMessage OUTPUT                                    
 end                                  
      END                                    
     END                                    
     ELSE                                    
     BEGIN                                    
      IF (@WrongAnswer = 0)                                    
      BEGIN                                    
       UPDATE EB                                    
       SET ConsumerID = @ConsumerID ,GuestID = @GuestID                                   
        ,AsignedMoile = @Mobile                                    
        ,IsUsed = 1                                    
        ,UsedDate = GETDATE()                                    
       FROM coc_EServiceBarcodes EB                                    
       WHERE EServiceBarcodeID = @EServiceBarcodeID                         
                                    
       IF (ISNULL(@Barcode, '0') != '0')                                    
       BEGIN                                    
        INSERT INTO coc_ECouponParticipations (                                    
         ECouponID                                    
         ,ParticipationDate                                    
         ,Barcode                                    
         ,ParticipationMobile                                    
    ,ParticipationEmailID                                    
         ,ConsumerID                                    
   ,GuestID     
    ,RetailOutletID                                    
 ,Longitude    
 ,Latitude    
 ,ClosestRetailoutletID    
         )                                    
        SELECT @EcouponID                                    
         ,GETDATE()                                    
         ,@Barcode                                    
         ,@Mobile                                    
         ,@Email                                    
         ,@ConsumerID                                    
   ,@GuestID      
    ,@RetailOutletID                                    
    ,@ConsumerLongitude    
 ,@ConsumerLatitude    
 ,@ClosestRetailoutletID    
    
   if(@ConsumerID is not null)                                  
   begin                                  
        EXEC AddCustomerLoyaltyPoints                                     
         @EcouponID,                                    
         @ConsumerID,                                    
         @LoyaltyPointSetupID,                                    
         @ErrorMessage OUTPUT                                    
                                    
        EXEC SaveNotificationSending                                    
         @NotificationID                                    
         ,@EcouponID                                    
         ,@ConsumerID                                    
         ,@GeneralNotificationTemplateID                                    
         ,@EServiceID                                    
         ,@Barcode                                    
         ,@ErrorMessage OUTPUT                                    
  end                                  
       END                                    
      END                                    
     END                                    
    END                                    
    ELSE                                    
    BEGIN                                    
 if(@ConsumerID is not null)                                  
 begin                                  
     INSERT INTO coc_ECouponParticipationsInvalid (                                    
      ECouponID                                    
      ,ParticipationDate                           
      ,Barcode                                    
      ,ParticipationMobile                                    
      ,ParticipationEmailID                                    
      ,ConsumerID                                    
      ,Reason                                    
    )                                    
     SELECT @EcouponID                                    
      ,GETDATE()                                    
      ,@Barcode                                    
      ,@Mobile                                    
      ,@Email                                    
      ,@ConsumerID                                    
      ,'P'                                    
  end                                  
     SET @ErrorMessage = 'YouAlreadyParticipated'                          
    END                                    
                                        
   END                                    
   ELSE IF (@EserviceTypeID = 43)                                    
   BEGIN                                    
    IF NOT EXISTS (                                    
      SELECT NULL                                    
      FROM coc_EServiceBarcodes(NOLOCK)                                    
      WHERE Barcode = @BarCode                                    
       AND @EserviceTypeID IN (43)                                    
       AND UsedDate IS NULL                                    
      ) -- IsUsed=0 )-- AND AsignedMoile IS NULL)                                    
    BEGIN                                    
     SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                                    
    END                                    
   ELSE                                    
    BEGIN                                    
     SELECT TOP (1) @EServiceBarcodeID = EServiceBarcodeID                                    
      ,@NotificationID = NotificationID                                    
     FROM coc_EServiceBarcodes(NOLOCK)                                    
     WHERE Barcode = @BarCode                                    
      AND UsedDate IS NULL --IsUsed=0 -- AsignedMoile IS NULL             
                                    
     INSERT INTO coc_ECouponParticipations (                                    
      ECouponID                                    
      ,ParticipationDate                                    
      ,Barcode            
      ,ParticipationMobile                                    
      ,ParticipationEmailID                                    
,ConsumerID                                    
   ,GuestID       
    ,RetailOutletID                                    
 ,Longitude    
 ,Latitude    
 ,ClosestRetailoutletID    
      )                                    
     SELECT @EcouponID                                    
      ,GETDATE()                                    
      ,@Barcode                                    
      ,@Mobile                                    
      ,@Email                                    
      ,@ConsumerID                                    
   ,@GuestID        
    ,@RetailOutletID                                    
    ,@ConsumerLongitude    
 ,@ConsumerLatitude    
 ,@ClosestRetailoutletID    
    
                                    
     UPDATE coc_EServiceBarcodes                                    
     SET AsignedMoile = @Mobile                                    
      ,IsUsed = 1                                    
      ,UsedDate = GETDATE()                                    
      ,ConsumerID = @ConsumerID ,GuestID = @GuestID                                   
     WHERE EServiceBarcodeID = @EServiceBarcodeID                                    
  if(@ConsumerID is not null)                                  
  begin                                  
     EXEC AddCustomerLoyaltyPoints                                     
      @EcouponID,                                    
      @ConsumerID,                                    
      @LoyaltyPointSetupID,                                    
      @ErrorMessage OUTPUT                                    
                                    
     EXEC SaveNotificationSending                               
      @NotificationID                                    
      ,@EcouponID             
      ,@ConsumerID                                    
      ,@GeneralNotificationTemplateID                                    
      ,@EServiceID                                    
      ,@Barcode                                    
      ,@ErrorMessage OUTPUT                                    
  end                                  
    END             
   END                                    
   ELSE IF (@EserviceTypeID = 44)                                    
   BEGIN                                    
    INSERT INTO @BarCodes (                                    
     EServiceBarcodeID                                    
     ,AsignedMoile                                    
     ,Barcode                                    
     ,NotificationID                                    
     ,IsUsed                                    
     )                                    
    SELECT TOP (@EligibleCoupons) BC.EServiceBarcodeID                                    
     ,@Mobile                                    
     ,BC.Barcode                                    
     ,BC.NotificationID                                    
     ,1                                    
    FROM coc_EServiceBarcodes(NOLOCK) BC                                    
    INNER JOIN coc_Notifications NT(NOLOCK) ON BC.NotificationID = NT.NotificationID                                    
     AND NT.EServiceID = @EServiceID                       
    WHERE BC.IsUsed = 0                                    
                                    
    SELECT @NotificationID = NotificationID                                    
     ,@Barcode = Barcode                                    
    FROM @BarCodes                     
                                    
    UPDATE EB                                    
    SET EB.AsignedMoile = BC.AsignedMoile                                    
     ,EB.IsUsed = BC.IsUsed                                    
     ,EB.UsedDate = GETDATE()                                    
     ,EB.ConsumerID = @ConsumerID  , GuestID = @GuestID                                  
    FROM coc_EServiceBarcodes EB                                    
    INNER JOIN @BarCodes BC ON BC.EServiceBarcodeID = EB.EServiceBarcodeID                                    
                                    
    IF (@ConsumerID IS NOT NULL OR @GuestID is not null)               
    BEGIN                                    
                                  
 if(@ConsumerID is not null)                                  
     EXEC AddCustomerLoyaltyPoints                                     
       @EcouponID,                                    
       @ConsumerID,                                    
       @LoyaltyPointSetupID,                                    
       @ErrorMessage OUTPUT                                    
                                    
             
     SELECT @EServiceBarcodeID = MIN(EServiceBarcodeID)                                    
     FROM @BarCodes                                    
                                    
     WHILE (@EServiceBarcodeID IS NOT NULL)                                    
     BEGIN                                    
      SELECT @Barcode = Barcode                                    
      FROM @BarCodes                                    
      WHERE EServiceBarcodeID = @EServiceBarcodeID                                    
                                    
  if(@ConsumerID is not null)                                  
      EXEC SaveNotificationSending                                    
       @NotificationID                                    
       ,@EcouponID                                    
       ,@ConsumerID                                    
       ,@GeneralNotificationTemplateID                                    
       ,@EServiceID                                    
       ,@Barcode                                    
       ,@ErrorMessage OUTPUT                                    
                     
      INSERT INTO coc_ECouponParticipations (                                    
        ECouponID                             
        ,ParticipationDate                                    
        ,Barcode                                    
        ,ParticipationMobile                                    
        ,ParticipationEmailID                                    
        ,ConsumerID                                  
  ,GuestID         
   ,RetailOutletID                                    
 ,Longitude    
 ,Latitude    
 ,ClosestRetailoutletID    
        )                                    
       SELECT @EcouponID                                    
        ,GETDATE()                                    
        ,@Barcode                                    
        ,@Mobile                                    
        ,@Email                 
        ,@ConsumerID                                    
        ,@GuestID      
  ,@RetailOutletID                                    
    ,@ConsumerLongitude    
 ,@ConsumerLatitude    
 ,@ClosestRetailoutletID    
    
      SELECT @EServiceBarcodeID = MIN(EServiceBarcodeID)                                    
      FROM @BarCodes                                  
      WHERE EServiceBarcodeID > @EServiceBarcodeID                          
                                    
                                    
     END                                    
    END                                    
                                    
                                       
   END         
   ELSE 
      if @EserviceTypeID = 47 or @EserviceTypeID = 48
   begin
        SELECT @cnt_TotalCompetitionParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                                    
                                    
      SELECT @cnt_TotalCompetitionParticipation = @cnt_TotalCompetitionParticipation+ count(*)                                    
      FROM coc_ECouponParticipationsInvalid(NOLOCK)                    
      WHERE ECouponID = @EcouponID                                    
                              
      SELECT @cnt_TotalCompetitionParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
      SELECT @cnt_TotalCompetitionParticipationToday = @cnt_TotalCompetitionParticipationToday + count(*)                                    
      FROM coc_ECouponParticipationsInvalid(NOLOCK)                                
      WHERE ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
      SELECT @cnt_TotalCustParticipation = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                  
       AND ECouponID = @EcouponID                                    
                                    
      SELECT @cnt_TotalCustParticipation = @cnt_TotalCustParticipation+ count(*)                                    
      FROM coc_ECouponParticipationsInvalid(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID)                                  
       AND ECouponID = @EcouponID                                    
                                    
      SELECT @cnt_TotalCustParticipationToday = count(*)                                    
      FROM coc_ECouponParticipations(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID  or GuestID = @GuestID)                                   
       AND ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                          
      SELECT @cnt_TotalCustParticipationToday = @cnt_TotalCustParticipationToday + count(*)                                    
      FROM coc_ECouponParticipationsInvalid(NOLOCK)                                    
      WHERE (ConsumerID = @ConsumerID)                                  
       AND ECouponID = @EcouponID                                    
       AND cast(ParticipationDate AS DATE) = cast(getdate() AS DATE)                                    
                                    
      --IF @cnt_TotalCustParticipation >= @TotalAllowedParticipationPerCustomer                    
      -- SET @ErrorMessage = '101ConsumerParticipationLimitExceeded'                                    
      --ELSE IF @cnt_TotalCustParticipationToday >= @TotalAllowedParticipationPerCustomerPerDay                                    
      -- SET @ErrorMessage = '102DailyParticipationLimitExceeded'                                    
      --ELSE 
      IF @cnt_TotalCustOutletParticipation >= @Outlet_TotalAllowedParticipationPerCustomer                                    
       SET @ErrorMessage = '105ConsumerParticipationLimitExceeded'                                    
      ELSE IF @cnt_TotalCustOutletParticipationToday >= @Outlet_TotalAllowedParticipationPerCustomerPerDay                                    
       SET @ErrorMessage = '106DailyParticipationLimitExceeded'                                    
      ELSE                                    
      BEGIN                                    
   select @EServiceBarcodeID = null                            
       SELECT TOP 1 @EServiceBarcodeID = EServiceBarcodeID                                    
         ,@Barcode = Barcode                                    
         ,@NotificationID = NT.NotificationID                                    
        FROM coc_EServiceBarcodes EB(NOLOCK)                                    
        INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID = NT.NotificationID                                    
         AND NT.EServiceID = @EServiceID                                    
        WHERE IsUsed = 0                   
         AND EB.AsignedMoile IS NULL                            
  order by Rand()                          
  --ORDER BY EServiceBarcodeID                              
  -- changed order to NEWID() on 6th Aug 2019 by Shamim to improve performance                          
  print @EServiceBarcodeID                            
  if @EServiceBarcodeID is null                             
  begin                            
   print 213132123                            
   SET @ErrorMessage = 'CompetitionBarcodesFinished'                               
  end                             
  else                            
  begin                            
                            
                                         
                                    
   INSERT INTO coc_ECouponParticipations (                                    
    ECouponID                                    
    ,ParticipationDate                                    
    ,Barcode                                    
    ,ParticipationMobile                                    
    ,ParticipationEmailID                                    
    ,ConsumerID                                    
    ,GuestID                                  
     ,RetailOutletID                                    
    ,EnteredStandardBarcode    
 ,Longitude    
 ,Latitude    
 ,ClosestRetailoutletID                                  
    )                                    
   SELECT @EcouponID                                    
    ,GETDATE()                                    
    ,@Barcode                                    
    ,@Mobile                                    
    ,@Email                                    
    ,@ConsumerID                                   
    ,@GuestID                                   
    ,@RetailOutletID                                    
    ,@EnteredStandardBarcode    
    ,@ConsumerLongitude    
 ,@ConsumerLatitude    
 ,@ClosestRetailoutletID    
     
                                     
                                    
     UPDATE coc_EServiceBarcodes                                    
     SET AsignedMoile = @Mobile                                    
   ,IsUsed = 1                                    
   ,UsedDate = GETDATE()                                    
   ,ConsumerID = @ConsumerID                                    
   ,GuestID = @GuestID                          
   ,StandardBarcodeValue = @StandardBarcodeValue                                    
     WHERE EServiceBarcodeID = @EServiceBarcodeID                                    
                                    
   if(@ConsumerID is not null)   
   begin                                  
     EXEC AddCustomerLoyaltyPoints                                     
   @EcouponID,                                    
   @ConsumerID,                                    
   @LoyaltyPointSetupID,                                    
   @ErrorMessage OUTPUT                                    
                                    
     EXEC SaveNotificationSending                                    
       @NotificationID                                    
       ,@EcouponID                                    
       ,@ConsumerID                                    
       ,@GeneralNotificationTemplateID                                    
       ,@EServiceID                                    
       ,@Barcode                                    
        ,@ErrorMessage OUTPUT                            
    end
    end
    end
   end
   else 
   BEGIN                                    
    SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid' ---'Barcode is Already Used OR Invalid Barcode'                                     
   END                                    
                                    
   IF @ErrorMessage = ''                                    
   BEGIN                                    
    -------------------------------------------------------------------//                                    
    --//-------------------------------------------------------                                    
    DECLARE @return_value1 INT                                    
  if(@ConsumerID is not null)                                  
    EXEC @return_value1 = [dbo].[SaveEServiceAddOnConsumers] @ConsumerID = @ConsumerID                                    
     ,@EServiceID = @EServiceID                                    
                  
    PRINT '@return_value1'                                    
    PRINT @return_value1                                    
     --------------------------------------------------------------------//                                    
   END            
                                    
                                   
                                    
                                   
  END                                    
  SELECT @ErrorMessage                        
  select @ParticipationBarcode = @Barcode    
  COMMIT TRANSACTION SaveECouponPurchases                                   
 END TRY                                    
                                    
 BEGIN CATCH                                    
 ROLLBACK TRANSACTION SaveECouponPurchases                                    
 SELECT @ErrorMessage = ERROR_MESSAGE();                                  
 declare @error int; select @error = ERROR_NUMBER();                                    
 Raiserror ('SaveECouponPurchases: %d: %s', 16, 1, @error, @ErrorMessage) ;                                  
 END CATCH                
                                    
END                       
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveECouponPurchasesForFindTheT]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveECouponPurchasesForFindTheT]                               
  @Barcode [NullDescription] = NULL                              
 ,@DecryptBarcode [NullDescription] = NULL                            
 ,@IPAddress nvarchar(150)=null                              
 ,@EcouponID INTEGER                              
 ,@ConsumerID INTEGER = NULL                              
 ,@GuestID INT = NULL                              
 ,@Mobile [Mobile] = NULL                              
 ,@Email [Email] = NULL                              
 ,@EligibleCoupons INTEGER = NULL                              
 ,@WrongAnswer INTEGER = NULL                              
 ,@ErrorMessage [Remark] = NULL OUTPUT                 
 ,@MacAddress nvarchar(150)=null  
AS                              
SET XACT_ABORT ON;                              
                              
BEGIN       
 if(@Mobile='')      
 set @Mobile=NULL      
 if(@Email='')      
 set @Email=NULL      
                             
 IF (@ConsumerID = 0)                              
  SET @ConsumerID = NULL;                              
                              
 IF (@GuestID = 0)                              
  SET @GuestID = NULL        
                             
 DECLARE @NumberOfConsumerParticipations_N INT                              
 DECLARE @NumberOfGuestParticipations_N INT                              
 DECLARE @Participations_N INT                              
 DECLARE @NoOfCoponsLeft INT;                              
 DECLARE @NumberOfCopons INT;   
 Declare @ConsumerName nvarchar(250)  
   
    
 SET @NumberOfCopons = 1;                              
                              
 IF @ConsumerID IS NOT NULL                              
 BEGIN                              
  SELECT @NumberOfConsumerParticipations_N = ISNULL(NumberOfConsumerParticipations, 0)                              
  FROM coc_ECoupons(NOLOCK)                              
  WHERE ECouponID = @EcouponID                              
                              
  SELECT @Participations_N = count(*)                              
  FROM coc_ECouponParticipations(NOLOCK) CP                              
  WHERE ConsumerID = @ConsumerID                              
   AND ECouponID = @EcouponID                              
                              
  IF (@NumberOfConsumerParticipations_N < (@NumberOfCopons + @Participations_N))                              
  BEGIN                              
   SET @ErrorMessage = 'Number of coupons exceeds Number of consumer participations count';                              
   insert into coc_SadafcoBarcodesFailure          
   select @ConsumerID,null,@Barcode,@ErrorMessage,getdate()                           
   RETURN;                              
  END                              
 END                              
 ELSE                              
 BEGIN                              
  SELECT @NumberOfGuestParticipations_N = ISNULL(NumberOfGuestParticipations, 0)                              
  FROM coc_ECoupons(NOLOCK)                              
  WHERE ECouponID = @EcouponID                              
                              
  SELECT @Participations_N = count(*)                              
  FROM coc_ECouponParticipations(NOLOCK) CP                              
  WHERE GuestID = @GuestID                              
   AND ECouponID = @EcouponID;                              
                              
  IF (@NumberOfGuestParticipations_N < (@NumberOfCopons + @Participations_N))                              
  BEGIN                              
   SET @ErrorMessage = 'Number of coupons exceeds Number of guest participations count';                              
     insert into coc_SadafcoBarcodesFailure          
   select @ConsumerID,null,@Barcode,@ErrorMessage,getdate()                          
   RETURN;                              
  END                              
 END                              
                              
 BEGIN TRANSACTION SaveECouponPurchases          
                              
 BEGIN TRY                              
  DECLARE @EserviceTypeID INTEGER                              
  DECLARE @EServiceBarcodeID INTEGER                              
  --DECLARE @Points INTEGER                                          
  DECLARE @QuestionOptionID INTEGER                              
  DECLARE @SelectedAnswer INTEGER                              
  DECLARE @EServiceID INTEGER                         
  DECLARE @NotificationID INTEGER                              
  --DECLARE @NotificationSendID INTEGER                                          
  DECLARE @LanguageID INTEGER                              
  DECLARE @CompetitionName NVARCHAR(200)                              
  DECLARE @EnteredStandardBarcode [NullDescription]                              
  DECLARE @LoyaltyPointSetupID INT = 103                              
  DECLARE @GeneralNotificationTemplateID INT = 14                              
                              
  SET @ErrorMessage = ''                
                              
  IF (@ConsumerID IS NOT NULL)                              
  BEGIN                              
   IF @Email IS NULL                              
    SELECT @Email = EmailID                              
    FROM coc_Consumers(NOLOCK)                              
WHERE ConsumerID = @ConsumerID                              
                              
   IF @Mobile IS NULL                              
    SELECT @Mobile = PrimaryMobile                              
    FROM coc_Consumers(NOLOCK)                  
    WHERE ConsumerID = @ConsumerID                              
  END                              
  ELSE IF (@GuestID IS NOT NULL)                              
  BEGIN                              
   IF @Email IS NULL                              
    SELECT @Email = EmailID                              
    FROM coc_guests(NOLOCK)                              
    WHERE GuestID = @GuestID                              
                              
   IF @Mobile IS NULL                              
    SELECT @Mobile = PrimaryMobile                              
    FROM coc_guests(NOLOCK)                              
    WHERE GuestID = @GuestID                              
  END                              
                              
  IF @EcouponID = 10066                              
   AND (                              
    @Mobile IS NULL                              
    OR len(@Mobile) <> 14                              
    OR (                              
  SUBSTRING(@Mobile, 1, 6) <> '009627'                              
     AND SUBSTRING(@Mobile, 1, 6) <> '009665'                              
     )                              
    )                              
  BEGIN                              
   SET @ErrorMessage = 'InvalidMobile'                              
  END                              
  ELSE IF @EcouponID = 10100                         
   AND (                              
    @Mobile IS NULL                              
    OR len(@Mobile) <> 14                              
    OR (                              
     SUBSTRING(@Mobile, 1, 6) <> '009715'                              
     AND SUBSTRING(@Mobile, 1, 6) <> '009665'                              
     )                              
    )                              
  BEGIN                              
   SET @ErrorMessage = 'InvalidMobile'                              
  END                              
  ELSE IF @EcouponID <> 10100                              
   AND @EcouponID <> 10066                              
   AND (                              
    @Mobile IS NULL                              
    OR len(@Mobile) <> 14                              
    OR SUBSTRING(@Mobile, 1, 6) <> '009665'                              
    )                              
  BEGIN                              
   SET @ErrorMessage = 'InvalidMobile'                              
  END                              
  ELSE IF @Email IS NULL                              
  BEGIN                              
   SET @ErrorMessage = 'InvalidEmail'     
  END                              
  ELSE                              
  BEGIN                              
   IF (ISNULL(@EligibleCoupons, 0) = 0)                              
    SET @EligibleCoupons = 1                              
                              
   DECLARE @BarCodes TABLE (                              
    EServiceBarcodeID INTEGER                              
    ,AsignedMoile [Mobile]                              
    ,Barcode [NullDescription]                              
    ,NotificationID INTEGER                              
    ,IsUsed BIT                              
    )                              
                              
   --//----------------------------------------------------------------                                          
   SELECT @EServiceID = EServiceID                              
   FROM coc_ECoupons(NOLOCK)                              
   WHERE EcouponID = @EcouponID                              
                              
   DECLARE @errortext [Remark]                              
   DECLARE @return_value INT                              
                              
   IF (@ConsumerId IS NOT NULL)                     
   BEGIN                              
    EXEC @return_value = [dbo].[ValidateConsumerForECouponVoucher] @ConsumerId = @ConsumerID                              
     ,@EserviceId = @EServiceID                              
     ,@errortext = @errortext OUTPUT                              
                              
    PRINT @ConsumerId                              
    PRINT @EserviceId                              
    PRINT @errortext                              
                              
    IF (@errortext != '0')                              
    BEGIN                              
     SET @ErrorMessage = @errortext                              
                              
 SELECT @ErrorMessage                              
                              
     ROLLBACK TRANSACTION SaveECouponPurchases                              
       insert into coc_SadafcoBarcodesFailure          
   select @ConsumerID,null,@Barcode,@ErrorMessage,getdate()                        
     RETURN;                              
    END                              
   END                              
                              
   SET XACT_ABORT ON;                              
                              
   DECLARE @AllowStandardBarcode BIT                              
   DECLARE @StandardBarcodeValue [NullDescription]                              
   DECLARE @NumberOfConsumerParticipations INT                              
   DECLARE @StandardBarcodeByRetailOutlet BIT                              
   DECLARE @StandardBarcodeByQuestionBank BIT                              
   DECLARE @TotalAllowedParticipationPerCustomer INT                              
   DECLARE @TotalAllowedParticipationPerCustomerPerDay INT                              
   DECLARE @AllowedParticipationPerBarcodePerCustomer INT                             
   DECLARE @AllowedParticipationPerBarcodePerCustomerPerDay INT                              
   --declare @TotalAllowedParticipationPerGuest int                                          
   --declare @TotalAllowedParticipationPerGuestPerDay int                                          
   DECLARE @ECouponStandardBarcodeID BIGINT                              
   DECLARE @Outlet_TotalAllowedParticipationPerCustomer INT                              
   DECLARE @Outlet_TotalAllowedParticipationPerCustomerPerDay INT                              
   DECLARE @Outlet_TotalAllowedParticipationInOutlet INT                              
   DECLARE @Outlet_TotalAllowedParticipationPerBarcode INT                              
   DECLARE @RetailOutletID INT                              
   DECLARE @cnt_TotalCompetitionParticipation INTEGER                              
   DECLARE @cnt_TotalCompetitionParticipationToday INTEGER                              
   DECLARE @cnt_TotalCompetitionBarcodeParticipation INTEGER                              
   DECLARE @cnt_TotalCompetitionParticipationForOutlet INTEGER                        
   DECLARE @cnt_TotalCustParticipation INTEGER                              
   DECLARE @cnt_TotalCustParticipationToday INTEGER                              
   DECLARE @cnt_TotalCustBarcodeParticipation INTEGER                              
   DECLARE @cnt_TotalCustBarcodeParticipationToday INTEGER                              
   DECLARE @cnt_TotalOutletParticipation INTEGER                              
   DECLARE @cnt_TotalCustOutletParticipation INTEGER                              
   DECLARE @cnt_TotalCustOutletParticipationToday INTEGER    
   Declare @WinnerBarcode [NullDescription] = NULL  
   Declare @RandomBarcode [NullDescription] = NULL  
   Declare @ECouponParticipationID bigint  
                              
   SELECT @EServiceID = EServiceID                              
    ,@AllowStandardBarcode = ISNULL(AllowStandardBarcode, 0)                              
    ,@StandardBarcodeValue = ISNULL(StandardBarcodeValue, '')                              
    ,@NumberOfConsumerParticipations = ISNULL(NumberOfConsumerParticipations, 1)                              
    ,@StandardBarcodeByRetailOutlet = ISNULL(StandardBarcodeByRetailOutlet, 0)                              
    ,@StandardBarcodeByQuestionBank = ISNULL(StandardBarcodeByQuestionBank, 0)                              
    ,@TotalAllowedParticipationPerCustomer = ISNULL(TotalAllowedParticipationPerCustomer, 0)                              
    ,@TotalAllowedParticipationPerCustomerPerDay = ISNULL(TotalAllowedParticipationPerCustomerPerDay, ISNULL(TotalAllowedParticipationPerCustomer, 0))                              
    ,@AllowedParticipationPerBarcodePerCustomer = ISNULL(AllowedParticipationPerBarcodePerCustomer, 0)                              
    ,@AllowedParticipationPerBarcodePerCustomerPerDay = ISNULL(AllowedParticipationPerBarcodePerCustomerPerDay, ISNULL(AllowedParticipationPerBarcodePerCustomer, 0))                              
    ,                              
    --@TotalAllowedParticipationPerGuest = ISNULL(TotalAllowedParticipationPerGuest, 0),                                          
    --@TotalAllowedParticipationPerGuestPerDay = ISNULL(TotalAllowedParticipationPerGuestPerDay, 0),                                          
    @EserviceTypeID = EntryTypeID                              
   FROM coc_ECoupons(NOLOCK)                              
   WHERE ECouponID = @EcouponID                              
                              
 --check barcode  is available or not    
 if EXISTS(select EServiceBarcodeID from coc_SpecialBarcodes(NOLOCK) where Barcode = @Barcode)   
 begin  
   -- check barcode is used or not  
     if EXISTS(select EServiceBarcodeID from coc_SpecialBarcodes(NOLOCK) where Barcode = @Barcode and IsUsed=1)   
     begin  
      -- used barcode  
   if EXISTS(select EServiceBarcodeID from coc_EServiceBarcodes(NOLOCK) where Barcode = @Barcode and IsUsed=1 and (ConsumerID=@ConsumerID or GuestID=@GuestID))   
     SET @ErrorMessage = 'You have already used this barcode';   
   else  
     SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid';   
         ROLLBACK TRANSACTION SaveECouponPurchases           
         RETURN;              
  end  
  else   -- not used  
  begin  
      select top 1 @RetailOutletID=RetailOutletID from coc_SpecialBarcodes(NOLOCK) where Barcode = @Barcode  
      -- Check winner is already there or not within same reatil outlet id  
   if NOT EXISTS(select EServiceBarcodeID from coc_SpecialBarcodes(NOLOCK) where RetailOutletID =@RetailOutletID and IsWinner=1)   
          begin  -- not there  
  
       SELECT top 1 @RandomBarcode=Barcode FROM coc_SpecialBarcodes(nolock) where RetailOutletID=@RetailOutletID and IsUsed=0 ORDER BY NEWID()   
    if(@RandomBarcode=@Barcode)  
    begin  
        -- he is winner  
     set @WinnerBarcode=@Barcode  
           update coc_SpecialBarcodes set IsUsed=1,IsWinner=1,UsedDate=getdate() where Barcode = @Barcode and IsUsed=0  
    end  
    end  
  end  
 end  
  
                                         
  IF @EserviceTypeID = 41                           
  --AND @AllowStandardBarcode = 0                         
  set @NotificationID=0                           
    SELECT @EserviceTypeID = EC.EntryTypeID,                      
 @NotificationID = NS.NotificationID                               
    FROM coc_ECoupons EC(NOLOCK)                              
    INNER JOIN coc_Notifications NS(NOLOCK) ON NS.EServiceID = EC.EServiceID                              
    LEFT JOIN coc_EServiceBarcodes BC(NOLOCK) ON BC.NotificationID = NS.NotificationID                              
    WHERE (                              
      --@EcouponID IS NULL  OR           
   -- commented by shamim (6th Aug 2019 as it was slowing query)          
   EC.ECouponID = @EcouponID                              
      )                              
     AND (                              
      --@BarCode IS NULL   OR           
   -- commented by shamim (6th Aug 2019 as it was slowing query)          
   BC.Barcode = @BarCode                              
      )                              
   AND                          
   (                          
  BC.GuestID IS NULL AND BC.ConsumerID IS NULL AND bc.UsedDate IS NULL AND BC.AsignedMoile IS NULL                          
   )                          
                              
                                 
                              
    IF (@EserviceTypeID = 41)                              
   BEGIN                             
    DECLARE @IsCorrectAnswer INT                              
        IF NOT EXISTS (                              
      SELECT NULL                              
      FROM coc_EServiceBarcodes(NOLOCK)                              
      WHERE Barcode = @BarCode                              
       AND @EserviceTypeID IN (41) AND ConsumerID IS NULL                             
      )                              
     --AND @AllowStandardBarcode = 0 --AND ConsumerID=@ConsumerID                                          
    BEGIN                              
     SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                              
    END                              
    ELSE                              
    BEGIN                              
     IF NOT EXISTS (                              
     SELECT NULL                            
       FROM coc_ECouponParticipations(NOLOCK)                              
       WHERE Barcode = @Barcode                              
        AND (                              
         ConsumerID = @ConsumerID                              
         OR GuestID = @GuestID                              
         )                              
        AND ECouponID = @EcouponID                              
       )                              
     BEGIN                        
      INSERT INTO coc_ECouponParticipations (                              
       ECouponID                              
       ,ParticipationDate                              
       ,Barcode                              
       ,ParticipationMobile                              
       ,ParticipationEmailID                              
       ,ConsumerID                              
       ,GuestID                  
     ,IsFromCompetitionLink                            
       )                              
      SELECT @EcouponID                              
       ,GETDATE()                              
       ,@Barcode                              
       ,@Mobile                              
       ,@Email                              
     ,@ConsumerID                              
       ,@GuestID                              
        ,1    
    
  set @ECouponParticipationID=SCOPE_IDENTITY()  
  
      SELECT TOP (1) @EServiceBarcodeID = EServiceBarcodeID                              
      FROM coc_EServiceBarcodes(NOLOCK)                              
      WHERE Barcode = @BarCode   AND                          
      (                          
        GuestID IS NULL AND ConsumerID IS NULL AND UsedDate IS NULL AND AsignedMoile IS NULL                          
      )                       
                              
      UPDATE coc_EServiceBarcodes                              
      SET AsignedMoile = @Mobile                              
       ,IsUsed = 1                              
       ,UsedDate = GETDATE()                       
    ,ConsumerID = @ConsumerID                             
      WHERE EServiceBarcodeID = @EServiceBarcodeID            
                              
      IF (@ConsumerID IS NOT NULL)                              
      BEGIN                              
  EXEC AddCustomerLoyaltyPoints @EcouponID                              
        ,@ConsumerID                              
        ,@LoyaltyPointSetupID                              
        ,@ErrorMessage OUTPUT                       
                               
     if(@NotificationID<>0)                          
       EXEC SaveNotificationSending @NotificationID                              
        ,@EcouponID                              
        ,@ConsumerID                              
        ,@GeneralNotificationTemplateID                              
        ,@EServiceID                              
        ,@Barcode                              
        ,@ErrorMessage OUTPUT                              
      END                              
     END                              
     ELSE                              
     BEGIN                              
      SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                              
     END                              
    END                        
                            
   END                                 
   ELSE                              
   BEGIN                              
    SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid' ---'Barcode is Already Used OR Invalid Barcode'                                           
   END                              
                              
   IF @ErrorMessage = ''                              
   BEGIN                              
    -------------------------------------------------------------------//                                          
    --//-------------------------------------------------------                                          
    DECLARE @return_value1 INT                              
                              
    IF (@ConsumerID IS NOT NULL)                              
     EXEC @return_value1 = [dbo].[SaveEServiceAddOnConsumers] @ConsumerID = @ConsumerID                              
      ,@EServiceID = @EServiceID                              
                              
    PRINT '@return_value1'                              
    PRINT @return_value1                              
     --------------------------------------------------------------------//                                          
   END           
   ELSE          
   BEGIN          
       insert into coc_SadafcoBarcodesFailure          
       select @ConsumerID,null,@Barcode,@ErrorMessage,getdate()          
             
   END                             
  END             
  COMMIT TRANSACTION SaveECouponPurchases     
    
     if EXISTS(select EServiceBarcodeID from coc_SpecialBarcodes(NOLOCK) where Barcode = @Barcode and IsUsed=0)   
     begin  
     update coc_SpecialBarcodes set IsUsed=1,UsedDate=getdate() where Barcode = @Barcode and IsUsed=0  
  end  
  if(@WinnerBarcode=@Barcode)  
  begin  
     -- winner process  
      
   DECLARE @ReturnValue [Remark]    
   DECLARE @result [Remark]    
   Declare @CorporateUserID int  
   Declare @DrawPrizeID bigint=0  
   Declare @TypeID int  
   Declare @MembershipID NVARCHAR(20)  
   Declare @ECouponDrawID bigint  
  
   if(@GuestID is not null)  
   begin  
     set @TypeID=1  
     select  @ConsumerName=ISNULL(EP.ConsumerName, ISNULL(CS.FirstName,'')+' '+ISNULL(CS.SecondName,'')+' '+ISNULL(CS.FamilyName,'')),  
     @MembershipID=CS.MembershipNumber  
      from coc_ECouponParticipations EP(NOLOCK)        
              INNER JOIN coc_Consumers CS(NOLOCK) ON EP.ConsumerID=CS.ConsumerID        
            WHERE CS.ConsumerID = @ConsumerID    
   end  
         if(@ConsumerID is not null)  
   begin  
     set @TypeID=2  
     select @ConsumerName=ISNULL(EP.ConsumerName, GS.FullName) , @MembershipID=NULL      
             FROM  coc_ECouponParticipations EP(NOLOCK)        
              INNER JOIN coc_Guests GS(NOLOCK) ON EP.GuestID=GS.GuestID      
           WHERE GS.GuestID = @GuestID   
   end  
   select @CorporateUserID=UserID from coc_Corporates(nolock) where CorporateID=(select CorporateID from coc_EServices(nolock) where EServiceID=@EServiceID)  
   select @ECouponDrawID=ECouponDrawID from coc_SpecialBarcodes(NOLOCK) where Barcode = @Barcode  
   select top 1 @DrawPrizeID=ECouponDrawPrizeID from coc_ECouponDrawPrizes(nolock) where ECouponDrawID=@ECouponDrawID  
  
   if(@DrawPrizeID<>0)  
   begin  
       EXEC SaveResultDeclaration_New  @EServiceID, @CorporateUserID, @DrawPrizeID, @ConsumerID, @GuestID, @TypeID, @ECouponParticipationID, @Mobile, @ConsumerName, @Email, @MembershipID, @ReturnValue= @result OUTPUT        
     Print @result    
      IF(@result != '')        
       BEGIN        
     SET @ReturnValue = @result        
     SET @ErrorMessage=@result  
       END    
     SET @ErrorMessage='winner'  
       
  
      end   
  
  
  end  
  
  SELECT @ErrorMessage           
 END TRY                              
                              
 BEGIN CATCH                              
  ROLLBACK TRANSACTION SaveECouponPurchases                             
                              
  SELECT @ErrorMessage = ERROR_MESSAGE();                              
   insert into coc_SadafcoBarcodesFailure          
   select @ConsumerID,null,@Barcode,@ErrorMessage,getdate()                            
  DECLARE @error INT;                              
                              
  SELECT @error = ERROR_NUMBER();            
                              
  RAISERROR (                              
    'SaveECouponPurchases: %d: %s'                              
    ,16                              
    ,1                              
    ,@error                              
    ,@ErrorMessage                              
    );                              
 END CATCH                              
END                              
                              
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveECouponPurchasesForSadafco]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  

CREATE PROCEDURE [dbo].[SaveECouponPurchasesForSadafco]                     
  @Barcode [NullDescription] = NULL                    
 ,@DecryptBarcode [NullDescription] = NULL                  
 ,@IPAddress nvarchar(150)=null                    
 ,@EcouponID INTEGER                    
 ,@ConsumerID INTEGER = NULL                    
 ,@GuestID INT = NULL                    
 ,@Mobile [Mobile] = NULL                    
 ,@Email [Email] = NULL                    
 ,@EligibleCoupons INTEGER = NULL                    
 ,@WrongAnswer INTEGER = NULL                    
 ,@ErrorMessage [Remark] = NULL OUTPUT       
 ,@MacAddress nvarchar(150)=null                                 
AS                    
SET XACT_ABORT ON;                    
                    
BEGIN                    
 IF (@ConsumerID = 0)                    
  SET @ConsumerID = NULL;                    
                    
 IF (@GuestID = 0)                    
  SET @GuestID = NULL                    
                    
 DECLARE @NumberOfConsumerParticipations_N INT                    
 DECLARE @NumberOfGuestParticipations_N INT                    
 DECLARE @Participations_N INT                    
 DECLARE @NoOfCoponsLeft INT;                    
 DECLARE @NumberOfCopons INT;                    
                    
 SET @NumberOfCopons = 1;                    
                    
 IF @ConsumerID IS NOT NULL                    
 BEGIN                    
  SELECT @NumberOfConsumerParticipations_N = ISNULL(NumberOfConsumerParticipations, 0)                    
  FROM coc_ECoupons(NOLOCK)                    
  WHERE ECouponID = @EcouponID                    
                    
  SELECT @Participations_N = count(*)                    
  FROM coc_ECouponParticipations(NOLOCK) CP                    
  WHERE ConsumerID = @ConsumerID                    
   AND ECouponID = @EcouponID                    
                    
  IF (@NumberOfConsumerParticipations_N < (@NumberOfCopons + @Participations_N))                    
  BEGIN                    
   SET @ErrorMessage = 'Number of coupons exceeds Number of consumer participations count';                    
   insert into coc_SadafcoBarcodesFailure
   select @ConsumerID,null,@Barcode,@ErrorMessage,getdate()                 
   RETURN;                    
  END                    
 END                    
 ELSE                    
 BEGIN                    
  SELECT @NumberOfGuestParticipations_N = ISNULL(NumberOfGuestParticipations, 0)                    
  FROM coc_ECoupons(NOLOCK)                    
  WHERE ECouponID = @EcouponID                    
                    
  SELECT @Participations_N = count(*)                    
  FROM coc_ECouponParticipations(NOLOCK) CP                    
  WHERE GuestID = @GuestID                    
   AND ECouponID = @EcouponID;                    
                    
  IF (@NumberOfGuestParticipations_N < (@NumberOfCopons + @Participations_N))                    
  BEGIN                    
   SET @ErrorMessage = 'Number of coupons exceeds Number of guest participations count';                    
     insert into coc_SadafcoBarcodesFailure
   select @ConsumerID,null,@Barcode,@ErrorMessage,getdate()                
   RETURN;                    
  END                    
 END                    
                    
 BEGIN TRANSACTION SaveECouponPurchases                    
                    
 BEGIN TRY                    
  DECLARE @EserviceTypeID INTEGER                    
  DECLARE @EServiceBarcodeID INTEGER                    
  --DECLARE @Points INTEGER                                
  DECLARE @QuestionOptionID INTEGER                    
  DECLARE @SelectedAnswer INTEGER                    
  DECLARE @EServiceID INTEGER                    
  DECLARE @NotificationID INTEGER                    
  --DECLARE @NotificationSendID INTEGER                                
  DECLARE @LanguageID INTEGER                    
  DECLARE @CompetitionName NVARCHAR(200)                    
  DECLARE @EnteredStandardBarcode [NullDescription]                    
  DECLARE @LoyaltyPointSetupID INT = 103                    
  DECLARE @GeneralNotificationTemplateID INT = 14                    
                    
  SET @ErrorMessage = ''      
                    
  IF (@ConsumerID IS NOT NULL)                    
  BEGIN                    
   IF @Email IS NULL                    
    SELECT @Email = EmailID                    
    FROM coc_Consumers(NOLOCK)                    
WHERE ConsumerID = @ConsumerID                    
                    
   IF @Mobile IS NULL                    
    SELECT @Mobile = PrimaryMobile                    
    FROM coc_Consumers(NOLOCK)        
    WHERE ConsumerID = @ConsumerID                    
  END                    
  ELSE IF (@GuestID IS NOT NULL)                    
  BEGIN                    
   IF @Email IS NULL                    
    SELECT @Email = EmailID                    
    FROM coc_guests(NOLOCK)                    
    WHERE GuestID = @GuestID                    
                    
   IF @Mobile IS NULL                    
    SELECT @Mobile = PrimaryMobile                    
    FROM coc_guests(NOLOCK)                    
    WHERE GuestID = @GuestID                    
  END                    
                    
  IF @EcouponID = 10066                    
   AND (                    
    @Mobile IS NULL                    
    OR len(@Mobile) <> 14                    
    OR (                    
  SUBSTRING(@Mobile, 1, 6) <> '009627'                    
     AND SUBSTRING(@Mobile, 1, 6) <> '009665'                    
     )                    
    )                    
  BEGIN                    
   SET @ErrorMessage = 'InvalidMobile'                    
  END                    
  ELSE IF @EcouponID = 10100               
   AND (                    
    @Mobile IS NULL                    
    OR len(@Mobile) <> 14                    
    OR (                    
     SUBSTRING(@Mobile, 1, 6) <> '009715'                    
     AND SUBSTRING(@Mobile, 1, 6) <> '009665'                    
     )                    
    )                    
  BEGIN                    
   SET @ErrorMessage = 'InvalidMobile'                    
  END                    
  ELSE IF @EcouponID <> 10100                    
   AND @EcouponID <> 10066                    
   AND (                    
    @Mobile IS NULL                    
    OR len(@Mobile) <> 14                    
    OR SUBSTRING(@Mobile, 1, 6) <> '009665'                    
    )                    
  BEGIN                    
   SET @ErrorMessage = 'InvalidMobile'                    
  END                    
  ELSE IF @Email IS NULL                    
  BEGIN                    
   SET @ErrorMessage = 'InvalidEmail'                    
  END                    
  ELSE                    
  BEGIN                    
   IF (ISNULL(@EligibleCoupons, 0) = 0)                    
    SET @EligibleCoupons = 1                    
                    
   DECLARE @BarCodes TABLE (                    
    EServiceBarcodeID INTEGER                    
    ,AsignedMoile [Mobile]                    
    ,Barcode [NullDescription]                    
    ,NotificationID INTEGER                    
    ,IsUsed BIT                    
    )                    
                    
   --//----------------------------------------------------------------                                
   SELECT @EServiceID = EServiceID                    
   FROM coc_ECoupons(NOLOCK)                    
   WHERE EcouponID = @EcouponID                    
                    
   DECLARE @errortext [Remark]                    
   DECLARE @return_value INT                    
                    
   IF (@ConsumerId IS NOT NULL)                    
   BEGIN                    
    EXEC @return_value = [dbo].[ValidateConsumerForECouponVoucher] @ConsumerId = @ConsumerID                    
     ,@EserviceId = @EServiceID                    
     ,@errortext = @errortext OUTPUT                    
                    
    PRINT @ConsumerId                    
    PRINT @EserviceId                    
    PRINT @errortext                    
                    
    IF (@errortext != '0')                    
    BEGIN                    
     SET @ErrorMessage = @errortext                    
                    
 SELECT @ErrorMessage                    
                    
     ROLLBACK TRANSACTION SaveECouponPurchases                    
       insert into coc_SadafcoBarcodesFailure
   select @ConsumerID,null,@Barcode,@ErrorMessage,getdate()              
     RETURN;                    
    END                    
   END                    
                    
   SET XACT_ABORT ON;                    
                    
   DECLARE @AllowStandardBarcode BIT                    
   DECLARE @StandardBarcodeValue [NullDescription]                    
DECLARE @NumberOfConsumerParticipations INT                    
   DECLARE @StandardBarcodeByRetailOutlet BIT                    
   DECLARE @StandardBarcodeByQuestionBank BIT                    
   DECLARE @TotalAllowedParticipationPerCustomer INT                    
   DECLARE @TotalAllowedParticipationPerCustomerPerDay INT                    
   DECLARE @AllowedParticipationPerBarcodePerCustomer INT                   
   DECLARE @AllowedParticipationPerBarcodePerCustomerPerDay INT                    
   --declare @TotalAllowedParticipationPerGuest int                                
   --declare @TotalAllowedParticipationPerGuestPerDay int                                
   DECLARE @ECouponStandardBarcodeID BIGINT                    
   DECLARE @Outlet_TotalAllowedParticipationPerCustomer INT                    
   DECLARE @Outlet_TotalAllowedParticipationPerCustomerPerDay INT                    
   DECLARE @Outlet_TotalAllowedParticipationInOutlet INT                    
   DECLARE @Outlet_TotalAllowedParticipationPerBarcode INT                    
   DECLARE @RetailOutletID INT                    
   DECLARE @cnt_TotalCompetitionParticipation INTEGER                    
   DECLARE @cnt_TotalCompetitionParticipationToday INTEGER                    
   DECLARE @cnt_TotalCompetitionBarcodeParticipation INTEGER                    
   DECLARE @cnt_TotalCompetitionParticipationForOutlet INTEGER                    
   DECLARE @cnt_TotalCustParticipation INTEGER                    
   DECLARE @cnt_TotalCustParticipationToday INTEGER                    
   DECLARE @cnt_TotalCustBarcodeParticipation INTEGER                    
   DECLARE @cnt_TotalCustBarcodeParticipationToday INTEGER                    
   DECLARE @cnt_TotalOutletParticipation INTEGER                    
   DECLARE @cnt_TotalCustOutletParticipation INTEGER                    
   DECLARE @cnt_TotalCustOutletParticipationToday INTEGER                    
                    
   SELECT @EServiceID = EServiceID                    
    ,@AllowStandardBarcode = ISNULL(AllowStandardBarcode, 0)                    
    ,@StandardBarcodeValue = ISNULL(StandardBarcodeValue, '')                    
    ,@NumberOfConsumerParticipations = ISNULL(NumberOfConsumerParticipations, 1)                    
    ,@StandardBarcodeByRetailOutlet = ISNULL(StandardBarcodeByRetailOutlet, 0)                    
    ,@StandardBarcodeByQuestionBank = ISNULL(StandardBarcodeByQuestionBank, 0)                    
    ,@TotalAllowedParticipationPerCustomer = ISNULL(TotalAllowedParticipationPerCustomer, 0)                    
    ,@TotalAllowedParticipationPerCustomerPerDay = ISNULL(TotalAllowedParticipationPerCustomerPerDay, ISNULL(TotalAllowedParticipationPerCustomer, 0))                    
    ,@AllowedParticipationPerBarcodePerCustomer = ISNULL(AllowedParticipationPerBarcodePerCustomer, 0)                    
    ,@AllowedParticipationPerBarcodePerCustomerPerDay = ISNULL(AllowedParticipationPerBarcodePerCustomerPerDay, ISNULL(AllowedParticipationPerBarcodePerCustomer, 0))                    
    ,                    
    --@TotalAllowedParticipationPerGuest = ISNULL(TotalAllowedParticipationPerGuest, 0),                                
    --@TotalAllowedParticipationPerGuestPerDay = ISNULL(TotalAllowedParticipationPerGuestPerDay, 0),                                
    @EserviceTypeID = EntryTypeID                    
   FROM coc_ECoupons(NOLOCK)                    
   WHERE ECouponID = @EcouponID                    
                    
 --check barcode  is available or not                 
                   if NOT EXISTS(select EServiceBarcodeID from coc_EServiceBarcodes(NOLOCK) where Barcode = @Barcode  AND ConsumerID IS NULL AND UsedDate IS NULL AND AsignedMoile IS NULL and IsUsed=1) AND            
  NOT EXISTS (                    
     SELECT NULL                    
       FROM coc_ECouponParticipations(NOLOCK)                    
       WHERE Barcode = @Barcode                    
        AND (                    
         ConsumerID = @ConsumerID                    
         OR GuestID = @GuestID                    
         )                    
        AND ECouponID = @EcouponID                    
       )               
  BEGIN                
            
   if EXISTS(select ID from coc_Sadafco_Participations(NOLOCK) where Barcode = @DecryptBarcode AND MacAddress is null AND IsUsed <> 1 and UsedDate is null)             
   AND       
   NOT EXISTS(select ID from coc_Sadafco_Participations(NOLOCK) where Barcode = @DecryptBarcode AND MacAddress = @MacAddress AND IsUsed= 1 and UsedDate >= DATEADD(hour,-2,GETDATE()))               
    BEGIN                
                
  DECLARE @SADAFCOID BIGINT = 0;                
  DECLARE @SADAFCOEserviceBarcodeID BIGINT=0;             
  DECLARE @SADAFCOBarcode nvarchar(150)=null;             
         
     select top 1 @SADAFCOEserviceBarcodeID = B.EserviceBarcodeID,@SADAFCOID = A.ID ,@SADAFCOBarcode = B.EncryptedBarcode        
  from coc_Sadafco_Participations A (NOLOCK) inner join coc_Sadafco_BarcodesMapping B(NOLOCK) on A.EserviceBarcodeID= B.EserviceBarcodeID        
  where  A.Barcode = @DecryptBarcode AND A.IPAddress is null AND A.IsUsed <> 1 and A.UsedDate is null          
     if(@SADAFCOID <> 0 and @SADAFCOEserviceBarcodeID <>0 and @SADAFCOBarcode is not null )        
   begin        
    UPDATE coc_Sadafco_Participations SET EserviceBarcodeID = @SADAFCOEserviceBarcodeID,IsUsed=1,UsedDate=GETDATE(),IPAddress=@IPAddress,MacAddress=@MacAddress WHERE ID = @SADAFCOID                      
    set @Barcode = @SADAFCOBarcode;        
   end          
    END       
  ELSE if EXISTS(select ID from coc_Sadafco_Participations(NOLOCK) where Barcode = @DecryptBarcode)        
    BEGIN      
  SET @ErrorMessage = 'You have already used this barcode';                    
        ROLLBACK TRANSACTION SaveECouponPurchases 
		 insert into coc_SadafcoBarcodesFailure
   select @ConsumerID,null,@Barcode,@ErrorMessage,getdate()        
     RETURN;    
 END--ELSE END       
                   
        
  END               
                   
                 
                
  IF @EserviceTypeID = 41                 
  --AND @AllowStandardBarcode = 0               
  set @NotificationID=0                 
    SELECT @EserviceTypeID = EC.EntryTypeID,            
 @NotificationID = NS.NotificationID                     
    FROM coc_ECoupons EC(NOLOCK)                    
    INNER JOIN coc_Notifications NS(NOLOCK) ON NS.EServiceID = EC.EServiceID                    
    LEFT JOIN coc_EServiceBarcodes BC(NOLOCK) ON BC.NotificationID = NS.NotificationID                    
    WHERE (                    
      --@EcouponID IS NULL  OR 
	  -- commented by shamim (6th Aug 2019 as it was slowing query)
	  EC.ECouponID = @EcouponID                    
      )                    
     AND (                    
      --@BarCode IS NULL   OR 
	  -- commented by shamim (6th Aug 2019 as it was slowing query)
	  BC.Barcode = @BarCode                    
      )                    
   AND                
   (                
  BC.GuestID IS NULL AND BC.ConsumerID IS NULL AND bc.UsedDate IS NULL AND BC.AsignedMoile IS NULL                
   )                
                    
                       
                    
    IF (@EserviceTypeID = 41)                    
   BEGIN                   
    DECLARE @IsCorrectAnswer INT                    
                
            
              
        IF NOT EXISTS (                    
      SELECT NULL                    
      FROM coc_EServiceBarcodes(NOLOCK)                    
      WHERE Barcode = @BarCode                    
       AND @EserviceTypeID IN (41) AND ConsumerID IS NULL                   
      )                    
     --AND @AllowStandardBarcode = 0 --AND ConsumerID=@ConsumerID                                
    BEGIN                    
     SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                    
    END                    
    ELSE                    
    BEGIN                    
     IF NOT EXISTS (                    
     SELECT NULL                  
       FROM coc_ECouponParticipations(NOLOCK)                    
       WHERE Barcode = @Barcode                    
        AND (                    
         ConsumerID = @ConsumerID                    
         OR GuestID = @GuestID                    
         )                    
        AND ECouponID = @EcouponID                    
       )                    
     BEGIN                    
      INSERT INTO coc_ECouponParticipations (                    
       ECouponID                    
       ,ParticipationDate                    
       ,Barcode                    
       ,ParticipationMobile                    
       ,ParticipationEmailID                    
       ,ConsumerID                    
       ,GuestID        
     ,IsFromCompetitionLink                  
       )                    
      SELECT @EcouponID                    
       ,GETDATE()                    
       ,@Barcode                    
       ,@Mobile                    
       ,@Email                    
       ,@ConsumerID                    
       ,@GuestID                    
        ,1            
      SELECT TOP (1) @EServiceBarcodeID = EServiceBarcodeID                    
      FROM coc_EServiceBarcodes(NOLOCK)                    
      WHERE Barcode = @BarCode   AND                
   (                
  GuestID IS NULL AND ConsumerID IS NULL AND UsedDate IS NULL AND AsignedMoile IS NULL                
   )             
                    
      UPDATE coc_EServiceBarcodes                    
      SET AsignedMoile = @Mobile                    
       ,IsUsed = 1                    
       ,UsedDate = GETDATE()             
    ,ConsumerID = @ConsumerID                   
      WHERE EServiceBarcodeID = @EServiceBarcodeID                    
                    
      IF (@ConsumerID IS NOT NULL)                    
      BEGIN                    
  EXEC AddCustomerLoyaltyPoints @EcouponID                    
        ,@ConsumerID                    
        ,@LoyaltyPointSetupID                    
        ,@ErrorMessage OUTPUT             
                     
     if(@NotificationID<>0)                
       EXEC SaveNotificationSending @NotificationID                    
        ,@EcouponID                    
        ,@ConsumerID                    
        ,@GeneralNotificationTemplateID                    
        ,@EServiceID                    
        ,@Barcode                    
        ,@ErrorMessage OUTPUT                    
      END                    
     END                    
     ELSE                    
     BEGIN                    
      SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid'                    
     END                    
    END              
                  
   END                       
   ELSE                    
   BEGIN                    
    SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid' ---'Barcode is Already Used OR Invalid Barcode'                                 
   END                    
                    
   IF @ErrorMessage = ''                    
   BEGIN                    
    -------------------------------------------------------------------//                                
    --//-------------------------------------------------------                                
    DECLARE @return_value1 INT                    
                    
    IF (@ConsumerID IS NOT NULL)                    
     EXEC @return_value1 = [dbo].[SaveEServiceAddOnConsumers] @ConsumerID = @ConsumerID                    
      ,@EServiceID = @EServiceID                    
                    
    PRINT '@return_value1'                    
    PRINT @return_value1                    
     --------------------------------------------------------------------//                                
   END 
   ELSE
   BEGIN
       insert into coc_SadafcoBarcodesFailure
       select @ConsumerID,null,@Barcode,@ErrorMessage,getdate()
   
   END 

                      
  END   
                   
                      SELECT @ErrorMessage                    
                    
  COMMIT TRANSACTION SaveECouponPurchases                   
 END TRY                    
                    
 BEGIN CATCH                    
  ROLLBACK TRANSACTION SaveECouponPurchases                   
                    
  SELECT @ErrorMessage = ERROR_MESSAGE();                    
   insert into coc_SadafcoBarcodesFailure
   select @ConsumerID,null,@Barcode,@ErrorMessage,getdate()                  
  DECLARE @error INT;                    
                    
  SELECT @error = ERROR_NUMBER();                    
                    
  RAISERROR (                    
    'SaveECouponPurchases: %d: %s'                    
    ,16                    
    ,1                    
    ,@error                    
    ,@ErrorMessage                    
    );                    
 END CATCH                    
END                    
                    
SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[SaveECouponQR]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveECouponQR]
	@Barcode [NullDescription],
	@EcouponID INTEGER,
	@ConsumerID INTEGER,
	@Mobile [Mobile],
	@Email [Email],
	@ErrorMessage [Remark]=NULL OUTPUT
AS
	SET NOCOUNT ON 
	BEGIN TRY 
		DECLARE @EserviceTypeID INTEGER
		DECLARE @EServiceBarcodeID INTEGER

		
		SELECT @EserviceTypeID=EC.EntryTypeID 
			FROM coc_ECoupons EC (NOLOCK)
				INNER JOIN coc_Notifications NS (NOLOCK) ON NS.EServiceID=EC.EServiceID
				INNER JOIN coc_EServiceBarcodes BC (NOLOCK) ON BC.NotificationID=NS.NotificationID
			WHERE BC.Barcode=@BarCode

--//-----------------------------------------
DECLARE @EServiceID INTEGER
		SELECT @EServiceID =  EServiceID FROM coc_ECoupons (NOLOCK) WHERE ECoUponID = @EcouponID
DECLARE @return_value INTEGER
DECLARE @errortext [Remark]

EXEC	@return_value = [dbo].[ValidateConsumerForECouponVoucher]
		@ConsumerId = @ConsumerID,
		@EserviceId = @EServiceID,
		@errortext = @errortext OUTPUT

		IF( @errortext != '0' )
		BEGIN
			SET @ErrorMessage = @errortext
			SELECT @ErrorMessage
			Return
		END
		
----------------------------------//
		IF NOT EXISTS(SELECT NULL FROM  coc_EServiceBarcodes(NOLOCK) WHERE Barcode=@BarCode AND ConsumerID=@ConsumerID AND @EserviceTypeID IN(41) AND IsUsed=0)
		BEGIN
			SET @ErrorMessage = 'Barcode is Already Used OR Invalid Barcode' 
		END
		ELSE BEGIN
			INSERT INTO coc_ECouponParticipations(ECouponID,ParticipationDate,Barcode,ParticipationMobile,ParticipationEmailID,ConsumerID)
				SELECT @EcouponID,GETDATE(),@Barcode,@Mobile,@Email,@ConsumerID

			SELECT TOP(1) @EServiceBarcodeID=EServiceBarcodeID FROM coc_EServiceBarcodes(NOLOCK) WHERE Barcode=@BarCode
			UPDATE coc_EServiceBarcodes SET
				AsignedMoile=@Mobile,
				IsUsed=1,
				UsedDate=GETDATE()
					WHERE EServiceBarcodeID=@EServiceBarcodeID

			SET @ErrorMessage =''
		END

		SELECT @ErrorMessage

	END TRY
	BEGIN CATCH									
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);			
	END CATCH
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveEcouponTemplate]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[SaveEcouponTemplate]
	@MessageTemplateID INTEGER, 
	@TemplateXML XML=NULL,
	@TemplateType TINYINT, 
	@UserID INTEGER,
	@IsActive BIT=NULL,
	@ReturnValue [Remark] OUTPUT
AS
SET NOCOUNT ON
	BEGIN
		BEGIN TRANSACTION TRN_EcouponTemplate
		BEGIN TRY 

		DECLARE @MessageTemplateLanguages AS TABLE
		(
			MessageTemplateID INTEGER,
			LanguageID INTEGER,
			TemplateTitle [Description],
			Template [Remark]
		)

		INSERT INTO @MessageTemplateLanguages
	    SELECT  ISNULL(@MessageTemplateID,0), 
			Consumers.value('(LanguageID[1])', 'INTEGER'),
			Consumers.value('(Title[1])', '[Description]'),
			Consumers.value('(Value[1])', '[Remark]') 
		FROM @TemplateXML.nodes('/XML/Row') AS ECoupons(Consumers);

		IF(ISNULL(@MessageTemplateID,0)=0)
		BEGIN
			INSERT INTO coc_MessageTemplates(TemplateType,IsActive,AddDate,AddUserID)
				SELECT  @TemplateType,@IsActive,GETDATE(),@UserID
				SET @MessageTemplateID=SCOPE_IDENTITY()

			INSERT INTO coc_MessageTemplateLanguages
				SELECT @MessageTemplateID,LanguageID,TemplateTitle,Template FROM @MessageTemplateLanguages
		END	ELSE
		BEGIN
			UPDATE TL
				SET  
					TemplateTitle=MT.TemplateTitle,
					Template=MT.Template
				FROM coc_MessageTemplateLanguages TL, @MessageTemplateLanguages MT
				WHERE TL.MessageTemplateID=MT.MessageTemplateID
		END
		SET @ReturnValue ='' 
		COMMIT TRANSACTION TRN_EcouponTemplate
		END TRY
		BEGIN CATCH
			SELECT @ReturnValue= ERROR_MESSAGE()
			ROLLBACK TRANSACTION TRN_EcouponTemplate
		END CATCH
	END
SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[SaveEcouponVoucher]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	Arya
-- Create date	:	16-12-2017
-- Description	:	Save Voucher for an ecopon to sent
-- =============================================

CREATE PROCEDURE [dbo].[SaveEcouponVoucher]
@ECouponVoucherID	INTEGER = 0,
@EServiceID			INTEGER,
@EVoucherID			INTEGER,
@NumberOfVouchers	INTEGER,
@IsActive			BIT		= 1

AS
	BEGIN
		IF(@ECouponVoucherID > 0)
			BEGIN
				UPDATE	[coc_ECouponVoucherSending] 
				SET		[EServiceID] = @EServiceID, 
						[EVoucherID] = @EVoucherID, 
						NoOfVouchers = @NumberOfVouchers 
				WHERE	[ECouponVoucherID] = @ECouponVoucherID
			END
	ELSE
		INSERT INTO [coc_ECouponVoucherSending]
					([EServiceID]	,[EVoucherID]   ,[NoOfVouchers]     ,[IsActive]) 
		VALUES		(@EServiceID	,@EVoucherID	,@NumberOfVouchers	,@IsActive)
	END
GO
/****** Object:  StoredProcedure [dbo].[SaveEmailSettings]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[SaveEmailSettings] 
	@SMTPServerIP [NullName]=NULL,
	@SMTPPort [NullName]=NULL,
	@AuthenticationType [NullName]=NULL,
	@EmailAddress [NullName]=NULL,
	@UserName [NullName]=NULL,
	@Password [NullName]=NULL
	 
 AS
	SET NOCOUNT ON
	BEGIN  
			UPDATE COC_SystemSetups
				SET SetupValue=@SMTPServerIP  WHERE SystemSetupID=201
			UPDATE COC_SystemSetups
				SET SetupValue=@SMTPPort  WHERE SystemSetupID=202
			UPDATE COC_SystemSetups
				SET SetupValue=@AuthenticationType WHERE SystemSetupID=203
			UPDATE COC_SystemSetups
				SET SetupValue=@EmailAddress WHERE SystemSetupID=204 
			UPDATE COC_SystemSetups
				SET SetupValue=@UserName WHERE SystemSetupID=205
			UPDATE COC_SystemSetups
				SET SetupValue=@Password WHERE SystemSetupID=206

	SET NOCOUNT OFF 
	END 
 


GO
/****** Object:  StoredProcedure [dbo].[SaveEServiceAddOn]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	Arya
-- Create date	:	28-12-2017
-- Description	:	Save eService AddOn for an ecopon
-- =============================================

CREATE PROCEDURE [dbo].[SaveEServiceAddOn]
@EServiceAddOnId	INTEGER = 0,
@EServiceID			INTEGER,
@AddOnServiceID		INTEGER,
@ParticipationCount	INTEGER,
@IsActive			BIT		= 1,
@UserID				INTEGER
AS
	BEGIN
		IF(@EServiceAddOnId > 0)
			BEGIN
				UPDATE	coc_eServiceAddOn 
				SET		EServiceID		= @EServiceID, 
						AddOnServiceID	= @AddOnServiceID, 
						ParticipationCount = @ParticipationCount 
				WHERE	EServiceAddOnId = @EServiceAddOnId
			END
	ELSE
			BEGIN
		INSERT INTO coc_eServiceAddOn
					(EServiceID		,AddOnServiceID   ,ParticipationCount     ,[IsActive]) 
		VALUES		(@EServiceID	,@AddOnServiceID	,@ParticipationCount	,@IsActive)
				SET @EServiceAddOnId = SCOPE_IDENTITY()

				--- CREATE SERVICE TASK 
				--- [1-1-2018]
				INSERT INTO [dbo].[coc_ServiceTask]
				   ([TaskTypeId]
				   ,[Date]
				   ,[ExecuteDate]
				   ,[UniqueId]
				   ,[Parameters]
				   ,[UserId]
				   ,[Status]
				   ,[ExecutionStatus]
				   ,[Result]
				   ,[TaskData]
				   ,[RowStatus])
				VALUES
				   (4
				   ,GETDATE()
				   ,GETDATE()
				   ,@EServiceAddOnId
				   ,NULL
				   ,@UserID
				   ,1
				   ,NULL
				   ,NULL
				   ,NULL
				   ,1)
	END
	END
GO
/****** Object:  StoredProcedure [dbo].[SaveEServiceAddOnConsumers]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveEServiceAddOnConsumers]
	@EServiceID INTEGER,
	@ConsumerID INTEGER
AS
	BEGIN
				

		INSERT INTO [coc_EServiceAddOnConsumers]
				([EServiceAddOnId],	[ConsumerID],	[IsProcessed],	[Status],	[CreatedOn],	[IsActive]) 
		SELECT	EA.EServiceAddOnId,	@ConsumerID,	0,				0,			GETDATE(),		1		
		FROM	coc_eServiceAddOn EA (NOLOCK)
		WHERE	EA.EServiceID = @EServiceID
				

	END
GO
/****** Object:  StoredProcedure [dbo].[SaveEServiceExtension]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveEServiceExtension]
	@EServiceInvoiceID INTEGER,
	@InvoiceNumber [Code],
	@EServiceID INTEGER,
	@PackageAmount [Amount],
	--@PaymentTypeID INTEGER=NULL,
	@NotificationCount INTEGER,
	@ErrorMessage [Remark] OUTPUT 
AS
SET NOCOUNT ON
	BEGIN TRY 
		SET @ErrorMessage =''
		BEGIN TRANSACTION TRN_SaveServiceExtension
		IF(ISNULL(@EServiceInvoiceID,0)=0)
		BEGIN
			INSERT INTO [coc_EServiceInvoices](InvoiceNumber,EServiceID,InvoiceDate,IsExtension,NotificationCount,PackageAmount,IsBarcodeGenerated)--,PaymentTypeID
				SELECT @InvoiceNumber,@EServiceID,CONVERT(VARCHAR(12),GETDATE(),106),1,@NotificationCount,@PackageAmount,0--,@PaymentTypeID

			SET @ErrorMessage=@EServiceID
		END
		UPDATE coc_Notifications SET NotificationCount=NotificationCount+@NotificationCount WHERE EServiceID=@EServiceID

		COMMIT TRANSACTION TRN_SaveServiceExtension
	END TRY
	BEGIN CATCH									
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);			
	END CATCH
SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[SaveEServiceKeyData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[SaveEServiceKeyData]   
 @EServiceID int,  
 @ServiceKey nvarchar(50),  
 @IsActive bit,  
 @CreatedBy int,  
 @ReturnValue VARCHAR(1000)   = NULL OUTPUT  
    
 AS  
 SET NOCOUNT ON  
 BEGIN    
  BEGIN TRY   
      declare @ServiceKeyID int=0  
   select @ServiceKeyID=ServiceKeyID from coc_ServiceKeys (NOLOCK) 
      where EServiceID=@EServiceID  
            if(@ServiceKeyID=0)  
   begin  
   insert into coc_ServiceKeys(EServiceID,IsAPIIntegrationEnabled,ServiceKey,IsActive,CreatedBy,CreatedDate) values(@EServiceID,@IsActive,@ServiceKey,1,@CreatedBy,getdate())  
          
   end  
   else  
   begin  
       update coc_ServiceKeys set IsAPIIntegrationEnabled=@IsActive,ModifiedBy=@CreatedBy,ModifiedDate=getdate() where ServiceKeyID=@ServiceKeyID  
   end  
  
  END TRY  
  BEGIN CATCH  
  SELECT Error_line()  
  SELECT Error_message()  
  SET @ReturnValue = '-505'  
  END CATCH  
 SET NOCOUNT OFF   
 END   
   
  
  
  
  
  
   
  
  
GO
/****** Object:  StoredProcedure [dbo].[SaveEServiceReceipt]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveEServiceReceipt]
	@EServiceReceiptID INTEGER,
	@EServiceInvoiceID INTEGER,
	@ReceiptAmount [Amount],
	@ReceiptDate DATETIME,
	@ChequeNumber [NullCode]=NULL,
	@ChequeDate DATETIME=NULL,
	@BankName [NullName]=NULL,
	@Remarks [Remark]=NULL,
	@UserID INTEGER,
	@CardPayment BIT,
	@CashPayment BIT,
	@ChequePayment BIT,
	@ReturnValue [Remark] OUTPUT
AS
	SET NOCOUNT ON
		BEGIN
			IF(@EServiceReceiptID=0)
			BEGIN
				INSERT INTO coc_EServiceReceipts(EServiceInvoiceID,PaymentTypeID,ReceiptDate,ReceiptAmount,ChequePayment,CashPayment,CardPayment,ChequeNumber,ChequeDate,
												 BankName,Remarks,AddDate,AddUserID)
					SELECT @EServiceInvoiceID,33,@ReceiptDate,@ReceiptAmount,@ChequePayment,@CashPayment,@CardPayment,@ChequeNumber,@ChequeDate,@BankName,@Remarks,GETDATE(),@UserID
			END
			ELSE
			BEGIN
			UPDATE coc_EServiceReceipts
				SET EServiceInvoiceID=@EServiceInvoiceID,
					PaymentTypeID=33,
					ReceiptDate=@ReceiptDate,
					ReceiptAmount=@ReceiptAmount,
					ChequePayment=@ChequePayment,
					CashPayment=@CashPayment,
					CardPayment=@CardPayment,
					ChequeNumber=@ChequeNumber,
					ChequeDate=@ChequeDate 
				WHERE EServiceReceiptID=@EServiceReceiptID
						
			END
		SET @ReturnValue=''
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[SaveEServices]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[SaveEServices]  
 @EServiceID  INTEGER,   
 @EServiceXML XML,  
 @EServiceLocationsXML XML,  
 @EServiceInvoiceXML XML,  
 @UserID INTEGER,   
 @IsActive BIT,  
 @DynamicQuery XML,  
 @ReturnValue [Remark] OUTPUT,  
 @IsPaymentDone BIT OUTPUT,  
 @PaymentType INT  
 AS   
 SET NOCOUNT ON  
 BEGIN TRY  
 SET @IsPaymentDone=0  
 DECLARE @NotificationID INTEGER  
 DECLARE @ServiceNumber [NullCode]  
 DECLARE @EService AS TABLE   
 (  
  EServiceID INTEGER,  
  ServiceNumber [Code],  
  FromDate DATETIME,  
  ToDate DATETIME,  
  CorporateID INTEGER,  
  ServiceTypeID INTEGER,  
  ServiceSubTypeID INTEGER NULL,  
  CompetitionID INTEGER NULL,  
  MessagePackID INTEGER,  
  IsActive BIT,  
  AddDate DATETIME,  
  AddUserID INTEGER    
  --PaymentType INTEGER   
 )  
  
 DECLARE @EServiceLocations AS TABLE   
 (     
  RetailOutletID INTEGER  
 )  
  
 DECLARE @EServiceInvoice AS TABLE   
 (  
  EServiceInvoiceID INTEGER,  
  InvoiceNumber [code],      
  EServiceID INTEGER,  
  InvoiceDate DATETIME,  
  IsExtension BIT,  
  NotificationCount INTEGER,  
  PackageAmount [Amount],  
  PaymentTypeID INTEGER,  
  IsBarcodeGenerated BIT  
 )  
  
 DECLARE @EServiceLanguage AS TABLE   
 (     
  LanguageID INTEGER,  
  Value [Remark]  
 )  
  
  select @ServiceNumber=CONVERT(NVARCHAR(20),ISNULL(max(convert(int,ServiceNumber)),0)+1) FROM coc_EServices(NOLOCK)  
 
 INSERT INTO @EService  
 (  
  EServiceID ,  
  ServiceNumber ,  
  FromDate ,  
  ToDate ,  
  CorporateID ,  
  ServiceTypeID ,  
  ServiceSubTypeID ,  
  CompetitionID ,  
  MessagePackID  
  --,PaymentType  
       
 )  
 SELECT  ISNULL(@EServiceID,0),   
  EService.value('(ServiceNumber[1])', '[Code]'),  
  EService.value('(FromDate[1])', '[DATETIME]'),     
  EService.value('(ToDate[1])', '[DATETIME]'),  
  EService.value('(CorporateID[1])', '[INTEGER]'),  
  EService.value('(ServiceTypeID[1])', '[INTEGER]'),  
  EService.value('(ServiceSubTypeID[1])', '[INTEGER]'),  
  EService.value('(CompetitionID[1])', '[INTEGER]'),  
  EService.value('(MessagePackID[1])', '[INTEGER]')   
  --EService.value('(PaymentType[1])', '[INTEGER]')  
  FROM @EServiceXML.nodes('/EServie/EServiceData') AS ECoupons(EService)  
      
 INSERT INTO @EServiceLocations   
 (  
  RetailOutletID   
 )  
 SELECT  EServiceLocations.value('(RetailOutletID[1])', '[INTEGER]')  
  FROM @EServiceLocationsXML.nodes('/EServiceLocations/EServiceLocationsData') AS ECoupons(EServiceLocations)   
  
 INSERT INTO @EServiceInvoice   
 (  
  InvoiceNumber,       
  InvoiceDate,  
  IsExtension,  
  NotificationCount,  
  PackageAmount       
 )  
 SELECT EServiceInvoice.value('(InvoiceNumber[1])', '[Code]'),     
  EServiceInvoice.value('(InvoiceDate[1])', '[DATETIME]'),   
  0,  
  EServiceInvoice.value('(NotificationCount[1])', '[INTEGER]'),  
  EServiceInvoice.value('(PackageAmount[1])', '[Amount]')  
 FROM @EServiceInvoiceXML.nodes('/EServiceInvoice/EServiceInvoiceData') AS ECoupons(EServiceInvoice);  
  
 INSERT INTO @EServiceLanguage (LanguageID,Value)  
  SELECT eservicelanguage.value('@LanguageID','INTEGER'),  
   eservicelanguage.value('@Value','[Remark]')  
  FROM @DynamicQuery.nodes('/Xml/Row') AS Data(eservicelanguage)  
      
 BEGIN TRANSACTION TRN_SaveEService  
 IF (ISNULL(@EServiceID,0) = 0 )  
 BEGIN  
  INSERT INTO coc_EServices(PaymentType,ServiceNumber,ServiceDate,FromDate,ToDate,CorporateID,ServiceTypeID,ServiceSubTypeID,CompetitionID,MessagePackTypeID,AddDate,AddUserID)  
   SELECT @PaymentType,@ServiceNumber,GETDATE(),FromDate,ToDate,CorporateID,ServiceTypeID,ServiceSubTypeID,CompetitionID,MessagePackID,GETDATE(),@UserID FROM @EService   
  SET @EServiceID=SCOPE_IDENTITY()    
    
  SELECT @NotificationID=NotificationID FROM coc_Notifications(NOLOCK) WHERE EServiceID=@EServiceID  
  
  DELETE FROM coc_EServiceLocations WHERE EServiceID=@EServiceID  
  DELETE FROM coc_EServiceInvoices WHERE EServiceID=@EServiceID  
  DELETE FROM coc_EServiceLanguages WHERE EServiceID=@EServiceID  
  DELETE FROM coc_NotificationSends WHERE NotificationID=@NotificationID  
  DELETE FROM coc_Notifications WHERE EServiceID=@EServiceID  
  
  INSERT INTO coc_EServiceLocations(EServiceID,RetailOutletID)  
   SELECT @EServiceID, RetailOutletID FROM @EServiceLocations  
   
  INSERT INTO coc_EServiceInvoices(InvoiceNumber, EServiceID,InvoiceDate,IsExtension,NotificationCount,PackageAmount,PaymentTypeID,IsBarcodeGenerated)  
   SELECT InvoiceNumber,@EServiceID,GETDATE(),IsExtension,NotificationCount,PackageAmount,@PaymentType,0  
    FROM @EServiceInvoice  
    
  SET ANSI_WARNINGS  OFF;  
  INSERT INTO coc_EServiceLanguages(EServiceID,LanguageID,EService)  
   SELECT @EServiceID,EL.LanguageID,EL.Value FROM @EServiceLanguage EL  
  SET ANSI_WARNINGS ON;  
  INSERT INTO coc_Notifications(EServiceID,NotificationCount)  
   SELECT @EServiceID,NotificationCount FROM @EServiceInvoice  
   END  
   ELSE BEGIN  
  
  UPDATE ES   
   SET --ES.ServiceNumber=ET.ServiceNumber,      
    ES.FromDate=ET.FromDate,  
    ES.ToDate=ET.ToDate,  
    ES.CorporateID=ET.CorporateID,  
    ES.ServiceTypeID=ET.ServiceTypeID,  
    ES.CompetitionID=ET.CompetitionID,  
    ES.MessagePackTypeID=ET.MessagePackID,  
    ES.IsActive=@IsActive,  
    ES.EditDate=GETDATE()  
   FROM coc_EServices ES(NOLOCK), @EService ET   
  WHERE ES.EServiceID = ET.EServiceID  
  
  SELECT @NotificationID=NotificationID FROM coc_Notifications(NOLOCK) WHERE EServiceID=@EServiceID  
  DELETE FROM coc_EServiceLocations WHERE EServiceID=@EServiceID  
  DELETE FROM coc_EServiceLanguages WHERE EServiceID=@EServiceID  
  
  INSERT INTO coc_EServiceLocations(EServiceID,RetailOutletID)  
   SELECT @EServiceID, RetailOutletID FROM @EServiceLocations  
  SET ANSI_WARNINGS  OFF;  
  INSERT INTO coc_EServiceLanguages(EServiceID,LanguageID,EService)  
   SELECT @EServiceID,EL.LanguageID,EL.Value FROM @EServiceLanguage EL  
  SET ANSI_WARNINGS ON;  
    END  
   
 SELECT @IsPaymentDone=IsPaymentDone FROM coc_EServices(NOLOCK) WHERE EServiceID=@EServiceID  
 SET @ReturnValue=@EServiceID  
 COMMIT TRANSACTION TRN_SaveEService  
END TRY  
BEGIN CATCH  
 ROLLBACK TRANSACTION  TRN_SaveEService          
 SELECT @ReturnValue='-200'  
  
END CATCH   
SET NOCOUNT OFF   
  
  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[SaveEServiceSettings]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[SaveEServiceSettings] 
	@PromotionExtendDays [NullName]=NULL,
	@Promotionmaximumduration [NullName]=NULL,
	@MaximumPromotiondays [NullName]=NULL,
	@Maximumnumberofpromotions [NullName]=NULL,
	@NormalRegistrationCharges [NullName]=NULL 
	AS
	SET NOCOUNT ON
	BEGIN  
			UPDATE COC_SystemSetups
				SET SetupValue=@PromotionExtendDays  WHERE SystemSetupID=111
			UPDATE COC_SystemSetups
				SET SetupValue=@Promotionmaximumduration  WHERE SystemSetupID=112
			UPDATE COC_SystemSetups
				SET SetupValue=@MaximumPromotiondays WHERE SystemSetupID=113
			UPDATE COC_SystemSetups
				SET SetupValue=@Maximumnumberofpromotions WHERE SystemSetupID=114 
			UPDATE COC_SystemSetups
				SET SetupValue=@NormalRegistrationCharges WHERE SystemSetupID=115 
	SET NOCOUNT OFF 
	END 
GO
/****** Object:  StoredProcedure [dbo].[SaveEventTicket]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 CREATE PROCEDURE  [dbo].[SaveEventTicket]
	@ConsumerID INTEGER,  
	@EServiceBarcodeID bigint,
	@CustomerName [NullName],
	@Mobiles [Mobile], 
	@ReturnValue [Remark] OUTPUT
AS
SET NOCOUNT ON
	BEGIN 
	BEGIN TRY
	BEGIN TRANSACTION TRN_Tickets  
		BEGIN
			UPDATE coc_Tickets
				SET CustomerName=@CustomerName,
					CustomerMobile=@Mobiles
				WHERE ConsumerID=@ConsumerID AND EServiceBarcodeID=@EServiceBarcodeID
		END 
		SET @ReturnValue =''  
		COMMIT TRANSACTION TRN_Tickets 
		END TRY 
		BEGIN CATCH
			SELECT @ReturnValue= ERROR_MESSAGE()
		ROLLBACK TRANSACTION TRN_Tickets
		END CATCH
		END
SET NOCOUNT OFF
 
GO
/****** Object:  StoredProcedure [dbo].[SaveEVoucherBundle]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveEVoucherBundle]
@EbundleID INTEGER
,@EVoucherID INTEGER

,@UserID INTEGER
,@EVoucherBundleID INTEGER
, @ReturnValue BIGINT OUTPUT
AS
BEGIN
IF(@EVoucherBundleID>0)
	BEGIN
		
		UPDATE coc_EVoucherBundle SET EVoucherID=@EVoucherID,EditDate=GETDATE(),EditedUserID=@UserID WHERE EVoucherBundleID=@EVoucherBundleID
		
		SET @ReturnValue=@EVoucherBundleID;
	END
ELSE
	BEGIN
		INSERT INTO coc_EVoucherBundle (EBundleID,EVoucherID,AddDate,CreatedUserID,IsActive)
		VALUES (@EbundleID,@EVoucherID,GETDATE(),@UserID,1)
		SET @EVoucherBundleID=SCOPE_IDENTITY();

		INSERT INTO coc_EVoucherApproval (RequesterUserID,EVoucherBundleID,IsApproved,RequestedDate)
		VALUES (@UserID,@EVoucherBundleID,0,GETDATE())
		DECLARE	@return_value int
			EXEC	@return_value = [dbo].[SaveNotificationForEVoucherApproval] @EbundleID=@EbundleID,@EVoucherID=@EVoucherID,@UserID=@UserID


		SET @ReturnValue=@EVoucherBundleID;
	END
END
GO
/****** Object:  StoredProcedure [dbo].[SaveEVoucherBundleDistribution]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveEVoucherBundleDistribution]
	@EVoucherBundleIdDistributionId INTEGER=0,
	@EVoucherBundleId INTEGER,
	@CorporateId INTEGER,
	@noOfVouchers INTEGER,
	@UserId INTEGER,
	@ReturnValue [Remark] OUTPUT
AS
BEGIN
	BEGIN TRY
		
		DECLARE @SumOfVoucherCount INTEGER;
		DECLARE @VoucherCount INTEGER;
		DECLARE @netVoucherCount INTEGER;
		DECLARE @distributionCount INTEGER=0;

		SET @SumOfVoucherCount=(
			SELECT 
				ISNULL(SUM(evbd.NoOfVouchers),0) 
			FROM coc_EVoucherBundleDistribution evbd
			WHERE evbd.EVoucherBundleID=@EVoucherBundleId
			--GROUP BY evbd.EVoucherBundleID
			)

		SET @VoucherCount=(
			SELECT 
				n.NotificationCount AS [NoOfVouchers]
			FROM coc_EVoucherBundle evb (NOLOCK)
			INNER JOIN coc_EVoucher ev (NOLOCK) ON ev.EVoucherID=evb.EVoucherID
			INNER JOIN coc_EServices es(NOLOCK) ON es.EServiceID = ev.EServiceID
			INNER JOIN coc_Notifications(NOLOCK) n ON n.EServiceID = es.EServiceID
			WHERE evb.EVoucherBundleID=@EVoucherBundleId
		)
		
		IF(@EVoucherBundleIdDistributionId>0)
		BEGIN
			SET @distributionCount=(
			SELECT NoOfVouchers 
			FROM coc_EVoucherBundleDistribution (NOLOCK)
			WHERE EVoucherBundleDistributionID=@EVoucherBundleIdDistributionId
		)
		END

		SET @netVoucherCount=@VoucherCount-@SumOfVoucherCount+@distributionCount;
		PRINT @netVoucherCount;
		IF(@noOfVouchers<=@netVoucherCount)
		BEGIN
			IF(@EVoucherBundleIdDistributionId>0)
			BEGIN
				UPDATE coc_EVoucherBundleDistribution SET EVoucherBundleID=@EVoucherBundleId,CorporateID=@CorporateId,NoOfVouchers=@noOfVouchers,EditDate=GETDATE(),EditedUserID=@UserId WHERE EVoucherBundleDistributionID=@EVoucherBundleIdDistributionId
			END
			ELSE
			BEGIN
				IF (NOT EXISTS (SELECT * FROM coc_EVoucherBundleDistribution (NOLOCK) WHERE EVoucherBundleID = @EVoucherBundleId AND CorporateID = @CorporateId))
				BEGIN 
					
				
					INSERT INTO coc_EVoucherBundleDistribution(EVoucherBundleID,CorporateID,NoOfVouchers,AddDate,CreatedUserID,IsActive) 
					VALUES(@EVoucherBundleId,@CorporateId,@noOfVouchers,GETDATE(),@UserId,1)
				END
				ELSE
				BEGIN
					SELECT @ReturnValue	=	'Already Addedd'
					END
			END
		END
		ELSE
		BEGIN
			SELECT @ReturnValue= '-505'
		END
		
	END TRY
	BEGIN CATCH
		SELECT @ReturnValue= ERROR_MESSAGE()
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SaveEVoucherBundleQRCode]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveEVoucherBundleQRCode]
@EbundleID INTEGER
,@CorporateID INTEGER
,@UserID INTEGER
,@EVoucherBundleQRCodeID INTEGER = 0
,@NumberOfEligibleVouchers INTEGER
,@QRCodeValue NVARCHAR(max)
, @ReturnValue BIGINT OUTPUT
AS
BEGIN
IF(@EVoucherBundleQRCodeID>0)
	BEGIN
		
		UPDATE coc_EVoucherBundleQRCode SET EditDate=GETDATE(),EditedUser=@UserID,@QRCodeValue=QRCodeValue,IsActive=1,EBundleID=@EbundleID,CorporateID=@CorporateID,NumberOfEligibleVouchers=@NumberOfEligibleVouchers WHERE EVoucherBundleQRCodeID=@EVoucherBundleQRCodeID
		
		SET @ReturnValue=@EVoucherBundleQRCodeID;
	END
ELSE
	BEGIN
		INSERT INTO coc_EVoucherBundleQRCode (EBundleID,AddDate,CreatedUser,CorporateID,NumberOfEligibleVouchers,QRCodeValue,IsActive)
		VALUES (@EbundleID,GETDATE(),@UserID,@CorporateID,@NumberOfEligibleVouchers,@QRCodeValue,1)
		SET @EVoucherBundleQRCodeID=SCOPE_IDENTITY();

		

		SET @ReturnValue=@EVoucherBundleQRCodeID;
	END
END
GO
/****** Object:  StoredProcedure [dbo].[SaveEVoucherConfiguration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveEVoucherConfiguration]          
@EServiceID   INTEGER,          
@EVoucherID   INTEGER  = 0,          
@EVoucherDescriptionXml  XML = NULL,          
@UserID INTEGER,          
@EVoucherCategoryID  INTEGER,          
--added new columns--        
@DiscountType int = null,        
@DiscountAmount decimal(18,2)=null,        
@DiscountPercentage decimal(18,2)=null,        
@OriginalPrice decimal(18,2)=null,        
@PriceAfterDiscount decimal(18,2)=null,        
@PromotionAmount decimal(18,2)=null,        
@VoucherAmount  decimal(18,2)=null,        
@WhatYouGetEn  nvarchar(250)=null,        
@WhatYouGetAr  nvarchar(250)=null,        
--added new columns--        
@BundleXml    XML   = NULL,          
@ReturnValue  BIGINT OUTPUT          
AS          
 BEGIN          
           
  SET NOCOUNT ON;          
  -- Arya [31-01-2018] [START]          
  DECLARE @ExpiryDate DATETIME          
  SELECT @ExpiryDate = ToDate FROM coc_EServices (NOLOCK) WHERE  EServiceID = @EServiceID          
  -- [END]          
   SELECT          
    @EVoucherID = EVoucherID          
   FROM          
    coc_EVoucher  (NOLOCK)         
   WHERE          
    EServiceID = @EServiceID          
                         
  IF(@EVoucherID = 0)  -- Insert Data to coc_EVoucher Table          
   BEGIN                 
              
    INSERT INTO coc_EVoucher          
     (EServiceID,EVoucherCategoryID,AddDate,VoucherType,CreatedUserID,IsActive,IsDeleted,ExpiryDate) -- Updated by Arya [31-01-2018]          
     SELECT @EServiceID,@EVoucherCategoryID,GETDATE(),'true',@UserID,'false','false',@ExpiryDate  -- Updated by Arya [31-01-2018]          
          
    SET @EVoucherID  = SCOPE_IDENTITY();          
          
    -- Insert VoucherName to coc_EVoucherLanguages Table  [START]          
          
    INSERT INTO coc_EVoucherLanguages           
     (EVoucherID, AddDate, CreatedUserId, LanguageID, [ResourceKey], [ResourceValue])          
     SELECT @EVoucherID, GETDATE(), @UserID, coc_EServiceLanguages.LanguageID, 'VoucherName',  coc_EServiceLanguages.EService          
     FROM coc_EServices (NOLOCK) INNER JOIN          
     coc_EServiceLanguages (NOLOCK) ON coc_EServices.EServiceID = coc_EServiceLanguages.EServiceID          
     WHERE coc_EServices.EServiceID  = @EServiceID          
          
    -- Insert VoucherName to coc_EVoucherLanguages Table  [END]          
          
    -- Insert Description to coc_EVoucherLanguages Table  [START]          
          
    INSERT INTO coc_EVoucherLanguages           
     (EVoucherID, AddDate, CreatedUserId, [ResourceKey], LanguageID,[ResourceValue])          
     SELECT @EVoucherID, GETDATE(), @UserID, 'Description',voucherDescription.value('(Language[1])','INTEGER'),              
     voucherDescription.value('(Description[1])','NVARCHAR(MAX)')          
     FROM @EVoucherDescriptionXml.nodes('/Xml/EVoucherData') AS Data(voucherDescription)          
          
    -- Insert Description to coc_EVoucherLanguages Table  [END]          
          
    SET @ReturnValue=@EServiceID;          
   END          
  ELSE       -- Update Data to coc_EVoucher Table          
   BEGIN          
          
    UPDATE coc_EVoucher SET           
     EVoucherCategoryID  = @EVoucherCategoryID,          
     EditDate    = GetDATE(),          
     EditedUserID   = @UserID,        
  ExpiryDate    = @ExpiryDate, -- Arya [31-01-2018]          
  DiscountType = @DiscountType,        
  DiscountAmount =@DiscountAmount ,        
  DiscountPercentage =@DiscountPercentage,        
  OriginalPrice =@OriginalPrice,        
  PriceAfterDiscount =@PriceAfterDiscount,        
  PromotionAmount =@PromotionAmount ,        
  VoucherAmount  =@VoucherAmount        
    WHERE          
     EVoucherID    = @EVoucherID          
          
          
    DELETE FROM coc_EVoucherLanguages WHERE EVoucherID=@EVoucherID AND(ResourceKey='Description')          
    INSERT INTO coc_EVoucherLanguages (EVoucherID, CreatedUserId, EditedUserId, AddDate, EditDate, [ResourceKey], LanguageID,[ResourceValue])          
    SELECT @EVoucherID, @UserID, @UserID, GETDATE(), GETDATE(), 'Description',voucherDescription.value('(Language[1])','INTEGER'),              
    voucherDescription.value('(Description[1])','NVARCHAR(MAX)')          
    FROM @EVoucherDescriptionXml.nodes('/Xml/EVoucherData') AS Data(voucherDescription)         
       
       
 DELETE FROM coc_EVoucherLanguages WHERE EVoucherID=@EVoucherID AND(ResourceKey='WhatYouGet')          
    INSERT INTO coc_EVoucherLanguages (EVoucherID, CreatedUserId, EditedUserId, AddDate, EditDate, [ResourceKey], LanguageID,[ResourceValue])          
    SELECT @EVoucherID, @UserID, @UserID, GETDATE(), GETDATE(), 'WhatYouGet',1,@WhatYouGetEn         
 INSERT INTO coc_EVoucherLanguages (EVoucherID, CreatedUserId, EditedUserId, AddDate, EditDate, [ResourceKey], LanguageID,[ResourceValue])          
    SELECT @EVoucherID, @UserID, @UserID, GETDATE(), GETDATE(), 'WhatYouGet',2,@WhatYouGetAr          
          
          
    SET @ReturnValue=@EVoucherID          
          
   END          
          
  IF(@BundleXml IS NOT NULL AND @BundleXml.exist('/BundleXml/BundleData') = 1)          
  BEGIN          
   UPDATE coc_EvoucherApproval SET IsApproved=1,ApprovedDate=GETDATE() WHERE EVoucherBundleID IN (SELECT voucherBundle.value('(VoucherBundleId[1])','INTEGER') FROM @BundleXml.nodes('/BundleXml/BundleData') AS Data(voucherBundle))          
          
  END          
          
SET NOCOUNT OFF          
END 
GO
/****** Object:  StoredProcedure [dbo].[SaveEVoucherLocation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[SaveEVoucherLocation]                
  @EVoucherID int,                
  @Userid int,                  
  @CityID int,                 
  @LocationEN nvarchar(max),                
  @LocationAR nvarchar(max),                
  @MapURL nvarchar(max),                
  @EVoucherLocationID int,          
  @LanguageID int               
 AS                  
 SET NOCOUNT ON                  
 BEGIN                    
  BEGIN TRY                 
              
    if @EVoucherLocationID=0          
    begin          
        declare @LocationID int=0;          
     insert into coc_EvoucherLocations(EVoucherID,CityID,MapLink,CreatedBy,CreatedDate)          
    select @EVoucherID,@CityID,@MapURL,@Userid,getdate()          
    set @LocationID=SCOPE_IDENTITY()          
        
     insert into coc_eVoucherLocationLanguages(VoucherLocationID,LanguageID,Location)          
      select @LocationID,1,@LocationEN          
        
     insert into coc_eVoucherLocationLanguages(VoucherLocationID,LanguageID,Location)          
      select @LocationID,2,@LocationAR          
    end             
     else          
     begin          
                
   update coc_EvoucherLocations set CityID=@CityID,MapLink=@MapURL,ModifiedBy=@Userid,ModifiedDate=getdate() where VoucherLocationID=@EVoucherLocationID          
          
   update coc_eVoucherLocationLanguages set Location=@LocationEN where VoucherLocationID=@EVoucherLocationID and LanguageID=1          
          
   update coc_eVoucherLocationLanguages set Location=@LocationAR where VoucherLocationID=@EVoucherLocationID and LanguageID=2          
          
  end            
            
    select evl.VoucherLocationID,evl.CityID,cl.City,          
 (select Location from coc_eVoucherLocationLanguages(NOLOCK) where VoucherLocationID=evl.VoucherLocationID and LanguageID=1) as LocationEN,          
 (select Location from coc_eVoucherLocationLanguages(NOLOCK) where VoucherLocationID=evl.VoucherLocationID and LanguageID=2) as LocationAR,          
 evl.MapLink          
 from coc_EvoucherLocations evl (NOLOCK)         
 left join coc_CityLanguages cl(NOLOCK) on cl.CityID=evl.CityID          
 where cl.LanguageID=@LanguageID and evl.EVoucherID=@EVoucherID          
             
  END TRY                  
  BEGIN CATCH                
  print(Error_line())                
  SELECT Error_line()                
  print(Error_message())                
   SELECT Error_message()                  
  END CATCH                  
 SET NOCOUNT OFF                   
 END 
GO
/****** Object:  StoredProcedure [dbo].[SaveEVoucherTermsData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[SaveEVoucherTermsData]    
 @EVoucherID INTEGER,    
 --@TermsXML XML=NULL,    
 @UserID INTEGER,    
 @IsActive BIT,    
 @IsAllowed BIT,    
 @IsAcceptedTC BIT,
 @EnglishTerms NVARCHAR(2000),
 @ArabicTerms NVARCHAR(2000)   
     
AS    
BEGIN    
 SET NOCOUNT ON    
     
  BEGIN    
    
   IF(@IsAcceptedTC <> 0 )    
    BEGIN    
     UPDATE [coc_EVoucher] SET IsAcceptedTC=@IsAcceptedTC WHERE EVoucherID = @EVoucherID    
        
     IF(@IsAllowed=0 OR @IsActive=0 )    
    BEGIN    
       IF(NOT EXISTS(SELECT * FROM coc_EVoucherBundle EB INNER JOIN coc_EVoucherBundleDistribution EVD ON EB.EVoucherBundleID = EVD.EVoucherBundleID WHERE EB.EVoucherID = @EVoucherID))    
    BEGIN    
         UPDATE [coc_EVoucher] SET IsAllowed=@IsAllowed WHERE EVoucherID = @EVoucherID    
         UPDATE [coc_EVoucher] SET IsActive = @IsActive WHERE EVoucherID = @EVoucherID    
    END    
    END     
    ELSE    
    BEGIN    
       UPDATE [coc_EVoucher] SET IsAllowed = @IsAllowed  WHERE EVoucherID = @EVoucherID    
       UPDATE [coc_EVoucher] SET IsActive = @IsActive WHERE EVoucherID = @EVoucherID    
    END   
  
  if not exists(select EVoucherLanguageID from coc_EVoucherLanguages (NOLOCK) where EVoucherID=@EVoucherID and ResourceKey='Terms' and LanguageID=1)  
  begin
     insert into coc_EVoucherLanguages 
	   select @EVoucherID,1,'Terms',N''+@EnglishTerms,getdate(),null,@UserID,null
  end
  else
  begin
      update coc_EVoucherLanguages set ResourceValue=N''+@EnglishTerms  where EVoucherID=@EVoucherID and ResourceKey='Terms' and LanguageID=1
  end

  if not exists(select EVoucherLanguageID from coc_EVoucherLanguages (NOLOCK) where EVoucherID=@EVoucherID and ResourceKey='Terms' and LanguageID=2)  
  begin
     insert into coc_EVoucherLanguages 
	   select @EVoucherID,2,'Terms',N''+@ArabicTerms,getdate(),null,@UserID,null
  end
  else
  begin
      update coc_EVoucherLanguages set ResourceValue=N''+@ArabicTerms  where EVoucherID=@EVoucherID and ResourceKey='Terms' and LanguageID=2
  end

   Declare @EServiceID int   
   Declare @xmldata nvarchar(max)    
   Declare @NotificationID bigint  
   Declare @NoOfBarcodes int=0  
   Declare @CorporateID int  
  
   select @EServiceID=EServiceID,@NoOfBarcodes=NumberOfVouchers from coc_EVoucher (NOLOCK) where EVoucherID=@EVoucherID  
     
   if not exists(select id from coc_ServiceTask (NOLOCK) where UniqueId=@EServiceID)  
   begin  
       Set @NoOfBarcodes=3*@NoOfBarcodes  
    if @NoOfBarcodes > 50000  
    set @NoOfBarcodes = 50000  
    select @CorporateID=CorporateID from coc_EServices (NOLOCK) where EServiceID=@EServiceID  
       select @NotificationID=NotificationID from coc_Notifications (NOLOCK) where EServiceID=@EServiceID  
       set @xmldata=N'<?xml version="1.0" encoding="utf-16"?><BarcodeGenerateParams xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ServiceID>'+Convert(nvarchar(20),@EServiceID)+'</ServiceID><NoOfBarcodes>'+Convert(nvarchar(20),@NoOfBarcodes)+'</NoOfBarcodes><NotificationID>'+Convert(nvarchar(20),@NotificationID)+'</NotificationID><ServiceTypeID>51</ServiceTypeID><Prefix /><Suffix /><CorporateID>'+Convert(nvarchar(20),@CorporateID)+'</CorporateID><LanguageID>1</LanguageID><UserId>'+Convert(nvarchar(20),@UserID)+'</UserId></BarcodeGenerateParams>'        
       insert into coc_ServiceTask(TaskTypeId,Date,ExecuteDate,UniqueId,Parameters,UserId,Status,RowStatus)  
            select 1,getdate(),getdate(),@EServiceID,@xmldata,@UserID,1,1  
   end  
  
     
     
      
    END     
        
    
       
    
   --IF(@IsActivated=1)    
    --BEGIN    
         
    --END     
    
    --------------------------------------------------------------------------------    
   --DECLARE @ETerms TABLE    
   --(          
   -- TermsEng [Remark],    
   -- TermsAr [Remark]    
   --)    
   --INSERT INTO @ETerms(TermsEng,TermsAr)    
   -- SELECT     
   --  Terms.value('(TermsEng[1])', '[Remark]'),    
   --  Terms.value('(TermsAr[1])', '[Remark]')           
   -- FROM @TermsXML.nodes('/EVoucher/Terms') AS Data(Terms)    
    
        
   -- IF(NOT EXISTS (SELECT * FROM [coc_EVoucherLanguages] WHERE EVoucherID = @EVoucherID AND [ResourceKey]='Terms' AND [LanguageID]=1))    
   -- BEGIN    
   --  INSERT INTO [coc_EVoucherLanguages](EVoucherID,ResourceKey,ResourceValue,LanguageID,AddDate,CreatedUserId)    
   --   SELECT @EVoucherID,'Terms',ET.TermsEng,1, getdate(),@UserID    
   --   FROM @ETerms ET    
   -- END     
   -- ELSE    
   -- BEGIN    
   --  UPDATE [coc_EVoucherLanguages] SET ResourceValue=ET.TermsEng, EditedUserId = @UserID, EditDate = getdate()    
   --   FROM @ETerms ET WHERE EVoucherID = @EVoucherID AND [ResourceKey]='Terms' AND [LanguageID]=1          
   -- END    
         
    
   -- IF(NOT EXISTS (SELECT * FROM [coc_EVoucherLanguages] WHERE EVoucherID = @EVoucherID AND [ResourceKey]='Terms' AND [LanguageID]=2))    
   -- BEGIN    
   --  INSERT INTO [coc_EVoucherLanguages](EVoucherID,ResourceKey,ResourceValue,LanguageID,AddDate,CreatedUserId)    
   --   SELECT @EVoucherID,'Terms',ET.TermsAr,2 , getdate(),@UserID    
   --   FROM @ETerms ET    
   -- END     
   -- ELSE    
   -- BEGIN    
   --  UPDATE [coc_EVoucherLanguages] SET ResourceValue=ET.TermsAr, EditedUserId = @UserID, EditDate = getdate()    
   --   FROM @ETerms ET WHERE EVoucherID = @EVoucherID AND [ResourceKey]='Terms' AND [LanguageID]=2          
   -- END     
   -----------------------------------------------------------------------------------------------------------     
         
          
   END    
 SET NOCOUNT OFF    
END
GO
/****** Object:  StoredProcedure [dbo].[SaveFriendsInvitation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveFriendsInvitation]
	@InvitationCode [Code],
	@ConsumerID INTEGER,
	@EmailsXML XML,
	@ErrorMessage [Remark] OUTPUT 
AS 
SET NOCOUNT ON
	DECLARE @InviteFriendID BIGINT
	DECLARE @COC_InviteDetails AS TABLE 
	(
		InviteFriendID	BIGINT,
		EmailID	[Email],
		FacebookID	[Email],
		AutoRejected	BIT,
		PhoneNuber [Phone],
		IsAccepted	BIT 
	)
	SET @ErrorMessage = ''
	BEGIN TRY
		 
		INSERT INTO COC_InviteFriends(InvitationCode,ConsumerID,InvitationDate)
			SELECT  @InvitationCode,@ConsumerID,GETDATE()
		SET @InviteFriendID=SCOPE_IDENTITY()

		INSERT INTO @COC_InviteDetails(InviteFriendID,EmailID,FacebookID,AutoRejected,PhoneNuber,IsAccepted)
			SELECT  ISNULL(@InviteFriendID,0), 
				Consumers.value('(EmailID[1])', '[EMAIL]'),
				Consumers.value('(FacebookID[1])', '[EMAIL]'),
				Consumers.value('(AutoRejected[1])', '[BIT]'),
				Consumers.value('(MobileNo[1])', '[EMAIL]'),
				Consumers.value('(IsAccepted[1])', '[BIT]') 
			FROM @EmailsXML.nodes('/Invitations/InvitationData') AS ECoupons(Consumers);
		
		INSERT INTO COC_InviteDetails(InviteFriendID,EmailID,FacebookID,AutoRejected,IsAccepted,PhoneNuber)
			SELECT InviteFriendID,EmailID,FacebookID,AutoRejected,IsAccepted,PhoneNuber FROM @COC_InviteDetails

		IF(@ErrorMessage = '')
		BEGIN
			SET @ErrorMessage = @ConsumerID
		END
	END TRY
	BEGIN CATCH									
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);			
	END CATCH
SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[SaveGeneralNotification]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveGeneralNotification]
	@GeneralNotificationTemplateID INTEGER,
	@TemplateTypeID INTEGER,
	@SMSUsage BIT=NULL,
	@NotificatonUsage BIT=NULL,
	@EmailUsage BIT=NULL,
	@IsActive BIT=NULL,
	@DynamicQuery XML,
	@ReturnValue [Remark] OUTPUT
AS
SET NOCOUNT ON
	BEGIN

		BEGIN TRANSACTION TRN_GeneralNotification
		BEGIN TRY
		DECLARE @Value TABLE
		( 
			GeneralNotificationTemplateID INTEGER,
			LanguageID INTEGER,
			TemplateTitle [Description],
			Template [Remark]
		) 
		 INSERT INTO @Value
	    SELECT  ISNULL(@GeneralNotificationTemplateID,0), 
			Consumers.value('(LanguageID[1])', 'INTEGER'),
			Consumers.value('(Title[1])', '[Description]'),
			Consumers.value('(Value[1])', '[Remark]') 
		FROM @DynamicQuery.nodes('/XML/Row') AS ECoupons(Consumers);

		IF(ISNULL(@GeneralNotificationTemplateID,0)=0)
		BEGIN  
			INSERT INTO coc_GeneralNotificationTemplates(TemplateTypeID,SMSUsage,NotificatonUsage,EmailUsage,IsActive,AddDate,AddUserID)
				SELECT @TemplateTypeID,@SMSUsage,@NotificatonUsage,@EmailUsage,1,GETDATE(),1  
				 
					SET @GeneralNotificationTemplateID=SCOPE_IDENTITY() 
			INSERT INTO coc_GeneralNotificationTemplateLanguages (GeneralNotificationTemplateID,LanguageID,TemplateTitle,Template)
				SELECT @GeneralNotificationTemplateID,LanguageID,TemplateTitle,Template FROM @Value  

		END	ELSE
		BEGIN 
			UPDATE [coc_GeneralNotificationTemplates]
				SET TemplateTypeID=@TemplateTypeID, 
					SMSUsage=@SMSUsage,
					NotificatonUsage=@NotificatonUsage,
					EmailUsage=@EmailUsage,
					IsActive=@IsActive,
					EditDate=GETDATE(),
					EditUserID=1
				WHERE GeneralNotificationTemplateID=@GeneralNotificationTemplateID 

			DELETE FROM coc_GeneralNotificationTemplateLanguages WHERE GeneralNotificationTemplateID=@GeneralNotificationTemplateID
			INSERT INTO coc_GeneralNotificationTemplateLanguages (GeneralNotificationTemplateID,LanguageID,TemplateTitle,Template)
				SELECT @GeneralNotificationTemplateID,LanguageID,TemplateTitle,Template FROM @Value
		END   
		SET @ReturnValue ='' 
		COMMIT TRANSACTION TRN_GeneralNotification
		
		END TRY
		BEGIN CATCH
			SELECT @ReturnValue= ERROR_MESSAGE()
		ROLLBACK TRANSACTION TRN_GeneralNotification
		END CATCH
		END
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveGeneralSettings]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[SaveGeneralSettings] 
	@ForceAppUse [NullName]=NULL,
	@DisplaySearchCount [NullName]=NULL,
	@EmailAddressfornotifiyingAdminuserchange [NullName]=NULL, 
	@OTPExpiryTime [NullName]=NULL,
	@PasswordChangeTimeout [NullName]=NULL,  
	@EmailNotificationforwinnersofcompetition INTEGER=NULL,
	@EmailNotificationforwinnersofcompetitionRd [NullName]=NULL,
	@SMSNotificationforwinnersofcompetition INTEGER=NULL,
	@SMSNotificationforwinnersofcompetitionRd [NullName]=NULL,
	@MobileWEBNotificationforwinnersofcompetition INTEGER=NULL,
	@MobileWEBNotificationforwinnersofcompetitionRd [NullName]=NULL,
	@EmailNotificationforwinnersofNoncompetition INTEGER=NULL,
	@EmailNotificationforwinnersofNoncompetitionRd [NullName]=NULL,
	@SMSNotificationforwinnersofNoncompetition INTEGER=NULL,
	@SMSNotificationforwinnersofNoncompetitionRd [NullName]=NULL,
	@MobileWEBNotificationforwinnersofNoncompetition INTEGER=NULL,
	@MobileWEBNotificationforwinnersofNoncompetitionRd [NullName]=NULL, 
	@GenericNotificationmessagetoInviteFriend INTEGER=NULL,
	@ChoosetheTemplateforSMSverificationcode INTEGER=NULL,
	@ChoosetheTemplateforEmailverificationcode INTEGER =NULL
	 
 AS
	SET NOCOUNT ON
	BEGIN  
			UPDATE COC_SystemSetups
				SET SetupValue=@ForceAppUse  WHERE SystemSetupID=501
			UPDATE COC_SystemSetups
				SET SetupValue=@DisplaySearchCount  WHERE SystemSetupID=502
			UPDATE COC_SystemSetups
				SET SetupValue=@EmailAddressfornotifiyingAdminuserchange WHERE SystemSetupID=503
			UPDATE COC_SystemSetups
				SET SetupValue=@OTPExpiryTime WHERE SystemSetupID=504 
			UPDATE COC_SystemSetups
				SET SetupValue=@PasswordChangeTimeout WHERE SystemSetupID=505  
			UPDATE COC_SystemSetups
				SET SetupValue=@EmailNotificationforwinnersofcompetitionRd,GeneralNotificationTemplateID=@EmailNotificationforwinnersofcompetition WHERE SystemSetupID=101  
			UPDATE COC_SystemSetups
				SET SetupValue=@SMSNotificationforwinnersofcompetitionRd,GeneralNotificationTemplateID=@SMSNotificationforwinnersofcompetition WHERE SystemSetupID=102  
			UPDATE COC_SystemSetups
				SET SetupValue=@MobileWEBNotificationforwinnersofcompetitionRd,GeneralNotificationTemplateID=@MobileWEBNotificationforwinnersofcompetition WHERE SystemSetupID=103  
			UPDATE COC_SystemSetups
				SET SetupValue=@EmailNotificationforwinnersofNoncompetitionRd,GeneralNotificationTemplateID=@EmailNotificationforwinnersofNoncompetition WHERE SystemSetupID=104  
			UPDATE COC_SystemSetups
				SET SetupValue=@SMSNotificationforwinnersofNoncompetitionRd,GeneralNotificationTemplateID=@SMSNotificationforwinnersofNoncompetition WHERE SystemSetupID=105  
			UPDATE COC_SystemSetups
				SET SetupValue=@MobileWEBNotificationforwinnersofNoncompetitionRd,GeneralNotificationTemplateID=@MobileWEBNotificationforwinnersofNoncompetition WHERE SystemSetupID=106  
			UPDATE COC_SystemSetups
				SET GeneralNotificationTemplateID=@GenericNotificationmessagetoInviteFriend WHERE SystemSetupID=107  
			UPDATE COC_SystemSetups
				SET GeneralNotificationTemplateID=@ChoosetheTemplateforSMSverificationcode WHERE SystemSetupID=108 
			UPDATE COC_SystemSetups
				SET GeneralNotificationTemplateID=@ChoosetheTemplateforEmailverificationcode WHERE SystemSetupID=109  

	SET NOCOUNT OFF 
	END 


GO
/****** Object:  StoredProcedure [dbo].[SaveGenericNotificationMessageData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveGenericNotificationMessageData]
	@GeneralNotificationID INTEGER,	
	@NotificationSend INTEGER,
	@NotificationSendXML XML,	
	@SaveFullData BIT =1,
	@NotificationSending INTEGER =0,
	@NotificationSendID INTEGER OUTPUT,
	@ErrorMessage [Remark] OUTPUT 
AS 
SET NOCOUNT ON
	
	--When subsequent calls @SaveFullData should be zero since it need not update the tables in the given condition below.

	DECLARE @Counter INTEGER	
	DECLARE @ConsumerNotificationID INTEGER=0
	DECLARE @EServiceBarcodeID INTEGER=0
	
	DECLARE @IsSave BIT=1

 	DECLARE @Notifications AS TABLE 
	(		
		NotificationCount INTEGER,
		NotificationSend INTEGER,
		NotificationRead INTEGER NULL,
		ResendCounter INTEGER NULL
	) 

	DECLARE @NotificationSends AS TABLE 
	(
		GeneralNotificationID	BIGINT,
		SendingDate	DATETIME,
		SendingType	TINYINT,
		CityID	INTEGER,
		AgeGroupID	INTEGER,
		Gender	TINYINT,
		SearchCount	INTEGER,
		ScheduleDate DATETIME,
		NotificationCount INTEGER
	) 
		
	DECLARE @NotificationSendLanguage AS TABLE 
	(
		LanguageID INTEGER,
		Subject [Remark],
		Message [Remark]
	) 
		
	IF(@SaveFullData=1)
	BEGIN 
		INSERT INTO @NotificationSends
			SELECT ISNULL(@GeneralNotificationID,0), 
				NotificationSends.value('(SendingDate[1])', 'DATETIME'),
				NotificationSends.value('(SendingType[1])', '[NullName]'),
				NotificationSends.value('(CityID[1])', 'INTEGER'),
				NotificationSends.value('(AgeGroupID[1])', 'INTEGER'),
				NotificationSends.value('(Gender[1])', 'TINYINT'),
				NotificationSends.value('(SearchCount[1])', 'INTEGER'),
				NotificationSends.value('(ScheduleDate[1])', 'DATETIME'),
				NotificationSends.value('(NotificationCount[1])', '[INTEGER]')
			FROM @NotificationSendXML.nodes('/Registrations/RegistrationData') AS ECoupons(NotificationSends);

		INSERT INTO @NotificationSendLanguage
			SELECT    
				NotificationSends.value('(LanguageID[1])', 'INTEGER') ,
				NotificationSends.value('(Subject[1])', '[Remark]') , 
				NotificationSends.value('(Message[1])', '[Remark]') 
			FROM @NotificationSendXML.nodes('/Registrations/RegistrationData/Messages/Row') AS ECoupons(NotificationSends);
	END

	SET @ErrorMessage =''
	BEGIN TRY 
	BEGIN TRANSACTION TRN_QueueNotifications
		
		/*SELECT @GeneralNotificationID = NotificationID FROM coc_GeneralNotification(NOLOCK) WHERE 
		UPDATE coc_Notifications
			SET NotificationSend = ISNULL(NotificationSend,0)+@NotificationSending
		WHERE EServiceID = @ServiceID*/       
		
		IF(@SaveFullData=1)
		BEGIN 
			INSERT INTO coc_NotificationSends(GeneralNotificationId,SendingDate,SendingType,CityID,AgeGroupID,Gender,SearchCount,ScheduleDate,NotificationCount)
				SELECT @GeneralNotificationID,CAST (SendingDate AS datetime),SendingType ,CASE WHEN CityID=0 THEN NULL ELSE CityID END, CASE WHEN AgeGroupID=0 THEN NULL ELSE AgeGroupID END,Gender,SearchCount,ScheduleDate,NotificationCount FROM @NotificationSends
			
				SET @NotificationSendID = SCOPE_IDENTITY()
			INSERT INTO coc_NotificationSendLanguages  
				SELECT @NotificationSendID,LanguageID,[Subject],[Message] FROM @NotificationSendLanguage
		END
			  
	COMMIT TRANSACTION TRN_QueueNotifications
	END TRY
	BEGIN CATCH									
		ROLLBACK TRANSACTION TRN_QueueNotifications
		SELECT @ErrorMessage=ERROR_MESSAGE()
	END CATCH

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveGuestForEvents]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveGuestForEvents]
	@EventID INTEGER, 
	@CustomerName NVARCHAR(100),
	@Mobile NVARCHAR(15),
	@Email NVARCHAR(100),
	@Gender INTEGER,	
	@JobTitle NVARCHAR(1000),
	@CompanyName NVARCHAR(100),
	@ReturnValue [Remark] OUTPUT 

AS
BEGIN
	
	SET NOCOUNT ON;
	BEGIN TRY
	SELECT @ReturnValue=''
	BEGIN TRANSACTION SaveGuestForEvents
		DECLARE @guestID INTEGER;
		DECLARE @eServiceID INTEGER
		DECLARE @notificationID INTEGER
		SELECT @guestID = GuestID FROM coc_Guests (NOLOCK) WHERE PrimaryMobile=@Mobile

		SELECT @eServiceID = EServiceID from coc_eventconfiguration (NOLOCK) where EventID =@EventID

		SELECT @notificationID = NotificationID from coc_Notifications(NOLOCK) WHERE EServiceID = @eServiceID

		IF @guestID IS NULL
		BEGIN
			INSERT INTO coc_Guests(FullName,PrimaryMobile,EmailID,Gender,JobTitle,CompanyName,IsActive,AddDate)
			VALUES(@CustomerName,@Mobile,@Email,@Gender,@JobTitle,@CompanyName,1,GETDATE())

			SET @guestID=SCOPE_IDENTITY();

		END
		ELSE
		BEGIN
			IF Exists( SELECT NULL FROM coc_EServiceBarcodes (NOLOCK)
			WHERE NotificationID=@notificationID and guestid=@guestID)
			BEGIN
				SELECT 'Mobile number already registered for event',1
				SELECT @ReturnValue='Mobile number already registered for event'
				RETURN
			END
			ELSE
			BEGIN

				UPDATE coc_Guests SET 
					FullName= @CustomerName,
					EmailID = @Email,
					Gender = @Gender,
					JobTitle = @JobTitle,
					CompanyName= @CompanyName,
					IsActive= 1
				where GuestID= @guestID
			END
		END
		
		Print 'here'		
	
		declare @EServiceBarcodeID bigint
		SELECT TOP 1
			@EServiceBarcodeID = es.EServiceBarcodeID 
		FROM coc_EServiceBarcodes es (NOLOCK) WHERE NotificationID=@notificationID AND GuestID IS NULL AND Isused=0

		IF(@EServiceBarcodeID IS NOT NULL)
		BEGIN
			UPDATE coc_EServiceBarcodes SET GuestID=@guestID, eventID = @EventID
				WHERE  EServiceBarcodeID = @EServiceBarcodeID
		END
		ELSE
		BEGIN
			SELECT 'No barcodes exists for the event',1
				SELECT @ReturnValue='No barcodes exists for the event'
				RETURN
		END		

		SELECT 
			es.EServiceBarcodeID AS [BarcodeID],
			es.Barcode AS [Barcode]
		FROM coc_EServiceBarcodes es (NOLOCK) WHERE EventID=@EventID AND  EServiceBarcodeID = @EServiceBarcodeID
		Print 'barcode assigned'
		--SELECT @ReturnValue=''
	COMMIT TRANSACTION SaveGuestForEvents
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION SaveGuestForEvents
		SELECT ERROR_LINE(),ERROR_NUMBER()
		SELECT @ReturnValue=ERROR_MESSAGE()
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SaveGuestParticipation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveGuestParticipation]
	@GuestName [NullName],
	@MobileNo [Mobile],
	@ErrorMessage [Remark] OUTPUT 
AS 
SET NOCOUNT ON
	BEGIN TRY 
		IF NOT EXISTS(SELECT NULL FROM coc_GuestParticipations (NOLOCK) WHERE Mobile=@MobileNo)
		BEGIN
		INSERT INTO coc_GuestParticipations(GuestName,Mobile,ParticipationDate)
			SELECT @GuestName,@MobileNo,GETDATE()
			SET @ErrorMessage = SCOPE_IDENTITY()
		END 
		ELSE BEGIN
			UPDATE coc_GuestParticipations
			SET GuestName=@GuestName
			WHERE Mobile=@MobileNo
			SELECT @ErrorMessage = GuestParticipationID FROM coc_GuestParticipations(NOLOCK) WHERE Mobile=@MobileNo
		END 
	END TRY
	BEGIN CATCH									
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);			
	END CATCH
SET NOCOUNT OFF


 
GO
/****** Object:  StoredProcedure [dbo].[SaveKioskLocations]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[SaveKioskLocations]
	@KioskLocationsID INTEGER,  
	@Address1 [Address],
	@Address2 [Address],
	@Longitude NullCode,
	@Latitude NullCode,
	@Location [Remark],
	@MacAddress1 NullCode,
	@MacAddress2 NullCode, 
	@CountryID INTEGER,
	@CityID INTEGER,
	@Remarks [Remark], 
	@IsActive BIT=NULL,
	@DynamicQuery XML,
	@strXML XML,
	@screenXML XML,
	@LocationURL nvarchar(1000) = null,
	@ReturnValue [Remark] OUTPUT
AS
SET NOCOUNT ON
	BEGIN

	BEGIN TRANSACTION TRN_KioskLocation
		BEGIN TRY
		DECLARE @Value TABLE
		( 
			LanguageID INTEGER, 
			Value [Remark]
		)
		--DECLARE @RetailOutletID TABLE
		--(   
		--	RetailOutletID INTEGER
		--)
		INSERT INTO @Value (LanguageID,Value)
		SELECT	XmlTable.value('@LanguageID','INTEGER'),
				XmlTable.value('@Value','[Remark]')
				FROM @DynamicQuery.nodes('/Xml/Row') AS Data(XmlTable)
		 
		IF(ISNULL(@KioskLocationsID,0)=0)
		BEGIN
			INSERT INTO coc_KioskLocations(Address1,Address2,Longitude,Latitude,Location,MacAddress1,MacAddress2,CountryID,CityID,Remarks,IsActive,AddDate,AddUserID,LocationURL)
				SELECT  @Address1,@Address2,@Longitude,@Latitude,@Location,@MacAddress1,@MacAddress2,@CountryID,@CityID,@Remarks,1,GETDATE(),1,@LocationURL

				SET @KioskLocationsID=SCOPE_IDENTITY()
				INSERT INTO coc_KioskLocationLanguages (KioskLocationID,LanguageID,KioskLocation)
				SELECT @KioskLocationsID,LanguageID,Value FROM @Value 


		END	ELSE
		BEGIN
			UPDATE coc_KioskLocations
				SET 
					Address1=@Address1,
					Address2=@Address2,
					Longitude=@Longitude,
					Latitude=@Latitude,
					Location=@Location,
					MacAddress1=@MacAddress1,
					MacAddress2=@MacAddress2, 
					CountryID=@CountryID,
					CityID=@CityID,
					Remarks=@Remarks,
					IsActive=@IsActive,
					EditDate=GETDATE(),
					EditUserID=1,
				
				LocationURL=@LocationURL
				WHERE KioskLocationID=@KioskLocationsID

					DELETE FROM coc_KioskLocationLanguages WHERE KioskLocationID=@KioskLocationsID
			INSERT INTO coc_KioskLocationLanguages (KioskLocationID,LanguageID,KioskLocation)
				SELECT @KioskLocationsID,LanguageID,Value FROM @Value
		END
		   
		DELETE FROM  coc_KioskLocationRetailOutlets where KioskLocationID=@KioskLocationsID
		INSERT INTO coc_KioskLocationRetailOutlets(KioskLocationID,RetailOutletID)
			SELECT  @KioskLocationsID,
				XmlTable.value('@RetailOutletID[1]','INTEGER') 
			FROM @strXML.nodes('/XML/Row') AS Data(XmlTable)

			-----------------------------

		DELETE FROM  coc_KioskScreenMapping where KioskLocationID=@KioskLocationsID
		INSERT INTO coc_KioskScreenMapping(KioskLocationID,KioskScreenID,IsActive)
			SELECT  @KioskLocationsID,
				Xmlscreen.value('KioskScreenID[1]','INTEGER'),1 
			FROM @screenXML.nodes('/XML/KioskScreen') AS Data(Xmlscreen)

			------------------------------

		SET @ReturnValue ='' 
		COMMIT TRANSACTION TRN_KioskLocation
		
		END TRY
		BEGIN CATCH
			SELECT @ReturnValue= ERROR_MESSAGE()
		ROLLBACK TRANSACTION TRN_KioskLocation
		END CATCH
		END
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveKioskOperations]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveKioskOperations]
	@ConsumerName [NullName],
	@MobileNo [Mobile],
	@ConsumerID INTEGER,
	@Barcode [NullDescription],
	@ErrorMessage [Remark] OUTPUT 
AS 
SET NOCOUNT ON 
	DECLARE @EmailID [Email]
	DECLARE @NotificationID INTEGER
	DECLARE @EServiceBarcodeID INTEGER
	DECLARE @ESerivceID INTEGER
	DECLARE @CompetitionID INTEGER
	DECLARE @DBMobileNo [Mobile]
	SET @ErrorMessage = ''
	BEGIN TRY 

		SELECT TOP 1 @EServiceBarcodeID=EServiceBarcodeID,@NotificationID=NotificationID,@DBMobileNo=ISNULL(AsignedMoile,0)
			FROM coc_EServiceBarcodes (NOLOCK) 
		WHERE Barcode=@Barcode --AND AsignedMoile=@MobileNo
		ORDER BY EServiceBarcodeID DESC  
		
		IF((@DBMobileNo != 0 AND @MobileNo!=@DBMobileNo))
		BEGIN
			SET @ErrorMessage = 'Invalid or Mobile'
			RAISERROR(@ErrorMessage, 16, 1)
		END

		SELECT @CompetitionID=ES.CompetitionID 
			FROM coc_Notifications NF(NOLOCK)
				INNER JOIN coc_EServices ES(NOLOCK) ON NF.EServiceID=ES.EServiceID
			WHERE NF.NotificationID=@NotificationID 

		
		IF(ISNULL(@EServiceBarcodeID,0)=0 OR @CompetitionID != 41 OR @CompetitionID != 42)
		BEGIN
			SET @ErrorMessage = 'Invalid Barcode or Mobile'
			RAISERROR(@ErrorMessage, 16, 1)
		END

		SELECT @ESerivceID=EServiceID FROM coc_Notifications(NOLOCK) WHERE NotificationID=@NotificationID

		IF(ISNULL(@ConsumerID,0)>0)
		BEGIN
			SELECT @MobileNo=PrimaryMobile,@EmailID=EmailID FROM coc_Consumers(NOLOCK)  WHERE ConsumerID=@ConsumerID
		
			UPDATE coc_EServiceBarcodes
				SET AsignedMoile = @MobileNo,
					AsignedEmailID =@EmailID,
					ConsumerID=@ConsumerID,
					UsedDate=GETDATE()
			WHERE EServiceBarcodeID=@EServiceBarcodeID

			UPDATE coc_ECoupons 
				SET ParticipationByKiosk =1
			 WHERE EServiceID=@ESerivceID
			 
		END
		ELSE BEGIN
			--INSERT INTO coc_GuestParticipations(GuestName,Mobile,ParticipationDate)
			--		SELECT @ConsumerName,@MobileNo,GETDATE()
			UPDATE coc_EServiceBarcodes
				SET AsignedMoile = @MobileNo,
					AsignedEmailID =@ConsumerName,
					UsedDate=GETDATE() 
			WHERE EServiceBarcodeID=@EServiceBarcodeID
			
			UPDATE coc_ECoupons 
				SET ParticipationByKiosk =1
			 WHERE EServiceID=@ESerivceID
		END
		--SELECT @Barcode=Barcode FROM coc_EServiceBarcodes(NOLOCK) WHERE EServiceBarcodeID=@EServiceBarcodeID
	END TRY
	BEGIN CATCH									
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);			
	END CATCH
SET NOCOUNT OFF











GO
/****** Object:  StoredProcedure [dbo].[SaveLanguage]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveLanguage]
	@LanguageID INTEGER =NULL,
	@Language [Description],
	@CssFilePath [Remark]=NULL,
	@ResourceXml XML=NULL,
	@Direction Char(3)=NULL,
	@IsActive BIT=NULL,
	@ReturnValue [Remark]=NULL OUTPUT
AS
	SET NOCOUNT ON  
		BEGIN TRY  
		BEGIN TRANSACTION Trn_SaveLanguage 

		DECLARE @Counter INT
		DECLARE @key [Description]

		DECLARE @Resources TABLE
		(
			ScreenID INTEGER,   
			ScreenViewID INTEGER,
			ResourceKey [Description],
			ResourceValue [Description],
			GridResourceID INTEGER,
			ResourceText [Description]
		)
		
		INSERT INTO @Resources (ScreenID,ScreenViewID,ResourceKey,ResourceValue,GridResourceID,ResourceText)
		  SELECT XmlTable.value('PageID[1]','INTEGER'),  
				 XmlTable.value('VewiID[1]','INTEGER'),	  
				 XmlTable.value('ReferenceKey[1]','[Description]'), 
				 XmlTable.value('NeedToChange[1]','[Description]'),	 
				 XmlTable.value('GridID[1]','INTEGER'), 
				 XmlTable.value('ReferenceValue[1]','[Description]') 
		 FROM @ResourceXml.nodes('/Resource/Key') AS Data(XmlTable) 
		IF ISNULL(@LanguageID,0)=0
		BEGIN
			INSERT INTO coc_Languages ([Language],CssFilePath,Direction,IsActive,IsDefaultLanguage)
				SELECT @Language,@CssFilePath,@Direction,@IsActive,0
			SET @LanguageID=SCOPE_IDENTITY();
			   
			INSERT INTO coc_Resources(ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,ResourceText,GridResourceID)
				SELECT ScreenID,ScreenViewID,@LanguageID,ResourceKey,ResourceValue,ResourceText,GridResourceID 
					FROM @Resources 
			INSERT INTO coc_MenuLanguages
				SELECT MenuID,@LanguageID,Menu FROM coc_MenuLanguages (NOLOCK) WHERE LanguageID=1
			INSERT INTO coc_EnumValueLanguages
				SELECT  EnumValueID,@LanguageID,EnumValue FROM coc_EnumValueLanguages (NOLOCK) WHERE LanguageID=1
			SELECT @Counter =MIN(LanguageID) FROM coc_Languages(NOLOCK)
			WHILE @Counter IS NOT NULL
			BEGIN
				INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
					SELECT 1003,NULL,@LanguageID,'Country'+ CONVERT(NVARCHAR(10), @Counter) + 'Lbl','Country' + @Language,NULL,NULL,'Country' + @Language
				INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
					SELECT 1004,NULL,@LanguageID,'City'+ CONVERT(NVARCHAR(10), @Counter) + 'Lbl','City' + @Language,NULL,NULL,'City' + @Language
				INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
					SELECT 1005,NULL,@LanguageID,'Location'+ CONVERT(NVARCHAR(10), @Counter) + 'Lbl','Location' + @Language,NULL,NULL,'Location' + @Language					
				INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
					SELECT 2004,NULL,@LanguageID,'Promotion'+ CONVERT(NVARCHAR(10), @Counter) + 'Lbl','Promotion' + @Language,NULL,NULL,'Promotion' + @Language
				INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
					SELECT 2006,NULL,@LanguageID,'RetailOutlet'+ CONVERT(NVARCHAR(10), @Counter) + 'Lbl','RetailOutlet' + @Language,NULL,NULL,'RetailOutlet' + @Language
				--INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
				--	SELECT 2012,NULL,@@LanguageID,'CountryLbl'+ CONVERT(NVARCHAR(10), @@Counter),'Country' + @Language,NULL,NULL,'Country' + @Language
				INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
					SELECT 2021,NULL,@LanguageID,'Nationality'+ CONVERT(NVARCHAR(10), @Counter) + 'Lbl','Nationality' + @Language,NULL,NULL,'Nationality' + @Language
				INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
					SELECT 2013,NULL,@LanguageID,'Question'+ CONVERT(NVARCHAR(10), @Counter) + 'Lbl','Question' + @Language,NULL,NULL,'Question' + @Language
				INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
					SELECT 1116,NULL,@LanguageID,'GeneralNotification'+ CONVERT(NVARCHAR(10), @Counter) + 'Lbl','GeneralNotification' + @Language,NULL,NULL,'GeneralNotification' + @Language
				INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
					SELECT 1015,NULL,@LanguageID,'ECouponMessage'+ CONVERT(NVARCHAR(10), @Counter) + 'Lbl','ECouponMessage' + @Language,NULL,NULL,'ECouponMessage' + @Language
				INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
					SELECT 2010,NULL,@LanguageID,'NotificationMessage'+ CONVERT(NVARCHAR(10), @Counter) + 'Lbl','NotificationMessage' + @Language,NULL,NULL,'NotificationMessage' + @Language
				INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
					SELECT 2010,NULL,@LanguageID,'DetailMessage'+ CONVERT(NVARCHAR(10), @Counter) + 'Lbl','DetailMessage' + @Language,NULL,NULL,'DetailMessage' + @Language
				INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
					SELECT 2016,NULL,@LanguageID,'RedemptionPlan'+ CONVERT(NVARCHAR(10), @Counter) + 'Lbl','RedemptionPlan' + @Language,NULL,NULL,'RedemptionPlan' + @Language
				INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
					SELECT 1014,NULL,@LanguageID,'SalesNotification'+ CONVERT(NVARCHAR(10), @Counter) + 'Lbl','SalesNotification' + @Language,NULL,NULL,'SalesNotification' + @Language

				IF(@Counter<@LanguageID)
				BEGIN
					INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
						SELECT 1003,NULL,@Counter,'Country'+ CONVERT(NVARCHAR(10), @LanguageID) + 'Lbl','Country' + @Language,NULL,NULL,'Country' + @Language
					INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
						SELECT 1004,NULL,@Counter,'City'+ CONVERT(NVARCHAR(10), @LanguageID)+ 'Lbl','City' + @Language,NULL,NULL,'City' + @Language
					INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
						SELECT 1005,NULL,@Counter,'Location'+ CONVERT(NVARCHAR(10), @LanguageID)+ 'Lbl','Location' + @Language,NULL,NULL,'Location' + @Language					
					INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
						SELECT 2004,NULL,@Counter,'Promotion'+ CONVERT(NVARCHAR(10), @LanguageID)+ 'Lbl','Promotion' + @Language,NULL,NULL,'Promotion' + @Language
					INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
						SELECT 2006,NULL,@Counter,'RetailOutlet'+ CONVERT(NVARCHAR(10), @LanguageID)+ 'Lbl','RetailOutlet' + @Language,NULL,NULL,'RetailOutlet' + @Language
					--INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
					--	SELECT 2012,NULL,@@LanguageID,'CountryLbl'+ CONVERT(NVARCHAR(10), @LanguageID),'Country' + @Language,NULL,NULL,'Country' + @Language
					INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
						SELECT 2021,NULL,@Counter,'Nationality'+ CONVERT(NVARCHAR(10), @LanguageID)+ 'Lbl','Nationality' + @Language,NULL,NULL,'Nationality' + @Language
					INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
						SELECT 2013,NULL,@Counter,'Question'+ CONVERT(NVARCHAR(10), @LanguageID)+ 'Lbl','Question' + @Language,NULL,NULL,'Question' + @Language
					INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
						SELECT 2013,NULL,@Counter,'GeneralNotification'+ CONVERT(NVARCHAR(10), @LanguageID)+ 'Lbl','GeneralNotification' + @Language,NULL,NULL,'GeneralNotification' + @Language
					INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
						SELECT 1015,NULL,@Counter,'ECouponMessage'+ CONVERT(NVARCHAR(10), @LanguageID)+ 'Lbl','ECouponMessage' + @Language,NULL,NULL,'ECouponMessage' + @Language
					INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
						SELECT 2010,NULL,@Counter,'NotificationMessage'+ CONVERT(NVARCHAR(10), @LanguageID)+ 'Lbl','NotificationMessage' + @Language,NULL,NULL,'NotificationMessage' + @Language
					INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
						SELECT 2010,NULL,@Counter,'DetailMessage'+ CONVERT(NVARCHAR(10), @LanguageID)+ 'Lbl','DetailMessage' + @Language,NULL,NULL,'DetailMessage' + @Language
					INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
						SELECT 2016,NULL,@Counter,'RedemptionPlan'+ CONVERT(NVARCHAR(10), @LanguageID)+ 'Lbl','RedemptionPlan' + @Language,NULL,NULL,'RedemptionPlan' + @Language
					INSERT INTO coc_Resources (ScreenID,ScreenViewID,LanguageID,ResourceKey,ResourceValue,MasterResourceID,GridResourceID,ResourceText)	
						SELECT 1014,NULL,@Counter,'SalesNotification'+ CONVERT(NVARCHAR(10), @LanguageID)+ 'Lbl','SalesNotification' + @Language,NULL,NULL,'SalesNotification' + @Language
				END

				SELECT @Counter = MIN(LanguageID) FROM coc_Languages(NOLOCK) WHERE LanguageID>@Counter
			END
		END
		ELSE BEGIN
		IF(@IsActive=0)
		BEGIN
			UPDATE coc_Languages 
				SET IsActive=@IsActive
			WHERE LanguageID=@LanguageID
		END
		ELSE
		BEGIN
		UPDATE coc_Languages 
				SET [Language]=@Language,
					CssFilePath=@CssFilePath,
					Direction=@Direction,
					IsActive=@IsActive
				WHERE LanguageID=@LanguageID
		END
			
			END
		SELECT @ReturnValue=''

	COMMIT TRANSACTION Trn_SaveLanguage 
	END TRY    
	BEGIN CATCH 
		ROLLBACK TRANSACTION Trn_SaveLanguage 
		SELECT @ReturnValue=ERROR_MESSAGE() 
	END CATCH 
SET NOCOUNT OFF






GO
/****** Object:  StoredProcedure [dbo].[SaveLocations]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[SaveLocations]
	@LocationsID INTEGER, 
	@LocationsEnglish [Description]=NULL,
	@LocationsArabic [NullDescription]=NULL,
	@LocationsUrdu [NullDescription]=NULL,
	@Address1 [Address],
	@Address2 [Address],
	@Longitude NullCode,
	@Latitude NullCode, 
	@IsActive BIT=NULL
AS
SET NOCOUNT ON
	BEGIN
		IF(ISNULL(@LocationsID,0)=0)
		BEGIN
			INSERT INTO coc_Locations(LocationEnglish,LocationArabic,LocationUrdu,Address1,Address2,Longitude,Latitude,IsActive,AddDate,AddUserID)
				SELECT  @LocationsEnglish,@LocationsArabic,@LocationsUrdu,@Address1,@Address2,@Longitude,@Latitude,1,GETDATE(),1
		END	ELSE
		BEGIN
			UPDATE coc_Locations
				SET LocationEnglish=@LocationsEnglish,
					LocationArabic=@LocationsArabic,
					LocationUrdu=@LocationsUrdu,
					Address1=@Address1,
					Address2=@Address2,
					Longitude=@Longitude,
					Latitude=@Latitude, 
					IsActive=@IsActive,
					EditDate=GETDATE(),
					EditUserID=1
				WHERE LocationID=@LocationsID
		END 
	END
SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[SaveLoyaltyPointReward]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveLoyaltyPointReward]
	@UserID INTEGER,
	@LoyaltyPointXml XML=NULL,
	@StatusID INTEGER,
	@ReturnValue [Remark] OUTPUT
AS
	BEGIN
	DECLARE @PreviousUserID INTEGER
	DECLARE @LoyaltyPointSetups TABLE
	(
		LoyaltyPointSetupID INTEGER,
		SetupValue [Amount]
	)
	INSERT INTO @LoyaltyPointSetups(LoyaltyPointSetupID,SetupValue)
		SELECT pointReward.value('(LoyaltyPointSetupID[1])', 'INTEGER'),
				pointReward.value('(SetupValue[1])', 'Amount')
		FROM @LoyaltyPointXml.nodes('/LoyaltyPointReward/LoyaltyPoint') AS Data(pointReward)
					 
		IF(@StatusID=0)
		BEGIN
			UPDATE LP SET 
				   LP.EditValue=LS.SetupValue,
				   LP.EditUserID=@UserID,
				   LP.IsApproved=0,
				   LP.EditDate=GETDATE(),
				   LP.CheckerDate=NULL,
				   LP.CheckerUserID=NULL
				FROM coc_LoyaltyPointSetups LP
					INNER JOIN @LoyaltyPointSetups LS ON LS.LoyaltyPointSetupID=LP.LoyaltyPointSetupID
			SET @ReturnValue=''
		END
		ELSE IF(@StatusID=1 OR @StatusID=2)
		BEGIN
			SELECT @PreviousUserID=EditUserID FROM coc_LoyaltyPointSetups(NOLOCK)
			IF(@PreviousUserID<>@UserID)
			 BEGIN
				UPDATE LP SET 
				   LP.SetupValue=CASE WHEN @StatusID=1 THEN LP.EditValue ELSE LP.SetupValue END,
				   LP.EditValue=0,
				   CheckerUserID=@UserID,
				   CheckerDate=GETDATE(),
				   IsApproved=1
				FROM coc_LoyaltyPointSetups LP
					INNER JOIN coc_LoyaltyPointSetups TL (NOLOCK) ON TL.LoyaltyPointSetupID=LP.LoyaltyPointSetupID
			 END
			 ELSE BEGIN
						SET @ReturnValue='1'
				  END
		END
	END

GO
/****** Object:  StoredProcedure [dbo].[SaveNationality]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveNationality]
	@NationalityID INTEGER, 
	@IsActive BIT=NULL,
	@DynamicQuery XML,
	@ReturnValue [Remark] OUTPUT
AS
SET NOCOUNT ON
	BEGIN

		BEGIN TRANSACTION TRN_Nationality
		DECLARE @Count INTEGER
		BEGIN TRY
		DECLARE @Value TABLE
		( 
			LanguageID INTEGER, 
			Value [Remark]
		)
		INSERT INTO @Value (LanguageID,Value)
		SELECT	XmlTable.value('@LanguageID','INTEGER'),
				XmlTable.value('@Value','[Remark]')
				FROM @DynamicQuery.nodes('/Xml/Row') AS Data(XmlTable)
		 
		IF(ISNULL(@NationalityID,0)=0)
		BEGIN 
			SELECT @Count=COUNT(*) FROM [coc_Nationalities] (NOLOCK)
			IF(@Count=0)
			BEGIN
			SELECT @NationalityID=(@Count +1) FROM [coc_Nationalities](NOLOCK) 
			SET @NationalityID=@NationalityID
			END
			ELSE BEGIN
					SELECT @NationalityID=MAX(ISNULL(NationalityID,0))+1 FROM [coc_Nationalities](NOLOCK) 
					SET @NationalityID=@NationalityID
				 END

			INSERT INTO [coc_Nationalities](NationalityID,IsActive)
				SELECT @NationalityID,1    
					 
			INSERT INTO coc_NationalityLanguages (NationalityID,LanguageID,Nationality)
				SELECT @NationalityID,LanguageID,Value FROM @Value 

		END	ELSE
		BEGIN 
			UPDATE [coc_Nationalities]
				SET IsActive=@IsActive
				WHERE NationalityID=@NationalityID 

			DELETE FROM coc_NationalityLanguages WHERE NationalityID=@NationalityID
			INSERT INTO coc_NationalityLanguages (NationalityID,LanguageID,Nationality)
				SELECT @NationalityID,LanguageID,Value FROM @Value
		END   
		SET @ReturnValue ='' 
		COMMIT TRANSACTION TRN_Nationality
		
		END TRY
		BEGIN CATCH
			SELECT @ReturnValue= ERROR_MESSAGE()
		ROLLBACK TRANSACTION TRN_Nationality
		END CATCH
		END
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveNotificationForConsumer]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveNotificationForConsumer]   
  
 @TemplateID INTEGER = NULL  
,@MessageTitleText nvarchar(100)  
,@MessageText nvarchar(1000)  
,@ConsumerID INTEGER  
,@EServiceID INTEGER  
,@Barcode NVARCHAR(100)  
  
AS  
BEGIN  
  
DECLARE @NotificationID INTEGER  
DECLARE @Corporate NVARCHAR(200)  
DECLARE @NotificationSendID INTEGER  
DECLARE @minLangaugeID INTEGER  
DECLARE @maxLanguageID INTEGER   
DECLARE @ConsumerName NVARCHAR(300)  
DECLARE @languageID INTEGER  
  
  
SELECT @NotificationID = NotificationID FROM coc_Notifications(NOLOCK) WHERE EServiceID = @EServiceID  
  
SELECT @corporate =isnull(CorporateName,'') from  coc_Corporates C (NOLOCK) inner join coc_EServices ES (NOLOCK) ON    
  ES.CorporateID = C.CorporateID  
  where Es.EServiceID = @EServiceID  
  
    IF @NotificationID is null  
    BEGIN  
  PRINT 'Null'  
     PRINT 'Insert into notifications table'  
  INSERT INTO coc_Notifications(EServiceID,NotificationRead,NotificationSend,NotificationCount,ResendCounter)  
   SELECT @EServiceID,0,0,0,0  
  SET @NotificationID = SCOPE_IDENTITY()   
    END  
  
  
 PRINT 'Insert into notificationSends table'  
     INSERT INTO coc_NotificationSends(NotificationID,SendingDate,SendingType,SearchCount,NotificationCount)  
       SELECT @NotificationID,GETDATE(),4,0,0  
     SET @NotificationSendID = SCOPE_IDENTITY()  
  
  
   SELECT @ConsumerName= isnull(FirstName,'') +' ' + isnull(SecondName,'') + ' '+ isnull(FamilyName,'')   
   FROM coc_Consumers(NOLOCK) CU WHERE CU.ConsumerID=@ConsumerID  
    
  SELECT @minLangaugeID = MIN(LanguageID) ,@maxLanguageID = MAX(LanguageID) from coc_Languages  (NOLOCK)
  
  PRINT @ConsumerName  
  PRINT @minLangaugeID  
  PRINT @maxLanguageID  
  
  declare @MessageTitle nvarchar(100)  
  declare @Message nvarchar(1000)  
    
  SET @languageID = @minLangaugeID  
  WHILE (@languageID<=@maxLanguageID)  
  BEGIN  
   if @TemplateID is not null  
    SELECT @MessageTitle = TemplateTitle, @Message =Template FROM coc_MessageTemplateLanguages  (NOLOCK)
         WHERE MessageTemplateID = @TemplateID AND LanguageID =@languageID   
   else  
    select @MessageTitle = @MessageTitleText, @Message = @MessageText  
  
   IF @MessageTitle IS NOT NULL AND @Message IS NOT NULL  
   BEGIN  
     PRINT 'Message valid'  
    SELECT @MessageTitle = REPLACE(@MessageTitle,'@name', @ConsumerName)  
    SELECT @Message = REPLACE(@Message,'@name', @ConsumerName)  
    SELECT @MessageTitle = REPLACE(@MessageTitle,'@barcode', '~'+ @Barcode)  
    SELECT @Message = REPLACE(@Message,'@barcode', '~'+ @Barcode)  
    SELECT @MessageTitle = REPLACE(@MessageTitle,'@corporate', @Corporate)  
    SELECT @Message = REPLACE(@Message,'@corporate', @Corporate)  
      
  
    INSERT INTO coc_NotificationSendLanguages (NotificationSendID, LanguageID, [Subject],[Message]) Values  
    (@NotificationSendID,@languageID, @MessageTitle,@Message)  
    PRINT 'NotificationSendLanguages'  
    PRINT SCOPE_IDENTITY()  
  
   END   
  
  
   IF EXISTS(SELECT LanguageID FROM coc_Languages (NOLOCK) WHERE LanguageID>@languageID)  
   BEGIN  
    SELECT top 1 @languageID=  LanguageID FROM coc_Languages (NOLOCK) WHERE LanguageID>@languageID order by LanguageID  
   END  
   ELSE  
   BEGIN  
    --Exit loop  
    SET @languageID = @languageID + 1  
   END  
  END  
  
    
  INSERT INTO coc_consumernotifications (NotificationSendID, ConsumerID, SendDate,HasChecked)  
   VALUES (@NotificationSendID, @ConsumerID, GETDATE(),0)  
   PRINT SCOPE_IDENTITY()  
END  
GO
/****** Object:  StoredProcedure [dbo].[SaveNotificationForEVoucherApproval]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveNotificationForEVoucherApproval] 

@EbundleID INTEGER
,@EVoucherID INTEGER
,@UserID INTEGER

AS
BEGIN

DECLARE @NotificationID INTEGER
DECLARE @Barcode NVARCHAR(100)
DECLARE @VoucherName NVARCHAR(200)=''
DECLARE @DistributorCorporate NVARCHAR(200)
DECLARE @NotificationSendID INTEGER
DECLARE @minLangaugeID INTEGER
DECLARE @maxLanguageID INTEGER 
DECLARE @ConsumerName NVARCHAR(300)
--DECLARE @CorporateID INTEGER   --------- USING @UserID Updated by Arya[18-01-2018]
DECLARE @languageID INTEGER
DECLARE @eligibilityMessageTitle NVARCHAR(MAX)
DECLARE @eligibilityMessage NVARCHAR(MAX)
DECLARE @voucherApprovalMessageTitleForLanguage NVARCHAR(MAX)
DECLARE @voucherApprovalMessageForLanguage NVARCHAR(MAX)
DECLARE @eligibilityCount INTEGER
DECLARE @EVoucherBundleQRCodeID INTEGER


SELECT @UserID = C.UserID From coc_EServices ES (NOLOCK)
INNER JOIN coc_EVoucher EV (NOLOCK) on  EV.EVoucherID = @EVoucherID	
INNER JOIN coc_corporates C(NOLOCK) ON ES.CorporateID =C.CorporateID
 WHERE ES.EServiceID=EV.EServiceID

--SELECT @NotificationID = NotificationID FROM coc_Notifications(NOLOCK) WHERE EBundleID=@EBundleID
--    IF @NotificationID is null
--    BEGIN
--		PRINT 'Null'
--	    PRINT 'Insert into notifications table'
--		INSERT INTO coc_Notifications(EBundleID,NotificationRead,NotificationSend,NotificationCount,ResendCounter)
--		 SELECT @EBundleID,0,0,0,0
--		SET @NotificationID = SCOPE_IDENTITY()	
--    END


	--PRINT 'Insert into notificationSends table'
 --    INSERT INTO coc_NotificationSends(NotificationID,SendingDate,SendingType,SearchCount,NotificationCount)
 --      SELECT @NotificationID,GETDATE(),1,0,0
 --    SET @NotificationSendID = SCOPE_IDENTITY()

	
	begin try
	
	 
	 --SELECT @minLangaugeID = MIN(LanguageID) ,@maxLanguageID = MAX(LanguageID) from coc_Languages

	 --PRINT @minLangaugeID
	 --PRINT @maxLanguageID
	 
	 --SET @languageID = @minLangaugeID
	 --WHILE (@languageID<=@maxLanguageID)
	 --BEGIN
				 SET @VoucherName=(SELECT ResourceValue FROM coc_EVoucherLanguages (NOLOCK) WHERE EVoucherID=@EVoucherID AND ResourceKey='VoucherName' AND LanguageID=1);
				SET @voucherApprovalMessageTitleForLanguage ='Voucher Approval Notification';
				SET @voucherApprovalMessageForLanguage ='Admin has requested to distribute your voucher "'+@VoucherName+'". Please visit the voucher configuration page to allow access';
				print @voucherApprovalMessageForLanguage;

				--INSERT INTO coc_NotificationSendLanguages (NotificationSendID, LanguageID, [Subject],[Message]) Values
				--(@NotificationSendID,@languageID, @voucherApprovalMessageTitleForLanguage,@voucherApprovalMessageForLanguage)
				--PRINT 'NotificaitonSendLanguages'
				--PRINT SCOPE_IDENTITY()

					INSERT INTO coc_ServiceTaskNotification (
			UserId
			,[Date]
			,[Message]
			,[Result]
			,[STATUS]
			,RowStatus
			,LanguageId
			,ReadStatus
			)
		VALUES (
			
			@UserID
			,GETDATE()
			,@voucherApprovalMessageForLanguage
			,'Success'
			,1
			,1
			,1
			,0
			);

			 SET @VoucherName=(SELECT ResourceValue FROM coc_EVoucherLanguages (NOLOCK) WHERE EVoucherID=@EVoucherID AND ResourceKey='VoucherName' AND LanguageID=2);
				SET @voucherApprovalMessageTitleForLanguage ='Voucher Approval Notification';
				SET @voucherApprovalMessageForLanguage ='Admin has requested to distribute your voucher "'+@VoucherName+'". Please visit the voucher configuration page to allow access';
				print @voucherApprovalMessageForLanguage;

				--INSERT INTO coc_NotificationSendLanguages (NotificationSendID, LanguageID, [Subject],[Message]) Values
				--(@NotificationSendID,@languageID, @voucherApprovalMessageTitleForLanguage,@voucherApprovalMessageForLanguage)
				--PRINT 'NotificaitonSendLanguages'
				--PRINT SCOPE_IDENTITY()

					INSERT INTO coc_ServiceTaskNotification (
			UserId
			,[Date]
			,[Message]
			,[Result]
			,[STATUS]
			,RowStatus
			,LanguageId
			,ReadStatus
			)
		VALUES (
			
			@UserID
			,GETDATE()
			,@voucherApprovalMessageForLanguage
			,'Success'
			,1
			,1
			,2
			,0
			);


		--	IF EXISTS(SELECT LanguageID FROM coc_Languages WHERE LanguageID>@languageID)
		--	BEGIN
		--		SELECT @languageID= LanguageID FROM coc_Languages WHERE LanguageID>@languageID
		--	END
		--	ELSE
		--	BEGIN
		--		--Exit loop
		--		SET @languageID = @languageID + 1
		--	END
		--END

		end try
		begin catch
			SELECT ERROR_MESSAGE() AS ERROR
		end catch
		--INSERT INTO coc_consumernotifications (NotificationSendID, ConsumerID, SendDate,HasChecked)
		-- VALUES (@NotificationSendID, @CorporateID, GETDATE(),0)
		-- PRINT SCOPE_IDENTITY()
END
GO
/****** Object:  StoredProcedure [dbo].[SaveNotificationForReceiveVoucher]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveNotificationForReceiveVoucher] 

 @TemplateID INTEGER
,@EVoucherBundleEligibilityForConsumersID INTEGER 
,@EServiceBarCodeID INTEGER

AS
BEGIN

DECLARE @NotificationID INTEGER
DECLARE @EBundleID INTEGER
DECLARE @Barcode NVARCHAR(100)
DECLARE @DistributorCorporate NVARCHAR(200)
DECLARE @Corporate NVARCHAR(200)
DECLARE @NotificationSendID INTEGER
DECLARE @minLangaugeID INTEGER
DECLARE @maxLanguageID INTEGER 
DECLARE @ConsumerName NVARCHAR(300)
DECLARE @ConsumerID INTEGER
DECLARE @languageID INTEGER
DECLARE @eligibilityMessageTitle NVARCHAR(MAX)
DECLARE @eligibilityMessage NVARCHAR(MAX)
DECLARE @eligibilityMessageTitleForLanguage NVARCHAR(MAX)
DECLARE @eligibilityMessageForLanguage NVARCHAR(MAX)
DECLARE @eligibilityCount INTEGER
DECLARE @EVoucherBundleQRCodeID INTEGER
DECLARE @EVoucherID INTEGER
DECLARE @EServiceID INTEGER  = NULL

SELECT @Barcode = Barcode, @EVoucherID=EVoucherID FROM coc_EServiceBarcodes(NOLOCK) WHERE EServiceBarcodeID = @EServiceBarCodeID

SELECT @EServiceID = EServiceID from coc_EVoucher (NOLOCK) where EVoucherID= @EVoucherID

SELECT @Corporate = CorporateName From coc_Corporates C (NOLOCK)
INNER JOIN coc_EServices ES(NOLOCK) ON ES.CorporateID = C.CorporateID 
INNER JOIN coc_EVoucher EV(NOLOCK) on EV.EServiceID = ES.EServiceID
WHERE EV.EVoucherID = @EVoucherID	

SELECT @EVoucherBundleQRCodeID = EVoucherBundleQRCodeID,@ConsumerID=ConsumerID FROM coc_EVoucherBundleEligibilityForConsumers (NOLOCK) WHERE EVoucherBundleEligibilityForConsumersID = @EVoucherBundleEligibilityForConsumersID
SELECT @EBundleID =EBundleID FROM coc_EVoucherBundleQRCode(NOLOCK) WHERE EVoucherBundleQRCodeID = @EVoucherBundleQRCodeID

SELECT @DistributorCorporate = CorporateName From coc_Corporates C (NOLOCK) INNER JOIN coc_EVoucherBundleQRCode D (NOLOCK) ON C.CorporateID = D.CorporateID 
	WHERE D.EVoucherBundleQRCodeID = @EVoucherBundleQRCodeID

SELECT @NotificationID = NotificationID FROM coc_Notifications(NOLOCK) WHERE EBundleID=@EBundleID
    IF @NotificationID is null
    BEGIN
		PRINT 'Null'
	    PRINT 'Insert into notifications table'
		INSERT INTO coc_Notifications(EServiceID, EBundleID,NotificationRead,NotificationSend,NotificationCount,ResendCounter)
		 SELECT @EServiceID, @EBundleID,0,0,0,0
		SET @NotificationID = SCOPE_IDENTITY()	
    END


	PRINT 'Insert into notificationSends table'
     INSERT INTO coc_NotificationSends(NotificationID,SendingDate,SendingType,SearchCount,NotificationCount)
       SELECT @NotificationID,GETDATE(),4,0,0
     SET @NotificationSendID = SCOPE_IDENTITY()


	  SELECT @ConsumerName= FirstName +' ' + SecondName + ' '+ FamilyName 
			FROM coc_Consumers(NOLOCK) CU WHERE CU.ConsumerID=@ConsumerID
	 
	 SELECT @minLangaugeID = MIN(LanguageID) ,@maxLanguageID = MAX(LanguageID) from coc_Languages (NOLOCK)

	 PRINT @ConsumerName
	 PRINT @minLangaugeID
	 PRINT @maxLanguageID
	 
	 SET @languageID = @minLangaugeID
	 WHILE (@languageID<=@maxLanguageID)
	 BEGIN
			SELECT @eligibilityMessageTitle = ResourceValue FROM coc_EBundleLanguages 
								WHERE ResourceKey = 'NotificationMessageTitle' AND LanguageID =@languageID AND EBundleID=@EBundleID 
		
			SELECT @eligibilityMessage = ResourceValue FROM coc_EBundleLanguages 
								WHERE ResourceKey = 'NotificationMessage' AND LanguageID =@languageID AND EBundleID=@EBundleID 

			IF @eligibilityMessageTitle IS NOT NULL AND @eligibilityMessage IS NOT NULL
			BEGIN
			  PRINT 'Message valid'
				SELECT @eligibilityMessageTitleForLanguage = REPLACE(@eligibilityMessageTitle,'@name', @ConsumerName)
				SELECT @eligibilityMessageForLanguage = REPLACE(@eligibilityMessage,'@name', @ConsumerName)
				SELECT @eligibilityMessageTitleForLanguage = REPLACE(@eligibilityMessageTitleForLanguage,'@distribuorCorporate', @DistributorCorporate)
				SELECT @eligibilityMessageForLanguage = REPLACE(@eligibilityMessageForLanguage,'@barcode', '~'+ @Barcode)
				SELECT @eligibilityMessageTitleForLanguage = REPLACE(@eligibilityMessageTitleForLanguage,'@barcode', '~'+@Barcode)
				SELECT @eligibilityMessageForLanguage = REPLACE(@eligibilityMessageForLanguage,'@corporate', @Corporate)
				SELECT @eligibilityMessageTitleForLanguage = REPLACE(@eligibilityMessageTitleForLanguage,'@corporate', @Corporate)

				INSERT INTO coc_NotificationSendLanguages (NotificationSendID, LanguageID, [Subject],[Message]) Values
				(@NotificationSendID,@languageID, @eligibilityMessageTitleForLanguage,@eligibilityMessageForLanguage)
				PRINT 'NotificaitonSendLanguages'
				PRINT SCOPE_IDENTITY()

			END	


			IF EXISTS(SELECT LanguageID FROM coc_Languages (NOLOCK) WHERE LanguageID>@languageID)
			BEGIN
				SELECT top 1 @languageID=  LanguageID FROM coc_Languages (NOLOCK) WHERE LanguageID>@languageID order by LanguageID
			END
			ELSE
			BEGIN
				--Exit loop
				SET @languageID = @languageID + 1
			END
		END

		declare @consumerNotificationID BIGINT
		INSERT INTO coc_consumernotifications (NotificationSendID, ConsumerID, SendDate,HasChecked)
		 VALUES (@NotificationSendID, @ConsumerID, GETDATE(),0)
		 PRINT SCOPE_IDENTITY()
		
END
GO
/****** Object:  StoredProcedure [dbo].[SaveNotificationForVoucherEligibility]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveNotificationForVoucherEligibility]
 @EVoucherBundleQRCodeID INTEGER
,@TemplateID INTEGER = 0
,@EVoucherBundleEligibilityForConsumersID INTEGER

AS

BEGIN

	--3 Replacable dynamic data supports 
	---------------------------------------
	--1.@name  for consumer name
	--2.@distribuorCorporate for Corporate who distributes the voucher
	--3 @voucherCount  for count of voucher availed by the consumer.
	
	DECLARE @EBundleID INTEGER
	
	DECLARE @ConsumerID INTEGER
	
    DECLARE @Corporate NVARCHAR(200)
    
	DECLARE @NotificationSendID INTEGER
	DECLARE @NotificationID INTEGER
	DECLARE @minLangaugeID INTEGER
	 DECLARE @maxLanguageID INTEGER 
	 DECLARE @ConsumerName NVARCHAR(300)
	 DECLARE @languageID INTEGER
	  DECLARE @eligibilityMessageTitle NVARCHAR(MAX)
	 DECLARE @eligibilityMessage NVARCHAR(MAX)
	 DECLARE @eligibilityMessageTitleForLanguage NVARCHAR(MAX)
	 DECLARE @eligibilityMessageForLanguage NVARCHAR(MAX)
	 DECLARE @eligibilityCount INTEGER

	SELECT @EBundleID =EBundleID FROM coc_EVoucherBundleQRCode(NOLOCK) WHERE EVoucherBundleQRCodeID = @EVoucherBundleQRCodeID
	PRINT @EBundleID
	
	SELECT @Corporate = CorporateName From coc_Corporates C (NOLOCK) INNER JOIN coc_EVoucherBundleQRCode D(NOLOCK) ON C.CorporateID = D.CorporateID 
	WHERE D.EVoucherBundleQRCodeID = @EVoucherBundleQRCodeID

	SELECT @ConsumerID = ConsumerID, @eligibilityCount =EligibleNoOfVouchers FROM coc_EVoucherBundleEligibilityForConsumers(NOLOCK) WHERE EVoucherBundleEligibilityForConsumersID = @EVoucherBundleEligibilityForConsumersID
	PRINT @ConsumerID
	PRINT @eligibilityCount

   IF @ConsumerID is not null
   BEGIN    
  
    SELECT @NotificationID = NotificationID FROM coc_Notifications(NOLOCK) WHERE EBundleID=@EBundleID
    IF @NotificationID is null
    BEGIN
		PRINT 'Null'
	    PRINT 'Insert into notifications table'
		INSERT INTO coc_Notifications(EBundleID,NotificationRead,NotificationSend,NotificationCount,ResendCounter)
		 SELECT @EBundleID,0,0,0,0
		SET @NotificationID = SCOPE_IDENTITY()	
    END
   
	PRINT 'Insert into notificationSends table'
     INSERT INTO coc_NotificationSends(NotificationID,SendingDate,SendingType,SearchCount,NotificationCount)
       SELECT @NotificationID,GETDATE(),4,0,0
     SET @NotificationSendID = SCOPE_IDENTITY()


	  SELECT @ConsumerName= FirstName +' ' + SecondName + ' '+ FamilyName 
			FROM coc_Consumers(NOLOCK) CU WHERE CU.ConsumerID=@ConsumerID
	 
	 SELECT @minLangaugeID = MIN(LanguageID) ,@maxLanguageID = MAX(LanguageID) from coc_Languages(NOLOCK)

	 PRINT @ConsumerName
	 PRINT @minLangaugeID
	 PRINT @maxLanguageID
	 
	 SET @languageID = @minLangaugeID
	 WHILE (@languageID<=@maxLanguageID)
	 BEGIN
		SELECT @eligibilityMessageTitle = ResourceValue FROM coc_EBundleLanguages(NOLOCK) 
								WHERE ResourceKey = 'EligibilityMessageTitle' AND LanguageID =@languageID AND EBundleID=@EBundleID 
		
		SELECT @eligibilityMessage = ResourceValue FROM coc_EBundleLanguages (NOLOCK) 
								WHERE ResourceKey = 'EligibilityMessage' AND LanguageID =@languageID AND EBundleID=@EBundleID 

	  SET @eligibilityMessageTitleForLanguage = @eligibilityMessageTitle
	  SET @eligibilityMessageForLanguage = @eligibilityMessage

		IF @eligibilityMessageTitle IS NOT NULL AND @eligibilityMessage IS NOT NULL
		BEGIN
		  PRINT 'Message valid'
			SELECT @eligibilityMessageTitleForLanguage = REPLACE(@eligibilityMessageTitleForLanguage,'@name', @ConsumerName)
			SELECT @eligibilityMessageForLanguage = REPLACE(@eligibilityMessageForLanguage,'@name', @ConsumerName)
			SELECT @eligibilityMessageTitleForLanguage = REPLACE(@eligibilityMessageTitleForLanguage,'@distributorCorporate', @Corporate)
			SELECT @eligibilityMessageForLanguage = REPLACE(@eligibilityMessageForLanguage,'@distributorCorporate', @Corporate)
			SELECT @eligibilityMessageTitleForLanguage = REPLACE(@eligibilityMessageTitleForLanguage,'@eligibilityCount', @eligibilityCount)
		--	SELECT @eligibilityMessageForLanguage = REPLACE(@eligibilityMessage,'@voucherCount', @eligibilityCount)
			SELECT @eligibilityMessageForLanguage = REPLACE(@eligibilityMessageForLanguage,'@eligibilityCount', @eligibilityCount)

			INSERT INTO coc_NotificationSendLanguages (NotificationSendID, LanguageID, [Subject],[Message]) Values
			(@NotificationSendID,@languageID, @eligibilityMessageTitleForLanguage,@eligibilityMessageForLanguage)

		END	

		PRINT @eligibilityMessageTitle
		PRINT @eligibilityMessageTitle

		IF EXISTS(SELECT LanguageID FROM coc_Languages(NOLOCK) WHERE LanguageID>@languageID)
		BEGIN
			SELECT top 1 @languageID= LanguageID FROM coc_Languages(NOLOCK) WHERE LanguageID>@languageID order by LanguageID
		END
		ELSE
		BEGIN
			--Exit loop
			SET @languageID = @languageID + 1

		END
		
		print 'loop end'
		PRINT @languageID
	 END

	 PRINT 'INSERT INTO coc_consumernotifications'
	 print @NotificationSendID
	 PRINT @ConsumerID

	 INSERT INTO coc_consumernotifications (NotificationSendID, ConsumerID, SendDate,HasChecked)
	 VALUES (@NotificationSendID, @ConsumerID, GETDATE(),0)
	     
    END
	   
    
   END
GO
/****** Object:  StoredProcedure [dbo].[SaveNotificationMessage]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveNotificationMessage]
	@NotificationID INTEGER,
	@ServiceID INTEGER,
	@NotificationCount INTEGER,
	@NotificationSend INTEGER,
	@NotificationSendXML XML,
	@ConsumerXML XML,
	@ErrorMessage [Remark] OUTPUT 
AS 
SET NOCOUNT ON
	
	DECLARE @Counter INTEGER
	DECLARE @NotificationSendID INTEGER=0
	DECLARE @ConsumerNotificationID INTEGER=0
	DECLARE @EServiceBarcodeID INTEGER=0
	
	DECLARE @IsSave BIT=1

 	DECLARE @Notifications AS TABLE 
	(
		EServiceID INTEGER,
		NotificationCount INTEGER,
		NotificationSend INTEGER,
		NotificationRead INTEGER NULL,
		ResendCounter INTEGER NULL
	) 

	DECLARE @NotificationSends AS TABLE 
	(
		NotificationID	BIGINT,
		SendingDate	DATETIME,
		SendingType	TINYINT,
		CityID	INTEGER,
		AgeGroupID	INTEGER,
		Gender	TINYINT,
		SearchCount	INTEGER,
		ScheduleDate DATETIME,
		NotificationCount INTEGER
	) 
		
	DECLARE @NotificationSendLanguage AS TABLE 
	(
		LanguageID INTEGER,
		Subject [Remark],
		Message [Remark]
	) 

	DECLARE @ConsumerNotifications AS TABLE 
	(
		UniqueID INTEGER IDENTITY(1,1),
		ConsumerID INTEGER,
		SendDate DATETIME,
		HasChecked BIT,
		CheckedDate	DATETIME NULL,
		ActionSource TINYINT NULL
	) 

	INSERT INTO @NotificationSends
		SELECT  ISNULL(@NotificationID,0), 
			NotificationSends.value('(SendingDate[1])', 'DATETIME'),
			NotificationSends.value('(SendingType[1])', '[NullName]'),
			NotificationSends.value('(CityID[1])', 'INTEGER'),
			NotificationSends.value('(AgeGroupID[1])', 'INTEGER'),
			NotificationSends.value('(Gender[1])', 'TINYINT'),
			NotificationSends.value('(SearchCount[1])', 'INTEGER'),
			NotificationSends.value('(ScheduleDate[1])', 'DATETIME'),
			NotificationSends.value('(NotificationCount[1])', '[INTEGER]')
		FROM @NotificationSendXML.nodes('/Registrations/RegistrationData') AS ECoupons(NotificationSends);

	INSERT INTO @NotificationSendLanguage
		SELECT    
			NotificationSends.value('(LanguageID[1])', 'INTEGER') ,
			NotificationSends.value('(Subject[1])', '[Remark]') , 
			NotificationSends.value('(Message[1])', '[Remark]') 
		FROM @NotificationSendXML.nodes('/Registrations/RegistrationData/Messages/Row') AS ECoupons(NotificationSends);

	INSERT INTO @ConsumerNotifications(ConsumerID,SendDate,HasChecked)
		SELECT   
			Consumer.value('(ConsumerID[1])', 'INTEGER'),
			Consumer.value('(SendDate[1])', 'DATETIME'),
			Consumer.value('(HasChecked[1])', 'INTEGER')
		FROM @ConsumerXML.nodes('/Registrations/RegistrationData') AS ECoupons(Consumer);

	SET @ErrorMessage =''
	BEGIN TRY 
	BEGIN TRANSACTION TRN_SaveNotifications
		
		SELECT @NotificationID = NotificationID FROM coc_Notifications(NOLOCK) WHERE EServiceID=@ServiceID
		UPDATE coc_Notifications
			SET NotificationSend = ISNULL(NotificationSend,0)+@NotificationSend
		WHERE EServiceID = @ServiceID
		
		INSERT INTO coc_NotificationSends(NotificationID,SendingDate,SendingType,CityID,AgeGroupID,Gender,SearchCount,ScheduleDate,NotificationCount)
			SELECT @NotificationID,CAST (SendingDate AS datetime),SendingType ,CASE WHEN CityID=0 THEN NULL ELSE CityID END, CASE WHEN AgeGroupID=0 THEN NULL ELSE AgeGroupID END,Gender,SearchCount,ScheduleDate,NotificationCount FROM @NotificationSends
			
			SET @NotificationSendID = SCOPE_IDENTITY()
		 
		SELECT @Counter=MIN (UniqueID) FROM @ConsumerNotifications
		WHILE @Counter IS NOT NULL
		BEGIN
			INSERT INTO coc_ConsumerNotifications(NotificationSendID,ConsumerID,SendDate,HasChecked)
				SELECT @NotificationSendID,ConsumerID,SendDate,0 FROM @ConsumerNotifications WHERE UniqueID=@Counter
			SET @ConsumerNotificationID = SCOPE_IDENTITY()

			SELECT TOP 1 @EServiceBarcodeID=EServiceBarcodeID FROM coc_EServiceBarcodes(NOLOCK) WHERE NotificationID=@NotificationID AND IsUsed =0 

			UPDATE coc_EServiceBarcodes
				SET ConsumerNotificationID= @ConsumerNotificationID, 
					IsUsed =1 ,
					ConsumerID=CN.ConsumerID,
					--AsignedMoile=CO.PrimaryMobile,
					AsignedEmailID=CO.EmailID  
				FROM coc_ConsumerNotifications CN, coc_EServiceBarcodes SB, coc_Consumers CO
					WHERE CN.ConsumerNotificationID=@ConsumerNotificationID
						AND CN.ConsumerID=CO.ConsumerID  
						AND EServiceBarcodeID=@EServiceBarcodeID

			UPDATE  CS
			 SET NotificationCount = ISNULL(NotificationCount,0) + 1
			 FROM  @ConsumerNotifications CN , coc_Consumers CS 
			 WHERE CS.ConsumerID=CN.ConsumerID AND CN.UniqueID=@Counter
			  
			SELECT @Counter=MIN (UniqueID) FROM @ConsumerNotifications WHERE UniqueID>@Counter
		END

		INSERT INTO coc_NotificationSendLanguages  
			SELECT @NotificationSendID,LanguageID,[Subject],[Message] FROM @NotificationSendLanguage
			  
	COMMIT TRANSACTION TRN_SaveNotifications
	END TRY
	BEGIN CATCH									
		ROLLBACK TRANSACTION TRN_SaveNotifications
		SELECT @ErrorMessage=ERROR_MESSAGE()
	END CATCH

SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[SaveNotificationMessageData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveNotificationMessageData]
	@NotificationID INTEGER,
	@ServiceID INTEGER,	
	@NotificationSend INTEGER,
	@NotificationSendXML XML,	
	@SaveFullData BIT =1,
	@NotificationSending INTEGER =0,
	@NotificationSendID INTEGER OUTPUT,
	@ErrorMessage [Remark] OUTPUT 
AS 
SET NOCOUNT ON
	
	--When subsequent calls @SaveFullData should be zero since it need not update the tables in the given condition below.

	DECLARE @Counter INTEGER	
	DECLARE @ConsumerNotificationID INTEGER=0
	DECLARE @EServiceBarcodeID INTEGER=0
	
	DECLARE @IsSave BIT=1

 	DECLARE @Notifications AS TABLE 
	(
		EServiceID INTEGER,
		NotificationCount INTEGER,
		NotificationSend INTEGER,
		NotificationRead INTEGER NULL,
		ResendCounter INTEGER NULL
	) 

	DECLARE @NotificationSends AS TABLE 
	(
		NotificationID	BIGINT,
		SendingDate	DATETIME,
		SendingType	TINYINT,
		CityID	INTEGER,
		AgeGroupID	INTEGER,
		Gender	TINYINT,
		SearchCount	INTEGER,
		ScheduleDate DATETIME,
		NotificationCount INTEGER
	) 
		
	DECLARE @NotificationSendLanguage AS TABLE 
	(
		LanguageID INTEGER,
		Subject [Remark],
		Message [Remark]
	) 
		
	IF(@SaveFullData=1)
	BEGIN 
		INSERT INTO @NotificationSends
			SELECT  ISNULL(@NotificationID,0), 
				NotificationSends.value('(SendingDate[1])', 'DATETIME'),
				NotificationSends.value('(SendingType[1])', '[NullName]'),
				NotificationSends.value('(CityID[1])', 'INTEGER'),
				NotificationSends.value('(AgeGroupID[1])', 'INTEGER'),
				NotificationSends.value('(Gender[1])', 'TINYINT'),
				NotificationSends.value('(SearchCount[1])', 'INTEGER'),
				NotificationSends.value('(ScheduleDate[1])', 'DATETIME'),
				NotificationSends.value('(NotificationCount[1])', '[INTEGER]')
			FROM @NotificationSendXML.nodes('/Registrations/RegistrationData') AS ECoupons(NotificationSends);

		INSERT INTO @NotificationSendLanguage
			SELECT    
				NotificationSends.value('(LanguageID[1])', 'INTEGER') ,
				NotificationSends.value('(Subject[1])', '[Remark]') , 
				NotificationSends.value('(Message[1])', '[Remark]') 
			FROM @NotificationSendXML.nodes('/Registrations/RegistrationData/Messages/Row') AS ECoupons(NotificationSends);
	END

	SET @ErrorMessage =''
	BEGIN TRY 
	BEGIN TRANSACTION TRN_QueueNotifications
		
		SELECT @NotificationID = NotificationID FROM coc_Notifications(NOLOCK) WHERE EServiceID=@ServiceID
		UPDATE coc_Notifications
			SET NotificationSend = ISNULL(NotificationSend,0)+@NotificationSending
		WHERE EServiceID = @ServiceID
		
		
		IF(@SaveFullData=1)
		BEGIN 
			INSERT INTO coc_NotificationSends(NotificationID,SendingDate,SendingType,CityID,AgeGroupID,Gender,SearchCount,ScheduleDate,NotificationCount)
				SELECT @NotificationID,CAST (SendingDate AS datetime),SendingType ,CASE WHEN CityID=0 THEN NULL ELSE CityID END, CASE WHEN AgeGroupID=0 THEN NULL ELSE AgeGroupID END,Gender,SearchCount,ScheduleDate,NotificationCount FROM @NotificationSends
			
				SET @NotificationSendID = SCOPE_IDENTITY()
			INSERT INTO coc_NotificationSendLanguages  
				SELECT @NotificationSendID,LanguageID,[Subject],[Message] FROM @NotificationSendLanguage
		END
			  
	COMMIT TRANSACTION TRN_QueueNotifications
	END TRY
	BEGIN CATCH									
		ROLLBACK TRANSACTION TRN_QueueNotifications
		SELECT @ErrorMessage=ERROR_MESSAGE()
	END CATCH

SET NOCOUNT OFF 

GO
/****** Object:  StoredProcedure [dbo].[SaveNotificationSending]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[SaveNotificationSending]  
 @NotificationID INTEGER,  
 @EcouponID INTEGER,  
 @ConsumerID INTEGER,  
 @GeneralNotificationTemplateID INTEGER,  
 @EServiceID INTEGER= NULL,  
 @Barcode [NullDescription] = NULL,  
 @ErrorMessage [Remark] = NULL OUTPUT  
AS  
SET NOCOUNT ON  
BEGIN  
 BEGIN TRY  
  BEGIN TRANSACTION SaveNotificationSending  
  DECLARE @NotificationSendID INTEGER  
  DECLARE @LanguageID INTEGER  
  DECLARE @CompetitionName NVARCHAR(200)  
  DECLARE @NotificationTitle NVARCHAR(100)  
  DECLARE @NotificationTemplate NVARCHAR(1000)  
  
  IF @EServiceID IS NULL  
   SELECT @EServiceID = EServiceID FROM coc_ECoupons where ECouponID = @EcouponID  
  
   
  
  SELECT @NotificationSendID = NotificationSendID  
   FROM coc_NotificationSends(NOLOCK)  
   WHERE NotificationID = @NotificationID  
  
   IF (ISNULL(@NotificationSendID, 0) > 0)  
    AND (  
     NOT EXISTS (  
      SELECT NULL  
      FROM coc_NotificationSendLanguages(NOLOCK)  
      WHERE NotificationSendID = @NotificationSendID  
      )  
     )  
   BEGIN  
    INSERT INTO coc_ConsumerNotifications (  
     NotificationSendID  
     ,ConsumerID  
     ,SendDate  
     ,HasChecked  
     )  
    SELECT @NotificationSendID  
     ,@ConsumerID  
     ,GETDATE()  
     ,0  
  
    SELECT TOP 1 @LanguageID = L.LanguageID  
     ,@CompetitionName = ISNULL(EL.EService, '')  
     ,@NotificationTitle = GNL.TemplateTitle  
     ,@NotificationTemplate = GNL.Template  
    FROM coc_Languages(NOLOCK) L  
     INNER JOIN coc_EServiceLanguages EL ON EL.LanguageID = L.LanguageID  
     INNER JOIN coc_GeneralNotificationTemplateLanguages GNL ON GNL.LanguageID = L.LanguageID and GNL.GeneralNotificationTemplateID= @GeneralNotificationTemplateID   
    WHERE EL.EServiceID = @EServiceID  
    ORDER BY L.LanguageID  
  
    WHILE @LanguageID IS NOT NULL  
    BEGIN  
     SET @NotificationTemplate = REPLACE(@NotificationTemplate, '@CompetitionName', @CompetitionName)  
     SET @NotificationTemplate = REPLACE(@NotificationTemplate, '@Barcode', @Barcode)  
      
     INSERT INTO coc_NotificationSendLanguages (  
      NotificationSendID  
      ,LanguageID  
      ,Subject  
      ,Message  
      )  
     SELECT @NotificationSendID  
      ,@LanguageID  
      ,@NotificationTitle  
      ,@NotificationTemplate  
  
     --SELECT @LanguageID=MIN(LanguageID) FROM coc_Languages(NOLOCK) WHERE LanguageID>@LanguageID  
     SELECT @LanguageID = MIN(LanguageID)  
     FROM coc_EServiceLanguages(NOLOCK)  
     WHERE LanguageID > @LanguageID  
      AND EServiceID = @EServiceID  
  
     SELECT TOP 1 @CompetitionName = ISNULL(EL.EService, '')  
      ,@NotificationTitle = GNL.TemplateTitle  
      ,@NotificationTemplate = GNL.Template  
     FROM coc_Languages(NOLOCK) L  
      INNER JOIN coc_EServiceLanguages EL ON EL.LanguageID = L.LanguageID  
      INNER JOIN coc_GeneralNotificationTemplateLanguages GNL ON GNL.LanguageID = L.LanguageID and GNL.GeneralNotificationTemplateID= @GeneralNotificationTemplateID   
     WHERE EL.EServiceID = @EServiceID  
      and L.LanguageID = @LanguageID  
     ORDER BY L.LanguageID  
    END  
   END  
   ELSE  
   BEGIN  
    INSERT INTO coc_NotificationSends (  
     NotificationID  
     ,SendingDate  
     ,SendingType  
     ,SearchCount  
     ,NotificationCount  
     )  
    SELECT @NotificationID  
     ,GETDATE()  
     ,4  
     ,0  
     ,0  
  
    SET @NotificationSendID = SCOPE_IDENTITY()  
  
    INSERT INTO coc_ConsumerNotifications (  
     NotificationSendID  
     ,ConsumerID  
     ,SendDate  
     ,HasChecked  
     )  
    SELECT @NotificationSendID  
     ,@ConsumerID  
     ,GETDATE()  
     ,0  
  
    SELECT TOP 1 @LanguageID = L.LanguageID  
     ,@CompetitionName = ISNULL(EL.EService, '')  
     ,@NotificationTitle = GNL.TemplateTitle  
     ,@NotificationTemplate = GNL.Template  
    FROM coc_Languages(NOLOCK) L  
     INNER JOIN coc_EServiceLanguages EL ON EL.LanguageID = L.LanguageID  
     INNER JOIN coc_GeneralNotificationTemplateLanguages GNL ON GNL.LanguageID = L.LanguageID and GNL.GeneralNotificationTemplateID= @GeneralNotificationTemplateID   
    WHERE EL.EServiceID = @EServiceID  
    ORDER BY L.LanguageID  
  
    WHILE @LanguageID IS NOT NULL  
    BEGIN  
     SET @NotificationTemplate = REPLACE(@NotificationTemplate, '@CompetitionName', @CompetitionName)  
     SET @NotificationTemplate = REPLACE(@NotificationTemplate, '@Barcode', @Barcode)  
     SELECT @NotificationSendID  
      ,@LanguageID  
      ,@NotificationTitle  
      ,@NotificationTemplate  
  
     INSERT INTO coc_NotificationSendLanguages (  
      NotificationSendID  
      ,LanguageID  
      ,Subject  
      ,Message  
      )  
     SELECT @NotificationSendID  
      ,@LanguageID  
      ,@NotificationTitle  
      ,@NotificationTemplate  
  
     --SELECT @LanguageID=MIN(LanguageID) FROM coc_Languages(NOLOCK) WHERE LanguageID>@LanguageID  
     SELECT @LanguageID = MIN(LanguageID)  
     FROM coc_EServiceLanguages(NOLOCK)  
     WHERE LanguageID > @LanguageID  
      AND EServiceID = @EServiceID  
  
     SELECT TOP 1   
      @CompetitionName = ISNULL(EL.EService, '')  
      ,@NotificationTitle = GNL.TemplateTitle  
      ,@NotificationTemplate = GNL.Template  
     FROM coc_Languages(NOLOCK) L  
      INNER JOIN coc_EServiceLanguages EL ON EL.LanguageID = L.LanguageID  
      INNER JOIN coc_GeneralNotificationTemplateLanguages GNL ON GNL.LanguageID = L.LanguageID and GNL.GeneralNotificationTemplateID= @GeneralNotificationTemplateID   
     WHERE EL.EServiceID = @EServiceID  
      and L.LanguageID = @LanguageID  
     ORDER BY L.LanguageID  
    END  
   END  
   COMMIT TRANSACTION SaveNotificationSending  
 END TRY  
  
 BEGIN CATCH  
  ROLLBACK TRANSACTION SaveNotificationSending  
  
  SELECT @ErrorMessage = ERROR_MESSAGE()  +' From : SaveNotificationSending SP'
  
  RAISERROR (  
    @ErrorMessage  
    ,16  
    ,1  
    );  
 END CATCH  
END
GO
/****** Object:  StoredProcedure [dbo].[SavePackagePricing]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SavePackagePricing]
	@PackagePricingID INTEGER, 
	@ServiceTypeID INTEGER=NULL,
	@ServiceSubTypeID INTEGER=NULL,
	@PackagePricingTypeID INTEGER=NULL,
	@CompetitionID INTEGER=NULL,
	@PackFrom INTEGER=NULL,
	@PackTo INTEGER=NULL,
	@MessageRate [Amount],
	@MessagePercentage [Percentage],
	@UserID INTEGER,
	@Status INTEGER,
	--@IsActive BIT,
	@ReturnValue [Remark] OUTPUT
AS
SET NOCOUNT ON
	BEGIN TRY  
	BEGIN TRANSACTION Trn_SaveLanguage 
		DECLARE @AdminUser INTEGER
		DECLARE @IsChanged INTEGER
		DECLARE @ErrorMessage Remark

		IF @CompetitionID=0
			SET @CompetitionID=NULL 
		IF @ServiceSubTypeID=0
			SET @ServiceSubTypeID=NULL 
		IF @PackagePricingTypeID=0
			SET @PackagePricingTypeID=NULL 
		SET @ReturnValue=''
		
	 
		IF (@Status=0)
		BEGIN
			--IF EXISTS (SELECT 1 FROM coc_PackagePricings(NOLOCK) WHERE ServiceTypeID=@ServiceTypeID AND MessagePackTypeID=@PackagePricingTypeID AND (ServiceSubTypeID=@ServiceSubTypeID  OR ServiceSubTypeID IS NULL) AND (CompetitionID=@CompetitionID OR CompetitionID IS NULL))
			--BEGIN
			--	SELECT @ReturnValue=ResourceValue FROM coc_Resources(NOLOCK) WHERE ScreenID=1000 AND ResourceKey='PackagePricingExists'
			--	--SET @ReturnValue=@ReturnValue
			--	RAISERROR(@ReturnValue, 18, 1)
			--END
			IF(ISNULL(@PackagePricingID,0)=0)
			BEGIN
				IF NOT EXISTS (SELECT 1 FROM coc_PackagePricings WHERE ServiceTypeID=@ServiceTypeID AND MessagePackTypeID=@PackagePricingTypeID AND (ServiceSubTypeID=@ServiceSubTypeID  OR ServiceSubTypeID IS NULL) AND (CompetitionID=@CompetitionID OR CompetitionID IS NULL))
				BEGIN
					INSERT INTO coc_PackagePricings(ServiceTypeID,ServiceSubTypeID,MessagePackTypeID,CompetitionID,PackFrom,PackTo,MessageRate,MessagePercentage,AddUserID,AddDate,EditMessageRate,EditMessagePercentage,EditPackFrom,EditPackTo)
						SELECT  @ServiceTypeID,@ServiceSubTypeID,@PackagePricingTypeID,@CompetitionID,@PackFrom,@PackTo,@MessageRate,@MessagePercentage,@UserID,GETDATE(),@MessageRate,@MessagePercentage,@PackFrom,@PackTo
					SET @ReturnValue=''
				END
				ELSE BEGIN
					SELECT @ReturnValue=ResourceValue FROM coc_Resources(NOLOCK) WHERE ScreenID=1000 AND ResourceKey='PackagePricingExists'
					RAISERROR(@ReturnValue, 18, 1)
				END
			END
			ELSE BEGIN
				UPDATE coc_PackagePricings 
				SET EditMessagePercentage=@MessagePercentage,
					EditMessageRate=@MessageRate,
					EditPackFrom=@PackFrom,
					EditPackTo=@PackTo,
					IsApproved=0,
					IsActive=1,
					EditDate=GETDATE(),
					EditUserID=@UserID
				WHERE PackagePricingID=@PackagePricingID
			END 
		 END
		 ELSE BEGIN
				UPDATE coc_PackagePricings
					SET MessagePercentage=CASE WHEN ISNULL(@Status,0)=1 THEN EditMessagePercentage ELSE MessagePercentage END,
					MessageRate=CASE WHEN ISNULL(@Status,0)=1 THEN EditMessageRate ELSE MessageRate END,
					PackFrom=CASE WHEN ISNULL(@Status,0)=1 THEN EditPackFrom ELSE PackFrom END,
					PackTo=CASE WHEN ISNULL(@Status,0)=1 THEN EditPackTo ELSE PackTo END,
					EditMessagePercentage=0,
					EditMessageRate=0,
					EditPackFrom=0,
					EditPackTo=0,
					IsApproved= CASE WHEN ISNULL(@Status,0)=1 THEN 1 ELSE 0 END,
					IsActive= CASE WHEN ISNULL(@Status,0)=1 THEN 1 ELSE CASE WHEN EditUserID IS NULL THEN 0 ELSE 1 END END,
					CheckerDate=GETDATE(),
					CheckerUserID=@UserID
				WHERE PackagePricingID=@PackagePricingID
			END
		COMMIT TRANSACTION Trn_SaveLanguage 
	END TRY    
	BEGIN CATCH 
		ROLLBACK TRANSACTION Trn_SaveLanguage 
		SELECT @ReturnValue=ERROR_MESSAGE() 
	END CATCH 
SET NOCOUNT OFF








GO
/****** Object:  StoredProcedure [dbo].[SaveParticipatingCities]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveParticipatingCities]
	@InvitationCode [NullCode],
	@ConsumerID INTEGER,
	@CitiesXML XML,
	@ErrorMessage [Remark] OUTPUT 
AS 
SET NOCOUNT ON
	DECLARE @ConsumerInterestedCities AS TABLE 
	(
		ConsumerID INTEGER,
		CityID INTEGER
	)
	SET @ErrorMessage = ''
	BEGIN TRY

		INSERT INTO @ConsumerInterestedCities(ConsumerID,CityID)
			SELECT  ISNULL(@ConsumerID,0), 
				Consumers.value('(CityID[1])', 'INTEGER')  
			FROM @CitiesXML.nodes('/XML/ParticipatingData') AS ECoupons(Consumers);
		
		INSERT INTO COC_ConsumerInterestedCities(ConsumerID,CityID)
			SELECT ConsumerID,CityID FROM @ConsumerInterestedCities

		IF(@ErrorMessage = '')
		BEGIN
			SET @ErrorMessage = @ConsumerID
		END
	END TRY
	BEGIN CATCH									
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);			
	END CATCH
SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[SavePointRedmption]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[SavePointRedmption]
	@RedemptionPlanID INTEGER,
	@DynamicQuery XML=NULL,
	@RedeemTypeID INT,
	@LoyaltyPoint INTEGER,
	@LoyaltyAmount [NullAmount]=NULL,
	@LoyaltyItem [NullName], 
	@Remarks [Remark],
	@IsActive BIT=NULL,
	@LanguageID INTEGER,
	@UserID INTEGER,
	@Status INTEGER,
	@RetailXml XML=NULL,
	@ReturnValue [Remark] OUTPUT
AS
SET NOCOUNT ON
	BEGIN 
	DECLARE @PointRedmption TABLE
	(  
		RedemptionPlanID INTEGER NULL,  
		CorporateID INTEGER,
		RetailOutletID INTEGER 
	) 
	 DECLARE @RedemptionPlanLanguage TABLE
	 ( 
		LanguageID INTEGER, 
		Value [Remark]
	 )
	 INSERT INTO @RedemptionPlanLanguage (LanguageID,Value)
		SELECT	XmlTable.value('@LanguageID','INTEGER'),
				XmlTable.value('@Value','[Remark]')
				FROM @DynamicQuery.nodes('/Xml/Row') AS Data(XmlTable)

		IF(ISNULL(@RedemptionPlanID,0)=0)
		BEGIN
			INSERT INTO coc_RedemptionPlans(RedeemTypeID,LoyaltyPoint,LoyaltyAmount,LoyaltyItem,Remarks,IsActive,AddDate,AddUserID,EditLoyaltyAmount,EditLoyaltyItem,EditLoyaltyPoint,EditUserID)
				SELECT @RedeemTypeID,@LoyaltyPoint,@LoyaltyAmount,@LoyaltyItem,@Remarks,1,GETDATE(),@UserID,@LoyaltyAmount,@LoyaltyItem,@LoyaltyPoint,NULL

				SET @RedemptionPlanID=SCOPE_IDENTITY()
				SET @ReturnValue=''
		END	
		ELSE BEGIN
			IF (ISNULL(@Status,0)=0)
			BEGIN
				UPDATE coc_RedemptionPlans
					SET RedeemTypeID=@RedeemTypeID,
						EditLoyaltyPoint=@LoyaltyPoint,
						EditLoyaltyAmount=@LoyaltyAmount,
						EditLoyaltyItem=@LoyaltyItem, 
						Remarks=@Remarks,
						IsActive=1,
						IsApproved=0,
						EditDate=GETDATE(),
						EditUserID=@UserID
					WHERE RedemptionPlanID=@RedemptionPlanID
			END 
			ELSE BEGIN
				UPDATE coc_RedemptionPlans
					SET LoyaltyPoint=CASE WHEN ISNULL(@Status,0)=1 THEN EditLoyaltyPoint ELSE LoyaltyPoint END,
						LoyaltyAmount=CASE WHEN ISNULL(@Status,0)=1 THEN EditLoyaltyAmount ELSE LoyaltyAmount END,
						LoyaltyItem=CASE WHEN ISNULL(@Status,0)=1 THEN EditLoyaltyItem ELSE LoyaltyItem END,
						EditLoyaltyPoint=0,
						EditLoyaltyAmount=0,
						EditLoyaltyItem=NULL,
						IsApproved= CASE WHEN ISNULL(@Status,0)=1 THEN 1 ELSE 0 END,
						IsActive= CASE WHEN ISNULL(@Status,0)=1 THEN 1 ELSE CASE WHEN EditUserID IS NULL THEN 0 ELSE 1 END END,
						CheckerDate=GETDATE(),
						CheckerUserID=@UserID
				WHERE RedemptionPlanID=@RedemptionPlanID
			END
		END

		DELETE FROM  coc_RedemptionLocations where RedemptionPlanID=@RedemptionPlanID
		DELETE FROM  coc_RedemptionPlanLanguages where RedemptionPlanID=@RedemptionPlanID

		INSERT INTO coc_RedemptionPlanLanguages (RedemptionPlanID,RedemptionPlan,LanguageID)							
			SELECT @RedemptionPlanID,RL.Value,RL.LanguageID FROM @RedemptionPlanLanguage RL

		INSERT INTO coc_RedemptionLocations(RedemptionPlanID,CorporateID,RetailOutletID)
			SELECT @RedemptionPlanID,
				XmlTable.value('@CorporateID[1]','INTEGER'),
				XmlTable.value('@RetailOutletID[1]','INTEGER') 
			FROM @RetailXml.nodes('/XML/Row') AS Data(XmlTable)
	END
SET NOCOUNT OFF




GO
/****** Object:  StoredProcedure [dbo].[SaveProcessGeneralNotificationMessage]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveProcessGeneralNotificationMessage]
	@NotificationID INTEGER,	
	@ConsumerXML XML,
	@NotificationSendID INTEGER,
	@ErrorMessage [Remark] OUTPUT 
AS 
SET NOCOUNT ON
	
	DECLARE @Counter INTEGER
	--DECLARE @NotificationSendID INTEGER=0
	DECLARE @ConsumerNotificationID INTEGER=0
	DECLARE @EServiceBarcodeID INTEGER=0
	
	DECLARE @IsSave BIT=1
	

DECLARE @ConsumerNotifications AS TABLE 
	(
		UniqueID INTEGER IDENTITY(1,1),
		ConsumerID INTEGER,
		SendDate DATETIME,
		HasChecked BIT,
		CheckedDate	DATETIME NULL,
		ActionSource TINYINT NULL
	) 

	SET @ErrorMessage =''
	BEGIN TRY 
	BEGIN TRANSACTION TRN_ProcessNotifications

INSERT INTO @ConsumerNotifications(ConsumerID,SendDate,HasChecked)
		SELECT   
			Consumer.value('(ConsumerID[1])', 'INTEGER'),
			Consumer.value('(SendDate[1])', 'DATETIME'),
			Consumer.value('(HasChecked[1])', 'INTEGER')
		FROM @ConsumerXML.nodes('/Registrations/RegistrationData') AS ECoupons(Consumer);

SELECT @Counter=MIN (UniqueID) FROM @ConsumerNotifications
		WHILE @Counter IS NOT NULL
		BEGIN
			INSERT INTO coc_ConsumerNotifications(NotificationSendID,ConsumerID,SendDate,HasChecked)
				SELECT @NotificationSendID,ConsumerID,SendDate,0 FROM @ConsumerNotifications WHERE UniqueID=@Counter
			SET @ConsumerNotificationID = SCOPE_IDENTITY()

			SELECT TOP 1 @EServiceBarcodeID=EServiceBarcodeID FROM coc_EServiceBarcodes(NOLOCK) WHERE NotificationID=@NotificationID AND IsUsed =0 

			UPDATE coc_EServiceBarcodes
				SET ConsumerNotificationID= @ConsumerNotificationID, 
					IsUsed =1 ,
					ConsumerID=CN.ConsumerID,
					--AsignedMoile=CO.PrimaryMobile,
					AsignedEmailID=CO.EmailID  
				FROM coc_ConsumerNotifications CN, coc_EServiceBarcodes SB, coc_Consumers CO
					WHERE CN.ConsumerNotificationID=@ConsumerNotificationID
						AND CN.ConsumerID=CO.ConsumerID  
						AND EServiceBarcodeID=@EServiceBarcodeID

			UPDATE  CS
			 SET NotificationCount = ISNULL(NotificationCount,0) + 1
			 FROM  @ConsumerNotifications CN , coc_Consumers CS 
			 WHERE CS.ConsumerID=CN.ConsumerID AND CN.UniqueID=@Counter
			  
			SELECT @Counter=MIN (UniqueID) FROM @ConsumerNotifications WHERE UniqueID>@Counter
		END

		COMMIT TRANSACTION TRN_ProcessNotifications
	END TRY
	BEGIN CATCH									
		ROLLBACK TRANSACTION TRN_ProcessNotifications
		SELECT @ErrorMessage=ERROR_MESSAGE()
	END CATCH

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveProcessNotificationMessage]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveProcessNotificationMessage]
	@NotificationID INTEGER,	
	@ConsumerXML XML,
	@NotificationSendID INTEGER,
	@ErrorMessage [Remark] OUTPUT 
AS 
SET NOCOUNT ON
	
	DECLARE @Counter INTEGER
	--DECLARE @NotificationSendID INTEGER=0
	DECLARE @ConsumerNotificationID INTEGER=0
	DECLARE @EServiceBarcodeID INTEGER=0
	
	DECLARE @IsSave BIT=1
	

DECLARE @ConsumerNotifications AS TABLE 
	(
		UniqueID INTEGER IDENTITY(1,1),
		ConsumerID INTEGER,
		SendDate DATETIME,
		HasChecked BIT,
		CheckedDate	DATETIME NULL,
		ActionSource TINYINT NULL
	) 

	SET @ErrorMessage =''
	BEGIN TRY 
	BEGIN TRANSACTION TRN_ProcessNotifications

INSERT INTO @ConsumerNotifications(ConsumerID,SendDate,HasChecked)
		SELECT   
			Consumer.value('(ConsumerID[1])', 'INTEGER'),
			Consumer.value('(SendDate[1])', 'DATETIME'),
			Consumer.value('(HasChecked[1])', 'INTEGER')
		FROM @ConsumerXML.nodes('/Registrations/RegistrationData') AS ECoupons(Consumer);

SELECT @Counter=MIN (UniqueID) FROM @ConsumerNotifications
		WHILE @Counter IS NOT NULL
		BEGIN
			INSERT INTO coc_ConsumerNotifications(NotificationSendID,ConsumerID,SendDate,HasChecked)
				SELECT @NotificationSendID,ConsumerID,SendDate,0 FROM @ConsumerNotifications WHERE UniqueID=@Counter
			SET @ConsumerNotificationID = SCOPE_IDENTITY()

			SELECT TOP 1 @EServiceBarcodeID=EServiceBarcodeID FROM coc_EServiceBarcodes(NOLOCK) WHERE NotificationID=@NotificationID AND IsUsed =0 

			UPDATE coc_EServiceBarcodes
				SET ConsumerNotificationID= @ConsumerNotificationID, 
					IsUsed =1 ,
					ConsumerID=CN.ConsumerID,
					--AsignedMoile=CO.PrimaryMobile,
					AsignedEmailID=CO.EmailID  
				FROM coc_ConsumerNotifications CN, coc_EServiceBarcodes SB, coc_Consumers CO
					WHERE CN.ConsumerNotificationID=@ConsumerNotificationID
						AND CN.ConsumerID=CO.ConsumerID  
						AND EServiceBarcodeID=@EServiceBarcodeID

			UPDATE  CS
			 SET NotificationCount = ISNULL(NotificationCount,0) + 1
			 FROM  @ConsumerNotifications CN , coc_Consumers CS 
			 WHERE CS.ConsumerID=CN.ConsumerID AND CN.UniqueID=@Counter
			  
			SELECT @Counter=MIN (UniqueID) FROM @ConsumerNotifications WHERE UniqueID>@Counter
		END

		COMMIT TRANSACTION TRN_ProcessNotifications
	END TRY
	BEGIN CATCH									
		ROLLBACK TRANSACTION TRN_ProcessNotifications
		SELECT @ErrorMessage=ERROR_MESSAGE()
	END CATCH

SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[SavePurchaseBarcode]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[SavePurchaseBarcode]   
 @CorporateID int,  
 @Quantity int,  
 @PaymentType int,  
 @Vat decimal(18,2),  
 @InvoiceNumber nvarchar(20),  
 @CreatedBy int  
 AS  
 SET NOCOUNT ON  
 BEGIN    
  BEGIN TRY  
  
      declare @Rate dbo.Amount=0  
   declare @Total dbo.Amount=0  
   declare @VatAmount dbo.Amount=0  
   declare @TotalWithVat dbo.Amount=0  
   declare @EserviceId int  
   declare @PriceId int  
   declare @BarcodePurchaseId int  
   if exists (select MessageRate from coc_BarcodePackagePricings (NOLOCK) where PackFrom<=@Quantity and PackTo>=@Quantity and IsActive=1)  
    begin  
      select @Rate=MessageRate,@PriceId=BarcodePackagePricingsID from coc_BarcodePackagePricings(NOLOCK) where PackFrom<=@Quantity and PackTo>=@Quantity and IsActive=1  
    end  
    else if exists (select MessageRate from coc_BarcodePackagePricings(NOLOCK) where PackFrom>@Quantity and IsActive=1)  
    begin  
      select top 1 @Rate=MessageRate,@PriceId=BarcodePackagePricingsID from coc_BarcodePackagePricings(NOLOCK) where PackFrom>@Quantity and IsActive=1  
    end  
    else if exists (select MessageRate from coc_BarcodePackagePricings(NOLOCK) where PackTo<@Quantity and IsActive=1)  
    begin  
       select top 1 @Rate=MessageRate,@PriceId=BarcodePackagePricingsID from coc_BarcodePackagePricings(NOLOCK) where PackTo<@Quantity and IsActive=1 order by BarcodePackagePricingsID desc  
                end  
  
    set @Total=@Quantity*@Rate  
    set @VatAmount=(@Total/100)*@Vat  
    set @TotalWithVat=@Total+@VatAmount  
  
    insert into coc_EServiceInvoices(InvoiceNumber,EServiceID,InvoiceDate,IsExtension,NotificationCount,PackageAmount,PaymentTypeID,IsBarcodeGenerated,VatAmount,TotalAmount)   
    values(NULL,NULL,getdate(),0,@Quantity,@Total,@PaymentType,0,@VatAmount,@TotalWithVat)  
    set @EserviceId=SCOPE_IDENTITY()  
   insert into coc_BarcodePurchases(BarcodePackagePricingsID,CorporateID,EServiceInvoiceID,IsPaymentDone,AddUserID,AddDate,NumberOfBarcodes,Rate)   
   values(@PriceId,@CorporateID,@EserviceId,0,@CreatedBy,getdate(),@Quantity,@Rate)  
   set @BarcodePurchaseId=SCOPE_IDENTITY()  
  
   select c.FirstName as Name,bp.AddDate,bp.EServiceInvoiceID,bp.NumberOfBarcodes,@Rate as Rate,@Total as Total,@TotalWithVat as TotalWithVat   
   from coc_BarcodePurchases bp  (NOLOCK)
   left join coc_Corporates c(NOLOCK) on c.CorporateID=bp.CorporateID  
    where bp.BarcodePurchasesId=@BarcodePurchaseId  
     
     
  
  END TRY  
  BEGIN CATCH  
  SELECT Error_line()  
  SELECT Error_message()  
  END CATCH  
 SET NOCOUNT OFF   
 END   
   
  
  
  
  
  
   
  
  
GO
/****** Object:  StoredProcedure [dbo].[SavePurchaseForAddOn]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- SAVE PURCHASE FOR ADDON
CREATE PROCEDURE [dbo].[SavePurchaseForAddOn]
	@ConsumerID INTEGER,
	@EServiceAddOnId INTEGER,
	@ConsumerEServiceAddOnID INTEGER,
	@ErrorMessage NVARCHAR(200) OUTPUT
	
AS
	BEGIN
		
		SET @ErrorMessage='0'

--//----------------------------------------------------------------
		
		DECLARE @errortext [Remark]
		DECLARE	@return_value int
		EXEC	@return_value = [dbo].[VerifyAddonServiceParticipationCount]
		@EServiceAddOnId = @EServiceAddOnId,
		@errortext = @errortext OUTPUT

		print @errortext

		IF( @errortext != '0' )
		BEGIN
			SET @ErrorMessage = @errortext
			SELECT @ErrorMessage
			Return
		END
		
-------------------------------------------------------------------//

		DECLARE @NotificationID INTEGER
		DECLARE @Points INTEGER
		DECLARE @NotificationSendID INTEGER
		DECLARE @EServiceBarcodeID INTEGER
		DECLARE @LanguageID INTEGER
		DECLARE @CompetitionName nvarchar(200)
		DECLARE @EcouponID INTEGER
		DECLARE @Email [Email]=NULL
		DECLARE @Mobile [Mobile]=NULL
		DECLARE @EligibleCoupons INTEGER=NULL
		DECLARE @Barcode [NullDescription] =NULL
		DECLARE @EServiceID INTEGER
		DECLARE @BarCodes TABLE
		( 
			EServiceBarcodeID INTEGER,
			AsignedMoile [Mobile],
			Barcode [NullDescription],
			NotificationID INTEGER,
			IsUsed BIT
		)

			IF(ISNULL(@EligibleCoupons,0)=0)
			SET @EligibleCoupons=1
		
			SELECT @EServiceID = AddOnServiceID FROM coc_eServiceAddOn (NOLOCK) WHERE EServiceAddOnId = @EServiceAddOnId

			print '@EServiceID'
			print @EServiceID

			INSERT INTO @BarCodes(EServiceBarcodeID,AsignedMoile,Barcode,NotificationID,IsUsed)
				SELECT TOP (@EligibleCoupons) BC.EServiceBarcodeID,@Mobile,BC.Barcode,BC.NotificationID,1 
					FROM coc_EServiceBarcodes(NOLOCK)BC 
						INNER JOIN coc_Notifications NT(NOLOCK) ON BC.NotificationID=NT.NotificationID AND NT.EServiceID =@EServiceID
					WHERE BC.IsUsed=0

--select * from @BarCodes

			SELECT @EcouponID = EcouponID FROM coc_ECoupons(NOLOCK) WHERE EServiceID = @EServiceID
			print '@EcouponID'
			print @EcouponID
			SELECT @NotificationID=NotificationID,@Barcode=Barcode FROM @BarCodes

			DECLARE @ServiceBarcodeID INTEGER		
			SET @ServiceBarcodeID = NULL
			SELECT TOP 1 @ServiceBarcodeID = EServiceBarcodeID FROM coc_EServiceBarcodes(NOLOCK) WHERE NotificationID=@NotificationID AND ConsumerID IS NULL AND IsUsed =0 AND EServiceAddOnId IS NULL
			print '@ServiceBarcodeID'
			print @ServiceBarcodeID
			IF(@ServiceBarcodeID IS NULL)
				BEGIN
					SET @ErrorMessage='Barcode Not Available'
					RETURN 
				END
			print 'update eservice barcode'
			UPDATE EB
				SET EB.AsignedMoile=BC.AsignedMoile,
					EB.IsUsed=BC.IsUsed,
					EB.UsedDate=GETDATE(),
					EB.ConsumerID=@ConsumerID,
					EB.EServiceAddOnId = @EServiceAddOnId
				FROM coc_EServiceBarcodes EB
				INNER JOIN @BarCodes BC ON BC.EServiceBarcodeID=EB.EServiceBarcodeID

			IF(@ConsumerID IS NOT NULL)
			BEGIN
--				UPDATE coc_Consumers SET LoyaltyPoint=LoyaltyPoint+@Points WHERE ConsumerID = @ConsumerID

				SELECT @NotificationSendID=NotificationSendID FROM coc_NotificationSends(NOLOCK) WHERE NotificationID=@NotificationID 

				SELECT @EServiceBarcodeID=MIN(EServiceBarcodeID) FROM @BarCodes
				WHILE (@EServiceBarcodeID IS NOT NULL)
				BEGIN
				print 'in while'
					SELECT @Barcode=Barcode FROM @BarCodes WHERE EServiceBarcodeID=@EServiceBarcodeID
					
					IF (ISNULL(@NotificationSendID,0) > 0) AND (NOT EXISTS (SELECT NULL FROM coc_NotificationSendLanguages(NOLOCK) WHERE NotificationSendID = @NotificationSendID)) 
					BEGIN
						INSERT INTO coc_ConsumerNotifications(NotificationSendID,ConsumerID,SendDate,HasChecked)
							SELECT @NotificationSendID,@ConsumerID,GETDATE(),0 
				  
						SELECT top 1 @LanguageID = L.LanguageID, @CompetitionName= EL.EService FROM coc_Languages(NOLOCK) L INNER JOIN coc_EServiceLanguages  EL(NOLOCK) ON EL.LanguageID= L.LanguageID
							WHERE EL.EServiceID= @EServiceID order by L.LanguageID

						WHILE @LanguageID IS NOT NULL
						BEGIN
						print 'insert in to coc_NotificationSendLanguages'
							INSERT INTO coc_NotificationSendLanguages(NotificationSendID,LanguageID,Subject,Message)
								SELECT @NotificationSendID,@LanguageID,'Congratulations',N'Your Barcode for '+@CompetitionName +N' is :~'+@Barcode
							--SELECT @LanguageID=MIN(LanguageID) FROM coc_Languages(NOLOCK) WHERE LanguageID>@LanguageID
							SELECT @LanguageID=MIN(LanguageID) FROM coc_EServiceLanguages(NOLOCK) WHERE LanguageID>@LanguageID and EServiceID= @EServiceID 
							SELECT top 1 @CompetitionName= ISNULL(EL.EService,'') FROM coc_EServiceLanguages  EL (NOLOCK)
								WHERE EL.LanguageID = @LanguageID and EL.EServiceID= @EServiceID order by EL.LanguageID
						END
					END
					ELSE 
					BEGIN
					print 'INSERT INTO coc_NotificationSends'
						INSERT INTO coc_NotificationSends(NotificationID,SendingDate,SendingType,SearchCount,NotificationCount)
								SELECT @NotificationID,GETDATE(),4,0,0
							SET @NotificationSendID = SCOPE_IDENTITY()
							print 'INSERT INTO coc_ConsumerNotifications'
						INSERT INTO coc_ConsumerNotifications(NotificationSendID,ConsumerID,SendDate,HasChecked)
							SELECT @NotificationSendID,@ConsumerID,GETDATE(),0 
						
						SELECT top 1 @LanguageID = L.LanguageID, @CompetitionName= EL.EService FROM coc_Languages(NOLOCK) L INNER JOIN coc_EServiceLanguages  EL(NOLOCK) ON EL.LanguageID= L.LanguageID
							WHERE EL.EServiceID= @EServiceID order by L.LanguageID

						WHILE @LanguageID IS NOT NULL
						BEGIN
						print 'INSERT INTO coc_NotificationSendLanguages'
							INSERT INTO coc_NotificationSendLanguages(NotificationSendID,LanguageID,Subject,Message)
								SELECT @NotificationSendID,@LanguageID,'Congratulations !',N'Your Barcode for '+@CompetitionName +N' is :~'+@Barcode
							--SELECT @LanguageID=MIN(LanguageID) FROM coc_Languages(NOLOCK) WHERE LanguageID>@LanguageID
							SELECT @LanguageID=MIN(LanguageID) FROM coc_EServiceLanguages(NOLOCK) WHERE LanguageID>@LanguageID and EServiceID= @EServiceID 
							SELECT top 1 @CompetitionName= ISNULL(EL.EService,'') FROM coc_EServiceLanguages  EL (NOLOCK)
								WHERE EL.LanguageID = @LanguageID and EL.EServiceID= @EServiceID order by EL.LanguageID
						END
					END
					SELECT @EServiceBarcodeID=MIN(EServiceBarcodeID) FROM @BarCodes WHERE EServiceBarcodeID>@EServiceBarcodeID
				END
			END
			INSERT INTO coc_ECouponParticipations(ECouponID,ParticipationDate,Barcode,ParticipationMobile,ParticipationEmailID,ConsumerID)
				SELECT @EcouponID,GETDATE(),@Barcode,@Mobile,@Email,@ConsumerID
	END
GO
/****** Object:  StoredProcedure [dbo].[SavePurchaseNotification]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SavePurchaseNotification]
	@EServiceBarcodeID INTEGER=NULL,
	@ConsumerID INTEGER,
	@Barcode [Remark]=NULL,
	@ReturnValue [Remark]=NULL OUTPUT
AS
	SET NOCOUNT ON 
	BEGIN TRY
		DECLARE @Amount [Amount]
		DECLARE @NotificationID INTEGER
		DECLARE @NotificationSendID INTEGER
		DECLARE @ConsumerNotificationID BIGINT
		 
		SELECT @ConsumerNotificationID=ConsumerNotificationID FROM coc_EServiceBarcodes(NOLOCK) WHERE EServiceBarcodeID=@EServiceBarcodeID
		SELECT @NotificationSendID=NotificationSendID FROM coc_ConsumerNotifications(NOLOCK) WHERE ConsumerNotificationID=@ConsumerNotificationID
			 
		--SET @ReturnValue ='Your Ticket ID is:' + @Barcode
		--INSERT INTO coc_NotificationSendLanguages(NotificationSendID,LanguageID,Subject,Message)
			--SELECT @NotificationSendID,1,'Ticket Confirmation', 'your ticket id is '+@Barcode

		SELECT @ReturnValue=''  
	END TRY
	BEGIN CATCH
		SELECT @ReturnValue=ERROR_MESSAGE()
		RAISERROR(@ReturnValue, 16, 1);	
	END CATCH
	SET NOCOUNT OFF
	  







GO
/****** Object:  StoredProcedure [dbo].[SavePurchaseService]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SavePurchaseService]
	@EServiceID INTEGER=NULL,
	@Mobile [Mobile]=NULL,
	@ConsumerID INTEGER,
	@EventID INTEGER=NULL,
	@IsPrinted BIT=0,
	@CustomerName [Name]=NULL,
	@PaymentTypeID INTEGER=NULL,
	@EServiceBarcodeID INTEGER=NULL,
	@Barcode [Remark]=NULL OUTPUT,
	@ReturnValue [Remark]=NULL OUTPUT
AS
	SET NOCOUNT ON 
	BEGIN TRY
		DECLARE @Amount [Amount]
		DECLARE @NotificationID INTEGER
		DECLARE @NotificationSendID INTEGER
		DECLARE @ConsumerNotificationID INTEGER
		DECLARE @EmailID [Email] 
		SET @ReturnValue ='-1'
		
		IF(@EServiceBarcodeID IS NULL)
		BEGIN
			SELECT @Amount=EventCost FROM coc_EServiceEvents (NOLOCK) WHERE EServiceEventID=@EventID

			SELECT @NotificationID=NotificationID 
				FROM coc_Notifications(NOLOCK) WHERE EServiceID=@EServiceID

			SELECT TOP 1 @Barcode=Barcode,@EServiceBarcodeID=EServiceBarcodeID 
					FROM coc_EServiceBarcodes (NOLOCK)
				WHERE NotificationID=@NotificationID AND IsUsed=0 
			ORDER BY EServiceBarcodeID

			INSERT INTO coc_Tickets(TicketDate,EServiceEventID,EServiceBarcodeID,MobileNumber,GuestName,ConsumerID,Amount,PaymentTypeID,CustomerName,CustomerMobile)
				SELECT GETDATE(),@EventID,@EServiceBarcodeID,@Mobile,NULL,@ConsumerID,@Amount,@PaymentTypeID,@CustomerName,@Mobile

			BEGIN 
				INSERT INTO coc_NotificationSends(NotificationID,SendingDate,SendingType,SearchCount,NotificationCount)
					SELECT @NotificationID,GETDATE(),4,1,1
				SET @NotificationSendID = SCOPE_IDENTITY()
				INSERT INTO coc_ConsumerNotifications(NotificationSendID,ConsumerID,SendDate,HasChecked)
					SELECT @NotificationSendID,@ConsumerID,GETDATE(),0 
				SET @ConsumerNotificationID = SCOPE_IDENTITY()
				INSERT INTO coc_NotificationSendLanguages(NotificationSendID,LanguageID,Subject,Message)
					SELECT @NotificationSendID,1,'Congratulations','your Barcode is :~'+@Barcode
			END
			SELECT @EmailID=EmailID,@Mobile=PrimaryMobile FROM coc_Consumers(NOLOCK) WHERE ConsumerID =@ConsumerID
			 UPDATE coc_EServiceBarcodes
						SET IsUsed=1,ConsumerNotificationID=@ConsumerNotificationID,ConsumerID=@ConsumerID,AsignedEmailID=@EmailID,AsignedMoile=@Mobile
					WHERE  EServiceBarcodeID=@EServiceBarcodeID
			SET @ReturnValue=CONVERT(NVARCHAR,@EServiceBarcodeID)

		END	 
		ELSE BEGIN
			UPDATE coc_Tickets
				SET Isprinted=@IsPrinted Where EServiceBarcodeID=@EServiceBarcodeID
		
			SELECT @EmailID=EmailID,@Mobile=PrimaryMobile FROM coc_Consumers(NOLOCK) WHERE ConsumerID =@ConsumerID
			UPDATE coc_EServiceBarcodes
				SET AsignedMoile=@Mobile,ConsumerID=@ConsumerID,AsignedEmailID=@EmailID,UsedDate=GETDATE()
			WHERE  EServiceBarcodeID=@EServiceBarcodeID

			SET @ReturnValue=CONVERT(NVARCHAR,@EServiceBarcodeID)
			SELECT @ReturnValue='1'

			
		END
		
		UPDATE coc_EServices
			SET IsPaymentDone=1
		WHERE EServiceID=@EServiceID

	END TRY
	BEGIN CATCH
		SELECT @ReturnValue=ERROR_MESSAGE()
		RAISERROR(@ReturnValue, 16, 1);	
	END CATCH
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[SaveResultDeclaration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveResultDeclaration]
	@EServiceID INTEGER,
	--@winnerXml XML,
	@UserID INTEGER=NULL,
	@ECouponDrawPrizeID INTEGER,
	@ConsumerID INTEGER,
	@TypeID TINYINT,
	@ConsumerName NVARCHAR(200),
	@Email NVARCHAR(200),
	@MembershipID NVARCHAR(20),
	@ReturnValue [Remark]=NULL OUTPUT
AS
SET NOCOUNT ON 
	BEGIN TRY 
	
		DECLARE @ECouponID INTEGER		

		DECLARE @Winners AS TABLE
		(
			UniqueID INTEGER IDENTITY(1,1),
			ConsumerID INTEGER,			
			TypeID TINYINT,
			ConsumerName NVARCHAR(200),			
			Email NVARCHAR(200),
			MembershipID NVARCHAR(20)
		)
		
		SELECT @ECouponID=ECouponID FROM coc_ECoupons(NOLOCK) WHERE EServiceID=@EServiceID

		INSERT  INTO @Winners (ConsumerID, TypeID, ConsumerName, Email, MembershipID ) 
			Values(@ConsumerID,@TypeID, @ConsumerName,@Email, @MembershipID)		
		

		IF @TypeID = 2
		BEGIN
		INSERT INTO coc_ECouponWinners ([ECouponPrizeID], [MobileNumber], [ConsumerID], [PrizeHeader],
							[PrizeDetail], [ImageFile], [ECouponDrawPrizeID], [ConsumerName], [Email], [ConsumerType], [MembershipID])
					SELECT edp.ECouponPrizeID,CS.PrimaryMobile,WN.ConsumerID,EPL_Name.Value as PrizeHeader,EPL_PrizeDetail.Value as PrizeDetail,EP.ImageFile, 
							@ECouponDrawPrizeID,WN.ConsumerName,WN.Email,WN.TypeID, WN.MembershipID
						FROM @Winners WN
							INNER JOIN coc_Consumers CS(NOLOCK) ON WN.ConsumerID=CS.ConsumerID
							INNER JOIN coc_ECouponDrawPrizes edp(NOLOCK) ON edp.ECouponDrawPrizeID = @ECouponDrawPrizeID
							INNER JOIN coc_ECouponPrizesLanguages EPL_Name(NOLOCK)  ON EPL_Name.ECouponPrizeID = edp.ECouponPrizeID and EPL_Name.ResourceKey = 'Name' and EPL_Name.LanguageID = 1
							INNER JOIN coc_ECouponPrizesLanguages EPL_PrizeDetail(NOLOCK)  ON EPL_PrizeDetail.ECouponPrizeID = edp.ECouponPrizeID and EPL_PrizeDetail.ResourceKey = 'PrizeDetail'  and EPL_PrizeDetail.LanguageID = 1
							INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponPrizeID=edp.ECouponPrizeID AND EP.ECouponID=@ECouponID
					
		END
		IF @TypeID = 1
		BEGIN
		INSERT INTO coc_ECouponWinners ([ECouponPrizeID], [MobileNumber], [GuestID], [PrizeHeader],
							[PrizeDetail], [ImageFile], [ECouponDrawPrizeID], [ConsumerName], [Email], [ConsumerType], [MembershipID])
			SELECT EP.ECouponPrizeID,CS.PrimaryMobile,CS.GuestID,EP.PrizeHeader,EP.PrizeDetail,EP.ImageFile, @ECouponDrawPrizeID,WN.ConsumerName,WN.Email,WN.TypeID, WN.MembershipID
				FROM @Winners WN
					INNER JOIN coc_Guests CS(NOLOCK) ON WN.ConsumerID=CS.GuestID
					INNER JOIN coc_ECouponDrawPrizes edp(NOLOCK) ON edp.ECouponDrawPrizeID = @ECouponDrawPrizeID
					INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponPrizeID=edp.ECouponPrizeID AND EP.ECouponID=@ECouponID
			
		END	

	
		SELECT @ReturnValue=''
	END TRY
	BEGIN CATCH									
		SELECT @ReturnValue=ERROR_MESSAGE()
		RAISERROR(@ReturnValue, 16, 1);			
	END CATCH
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveResultDeclaration_New]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveResultDeclaration_New]
	@EServiceID INTEGER,
	--@winnerXml XML,
	@UserID INTEGER=NULL,
	@ECouponDrawPrizeID INTEGER,
	@ConsumerID INTEGER,
	@GuestID INTEGER,
	@TypeID TINYINT,
	@ECouponParticipationID BIGINT,
	@ParticipationMobile [Mobile],
	@ConsumerName NVARCHAR(200),
	@Email NVARCHAR(200),
	@MembershipID NVARCHAR(20),
	@ReturnValue [Remark]=NULL OUTPUT
AS
SET NOCOUNT ON 
	BEGIN TRY 
	
		DECLARE @ECouponID INTEGER		

		DECLARE @Winners AS TABLE
		(
			UniqueID INTEGER IDENTITY(1,1),
			ConsumerID INTEGER NULL,			
			GuestID INTEGER NULL,	
			ECouponParticipationID BIGINT,		
			TypeID TINYINT,
			ConsumerName NVARCHAR(200),			
			Email NVARCHAR(200),
			MembershipID NVARCHAR(20)
		)
		
		SELECT @ECouponID=ECouponID FROM coc_ECoupons(NOLOCK) WHERE EServiceID=@EServiceID

		INSERT  INTO @Winners (ConsumerID, GuestID, TypeID, ECouponParticipationID, ConsumerName, Email, MembershipID ) 
			Values(@ConsumerID, @GuestID, @TypeID, @ECouponParticipationID, @ConsumerName,@Email, @MembershipID)		
		
		
		IF @TypeID = 2
		BEGIN
		INSERT INTO coc_ECouponWinners ([ECouponPrizeID], [MobileNumber], [ConsumerID], [PrizeHeader],
							[PrizeDetail], [ImageFile], [ECouponDrawPrizeID], [ConsumerName], [Email], [ConsumerType], [MembershipID], ECouponParticipationID)
					SELECT edp.ECouponPrizeID,ISNULL(@ParticipationMobile, CS.PrimaryMobile),WN.ConsumerID,EPL_Name.Value as PrizeHeader,EPL_PrizeDetail.Value as PrizeDetail,EP.ImageFile, 
							@ECouponDrawPrizeID,WN.ConsumerName,WN.Email,WN.TypeID, WN.MembershipID, @ECouponParticipationID
						FROM @Winners WN
							INNER JOIN coc_Consumers CS(NOLOCK) ON WN.ConsumerID=CS.ConsumerID
							INNER JOIN coc_ECouponDrawPrizes edp (NOLOCK) ON edp.ECouponDrawPrizeID = @ECouponDrawPrizeID
							INNER JOIN coc_ECouponPrizesLanguages EPL_Name(NOLOCK)  ON EPL_Name.ECouponPrizeID = edp.ECouponPrizeID and EPL_Name.ResourceKey = 'Name' and EPL_Name.LanguageID = 1
							INNER JOIN coc_ECouponPrizesLanguages EPL_PrizeDetail(NOLOCK)  ON EPL_PrizeDetail.ECouponPrizeID = edp.ECouponPrizeID and EPL_PrizeDetail.ResourceKey = 'PrizeDetail'  and EPL_PrizeDetail.LanguageID = 1
							INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponPrizeID=edp.ECouponPrizeID AND EP.ECouponID=@ECouponID
					
		
		
		END
		IF @TypeID = 1
		BEGIN
		INSERT INTO coc_ECouponWinners ([ECouponPrizeID], [MobileNumber], [GuestID], [PrizeHeader],
							[PrizeDetail], [ImageFile], [ECouponDrawPrizeID], [ConsumerName], [Email], [ConsumerType], [MembershipID], ECouponParticipationID)
			SELECT EP.ECouponPrizeID,ISNULL(@ParticipationMobile, G.PrimaryMobile) ,WN.GuestID,EP.PrizeHeader,EP.PrizeDetail,EP.ImageFile, @ECouponDrawPrizeID,WN.ConsumerName,
					WN.Email,WN.TypeID, WN.MembershipID, @ECouponParticipationID
				FROM @Winners WN
					INNER JOIN coc_Guests G(NOLOCK) ON WN.GuestID=G.GuestID
					INNER JOIN coc_ECouponDrawPrizes edp(NOLOCK) ON edp.ECouponDrawPrizeID = @ECouponDrawPrizeID
					INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponPrizeID=edp.ECouponPrizeID AND EP.ECouponID=@ECouponID
			
			
		END	

	
		SELECT @ReturnValue=''
	END TRY
	BEGIN CATCH									
		SELECT @ReturnValue=ERROR_MESSAGE()
		RAISERROR(@ReturnValue, 16, 1);			
	END CATCH
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveRetailOutlet]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveRetailOutlet]
	@RetailOutletID INTEGER,
	@CorporateID INTEGER,
	@DynamicQuery XML, 
	@Addressline [NullName] =NULL,
	@SecondaryAddressline [NullName] =NULL,
	@ContactPerson [NullName],
	@CountryID [NullName] =NULL,
	@CityID [NullName] =NULL,
	@Latitude [NullName],
	@Longitude [NullName],
	@Location [Remark],
	@LocationURL [Remark] = null,
	@UserID INTEGER,
	@IsActive BIT,
	@ReturnValue [Remark] OUTPUT
AS
	SET NOCOUNT ON
		 
	DECLARE @RetailOutlet [Description]
	DECLARE @Counter INTEGER
	DECLARE @LanguageID INTEGER
	DECLARE @Value TABLE
	( 
		UniqueID INTEGER IDENTITY(1,1),
		LanguageID INTEGER, 
		Value [Remark]
	)

	INSERT INTO @Value (LanguageID,Value)
	SELECT	XmlTable.value('@LanguageID','INTEGER'),
			XmlTable.value('@Value','[Remark]')
			FROM @DynamicQuery.nodes('/Xml/Row') AS Data(XmlTable)
				 
		
		IF(@RetailOutletID=0)
		BEGIN
			INSERT INTO coc_RetailOutlets(CorporateID, ContactPerson,Address1,Address2,CountryID,CityID,Longitude,Latitude,Location,IsActive,AddUserID,AddDate,LocationURL)
				SELECT @CorporateID,@ContactPerson,@Addressline,@SecondaryAddressline,@CountryID,@CityID,@Longitude,@Latitude,@Location,@IsActive,@UserID,GETDATE(),@LocationURL

					SET @RetailOutletID=SCOPE_IDENTITY()  
		END
		ELSE
		BEGIN
			UPDATE coc_RetailOutlets
				SET CorporateID=@CorporateID, 
					ContactPerson=@ContactPerson,
					Address1=@Addressline,
					Address2=@SecondaryAddressline,
					CountryID=@CountryID,
					CityID=@CityID,
					Longitude=@Longitude,
					Latitude=@Latitude,
					Location=@Location,
					IsActive=@IsActive,
					EditUserID=@UserID,
					EditDate=GETDATE()  ,
					LocationURL = @LocationURL
				WHERE RetailOutletID=@RetailOutletID

		END
		DELETE FROM coc_RetailOutletLanguages WHERE RetailOutletID=@RetailOutletID

		SELECT @Counter=MIN(UniqueID) FROM @Value
		WHILE @Counter IS NOT NULL 
		BEGIN
			SELECT @RetailOutlet=Value,@LanguageID=LanguageID FROM @Value  WHERE UniqueID=@Counter
			IF NOT EXISTS(SELECT 1 FROM coc_RetailOutletLanguages(NOLOCK)RL INNER JOIN coc_RetailOutlets (NOLOCK)RO ON RL.RetailOutletID=RO.RetailOutletID WHERE RL.RetailOutlet=@RetailOutlet AND RO.CorporateID=@CorporateID)
			BEGIN
				INSERT INTO coc_RetailOutletLanguages (RetailOutletID,LanguageID,RetailOutlet)
					SELECT @RetailOutletID,@LanguageID,@RetailOutlet 
			END
			SELECT @Counter=MIN(UniqueID) FROM @Value WHERE UniqueID>@Counter
		END
		SET @ReturnValue=''
		
		  
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveRetailOutLetUploadData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveRetailOutLetUploadData]
	@XmlData XML,
	@LanguageID INTEGER,
	@UserID INTEGER,
	@ErrorMessage [Remark] OUTPUT 
AS
	SET NOCOUNT ON
	BEGIN TRY
	BEGIN TRANSACTION TRN_SaveRetailOutlet	

		DECLARE @RetailOutletID INTEGER
		DECLARE @CorporateID INTEGER
		DECLARE @RetailOutlet [Description]
		DECLARE @Counter INTEGER

		DECLARE @outLet AS TABLE 
		(
			ID INTEGER IDENTITY(1,1),
			RetailOutlet [Name], 
			ContactPerson [Description], 
			Address1 [Remark],
			Address2 [Remark],
			CountryID INTEGER,
			CityID INTEGER,
			CorporateID INTEGER,
			LocationURL [Description]
		)
		
			INSERT INTO @outLet(RetailOutlet,CorporateID,ContactPerson,Address1,Address2,CountryID,CityID,LocationURL)
			SELECT  
				CorporateUser.value('(@RetailOutlet)', '[Name]'),
				CorporateUser.value('(@CorporateID)', 'INTEGER'),
				CorporateUser.value('(@ContactPerson)', '[Description]'),
				CorporateUser.value('(@Address1)', '[Remark]'),
				CorporateUser.value('(@Address2)', '[Remark]'),
				CorporateUser.value('(@CountryID)', 'INTEGER'),
				CorporateUser.value('(@CityID)', 'INTEGER'),
				CorporateUser.value('(@LocationURL)', 'Description')
			FROM @XmlData.nodes('/XML/Row') AS Data(CorporateUser)

			SELECT @Counter = MIN(ID) FROM @outLet
			WHILE @Counter IS NOT NULL
			BEGIN
				SELECT @CorporateID = CorporateID FROM @outLet WHERE ID=@Counter
				SELECT @RetailOutlet=RetailOutlet FROM @outLet WHERE ID=@Counter
				IF NOT EXISTS(SELECT 1 FROM coc_RetailOutletLanguages(NOLOCK)RL INNER JOIN coc_RetailOutlets (NOLOCK)RO ON RL.RetailOutletID=RO.RetailOutletID WHERE RetailOutlet=@RetailOutlet AND RO.CorporateID=@CorporateID)
				BEGIN
					INSERT INTO coc_RetailOutlets(CorporateID,ContactPerson,Address1,Address2,CountryID,CityID,AddUserID,AddDate,LocationURL)
						SELECT CorporateID,ContactPerson,Address1,Address2,CountryID,CityID,@UserID,GETDATE(),LocationURL FROM @outLet WHERE ID=@Counter

					SET @RetailOutletID=SCOPE_IDENTITY()
					SELECT @RetailOutletID
					INSERT INTO coc_RetailOutletLanguages (RetailOutletID,LanguageID,RetailOutlet)
						SELECT @RetailOutletID,@LanguageID,RetailOutlet FROM @outLet WHERE ID=@Counter
				END
				SELECT @Counter = MIN(ID) FROM @outLet WHERE ID >@Counter
			END
		SELECT @ErrorMessage='';
		COMMIT TRANSACTION TRN_SaveRetailOutlet
	END TRY
	BEGIN CATCH 
		SELECT @ErrorMessage=ERROR_MESSAGE()
		ROLLBACK TRANSACTION TRN_SaveRetailOutlet
	END CATCH
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SaveSalesNotification]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE  [dbo].[SaveSalesNotification]
	@MessageTemplateID INTEGER, 
	@TemplateXML XML=NULL,
	@TemplateType TINYINT, 
	@UserID INTEGER,
	@IsActive BIT=NULL,
	@ReturnValue [Remark] OUTPUT
AS
SET NOCOUNT ON
	BEGIN
		BEGIN TRANSACTION TRN_SalesNotification
		BEGIN TRY 

		DECLARE @MessageTemplateLanguages AS TABLE
		(
			MessageTemplateID INTEGER,
			LanguageID INTEGER,
			TemplateTitle [Description],
			Template [Remark]
		)

		INSERT INTO @MessageTemplateLanguages
	    SELECT  ISNULL(@MessageTemplateID,0), 
			Consumers.value('(LanguageID[1])', 'INTEGER'),
			Consumers.value('(Title[1])', '[Description]'),
			Consumers.value('(Value[1])', '[Remark]') 
		FROM @TemplateXML.nodes('/XML/Row') AS ECoupons(Consumers);

		IF(ISNULL(@MessageTemplateID,0)=0)
		BEGIN
			INSERT INTO coc_MessageTemplates(TemplateType,IsActive,AddDate,AddUserID)
				SELECT  @TemplateType,@IsActive,GETDATE(),@UserID
				SET @MessageTemplateID=SCOPE_IDENTITY()

			INSERT INTO coc_MessageTemplateLanguages
				SELECT @MessageTemplateID,LanguageID,TemplateTitle,Template FROM @MessageTemplateLanguages
		END	ELSE
		BEGIN
			SELECT @MessageTemplateID=MessageTemplateID FROM @MessageTemplateLanguages
			UPDATE TL
				SET  
					TemplateTitle=MT.TemplateTitle,
					Template=MT.Template
				FROM coc_MessageTemplateLanguages TL, @MessageTemplateLanguages MT
				WHERE TL.MessageTemplateID=MT.MessageTemplateID AND TL.LanguageID=MT.LanguageID

			INSERT INTO coc_MessageTemplateLanguages
				SELECT MessageTemplateID,LanguageID,TemplateTitle,Template FROM @MessageTemplateLanguages WHERE LanguageID NOT IN ( SELECT LanguageID FROM coc_MessageTemplateLanguages(NOLOCK) WHERE MessageTemplateID=@MessageTemplateID)
		END
		SET @ReturnValue ='' 
		COMMIT TRANSACTION TRN_SalesNotification
		END TRY
		BEGIN CATCH
			SELECT @ReturnValue= ERROR_MESSAGE()
			ROLLBACK TRANSACTION TRN_SalesNotification
		END CATCH
	END
SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[SaveScialSightUser]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SaveScialSightUser] 
	@ConsumerID INTEGER=NULL,
	@ConsumerXml XML=NULL,
	@ReturnValue [Remark] OUTPUT
AS
	SET NOCOUNT ON
	 
		BEGIN TRY 
		DECLARE @Website INTEGER
		DECLARE @IsFacebookUser BIT=0
		DECLARE @IsTwitterUser BIT=0
		DECLARE @IsGmailUser BIT=0
		DECLARE @IsYahooUser BIT=0
		DECLARE @IsOutlookUser BIT=0
		DECLARE @SocialMediaID [Email]
		DECLARE @UserValue [Code]
		DECLARE @MemberShipID  NVARCHAR(40)=NEWID()
		DECLARE @LoyaltyPoint INTEGER
		DECLARE @SocialConsumers TABLE
		(
			WebsiteID INTEGER,
			UserName NVARCHAR(125),
			UserValue NVARCHAR(125)
		)
		SELECT @LoyaltyPoint=SetupValue FROM coc_LoyaltyPointSetups(NOLOCK) WHERE LoyaltyPointSetupID=101
		INSERT INTO @SocialConsumers(WebsiteID,UserName,UserValue)
			SELECT consumer.value('(WebsiteID[1])', 'INTEGER'),
					consumer.value('(UserName[1])', 'NVARCHAR(125)'),
					consumer.value('(UserValue[1])', 'NVARCHAR(125)')
				FROM @ConsumerXml.nodes('/SocialSight/Consumer') AS Data(consumer)

		SELECT @Website= WebsiteID FROM @SocialConsumers
		IF (@Website=1)
		BEGIN
			SET @IsGmailUser=1
		END
		ELSE IF (@Website=2)
		BEGIN
			SET @IsFacebookUser=1
		END
		ELSE IF (@Website=3)
		BEGIN
			SET @IsYahooUser=1
		END
		ELSE IF (@Website=4)
		BEGIN
			SET @IsOutlookUser=1
		END
		ELSE IF (@Website=5)
		BEGIN
			SET @IsTwitterUser=1
		END
		BEGIN TRANSACTION TRN_SaveSocialSight
		SELECT @UserValue=UserValue FROM @SocialConsumers

		IF NOT EXISTS(SELECT 1 FROM coc_Consumers(NOLOCK) WHERE 
			OutlookID = @UserValue OR 
			TwitterID = @UserValue OR 
			GmailID = @UserValue OR 
			YahooID = @UserValue OR
			FacebookID = @UserValue
			)
		BEGIN
			INSERT INTO coc_Users(UserName,RoleID,EmailID,ResetRequired,MobileNumber,CreatedDate)
				SELECT SC.UserValue,5,SC.UserValue,0,NULL,GETDATE() FROM @SocialConsumers SC
			SET @ReturnValue=SCOPE_IDENTITY()

			INSERT INTO coc_Consumers(UserID,FirstName,GmailID,FacebookID,TwitterID,OutlookID,YahooID, Gender,AgeGroupID,KnowECouponID,IsVerified,IsActive,HideApplicationTour,LoyaltyPoint,RedeemPoint,AddDate,
										IsTwitterUser,IsFacebookUser,IsGmailUser,IsYahooUser,IsOutlookUser,EmailID,MembershipNumber)
				SELECT @ReturnValue,SC.UserName,CASE WHEN @IsGmailUser=1 THEN SC.UserValue ELSE NULL END,CASE WHEN @IsFacebookUser=1 THEN SC.UserValue ELSE NULL END,CASE WHEN @IsTwitterUser=1 THEN SC.UserValue ELSE NULL END,CASE WHEN @IsOutlookUser=1 THEN SC.UserValue ELSE NULL END,
					CASE WHEN @IsYahooUser=1 THEN SC.UserValue ELSE NULL END,0,12,21,1,1,0,@LoyaltyPoint,'',GETDATE(),@IsTwitterUser,@IsFacebookUser,@IsGmailUser,@IsYahooUser,
					@IsOutlookUser,CASE WHEN @IsGmailUser=1 THEN SC.UserValue ELSE NULL END,CONVERT(NVARCHAR(10),@MemberShipID)  FROM @SocialConsumers SC
			SET @ReturnValue=SCOPE_IDENTITY()

			INSERT INTO coc_ConsumerPointDetails(ConsumerID,PointDate,LoyaltyPoint,RedeemPoint,PointSource) 
				SELECT @ReturnValue,GETDATE(),@LoyaltyPoint,0,101
		END
		ELSE
		BEGIN
			SET @ReturnValue='0'
		END
	COMMIT TRANSACTION TRN_SaveSocialSight
	END TRY
	BEGIN CATCH		
		ROLLBACK TRANSACTION TRN_SaveSocialSight									
		SELECT @ReturnValue=ERROR_MESSAGE()
		RAISERROR(@ReturnValue, 16, 1);
	END CATCH
	SET NOCOUNT OFF








GO
/****** Object:  StoredProcedure [dbo].[SaveScreenResources]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveScreenResources]
	@Type INTEGER = NULL,
	@SeqNo INTEGER = NULL,
	@LanguageID INTEGER=NULL ,
	@strXML XML
AS
	BEGIN TRY
		DECLARE @ResourceID INTEGER
		DECLARE @Counter INTEGER
		DECLARE @ResourceValue [NullDescription]
		DECLARE @Resources TABLE
		(
			Sno INTEGER IDENTITY(1,1),
			ResourceID BIGINT NULL,
			ScreenID INTEGER,
			ResourceKey [NullDescription],
			ResourceValue [NullDescription],
			ResourceText [NullDescription]
		)
		INSERT INTO @Resources(ResourceID,ResourceKey,ResourceValue,ResourceText)
			SELECT XmlTable.value('@ResourceID[1]','INTEGER'), 
 				XmlTable.value('@ResourceKey[1]','[NullDescription]'),
				XmlTable.value('@ResourceValue[1]','[NullDescription]'),
				XmlTable.value('@ResourceText[1]','[NullDescription]')
			FROM @strXML.nodes('/XML/Row') AS Data(XmlTable)

			IF(@Type=1 OR @Type=3 OR @Type= 4)
			BEGIN
				SELECT @Counter =MIN(Sno) FROM @Resources
				WHILE @Counter IS NOT NULL
				BEGIN
					SELECT @ResourceID=ResourceID FROM @Resources WHERE Sno=@Counter
					SELECT @ResourceValue=ResourceValue FROM @Resources WHERE Sno=@Counter
					IF(ISNULL(@ResourceID,0)=0 AND (@ResourceValue != NULL OR @ResourceValue != ''))
					BEGIN
						INSERT INTO coc_Resources(ScreenID,LanguageID,ResourceKey,ResourceValue,ResourceText)
							SELECT @SeqNo,@LanguageID,ResourceKey,REPLACE(ResourceValue,'&amp;','&'),ResourceText FROM @Resources WHERE Sno=@Counter
					END
					ELSE
					BEGIN
						IF(@ResourceValue != NULL OR @ResourceValue != '')
							UPDATE coc_Resources SET ResourceValue = REPLACE(@ResourceValue,'&amp;','&'),ResourceText=REPLACE(@ResourceValue,'&amp;','&') WHERE ResourceID=@ResourceID
					END

					SET @ResourceID =NULL
					SET @ResourceValue =NULL
					SELECT @Counter = MIN(Sno) FROM @Resources WHERE Sno>@Counter
				END
			END
			ELSE IF(@Type=2)
			BEGIN
				SELECT @Counter =MIN(Sno) FROM @Resources
				WHILE @Counter IS NOT NULL
				BEGIN
					SELECT @ResourceID=ResourceID FROM @Resources WHERE Sno=@Counter
					SELECT @ResourceValue=ResourceValue FROM @Resources WHERE Sno=@Counter
					DELETE coc_EnumValueLanguages WHERE EnumValueID=@ResourceID AND LanguageID=@LanguageID
					INSERT INTO coc_EnumValueLanguages (EnumValueID,LanguageID,EnumValue)
						SELECT @ResourceID,@LanguageID,@ResourceValue
					SELECT @Counter = MIN(Sno) FROM @Resources WHERE Sno>@Counter
				END
			END
			ELSE IF(@Type=5)
			BEGIN
				SELECT @Counter =MIN(Sno) FROM @Resources
				WHILE @Counter IS NOT NULL
				BEGIN
					SELECT @ResourceID=ResourceID FROM @Resources WHERE Sno=@Counter
					SELECT @ResourceValue=ResourceValue FROM @Resources WHERE Sno=@Counter
					DELETE coc_MenuLanguages WHERE MenuID=@ResourceID AND LanguageID=@LanguageID
					INSERT INTO coc_MenuLanguages(MenuID,LanguageID,Menu)
						SELECT @ResourceID,@LanguageID,@ResourceValue
					SELECT @Counter = MIN(Sno) FROM @Resources WHERE Sno>@Counter
				END
			END
	END TRY    
		BEGIN CATCH 
			SELECT ERROR_MESSAGE() 
		END CATCH 
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[SaveServiceReceipt]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveServiceReceipt]
	@EServiceReceiptID INTEGER =0,
	@EServiceInvoiceID INTEGER=0,
	@ReceiptAmount [Amount],
	@ReceiptDate DATETIME,
	@ChequeNumber [NullCode]=NULL,
	@ChequeDate DATETIME=NULL,
	@BankName [NullName]=NULL,
	@Remarks [Remark]=NULL,
	@UserID INTEGER,
	@CardPayment BIT,
	@CashPayment BIT,
	@ChequePayment BIT,
	@ReturnValue [Remark] OUTPUT,
	@EServiceID int = 0,
	@PaymentTypeId int = null
AS
	SET NOCOUNT ON
		BEGIN
			--declare @InvoiceID INTEGER =null
			--For manual entries EServiceID is null
			if(@EServiceID >0)
				begin
					select @EServiceInvoiceID = EServiceInvoiceID from coc_EServiceInvoices(NOLOCK) where EServiceID = @EServiceID
					--set @EServiceInvoiceID = @InvoiceID
				end

			--PRINT @EServiceInvoiceID
		
			IF(@EServiceReceiptID=0)
				BEGIN
				INSERT INTO coc_EServiceReceipts(EServiceInvoiceID,PaymentTypeID,ReceiptDate,ReceiptAmount,ChequePayment,CashPayment,CardPayment,ChequeNumber,ChequeDate,
												 BankName,Remarks,AddDate,AddUserID)
				SELECT @EServiceInvoiceID,@PaymentTypeId,@ReceiptDate,@ReceiptAmount,@ChequePayment,@CashPayment,@CardPayment,@ChequeNumber,@ChequeDate,@BankName,@Remarks,GETDATE(),@UserID
			END
			ELSE
				BEGIN
					declare @logString nvarchar(max)=''
					select @logString +=
						'{"EServiceInvoiceID":'+STR(EServiceInvoiceID)+',"PaymentTypeID":'+STR(PaymentTypeID)+',"ReceiptDate":"'+LEFT(CONVERT(VARCHAR, ReceiptDate, 120), 10)--STR(ReceiptDate)
						+'","ReceiptAmount":'+STR(ReceiptAmount)+',"AddDate":"'+LEFT(CONVERT(VARCHAR, AddDate, 120), 10)--STR(AddDate)
						+'","AddUserID":'+STR(AddUserID)+'}'
						 from coc_EServiceReceipts where EServiceReceiptID=@EServiceReceiptID
			--print @logString
					UPDATE coc_EServiceReceipts
						SET EServiceInvoiceID=@EServiceInvoiceID,
							PaymentTypeID=@PaymentTypeId,
							ReceiptDate=@ReceiptDate,
							ReceiptAmount=@ReceiptAmount,
							ChequePayment=@ChequePayment,
							CashPayment=@CashPayment,
							CardPayment=@CardPayment,
							ChequeNumber=@ChequeNumber,
							ChequeDate=@ChequeDate ,
							Log = @logString
					WHERE EServiceReceiptID=@EServiceReceiptID
				END


			--IF(	@PaymentTypeId=31)
			--	BEGIN
					UPDATE coc_EServices SET IsPaymentDone=1 where EServiceID = @EServiceID
			--	END
			
			SELECT @EServiceInvoiceID
		SET @ReturnValue=''
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[SaveServiceTask]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveServiceTask]
	@TaskTypeId INTEGER,
	@UniqueId INTEGER,
	@ExecuteDate DATETIME,
	@TaskParameters NVARCHAR(MAX),	
	@TaskData NVARCHAR(MAX)=NULL,
	@UserId INTEGER,
	@ServiceTaskId INTEGER OUTPUT,
	@ReturnValue [Remark] OUTPUT
AS
SET NOCOUNT ON
	BEGIN

		--BEGIN TRANSACTION TRN_Countries
		BEGIN TRY

		INSERT INTO coc_ServiceTask(TaskTypeId, [UniqueId],[Date], [ExecuteDate],[Parameters], [TaskData],[UserId],[Status],[RowStatus])
			VALUES (@TaskTypeId, @UniqueId, GETDATE(), @ExecuteDate, @TaskParameters,@TaskData, @UserId, 1,1)
		
		SET @ServiceTaskId =SCOPE_IDENTITY()

		SET @ReturnValue ='' 
		--COMMIT TRANSACTION TRN_Countries
		
		END TRY
		BEGIN CATCH
			SELECT @ReturnValue= ERROR_MESSAGE()
		--ROLLBACK TRANSACTION TRN_Countries
		END CATCH
		END
SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[SaveServiceTaskNotification]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveServiceTaskNotification] 
	 @ServiceTaskId INT
	,@UserId INT=NULL
	,@Date DATETIME
	,@Message NVARCHAR(500)	
	,@Result NVARCHAR(MAX)	
	,@Status INT
	,@RowStatus INT = 1
	,@LanguageId INT
AS
BEGIN
	DECLARE @id INT;

	IF(@UserId IS NULL OR @UserId=0)
	BEGIN
		SELECT @UserId = USERID FROM coc_ServiceTask(NOLOCK) WHERE Id=@ServiceTaskId
	END

	
		INSERT INTO coc_ServiceTaskNotification (
			ServiceTaskId
			,UserId
			,[Date]
			,[Message]
			,[Result]
			,[STATUS]
			,RowStatus
			,LanguageId
			)
		VALUES (
			@ServiceTaskId
			,@UserId
			,@Date
			,@Message
			,@Result
			,@Status
			,@RowStatus
			,@LanguageId
			);
		
END
GO
/****** Object:  StoredProcedure [dbo].[SaveSMSSettings]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[SaveSMSSettings] 
	@SMSWebServiceURL [NullName]=NULL, 
	@Username [NullName]=NULL,
	@Password [NullName]=NULL
	 
 AS
	SET NOCOUNT ON
	BEGIN  
			UPDATE COC_SystemSetups
				SET SetupValue=@SMSWebServiceURL  WHERE SystemSetupID=301
				UPDATE COC_SystemSetups 
				SET SetupValue=@Username WHERE SystemSetupID=302
			UPDATE COC_SystemSetups
				SET SetupValue=@Password WHERE SystemSetupID=303

	SET NOCOUNT OFF 
	END 
GO
/****** Object:  StoredProcedure [dbo].[SaveTermsData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveTermsData] @ECouponID INTEGER  
 ,@TermsXML XML = NULL  
 ,@ErrorMessage NVARCHAR(max) = NULL OUTPUT  
AS  
BEGIN  
   
  SET NOCOUNT ON  
  
 BEGIN TRY     
    
   DECLARE @ETerms TABLE (  
    termseng [REMARKBIG]  
    ,termsar [REMARKBIG]  
    )  
  
   INSERT INTO @ETerms (  
    termseng  
    ,termsar  
    )  
   SELECT terms.value('(TermsEng[1])', '[RemarkBig]')  
    ,terms.value('(TermsAr[1])', '[RemarkBig]')  
   FROM @TermsXML.nodes('/ECoupon/Terms') AS Data(terms)  
  
   UPDATE [coc_ecouponlanguages]  
   SET Usesterm = ET.termseng  
   FROM @ETerms ET  
   WHERE ecouponid = @ECouponID  
    AND languageid = 1  
  
   UPDATE [coc_ecouponlanguages]  
   SET Usesterm = '<div dir= ''rtl'' >'+ET.termsar+ '</div>'  
   FROM @ETerms ET  
   WHERE ecouponid = @ECouponID  
    AND languageid = 2  
 
  
  --UPDATE coc_ecoupons  
  --SET isactive = 1  
  --WHERE ecouponid = @ECouponID  
  
  SET @ErrorMessage = '';  
  
   END TRY                                 
    
  BEGIN CATCH   
   SET @ErrorMessage ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                
    
  END CATCH 
    SET NOCOUNT OFF  
END
GO
/****** Object:  StoredProcedure [dbo].[SaveTicketConfiguration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SaveTicketConfiguration]
	@TicketID INTEGER,
	@EventTypeID INTEGER=NULL,
	@EServiceTypeID INTEGER=NULL,
	@UserID INTEGER=NULL,
	@EventDescription [Remark]=NULL,
	@EventCost Amount=NULL,
	@EventDate DATETIME=NULL,
	@LastDate DATETIME=NULL,
	@PurchaseStartDate DATETIME=NULL,
	@PurchaseEndDate DATETIME=NULL,
	@TicketOutlet XML,
	@IsActive BIT=NULL,
	@TicketDiscription  NVARCHAR(MAX)=NULL,
	@DisplayImage [NullDescription]=NULL,
	@ReturnValue [Remark] OUTPUT
AS
	SET NOCOUNT ON
		BEGIN

		DECLARE @TicketOutlets TABLE
		(
			RetailOutletID INTEGER
		)

		INSERT INTO @TicketOutlets(RetailOutletID)
			SELECT outlet.value('(RetailOutletID[1])', '[INTEGER]')
				FROM @TicketOutlet.nodes('/RetailOutletData/RetailOutlet') AS Data(outlet);		 

		 	IF(@TicketID=0)
			BEGIN
				INSERT INTO coc_EServiceEvents(EServiceID,EventDescription,EventTypeID,TicketDescription,EventDate,LastDate,PurchaseStartDate,PurchaseEndDate,EventCost,IsActive,AddDate,AddUserID,DisplayImage)
					SELECT @EServiceTypeID,@EventDescription,@EventTypeID,@TicketDiscription,@EventDate,@LastDate,@PurchaseStartDate,@PurchaseEndDate,@EventCost,@IsActive,GETDATE(),@UserID,@DisplayImage

				SET @TicketID=SCOPE_IDENTITY(); 

				INSERT INTO coc_EServiceEventOutlets(EServiceEventID,RetailOutletID)
					SELECT @TicketID,OU.RetailOutletID FROM @TicketOutlets OU
			END
			ELSE
			BEGIN
			UPDATE coc_EServiceEvents
				SET EventDescription=@EventDescription,
					EventTypeID=@EventTypeID,
					EventDate=@EventDate,
					LastDate=@LastDate,
					PurchaseStartDate=@PurchaseStartDate,
					PurchaseEndDate=@PurchaseEndDate,
					EventCost=@EventCost,
					IsActive=@IsActive,
					EditDate=GETDATE(),
					TicketDescription=@TicketDiscription,
					EditUserID=@UserID,
					DisplayImage=@DisplayImage
				WHERE EServiceEventID=@TicketID
			
			DELETE FROM coc_EServiceEventOutlets WHERE EServiceEventID =@TicketID

			INSERT INTO coc_EServiceEventOutlets(EServiceEventID,RetailOutletID)
				SELECT @TicketID,OU.RetailOutletID 
					FROM @TicketOutlets OU
			END
		SET @ReturnValue=''
		END
	SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[SaveTicketTemplate]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveTicketTemplate]
	@EServiceTypeID INTEGER,
	@TemplateName [Description],
	@TicketDescription [Remark],
	@UserID INTEGER,
	@IsActive BIT,
    @ReturnValue [Remark] OUTPUT
AS
BEGIN	
	INSERT INTO coc_TicketTemplates(CorporateID,TemplateName,TicketDescription,IsActive,AddUserID,AddDate)--EServiceID,
		SELECT @UserID,@TemplateName,@TicketDescription,@IsActive,@UserID,GETDATE()--@EServiceTypeID,
	SET @ReturnValue=''
END

GO
/****** Object:  StoredProcedure [dbo].[SaveView]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveView]
	@ScreenID INT,
	@ViewID INT,
	@ViewName NVARCHAR(50),
	@ColumnXML XML,
	@ReturnValue [Remark] OUTPUT
AS
	SET NOCOUNT ON
		BEGIN TRY
		BEGIN TRANSACTION TRN_View
			IF EXISTS( SELECT NULL FROM coc_ScreenViews(NOLOCK) WHERE ScreenViewID=@ViewID AND IsSystem=1)
			BEGIN
				SET @ReturnValue='System view cannot be Updated'
			END
			ELSE BEGIN
				IF @ViewID=0
				BEGIN
					SELECT @ViewID=MIN(ScreenViewID) FROM [coc_ScreenViews] (NOLOCK) WHERE ScreenID=@ScreenID
					INSERT INTO [coc_ScreenViews](ViewName,ScreenID,TableName,PrimaryKey,IsSystem)
						SELECT @ViewName,ScreenID,TableName,PrimaryKey,0 FROM [coc_ScreenViews] (NOLOCK) WHERE ScreenViewID=@ViewID
					SELECT @ViewID=SCOPE_IDENTITY()
				END
				ELSE
				BEGIN
					UPDATE [coc_ScreenViews] SET ViewName=@ViewName WHERE ScreenViewID=@ViewID
				END

				DELETE FROM [coc_ScreenViewColumns] WHERE ScreenViewID=@ViewID
				DELETE FROM [coc_Resources] WHERE ScreenViewID=@ViewID

				INSERT INTO [coc_ScreenViewColumns](ScreenViewID,ColumnName,AliasName)
					SELECT @ViewID,TableColumn.value('(ColumnName[1])','[Description]'),TableColumn.value('(ColumnName[1])','[Description]')
						FROM @ColumnXML.nodes('/TableColumns/TableColumn') AS TableColumns(TableColumn);

				INSERT INTO [coc_Resources](ScreenID,ResourceKey,ResourceValue,LanguageID,ScreenViewID)
					SELECT @ScreenID,TableColumn.value('(ColumnName[1])','[NullDescription]'),TableColumn.value('(ResourceEnglish[1])','[NullDescription]'),1,@ViewID
						FROM @ColumnXML.nodes('/TableColumns/TableColumn') AS TableColumns(TableColumn);

				INSERT INTO [coc_Resources](ScreenID,ResourceKey,ResourceValue,LanguageID,ScreenViewID)
					SELECT @ScreenID,TableColumn.value('(ColumnName[1])','[NullDescription]'),TableColumn.value('(ResourceArabic[1])','[NullDescription]'),2,@ViewID
						FROM @ColumnXML.nodes('/TableColumns/TableColumn') AS TableColumns(TableColumn)
					WHERE TableColumn.value('(ResourceArabic[1])','[NullDescription]') IS NOT NULL

				INSERT INTO [coc_Resources](ScreenID,ResourceKey,ResourceValue,LanguageID,ScreenViewID)
					SELECT @ScreenID,TableColumn.value('(ColumnName[1])','[NullDescription]'),TableColumn.value('(ResourceUrdu[1])','[NullDescription]'),3,@ViewID
						FROM @ColumnXML.nodes('/TableColumns/TableColumn') AS TableColumns(TableColumn)
					WHERE TableColumn.value('(ResourceUrdu[1])','[NullDescription]') IS NOT NULL
					SET @ReturnValue=''
			END
		COMMIT TRANSACTION TRN_View
		END TRY
		BEGIN CATCH
			SELECT @ReturnValue= ERROR_MESSAGE()
			ROLLBACK TRANSACTION TRN_View
		END CATCH
	SET NOCOUNT OFF






GO
/****** Object:  StoredProcedure [dbo].[SaveVoucherCreation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[SaveVoucherCreation]          
  @PromotionNameEN nvarchar(2000),          
  @PromotionNameAR nvarchar(2000),            
  @Type int,           
  @NumberOfVouchers int,          
  @FromDate datetime,          
  @Todate datetime,          
  @CorporateID int,            
  @CreatedBy int,        
  @EServiceID int out            
 AS            
 SET NOCOUNT ON            
 BEGIN              
  BEGIN TRY           
   Declare @EVoucherID int   
     
   DECLARE @ServiceNumber [NullCode]   
       
   SELECT @ServiceNumber= CONVERT(NVARCHAR(20),Max(CONVERT(int,ISNULL(ServiceNumber,0)))+1) FROM coc_EServices(NOLOCK)         
          
   INSERT INTO coc_EServices(PaymentType,ServiceNumber,ServiceDate,FromDate,ToDate,CorporateID,ServiceTypeID,ServiceSubTypeID,CompetitionID,MessagePackTypeID,AddDate,AddUserID)          
   SELECT 33,@ServiceNumber,GETDATE(),@FromDate,@Todate,@CorporateID,51,63,null,null,GETDATE(),@CreatedBy          
   SET @EServiceID=SCOPE_IDENTITY()            
          
   Insert into coc_EVoucher(EServiceID,VoucherType,AddDate,CreatedUserID,IsActive,IsDeleted,IsAllowed,Type,NumberOfVouchers,CountryID)          
     select @EServiceID,1,getdate(),@CreatedBy,1,0,1,@Type,@NumberOfVouchers,183          
     set @EVoucherID=SCOPE_IDENTITY()          
          
  Insert into coc_EServiceLanguages(EServiceID,LanguageID,EService)          
  select  @EServiceID,1,@PromotionNameEN  
           
  Insert into coc_EServiceLanguages(EServiceID,LanguageID,EService)          
  select  @EServiceID,2,@PromotionNameEN         
        
   INSERT INTO coc_EVoucherLanguages(EVoucherID, AddDate, CreatedUserId, LanguageID, [ResourceKey], [ResourceValue])      
           SELECT @EVoucherID, GETDATE(), @CreatedBy, coc_EServiceLanguages.LanguageID, 'VoucherName',  coc_EServiceLanguages.EService FROM coc_EServices   (NOLOCK)    
     INNER JOIN coc_EServiceLanguages (NOLOCK) ON coc_EServices.EServiceID = coc_EServiceLanguages.EServiceID       
     WHERE coc_EServices.EServiceID  = @EServiceID   
    
           
  INSERT INTO coc_Notifications(EServiceID,NotificationCount,ResendCounter)  
   select  @EServiceID,@NumberOfVouchers,0   
            
  END TRY            
  BEGIN CATCH          
  print(Error_line())          
  SELECT Error_line()          
  set @EServiceID=0          
        
  print(Error_message())          
 SELECT Error_message()            
  END CATCH            
 SET NOCOUNT OFF             
 END 
GO
/****** Object:  StoredProcedure [dbo].[SaveVoucherImage]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SaveVoucherImage]
	@EVoucherID				INTEGER,
	@EVoucherImagesID		INTEGER,
	@ImageXml				XML			=	NULL,
	@UserID					INTEGER 
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @EVoucherImageId INT;
		
		BEGIN

			DECLARE @EVoucherImages TABLE
			( 					
				IsPrimaryImage INTEGER,
				ImageFile [Description]
			)

			INSERT INTO @EVoucherImages(IsPrimaryImage,ImageFile)
				SELECT
					evoucherImages.value('(ImageFile[1])', '[Description]'),
					evoucherImages.value('(IsPrimaryImage[1])', 'BIT')				  
				FROM
					@ImageXml.nodes('/EVoucher/Images') AS Data(evoucherImages)


				IF(@EVoucherImagesID > 0)

					BEGIN
						UPDATE coc_EVoucherImages  SET 
							EVoucherID			=		@EVoucherID,
							IsPrimaryImage		=		EI.IsPrimaryImage,
							ImageFile			=		EI.ImageFile,
							EditDate			=		GETDATE(),
							EditedUserID		=		@UserID 
						FROM 
							@EVoucherImages EI 
						WHERE
							EVoucherImagesID	=		@EVoucherImagesID
							
						UPDATE coc_EVoucherImages  SET	
							IsPrimaryImage		=	0
						WHERE
							EVoucherID			=		@EVoucherID AND
							EVoucherImagesID	<>		@EVoucherImagesID
								
										
						IF((SELECT IsPrimaryImage FROM @EVoucherImages)=1)
						BEGIN
							UPDATE coc_EVoucher SET
								ImageFile = EI.ImageFile 
							FROM
								@EVoucherImages EI
							WHERE 
								EVoucherID		=		@EVoucherID	
						END
					END
				ELSE
					BEGIN
						INSERT INTO coc_EVoucherImages(EVoucherID,ImageFile,AddDate,CreatedUserID,IsPrimaryImage)
							SELECT @EVoucherID,EI.ImageFile,GETDATE(),@UserID,EI.IsPrimaryImage
							FROM @EVoucherImages EI
						SET @EVoucherImagesID=SCOPE_IDENTITY()

						UPDATE coc_EVoucherImages  SET	
							IsPrimaryImage		=		0
						WHERE
							EVoucherID			=		@EVoucherID AND
							EVoucherImagesID	<>		@EVoucherImagesID


						IF((SELECT IsPrimaryImage FROM @EVoucherImages)=1)
						BEGIN
							UPDATE coc_EVoucher SET 
								ImageFile		=		EI.ImageFile 
							FROM 
								@EVoucherImages EI 
							WHERE 
								EVoucherID		=		@EVoucherID	
						END
					END						
			END
	SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[SearchConsumers]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SearchConsumers]
	@CityID INTEGER=NULL,
	@GenderID INTEGER=NULL,
	@AgeGroupID INTEGER=NULL, 
	@EServiceID INTEGER=NULL,
	@ErrorMessage [Remark] OUTPUT 
AS 
SET NOCOUNT ON
	BEGIN TRY  
	 BEGIN TRANSACTION TRN_GetBarcodes
		
		DECLARE @Consumers AS Table
		(
			UniqueID INTEGER IDENTITY(1,1),
			ConsumerID INTEGER,
			EServiceID INTEGER NULL
		)
		 
		INSERT INTO @Consumers
		 SELECT CN.ConsumerID,EServiceID  -- COUNT(CN.ConsumerID),
			FROM coc_Notifications NF(NOLOCK)
				INNER JOIN coc_NotificationSends NS(NOLOCK) ON NF.NotificationID=NS.NotificationID  
				INNER JOIN coc_ConsumerNotifications CN(NOLOCK) ON NS.NotificationSendID=CN.NotificationSendID  
			WHERE EServiceID= @EServiceID
		 GROUP BY CN.ConsumerID ,EServiceID
		  
		SELECT CS.ConsumerID ,FirstName,CS.EmailID,PrimaryMobile,CM.EServiceID,ISNULL(DeviceToken,0) [DeviceToken],ChannelName
			FROM coc_Consumers CS(NOLOCK) 
				inner join coc_Users US (NOLOCK) On CS.UserID = US.UserID 
				LEFT JOIN @Consumers CM ON CS.ConsumerID=CM.ConsumerID
				WHERE  
					CS.IsActive= 1 and CS.IsVerified = 1 
					AND (@CityID IS NULL OR CS.CityID=@CityID) 
					AND (@GenderID IS NULL OR CS.Gender = @GenderID)
					AND (@AgeGroupID IS NULL OR CS.AgeGroupID=@AgeGroupID)
					AND CS.ConsumerID NOT IN (SELECT ConsumerID FROM @Consumers)
		ORDER BY ISNULL(CS.NotificationCount,0),CS.ConsumerID
		 
		SELECT COUNT(CS.ConsumerID) [TotalCriteria],CM.EServiceID
			FROM coc_Consumers CS(NOLOCK) 
				LEFT JOIN @Consumers CM ON CS.ConsumerID=CM.ConsumerID
				WHERE  
					CS.IsActive= 1 and CS.IsVerified = 1 
					AND (@CityID IS NULL OR CS.CityID=@CityID) 
					AND (@GenderID IS NULL OR CS.Gender = @GenderID)
					AND (@AgeGroupID IS NULL OR CS.AgeGroupID=@AgeGroupID)
					AND CS.ConsumerID NOT IN (SELECT ConsumerID FROM @Consumers)
		GROUP BY CM.EServiceID 

		SET @ErrorMessage =''
	 COMMIT TRANSACTION TRN_GetBarcodes
	END TRY
	BEGIN CATCH									
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);			
	END CATCH

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SearchGenericNotificationConsumers]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SearchGenericNotificationConsumers]
	@CityID INTEGER=NULL,
	@GenderID INTEGER=NULL,
	@AgeGroupID INTEGER=NULL, 
	@EServiceID INTEGER=NULL,
	@NotificationSendId INTEGER,
	@TotalSent INTEGER OUTPUT,
	@ErrorMessage [Remark] OUTPUT 
AS 
SET NOCOUNT ON
	BEGIN TRY  
	 BEGIN TRANSACTION TRN_GetBarcodes
		
		DECLARE @Consumers AS Table
		(
			UniqueID INTEGER IDENTITY(1,1),
			ConsumerID INTEGER
      --,EServiceID INTEGER NULL
		)

		SELECT @TotalSent = Count(*) FROM coc_ConsumerNotifications c (NOLOCK) WHERE c.NotificationSendID = @NotificationSendId		

		INSERT INTO @Consumers
		 SELECT top 10 CN.ConsumerID  -- COUNT(CN.ConsumerID),
			FROM coc_GeneralNotification NF(NOLOCK)
				INNER JOIN coc_NotificationSends NS(NOLOCK) ON NF.GeneralNotificationId =NS.GeneralNotificationId  
				INNER JOIN coc_ConsumerNotifications CN(NOLOCK) ON NS.NotificationSendID=CN.NotificationSendID  
			WHERE isnull(NF.IsActive,0) = 'True' and isnull(NF.IsBrodaCast,0) = 'True' and NS.ScheduleDate between NF.ScheduleFromDate and NF.ScheduleToDate
		 GROUP BY CN.ConsumerID

  SELECT top 10 CS.ConsumerID ,FirstName,EmailID,PrimaryMobile,ISNULL(DeviceToken,0) [DeviceToken],ChannelName
			FROM coc_Consumers CS(NOLOCK) 
				LEFT JOIN @Consumers CM ON CS.ConsumerID=CM.ConsumerID
				WHERE (@CityID IS NULL OR CS.CityID=@CityID) 
					AND (@GenderID IS NULL OR CS.Gender = @GenderID)
					AND (@AgeGroupID IS NULL OR CS.AgeGroupID=@AgeGroupID)
					AND CS.ConsumerID NOT IN (SELECT ConsumerID FROM @Consumers)
		ORDER BY ISNULL(CS.NotificationCount,0),CS.ConsumerID
		 
		SELECT COUNT(CS.ConsumerID) [TotalCriteria]
			FROM coc_Consumers CS(NOLOCK) 
				LEFT JOIN @Consumers CM ON CS.ConsumerID=CM.ConsumerID
				WHERE (@CityID IS NULL OR CS.CityID=@CityID) 
					AND (@GenderID IS NULL OR CS.Gender = @GenderID)
					AND (@AgeGroupID IS NULL OR CS.AgeGroupID=@AgeGroupID)
					AND CS.ConsumerID NOT IN (SELECT ConsumerID FROM @Consumers)
		-- GROUP BY CM.EServiceID 

		SET @ErrorMessage =''
	 COMMIT TRANSACTION TRN_GetBarcodes
	END TRY
	BEGIN CATCH									
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);			
	END CATCH

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SearchNotificationConsumers]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SearchNotificationConsumers]
	@CityID INTEGER=NULL,
	@GenderID INTEGER=NULL,
	@AgeGroupID INTEGER=NULL, 
	@EServiceID INTEGER=NULL,
	@NotificationSendId INTEGER,
	@TotalSent INTEGER OUTPUT,
	@ErrorMessage [Remark] OUTPUT 
AS 
SET NOCOUNT ON
	BEGIN TRY  
	 BEGIN TRANSACTION TRN_GetBarcodes
		
		DECLARE @Consumers AS Table
		(
			UniqueID INTEGER IDENTITY(1,1),
			ConsumerID INTEGER,
			EServiceID INTEGER NULL
		)

		SELECT @TotalSent = Count(*) FROM coc_ConsumerNotifications c(NOLOCK) WHERE c.NotificationSendID = @NotificationSendId		

		INSERT INTO @Consumers
		 SELECT CN.ConsumerID,EServiceID  -- COUNT(CN.ConsumerID),
			FROM coc_Notifications NF(NOLOCK)
				INNER JOIN coc_NotificationSends NS(NOLOCK) ON NF.NotificationID=NS.NotificationID  
				INNER JOIN coc_ConsumerNotifications CN(NOLOCK) ON NS.NotificationSendID=CN.NotificationSendID  
			WHERE EServiceID= @EServiceID
		 GROUP BY CN.ConsumerID ,EServiceID

		 
		  
		SELECT CS.ConsumerID ,FirstName,EmailID,PrimaryMobile,CM.EServiceID,ISNULL(DeviceToken,0) [DeviceToken],ChannelName
			FROM coc_Consumers CS(NOLOCK) 
				LEFT JOIN @Consumers CM ON CS.ConsumerID=CM.ConsumerID
				WHERE (@CityID IS NULL OR CS.CityID=@CityID) 
					AND (@GenderID IS NULL OR CS.Gender = @GenderID)
					AND (@AgeGroupID IS NULL OR CS.AgeGroupID=@AgeGroupID)
					AND CS.ConsumerID NOT IN (SELECT ConsumerID FROM @Consumers)
		ORDER BY ISNULL(CS.NotificationCount,0),CS.ConsumerID
		 
		SELECT COUNT(CS.ConsumerID) [TotalCriteria],CM.EServiceID
			FROM coc_Consumers CS(NOLOCK) 
				LEFT JOIN @Consumers CM ON CS.ConsumerID=CM.ConsumerID
				WHERE (@CityID IS NULL OR CS.CityID=@CityID) 
					AND (@GenderID IS NULL OR CS.Gender = @GenderID)
					AND (@AgeGroupID IS NULL OR CS.AgeGroupID=@AgeGroupID)
					AND CS.ConsumerID NOT IN (SELECT ConsumerID FROM @Consumers)
		GROUP BY CM.EServiceID 

		SET @ErrorMessage =''
	 COMMIT TRANSACTION TRN_GetBarcodes
	END TRY
	BEGIN CATCH									
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);			
	END CATCH

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[SearchVoucherEntities]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SearchVoucherEntities]
 @ConsumerID INTEGER 
,@LanguageID INTEGER = 1
,@EVoucherBundleEligibilityForConsumersID INTEGER =NULL
,@SearchString NVARCHAR(200)
,@PageNumber INTEGER
,@PageSize INTEGER
,@TotalCategoryRecords INTEGER OUTPUT
,@TotalCorporateRecords INTEGER OUTPUT
,@TotalVoucherRecords INTEGER OUTPUT

AS

BEGIN
 
 DECLARE @FirstRecord INTEGER
 DECLARE @LastRecord INTEGER

 SET @FirstRecord = (@PageNumber - 1) * @PageSize
 SET @LastRecord = (@PageNumber * @PageSize + 1)

 
--Get Categories
DECLARE @ResultTableCategories AS TABLE
(
[Id] INTEGER Identity (1,1),
[EVoucherCategoryID] INTEGER,
[CategoryName] NVARCHAR(200),
[ImageFile] NVARCHAR(200),
[VoucherTypeCount] INTEGER
)

INSERT INTO @ResultTableCategories

SELECT MAX(EVC.EVoucherCategoryID) [EVoucherCategoryID],MAX(ECVL.ResourceValue) as CategoryName, MAX(EVC.ImageFile) [ImageFile], COUNT(*) [VoucherTypeCount] FROM coc_EVoucherBundleQRCode VQR (NOLOCK)

INNER JOIN coc_EVoucherBundleEligibilityForConsumers VE(NOLOCK) ON VQR.EVoucherBundleQRCodeID=VE.EVoucherBundleQRCodeID 
INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVBD.CorporateID = VQR.CorporateID
INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID 
INNER JOIN coc_EVoucher EV(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID and EV.IsActive = 1
INNER JOIN coc_EVoucherLanguages EVL(NOLOCK) ON EVL.EVoucherID = EV.EVoucherID AND EVL.LanguageID = @LanguageID AND EVL.ResourceKey = 'VoucherName'
INNER JOIN coc_EVoucherCategory EVC(NOLOCK) ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID 
INNER JOIN coc_EVoucherCategoryLanguages ECVL(NOLOCK) ON ECVL.eVoucherCategoryID = EVC.eVoucherCategoryID
WHERE  VE.ConsumerID =@ConsumerID AND (@EVoucherBundleEligibilityForConsumersID  IS NULL OR VE.EVoucherBundleEligibilityForConsumersID=@EVoucherBundleEligibilityForConsumersID)
AND ECVL.ResourceValue like '%' + @SearchString + '%'
GROUP BY EVC.eVoucherCategoryID
ORDER BY EVC.EVoucherCategoryID
END

SELECT @TotalCategoryRecords = Count(*) FROM @ResultTableCategories

SELECT EVoucherCategoryID, CategoryName,ImageFile,VoucherTypeCount FROM @ResultTableCategories WHERE ID BETWEEN @FirstRecord AND @LastRecord


--Get Corporpates

DECLARE @ResultTableCorporates AS TABLE
(
[Id] INTEGER Identity (1,1),
[EVoucherCategoryID] INTEGER,
[CorporateID] INTEGER,
[CorporateName] NVARCHAR(200),
[ImageFile] NVARCHAR (200),
[VoucherTypeCount] INTEGER
)

INSERT INTO @ResultTableCorporates 

SELECT MAX(EVC.eVoucherCategoryID) [EVoucherCategoryID],  MAX(C.CorporateID) [CorporateID] , MAX(C.CorporateName) [CorporateName], MAX(C.LogoFile) [ImageFile], Count(*) [VoucherTypeCount] FROM coc_EVoucherBundleQRCode VQR(NOLOCK)

INNER JOIN coc_EVoucherBundleEligibilityForConsumers VE(NOLOCK) ON VQR.EVoucherBundleQRCodeID=VE.EVoucherBundleQRCodeID 
INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVBD.CorporateID = VQR.CorporateID
INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID 
INNER JOIN coc_EVoucher EV(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID and EV.IsActive = 1
INNER JOIN coc_EServices S (NOLOCK) ON S.EServiceID = EV.EServiceID
INNER JOIN coc_Corporates C(NOLOCK) ON C.CorporateID  = S.CorporateID 
INNER JOIN coc_EVoucherCategory EVC ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID
WHERE  VE.ConsumerID =@ConsumerID AND 
		(@EVoucherBundleEligibilityForConsumersID  IS NULL OR VE.EVoucherBundleEligibilityForConsumersID=@EVoucherBundleEligibilityForConsumersID) AND 
		C.CorporateName  like '%' + @SearchString + '%'
GROUP BY C.CorporateID 
ORDER BY C.CorporateID 

SELECT @TotalCorporateRecords = Count(*) FROM @ResultTableCorporates

SELECT CorporateID, CorporateName, EVoucherCategoryID, ImageFile, VoucherTypeCount FROM @ResultTableCorporates WHERE ID BETWEEN @FirstRecord AND @LastRecord


DECLARE @ResultTableVouchers AS TABLE
(
[Id] INTEGER Identity (1,1),
[EVoucherID] INTEGER,
[VoucherName] NVARCHAR(200),
[VoucherDescription] NVARCHAR(1000),
[ImageFile] NVARCHAR (200),
[EligibleNoOfVouchers] INTEGER
)

INSERT INTO @ResultTableVouchers

SELECT EV.EVoucherID, EVL.ResourceValue [VoucherName] , EVL2.ResourceValue [VoucherDescription], EV.ImageFile, VE.EligibleNoOfVouchers FROM coc_EVoucherBundleQRCode VQR(NOLOCK)

INNER JOIN coc_EVoucherBundleEligibilityForConsumers VE(NOLOCK) ON VQR.EVoucherBundleQRCodeID=VE.EVoucherBundleQRCodeID 
INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVBD.CorporateID = VQR.CorporateID
INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID 
INNER JOIN coc_EVoucher EV(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID and EV.IsActive = 1
LEFT OUTER JOIN coc_EVoucherLanguages EVL(NOLOCK) ON EVL.EVoucherID = EV.EVoucherID AND EVL.LanguageID = @LanguageID AND EVL.ResourceKey = 'VoucherName'
LEFT OUTER JOIN coc_EVoucherLanguages EVL2(NOLOCK) ON EVL2.EVoucherID = EV.EVoucherID AND EVL.LanguageID = @LanguageID AND EVL.ResourceKey = 'VoucherDescription'

WHERE VE.ConsumerID =@ConsumerID AND 
VE.EVoucherBundleEligibilityForConsumersID=@EVoucherBundleEligibilityForConsumersID AND 
(EVL.ResourceValue like '%' + @SearchString  + '%' OR EVL2.ResourceValue like '%' + @SearchString  + '%')

SELECT @TotalVoucherRecords = Count(*) FROM @ResultTableVouchers

SELECT [EVoucherID],[VoucherName],[VoucherDescription],[ImageFile],[EligibleNoOfVouchers] FROM @ResultTableVouchers WHERE ID BETWEEN @FirstRecord AND @LastRecord
GO
/****** Object:  StoredProcedure [dbo].[SendEVoucher]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SendEVoucher]
	@ConsumerName [NullName],
	@MobileNo [Mobile],
	@ConsumerID INTEGER,
	@CorporateID INTEGER,
	@VoucherDate DATETIME,
	@Barcode [NullDescription] OUTPUT,
	@ErrorMessage [Remark] OUTPUT 
AS 
SET NOCOUNT ON 
	DECLARE @EmailID [Email]
	DECLARE @NotificationID INTEGER
	DECLARE @EServiceBarcodeID INTEGER
	SET @ErrorMessage = ''
	BEGIN TRY
		SELECT TOP 1 @NotificationID=NF.NotificationID 
			FROM coc_NotificationSends(NOLOCK) NS
				INNER JOIN coc_Notifications (NOLOCK) NF ON NS.NotificationID=NF.NotificationID AND NotificationSend>0
				INNER JOIN coc_EServices (NOLOCK) ES ON NF.EServiceID=ES.EServiceID AND ServiceSubTypeID=63 AND ES.CorporateID=@CorporateID
		ORDER BY NF.NotificationID  DESC

		SELECT TOP 1 @EServiceBarcodeID=EServiceBarcodeID 
			FROM coc_EServiceBarcodes (NOLOCK) 
		WHERE NotificationID=@NotificationID AND ConsumerID IS NULL 
		ORDER BY EServiceBarcodeID DESC 

		IF(ISNULL(@ConsumerID,0)>0)
		BEGIN
			SELECT @MobileNo=PrimaryMobile,@EmailID=EmailID FROM coc_Consumers(NOLOCK)  WHERE ConsumerID=@ConsumerID
		
			UPDATE coc_EServiceBarcodes
				SET AsignedMoile = @MobileNo,
					AsignedEmailID =@EmailID,
					ConsumerID=@ConsumerID,
					UsedDate=GETDATE()
			WHERE EServiceBarcodeID=@EServiceBarcodeID
		END
		ELSE BEGIN
			INSERT INTO coc_GuestParticipations(GuestName,Mobile,ParticipationDate)
					SELECT @ConsumerName,@MobileNo,GETDATE()
				SET @ErrorMessage = SCOPE_IDENTITY()

			UPDATE coc_EServiceBarcodes
				SET AsignedMoile = @MobileNo,
					AsignedEmailID =@EmailID,
					UsedDate=GETDATE() 
			WHERE EServiceBarcodeID=@EServiceBarcodeID
		END
		SELECT @Barcode=Barcode FROM coc_EServiceBarcodes(NOLOCK) WHERE EServiceBarcodeID=@EServiceBarcodeID
	END TRY
	BEGIN CATCH									
		SELECT @ErrorMessage=ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);			
	END CATCH
SET NOCOUNT OFF







GO
/****** Object:  StoredProcedure [dbo].[SendResultNotification]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SendResultNotification]
	@EServiceID INTEGER,
	--@winnerXml XML,
	@UserID INTEGER=NULL,
	@ECouponDrawPrizeID INTEGER,
	@ConsumerID INTEGER,
	@TypeID TINYINT,
	@ConsumerName NVARCHAR(200),
	@Email NVARCHAR(200),
	@MembershipID NVARCHAR(20),
	@ReturnValue [Remark]=NULL OUTPUT
AS
SET NOCOUNT ON 
	BEGIN TRY 
		DECLARE @NotificationID	INTEGER
		DECLARE @Counter INTEGER
		DECLARE @LanguageCounter INTEGER
		DECLARE @NotificationSendID INTEGER
		DECLARE @Subject [Remark]
		DECLARE @Details [Remark]
		DECLARE @ECouponID INTEGER
		DECLARE @TotalPrizes INTEGER
		DECLARE @WinnerCount INTEGER

		DECLARE @Winners AS TABLE
		(
			UniqueID INTEGER IDENTITY(1,1),
			ConsumerID INTEGER,			
			TypeID TINYINT,
			ConsumerName NVARCHAR(200),			
			Email NVARCHAR(200),
			MembershipID NVARCHAR(20)
		)
		
		SELECT @ECouponID=ECouponID,@WinnerCount=WinnerCount FROM coc_ECoupons(NOLOCK) WHERE EServiceID=@EServiceID

		INSERT  INTO @Winners (ConsumerID, TypeID, ConsumerName, Email, MembershipID ) 
			Values(@ConsumerID,@TypeID, @ConsumerName,@Email, @MembershipID)

		--INSERT INTO @Winners
		--	SELECT  CorporateUser.value('(ConsumerID[1])', 'INTEGER'),					
		--			CorporateUser.value('(TypeID[1])', 'TINYINT'),
		--			CorporateUser.value('(ConsumerName[1])', 'NVARCHAR(200)'),
		--			CorporateUser.value('(Email[1])', 'NVARCHAR(200)')
		--		FROM @winnerXml.nodes('/XML/Row') AS Data(CorporateUser)
		
		SELECT @Counter=COUNT(UniqueID) FROM @Winners
		SELECT @NotificationID=NotificationID FROM coc_Notifications(NOLOCK) WHERE EServiceID=@EServiceID

		INSERT INTO coc_NotificationSends(NotificationID,SendingDate,SendingType,SearchCount,NotificationCount)
			SELECT @NotificationID,GETDATE(),1,2,@Counter
		SET @NotificationSendID=SCOPE_IDENTITY()

		SELECT @LanguageCounter=MIN(LanguageID) FROM coc_Languages(NOLOCK) 
		
		WHILE(@LanguageCounter IS NOT NULL)
		BEGIN
			SELECT @Subject=TemplateTitle,@Details=Template 
				FROM coc_GeneralNotificationTemplates EN(NOLOCK) 
					INNER JOIN coc_GeneralNotificationTemplateLanguages ET(NOLOCK) ON EN.GeneralNotificationTemplateID=ET.GeneralNotificationTemplateID
				WHERE TemplateTypeID=141 AND NotificatonUsage=1 AND LanguageID=@LanguageCounter

			INSERT INTO coc_NotificationSendLanguages(NotificationSendID,LanguageID,Subject,Message)
				SELECT @NotificationSendID,@LanguageCounter,@Subject,@Details

			SELECT @LanguageCounter=MIN(LanguageID) FROM coc_Languages(NOLOCK) WHERE LanguageID>@LanguageCounter
		END 
	
		IF(@NotificationSendID IS NOT NULL)
		BEGIN
			SELECT @Counter=MIN(ConsumerID) FROM @Winners WHERE TypeID=2
			WHILE(@Counter IS NOT NULL)
			BEGIN 
				INSERT INTO coc_ConsumerNotifications(NotificationSendID,ConsumerID,SendDate,HasChecked)
					SELECT @NotificationSendID,@Counter,GETDATE(),0
				
				--INSERT INTO coc_ECouponWinners ([ECouponPrizeID], [MobileNumber], [ConsumerID], [PrizeHeader],
				--			[PrizeDetail], [ImageFile], [ECouponDrawPrizeID], [ConsumerName], [Email], [ConsumerType], [MembershipID])
				--	SELECT EP.ECouponPrizeID,CS.PrimaryMobile,WN.ConsumerID,EP.PrizeHeader,EP.PrizeDetail,EP.ImageFile, 
				--			@ECouponDrawPrizeID,WN.ConsumerName,WN.Email,WN.TypeID, WN.MembershipID
				--		FROM @Winners WN
				--			INNER JOIN coc_Consumers CS(NOLOCK) ON WN.ConsumerID=CS.ConsumerID
				--			INNER JOIN coc_ECouponDrawPrizes edp ON edp.ECouponDrawPrizeID = @ECouponDrawPrizeID
				--			INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponPrizeID=edp.ECouponPrizeID AND EP.ECouponID=@ECouponID
				--	WHERE WN.ConsumerID=@Counter
				SELECT @Counter=MIN(ConsumerID) FROM @Winners WHERE ConsumerID>@Counter AND TypeID=2
			END 
		END

		--INSERT INTO coc_ECouponWinners ([ECouponPrizeID], [MobileNumber], [ConsumerID], [PrizeHeader],
		--					[PrizeDetail], [ImageFile], [ECouponDrawPrizeID], [ConsumerName], [Email], [ConsumerType], [MembershipID])
		--	SELECT EP.ECouponPrizeID,CS.Mobile,NULL,EP.PrizeHeader,EP.PrizeDetail,EP.ImageFile, @ECouponDrawPrizeID,WN.ConsumerName,WN.Email,WN.TypeID, WN.MembershipID
		--		FROM @Winners WN
		--			INNER JOIN coc_GuestParticipations CS(NOLOCK) ON WN.ConsumerID=CS.GuestParticipationID
		--			INNER JOIN coc_ECouponDrawPrizes edp ON edp.ECouponDrawPrizeID = @ECouponDrawPrizeID
		--			INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponPrizeID=edp.ECouponPrizeID AND EP.ECouponID=@ECouponID
		--	WHERE WN.TypeID=1

		--Need to comment for Multiple Winners
		
		--SELECT @TotalPrizes=COUNT(ISNULL(EP.ECouponPrizeID,0)) FROM coc_ECouponPrizes EP(NOLOCK) 
		--	INNER JOIN coc_ECouponWinners ES(NOLOCK) ON EP.ECouponPrizeID=ES.ECouponPrizeID
		-- WHERE EP.ECouponID=@ECouponID	
		--Need to comment for Multiple Winners
		--IF(@WinnerCount=@TotalPrizes)
		--BEGIN
		--	UPDATE coc_ECoupons
		--	SET ResulltDeclared =1,
		--		DeclaredDate=GETDATE(),
		--		DeclaredBy=@UserID
		--	WHERE EServiceID=@EServiceID
		--END
		--Need to comment for Multiple Winners
		SELECT @ReturnValue=''
	END TRY
	BEGIN CATCH									
		SELECT @ReturnValue=ERROR_MESSAGE()
		RAISERROR(@ReturnValue, 16, 1);			
	END CATCH
SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[SetEVoucherPrimaryImage]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ======================================================================
-- Author					:	Vikram
-- Create date				:	30-Nov-2017
-- Description				:	Set Primary Image from EVoucher Images
-- Updated date				:	04-Dec-2017	|	08-Dec-2017
-- Updated By				:	Vikram
-- ======================================================================
CREATE PROCEDURE [dbo].[SetEVoucherPrimaryImage]
	@EVoucherID					INTEGER,
	@EVoucherImageID			INTEGER,
	@ImageFile					VARCHAR(200),
	@IsPrimaryImage				INTEGER,
	@UserID						INTEGER
AS
BEGIN
	SET NOCOUNT ON;

		DECLARE		@ImageID	INTEGER
		DECLARE		@ImageCount	INTEGER

		BEGIN

			IF (@EVoucherImageID	<>	0 )
				BEGIN

				-- added by Arya [17-01-2018]
				UPDATE	coc_EVoucherImages	SET
						ImageFile				=	@ImageFile 
					WHERE
						EVoucherImagesID		=	@EVoucherImageID	

				-----------------//

					SELECT
						@ImageCount				=	COUNT(EVoucherImagesID) 
					FROM
						coc_EVoucherImages (NOLOCK)
					WHERE
						EVoucherID				=	@EVoucherID

					IF(@ImageCount <= 1 )
						BEGIN
							SET	@IsPrimaryImage	=	1
						END

					IF(@IsPrimaryImage			=	0 )
						BEGIN
							SELECT
								@ImageID		=	MAX(EVoucherImagesID)
							FROM
								coc_EVoucherImages (NOLOCK) WHERE EVoucherID = @EVoucherID
						END
					ELSE
						BEGIN
							SET @ImageID = @EVoucherImageID
						END


					UPDATE	coc_EVoucherImages	SET
						IsPrimaryImage			=	1,
						EditedUserID			=	@UserID,
						EditDate				=	GETDATE()
					WHERE
						EVoucherImagesID		=	@ImageID														

					UPDATE	coc_EVoucherImages	SET
						IsPrimaryImage			=	0,
						EditedUserID			=	@UserID,
						EditDate				=	GETDATE()
					WHERE
						EVoucherImagesID		<>	@ImageID	AND
						EVoucherID				=	@EVoucherID

				END	
			
			ELSE

				BEGIN

					SELECT
						@ImageCount				=	COUNT(EVoucherImagesID) 
					FROM
						coc_EVoucherImages(NOLOCK)
					WHERE
						EVoucherID				=	@EVoucherID

					IF(@ImageCount = 0 )
						BEGIN
							SET	@IsPrimaryImage	=	1
						END

					INSERT INTO	coc_EVoucherImages (EVoucherID, ImageFile, AddDate, CreatedUserID, IsPrimaryImage)
					VALUES	(@EVoucherID, @ImageFile, GETDATE(), @UserID, @IsPrimaryImage)

					SET @ImageID	=	SCOPE_IDENTITY()
					
					IF(@IsPrimaryImage	=	1	)

						BEGIN

							UPDATE	coc_EVoucherImages	SET
								IsPrimaryImage			=	0,
								EditedUserID			=	@UserID,
								EditDate				=	GETDATE()
							WHERE
								EVoucherImagesID		<>	@ImageID	AND
								EVoucherID				=	@EVoucherID
						END
				END
		END


END
GO
/****** Object:  StoredProcedure [dbo].[ShowAdminUser]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 CREATE PROCEDURE [dbo].[ShowAdminUser]
	@CurrentPage INTEGER,
	@PageSize INTEGER=0,
	@LanguageID  INTEGER=1,
	@MobileNumber [Name]=NULL,
	@Name [NullName]=NULL,
	@Role [NullName]=NULL,
	@HelpView BIT=NULL,
	@IsActive BIT=NULL,
	@UserName [NullName]=NULL,
	@UserID INTEGER=NULL,
	@TotalRecords INTEGER OUTPUT

AS
	SET NOCOUNT ON
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		SET @FirstRecord = (@CurrentPage - 1) * @PageSize
		SET @LastRecord = (@CurrentPage * @PageSize + 1)
		DECLARE @AdminUser TABLE
		(
			ClientId INTEGER IDENTITY PRIMARY KEY,
			UniqueID INTEGER,
			UserName [NullName],
			MobileNumber [Mobile],
			[Role] NVARCHAR(55),
			IsActive BIT 
		)
	
		INSERT INTO @AdminUser(UniqueID,UserName,MobileNumber,[Role],IsActive)
			SELECT US.UserID,US.UserName,US.MobileNumber,UR.[Role],UR.IsActive FROM coc_Users(NOLOCK) US
					LEFT JOIN coc_UserRole UR (NOLOCK) ON UR.RoleID=US.RoleID --AND UR.RoleID=1 AND UR.RoleID=2
				WHERE (US.RoleID=1 OR US.RoleID=2) AND
					  (@UserName IS NULL OR US.UserName LIKE '%'+ @UserName + '%') AND	
					  (@MobileNumber IS NULL OR US.MobileNumber LIKE '%'+ @MobileNumber + '%') AND
					  (@Role IS NULL OR UR.[Role] LIKE '%'+ @Role + '%') AND
					  (@IsActive IS NULL OR US.IsActive=@IsActive) ORDER BY US.UserID DESC
		IF ISNULL(@HelpView,0)=0
		BEGIN
			IF (@PageSize=0)BEGIN
					SELECT ClientId,UniqueID,UserName,MobileNumber,[Role],IsActive
						FROM @AdminUser
			END ELSE
				BEGIN
					SELECT ClientId,UniqueID,UserName,MobileNumber,[Role],IsActive
							FROM @AdminUser
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END		
		END	ELSE 
			BEGIN
				IF (@PageSize=0)BEGIN
					SELECT UniqueID,UserName,MobileNumber,[Role],IsActive
						FROM @AdminUser
				END ELSE
				BEGIN
					SELECT UniqueID,UserName,MobileNumber,[Role],IsActive
							FROM @AdminUser
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END
			END
		SELECT @TotalRecords=COUNT(ClientId) FROM @AdminUser
	SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[ShowAdvertisement]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowAdvertisement]     
 @CurrentPage INTEGER,      
 @PageSize INTEGER=0,       
 @LanguageID  INTEGER=1,      
 @AdvertisementID INTEGER=NULL,        
 @Name [NullName]=NULL,        
 @Duration INTEGER=NULL,       
 @Cost [Amount]=NULL,       
 @HelpView BIT=NULL,        
 @IsActive BIT=NULL,         
 @UserID INTEGER=NULL,      
 @AdvertisementDisplay NVARCHAR(6)=NULL,      
 @TotalRecords INTEGER OUTPUT   
 AS        
 SET NOCOUNT ON       
 DECLARE @FirstRecord INTEGER        
 DECLARE @LastRecord INTEGER        
 SET @FirstRecord = (@CurrentPage - 1) * @PageSize        
 SET @LastRecord = (@CurrentPage * @PageSize + 1)        
      
 DECLARE @Advertisements TABLE        
 (        
  ClientId INTEGER IDENTITY PRIMARY KEY,        
  UniqueID INTEGER,        
  Name [NullName],      
  Duration INTEGER,         
  Cost [Amount],      
  SiteLocation NVARCHAR(125) NULL,      
  DisplayType NVARCHAR(125) NULL,      
  AdvertisementDisplay NVARCHAR(6),      
  IsActive BIT      
 )        
       
 INSERT INTO @Advertisements(UniqueID,Name,Duration,Cost,SiteLocation,DisplayType,AdvertisementDisplay,IsActive)        
  SELECT AD.AdvertisementID,AD.AdvertisementName,AD.Duration,AD.Cost,EV.BaseValue,CASE ad.DisplayTypeID WHEN 1 THEN 'Permanent' ELSE 'Random' END,      
  CASE AD.TargetPlateform WHEN 1 THEN 'Mobile' WHEN 2 THEN 'Web'ELSE 'Both' END,AD.IsActive      
   FROM coc_Advertisements (NOLOCK) AD       
    LEFT JOIN coc_EnumValues(NOLOCK) EV ON EV.EnumValueID=AD.PositionID      
   WHERE (@AdvertisementID IS NULL OR AdvertisementID=@AdvertisementID) AND        
    (@Duration IS NULL OR Duration=@Duration) AND        
    --(@AdvertisementDisplay IS NULL OR AD.TargetPlateform=@AdvertisementDisplay) AND        
    (@IsActive IS NULL OR AD.IsActive=@IsActive) AND        
    (@Name IS NULL OR AdvertisementName LIKE +'%'+@Name+'%') AND --OR ArabicName=@Name OR UrduName=@Name      
    (@Cost IS NULL OR Cost=@Cost) -- AND IsActive=1      
   ORDER BY  AD.IsActive  desc ,AD.AdvertisementID desc
 IF ISNULL(@HelpView,0)=0      
 BEGIN      
  IF (@PageSize=0)BEGIN        
   SELECT ClientId,UniqueID,Name,Duration,FORMAT(Cost,'N2') Cost,SiteLocation,DisplayType,AdvertisementDisplay,IsActive      
    FROM @Advertisements        
   WHERE (@AdvertisementDisplay IS NULL OR AdvertisementDisplay LIKE '%'+@AdvertisementDisplay+'%')    
   ORDER BY  IsActive desc  ,UniqueID desc     
  END ELSE        
  BEGIN        
   SELECT ClientId,UniqueID,Name,Duration,FORMAT(Cost,'N2') Cost,SiteLocation,DisplayType,AdvertisementDisplay,IsActive      
    FROM @Advertisements        
   WHERE (ClientId > @FirstRecord AND ClientId < @LastRecord) AND (@AdvertisementDisplay IS NULL OR AdvertisementDisplay LIKE '%'+@AdvertisementDisplay+'%')      
  ORDER BY   IsActive desc  ,UniqueID desc       
  END      
 END      
 ELSE BEGIN      
  IF (@PageSize=0)BEGIN        
   SELECT UniqueID,Name,Duration,FORMAT(Cost,'N2') Cost,SiteLocation,DisplayType,AdvertisementDisplay,IsActive       
    FROM @Advertisements        
   WHERE (@AdvertisementDisplay IS NULL OR AdvertisementDisplay LIKE '%'+@AdvertisementDisplay+'%')     
   ORDER BY   IsActive desc  ,UniqueID desc          
  END ELSE        
  BEGIN        
   SELECT UniqueID,Name,Duration,FORMAT(Cost,'N2') Cost,SiteLocation,DisplayType,AdvertisementDisplay,IsActive          
    FROM @Advertisements        
   WHERE (ClientId > @FirstRecord AND ClientId < @LastRecord) AND (@AdvertisementDisplay IS NULL OR AdvertisementDisplay LIKE '%'+@AdvertisementDisplay+'%')       
  ORDER BY  IsActive desc  ,UniqueID desc         
  END      
 END      
 SELECT @TotalRecords=COUNT(ClientId) FROM @Advertisements WHERE (@AdvertisementDisplay IS NULL OR AdvertisementDisplay LIKE '%'+@AdvertisementDisplay+'%')        
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[ShowAssignMenu]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowAssignMenu] 
	@UserID INTEGER,
	@LanguageID INTEGER
AS
	SET NOCOUNT ON

		SELECT MN.MenuID,MN.RootID,MN.MenuCode,ML.Menu,MN.ParentID,
			MN.TargetURL,MN.MenuCode [ControlPath],MN.IconTag,ISNULL(MN.IsActive,0) [IsActive]
			FROM [coc_Menus] MN(NOLOCK)
				INNER JOIN [coc_MenuLanguages] ML(NOLOCK) ON MN.MenuID=ML.MenuID AND ML.LanguageID =@LanguageID
				INNER JOIN [coc_RoleMenuAccess] RA(NOLOCK) ON RA.MenuID = MN.MenuID 
				INNER JOIN [coc_Users] UR (NOLOCK) ON RA.RoleID=UR.RoleID AND UR.UserID=@UserID
			WHERE ISNULL(MN.IsActive,0)=1 AND
				ISNULL(RA.IsAccessible,0)=1
			ORDER BY ParentID,SortOrder

	SET NOCOUNT OFF




GO
/****** Object:  StoredProcedure [dbo].[ShowCity]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowCity]
	@CurrentPage INTEGER,
	@PageSize INTEGER=0,
	@LanguageID  INTEGER=1,
	@CityID INTEGER=NULL,
	@CountryID INTEGER=NULL,	
	@City Description=NULL, 
	@Country Description=NULL, 
	@HelpView BIT=NULL,
	@IsActive BIT=NULL,
	@UserID INTEGER=NULL,
	@TotalRecords INTEGER OUTPUT

AS
	SET NOCOUNT ON
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		--DECLARE @LanguageID INTEGER 
		SET @FirstRecord = (@CurrentPage - 1) * @PageSize
		SET @LastRecord = (@CurrentPage * @PageSize + 1)
	--	SELECT @LanguageID =LanguageID FROM coc_Languages(NOLOCK) WHERE IsDefaultLanguage=1

		DECLARE @coc_Cities TABLE
		(
			ClientId INTEGER IDENTITY PRIMARY KEY,
			UniqueID INTEGER,
			CountryID INTEGER,
			City [Description],
			Country[Description],
			IsActive BIT
		)  

		INSERT INTO @coc_Cities(UniqueID,CountryID,City,Country,IsActive )
			SELECT CT.CityID,CT.CountryID,CL.City,CC.Country,IsActive 
				FROM coc_Cities CT(NOLOCK)
					INNER JOIN coc_CityLanguages CL(NOLOCK) ON CT.CityID=CL.CityID AND CL.LanguageID = @LanguageID  
					INNER JOIN coc_CountryLanguages CC(NOLOCK) ON CC.CountryID=CT.CountryID AND CC.LanguageID = @LanguageID  
				WHERE (@CityID IS NULL OR CT.CityID=@CityID) AND
					(@CountryID IS NULL OR CT.CountryID =@CountryID) AND 
					(@City IS NULL OR CL.City LIKE '%' +@City+'%') AND 
					(@Country IS NULL OR Cc.Country LIKE '%' +@Country+'%') AND 
					(@IsActive IS NULL OR IsActive=@IsActive) ORDER BY CT.CityID DESC

		IF ISNULL(@HelpView,0)=0
		BEGIN
			IF (@PageSize=0)BEGIN
					SELECT ClientId,UniqueID,CountryID,City,Country,IsActive
						FROM @coc_Cities
			END ELSE
				BEGIN
					SELECT ClientId,UniqueID,CountryID,City,Country,IsActive
							FROM @coc_Cities
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END		
		END	ELSE 
			BEGIN
				IF (@PageSize=0)BEGIN
					SELECT UniqueID,CountryID,City,Country
						FROM @coc_Cities
				END ELSE
				BEGIN
					SELECT UniqueID,CountryID,City,Country
							FROM @coc_Cities
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END
			END
		SELECT @TotalRecords=COUNT(ClientId) FROM @coc_Cities
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[ShowConsumers]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowConsumers]
	@CurrentPage INTEGER,
	@PageSize INTEGER=0,
	@LanguageID  INTEGER=1,
	@ConsumerID INTEGER=NULL,
	@FirstName [Code]=NULL,
	@PrimaryMobile [Mobile]=NULL,
	@EmailID [Email]=NULL, 
	@HelpView BIT=NULL,
	@IsActive BIT=NULL,
	@UserID INTEGER=NULL, 
	@TotalRecords INTEGER OUTPUT

AS
	SET NOCOUNT ON
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		SET @FirstRecord = (@CurrentPage - 1) * @PageSize
		SET @LastRecord = (@CurrentPage * @PageSize + 1)
		DECLARE @Consumers TABLE
		(
			ClientId INTEGER IDENTITY PRIMARY KEY,
			UniqueID INTEGER,
			FirstName NVARCHAR(50),
			Gender NVARCHAR(50),
			PrimaryMobile NVARCHAR(100),
			EmailID NVARCHAR(100),
			IsActive BIT
		)

		INSERT INTO @Consumers(UniqueID,FirstName,Gender,PrimaryMobile,CS.EmailID,IsActive )
			SELECT ConsumerID,FirstName,CASE WHEN Gender=1 THEN 'Male' ELSE 'Female' END,PrimaryMobile,CS.EmailID,CS.IsActive
				FROM COC_Consumers CS (NOLOCK)
						inner join coc_Users US (NOLOCK) On CS.UserID = US.UserID 
					WHERE (@ConsumerID IS NULL OR ConsumerID=@ConsumerID) AND
						(@FirstName IS NULL OR FirstName LIKE +'%'+@FirstName+'%') AND
						(@PrimaryMobile IS NULL OR PrimaryMobile LIKE +'%'+@PrimaryMobile+'%') AND
						(@EmailID IS NULL OR CS.EmailID LIKE +'%'+@EmailID+'%') AND
						(@IsActive IS NULL OR CS.IsActive=@IsActive) ORDER BY CountryID DESC
		IF ISNULL(@HelpView,0)=0
		BEGIN
			IF (@PageSize=0)BEGIN
					SELECT ClientId,UniqueID,FirstName,Gender,PrimaryMobile,EmailID,IsActive
						FROM @Consumers
			END ELSE
				BEGIN
					SELECT ClientId,UniqueID,FirstName,Gender,PrimaryMobile,EmailID,IsActive
							FROM @Consumers
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END		
		END	ELSE 
			BEGIN
				IF (@PageSize=0)BEGIN
					SELECT UniqueID,FirstName,Gender,PrimaryMobile,EmailID
						FROM @Consumers
				END ELSE
				BEGIN
					SELECT UniqueID,FirstName,Gender,PrimaryMobile,EmailID
							FROM @Consumers
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END
			END
		SELECT @TotalRecords=COUNT(ClientId) FROM @Consumers
	SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[ShowCorporateUser]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ShowCorporateUser]
	@CurrentPage INTEGER,
	@PageSize INTEGER=0,
	@LanguageID  INTEGER,
	@CorporateUserID INTEGER=NULL,
	@UserName [Name]=NULL,
	@EmailID [Email]=NULL,
	@MobileNumber [Mobile]=NULL,
	@HelpView BIT=NULL,
	@IsActive BIT=NULL,
	@UserID INTEGER=NULL,
	@RetailOutlet [Description]=NULL,
	@CorporateName [Description]=NULL,
	@TotalRecords INTEGER OUTPUT

AS
	SET NOCOUNT ON
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		DECLARE @RoleID INTEGER
		DECLARE @CorporateID INTEGER

		SELECT @RoleID =RoleID FROM coc_Users(NOLOCK) WHERE UserID =@UserID
		SELECT @CorporateID=CorporateID FROM coc_Corporates (NOLOCK) WHERE UserID =@UserID
		SELECT @LanguageID =LanguageID FROM coc_Languages(NOLOCK) WHERE IsDefaultLanguage=1

		SET @FirstRecord = (@CurrentPage - 1) * @PageSize
		SET @LastRecord = (@CurrentPage * @PageSize + 1)

		DECLARE @coc_CorporateUser TABLE
		(
			ClientId INTEGER IDENTITY PRIMARY KEY,
			UniqueID INTEGER,
			UserName NVARCHAR(50),
			EmailID NVARCHAR(100),
			MobileNumber NVARCHAR(100),
			CorporateName [Description],
			RetailOutlet [Description],
			IsActive BIT
		)

		INSERT INTO @coc_CorporateUser(UniqueID,UserName,EmailID,MobileNumber,IsActive,CorporateName,RetailOutlet )
			SELECT CS.CorporateUserID,CS.EmployeeName,CS.EmailID,CS.MobileNumber,CS.IsActive,CU.CRNumber,RL.RetailOutlet
			FROM coc_CorporateUsers CS(NOLOCK)
			INNER JOIN coc_Corporates CU (NOLOCK) ON CU.CorporateID=CS.CorporateID
			INNER JOIN coc_RetailOutletLanguages RL(NOLOCK) ON RL.RetailOutletID=CS.RetailOutletID
				WHERE (@CorporateUserID IS NULL OR CorporateUserID=@CorporateUserID) AND
					(@UserName IS NULL OR EmployeeName LIKE +'%'+@UserName+'%') AND
					(@EmailID IS NULL OR CS.EmailID LIKE +'%'+@EmailID+'%') AND
					(@MobileNumber IS NULL OR CS.MobileNumber LIKE +'%'+@MobileNumber+'%') AND
					(@RetailOutlet IS NULL OR RL.RetailOutletID LIKE +'%'+@RetailOutlet+'%') AND
					(@CorporateName IS NULL OR CU.CorporateID LIKE +'%'+@CorporateName+'%') AND
					(@IsActive IS NULL OR CS.IsActive=@IsActive)AND
					CS.CorporateID = CASE WHEN @RoleID=1 THEN CS.CorporateID ELSE @CorporateID END AND RL.LanguageID=@LanguageID
				 ORDER BY CorporateUserID DESC
		IF ISNULL(@HelpView,0)=0
		BEGIN
			IF (@PageSize=0)BEGIN
					SELECT ClientId,UniqueID,UserName,EmailID,MobileNumber,IsActive,CorporateName,RetailOutlet
						FROM @coc_CorporateUser
			END ELSE
				BEGIN
					SELECT ClientId,UniqueID,UserName,EmailID,MobileNumber,IsActive,CorporateName,RetailOutlet
							FROM @coc_CorporateUser
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END		
		END	ELSE 
			BEGIN
				IF (@PageSize=0)BEGIN
					SELECT UniqueID,UserName,EmailID,MobileNumber,IsActive,CorporateName,RetailOutlet
						FROM @coc_CorporateUser
				END ELSE
				BEGIN
					SELECT UniqueID,UserName,EmailID,MobileNumber,IsActive,CorporateName,RetailOutlet
							FROM @coc_CorporateUser
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END
			END
		SELECT @TotalRecords=COUNT(ClientId) FROM @coc_CorporateUser
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[ShowCorporateUserRegistration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ShowCorporateUserRegistration]
	@CurrentPage INTEGER,
	@PageSize  INTEGER=0,
	@LanguageID INTEGER,
	@CorporateID INTEGER=NULL,
	@FirstName [NullName]=NULL,
	@MobileNumber [Mobile]=NULL,
	@EmailID [Email]=NULL,
	@UserID INTEGER=NULL,
	@JCCICode [Code]=NULL,
	@CRNumber [NullCode]=NULL,
	@HelpView BIT=NULL,
	@IsActive BIT=NULL,
	@TotalRecords INTEGER OUTPUT

AS
	SET NOCOUNT ON
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		DECLARE @RoleID INTEGER
		DECLARE @CorporateRegisterID INTEGER

		SELECT @RoleID =RoleID From coc_Users(NOLOCK) WHERE UserID=@UserID
		SELECT @CorporateRegisterID =CorporateID From coc_Corporates(NOLOCK) WHERE UserID=@UserID
		SELECT @LanguageID =LanguageID FROM coc_Languages(NOLOCK) WHERE IsDefaultLanguage=1
		
		SET @FirstRecord = (@CurrentPage - 1) * @PageSize
		SET @LastRecord = (@CurrentPage * @PageSize + 1)

		DECLARE @coc_CorporateUserRegistration TABLE
		(
			CorporateUserRegisterID INTEGER IDENTITY(1,1),
			UniqueID INTEGER,
			FirstName NVARCHAR(200),
			EmailID NVARCHAR(100),
			MobileNumber NVARCHAR(100),
			JCCICode NVARCHAR(20),
			CRNumber NVARCHAR(15),
			IsActive BIT
		)

		INSERT INTO @coc_CorporateUserRegistration(UniqueID,FirstName,EmailID,MobileNumber,JCCICode,CRNumber,IsActive)
			SELECT CU.UserID,CU.UserName,CU.EmailID,CU.MobileNumber,CC.JCCICode,CC.CRNumber,CU.IsActive 
				FROM coc_Users CU(NOLOCK)
				INNER JOIN coc_Corporates CC (NOLOCK) ON  CU.UserID=CC.UserID
				WHERE(@CorporateID IS NULL OR CorporateID=@CorporateID) AND
					(@FirstName IS NULL OR CU.UserName LIKE +'%'+@FirstName+'%') AND
					(@MobileNumber IS NULL OR CU.MobileNumber LIKE + '%'+@MobileNumber+'%') AND
					(@JCCICode IS NULL OR CC.JCCICode LIKE + '%'+@JCCICode+'%') AND
					(@CRNumber IS NULL OR CC.CRNumber LIKE + '%'+@CRNumber+'%') AND
					(@EmailID IS NULL OR CU.EmailID LIKE + '%'+@EmailID+'%') AND
					(@IsActive IS NULL OR CU.IsActive=@IsActive)  
				ORDER BY CC.CorporateID DESC
			IF ISNULL(@HelpView,0)=0
			BEGIN
				IF (@PageSize=0)BEGIN 
					SELECT CorporateUserRegisterID,UniqueID,FirstName,EmailID,MobileNumber,JCCICode,CRNumber,IsActive 
							FROM @coc_CorporateUserRegistration
				END ELSE 
					BEGIN
						SELECT CorporateUserRegisterID,UniqueID,FirstName,EmailID,MobileNumber,JCCICode,CRNumber,IsActive 
							FROM @coc_CorporateUserRegistration
						WHERE CorporateUserRegisterID > @FirstRecord AND CorporateUserRegisterID < @LastRecord
					END
			END ELSE
				BEGIN
					IF (@PageSize=0)BEGIN
						SELECT UniqueID,FirstName,EmailID,MobileNumber,JCCICode,CRNumber,IsActive 
							FROM @coc_CorporateUserRegistration					
					END ELSE
					BEGIN
						SELECT CorporateUserRegisterID,UniqueID,FirstName,EmailID,MobileNumber,JCCICode,CRNumber,IsActive 
							FROM @coc_CorporateUserRegistration
						WHERE CorporateUserRegisterID > @FirstRecord AND CorporateUserRegisterID < @LastRecord
					END
				END
			SELECT @TotalRecords=COUNT(CorporateUserRegisterID) FROM @coc_CorporateUserRegistration
	SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[ShowCountries]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowCountries]
	@CurrentPage INTEGER,
	@PageSize INTEGER=0,
	@LanguageID  INTEGER=NULL,
	@CountryID INTEGER=NULL,
	@CountryCode [code]=NULL,
	@Country Description=NULL, 
	@HelpView BIT=NULL,
	@IsActive BIT=NULL,
	@UserID INTEGER=NULL,
	@TotalRecords INTEGER OUTPUT

AS
	SET NOCOUNT ON
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		--DECLARE @LanguageID INTEGER
		SET @FirstRecord = (@CurrentPage - 1) * @PageSize
		SET @LastRecord = (@CurrentPage * @PageSize + 1)
		--SELECT @LanguageID =LanguageID FROM coc_Languages(NOLOCK) WHERE IsDefaultLanguage=1

		DECLARE @coc_Countries TABLE
		(
			ClientId INTEGER IDENTITY PRIMARY KEY,
			UniqueID INTEGER, 
			CountryCode NVARCHAR(20),
			Country [Description],
			IsActive BIT
		)

		INSERT INTO @coc_Countries(UniqueID,CountryCode,Country,IsActive )
			SELECT CT.CountryID,CT.CountryCode,CL.Country,CT.IsActive 
			FROM coc_Countries CT(NOLOCK)
			INNER JOIN coc_CountryLanguages CL(NOLOCK) ON CT.CountryID=CL.CountryID AND CL.LanguageID = @LanguageID 
				WHERE (@CountryID IS NULL OR CT.CountryID=@CountryID) AND 
					(@CountryCode IS NULL OR CT.CountryCode LIKE +'%'+@CountryCode+'%') AND
					(@Country IS NULL OR CL.Country LIKE +'%'+@Country+'%') AND
					(@IsActive IS NULL OR IsActive=@IsActive) ORDER BY CT.CountryID DESC

		IF ISNULL(@HelpView,0)=0
		BEGIN
			IF (@PageSize=0)BEGIN
					SELECT UniqueID,CountryCode,Country,IsActive 
						FROM @coc_Countries
			END ELSE
				BEGIN
					SELECT UniqueID,CountryCode,Country,IsActive 
							FROM @coc_Countries
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END		
		END	ELSE 
			BEGIN
				IF (@PageSize=0)BEGIN
					SELECT UniqueID,CountryCode,Country
						FROM @coc_Countries
				END ELSE
				BEGIN
					SELECT UniqueID,CountryCode,Country
							FROM @coc_Countries
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END
			END
		SELECT @TotalRecords=COUNT(ClientId) FROM @coc_Countries
	SET NOCOUNT OFF





GO
/****** Object:  StoredProcedure [dbo].[ShowEBundleList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author					:	Vikram
-- Create date				:	01-Dec-2017
-- Description				:	Get List of EBundle
-- =============================================
CREATE PROCEDURE [dbo].[ShowEBundleList]	
	@CurrentPage			INTEGER,
	@PageSize				INTEGER			=	0,
	@LanguageID				INTEGER			=	1,
	@UserID					INTEGER,
	@TotalRecords			INTEGER OUTPUT,
	@BundleName				NVARCHAR(100)	=	NULL
AS
BEGIN
	SET NOCOUNT ON;

		BEGIN
			
			DECLARE @FirstRecord INTEGER
			DECLARE @LastRecord INTEGER


			SET @FirstRecord = (@CurrentPage - 1) * @PageSize+1
			SET @LastRecord = (@CurrentPage * @PageSize )

			;WITH BundleList AS
			( 
				SELECT
					coc_EBundle.EBundleID, coc_EBundleLanguages.ResourceValue AS BundleName, coc_EBundle.StartDate, coc_EBundle.EndDate, 
				   ROW_NUMBER() OVER
				   (ORDER BY coc_EBundle.EBundleID DESC) AS RowN
				FROM
					coc_EBundle (NOLOCK) INNER JOIN
					coc_EBundleLanguages (NOLOCK) ON coc_EBundle.EBundleID = coc_EBundleLanguages.EBundleID AND
					coc_EBundleLanguages.ResourceKey = 'BundleName' AND coc_EBundleLanguages.LanguageId	=	@LanguageID
				WHERE
					coc_EBundle.CreatedUserID			=	@UserID			AND 
					coc_EBundleLanguages.LanguageID		=	@LanguageID		AND
					(@BundleName IS NULL OR coc_EBundleLanguages.ResourceValue LIKE+'%'+@BundleName+'%')
			)

			SELECT EBundleID, EBundleID AS UniqueID, BundleName, StartDate, EndDate, RowN
			FROM
				BundleList
			WHERE
				RowN BETWEEN @FirstRecord AND @LastRecord
			ORDER BY 
				EBundleID DESC


		--		Tottal Records


		SELECT
				@TotalRecords	=	COUNT(coc_EBundle.EBundleID) 
			FROM
				coc_EBundle (NOLOCK) INNER JOIN
				coc_EBundleLanguages(NOLOCK) ON coc_EBundle.EBundleID = coc_EBundleLanguages.EBundleID AND
				coc_EBundleLanguages.ResourceKey = 'BundleName' AND coc_EBundleLanguages.LanguageId	=	@LanguageID
			WHERE
				coc_EBundle.CreatedUserID			=	@UserID			AND 
				coc_EBundleLanguages.LanguageID		=	@LanguageID		AND
				(@BundleName IS NULL OR coc_EBundleLanguages.ResourceValue LIKE+'%'+@BundleName+'%')


		END


END
GO
/****** Object:  StoredProcedure [dbo].[ShowECouponConfiguration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[ShowECouponConfiguration]
	@CurrentPage INTEGER,
	@PageSize INTEGER=0,
	@LanguageID  INTEGER=1,
	@UserID INTEGER,
	@TotalRecords INTEGER OUTPUT,

	@CompetitionName NVARCHAR(50)=null,
	@FromDate DATETIME=null,
	@ToDate DATETIME=null,
	@CometitionType NVARCHAR(50)=null
AS
SET NOCOUNT ON
DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		--DECLARE @RoleID INTEGER
		--DECLARE @CorporateID INTEGER

		SET @FirstRecord = ((@CurrentPage - 1) * @PageSize) + 1
		SET @LastRecord = (@CurrentPage * @PageSize)
BEGIN
	

	;WITH EcouponList AS
	(
		SELECT 
			es.EServiceID AS UniqueID,
			EService AS CompetitionName,
			FromDate,
			ToDate,
			EnumValue AS CompetitionType,
			es.EServiceID,			
			ROW_NUMBER() OVER
				(ORDER BY es.EServiceID desc) AS Rowc
		FROM coc_EServices es (NOLOCK)
			INNER JOIN coc_EnumValueLanguages enmvl(NOLOCK) on enmvl.EnumValueID=es.CompetitionID and enmvl.LanguageID=@LanguageID
			INNER JOIN coc_EServiceLanguages esl(NOLOCK) on esl.EServiceID=es.EServiceID and esl.LanguageID=@LanguageID

		WHERE(@CompetitionName is null or enmvl.EnumValue like+'%'+@CompetitionName+'%') and
			(@FromDate is null or es.FromDate=@FromDate) and 
			(@ToDate is null or es.ToDate=@ToDate) and 
			(@CometitionType is null or esl.EService like+'%'+@CometitionType+'%') and
			es.AddUserId = @UserID
		
	) 

SELECT 
	UniqueID,
	CompetitionName,
	FromDate,
	ToDate,
	CompetitionType,
	Rowc
	FROM EcouponList
	WHERE Rowc BETWEEN @FirstRecord AND @LastRecord


SELECT @TotalRecords=COUNT(es.EServiceID) 
		FROM coc_EServices es (NOLOCK)
			INNER JOIN coc_EnumValueLanguages enmvl(NOLOCK) on enmvl.EnumValueID=es.CompetitionID and enmvl.LanguageID=@LanguageID
			INNER JOIN coc_EServiceLanguages esl(NOLOCK) on esl.EServiceID=es.EServiceID and esl.LanguageID=@LanguageID

		WHERE(@CompetitionName is null or enmvl.EnumValue like+'%'+@CompetitionName+'%') and
			(@FromDate is null or es.FromDate=@FromDate) and 
			(@ToDate is null or es.ToDate=@ToDate) and 
			(@CometitionType is null or esl.EService like+'%'+@CometitionType+'%') AND
			es.AddUserId = @UserID

SET NOCOUNT OFF
END

GO
/****** Object:  StoredProcedure [dbo].[ShowECouponDownload]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowECouponDownload]
	@CurrentPage INTEGER,
	@PageSize INTEGER=0,
	@LanguageID  INTEGER=1,
	@BarcodePrintID INTEGER=NULL,
	@ECouponName NVARCHAR(50)=NULL,
	@ECouponAvailable INTEGER=NULL,
	@ECouponDownloaded INTEGER=NULL,
	@HelpView BIT=NULL,
	@IsActive BIT=NULL,
	@UserID INTEGER=NULL,
	@TotalRecords INTEGER OUTPUT

AS
	SET NOCOUNT ON
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		DECLARE @Counter INTEGER
		DECLARE @AvailableCoupon INTEGER
		SET @FirstRecord = (@CurrentPage - 1) * @PageSize
		SET @LastRecord = (@CurrentPage * @PageSize + 1)
		DECLARE @BarcodePrints TABLE
		(
			ClientId INTEGER IDENTITY PRIMARY KEY,
			UniqueID INTEGER,
			ECouponName NVARCHAR(50) NULL,
			ECouponAvailable INTEGER NULL ,
			ECouponDownloaded INTEGER NULL,
			NotificationID INTEGER

		)

		INSERT INTO @BarcodePrints(UniqueID,ECouponName,ECouponAvailable,ECouponDownloaded,NotificationID)
			SELECT DISTINCT BarcodePrintID,ES.ServiceNumber,NULL,PrintCount,BP.NotificationID
				FROM coc_BarcodePrints BP(NOLOCK)
					INNER JOIN coc_Notifications NF(NOLOCK) ON BP.NotificationID=NF.NotificationID
					INNER JOIN coc_EServiceBarcodes EC(NOLOCK) ON EC.NotificationID=BP.NotificationID  AND EC.IsUsed=1
					INNER JOIN coc_EServices ES(NOLOCK) ON NF.EServiceID=ES.EServiceID

					 
		SELECT @Counter=MIN(NotificationID) FROM @BarcodePrints
		WHILE @Counter IS NOT NULL 
		BEGIN
			select @AvailableCoupon=COUNT(NotificationID) from coc_EServiceBarcodes (NOLOCK) WHERE NotificationID = @Counter 	
			
			UPDATE @BarcodePrints
				SET ECouponAvailable = @AvailableCoupon
			WHERE  NotificationID= @Counter 

			SELECT @Counter=MIN(NotificationID) FROM @BarcodePrints WHERE NotificationID > @Counter 	
		END

		IF ISNULL(@HelpView,0)=0
		BEGIN
			IF (@PageSize=0)BEGIN
					SELECT ClientId,UniqueID,ECouponName,ECouponAvailable,ECouponDownloaded
						FROM @BarcodePrints
			END ELSE
				BEGIN
					SELECT ClientId,UniqueID,ECouponName,ECouponAvailable,ECouponDownloaded
							FROM @BarcodePrints
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END		
		END	ELSE 
			BEGIN
				IF (@PageSize=0)BEGIN
					SELECT UniqueID,ECouponName,ECouponAvailable,ECouponDownloaded
						FROM @BarcodePrints
				END ELSE
				BEGIN
					SELECT UniqueID,ECouponName,ECouponAvailable,ECouponDownloaded
							FROM @BarcodePrints
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END
			END
		SELECT @TotalRecords=COUNT(ClientId) FROM @BarcodePrints
	SET NOCOUNT OFF




GO
/****** Object:  StoredProcedure [dbo].[ShowECouponTemplate]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowECouponTemplate] 
	@CurrentPage INTEGER,
	@PageSize INTEGER=0, 
	@LanguageID  INTEGER=1,
--	@MessageTemplateID INTEGER=NULL, 
	@TemplateTitle [NullDescription]=NULL,
	@Template [Remark]=NULL,
	@TemplateType [tinyint]=NULL, 
	@IsActive BIT=NULL,
	@HelpView BIT=NULL, 
	@UserID INTEGER=NULL, 
	@TotalRecords INTEGER OUTPUT  
AS  
	SET NOCOUNT ON
	  
	DECLARE @FirstRecord INTEGER  
	DECLARE @LastRecord INTEGER  
	SET @FirstRecord = (@CurrentPage - 1) * @PageSize  
	SET @LastRecord = (@CurrentPage * @PageSize + 1)  

	DECLARE @PromotionalTemplate TABLE  
	(  
		ClientId INTEGER IDENTITY PRIMARY KEY,  
		UniqueID INTEGER,  
		TemplateTitle [NullDescription],
		Template [Remark],
		TemplateType [tinyint], 
		LanguageID INTEGER,
		IsActive BIT
	)  
	INSERT INTO @PromotionalTemplate(UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive)  
		SELECT CM.MessageTemplateID,TL.TemplateTitle,TL.Template,TemplateType,TL.LanguageID,IsActive 
			FROM coc_MessageTemplates CM(NOLOCK)  
				INNER JOIN coc_MessageTemplateLanguages TL(NOLOCK) ON CM.MessageTemplateID=TL.MessageTemplateID AND TL.LanguageID=@LanguageID
			WHERE --(@MessageTemplateID IS NULL OR CM.MessageTemplateID=@MessageTemplateID) AND  
			    (@TemplateTitle IS NULL OR TemplateTitle=@TemplateTitle) AND
				(@Template IS NULL OR Template=@Template) AND
				(@TemplateType IS NULL OR TemplateType=@TemplateType) AND
				(@IsActive IS NULL OR IsActive=@IsActive) AND TemplateType=2 
			ORDER BY CM.MessageTemplateID DESC
	IF ISNULL(@HelpView,0)=0
	BEGIN
		IF (@PageSize=0)BEGIN  
			SELECT ClientId,UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive
				FROM @PromotionalTemplate  
		END ELSE  
		BEGIN  
			SELECT ClientId,UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive
				FROM @PromotionalTemplate  
			WHERE ClientId > @FirstRecord AND ClientId < @LastRecord  
		END
	END
	ELSE BEGIN
		IF (@PageSize=0)BEGIN  
			SELECT UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive
				FROM @PromotionalTemplate  
		END ELSE  
		BEGIN  
			SELECT UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive
				FROM @PromotionalTemplate  
			WHERE ClientId > @FirstRecord AND ClientId < @LastRecord  
		END
	END
	SELECT @TotalRecords=COUNT(ClientId) FROM @PromotionalTemplate 
	SET NOCOUNT OFF 






GO
/****** Object:  StoredProcedure [dbo].[ShowEServiceExtensions]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE PROCEDURE [dbo].[ShowEServiceExtensions]
	@CurrentPage INTEGER,
	@PageSize INTEGER=0,
	@LanguageID  INTEGER=1,
	@EServiceInvoiceID INTEGER=NULL,
	@InvoiceNumber [Code]=NULL,
	@NotificationCount INTEGER=NULL,
	@ServiceTypeID NVARCHAR(125)=NULL,
	@ServiceSubTypeID NVARCHAR(125)=NULL,
	@MessagePackTypeID NVARCHAR(125)=NULL, 
	@CompetitionType NVARCHAR(125)=NULL, 
	@PackageAmount [Amount]=NULL, 
	@HelpView BIT=NULL,
	@IsActive BIT=NULL,
	@UserID INTEGER=NULL, 
	@TotalRecords INTEGER OUTPUT

AS
	SET NOCOUNT ON
		DECLARE @CorporateID INTEGER =NULL
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		SET @FirstRecord = (@CurrentPage - 1) * @PageSize
		SET @LastRecord = (@CurrentPage * @PageSize + 1)
		DECLARE @ServiceExtension TABLE
		(
			ClientId INTEGER IDENTITY PRIMARY KEY,
			UniqueID INTEGER,
			EServiceID INTEGER,
			InvoiceNumber [NullCode],
			NotificationCount INTEGER,
			PackageAmount [Amount], 
			ServiceTypeID NVARCHAR(125),
			ServiceSubTypeID NVARCHAR(125),
			MessagePackTypeID NVARCHAR(125), 
			CompetitionType NVARCHAR(125), 
			IsActive BIT
		)

		SELECT @CorporateID=CorporateID FROM coc_Corporates (NOLOCK) WHERE UserID=@UserID

		INSERT INTO @ServiceExtension(UniqueID,EServiceID,InvoiceNumber,NotificationCount,PackageAmount,CompetitionType,ServiceTypeID,ServiceSubTypeID,MessagePackTypeID )
			SELECT EI.EServiceInvoiceID,EI.EServiceID,EI.InvoiceNumber,EI.NotificationCount,EI.PackageAmount,EL.EnumValue,EG.EnumValue,GE.EnumValue,MT.MessagePackType
				FROM coc_EServiceInvoices(NOLOCK) EI
					INNER JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID=EI.EServiceID
					LEFT JOIN coc_EnumValueLanguages (NOLOCK)EL ON EL.EnumValueID=ES.CompetitionID AND EL.LanguageID=@LanguageID
					LEFT JOIN coc_EnumValueLanguages (NOLOCK)EG ON EG.EnumValueID=ES.ServiceTypeID AND EG.LanguageID=@LanguageID
					LEFT JOIN coc_EnumValueLanguages (NOLOCK)GE ON GE.EnumValueID=ES.ServiceSubTypeID AND GE.LanguageID=@LanguageID
					LEFT JOIN coc_MessagePackTypes (NOLOCK)MT ON MT.MessagePackTypeID=ES.MessagePackTypeID
				WHERE (@EServiceInvoiceID IS NULL OR EServiceInvoiceID=@EServiceInvoiceID) AND
					(@InvoiceNumber IS NULL OR InvoiceNumber LIKE +'%'+@InvoiceNumber+'%') AND
					(@NotificationCount IS NULL OR NotificationCount=@NotificationCount) AND
					(@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND
					(@PackageAmount IS NULL OR PackageAmount=@PackageAmount) AND IsExtension=1
				ORDER BY EServiceInvoiceID DESC
		IF ISNULL(@HelpView,0)=0
		BEGIN
			IF (@PageSize=0)BEGIN
					SELECT ClientId,UniqueID,EServiceID,InvoiceNumber,NotificationCount,PackageAmount,CompetitionType,ServiceTypeID,ServiceSubTypeID,MessagePackTypeID 
						FROM @ServiceExtension
					WHERE (@ServiceTypeID IS NULL OR ServiceTypeID LIKE '%'+@ServiceTypeID+'%' AND @CompetitionType IS NULL OR CompetitionType LIKE '%'+@CompetitionType+'%'
						AND @ServiceSubTypeID IS NULL OR ServiceSubTypeID LIKE '%'+@ServiceSubTypeID+'%' AND @MessagePackTypeID IS NULL OR MessagePackTypeID LIKE '%'+@MessagePackTypeID+'%')
			END ELSE
				BEGIN
					SELECT ClientId,UniqueID,EServiceID,InvoiceNumber,NotificationCount,PackageAmount,CompetitionType,ServiceTypeID,ServiceSubTypeID,MessagePackTypeID 
							FROM @ServiceExtension
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord AND @ServiceTypeID IS NULL OR ServiceTypeID LIKE '%'+@ServiceTypeID+'%' AND @CompetitionType IS NULL OR CompetitionType LIKE '%'+@CompetitionType+'%'
						AND @ServiceSubTypeID IS NULL OR ServiceSubTypeID LIKE '%'+@ServiceSubTypeID+'%' AND @MessagePackTypeID IS NULL OR MessagePackTypeID LIKE '%'+@MessagePackTypeID+'%'
				END		
		END	ELSE 
			BEGIN
				IF (@PageSize=0)BEGIN
					SELECT UniqueID,EServiceID,InvoiceNumber,NotificationCount,PackageAmount,CompetitionType,ServiceTypeID,ServiceSubTypeID,MessagePackTypeID 
						FROM @ServiceExtension
						WHERE (@ServiceTypeID IS NULL OR ServiceTypeID LIKE '%'+@ServiceTypeID+'%' AND @CompetitionType IS NULL OR CompetitionType LIKE '%'+@CompetitionType+'%'
						AND @ServiceSubTypeID IS NULL OR ServiceSubTypeID LIKE '%'+@ServiceSubTypeID+'%' AND @MessagePackTypeID IS NULL OR MessagePackTypeID LIKE '%'+@MessagePackTypeID+'%')
				END ELSE
				BEGIN
					SELECT UniqueID,EServiceID,InvoiceNumber,NotificationCount,PackageAmount,CompetitionType,ServiceTypeID,ServiceSubTypeID,MessagePackTypeID 
							FROM @ServiceExtension
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord AND @ServiceTypeID IS NULL OR ServiceTypeID LIKE '%'+@ServiceTypeID+'%' AND @CompetitionType IS NULL OR CompetitionType LIKE '%'+@CompetitionType+'%'
						AND @ServiceSubTypeID IS NULL OR ServiceSubTypeID LIKE '%'+@ServiceSubTypeID+'%' AND @MessagePackTypeID IS NULL OR MessagePackTypeID LIKE '%'+@MessagePackTypeID+'%'
				END
			END
		SELECT @TotalRecords=COUNT(ClientId) FROM @ServiceExtension
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[ShowEServiceInvoiceList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[ShowEServiceInvoiceList]
	-- Add the parameters for the stored procedure here
	@CurrentPage INTEGER,
	@PageSize INTEGER=0,
	@LanguageID  INTEGER=1,
	@CompetitionName NVARCHAR(50)=null,
	@UserID INTEGER,
	@TotalRecords INTEGER OUTPUT,

	@EServiceID INTEGER=null,
	@FromDate DATETIME=null,
	@ToDate DATETIME=null,
	@NotificationCount INTEGER=null,
	@PackageType NVARCHAR(50)=null,
	@PackageAmount INTEGER=null,
	@InvoiceNumber NVARCHAR(20)=null,
	--@PaymentStatus BIT=null,
	@IsPaymentDone BIT=null,
	@PaymentType NVARCHAR(50)=null,
	@JCCICode NVARCHAR(20)=null,
	@CRNumber NVARCHAR(20)=null,
	@EmailID VARCHAR(100)=null
AS
SET NOCOUNT ON
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		--DECLARE @RoleID INTEGER
		--DECLARE @CorporateID INTEGER

		SET @FirstRecord = (@CurrentPage - 1) * @PageSize+1
		SET @LastRecord = (@CurrentPage * @PageSize )
BEGIN
	    ;WITH RecieptList AS
(    
    select
   --es.CompetitionID as CompetitionName,
   esl.EService as CompetitionName,
   es.EServiceID,
   es.FromDate,
   es.ToDate,
   --es.MessagePackTypeID,
   msg.MessagePackType,
   es.IsPaymentDone,
   esi.NotificationCount,
   --esi.PaymentTypeID,
   evl.EnumValue as PaymentType,
   esi.PackageAmount,
   esi.InvoiceNumber,
   co.JCCICode,
   co.CRNumber,
   co.EmailID,
   ROW_NUMBER() OVER
   (ORDER BY es.EServiceID desc) AS Rowc

   FROM coc_EServices es (NOLOCK)
    inner join coc_EServiceInvoices esi (NOLOCK) on esi.EServiceID = es.EServiceID
	inner join coc_MessagePackTypes msg(NOLOCK) on msg.MessagePackTypeID=es.MessagePackTypeID
	inner join coc_Corporates co(NOLOCK) on co.CorporateID=es.CorporateID
	left join coc_EnumValueLanguages enmvl(NOLOCK) on enmvl.EnumValueID=es.CompetitionID and enmvl.LanguageID=@LanguageID
	inner join coc_EnumValueLanguages evl(NOLOCK) on evl.EnumValueID=esi.PaymentTypeID and evl.LanguageID=@LanguageID
	inner join coc_EServiceLanguages esl(NOLOCK) on es.EServiceID=esl.EServiceID and esl.LanguageID=@LanguageID
    
	where(@CompetitionName is null or enmvl.EnumValue like+'%'+@CompetitionName+'%') and
	(@EServiceID is null or es.EServiceID=@EServiceID) and 
	(@FromDate is null or es.FromDate=@FromDate) and 
	(@ToDate is null or es.ToDate=@ToDate) and 
	(@NotificationCount is null or esi.NotificationCount=@NotificationCount) and 
	(@PackageType is null or msg.MessagePackType like +'%'+@PackageType+'%') and 
	(@PackageAmount is null or esi.PackageAmount=@PackageAmount) and
	(@InvoiceNumber is null or esi.InvoiceNumber like+'%'+@InvoiceNumber+'%') and 
	--(@PaymentStatus is null or es.IsPaymentDone=@PaymentStatus) and
	(@IsPaymentDone is null or es.IsPaymentDone=@IsPaymentDone) and
	(@PaymentType is null or evl.EnumValue like+'%'+@PaymentType+'%') and
	(@JCCICode is null or co.JCCICode like+'%'+@JCCICode+'%') and
	(@CRNumber is null or co.CRNumber like+'%'+@CRNumber+'%') and
	(@EmailID is null or co.EmailID like+'%'+@EmailID+'%')

	 )

 
 SELECT  CompetitionName, 
		 EServiceID,
            EServiceID as UniqueID, 
            FromDate, 
            ToDate,
			NotificationCount,
   --MessagePackTypeID as PackageType,
   MessagePackType,
   IsPaymentDone,
   --PaymentTypeID as PaymentStatus,
   PaymentType,
   PackageAmount,
   InvoiceNumber,
   JCCICode,
   CRNumber,
   EmailID,
   Rowc
FROM RecieptList 


WHERE Rowc BETWEEN @FirstRecord AND @LastRecord

Order by EServiceID DESC

--OFFSET  10 ROWS 
--FETCH NEXT 10 ROWS ONLY 
SELECT @TotalRecords=COUNT(es.EServiceID) 
  FROM coc_EServices es (NOLOCK)
    inner join coc_EServiceInvoices esi(NOLOCK) on esi.EServiceID = es.EServiceID
	inner join coc_MessagePackTypes msg(NOLOCK) on msg.MessagePackTypeID=es.MessagePackTypeID
	inner join coc_Corporates co(NOLOCK) on co.CorporateID=es.CorporateID
	left join coc_EnumValueLanguages enmvl(NOLOCK) on enmvl.EnumValueID=es.CompetitionID and enmvl.LanguageID=@LanguageID
	inner join coc_EnumValueLanguages evl(NOLOCK) on evl.EnumValueID=esi.PaymentTypeID and evl.LanguageID=@LanguageID
	inner join coc_EServiceLanguages esl(NOLOCK) on es.EServiceID=esl.EServiceID and esl.LanguageID=@LanguageID
    
	where(@CompetitionName is null or enmvl.EnumValue like+'%'+@CompetitionName+'%') and
	(@EServiceID is null or es.EServiceID=@EServiceID) and 
	(@FromDate is null or es.FromDate=@FromDate) and 
	(@ToDate is null or es.ToDate=@ToDate) and 
	(@NotificationCount is null or esi.NotificationCount=@NotificationCount) and 
	(@PackageType is null or msg.MessagePackType like +'%'+@PackageType+'%') and 
	(@PackageAmount is null or esi.PackageAmount=@PackageAmount) and
	(@InvoiceNumber is null or esi.InvoiceNumber like+'%'+@InvoiceNumber+'%') and 
	(@IsPaymentDone is null or es.IsPaymentDone=@IsPaymentDone) and
	(@PaymentType is null or evl.EnumValue like+'%'+@PaymentType+'%') and
	(@JCCICode is null or co.JCCICode like+'%'+@JCCICode+'%') and
	(@CRNumber is null or co.CRNumber like+'%'+@CRNumber+'%') and
	(@EmailID is null or co.EmailID like+'%'+@EmailID+'%')

   
SET NOCOUNT OFF
end
GO
/****** Object:  StoredProcedure [dbo].[ShowEServiceReceipt]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowEServiceReceipt]
	@CurrentPage INTEGER,
	@PageSize INTEGER=0,
	@LanguageID  INTEGER=1,
	@EServiceReceiptID INTEGER=NULL,
	@ServiceNumber [Name]=NULL,
	@Name [NullName]=NULL,
	@HelpView BIT=NULL,
	@IsActive BIT=NULL,
	@UserID INTEGER=NULL,
	@TotalRecords INTEGER OUTPUT

AS
	SET NOCOUNT ON
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		SET @FirstRecord = (@CurrentPage - 1) * @PageSize
		SET @LastRecord = (@CurrentPage * @PageSize + 1)
		DECLARE @EServiceReceipts TABLE
		(
			ClientId INTEGER IDENTITY PRIMARY KEY,
			UniqueID INTEGER,
			ServiceNumber [Code],
			Name [NullName],
			ReceiptAmount [Amount]
		)
	
		INSERT INTO @EServiceReceipts(UniqueID,ServiceNumber,Name,ReceiptAmount )
			SELECT  ER.EServiceReceiptID,ES.ServiceNumber,EL.EService,ER.ReceiptAmount
			FROM coc_EServiceReceipts (NOLOCK) ER
				 LEFT JOIN coc_EServiceInvoices EI (NOLOCK) ON EI.EServiceInvoiceID=ER.EServiceInvoiceID
				 LEFT JOIN coc_EServices  (NOLOCK) ES ON EI.EServiceID=ES.EServiceID
				 LEFT JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
				WHERE (@EServiceReceiptID IS NULL OR ER.EServiceReceiptID=@EServiceReceiptID) AND
					  (@Name IS NULL OR EL.EService LIKE +'%'+@Name+'%') AND
					  (@IsActive IS NULL OR IsActive=@IsActive) ORDER BY ER.EServiceReceiptID DESC
		IF ISNULL(@HelpView,0)=0
		BEGIN
			IF (@PageSize=0)BEGIN
					SELECT ClientId,UniqueID,ServiceNumber,Name,ReceiptAmount
						FROM @EServiceReceipts
			END ELSE
				BEGIN
					SELECT ClientId,UniqueID,ServiceNumber,Name,ReceiptAmount
							FROM @EServiceReceipts
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END		
		END	ELSE 
			BEGIN
				IF (@PageSize=0)BEGIN
					SELECT UniqueID,ServiceNumber,Name,ReceiptAmount
						FROM @EServiceReceipts
				END ELSE
				BEGIN
					SELECT UniqueID,ServiceNumber,Name,ReceiptAmount
							FROM @EServiceReceipts
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END
			END
		SELECT @TotalRecords=COUNT(ClientId) FROM @EServiceReceipts
	SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[ShowEServices]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 CREATE PROCEDURE [dbo].[ShowEServices] 
	@CurrentPage INTEGER,
	@PageSize INTEGER=0,
	@LanguageID  INTEGER=1,
	@EServiceID INTEGER=NULL,
	@ServiceNumber [Code]=NULL,
	@PromotionName  [NullName]=NULL,
	@HelpView BIT=NULL,
	@Competition NVARCHAR(125)=NULL,
	@ServiceTypeID NVARCHAR(125)=NULL,
	@ServiceSubTypeID NVARCHAR(125)=NULL,
	@MessagePackTypeID NVARCHAR(125)=NULL,
	@NotificationCount INTEGER=NULL, 
	@IsActive BIT=NULL,
	@UserID INTEGER=NULL, 
	@TotalRecords INTEGER OUTPUT

AS
	SET NOCOUNT ON
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		DECLARE @RoleID INTEGER
		DECLARE @CorporateID INTEGER

		SET @FirstRecord = (@CurrentPage - 1) * @PageSize
		SET @LastRecord = (@CurrentPage * @PageSize + 1)

		SELECT @RoleID=RoleID FROM coc_Users (NOLOCK) WHERE UserID =@UserID
		SELECT @CorporateID=CorporateID FROM coc_Corporates (NOLOCK) WHERE UserID =@UserID

		DECLARE @EServices TABLE
		(
			ClientId INTEGER IDENTITY PRIMARY KEY,
			UniqueID INTEGER,
			ServiceNumber [Code],
			PromotionName  [NullName],
			Competition NVARCHAR(125),
			ServiceTypeID NVARCHAR(125),
			ServiceSubTypeID NVARCHAR(125),
			MessagePackTypeID NVARCHAR(125),
			NotificationCount INTEGER,
			IsActive					BIT,
			PaymentStatus				NVARCHAR(50)
		)

		INSERT INTO @EServices(UniqueID,ServiceNumber,PromotionName,Competition,IsActive,ServiceTypeID,ServiceSubTypeID,MessagePackTypeID,NotificationCount,PaymentStatus )
			SELECT ES.EServiceID,ES.ServiceNumber,SL.EService,EL.EnumValue,ES.IsActive,EG.EnumValue,GE.EnumValue,MT.MessagePackType,EI.NotificationCount, CASE WHEN ES.IsPaymentDone = 1 THEN 'Paid' ELSE 'Unpaid' END
				FROM coc_EServices ES(NOLOCK)
					INNER JOIN coc_EServiceLanguages (NOLOCK)SL ON ES.EServiceID=SL.EServiceID AND SL.LanguageID=@LanguageID
					LEFT JOIN coc_EnumValueLanguages (NOLOCK)EL ON EL.EnumValueID=ES.CompetitionID AND EL.LanguageID=@LanguageID
					LEFT JOIN coc_EnumValueLanguages (NOLOCK)EG ON EG.EnumValueID=ES.ServiceTypeID AND EG.LanguageID=@LanguageID
					LEFT JOIN coc_EnumValueLanguages (NOLOCK)GE ON GE.EnumValueID=ES.ServiceSubTypeID AND GE.LanguageID=@LanguageID
					LEFT JOIN coc_MessagePackTypes (NOLOCK)MT ON MT.MessagePackTypeID=ES.MessagePackTypeID
					INNER JOIN coc_EServiceInvoices  EI(NOLOCK) ON EI.EServiceID=ES.EServiceID  AND EI.IsExtension=0
				WHERE (@EServiceID IS NULL OR ES.EServiceID=@EServiceID) AND
					(@ServiceNumber IS NULL OR ServiceNumber LIKE +'%'+@ServiceNumber+'%') AND
					((@PromotionName IS NULL OR SL.EService LIKE +'%'+@PromotionName+'%')  ) AND
					(@UserID IS NULL OR ES.AddUserID=@UserID)AND
					(@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND 
					(@NotificationCount IS NULL OR EI.NotificationCount=@NotificationCount) AND
					--ES.CorporateID = CASE WHEN @RoleID =1 THEN ES.CorporateID ELSE @CorporateID END AND
					(@IsActive IS NULL OR ES.IsActive=@IsActive) 
				--GROUP BY ES.EServiceID,ES.ServiceNumber,SL.EService,EL.EnumValue,ES.IsActive,EG.EnumValue,GE.EnumValue,MT.MessagePackType
				ORDER BY ES.EServiceID DESC

		IF ISNULL(@HelpView,0)=0
		BEGIN
			IF (@PageSize=0)BEGIN
					SELECT ClientId,ServiceNumber,PromotionName,Competition,IsActive,ServiceTypeID,ServiceSubTypeID,MessagePackTypeID,NotificationCount,PaymentStatus
						FROM @EServices
						WHERE (@ServiceTypeID IS NULL OR ServiceTypeID LIKE '%'+@ServiceTypeID+'%' AND @Competition IS NULL OR Competition LIKE '%'+@Competition+'%'
							AND @ServiceSubTypeID IS NULL OR ServiceSubTypeID LIKE '%'+@ServiceSubTypeID+'%' AND @MessagePackTypeID IS NULL OR MessagePackTypeID LIKE '%'+@MessagePackTypeID+'%')
					ORDER BY ClientId DESC
			END ELSE
				BEGIN
					SELECT ClientId,UniqueID,ServiceNumber,PromotionName,Competition,IsActive,ServiceTypeID,ServiceSubTypeID,MessagePackTypeID,NotificationCount,PaymentStatus
							FROM @EServices
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord AND @ServiceTypeID IS NULL OR ServiceTypeID LIKE '%'+@ServiceTypeID+'%' AND (@Competition IS NULL OR Competition LIKE '%'+@Competition+'%') 
							AND @ServiceSubTypeID IS NULL OR ServiceSubTypeID LIKE '%'+@ServiceSubTypeID+'%' AND @MessagePackTypeID IS NULL OR MessagePackTypeID LIKE '%'+@MessagePackTypeID+'%'
					ORDER BY UniqueID DESC
				END		
		END	ELSE 
			BEGIN
				IF (@PageSize=0)BEGIN
					SELECT ClientId [id],UniqueID,ServiceNumber,PromotionName,Competition,IsActive,ServiceTypeID,ServiceSubTypeID,MessagePackTypeID,NotificationCount,PaymentStatus
						FROM @EServices
						WHERE (@ServiceTypeID IS NULL OR ServiceTypeID LIKE '%'+@ServiceTypeID+'%' AND @Competition IS NULL OR Competition LIKE '%'+@Competition+'%' 
							AND @ServiceSubTypeID IS NULL OR ServiceSubTypeID LIKE '%'+@ServiceSubTypeID+'%' AND @MessagePackTypeID IS NULL OR MessagePackTypeID LIKE '%'+@MessagePackTypeID+'%')
					ORDER BY UniqueID DESC
				END ELSE
				BEGIN
					SELECT ClientId [id],UniqueID,ServiceNumber,PromotionName,Competition,IsActive,ServiceTypeID,ServiceSubTypeID,MessagePackTypeID,NotificationCount,PaymentStatus
							FROM @EServices
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord AND @ServiceTypeID IS NULL OR ServiceTypeID LIKE '%'+@ServiceTypeID+'%' AND (@Competition IS NULL OR Competition LIKE '%'+@Competition+'%') 
							AND @ServiceSubTypeID IS NULL OR ServiceSubTypeID LIKE '%'+@ServiceSubTypeID+'%' AND @MessagePackTypeID IS NULL OR MessagePackTypeID LIKE '%'+@MessagePackTypeID+'%'
					ORDER BY UniqueID DESC
				END
			END
		SELECT @TotalRecords=COUNT(ClientId) FROM @EServices
	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[ShowEVoucherConfiguration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ShowEVoucherConfiguration]
	@CurrentPage INTEGER,
	@PageSize INTEGER=1,
	@LanguageID  INTEGER=1,
	@UserID INTEGER,
	@TotalRecords INTEGER OUTPUT,

	@CompetitionName NVARCHAR(50)=NULL,
	@FromDate DATETIME=NULL,
	@ToDate DATETIME=NULL,
	@CometitionType NVARCHAR(50)=NULL,
	@VoucherName NVARCHAR(50)=NULL
	
AS
	DECLARE @FirstRecord INTEGER
	DECLARE @LastRecord INTEGER
	--DECLARE @RoleID INTEGER
	--DECLARE @CorporateID INTEGER

	SET @FirstRecord = ((@CurrentPage - 1) * @PageSize) + 1
	SET @LastRecord = (@CurrentPage * @PageSize)
BEGIN
	

	;WITH EvoucherList AS
	(
		SELECT 
			es.EServiceID AS UniqueID,
			esl.EService AS CompetitionName,
			FromDate,
			ToDate,
			enmvl.EnumValue AS CompetitionType,
			evl.ResourceValue AS VoucherName,
			es.EServiceID,			
					
			ROW_NUMBER() OVER
				(ORDER BY es.EServiceID) AS Rowc
		FROM coc_EServices es (NOLOCK)
			INNER JOIN coc_EnumValueLanguages enmvl(NOLOCK) ON enmvl.EnumValueID=es.ServiceSubTypeID AND enmvl.LanguageID=@LanguageID
			INNER JOIN coc_EServiceLanguages esl(NOLOCK) ON esl.EServiceID=es.EServiceID AND esl.LanguageID=@LanguageID
			LEFT JOIN coc_EVoucher ev(NOLOCK) ON ev.EServiceID=es.EServiceID 
			LEFT JOIN coc_EVoucherLanguages evl(NOLOCK) ON evl.EVoucherID=ev.EVoucherID AND evl.LanguageID=@LanguageID AND evl.ResourceKey='VoucherName'
		WHERE(@CompetitionName IS NULL OR enmvl.EnumValue LIKE+'%'+@CompetitionName+'%') AND
			(@FromDate IS NULL OR es.FromDate=@FromDate) AND 
			(@ToDate IS NULL OR es.ToDate=@ToDate) AND 
			(@CometitionType IS NULL OR esl.EService LIKE+'%'+@CometitionType+'%') AND
			(@VoucherName IS NULL OR evl.ResourceValue LIKE+'%'+@VoucherName+'%') AND
			es.AddUserId = @UserID --AND es.IsPaymentDone = 1
	)

SELECT 
	UniqueID,
	CompetitionName,
	FromDate,
	ToDate,
	CompetitionType,
	VoucherName,
	Rowc
	FROM EvoucherList
	WHERE Rowc BETWEEN @FirstRecord AND @LastRecord


SELECT @TotalRecords=COUNT(es.EServiceID) 
		FROM coc_EServices es (NOLOCK)
			INNER JOIN coc_EnumValueLanguages enmvl(NOLOCK) ON enmvl.EnumValueID=es.ServiceSubTypeID AND enmvl.LanguageID=@LanguageID
			INNER JOIN coc_EServiceLanguages esl(NOLOCK) ON esl.EServiceID=es.EServiceID AND esl.LanguageID=@LanguageID
			LEFT JOIN coc_EVoucher ev(NOLOCK) ON ev.EServiceID=es.EServiceID 
			LEFT JOIN coc_EVoucherLanguages evl(NOLOCK) ON evl.EVoucherID=ev.EVoucherID AND evl.LanguageID=@LanguageID AND evl.ResourceKey='VoucherName'
		WHERE(@CompetitionName IS NULL OR enmvl.EnumValue LIKE+'%'+@CompetitionName+'%') AND
			(@FromDate IS NULL OR es.FromDate=@FromDate) AND 
			(@ToDate IS NULL OR es.ToDate=@ToDate) AND 
			(@CometitionType IS NULL OR esl.EService LIKE+'%'+@CometitionType+'%') AND
			(@VoucherName IS NULL OR evl.ResourceValue LIKE+'%'+@VoucherName+'%') AND
			es.AddUserId = @UserID  AND es.IsPaymentDone = 1

SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[ShowGeneralNotification]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowGeneralNotification]
	@CurrentPage INTEGER,
	@PageSize INTEGER=0, 
	@LanguageID  INTEGER=NULL,
	@GeneralNotificationTemplateID INTEGER=NULL, 
	@TemplateTypeID INTEGER=NULL, 
	@SMSUsage BIT=NULL,
	@NotificatonUsage BIT=NULL,
	@EmailUsage BIT=NULL,
	@TemplateTitle [Description]=NULL,
	@Template [Remark]=NULL,
	@HelpView BIT=NULL,  
	@IsActive BIT=NULL,  
	@UserID INTEGER=NULL,
	@TotalRecords INTEGER OUTPUT  
AS  
	SET NOCOUNT ON
	  
	DECLARE @FirstRecord INTEGER  
	DECLARE @LastRecord INTEGER  
	--DECLARE @LanguageID INTEGER
	SET @FirstRecord = (@CurrentPage - 1) * @PageSize  
	SET @LastRecord = (@CurrentPage * @PageSize + 1)  
	--SELECT @LanguageID =LanguageID FROM coc_Languages(NOLOCK) WHERE IsDefaultLanguage=1

	DECLARE @GeneralNotificationTemplates TABLE  
	(  
		ClientId INTEGER IDENTITY PRIMARY KEY,  
		UniqueID INTEGER,  
		TemplateTypeID INTEGER,
		SMSUsage BIT,
		NotificatonUsage BIT,
		EmailUsage BIT,
		TemplateTitle [Description],
		Template [Remark],
		IsActive BIT
	)  
	INSERT INTO @GeneralNotificationTemplates(UniqueID,TemplateTypeID,SMSUsage,NotificatonUsage,EmailUsage,TemplateTitle,Template,IsActive )  
		SELECT KL.GeneralNotificationTemplateID,KL.TemplateTypeID,KL.SMSUsage,KL.NotificatonUsage,KL.EmailUsage,KC.TemplateTitle,KC.Template,KL.IsActive   
			FROM [coc_GeneralNotificationTemplates] KL(NOLOCK) 
			INNER JOIN [coc_GeneralNotificationTemplateLanguages] KC(NOLOCK) ON KC.GeneralNotificationTemplateID=KL.GeneralNotificationTemplateID AND KC.LanguageID = @LanguageID  
			WHERE (@GeneralNotificationTemplateID IS NULL OR KL.GeneralNotificationTemplateID=@GeneralNotificationTemplateID) AND  
				(@TemplateTypeID IS NULL OR KL.TemplateTypeID LIKE +@TemplateTypeID) AND 
				(@SMSUsage IS NULL OR KL.SMSUsage LIKE +@SMSUsage) AND 
				(@NotificatonUsage IS NULL OR KL.NotificatonUsage LIKE +@NotificatonUsage) AND
				(@EmailUsage IS NULL OR KL.EmailUsage LIKE +@EmailUsage) AND
				(@TemplateTitle IS NULL OR KC.TemplateTitle LIKE +@TemplateTitle) AND
				(@Template IS NULL OR KC.Template LIKE +@Template) AND
				(@IsActive IS NULL OR IsActive=@IsActive)   ORDER BY KL.GeneralNotificationTemplateID DESC 
		 
	IF ISNULL(@HelpView,0)=0
	BEGIN
		IF (@PageSize=0)BEGIN  
			SELECT ClientId,UniqueID,TemplateTypeID,SMSUsage,NotificatonUsage,EmailUsage,TemplateTitle,Template,IsActive 
				FROM @GeneralNotificationTemplates  
		END ELSE  
		BEGIN  
			SELECT ClientId,UniqueID,TemplateTypeID,SMSUsage,NotificatonUsage,EmailUsage,TemplateTitle,Template,IsActive 
				FROM @GeneralNotificationTemplates  
			WHERE ClientId > @FirstRecord AND ClientId < @LastRecord  
		END
	END
	ELSE BEGIN
		IF (@PageSize=0)BEGIN  
			SELECT UniqueID,TemplateTypeID,SMSUsage,NotificatonUsage,EmailUsage,TemplateTitle,Template,IsActive 
				FROM @GeneralNotificationTemplates  
		END ELSE  
		BEGIN  
			SELECT UniqueID,TemplateTypeID,SMSUsage,NotificatonUsage,EmailUsage,TemplateTitle,Template,IsActive 
				FROM @GeneralNotificationTemplates  
			WHERE ClientId > @FirstRecord AND ClientId < @LastRecord  
		END
	END
	SELECT @TotalRecords=COUNT(ClientId) FROM @GeneralNotificationTemplates
	
	SET NOCOUNT OFF 





GO
/****** Object:  StoredProcedure [dbo].[ShowKioskLocations]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowKioskLocations] 
	@CurrentPage INTEGER,
	@PageSize INTEGER = 0,
	@LanguageID INTEGER = NULL,
	@KioskLocationsID INTEGER = NULL,
	@KioskLocation Description = NULL,
	@Address1 [Address] = NULL,
	@Country [NullDescription] = NULL,
	@City [NullDescription] = NULL,
	@Remarks [Remark] = NULL,
	@HelpView BIT = NULL,
	@IsActive BIT = NULL,
	@UserID INTEGER = NULL,
	@TotalRecords INTEGER OUTPUT
AS
SET NOCOUNT ON

DECLARE @FirstRecord INTEGER
DECLARE @LastRecord INTEGER
--DECLARE @LanguageID INTEGER
SET @FirstRecord = (@CurrentPage - 1) * @PageSize
SET @LastRecord = (@CurrentPage * @PageSize + 1)
--SELECT @LanguageID =LanguageID FROM coc_Languages(NOLOCK) WHERE IsDefaultLanguage=1
DECLARE @coc_KioskLocations TABLE 
(
	ClientId INTEGER IDENTITY PRIMARY KEY,
	UniqueID INTEGER,
	KioskLocation [Description],
	Address1 [Address],
	Remarks [Remark],
	Country Description,
	City Description,
	IsActive BIT,
	KioskLocationID int
)
INSERT INTO @coc_KioskLocations 
(
	UniqueID,
	KioskLocation,
	Address1,
	Remarks,
	Country,
	City,
	IsActive,
	KioskLocationID
)
SELECT KL.KioskLocationID,
	KC.KioskLocation,
	KL.Address1,
	KL.Remarks,
	CL.Country,
	CT.City,
	KL.IsActive,
	KL.KioskLocationID
FROM [coc_KioskLocations] KL(NOLOCK)
INNER JOIN [coc_KioskLocationLanguages] KC(NOLOCK) ON KC.KioskLocationID = KL.KioskLocationID
	AND KC.LanguageID = @LanguageID
LEFT JOIN coc_CountryLanguages CL(NOLOCK) ON KL.CountryID = CL.CountryID
	AND CL.LanguageID = @LanguageID
LEFT JOIN coc_CityLanguages CT(NOLOCK) ON KL.CityID = CT.CityID
	AND CT.LanguageID = @LanguageID
WHERE (@KioskLocationsID IS NULL OR KL.KioskLocationID = @KioskLocationsID)
	AND (@Address1 IS NULL OR KL.Address1 LIKE + '%' + @Address1 + '%')
	AND (@KioskLocation IS NULL OR KC.KioskLocation LIKE + '%' + @KioskLocation + '%')
	AND (@Remarks IS NULL OR KL.Remarks LIKE + '%' + @Remarks + '%')
	AND (@Country IS NULL OR CL.Country LIKE + '%' + @Country + '%')
	AND (@City IS NULL OR CT.CityID LIKE + '%' + @City + '%')
	AND (@IsActive IS NULL OR IsActive = @IsActive)
ORDER BY KL.KioskLocationID DESC

IF ISNULL(@HelpView, 0) = 0
BEGIN
	IF (@PageSize = 0)
	BEGIN
		SELECT ClientId,
			UniqueID,
			KioskLocation,
			Address1,
			Remarks,
			Country,
			City,
			IsActive,
			KioskLocationID
		FROM @coc_KioskLocations
	END
	ELSE
	BEGIN
		SELECT ClientId,
			UniqueID,
			KioskLocation,
			Address1,
			Remarks,
			Country,
			City,
			IsActive,
			KioskLocationID
		FROM @coc_KioskLocations
		WHERE ClientId > @FirstRecord
			AND ClientId < @LastRecord
	END
END
ELSE
BEGIN
	IF (@PageSize = 0)
	BEGIN
		SELECT UniqueID,
			KioskLocation,
			Address1,
			Remarks,
			Country,
			City,
			IsActive,
			KioskLocationID
		FROM @coc_KioskLocations
	END
	ELSE
	BEGIN
		SELECT UniqueID,
			KioskLocation,
			Address1,
			Remarks,
			Country,
			City,
			IsActive,
			KioskLocationID
		FROM @coc_KioskLocations
		WHERE ClientId > @FirstRecord
			AND ClientId < @LastRecord
	END
END
SELECT @TotalRecords = COUNT(ClientId)
FROM @coc_KioskLocations

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[ShowLanguages]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowLanguages] 
	@CurrentPage INTEGER,
	@PageSize INTEGER=0, 
	@LanguageID INTEGER=NULL, 
	@Language NVARCHAR=NULL,
	@IsActive BIT=NULL,
	@HelpView BIT=NULL, 
	@UserID INTEGER=NULL,
	@TotalRecords INTEGER OUTPUT  
AS  
	SET NOCOUNT ON
	  
	DECLARE @FirstRecord INTEGER  
	DECLARE @LastRecord INTEGER  
	SET @FirstRecord = (@CurrentPage - 1) * @PageSize  
	SET @LastRecord = (@CurrentPage * @PageSize + 1)  

	SET @LanguageID=NULL

	DECLARE @Languages TABLE  
	(  
		ClientId INTEGER IDENTITY PRIMARY KEY,  
		UniqueID INTEGER,  
		[Language] [Code],  
		IsActive BIT 
	)  
	
	INSERT INTO @Languages(UniqueID,[Language],IsActive )  
		SELECT LanguageID,[Language],IsActive   
			FROM Coc_Languages (NOLOCK)  
			WHERE (@LanguageID IS NULL OR LanguageID=@LanguageID) AND  
				(@Language IS NULL OR [Language] LIKE +'%'+@Language+'%') AND  
				(@IsActive IS NULL OR IsActive=@IsActive)  
			ORDER BY LanguageID DESC
	IF ISNULL(@HelpView,0)=0
	BEGIN
		IF (@PageSize=0)BEGIN  
			SELECT ClientId,UniqueID,[Language],IsActive  
				FROM @Languages  
		END ELSE  
		BEGIN  
			SELECT ClientId,UniqueID,[Language],IsActive  
				FROM @Languages  
			WHERE ClientId > @FirstRecord AND ClientId < @LastRecord  
		END
	END
	ELSE BEGIN
		IF (@PageSize=0)BEGIN  
			SELECT UniqueID,[Language],IsActive  
				FROM @Languages  
		END ELSE  
		BEGIN  
			SELECT UniqueID,[Language],IsActive   
				FROM @Languages  
			WHERE ClientId > @FirstRecord AND ClientId < @LastRecord  
		END
	END
	SELECT @TotalRecords=COUNT(ClientId) FROM @Languages
	
	SET NOCOUNT OFF 


GO
/****** Object:  StoredProcedure [dbo].[ShowLocations]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowLocations] 
	@CurrentPage INTEGER,
	@PageSize INTEGER=0, 
	@LocationID INTEGER=NULL,  
	@LocationEnglish [Description]=NULL,
	@LocationArabic [NullDescription]=NULL,
	@LocationUrdu [NullDescription]=NULL,  
	@Address1 [Address]=NULL,
	@Address2 [Address]=NULL,  
	@HelpView BIT=NULL,  
	@IsActive BIT=NULL,  
	@TotalRecords INTEGER OUTPUT  
AS  
	SET NOCOUNT ON
	  
	DECLARE @FirstRecord INTEGER  
	DECLARE @LastRecord INTEGER  
	SET @FirstRecord = (@CurrentPage - 1) * @PageSize  
	SET @LastRecord = (@CurrentPage * @PageSize + 1)  

	DECLARE @Locations TABLE  
	(  
		ClientId INTEGER IDENTITY PRIMARY KEY,  
		UniqueID INTEGER,  
		LocationEnglish [Description],
		LocationArabic [NullDescription],  
		LocationUrdu [NullDescription],
		Address1 [Address],
		Address2 [Address],  
		IsActive BIT  
	)  
	INSERT INTO @Locations(UniqueID,LocationEnglish,LocationArabic,LocationUrdu,Address1,Address2,IsActive )  
		SELECT LocationID,LocationEnglish,LocationArabic,LocationUrdu,Address1,Address2,IsActive   
			FROM coc_Locations (NOLOCK)  
			WHERE (@LocationID IS NULL OR LocationID=@LocationID) AND  
				(@LocationEnglish IS NULL OR LocationEnglish LIKE +'%'+@LocationEnglish+'%') AND  
				(@LocationArabic IS NULL OR LocationArabic LIKE +'%'+@LocationArabic+'%') AND
				(@LocationUrdu IS NULL OR LocationUrdu LIKE +'%'+@LocationUrdu+'%') AND
				(@Address1 IS NULL OR Address1 LIKE +'%'+@Address1+'%') AND
				(@Address2 IS NULL OR Address2 LIKE +'%'+@Address2+'%') AND
				(@IsActive IS NULL OR IsActive=@IsActive)  
			ORDER BY LocationID DESC
	IF ISNULL(@HelpView,0)=0
	BEGIN
		IF (@PageSize=0)BEGIN  
			SELECT ClientId,UniqueID,LocationEnglish,LocationArabic,LocationUrdu,Address1,Address2,IsActive  
				FROM @Locations  
		END ELSE  
		BEGIN  
			SELECT ClientId,UniqueID,LocationEnglish,LocationArabic,LocationUrdu,Address1,Address2,IsActive  
				FROM @Locations  
			WHERE ClientId > @FirstRecord AND ClientId < @LastRecord  
		END
	END
	ELSE BEGIN
		IF (@PageSize=0)BEGIN  
			SELECT UniqueID,LocationEnglish,LocationArabic,LocationUrdu,Address1,Address2  
				FROM @Locations  
		END ELSE  
		BEGIN  
			SELECT UniqueID,LocationEnglish,LocationArabic,LocationUrdu,Address1,Address2  
				FROM @Locations  
			WHERE ClientId > @FirstRecord AND ClientId < @LastRecord  
		END
	END
	SELECT @TotalRecords=COUNT(ClientId) FROM @Locations
	
	SET NOCOUNT OFF 


GO
/****** Object:  StoredProcedure [dbo].[ShowNationality]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowNationality]
	@CurrentPage INTEGER,
	@PageSize INTEGER=0,
	@LanguageID  INTEGER=1,
	@NationalityID INTEGER=NULL, 
	@Nationality Description=NULL, 
	@HelpView BIT=NULL,
	@IsActive BIT=NULL,
	@UserID INTEGER=NULL,
	@TotalRecords INTEGER OUTPUT

AS
	SET NOCOUNT ON
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		--DECLARE @LanguageID INTEGER
		SET @FirstRecord = (@CurrentPage - 1) * @PageSize
		SET @LastRecord = (@CurrentPage * @PageSize + 1)
		--SELECT @LanguageID =LanguageID FROM coc_Languages(NOLOCK) WHERE IsDefaultLanguage=1

		DECLARE @coc_Nationalities TABLE
		(
			ClientId INTEGER IDENTITY PRIMARY KEY,
			UniqueID INTEGER,  
			Nationality [Description],
			IsActive BIT
		)

		INSERT INTO @coc_Nationalities(UniqueID,Nationality,IsActive )
			SELECT CT.NationalityID,CL.Nationality,CT.IsActive 
			FROM coc_Nationalities CT(NOLOCK)
			INNER JOIN coc_NationalityLanguages CL(NOLOCK) ON CT.NationalityID=CL.NationalityID AND CL.LanguageID = @LanguageID 
				WHERE (@NationalityID IS NULL OR CT.NationalityID=@NationalityID) AND  
					  (@Nationality IS NULL OR CL.Nationality LIKE +'%'+@Nationality+'%') AND
					(@IsActive IS NULL OR IsActive=@IsActive) ORDER BY CT.NationalityID DESC

		IF ISNULL(@HelpView,0)=0
		BEGIN
			IF (@PageSize=0)BEGIN
					SELECT UniqueID,Nationality,IsActive 
						FROM @coc_Nationalities
			END ELSE
				BEGIN
					SELECT UniqueID,Nationality,IsActive 
							FROM @coc_Nationalities
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END		
		END	ELSE 
			BEGIN
				IF (@PageSize=0)BEGIN
					SELECT UniqueID,Nationality
						FROM @coc_Nationalities
				END ELSE
				BEGIN
					SELECT UniqueID,Nationality
							FROM @coc_Nationalities
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END
			END
		SELECT @TotalRecords=COUNT(ClientId) FROM @coc_Nationalities
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[ShowNotifications]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ShowNotifications]
	@CurrentPage INTEGER,
	@PageSize INTEGER=0,
	@LanguageID  INTEGER=1,
	@NotificationID INTEGER=NULL,
	@EntryDate [Code]=NULL,
	@EService Remark=NULL,
	@HelpView BIT=NULL,
	@IsActive BIT=NULL,
	@NotificationCount NVARCHAR(25)=NULL,
	@SendingType NVARCHAR(125)=NULL,
	@UserID INTEGER=NULL,
	@TotalRecords INTEGER OUTPUT
AS
	SET NOCOUNT ON
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
	
		DECLARE @CorporateID INTEGER
		DECLARE @Counter INTEGER
		DECLARE @NotificationSendID INTEGER
		DECLARE @UnReadCount INTEGER
		DECLARE @ReadCount INTEGER
		DECLARE @NotificationCounter INTEGER 
		SET @FirstRecord = (@CurrentPage - 1) * @PageSize
		SET @LastRecord = (@CurrentPage * @PageSize + 1)
  
		DECLARE @Notifications TABLE
		(
			ClientId INTEGER IDENTITY PRIMARY KEY,
			UniqueID INTEGER,
			EntryDate NVARCHAR(50),
			SendingType NVARCHAR(100),
			NotificationCount INTEGER,
			NotificationSendID INTEGER,
			NotificationRead INTEGER NULL,
			EServiceID INTEGER NULL,
			EService Remark NULL,
			NotificationUnRead INTEGER NULL,
			IsActive BIT
		)
		SELECT @CorporateID=ISNULL(CorporateID,0) FROM coc_Corporates(NOLOCK) WHERE UserID=@UserID

		IF @CorporateID =0
			SET @CorporateID=NULL

		INSERT INTO @Notifications(UniqueID,EntryDate,SendingType,NotificationCount,NotificationSendID,EServiceID,EService)
			SELECT NS.NotificationID,CONVERT(NVARCHAR(12),NS.SendingDate ,106),CASE WHEN NS.SendingType=1 THEN 'Now' ELSE 'Scheduled' END [SendingType],COUNT(ISNULL(CF.ConsumerNotificationID,0)) [NotificationCount],
				NS.NotificationSendID,ES.EServiceID,EL.EService
				FROM coc_Notifications NF(NOLOCK)
					INNER JOIN coc_NotificationSends NS(NOLOCK) ON NF.NotificationID = NS.NotificationID AND SendingType != 4
					INNER JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID=NF.EServiceID
					INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
					INNER JOIN coc_ConsumerNotifications CF(NOLOCK) ON NS.NotificationSendID=CF.NotificationSendID 
				WHERE (@NotificationID IS NULL OR NS.NotificationID=@NotificationID) AND
					  (@SendingType IS NULL OR NS.SendingType=@SendingType) AND
					  (@EntryDate IS NULL OR CONVERT(NVARCHAR(12),NS.SendingDate,106)  LIKE '%' + @EntryDate + '%') AND
					  (@CorporateID IS NULL OR ES.CorporateID = @CorporateID ) AND
					  (@EService IS NULL OR EL.EService  LIKE '%'+@EService+ '%') AND
					  (@NotificationCount IS NULL OR NS.NotificationCount LIKE '%' +@NotificationCount+ '%')
				GROUP BY NS.NotificationID,NS.SendingDate,NS.SendingType,NS.NotificationSendID ,ES.EServiceID,EService
				ORDER BY NS.NotificationSendID DESC 
	 
		SELECT @Counter=MIN(ISNULL(NotificationSendID,0)) FROM @Notifications
		WHILE @Counter>0
		BEGIN
			SELECT @UnReadCount=COUNT(HasChecked) FROM coc_ConsumerNotifications(NOLOCK) WHERE HasChecked=0 AND NotificationSendID=@Counter
			SELECT @ReadCount=COUNT(HasChecked) FROM coc_ConsumerNotifications(NOLOCK) WHERE HasChecked=1 AND NotificationSendID=@Counter
			UPDATE @Notifications
				SET NotificationRead = ISNULL(@ReadCount,0),
				 NotificationUnRead = ISNULL(@UnReadCount,0)
			WHERE NotificationSendID=@Counter
			SELECT @Counter=MIN(ISNULL(NotificationSendID,0)) FROM @Notifications WHERE NotificationSendID> @Counter
		END

		IF ISNULL(@HelpView,0)=0
		BEGIN
			IF (@PageSize=0)
			BEGIN
				SELECT ClientId,UniqueID,EntryDate,SendingType,NotificationCount,NotificationSendID,ISNULL(NotificationRead,0) [NotificationRead], 
					ISNULL(NotificationUnRead,0) [NotificationUnRead],IsActive,EServiceID,EService
					FROM @Notifications 
				ORDER BY NotificationSendID DESC 
			END ELSE
				BEGIN
					SELECT ClientId,UniqueID,EntryDate,SendingType,NotificationCount,NotificationSendID,ISNULL(NotificationRead,0) [NotificationRead],
						ISNULL(NotificationUnRead,0) [NotificationUnRead],IsActive,EServiceID,EService
						FROM @Notifications
					WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
						 ORDER BY NotificationSendID DESC 
				END		
		END	ELSE 
			BEGIN
				IF (@PageSize=0)BEGIN
					SELECT ClientId,UniqueID,EntryDate,SendingType,NotificationCount,NotificationSendID,ISNULL(NotificationRead,0) [NotificationRead],
						ISNULL(NotificationUnRead,0) [NotificationUnRead] ,EServiceID,EService
						FROM @Notifications
					 ORDER BY NotificationSendID DESC 
				END ELSE
				BEGIN
					SELECT UniqueID,EntryDate,SendingType,NotificationCount,NotificationSendID,ISNULL(NotificationRead,0) [NotificationRead],	
						ISNULL(NotificationUnRead,0) [NotificationUnRead] ,EServiceID,EService
						FROM @Notifications
					WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
						 ORDER BY NotificationSendID DESC 
				END
			END
		SELECT @TotalRecords=COUNT(ClientId) FROM @Notifications
	SET NOCOUNT OFF



	 
GO
/****** Object:  StoredProcedure [dbo].[ShowPackagePricing]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowPackagePricing] 
	@CurrentPage INTEGER,
	@PageSize INTEGER=0, 
	@LanguageID  INTEGER=1,
	@MessagePackID INTEGER=NULL,
	@EServiceType NVARCHAR(125)=NULL, 
	@PackageType NVARCHAR(125)=NULL,
	@Competition NVARCHAR(125)=NULL,
	@LowerLimit NVARCHAR(125)=NULL,
	@UpperLimit NVARCHAR(125)=NULL,
	@PerNotificationCost  [Amount]=NULL,  
	@NotificationCostJCCI [Percentage]=NULL,
	@SAR  [Amount]=NULL,
	@HelpView BIT=NULL, 
	@UserID INTEGER=NULL, 
	@IsApproved  BIT=NULL,
	@IsActive  BIT=NULL,
	@TotalRecords INTEGER OUTPUT  
AS  
	SET NOCOUNT ON

	IF @LanguageID IS NULL 
		SET @LanguageID=1

	DECLARE @FirstRecord INTEGER  
	DECLARE @LastRecord INTEGER  
	SET @FirstRecord = (@CurrentPage - 1) * @PageSize  
	SET @LastRecord = (@CurrentPage * @PageSize + 1)  

	DECLARE @PackagePricing TABLE  
	(  
		ClientId INTEGER IDENTITY PRIMARY KEY,  
		UniqueID INTEGER,  
		EServiceType [Description], 
		PackageType [Description],
		Competition [NullDescription],
		LowerLimit INTEGER,
		UpperLimit INTEGER, 
		PerNotificationCost  [Amount],  
		SAR [Amount] NULL,
		NotificationCostJCCI [Percentage],
		IsApproved BIT,
		IsActive BIT
	) 

	INSERT INTO @PackagePricing(UniqueID,EServiceType,PackageType,Competition,LowerLimit,UpperLimit,PerNotificationCost,NotificationCostJCCI,IsApproved,IsActive)--,SAR)  
		SELECT MP.PackagePricingID,SL.EnumValue,PT.MessagePackType,CL.EnumValue,MP.PackFrom,MP.PackTo,MP.MessageRate,MP.MessagePercentage,MP.IsApproved,MP.IsActive
			FROM coc_PackagePricings MP(NOLOCK)  
				INNER JOIN coc_EnumValues ST(NOLOCK) ON MP.ServiceTypeID=ST.EnumValueID
				INNER JOIN coc_EnumValueLanguages SL(NOLOCK) ON ST.EnumValueID=SL.EnumValueID AND SL.LanguageID=@LanguageID
				LEFT JOIN coc_EnumValues CT(NOLOCK) ON MP.CompetitionID=CT.EnumValueID
				LEFT JOIN coc_EnumValueLanguages CL(NOLOCK) ON CT.EnumValueID=CL.EnumValueID AND CL.LanguageID=@LanguageID
				INNER JOIN coc_MessagePackTypes PT(NOLOCK) ON MP.MessagePackTypeID=PT.MessagePackTypeID
			WHERE (@MessagePackID IS NULL OR PackagePricingID=@MessagePackID) AND   
				(@EServiceType IS NULL OR SL.EnumValue LIKE  '%' +@EServiceType +'%') AND 
				(@PackageType IS NULL OR PT.MessagePackType LIKE '%'+ @PackageType +'%') AND 
				(@LowerLimit IS NULL OR MP.PackFrom LIKE '%'+ @LowerLimit +'%') AND
				(@UpperLimit IS NULL OR MP.PackTo LIKE '%'+ @UpperLimit +'%') AND 
				(@IsApproved IS NULL OR MP.IsApproved=@IsApproved) AND
				(@IsActive IS NULL OR MP.IsActive=@IsActive) AND
				(@Competition IS NULL OR CL.EnumValue LIKE '%'+ @Competition +'%') AND 
				(@PerNotificationCost IS NULL OR MessageRate=@PerNotificationCost) AND
				(@NotificationCostJCCI IS NULL OR MessagePercentage=@NotificationCostJCCI) 
			ORDER BY AddDate DESC 

	
	IF ISNULL(@HelpView,0)=0
	BEGIN
		IF (@PageSize=0)BEGIN  
			SELECT ClientId,UniqueID,EServiceType,PackageType,Competition,LowerLimit,UpperLimit,PerNotificationCost,IsApproved,IsActive 
				FROM @PackagePricing  
		END ELSE  
		BEGIN  
			SELECT ClientId,UniqueID,EServiceType,PackageType,Competition,LowerLimit,UpperLimit,PerNotificationCost,IsApproved,IsActive 
				FROM @PackagePricing  
			WHERE ClientId > @FirstRecord AND ClientId < @LastRecord  
		END
	END
	ELSE BEGIN
		IF (@PageSize=0)BEGIN  
			SELECT UniqueID,EServiceType,PackageType,Competition,LowerLimit,UpperLimit,PerNotificationCost,NotificationCostJCCI,IsApproved,IsActive 
				FROM @PackagePricing  
		END ELSE  
		BEGIN  
			SELECT UniqueID,EServiceType,PackageType,Competition,LowerLimit,UpperLimit,PerNotificationCost,NotificationCostJCCI,IsApproved,IsActive 
				FROM @PackagePricing  
			WHERE ClientId > @FirstRecord AND ClientId < @LastRecord  
		END
	END
	SELECT @TotalRecords=COUNT(ClientId) FROM @PackagePricing
	
	SET NOCOUNT OFF 


GO
/****** Object:  StoredProcedure [dbo].[ShowPointRedmption]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowPointRedmption]
	@CurrentPage INTEGER,
	@PageSize INTEGER=0, 
	@LanguageID  INTEGER=NULL,
	@RedemptionPlanID INTEGER=NULL, 
	@PlanName[NullName]=NULL, 
	@RequiredLoyaltyPoints INTEGER=NULL,
	@Amount [NullAmount]=NULL,
	@Item [NullName]=NULL, 
	@Remarks [Remark]=NULL,
	@IsActive BIT=NULL,
	@IsApproved BIT=NULL,
	@HelpView BIT=NULL, 
	@UserID INTEGER=NULL, 
	@TotalRecords INTEGER OUTPUT  
AS  
	SET NOCOUNT ON
	  
	DECLARE @FirstRecord INTEGER  
	DECLARE @LastRecord INTEGER  
	SET @FirstRecord = (@CurrentPage - 1) * @PageSize  
	SET @LastRecord = (@CurrentPage * @PageSize + 1)  

	DECLARE @PointRedmption TABLE  
	(  
		ClientId INTEGER IDENTITY PRIMARY KEY,  
		UniqueID INTEGER, 
		Item [NullName],  
		PlanName[NullName], 
		RequiredLoyaltyPoints INTEGER,
		Amount [NullAmount],		
		Remarks [Remark],
		IsActive BIT,
		IsApproved BIT		
	)  
	INSERT INTO @PointRedmption(UniqueID,PlanName,RequiredLoyaltyPoints,Amount,Item,Remarks,IsActive,IsApproved)  
		SELECT RP.RedemptionPlanID,ISNULL(RL.RedemptionPlan,'')RedemptionPlan,RP.LoyaltyPoint,RP.LoyaltyAmount,ISNULL(RP.LoyaltyItem,'')LoyaltyItem,RP.Remarks,RP.IsActive,RP.IsApproved
			FROM coc_RedemptionPlans (NOLOCK)  RP
				LEFT JOIN coc_RedemptionPlanLanguages (NOLOCK) RL ON RL.RedemptionPlanID=RP.RedemptionPlanID
			WHERE (@RedemptionPlanID IS NULL OR RP.RedemptionPlanID=@RedemptionPlanID) AND  
			    (@PlanName IS NULL OR RL.RedemptionPlan LIKE '%' +@PlanName+'%' ) AND
				(@RequiredLoyaltyPoints IS NULL OR LoyaltyPoint =@RequiredLoyaltyPoints) AND 
				(@Amount IS NULL OR LoyaltyAmount =@Amount) AND
				(@Item IS NULL OR LoyaltyItem LIKE '%' +@Item+'%') AND
				(@Remarks IS NULL OR Remarks LIKE '%' +@Remarks+'%' ) AND
				(@IsActive IS NULL OR IsActive=@IsActive) AND
				(@IsApproved IS NULL OR IsApproved=@IsApproved) AND RL.LanguageID=@LanguageID
			ORDER BY RP.RedemptionPlanID DESC
	IF ISNULL(@HelpView,0)=0
	BEGIN
		IF (@PageSize=0)BEGIN  
			SELECT ClientId,UniqueID,Item,PlanName,RequiredLoyaltyPoints,Amount,Remarks,IsActive,IsApproved
				FROM @PointRedmption  
		END ELSE  
		BEGIN  
			SELECT ClientId,UniqueID,Item,PlanName,RequiredLoyaltyPoints,Amount,Remarks,IsActive,IsApproved
				FROM @PointRedmption  
			WHERE ClientId > @FirstRecord AND ClientId < @LastRecord  
		END
	END
	ELSE BEGIN
		IF (@PageSize=0)BEGIN  
			SELECT UniqueID,Item,PlanName,RequiredLoyaltyPoints,Amount,Remarks,IsActive
				FROM @PointRedmption  
		END ELSE  
		BEGIN  
			SELECT UniqueID,Item,PlanName,RequiredLoyaltyPoints,Amount,Remarks,IsActive,IsApproved
				FROM @PointRedmption  
			WHERE ClientId > @FirstRecord AND ClientId < @LastRecord  
		END
	END
	SELECT @TotalRecords=COUNT(ClientId) FROM @PointRedmption 
	SET NOCOUNT OFF 

GO
/****** Object:  StoredProcedure [dbo].[ShowPromotionalTemplate]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowPromotionalTemplate] 
	@CurrentPage INTEGER,
	@PageSize INTEGER=0, 
	@LanguageID  INTEGER=1,
--	@MessageTemplateID INTEGER=NULL, 
	@TemplateTitle [NullDescription]=NULL,
	@Template [Remark]=NULL,
	@TemplateType [tinyint]=NULL, 
	@IsActive BIT=NULL,
	@HelpView BIT=NULL, 
	@UserID INTEGER=NULL, 
	@TotalRecords INTEGER OUTPUT  
AS  
	SET NOCOUNT ON
	  
	DECLARE @FirstRecord INTEGER  
	DECLARE @LastRecord INTEGER  
	SET @FirstRecord = (@CurrentPage - 1) * @PageSize  
	SET @LastRecord = (@CurrentPage * @PageSize + 1)  

	DECLARE @PromotionalTemplate TABLE  
	(  
		ClientId INTEGER IDENTITY PRIMARY KEY,  
		UniqueID INTEGER,  
		TemplateTitle [NullDescription],
		Template [Remark],
		TemplateType [tinyint], 
		LanguageID INTEGER,
		IsActive BIT
	)  
	INSERT INTO @PromotionalTemplate(UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive)  
		SELECT CM.MessageTemplateID,TL.TemplateTitle,TL.Template,TemplateType,TL.LanguageID,IsActive 
			FROM coc_MessageTemplates CM(NOLOCK)  
				INNER JOIN coc_MessageTemplateLanguages TL(NOLOCK) ON CM.MessageTemplateID=TL.MessageTemplateID AND TL.LanguageID=@LanguageID
			WHERE --(@MessageTemplateID IS NULL OR CM.MessageTemplateID=@MessageTemplateID) AND  
			    (@TemplateTitle IS NULL OR TemplateTitle=@TemplateTitle) AND
				(@Template IS NULL OR Template=@Template) AND
				(@TemplateType IS NULL OR TemplateType=@TemplateType) AND
				(@IsActive IS NULL OR IsActive=@IsActive) AND TemplateType=1 
			ORDER BY CM.MessageTemplateID DESC
	IF ISNULL(@HelpView,0)=0
	BEGIN
		IF (@PageSize=0)BEGIN  
			SELECT ClientId,UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive
				FROM @PromotionalTemplate  
		END ELSE  
		BEGIN  
			SELECT ClientId,UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive
				FROM @PromotionalTemplate  
			WHERE ClientId > @FirstRecord AND ClientId < @LastRecord  
		END
	END
	ELSE BEGIN
		IF (@PageSize=0)BEGIN  
			SELECT UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive
				FROM @PromotionalTemplate  
		END ELSE  
		BEGIN  
			SELECT UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive
				FROM @PromotionalTemplate  
			WHERE ClientId > @FirstRecord AND ClientId < @LastRecord  
		END
	END
	SELECT @TotalRecords=COUNT(ClientId) FROM @PromotionalTemplate 
	SET NOCOUNT OFF 





GO
/****** Object:  StoredProcedure [dbo].[ShowRetailOutlet]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 CREATE PROCEDURE [dbo].[ShowRetailOutlet]  
	@CurrentPage INTEGER,
	@PageSize INTEGER=0,
	@LanguageID  INTEGER=1,
	@RetailOutletID INTEGER=NULL,
	@RetailOutlet Description=NULL, 
	@ContactPerson Description=NULL,
	@CorporateName NullCode=NULL,
	@Country [NullDescription]=NULL,
	@City [NullDescription]=NULL,
	@HelpView BIT=NULL,
	@IsActive BIT=NULL,
	@UserID INTEGER=NULL,
	@TotalRecords INTEGER OUTPUT

AS
	SET NOCOUNT ON
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		DECLARE @RoleID INTEGER
		DECLARE @CorporateID INTEGER

		SET @FirstRecord = (@CurrentPage - 1) * @PageSize
		SET @LastRecord = (@CurrentPage * @PageSize + 1)

		SELECT @RoleID =RoleID FROM coc_Users(NOLOCK) WHERE UserID =@UserID
		SELECT @CorporateID=CorporateID FROM coc_Corporates(NOLOCK) WHERE UserID =@UserID
		
		DECLARE @RetailOutlets TABLE
		(
			ClientId INTEGER IDENTITY PRIMARY KEY,
			UniqueID INTEGER,
			RetailOutlet [Description], 
			ContactPerson NVARCHAR(200),
			CorporateName NullCode,
			Country NullDescription,
			City NullDescription,
			IsActive BIT 
		)

		INSERT INTO @RetailOutlets(UniqueID,RetailOutlet,ContactPerson,CorporateName,Country,City,IsActive )
			SELECT RT.RetailOutletID,ISNULL(RL.RetailOutlet,'')RetailOutlet,RT.ContactPerson ,CP.CRNumber,CL.Country,CT.City,RT.IsActive
				FROM coc_RetailOutlets RT(NOLOCK)
					INNER JOIN coc_Corporates CP(NOLOCK) ON RT.CorporateID=CP.CorporateID
					LEFT JOIN coc_RetailOutletLanguages RL(NOLOCK) ON RT.RetailOutletID=RL.RetailOutletID AND RL.LanguageID = @LanguageID
					LEFT JOIN coc_CountryLanguages CL(NOLOCK) ON RT.CountryID=CL.CountryID AND CL.LanguageID=@LanguageID
					LEFT JOIN coc_CityLanguages CT(NOLOCK) ON RT.CityID=CT.CityID AND CT.LanguageID=@LanguageID
				WHERE (@RetailOutletID IS NULL OR RT.RetailOutletID=@RetailOutletID) AND 
					  (@RetailOutlet IS NULL OR RL.RetailOutlet LIKE +'%'+@RetailOutlet+'%') AND
					  (@ContactPerson IS NULL OR RT.ContactPerson LIKE +'%'+@ContactPerson+'%') AND
					  (@CorporateName IS NULL OR CP.CRNumber LIKE +'%'+@CorporateName+'%') AND
					  (@Country IS NULL OR CL.Country LIKE +'%'+@Country+'%') AND
					  (@City IS NULL OR CT.City LIKE +'%'+@City+'%') AND
					  (@IsActive IS NULL OR RT.IsActive=@IsActive) AND
					RT.CorporateID = CASE WHEN @RoleID=1 THEN RT.CorporateID ELSE @CorporateID END
				ORDER BY RT.RetailOutletID DESC

		IF ISNULL(@HelpView,0)=0
		BEGIN
			IF (@PageSize=0)BEGIN
					SELECT ClientId,UniqueID,RetailOutlet,ContactPerson,CorporateName,Country,City,IsActive 
						FROM @RetailOutlets
			END ELSE
				BEGIN
					SELECT ClientId,UniqueID,RetailOutlet,ContactPerson,CorporateName,Country,City,IsActive 
							FROM @RetailOutlets
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END		
		END	ELSE 
			BEGIN
				IF (@PageSize=0)BEGIN
					SELECT UniqueID,RetailOutlet,ContactPerson,CorporateName,Country,City,IsActive 
						FROM @RetailOutlets
				END ELSE
				BEGIN
					SELECT UniqueID,RetailOutlet,ContactPerson,CorporateName,Country,City,IsActive 
							FROM @RetailOutlets
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END
			END
		SELECT @TotalRecords=COUNT(ClientId) FROM @RetailOutlets
	SET NOCOUNT OFF






GO
/****** Object:  StoredProcedure [dbo].[ShowScreenView]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowScreenView]  
 @ScreenCode [NullCode]=NULL,  
 @LanguageID INTEGER =1 
AS  
 --Table 0 [ScreenViews]  
 if(@LanguageID=0) set @LanguageID= 1;
 SELECT SV.ScreenViewID ViewID,SV.ViewName,SV.ScreenID,SV.TableName [ProcedureName]  
  FROM COC_ScreenViews SV(NOLOCK)   
   INNER JOIN COC_Screens SR(NOLOCK) ON SR.ScreenID=SV.ScreenID  
  WHERE (@ScreenCode IS NULL OR SR.ScreenID=@ScreenCode)  
  
 --Table 1 [Resources]  
 SELECT [ResourceKey] [Key],[ResourceValue] [Value]  
  FROM COC_Resources RC(NOLOCK)  
   INNER JOIN COC_Screens SR(NOLOCK) ON SR.ScreenID=RC.ScreenID  
  WHERE (@ScreenCode IS NULL OR SR.ScreenID=@ScreenCode) AND  
   [LanguageID]=@LanguageID  AND ScreenViewID IS NOT NULL --   [ResourceKey]='VIEW_TITLE'  
   
  
  
GO
/****** Object:  StoredProcedure [dbo].[ShowTicketConfiguration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE PROCEDURE [dbo].[ShowTicketConfiguration]
	@CurrentPage INTEGER,
	@PageSize INTEGER=0,
	@LanguageID  INTEGER=1,
	@TicketID INTEGER=NULL,
	@EService [Code]=NULL, 
	@Event [Description]=NULL,
	@EventType NVARCHAR(125)=NULL,
	@EventLocation NVARCHAR(125)=NULL,
	@EventDate [datetime]=NULL,
	@EventEndDate [datetime]=NULL,
	@EventCost [Amount]=NULL,
	@HelpView BIT=NULL,
	@IsActive BIT=NULL,
	@UserID INTEGER=NULL,
	@TotalRecords INTEGER OUTPUT

AS
	SET NOCOUNT ON
		DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		DECLARE @CorporateID INTEGER
		SET @FirstRecord = (@CurrentPage - 1) * @PageSize
		SET @LastRecord = (@CurrentPage * @PageSize + 1)
		DECLARE @Ticket TABLE
		(
			ClientId INTEGER IDENTITY PRIMARY KEY,
			UniqueID INTEGER,
			EService NVARCHAR(50),
			[Event] NVARCHAR(MAX),
			EventDate [datetime],
			EventType NVARCHAR(100),	
			EventLocation NVARCHAR(100),	
			EventEndDate [datetime],
			EventCost [Amount],
			IsActive BIT
		)
		
		SELECT @CorporateID=CorporateID FROM coc_Corporates (NOLOCK) WHERE UserID =@UserID

		INSERT INTO @Ticket(UniqueID,EService,[Event],EventDate,EventType,EventLocation,EventEndDate,EventCost,IsActive)
			SELECT TT.EServiceEventID,EL.EService EService,TT.EventDescription,TT.EventDate,EV.EnumValue,RL.RetailOutlet,TT.LastDate,TT.EventCost,TT.IsActive
				FROM coc_EServiceEvents (NOLOCK)TT
					 LEFT JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID=TT.EServiceID
					 LEFT JOIN coc_EServiceLanguages EL(NOLOCK) ON TT.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
					 INNER JOIN coc_EnumValueLanguages EV(NOLOCK)ON EV.EnumValueID =TT.EventTypeID  AND EV.LanguageID=@LanguageID
					 INNER JOIN coc_EServiceEventOutlets EO(NOLOCK)ON EO.EServiceEventID=TT.EServiceEventID
					 INNER JOIN coc_RetailOutletLanguages RL(NOLOCK)ON RL.RetailOutletID=EO.RetailOutletID AND RL.LanguageID=@LanguageID
					WHERE (@TicketID IS NULL OR TT.EServiceEventID=@TicketID) AND
						(@Event IS NULL OR TT.EventDescription LIKE +'%'+@Event+'%') AND
						(@EService IS NULL OR EL.EService LIKE +'%'+@EService+'%') AND
						(@EventType IS NULL OR EV.EnumValue LIKE +'%'+@EventType+'%') AND
						(@EventLocation IS NULL OR RL.RetailOutlet LIKE +'%'+@EventLocation+'%') AND 
						(@EventEndDate IS NULL OR TT.LastDate = @EventEndDate ) AND
						(@EventDate IS NULL OR TT.EventDate = @EventDate ) AND 
						(@EventDate IS NULL OR TT.EventCost = @EventDate ) AND  
						 (@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND 
						(@IsActive IS NULL OR TT.IsActive=@IsActive) ORDER BY TT.EServiceEventID DESC
		IF ISNULL(@HelpView,0)=0
		BEGIN
			IF (@PageSize=0)BEGIN
					SELECT ClientId,UniqueID,EService,[Event],EventDate,EventType,EventLocation,EventEndDate,EventCost,IsActive
						FROM @Ticket
			END ELSE
				BEGIN
					SELECT ClientId,UniqueID,EService,[Event],EventDate,EventType,EventLocation,EventEndDate,EventCost,IsActive
							FROM @Ticket
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END		
		END	ELSE 
			BEGIN
				IF (@PageSize=0)BEGIN
					SELECT UniqueID,EService,[Event],EventDate,EventType,EventLocation,EventEndDate,EventCost,IsActive
						FROM @Ticket
				END ELSE
				BEGIN
					SELECT UniqueID,EService,[Event],EventDate,EventType,EventLocation,EventEndDate,EventCost,IsActive
							FROM @Ticket
						WHERE ClientId > @FirstRecord AND ClientId < @LastRecord
				END
			END
		SELECT @TotalRecords=COUNT(ClientId) FROM @Ticket
	SET NOCOUNT OFF



 
GO
/****** Object:  StoredProcedure [dbo].[ShowTicketNotificationTemplate]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowTicketNotificationTemplate] 
	@CurrentPage INTEGER,
	@PageSize INTEGER=0, 
	@LanguageID  INTEGER=1,
--	@MessageTemplateID INTEGER=NULL, 
	@TemplateTitle [NullDescription]=NULL,
	@Template [Remark]=NULL,
	@TemplateType [tinyint]=NULL, 
	@IsActive BIT=NULL,
	@HelpView BIT=NULL, 
	@UserID INTEGER=NULL, 
	@TotalRecords INTEGER OUTPUT  
AS  
	SET NOCOUNT ON
	  
	DECLARE @FirstRecord INTEGER  
	DECLARE @LastRecord INTEGER  
	SET @FirstRecord = (@CurrentPage - 1) * @PageSize  
	SET @LastRecord = (@CurrentPage * @PageSize + 1)  

	DECLARE @PromotionalTemplate TABLE  
	(  
		ClientId INTEGER IDENTITY PRIMARY KEY,  
		UniqueID INTEGER,  
		TemplateTitle [NullDescription],
		Template [Remark],
		TemplateType [tinyint], 
		LanguageID INTEGER,
		IsActive BIT
	)  
	INSERT INTO @PromotionalTemplate(UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive)  
		SELECT CM.MessageTemplateID,TL.TemplateTitle,TL.Template,TemplateType,TL.LanguageID,IsActive 
			FROM coc_MessageTemplates CM(NOLOCK)  
				INNER JOIN coc_MessageTemplateLanguages TL(NOLOCK) ON CM.MessageTemplateID=TL.MessageTemplateID AND TL.LanguageID=@LanguageID
			WHERE --(@MessageTemplateID IS NULL OR CM.MessageTemplateID=@MessageTemplateID) AND  
			    (@TemplateTitle IS NULL OR TemplateTitle LIKE '%' +@TemplateTitle +'%') AND
				(@Template IS NULL OR Template LIKE '%' +@Template + '%') AND
				(@TemplateType IS NULL OR TemplateType=@TemplateType) AND
				(@IsActive IS NULL OR IsActive=@IsActive) AND TemplateType=3 
			ORDER BY CM.MessageTemplateID DESC
	IF ISNULL(@HelpView,0)=0
	BEGIN
		IF (@PageSize=0)BEGIN  
			SELECT ClientId,UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive
				FROM @PromotionalTemplate  
		END ELSE  
		BEGIN  
			SELECT ClientId,UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive
				FROM @PromotionalTemplate  
			WHERE ClientId > @FirstRecord AND ClientId < @LastRecord  
		END
	END
	ELSE BEGIN
		IF (@PageSize=0)BEGIN  
			SELECT UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive
				FROM @PromotionalTemplate  
		END ELSE  
		BEGIN  
			SELECT UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive
				FROM @PromotionalTemplate  
			WHERE ClientId > @FirstRecord AND ClientId < @LastRecord  
		END
	END
	SELECT @TotalRecords=COUNT(ClientId) FROM @PromotionalTemplate 
	SET NOCOUNT OFF 

GO
/****** Object:  StoredProcedure [dbo].[ShowTicketTemplate]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ShowTicketTemplate] 
	@CurrentPage INTEGER,
	@PageSize INTEGER=0, 
	@LanguageID  INTEGER=1,
--	@MessageTemplateID INTEGER=NULL, 
	@TemplateTitle [NullDescription]=NULL,
	@Template [Remark]=NULL,
	@TemplateType [tinyint]=NULL, 
	@IsActive BIT=NULL,
	@HelpView BIT=NULL, 
	@UserID INTEGER=NULL, 
	@TotalRecords INTEGER OUTPUT  
AS  
	SET NOCOUNT ON
	  
	DECLARE @FirstRecord INTEGER  
	DECLARE @LastRecord INTEGER  
	SET @FirstRecord = (@CurrentPage - 1) * @PageSize  
	SET @LastRecord = (@CurrentPage * @PageSize + 1)  

	DECLARE @PromotionalTemplate TABLE  
	(  
		ClientId INTEGER IDENTITY PRIMARY KEY,  
		UniqueID INTEGER,  
		TemplateTitle [NullDescription],
		Template [Remark],
		TemplateType [tinyint], 
		LanguageID INTEGER,
		IsActive BIT
	)  
	INSERT INTO @PromotionalTemplate(UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive)  
		SELECT CM.MessageTemplateID,TL.TemplateTitle,TL.Template,TemplateType,TL.LanguageID,IsActive 
			FROM coc_MessageTemplates CM(NOLOCK)  
				INNER JOIN coc_MessageTemplateLanguages TL(NOLOCK) ON CM.MessageTemplateID=TL.MessageTemplateID AND TL.LanguageID=@LanguageID
			WHERE --(@MessageTemplateID IS NULL OR CM.MessageTemplateID=@MessageTemplateID) AND  
			    (@TemplateTitle IS NULL OR TemplateTitle=@TemplateTitle) AND
				(@Template IS NULL OR Template=@Template) AND
				(@TemplateType IS NULL OR TemplateType=@TemplateType) AND
				(@IsActive IS NULL OR IsActive=@IsActive) AND TemplateType=3 
			ORDER BY CM.MessageTemplateID DESC
	IF ISNULL(@HelpView,0)=0
	BEGIN
		IF (@PageSize=0)BEGIN  
			SELECT ClientId,UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive
				FROM @PromotionalTemplate  
		END ELSE  
		BEGIN  
			SELECT ClientId,UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive
				FROM @PromotionalTemplate  
			WHERE ClientId > @FirstRecord AND ClientId < @LastRecord  
		END
	END
	ELSE BEGIN
		IF (@PageSize=0)BEGIN  
			SELECT UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive
				FROM @PromotionalTemplate  
		END ELSE  
		BEGIN  
			SELECT UniqueID,TemplateTitle,Template,TemplateType,LanguageID,IsActive
				FROM @PromotionalTemplate  
			WHERE ClientId > @FirstRecord AND ClientId < @LastRecord  
		END
	END
	SELECT @TotalRecords=COUNT(ClientId) FROM @PromotionalTemplate 
	SET NOCOUNT OFF 






GO
/****** Object:  StoredProcedure [dbo].[sp_DeleteNotifications]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_DeleteNotifications]
	@idXml XML
	
AS
BEGIN

	SET NOCOUNT ON;
	
		DECLARE @handle INTEGER;
		exec sp_xml_preparedocument @handle out, @idXml
		
		UPDATE coc_ServiceTaskNotification SET RowStatus=0 WHERE Id IN
			(select * from openxml(@handle, '/ECoupon/Notification', 2) with (id INTEGER))
			
END

GO
/****** Object:  StoredProcedure [dbo].[sp_GetEServicesInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_GetEServicesInformation]
	 @EServiceID INTEGER=NULL,
	 @CorporateID INTEGER=NULL,
	 @ServiceNumber [Code]=NULL,
	 @ServiceTypeID INTEGER=NULL,
	 @ServiceSubTypeID INTEGER=NULL,
	 @CompetitionID INTEGER=NULL,
	 @IsBarcodeUsed BIT=0,
	 @LanguageID INTEGER=1,
	 @IsExtension BIT=0,
	 @IsActive BIT=NULL
AS 
SET NOCOUNT ON 
		DECLARE @Counter INTEGER
		DECLARE @UnReadCount INTEGER
		DECLARE @ReadCount INTEGER
		DECLARE @TotalNotifications INTEGER
		DECLARE @CSUserID INTEGER
		DECLARE @RetailOutlet INTEGER

		DECLARE @Notifications AS TABLE
		(
			ClientId INTEGER IDENTITY PRIMARY KEY,
			NotificationCount INTEGER,
			--NotificationSendID INTEGER,
			EServiceID INTEGER,
			NotificationRead INTEGER NULL,
			NotificationUnRead INTEGER NULL 
		)
		DECLARE @EServiceNotifications AS TABLE
		(
			EServiceID INTEGER,
			ServiceNumber [NullCode],
			EService [Remark],
			ServiceDate DATETIME, 
			FromDate VARCHAR(12),
			ToDate VARCHAR(12),
			CorporateID INTEGER,
			ServiceTypeID INTEGER,
			ServiceSubTypeID INTEGER,
			CompetitionID INTEGER,
			MessagePackID INTEGER,
			IsActive BIT NOT NULL DEFAULT 0,
			IsBarcodeUsed BIT,
			HasCity BIT,
			HasGender BIT,
			HasAgeGroup BIT,
			ResendCount BIT,
			NotificationCount INTEGER,
			PackageAmount [NullAmount], 
			MessagePackType [NullDescription],
			InvoiceNumber [NullCode],
			CanResend BIT
		)


		INSERT INTO @Notifications(NotificationCount,EServiceID)--NotificationSendID)
			SELECT  COUNT(ISNULL(CF.ConsumerNotificationID,0)) [NotificationCount],ES.EServiceID  
				FROM coc_Notifications NF(NOLOCK)
					INNER JOIN coc_NotificationSends NS(NOLOCK) ON NF.NotificationID = NS.NotificationID  AND NS.SendingType != 4
					INNER JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID=NF.EServiceID
					INNER JOIN coc_ConsumerNotifications CF(NOLOCK) ON NS.NotificationSendID=CF.NotificationSendID 
				WHERE (@CorporateID IS NULL OR ES.CorporateID = @CorporateID ) AND (@EServiceID IS NULL OR ES.EServiceID=@EServiceID) 
				GROUP BY NS.NotificationID,NS.SendingDate,NS.SendingType,ES.EServiceID 
				ORDER BY ES.EServiceID   DESC 
	  
		SELECT @Counter=MIN(ISNULL(EServiceID,0)) FROM @Notifications
		WHILE @Counter>0
		BEGIN

			SELECT @UnReadCount=COUNT(CN.HasChecked) FROM coc_ConsumerNotifications(NOLOCK) CN
				INNER JOIN coc_NotificationSends NS(NOLOCK) ON CN.NotificationSendID=NS.NotificationSendID AND NS.SendingType !=4
				INNER JOIN coc_Notifications NF(NOLOCK) ON NS.NotificationID=NF.NotificationID AND NF.EServiceID=@Counter
			WHERE CN.HasChecked=0  

			SELECT @ReadCount=COUNT(HasChecked) FROM coc_ConsumerNotifications CN(NOLOCK) 
				INNER JOIN coc_NotificationSends NS(NOLOCK) ON CN.NotificationSendID=NS.NotificationSendID  AND NS.SendingType !=4
				INNER JOIN coc_Notifications NF(NOLOCK) ON  NF.NotificationID=NS.NotificationID AND NF.EServiceID=@Counter
			WHERE HasChecked=1 
			 
			UPDATE @Notifications
				SET NotificationRead = ISNULL(@ReadCount,0),
				 NotificationUnRead = ISNULL(@UnReadCount,0),
				 NotificationCount = ISNULL(@ReadCount,0)+ISNULL(@UnReadCount,0) 
			WHERE EServiceID=@Counter
			SELECT @Counter=MIN(ISNULL(EServiceID,0)) FROM @Notifications WHERE EServiceID> @Counter
		END
	--Tables[0] EServices
	SELECT ES.EServiceID,ES.ServiceNumber,EL.EService+'-'+ES.ServiceNumber [EService],ES.ServiceDate, CONVERT(VARCHAR(12),ES.FromDate,103) [FromDate],CONVERT(VARCHAR(12),ES.ToDate,103) [ToDate],
		ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.MessagePackTypeID [MessagePackID],ES.IsActive,ES.IsBarcodeUsed,MT.HasCity,
		MT.HasGender,MT.HasAgeGroup,MT.ResendCount,EI.NotificationCount,EI.PackageAmount [PackageAmount], MT.MessagePackType [MessagePackType],EI.InvoiceNumber,MT.CanResend --EI.
			FROM coc_EServices ES(NOLOCK) 
				INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
				INNER JOIN coc_EServiceInvoices  EI(NOLOCK) ON EI.EServiceID=ES.EServiceID AND EI.IsExtension=@IsExtension
				INNER JOIN coc_MessagePackTypes MT(NOLOCK) ON ES.MessagePackTypeID=MT.MessagePackTypeID
			WHERE(@EServiceID IS NULL OR ES.EServiceID=@EServiceID) AND
				(@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND
				(@ServiceTypeID IS NULL OR ES.ServiceTypeID=@ServiceTypeID) AND
				(@ServiceNumber IS NULL OR ES.ServiceNumber=@ServiceNumber) AND
				(@ServiceSubTypeID IS NULL OR ES.ServiceSubTypeID=@ServiceSubTypeID) AND
				(@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID) AND
				(@IsBarcodeUsed IS NULL OR ES.IsBarcodeUsed=@IsBarcodeUsed) AND  
				(@IsActive IS NULL OR ES.IsActive=@IsActive) --AND ES.IsPaymentDone=1
	
	--Tables[1] EServiceLocations
	SELECT CASE WHEN EL.EServiceLocationID IS NULL THEN 0 ELSE 1 END [Selected],RO.RetailOutletID, RL.RetailOutlet [Outlet]
		FROM coc_RetailOutlets RO(NOLOCK)
			INNER JOIN coc_RetailOutletLanguages RL(NOLOCK) ON RO.RetailOutletID=RL.RetailOutletID AND RO.CorporateID=@CorporateID AND RL.LanguageID=@LanguageID
	LEFT JOIN coc_EServiceLocations EL(NOLOCK) ON RO.RetailOutletID = EL.RetailOutletID AND EServiceID=@EServiceID

	--Tables[2] Notifications
	SELECT CN.EServiceID,CS.NotificationSendID,ISNULL(NF.NotificationRead ,0)+ISNULL(NF.NotificationUnRead,0) [NotificationSend], NF.NotificationRead ,--(ISNULL(CN.NotificationRead,0)) [NotificationRead] ,
		ISNULL(ResendCounter,0) [Resent] ,NF.NotificationUnRead  
		FROM coc_Notifications CN(NOLOCK) --CN.EServiceID,
			INNER JOIN coc_NotificationSends CS(NOLOCK) ON CN.NotificationID=CS.NotificationID AND CS.SendingType !=4
			INNER JOIN coc_ConsumerNotifications CF(NOLOCK) ON CS.NotificationSendID=CF.NotificationSendID 
			INNER JOIN @Notifications NF ON NF.EServiceID=CN.EServiceID
		WHERE (@EServiceID IS NULL OR CN.EServiceID=@EServiceID)
	 
	----Tables[3] CouponEServices
	SELECT ES.EServiceID,ES.ServiceNumber,EL.EService+'-'+ES.ServiceNumber [EService],CONVERT(VARCHAR(12),ES.ServiceDate,103) ServiceDate,CONVERT(VARCHAR(12),ES.FromDate,103) FromDate,CONVERT(VARCHAR(12),ES.ToDate,103) ToDate,
			ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.MessagePackTypeID [MessagePackID],ES.IsActive,ES.IsBarcodeUsed 
		 FROM coc_EServices ES(NOLOCK) 
			INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
	WHERE ES.EServiceID NOT IN(SELECT EC.EServiceID FROM coc_ECoupons EC(NOLOCK)) AND ES.CompetitionID IS NOT NULL AND
				(@CorporateID IS NULL OR ES.CorporateID=@CorporateID)  AND ES.IsPaymentDone=1
	 
	----Tables[4] ECoupons
	SELECT COUNT(ES.EServiceID) [AvailableCount],EL.EService+'-'+ES.ServiceNumber  [EcouponName], ES.EServiceID ,NF.NotificationID
		FROM coc_EServices ES(NOLOCK)
			INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
			INNER JOIN coc_Notifications NF(NOLOCK) ON ES.EServiceID=NF.EServiceID
			INNER JOIN coc_EServiceBarcodes EB(NOLOCK) ON NF.NotificationID=EB.NotificationID
	WHERE ES.ServiceTypeID=@ServiceTypeID AND 
		(@CompetitionID IS NULL OR CompetitionID=@CompetitionID) AND 
		(@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND
		EB.IsUsed=0 AND (@EServiceID IS NULL OR ES.EServiceID=@EServiceID)  AND ES.IsPaymentDone=1
		GROUP BY ES.EServiceID,NF.NotificationID,EL.EService,ES.ServiceNumber 
		
	SELECT @CSUserID=CU.CorporateID,@RetailOutlet=RetailOutletID
		FROM coc_CorporateUsers(NOLOCK) CU
	WHERE CU.UserID=@CorporateID

    --Tables[5] EServiceCoupons 
	SELECT EC.EServiceID,EC.ECouponID, EL.EService [EcouponName]
		FROM coc_ECoupons EC(NOLOCK)
			LEFT JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  AND ES.IsPaymentDone=1
			INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
			INNER JOIN coc_ECouponOutlets EO(NOLOCK) ON EC.ECouponID=EO.ECouponID AND EO.RetailOutletID=1
	WHERE EntryTypeID=41 AND EC.IsActive=1
	-- AND ES.CorporateID=@CSUserID AND  CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)

	----Table[6] EServiceLanguages
	 SELECT EL.EServiceID,EL.EService,EL.LanguageID FROM coc_EServiceLanguages(NOLOCK) EL WHERE EServiceID=@EServiceID

	----Table[7] ShowCount
	 SELECT SetupValue [ShowCount] fROM COC_SystemSetups (NOLOCK) WHERE SystemSetupID=502

	 SELECT @TotalNotifications=SUM(NotificationCount) FROM coc_EServiceInvoices(NOLOCK) WHERE EServiceID=@EServiceID
	--Tables[8] EServicesNotification
	INSERT INTO @EServiceNotifications
		SELECT ES.EServiceID,ES.ServiceNumber,EL.EService+'-'+ES.ServiceNumber [EService],ES.ServiceDate, CONVERT(VARCHAR(12),ES.FromDate,103) [FromDate],CONVERT(VARCHAR(12),ES.ToDate,103) [ToDate],
			ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.MessagePackTypeID [MessagePackID],ES.IsActive,ES.IsBarcodeUsed,MT.HasCity,
			MT.HasGender,MT.HasAgeGroup,MT.ResendCount,0 ,EI.PackageAmount [PackageAmount], MT.MessagePackType [MessagePackType],EI.InvoiceNumber,MT.CanResend --,sUM(EV.NotificationCount) 
				FROM coc_EServices ES(NOLOCK) 
					INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID
					INNER JOIN coc_EServiceInvoices  EI(NOLOCK) ON EI.EServiceID=ES.EServiceID AND EI.IsExtension=@IsExtension
					INNER JOIN coc_MessagePackTypes MT(NOLOCK) ON ES.MessagePackTypeID=MT.MessagePackTypeID
					--INNER JOIN coc_EServiceInvoices(NOLOCK) EV ON EV.EServiceID=ES.EServiceID 
				WHERE(@EServiceID IS NULL OR ES.EServiceID=@EServiceID) AND
					(@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND
					(@ServiceTypeID IS NULL OR ES.ServiceTypeID=@ServiceTypeID) AND
					(@ServiceNumber IS NULL OR ES.ServiceNumber=@ServiceNumber) AND
					(@ServiceSubTypeID IS NULL OR ES.ServiceSubTypeID=@ServiceSubTypeID) AND
					(@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID) AND
					(@IsBarcodeUsed IS NULL OR ES.IsBarcodeUsed=@IsBarcodeUsed) AND  
					(@IsActive IS NULL OR ES.IsActive=@IsActive)
		SELECT  ES.EServiceID,ES.ServiceNumber,ES.EService,ES.ServiceDate,ES.FromDate,ES.ToDate,ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.MessagePackID,
			ES.IsActive,ES.IsBarcodeUsed,ES.HasCity,ES.HasGender,ES.HasAgeGroup,ES.ResendCount,ES.PackageAmount, ES.MessagePackType,ES.InvoiceNumber,ES.CanResend,SUM(EV.NotificationCount)  AS [NotificationCount]
				FROM @EServiceNotifications ES
					INNER JOIN coc_EServiceInvoices(NOLOCK) EV ON EV.EServiceID=ES.EServiceID 
			GROUP BY ES.EServiceID,ES.ServiceNumber,ES.EService,ES.ServiceDate,ES.FromDate,ES.ToDate,ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.MessagePackID,
			ES.IsActive,ES.IsBarcodeUsed,ES.HasCity,ES.HasGender,ES.HasAgeGroup,ES.ResendCount,ES.PackageAmount, ES.MessagePackType,ES.InvoiceNumber,ES.CanResend
SET NOCOUNT OFF 





GO
/****** Object:  StoredProcedure [dbo].[sp_GetVoucherDistributions]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_GetVoucherDistributions]
	@voucherId INTEGER,
	@languageId INTEGER

AS
BEGIN
	DECLARE @DistributionDetailsList TABLE
	(
		VoucherId INTEGER NOT NULL,
		VoucherName NVARCHAR(200),
		CorporateName NVARCHAR(200),
		VoucherCount INTEGER,
		DistributionCount INTEGER
	)

	IF(@voucherId=11)
	BEGIN

		INSERT INTO @DistributionDetailsList(VoucherId,VoucherName,CorporateName,VoucherCount,DistributionCount)
		VALUES (11,'Ramadan Special offer','Al-Raya',1000,900)

		INSERT INTO @DistributionDetailsList(VoucherId,VoucherName,CorporateName,VoucherCount,DistributionCount)
		VALUES (11,'Ramadan Special offer','Lulu',1000,860)
	END
	ELSE
	BEGIN
		INSERT INTO @DistributionDetailsList(VoucherId,VoucherName,CorporateName,VoucherCount,DistributionCount)
		VALUES (12,'Ramadan-karim Special offer','Al-Subuhana',1000,700)

		INSERT INTO @DistributionDetailsList(VoucherId,VoucherName,CorporateName,VoucherCount,DistributionCount)
		VALUES (12,'Ramadan-karim Special offer','Choice',1000,560)

		INSERT INTO @DistributionDetailsList(VoucherId,VoucherName,CorporateName,VoucherCount,DistributionCount)
		VALUES (12,'Ramadan-karim Special offer','We Mart',1000,560)
	END

	------- Table[0] ----------

	SELECT * FROM @DistributionDetailsList
END
GO
/****** Object:  StoredProcedure [dbo].[sp_SampleGetVoucherDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_SampleGetVoucherDetails]
	@bundleId INTEGER,
	@languageId INTEGER

AS
BEGIN
	DECLARE @BundleDetailsList TABLE
	(
		BundleId INTEGER NOT NULL,
		BundleName NVARCHAR(200),
		BundleDescription NVARCHAR(200)
	)

	DECLARE @BundleVoucherList TABLE
	(
		VoucherId INTEGER NOT NULL,
		VoucherName NVARCHAR(100),
		VoucherDescription NVARCHAR(200),
		NoOfVouchers INTEGER,
		VouchersDistributed INTEGER,
		VouchersUsed INTEGER
	)

	INSERT INTO @BundleDetailsList(BundleId,BundleName,BundleDescription)
	VALUES (1,'Ramadan Offers','Get upto 50% off all purchases')

	INSERT INTO @BundleVoucherList (VoucherId,VoucherName,VoucherDescription,NoOfVouchers,VouchersDistributed,VouchersUsed)
	VALUES (11,'Ramadan Special offer','Get 20% off',2000,1500,800)

	INSERT INTO @BundleVoucherList (VoucherId,VoucherName,VoucherDescription,NoOfVouchers,VouchersDistributed,VouchersUsed)
	VALUES (12,'Ramadan-karim Special offer','Get 30% off',3000,2500,1800)


	------ Table[0] BundleDetails -------

	SELECT * FROM @BundleDetailsList

	------- Table[1] BundleVoucherDetails --------

	SELECT * FROM @BundleVoucherList
END
GO
/****** Object:  StoredProcedure [dbo].[sp_SaveKioskLogin]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_SaveKioskLogin]
	@kioskLocationID INTEGER,
	@expiryDate DATETIME OUTPUT,
	@deviceToken VARCHAR(50) OUTPUT,
	@ErrorMessage VARCHAR(50) OUTPUT, 
	@KioskInfo VARCHAR(100) OUTPUT
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @disabledTime DATETIME
	DECLARE @days INTEGER
	SET @ErrorMessage = ''
	IF EXISTS (SELECT 1 FROM coc_KioskLocations (NOLOCK) WHERE KioskLocationID=@kioskLocationID AND IsActive=1)
	BEGIN
		SELECT @deviceToken=NEWID()
	
		SELECT  @disabledTime=GETDATE()
	
		SELECT @days=SetupValue from COC_SystemSetups (NOLOCK) where SetupKey='KioskLoginExpiry'

	
		SELECT @expiryDate=GETDATE()
	
		SELECT @expiryDate=DATEADD(dd,@days,@expiryDate)
		
		declare @cnt integer
		select @cnt = count(*) 
					from coc_KioskLocations KL (NOLOCK)
						INNER JOIN coc_KioskLocationRetailOutlets KLR (NOLOCK) ON KLR.KioskLocationID = KL.KioskLocationID
						INNER JOIN coc_RetailOutlets RO (NOLOCK) ON RO.RetailOutletID = KLR.RetailOutletID 
						where KL.KioskLocationID = @kioskLocationID

		if @cnt > 1
		BEGIN
			SELECT @ErrorMessage= 'msgInvalidKioskConfig'
		END
		ELSE
		BEGIN
			select TOP 1  @KioskInfo = '['+ convert(varchar,KL.KioskLocationID) +'.' +convert(varchar,RO.RetailOutletID)  +'] ' +ROL.RetailOutlet
					from coc_KioskLocations KL (NOLOCK)
						INNER JOIN coc_KioskLocationRetailOutlets KLR (NOLOCK) ON KLR.KioskLocationID = KL.KioskLocationID
						INNER JOIN coc_RetailOutlets RO (NOLOCK) ON RO.RetailOutletID = KLR.RetailOutletID 
						INNER JOIn coc_RetailOutletLanguages ROL(NOLOCK) ON ROL.RetailOutletID = RO.RetailOutletID and ROL.LanguageID = 1
						where KL.KioskLocationID = @kioskLocationID


			-- Disable existing kiosk login
			UPDATE coc_KioskLogins SET Disabled=1,DisabledTime=@disabledTime WHERE Disabled=0 AND KioskLocationID=@kioskLocationID

			--Add new Kiosk User Login
			INSERT INTO coc_KioskLogins(KioskLocationID,DeviceToken,ExpiryDate,Disabled,DisabledTime)
			VALUES (@kioskLocationID,@deviceToken,@expiryDate,0,NULL)
		END
	END
	ELSE
	BEGIN
		SET @ErrorMessage = 'InvalidKioskLocation'
	END
	
	SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[sp_ShowEcouponConfiguration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[sp_ShowEcouponConfiguration]
	@CurrentPage INTEGER,
	@PageSize INTEGER=0,
	@LanguageID  INTEGER=1,
	@UserID INTEGER,
	@TotalRecords INTEGER OUTPUT,

	@CompetitionName NVARCHAR(50)=null,
	@FromDate DATETIME=null,
	@ToDate DATETIME=null,
	@CometitionType NVARCHAR(50)=null
AS
SET NOCOUNT ON
DECLARE @FirstRecord INTEGER
		DECLARE @LastRecord INTEGER
		--DECLARE @RoleID INTEGER
		--DECLARE @CorporateID INTEGER

		
		SET @FirstRecord = ((@CurrentPage - 1) * @PageSize) + 1
  SET @LastRecord = (@CurrentPage * @PageSize)
BEGIN
	

	;WITH EcouponList AS
	(
		SELECT 
			es.EServiceID AS UniqueID,
			EService AS CompetitionName,
			FromDate,
			ToDate,
			EnumValue AS CompetitionType,
			es.EServiceID,			
			ROW_NUMBER() OVER
				(ORDER BY es.EServiceID) AS Rowc
		FROM coc_EServices es (NOLOCK)
			INNER JOIN coc_EnumValueLanguages enmvl (NOLOCK) on enmvl.EnumValueID=es.CompetitionID and enmvl.LanguageID=@LanguageID
			INNER JOIN coc_EServiceLanguages esl (NOLOCK) on esl.EServiceID=es.EServiceID and esl.LanguageID=@LanguageID

		WHERE(@CompetitionName is null or enmvl.EnumValue like+'%'+@CompetitionName+'%') and
			(@FromDate is null or es.FromDate=@FromDate) and 
			(@ToDate is null or es.ToDate=@ToDate) and 
			(@CometitionType is null or esl.EService like+'%'+@CometitionType+'%')
	)

SELECT 
	UniqueID,
	CompetitionName,
	FromDate,
	ToDate,
	CompetitionType,
	Rowc
	FROM EcouponList
	WHERE Rowc BETWEEN @FirstRecord AND @LastRecord


SELECT @TotalRecords=COUNT(es.EServiceID) 
		FROM coc_EServices es (NOLOCK)
			INNER JOIN coc_EnumValueLanguages enmvl(NOLOCK) on enmvl.EnumValueID=es.CompetitionID and enmvl.LanguageID=@LanguageID
			INNER JOIN coc_EServiceLanguages esl (NOLOCK) on esl.EServiceID=es.EServiceID and esl.LanguageID=@LanguageID

		WHERE(@CompetitionName is null or enmvl.EnumValue like+'%'+@CompetitionName+'%') and
			(@FromDate is null or es.FromDate=@FromDate) and 
			(@ToDate is null or es.ToDate=@ToDate) and 
			(@CometitionType is null or esl.EService like+'%'+@CometitionType+'%')

SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[sp_tempGetUploadBarcodes]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_tempGetUploadBarcodes]  
	@ECouponID INTEGER=null
AS 
 BEGIN 
	
	select TempUploadParticipationsID ID, Barcode from TempUploadParticipations (NOLOCK) where BarcodeEnc is null
		--and ECouponID = @ECouponID
 END


GO
/****** Object:  StoredProcedure [dbo].[sp_tempUpdateBarcodeEncryptedValue]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_tempUpdateBarcodeEncryptedValue]
	@ID INTEGER=NULL,
	@BarcodeEnc nvarchar(100)
AS 
 BEGIN 
	update TempUploadParticipations set BarcodeEnc = @BarcodeEnc where TempUploadParticipationsID = @ID
 END
GO
/****** Object:  StoredProcedure [dbo].[sp_VerifyKioskToken]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_VerifyKioskToken]  
 @kioskLocationID INTEGER,  
 @deviceToken VARCHAR(50),  
 @RetailOutletID INTEGER OUTPUT,  
 @CorporateID INTEGER OUTPUT,  
 @ErrorMessage varchar(50) OUTPUT,  
 @SendVerificationOTP bit = null output  
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
   
 BEGIN TRY  
    
  declare @cnt integer  
  select @cnt = count(*) 
     from coc_KioskLocations KL   (NOLOCK)
      INNER JOIN coc_KioskLocationRetailOutlets KLR(NOLOCK) ON KLR.KioskLocationID = KL.KioskLocationID  
      INNER JOIN coc_RetailOutlets RO (NOLOCK) ON RO.RetailOutletID = KLR.RetailOutletID   
      where KL.KioskLocationID = @kioskLocationID  
  
  if @cnt > 1  
  BEGIN  
   SELECT @ErrorMessage= 'msgInvalidKioskConfig'  
  END  
  ELSE  
  BEGIN  
    
   declare @currentToken VARCHAR(50)  
   declare @CurrentExpiryDate datetime  
  
   select @currentToken = DeviceToken, @CurrentExpiryDate = ExpiryDate   
    from coc_KioskLogins (NOLOCK) WHERE Disabled=0 AND KioskLocationID=@kioskLocationID  
  
   IF @currentToken is not null and @currentToken = @deviceToken and @CurrentExpiryDate > getdate()  
   BEGIN  
    select @RetailOutletID = KLR.RetailOutletID
	,@CorporateID = RO.CorporateID 
	,@SendVerificationOTP = KL.SendVerificationOTP    
     from coc_KioskLocations KL  (NOLOCK) 
      INNER JOIN coc_KioskLocationRetailOutlets KLR (NOLOCK) ON KLR.KioskLocationID = KL.KioskLocationID  
      INNER JOIN coc_RetailOutlets RO (NOLOCK) ON RO.RetailOutletID = KLR.RetailOutletID   
      where KL.KioskLocationID = @kioskLocationID  
    --SELECT @ErrorMessage= 'GenericError'  
   END  
   ELSE  
   BEGIN  
    DECLARE @disabledTime DATETIME  
    SELECT  @disabledTime=GETDATE()  
  
    SELECT @ErrorMessage= 'msgInvalidKioskToken'  
    -- Disable existing kiosk login (not required here. doing this is Login section)  
    --UPDATE coc_KioskLogins SET Disabled=1,DisabledTime=@disabledTime WHERE Disabled=0 AND KioskLocationID=@kioskLocationID  
   END  
    
  END  
 END TRY  
 BEGIN CATCH   
  SELECT @ErrorMessage= 'GenericError'  
 END CATCH  
END  
GO
/****** Object:  StoredProcedure [dbo].[tUploadBarcodes]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[tUploadBarcodes]
	@ID INTEGER=NULL,
	@BarcodeEnc nvarchar(100)
AS 
 BEGIN 
	update TempUploadParticipations set BarcodeEnc = @BarcodeEnc where TempUploadParticipationsID = @ID
 END
GO
/****** Object:  StoredProcedure [dbo].[UpdateBroadcastEmailStatus]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UpdateBroadcastEmailStatus]

	@BroadcastEmailID bigint,
	@Status int,
	@SentTime datetime

AS

	BEGIN

		UPDATE coc_BroadcastEmail SET [Status] = @Status , SentTime = @SentTime WHERE BroadcastEmailID = @BroadcastEmailID

	END
GO
/****** Object:  StoredProcedure [dbo].[UpdateCheckInEvent]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UpdateCheckInEvent]
	@barcodeId INTEGER,
	@userId INTEGER
AS
BEGIN
	
	SET NOCOUNT ON;

	UPDATE coc_EServiceBarcodes SET IsUsed=1, UserId=@userId WHERE EServiceBarcodeID=@barcodeId

END
GO
/****** Object:  StoredProcedure [dbo].[UpdateCorporate]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UpdateCorporate]
	@CorporateID INTEGER,
	@Prefix CHAR(4)=NULL,
	@Suffix CHAR(4)=NULL,
	@BarCodeLength NVARCHAR(4),
	@BarcodeType INTEGER,
	@ReturnValue [REMARK] OUTPUT
AS
	SET NOCOUNT ON
		BEGIN TRY
			UPDATE coc_Corporates SET
				BarcodePrefix=RTRIM(@Prefix),
				BarcodeSuffix=RTRIM(@Suffix),
				BarcodeLength=@BarCodeLength,
				BarcodeTypeID=@BarcodeType
			WHERE CorporateID=@CorporateID

			SET @ReturnValue=''
		END TRY
		BEGIN CATCH 
			SELECT ERROR_MESSAGE() 
		END CATCH
	SET NOCOUNT OFF
	

GO
/****** Object:  StoredProcedure [dbo].[UpdateErrorEmailFlag]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UpdateErrorEmailFlag]  
  @ServiceTaskID INTEGER
AS   
SET NOCOUNT ON   
  
IF(@ServiceTaskID <> 0)  
BEGIN  
  Update  coc_ServiceTask  set ErrorMsgEmailSend=1 where Id=@ServiceTaskID
END 
SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[UpdateEServiceAddOnConsumersStatus]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UpdateEServiceAddOnConsumersStatus]
	@ConsumerEServiceAddOnID INTEGER,
	@IsProcessed BIT = 1,
	@Status INTEGER,
	@Message VARCHAR(1000)	

	AS
	BEGIN
		DECLARE @ProcessedDate DATETIME = NULL
		IF(@IsProcessed = 1)
		BEGIN
			SET @ProcessedDate = GETDATE()
		END
		UPDATE coc_EServiceAddOnConsumers 
		SET IsProcessed = @IsProcessed,
			Status = @Status,
			Message = @Message,
			ProcessedDate = @ProcessedDate
		WHERE ConsumerEServiceAddOnID = @ConsumerEServiceAddOnID
			
	END
GO
/****** Object:  StoredProcedure [dbo].[UpdateGuest]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UpdateGuest]
	@Email [Email]=NULL,
	@Mobile [Mobile]=NULL,
	@Name [Name]= NULL,
	@GuestID integer,
	@IsVerified bit,
	@OTPID integer,
	@ErrorMessage [Remark] OUTPUT
AS	
	SET NOCOUNT ON
	BEGIN
		BEGIN TRY
			declare @CurrEmail [Email],
				@CurrMobile [Mobile],
				@CurrName [Name]
			select @CurrEmail = EmailID, @CurrMobile = PrimaryMobile, @CurrName = FullName from coc_Guests(NOLOCK) where GuestID = @GuestID

			if ISNULL(@Email, '') = ''
				select @Email = @CurrEmail

			--if ISNULL(@Mobile, '') = ''
			--	select @Mobile = @CurrMobile

			if ISNULL(@Name, '') = ''
				select @Name = @CurrName
			if @OTPID = 0
				select @otpid = null

			if @IsVerified = 1
			begin
				update coc_Guests 
					set FullName= @Name,
						--PrimaryMobile = @Mobile,
						EmailID = @Email,
						IsVerified = @IsVerified,
						OtpID = @OTPID
				where GuestID = @GuestID
			end
			else
			begin
				update coc_Guests 
					set OtpID = @OTPID
				where GuestID = @GuestID
			end
			

			SELECT @ErrorMessage='Success'
		END TRY
		BEGIN CATCH
			
			
			SELECT @ErrorMessage=ERROR_MESSAGE()
		END CATCH	
	END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[UpdateNotificationReadStatus]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UpdateNotificationReadStatus]
@notificationID int = 0,
@UserID int,
@LanguageID int = 1
AS
BEGIN
	UPDATE coc_ServiceTaskNotification SET ReadStatus = 1 where UserId = @UserID AND LanguageId = @LanguageID AND Id <= @notificationID
	end

GO
/****** Object:  StoredProcedure [dbo].[UpdatePaymentMode]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[UpdatePaymentMode]
	@EServiceID INTEGER=NULL, 
	@ReturnValue [Remark]=NULL OUTPUT
AS
SET NOCOUNT ON 
BEGIN TRY
	BEGIN TRANSACTION TRN_UpdatePaymentMode
	UPDATE coc_EServices
		SET IsPaymentDone=1
	WHERE EServiceID=@EServiceID

	SET @ReturnValue='1'
	COMMIT TRANSACTION TRN_UpdatePaymentMode
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION  TRN_UpdatePaymentMode    
	SELECT @ReturnValue='-500'
END CATCH
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[UpdatePromoCodeTaskStatus]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UpdatePromoCodeTaskStatus]    
 @Id INT,    
 @Status INT,  
 @FileName nvarchar(2000)=NULL,
 @ReturnValue [Remark] OUTPUT    
AS    
SET NOCOUNT ON    
 BEGIN    
    
      
  BEGIN TRY    
  UPDATE coc_core_PromoCodeBundle Set [Status]=@Status WHERE PromoCodeBundleID=@Id  
  
  if(@FileName='')
    set @FileName=NULL
if(@FileName is not null)
begin
   UPDATE coc_core_PromoCodeBundle Set [FileName]=@FileName WHERE PromoCodeBundleID=@Id  
end
      
  SET @ReturnValue =''       
      
  END TRY    
  BEGIN CATCH    
   SELECT @ReturnValue= ERROR_MESSAGE()      
  END CATCH    
  END    
SET NOCOUNT OFF    
    
    
    
    
    
SET ANSI_NULLS ON    
GO
/****** Object:  StoredProcedure [dbo].[UpdateServiceTask]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UpdateServiceTask]
	@Id INT,
	@Result NVARCHAR(500),
	@ExecutionStatus INT,
	@Status INT,	
	@ReturnValue [Remark] OUTPUT
AS
SET NOCOUNT ON
	BEGIN

		
		BEGIN TRY
		UPDATE coc_ServiceTask Set ExecutionStatus=@ExecutionStatus, 
									      [Status]=@Status,
										    Result=@Result 
										  WHERE Id=@Id
		
		SET @ReturnValue ='' 		
		
		END TRY
		BEGIN CATCH
			SELECT @ReturnValue= ERROR_MESSAGE()		
		END CATCH
		END
SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[UpdateServiceTaskStatus]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UpdateServiceTaskStatus]
	@Id INT,
	@Status INT,
	@ReturnValue [Remark] OUTPUT
AS
SET NOCOUNT ON
	BEGIN

		
		BEGIN TRY
		UPDATE coc_ServiceTask Set [Status]=@Status WHERE Id=@Id
		
		SET @ReturnValue ='' 		
		
		END TRY
		BEGIN CATCH
			SELECT @ReturnValue= ERROR_MESSAGE()		
		END CATCH
		END
SET NOCOUNT OFF





SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[UseBarcodeAtKiosk]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UseBarcodeAtKiosk]        
 @UserType INTEGER= NULL,        
 @ConsumerID INTEGER= NULL,        
 @GuestID INTEGER= NULL,        
 @KioskLocationID INTEGER,        
 @BarCode [NullDescription],        
 @KioskScreenID INTEGER,         
 @LanguageID INTEGER,        
 @BarcodeID BIGINT ,        
 @EServiceID BIGINT ,       
 @InvoiceNumber nvarchar(100)=NULL,              
 @InvoiceAmount  decimal(18,2)=NULL,         
 @ErrorMessage [Remark] =NULL OUTPUT,        
 @SuccessMessage [Remark] =NULL OUTPUT        
AS        
 SET NOCOUNT ON        
 BEGIN TRY         
 BEGIN TRANSACTION TRN_UseBarcodeAtKiosk        
  DECLARE @l_ParticipationCount INTEGER        
  DECLARE @l_MultipleParticipation BIT        
  DECLARE @l_ParticipationByKiosk BIT        
  DECLARE @l_RegistrationRequired BIT        
  DECLARE @l_EserviceTypeID INT        
  DECLARE @l_IsUsed BIT        
  DECLARE @l_BarcodeID BIGINT        
  DECLARE @l_EServiceID BIGINT        
  DECLARE @IsAllowToParticipate INT        
   if @ConsumerID IS NOT NULL    
   begin    
    select @IsAllowToParticipate =  dbo.Core_ValidateAllowParticipation(@ConsumerID);  if(@IsAllowToParticipate = 0)   begin   SET @ErrorMessage = 'Please verify your email and participate';   RETURN;     end           
   end    
  if @KioskScreenID= 2        
  BEGIN        
   if @ConsumerID = 0         
    select @ConsumerID = null        
   if @GuestID = 0         
    select @GuestID = null        
   declare @MobileNumber [Mobile],        
     @Email [Email],        
     @ConsumerName [Name]       
      
   if @ConsumerID IS NOT NULL        
   BEGIN        
    SELECT         
       @MobileNumber = CU.PrimaryMobile,        
       @Email=EmailID,        
       @ConsumerName= FirstName +' ' + SecondName + ' '+ FamilyName         
      FROM coc_Consumers(NOLOCK) CU WHERE CU.ConsumerID=@ConsumerID        
    select @GuestID = null        
   END        
   else if @GuestID IS NOT NULL        
   BEGIN        
    SELECT         
       @MobileNumber = CU.PrimaryMobile,        
       @Email=EmailID,        
       @ConsumerName= FullName         
      FROM coc_Guests(NOLOCK) CU WHERE CU.GuestID=@GuestID        
   END        
           
   if @MobileNumber IS NULL        
    SET @ErrorMessage = 'GenericError'        
           
  END        
  else        
  BEGIN        
   select @ConsumerID = consumerid,         
     @GuestID = guestid from coc_EServiceBarcodes (NOLOCK) where Barcode = @Barcode        
  END        
        
  if (ISNULL(@ErrorMessage,'') = '')        
  BEGIN        
   DECLARE @NotificationID INTEGER        
   DECLARE @NotificationSendID INTEGER        
            
  SELECT  @l_BarcodeID = EB.EServiceBarcodeID,          
    @l_MultipleParticipation= EC.MultipleParticipation,         
    @l_ParticipationCount = EC.ParticipationCount,        
    @l_ParticipationByKiosk = EC.ParticipationByKiosk,        
    @l_RegistrationRequired = EC.RegistrationRequired,        
    @l_IsUsed = EB.IsUsed,        
    @l_EserviceTypeID = ES.ServiceTypeID,        
    @l_EServiceID = ES.EServiceID        
   fROM coc_EServiceBarcodes EB(NOLOCK) --        
   INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID=NT.NotificationID         
   INNER JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID=NT.EServiceID        
   INNER JOIN coc_EServiceLanguages ESL (NOLOCK) ON ESL.EServiceID = ES.EServiceID AND ESL.LanguageID = @LanguageID        
   LEFT JOIN coc_ECoupons EC(NOLOCK) ON NT.EServiceID=EC.EServiceID        
  WHERE EB.Barcode=@BarCode and ISNULL(EC.IsActive,1) = 1 and ES.IsActive = 1 and         
   convert(datetime,convert(varchar,GETDATE(),101),101) >=  convert(datetime,convert(varchar,ES.FromDate,101),101) and        
   convert(datetime,convert(varchar,GETDATE(),101),101) <=  convert(datetime,convert(varchar,ES.ToDate,101),101)      
         
   if EXists(Select EVoucherID from coc_EVoucher where Type=3 and EServiceID=@EServiceID)          
     begin           
         if((@InvoiceNumber = ''  OR    @InvoiceNumber IS  NULL) AND (@InvoiceAmount = 0  OR   @InvoiceAmount IS  NULL))          
          begin          
              SET @ErrorMessage='MsgInvoiceNumberAndAmountRequired'       
      ROLLBACK TRANSACTION TRN_UseBarcodeAtKiosk            
            return        
            end          
           if(@InvoiceNumber =''  OR   @InvoiceNumber IS  NULL )          
            begin          
            SET @ErrorMessage='MsgInvoiceNumberRequired'      
    ROLLBACK TRANSACTION TRN_UseBarcodeAtKiosk         
            return            
            end           
      if(@InvoiceAmount = 0  OR   @InvoiceAmount IS  NULL )          
   begin              
   SET @ErrorMessage='MsgInvoiceAmountRequired'       
    ROLLBACK TRANSACTION TRN_UseBarcodeAtKiosk            
    return        
   end        
     end           
          
           
        
  IF(@l_RegistrationRequired=1 and (@UserType IS NULL or @UserType = 'Member'))        
  BEGIN        
   SET @ErrorMessage='MsgRegistrationRequired'        
  END        
  ELSE        
  BEGIN        
   IF (@l_BarcodeID IS NULL)        
   BEGIN        
    SET @ErrorMessage = 'MsgBarcodeInvalid'         
           
   END        
          
          
   IF (@l_IsUsed = 1)        
   BEGIN        
    SET @ErrorMessage = 'MsgBarcodeAlreadyUsed'         
           
   END        
        
   IF (@l_BarcodeID <> @BarcodeID)        
   BEGIN        
    SET @ErrorMessage = 'InvalidParameters'         
           
   END        
          
          
  END        
  if ISNULL(@ErrorMessage,'') = ''        
  BEGIN        
   if @KioskScreenID= 2        
    UPDATE EB        
     SET ConsumerID=@ConsumerID,GuestID = @GuestID,AsignedMoile=@MobileNumber,IsUsed=1,UsedDate=GETDATE()        
      FROM coc_EServiceBarcodes EB        
     WHERE EServiceBarcodeID = @l_BarcodeID        
   else        
    UPDATE EB        
     SET IsUsed=1,UsedDate=GETDATE(),UsedAtKioskID=@KioskLocationID,InvoiceAmount=@InvoiceAmount,InvoiceNumber= @InvoiceNumber       
      FROM coc_EServiceBarcodes EB        
     WHERE EServiceBarcodeID = @l_BarcodeID        
           
           
   IF @ConsumerID is not null        
    BEGIN        
     SELECT @NotificationID = NotificationID FROM coc_Notifications(NOLOCK) WHERE EServiceID=@l_EServiceID        
     UPDATE coc_Notifications        
      SET NotificationSend = ISNULL(NotificationSend,0)+1        
      WHERE EServiceID = @l_EServiceID        
             
     INSERT INTO coc_NotificationSends(NotificationID,SendingDate,SendingType,SearchCount,NotificationCount)        
       SELECT @NotificationID,GETDATE(),4,0,0        
     SET @NotificationSendID = SCOPE_IDENTITY()        
        
     IF (ISNULL(@NotificationSendID,0) > 0) AND (NOT EXISTS (SELECT NULL FROM coc_NotificationSendLanguages(NOLOCK) WHERE NotificationSendID = @NotificationSendID))         
     BEGIN        
      INSERT INTO coc_ConsumerNotifications(NotificationSendID,ConsumerID,SendDate,HasChecked)        
       SELECT @NotificationSendID,@ConsumerID,GETDATE(),0 --FROM coc_NotificationSends(NOLOCK) WHERE NotificationID=@NotificationID        
       --SELECT @NotificationSendID,@ConsumerID,GETDATE(),0        
      INSERT INTO coc_NotificationSendLanguages(NotificationSendID,LanguageID,Subject,Message)        
       SELECT @NotificationSendID,LG.LanguageID,'Congratulations!','Your barcode is consumed :~'+@BarCode from coc_Languages (NOLOCK) LG        
        --WHERE @LanguageID IS NULL or LG.LanguageID = @LanguageID        
        
     END        
     set @SuccessMessage= 'Your barcode is used'        
    END        
         
  END        
 END        
 COMMIT TRANSACTION TRN_UseBarcodeAtKiosk        
 END TRY        
 BEGIN CATCH                 
  ROLLBACK TRANSACTION TRN_UseBarcodeAtKiosk        
  SET @ErrorMessage= ERROR_MESSAGE()        
  SET @BarcodeID= -1         
  RAISERROR(@ErrorMessage, 16, 1);           
 END CATCH        
 SET NOCOUNT OFF        
        
        
        
        
        
GO
/****** Object:  StoredProcedure [dbo].[UseVoucherBarcode]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UseVoucherBarcode]
	@barcodeId INTEGER,
	@UserId int
	
AS
BEGIN
	SET NOCOUNT ON;

	UPDATE coc_EServiceBarcodes SET IsUsed=1, UsedDate = getdate(), UserId = @UserId WHERE EServiceBarcodeID=@barcodeId
	
END
GO
/****** Object:  StoredProcedure [dbo].[USP_AddNewGuest_FromCompetitionLink]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_AddNewGuest_FromCompetitionLink]            
    @FullName nvarchar(200)          =null      
   ,@FirstName nvarchar(200)     =null           
   ,@SecondName nvarchar(200)    =null        
   ,@FamilyName nvarchar(200)  =null          
   ,@CountryID int            
   ,@CityID int = null            
   ,@DOB datetime = null            
   ,@Nationality nvarchar(50) = null            
   ,@PrimaryMobile nvarchar(15)         =null       
   ,@EmailID nvarchar(100)  = null          
   ,@OtpID int            
   ,@Gender int  = null          
   ,@IsFromCompetitionLink bit            
   ,@GuestID [int] OUTPUT               
   ,@ConsumerID [int] OUTPUT               
AS               
 SET NOCOUNT ON              
  BEGIN              
  DECLARE @GuestID_CompetitionLink integer ;            
  DECLARE @ConsumerID_CompetitionLink integer;             
  
  set @GuestID_CompetitionLink =0;            
  set @ConsumerID_CompetitionLink =0;             
  
   set @GuestID =0;            
  set @ConsumerID =0;             
  
  
  IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1 and isactive= 1 and isdeleted = 0 AND (PrimaryMobile=@PrimaryMobile))            
   select top 1 @ConsumerID_CompetitionLink = ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1  and isactive= 1 and isdeleted = 0 AND (PrimaryMobile=@PrimaryMobile)             
  else IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1 and isactive= 1 and isdeleted = 0 AND (@EmailID IS NULL and EmailID=@EmailID))            
   select top 1 @ConsumerID_CompetitionLink = ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1  and isactive= 1 and isdeleted = 0 AND (EmailID=@EmailID)             
               
  if @ConsumerID_CompetitionLink = 0            
  BEGIN            
   IF EXISTS (select GuestID FROM coc_guests(NOLOCK) WHERE (PrimaryMobile=@PrimaryMobile))            
    select top 1 @GuestID_CompetitionLink = GuestID FROM coc_guests(NOLOCK) WHERE (PrimaryMobile=@PrimaryMobile) and IsActive = 1              
   else IF @EmailID!='' and EXISTS (select GuestID FROM coc_guests(NOLOCK) WHERE EmailID=@EmailID and IsActive = 1 )            
    select top 1 @GuestID_CompetitionLink = GuestID FROM coc_guests(NOLOCK) WHERE (EmailID=@EmailID) and IsActive = 1             
  END            
            
             
            
  IF @GuestID_CompetitionLink = 0 and @ConsumerID_CompetitionLink = 0            
    BEGIN            
     Insert into coc_guests(            
     FullName             
     ,FirstName            
     ,SecondName             
     ,FamilyName            
     ,CountryID            
     ,CityID            
     ,DOB            
     ,Nationality            
     ,PrimaryMobile            
     ,EmailID            
     ,IsActive            
     ,OtpID            
     ,IsVerified            
     ,Gender            
     ,AddDate            
     ,IsFromCompetitionLink)            
                 
     SELECT            
      @FullName             
     ,@FirstName            
     ,@SecondName             
     ,@FamilyName            
     ,@CountryID            
     ,@CityID            
     ,@DOB            
     ,@Nationality            
     ,@PrimaryMobile            
     ,@EmailID            
     ,1            
     ,@OtpID            
     ,0            
     ,@Gender            
     ,GETDATE()            
     ,@IsFromCompetitionLink            
            
   SET @GuestID = SCOPE_IDENTITY()                  
    END            
     ELSE            
 BEGIN     
  if(@GuestID_CompetitionLink is null) set @GuestID_CompetitionLink = 0;  
  if(@ConsumerID_CompetitionLink is null) set @ConsumerID_CompetitionLink = 0;  
  
  SET @GuestID = @GuestID_CompetitionLink;            
  SET @ConsumerID = @ConsumerID_CompetitionLink;            
 END            
            
              
              
  END              
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[USP_API_AuditRequestResponse]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================      
-- Author:  Shaik Rafeeq Mohammad      
-- Create date: March-01-2019      
-- Description: Log API Request and Response in coc_APIRequestLog table      
-- Example Execution: USP_API_AuditRequestResponse       
-- =============================================      
CREATE PROCEDURE [dbo].[USP_API_AuditRequestResponse]      
(      
@CorporateID int = null,      
@APIKey nvarchar(50) = null,      
@RequestIPAddress nvarchar(100) = null,      
@RequestURL nvarchar(max) = null,      
@CompetitionID int = null,      
@PayloadType nvarchar(150) = null,      
@RequestPayload nvarchar(max) = null,      
@RequestPayloadFileName nvarchar(150) = null,      
@RequestType int  = null,      
@ResponseStatus int = null,      
@ErrorCode int = null,       
@ErrorDescription nvarchar(max),      
@ResponsePayload nvarchar(max) = null,      
@ResponsePayloadFileName nvarchar(500) = null,      
@ServiceKey nvarchar(50) = null,     
@RequestID bigint=0,    
@RequestID_Out bigint out,     
@SPStatus int = NULL out,      
@SPReturnMessage nvarchar(500) = NULL out      
)      
AS      
BEGIN      
 -- SET NOCOUNT ON added to prevent extra result sets from      
 -- interfering with SELECT statements.      
 SET NOCOUNT ON;      
 begin try      
 SET @SPStatus = 0;      
 SET @SPReturnMessage = '';      
 if(@RequestID=0)    
 begin     
 INSERT INTO coc_APIRequestLog       
 (      
    CorporateID      
      ,APIKey      
      ,RequestedOn      
      ,RequestIPAddress      
      ,RequestURL      
      ,CompetitionID      
      ,PayloadType      
      ,RequestPayload      
      ,RequestPayloadFileName      
      ,RequestType      
   ,ServiceKey
   ,ResponsePayload)      
   select  @CorporateID      
      ,@APIKey      
      ,GETDATE()      
      ,@RequestIPAddress      
      ,@RequestURL      
      ,@CompetitionID      
      ,@PayloadType      
      ,@RequestPayload      
      ,@RequestPayloadFileName      
      ,@RequestType      
   ,@ServiceKey     
   ,@ResponsePayload 
   set @RequestID_Out=SCOPE_IDENTITY()    
end    
else    
begin    
    update coc_APIRequestLog set ResponseStatus=@ResponseStatus,ErrorCode=@ErrorCode,ErrorDescription=@ErrorDescription,    
 ResponsePayloadFileName=@ResponsePayloadFileName,ResponsePayload=@ResponsePayload,ResponseDateTime=GETDATE()     
 where RequestID=@RequestID    
 set @RequestID_Out=@RequestID    
end    
 end try      
 begin catch     
 SET @RequestID_Out=0     
 SET @SPStatus = 1;      
 SET @SPReturnMessage = ERROR_MESSAGE();      
 end catch      
          
END 
GO
/****** Object:  StoredProcedure [dbo].[USP_API_CheckRequestReference]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- Author:  Shaik Rafeeq Mohammad    
-- Create date: March-01-2019    
-- Description: check API Request Reference in coc_APIRequestReferenceLog table    
-- Example Execution: USP_API_LogRequestReference     
-- =============================================    
CREATE PROCEDURE [dbo].[USP_API_CheckRequestReference]    
(    
@ReferenceNo nvarchar(50),    
@APIKey nvarchar(50),    
@ServiceKey nvarchar(50)=null,    
@SPStatus int = NULL out,    
@SPReturnMessage nvarchar(500) = NULL out    
)    
AS    
BEGIN    
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
 SET NOCOUNT ON;    
 begin try     
 if not exists (select * from coc_APIRequestReferenceLog (NOLOCK) where ReferenceNo = @ReferenceNo and APIKey = @APIKey and (ServiceKey = @ServiceKey or ServiceKey is null) )    
  begin    
   SET @SPStatus = 0;    
   SET @SPReturnMessage = '';    
  end         
 else          
   begin         
  SET @SPStatus = 1;    
  SET @SPReturnMessage = 'Service Reference Already Exists';    
   end    
 end try    
 begin catch    
 SET @SPStatus = 1;    
 SET @SPReturnMessage = ERROR_MESSAGE();    
 end catch    
        
END 
GO
/****** Object:  StoredProcedure [dbo].[USP_API_EXTERNALPARTICIPATION]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[USP_API_EXTERNALPARTICIPATION]          
@EcouponID int,          
@ConsumerID int,        
@Barcode nvarchar(250) null        
AS          
BEGIN          
          
      Declare @EserviceID int,@AllowExternalRedirection bit;    
      Select @EserviceID = EserviceID from coc_ECoupons(NoLock) where EcouponID = @EcouponID    
      Select @AllowExternalRedirection=AllowExternalValidation from coc_EServices(nolock) where EserviceID = @EserviceID;    
    
 If exists(SELECT ECB.ECouponStandardBarcodeID                       
   FROM coc_ECouponStandardBarcodes(NOLOCK) ECB                      
   INNER JOIN coc_ECoupons(NOLOCK) EC ON ECB.ECouponID = EC.ECouponID                      
   WHERE ECB.ECouponID = @EcouponID AND ECB.StandardBarcode = @Barcode AND ECB.IsActive = 1  ) and  IsNull(@AllowExternalRedirection,0) = 0    
 begin        
   return;        
 end        
        
        
--Table[0]-- service data          
SELECT ES.EServiceID          
,ISNULL(ES.AllowExternalValidation,0) AllowExternalValidation          
,ISNULL(ES.ExternalRedirectionURL,'') ExternalRedirectionURL          
,ISNULL(ER.LocalRefColumn,'')  LocalRefColumn        
,ISNULL(ER.OrderNumber,'') OrderNumber          
,ISNULL(ER.QueryStringParamKey,'') QueryStringParamKey          
from           
coc_eservices(NoLock) ES          
inner JOIN coc_ExternalRedirectionDataMapping(NoLock) ER           
on ER.Eserviceid = ES.EserviceID          
WHERE ES.EServiceID = @EserviceID          
order by ER.OrderNumber          
          
--table[1]--customer data          
SELECT top 1 cc.ConsumerID,coalesce(cc.FullName,cc.FirstName) FirstName,cc.SecondName          
,cc.FamilyName,cc.EmailID,cc.PrimaryMobile,cc.Gender          
,cc.IqamaNumber,cc.UserID,cc.ThirdName          
FROM coc_Consumers(nolock) cc Where cc.ConsumerID = @ConsumerID          
          
END
GO
/****** Object:  StoredProcedure [dbo].[USP_API_ExternalUserRegistration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_API_ExternalUserRegistration] (                      
 @FirstName NVARCHAR(200)                      
 ,@LastName NVARCHAR(200)                   
 ,@MiddleName NVARCHAR(200)                     
 ,@PrimaryMobile VARCHAR(15)                      
 ,@EmailID VARCHAR(100)           
 ,@CountryISOCode VARCHAR(5)          
 ,@ErrorCode INT OUTPUT          
 ,@ErrorMessage VARCHAR(300) OUTPUT          
 ,@ConsumerID INT OUTPUT          
 ,@APIKEY NVARCHAR(200)                      
 )                      
AS                      
BEGIN                      
 BEGIN TRY                      
  BEGIN TRANSACTION SaveExternalUser                             
                  
  SET @ErrorCode =0 ;            
  INSERT INTO coc_API_ExternalParticipations        
           ([FirstName]        
           ,[LastName]        
           ,[MiddleName]        
           ,[PrimaryMobile]        
           ,[EmailID]        
           ,[CountryISOCode]        
           ,[APIKEY]        
           ,[AddedDate])        
     VALUES (                      
      @FirstName                     
     ,@LastName         
     ,@MiddleName          
     ,@PrimaryMobile                      
     ,@EmailID                      
     ,@CountryISOCode                      
     ,@APIKEY                     
     ,GETDATE()                      
    )          
  --if email exists in consumer table and not verified :                       
  IF EXISTS (                      
    SELECT 1                      
    FROM coc_Consumers(NOLOCK)                      
    WHERE (isnull(@EmailID,'') <> '' and EmailID = @EmailID) OR PrimaryMobile =@PrimaryMobile           
    ) --if begin                      
  BEGIN                      
         SET @ErrorCode = 101          
   SET @ErrorMessage = 'EmailOrMobileAlreadyExists'                   
  END                 
          
  DECLARE @CountryID INT          
                     
  IF NOT EXISTS(SELECT 1 FROM coc_Countries (NOLOCK) where ISOCode=@CountryISOCode)          
  BEGIN          
  SET @ErrorCode = 102          
  SET @ErrorMessage = 'InvalidCountryISOCode'          
          
  END           
  ELSE          
  BEGIN          
 SELECT @CountryID= CountryID from COC_Countries (NOLOCK) WHERE ISOCode= @CountryISOCode          
  END          
            
  IF (@ErrorCode = 0)          
  BEGIN          
  INSERT INTO COC_Consumers (   
     FullName
    ,FirstName                   
    ,SecondName                     
    ,FamilyName          
    ,PrimaryMobile                      
    ,EmailID                      
    ,CountryID             
    ,IsActive                      
    ,AddDate                      
    ,IsVerified          
    ,IsFromCompetitionLink        
    ,APIKEY         
    )                      
   VALUES (                      
     @FirstName
    ,@FirstName                      
    ,@MiddleName                  
    ,@LastName          
    ,@PrimaryMobile                      
    ,@EmailID                      
    ,@CountryID                      
    ,1                      
    ,GETDATE()                      
    ,0                      
    ,0          
    ,@APIKEY         
    )                      
                      
   SET @ConsumerID = SCOPE_IDENTITY()               
          
  END          
            
                      
  COMMIT TRANSACTION SaveExternalUser --end transaction                      
   --print(@ErrorMessage);                      
 END TRY --end try block                      
                      
 BEGIN CATCH --begin catch                      
  SELECT ERROR_LINE()                      
   ,ERROR_NUMBER();                      
                      
  SELECT @ErrorMessage = CONCAT (                      
    ERROR_MESSAGE()                      
    ,ERROR_LINE()                      
    ,ERROR_NUMBER()                      
    );           
          
                 
  --print(@ErrorMessage);                        
  ROLLBACK TRANSACTION SaveExternalUser;                      
 END CATCH --end catch           
END 
GO
/****** Object:  StoredProcedure [dbo].[USP_API_GetBarcodeForRetailParticipation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================          
-- Author:  Rafeeq Mohammad          
-- Create date: April-01-2019          
-- Description: Get Barcode Retail Participation        
-- Example Execution: USP_API_GetBarcodeForRetailParticipation           
-- =============================================        
CREATE PROCEDURE [dbo].[USP_API_GetBarcodeForRetailParticipation] (    
  @EServiceID INTEGER      
 ,@APIKey nvarchar(50)     
 ,@RetailoutletID INT    
 ,@NumberOfCopons INT       
 ,@LanguageID INT  = 1     
 ,@SPStatus INT = NULL OUT      
 ,@SPReturnMessage NVARCHAR(500) = NULL OUT      
 )    
AS       
SET NOCOUNT ON      
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;      
BEGIN TRY      
       
  IF (@NUMBEROFCOPONS > 20)  
       BEGIN -- set condition if @NUMBEROFCOPONS is greater than 20  
  SET @NUMBEROFCOPONS = 20   
    END  
  
  
 SET @SPStatus = 0;      
 SET @SPReturnMessage = '';      
 Declare @NotificationID int;       
 DECLARE @TempBarcodeTable TABLE (      
  Barcode NVARCHAR(100)      
  ,EServiceBarcodeID INT      
  ,NotificationID INT      
  );      
     
 select @NotificationID = NotificationID from coc_notifications (NOLOCK) where eserviceid = @EServiceID      
      
    INSERT INTO @TempBarcodeTable (      
     Barcode      
     ,EServiceBarcodeID      
     ,NotificationID      
     )      
    SELECT TOP (@NumberOfCopons)       
     Barcode      
     ,EServiceBarcodeID      
     ,NotificationID      
    FROM coc_EServiceBarcodes WITH(NOLOCK)  --WITH(XLOCK, ROWLOCK)     
    WHERE      
     Notificationid = @NotificationID       
     AND IsUsed = 0      
     AND AsignedMoile IS NULL      
    ORDER BY EServiceBarcodeID      
    
UPDATE coc_EServiceBarcodes  SET IsUsed=1,UsedDate=GETDATE(),UsedByAPI=1,    
APIKey=@APIKey,RetailoutletID=@RetailoutletID  WHERE EServiceBarcodeID in     
(SELECT  EServiceBarcodeID  FROM @TempBarcodeTable)    and  IsUsed= 0
      
SELECT  Barcode  ,EServiceBarcodeID  ,NotificationID  FROM @TempBarcodeTable    
    
END TRY      
      
BEGIN CATCH      
 SET @SPStatus = 1;      
 SET @SPReturnMessage = ERROR_MESSAGE() ;      
END CATCH      
      
GO
/****** Object:  StoredProcedure [dbo].[USP_API_GetBulkBarcodeForRetailParticipation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================              
-- Author:  Rafeeq Mohammad              
-- Create date: April-01-2019              
-- Description: Get Barcode Retail Participation            
-- Example Execution: USP_API_GetBulkBarcodeForRetailParticipation               
-- =============================================            
CREATE PROCEDURE [dbo].[USP_API_GetBulkBarcodeForRetailParticipation] (        
  @EServiceID INTEGER          
 ,@APIKey nvarchar(50)         
 ,@RetailoutletID INT        
 ,@NumberOfCopons INT           
 ,@LanguageID INT  = 1         
 ,@SPStatus INT = NULL OUT          
 ,@SPReturnMessage NVARCHAR(500) = NULL OUT          
 )        
AS           
SET NOCOUNT ON          
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;          
BEGIN TRY          
           
  IF (@NUMBEROFCOPONS > 50000)      
       BEGIN -- set condition if @NUMBEROFCOPONS is greater than 20      
  SET @NUMBEROFCOPONS = 50000       
    END      
      
      
 SET @SPStatus = 0;          
 SET @SPReturnMessage = '';          
 Declare @NotificationID int;           
 DECLARE @TempBarcodeTable TABLE (          
  Barcode NVARCHAR(100)          
  ,EServiceBarcodeID INT          
  ,NotificationID INT          
  );          
         
 select @NotificationID = NotificationID from coc_notifications (NOLOCK) where eserviceid = @EServiceID          
          
    INSERT INTO @TempBarcodeTable (          
     Barcode          
     ,EServiceBarcodeID          
     ,NotificationID          
     )          
    SELECT TOP (@NumberOfCopons)           
     Barcode          
     ,EServiceBarcodeID          
     ,NotificationID          
    FROM coc_EServiceBarcodes WITH(NOLOCK)  --WITH(XLOCK, ROWLOCK)         
    WHERE  AllowDownload = 1 and        
     Notificationid = @NotificationID           
     AND IsUsed = 0          
     AND AsignedMoile IS NULL          
    ORDER BY EServiceBarcodeID          
        
UPDATE coc_EServiceBarcodes  SET IsUsed=1,UsedDate=GETDATE(),UsedByAPI=1,        
APIKey=@APIKey,RetailoutletID=@RetailoutletID  WHERE EServiceBarcodeID in         
(SELECT  EServiceBarcodeID  FROM @TempBarcodeTable)    and  IsUsed= 0    
IF not exists(select top 1 Barcode from @TempBarcodeTable)  
  begin  
    SET @SPStatus = 1;          
 SET @SPReturnMessage = 'No more barcodes available';   
  end  
SELECT  Barcode  ,EServiceBarcodeID  ,NotificationID  FROM @TempBarcodeTable        
        
END TRY          
          
BEGIN CATCH          
 SET @SPStatus = 1;          
 SET @SPReturnMessage = ERROR_MESSAGE() ;          
END CATCH 
GO
/****** Object:  StoredProcedure [dbo].[Usp_API_GetCountryValidationData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Usp_API_GetCountryValidationData]    
(    
@CountryISOcode varchar(10),    
@ErrorMessage int OUTPUT     
)    
AS    
BEGIN    
if Exists(SELECT CountryID FROM coc_Countries WHERE ISACTIVE = 1 AND ISOCode = @CountryISOcode)    
  Begin    
   SELECT CountryID,TelephoneCode,ValidationExpression,MobileNumberLength,ISOCode FROM coc_Countries(NOLOCK) WHERE ISACTIVE = 1 AND ISOCode = @CountryISOcode;    
   SET @ErrorMessage = 0;    
  End    
Else    
 SET @ErrorMessage =1;    
END
GO
/****** Object:  StoredProcedure [dbo].[USP_API_GetECoponCorporate]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SHIVA  
-- Create date: March-06-2019  
-- Description: get CorporateID and EServiceID based on APIKey,ServiceKey  
-- Example Execution: USP_API_GetECoponCorporate   
-- =============================================  
CREATE PROCEDURE [dbo].[USP_API_GetECoponCorporate]  
(  
@APIKey nvarchar(50),  
@ServiceKey nvarchar(50),  
@SPStatus int = NULL out,  
@SPReturnMessage nvarchar(500) = NULL out  
)  
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
 declare @TempTable table (CorporateID int,EServiceID int)  
 begin try   
  insert into @TempTable values((SELECT CorporateID from coc_CorporateAPIUser (NOLOCK) where APIKey=@APIKey and IsActive=1),  
   (select EServiceID from coc_ServiceKeys (NOLOCK) where ServiceKey=@ServiceKey and IsActive=1))  
     select CorporateID,EServiceID from @TempTable  
 SET @SPStatus = 0;  
    SET @SPReturnMessage = '';  
 end try  
 begin catch  
 SET @SPStatus = 1;  
 SET @SPReturnMessage = ERROR_MESSAGE();  
 end catch  
      
END
GO
/****** Object:  StoredProcedure [dbo].[USP_API_GetMobileRegx]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- Author:  Rafeeq Mohammad    
-- Create date: March-25-2019    
-- Description: GetMobileRegx  
-- Example Execution: USP_API_GetMobileRegx    148  
-- =============================================    
CREATE PROCEDURE [dbo].[USP_API_GetMobileRegx]    
(      
@EServiceID int = 0,    
@SPStatus int = NULL out,    
@SPReturnMessage nvarchar(500) = NULL out    
)    
AS    
BEGIN    
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
 SET NOCOUNT ON;    
 begin try    
   if (@EServiceID <> 0)  
     select CountryID,CountryCode,ValidationExpression from coc_Countries (NOLOCK) where CountryID = (select case when CountryID is null then 183 else  CountryID end from coc_ECoupons (NOLOCK) where EServiceID = @EServiceID)  
   else   
      select CountryID,CountryCode,ValidationExpression from coc_Countries (NOLOCK) where CountryID = 183;   
  SET @SPStatus = 0;    
  SET @SPReturnMessage = '';    
 end try    
 begin catch    
 SET @SPStatus = 1;    
 SET @SPReturnMessage = ERROR_MESSAGE();    
 end catch    
END  
  
GO
/****** Object:  StoredProcedure [dbo].[USP_API_GetValidationRulesByServiceKey]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- Author:  Shaik Rafeeq Mohammad    
-- Create date: March-01-2019    
-- Description: Get validation rules by service key    
-- Example Execution: USP_API_GetValidationRulesByServiceKey '123456789012345'    
-- =============================================    
CREATE PROCEDURE [dbo].[USP_API_GetValidationRulesByServiceKey]    
(    
@ServiceKey nvarchar(50),    
@RequestTypeID int=null,    
@SPStatus int = NULL out,    
@SPReturnMessage nvarchar(500) = NULL out    
)    
AS    
BEGIN    
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
 SET NOCOUNT ON;    
 begin try    
 SET @SPStatus = 0;    
 SET @SPReturnMessage = '';    
 if exists(SELECT * FROM coc_APIRequestValidations (NOLOCK) WHERE ServiceKey = @ServiceKey)    
 begin    
  SELECT      
     APIRequestValidationRuleID    
    ,APIRequestValidationID    
    ,PropertyName    
    ,Condition    
    ,ConditionValue    
    ,ErrorMessage_EN    
    ,ErrorMessage_AR    
    ,IsDependent    
    ,DependentPropertyName    
    ,DependentKeyId    
    ,IsRegularExpression    
    ,RegularExpression    
    ,IsRequired    
    ,IsActive    
    ,IsSystem    
    FROM coc_APIRequestValidationRules (NOLOCK) WHERE isactive=1 and IsRequired=1 and APIRequestValidationID = (SELECT TOP 1 APIRequestValidationID FROM coc_APIRequestValidations (NOLOCK) WHERE ServiceKey = @ServiceKey)    
   end    
 else    
   begin    
   SELECT      
     APIRequestValidationRuleID    
    ,APIRequestValidationID    
    ,PropertyName    
    ,Condition    
    ,ConditionValue    
    ,ErrorMessage_EN    
    ,ErrorMessage_AR    
    ,IsDependent    
    ,DependentPropertyName    
    ,DependentKeyId    
    ,IsRegularExpression    
    ,RegularExpression    
    ,IsRequired    
    ,IsActive    
    ,IsSystem    
    FROM coc_APIRequestValidationRules (NOLOCK) WHERE isactive=1 and IsRequired=1 and APIRequestValidationID = (SELECT TOP 1 APIRequestValidationID FROM coc_APIRequestValidations (NOLOCK) WHERE RequestTypeID = @RequestTypeID)    
   end    
 end try    
 begin catch    
 SET @SPStatus = 1;    
 SET @SPReturnMessage = ERROR_MESSAGE();    
 end catch    
        
END 
GO
/****** Object:  StoredProcedure [dbo].[USP_API_LogRequestReference]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- Author:  Shaik Rafeeq Mohammad    
-- Create date: March-01-2019    
-- Description: Log API Request Reference in  coc_APIRequestReferenceLog table    
-- Example Execution: USP_API_LogRequestReference     
-- =============================================    
CREATE PROCEDURE [dbo].[USP_API_LogRequestReference]    
(    
@ReferenceNo nvarchar(50),    
@APIKey nvarchar(50),    
@ServiceKey nvarchar(50)=null,    
@SPStatus int = NULL out,    
@SPReturnMessage nvarchar(500) = NULL out    
)    
AS    
BEGIN    
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
 SET NOCOUNT ON;    
 begin try    
 SET @SPStatus = 0;    
 SET @SPReturnMessage = '';    
 if not exists (select * from coc_APIRequestReferenceLog (NOLOCK) where ReferenceNo = @ReferenceNo and APIKey = @APIKey and ServiceKey = @ServiceKey)    
  begin    
   INSERT INTO coc_APIRequestReferenceLog     
   (ServiceKey,APIKey,ReferenceNo,CreatedOn)    
   SELECT @ServiceKey,@APIKey,@ReferenceNo,GETDATE()    
  end         
 else          
   begin         
  SET @SPStatus = 1;    
  SET @SPReturnMessage = 'Service Reference Already Exists';    
   end    
 end try    
 begin catch    
 SET @SPStatus = 1;    
 SET @SPReturnMessage = ERROR_MESSAGE();    
 end catch    
        
END 
GO
/****** Object:  StoredProcedure [dbo].[usp_api_SaveECouponParticipationFromCompetitionLink]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_api_SaveECouponParticipationFromCompetitionLink]                                       
                    
  @EcouponID INTEGER                                        
                    
 ,@ConsumerID INTEGER                                        
                    
 ,@GuestID INTEGER                                       
                    
 ,@Mobile [Mobile] = NULL                                        
                    
 ,@Email [Email] = NULL                                        
                    
 ,@AnswersXML XML                                         
                    
 ,@RetailoutletID INT = NULL                                        
                    
 ,@ParticipationBarcode NVARCHAR(100) = NULL OUTPUT                                        
                    
 ,@ErrorMessage [Remark] = NULL OUTPUT                                        
                    
 ,@NumberOfCopons INT = 1                                        
                    
 ,@SPStatus INT = NULL OUT                                        
                    
 ,@SPReturnMessage NVARCHAR(500) = NULL OUT                                        
                    
 ,@APIKey nvarchar(50) = null                                
                    
 ,@RequestSourceType int = null                              
                    
 ,@ReferenceNumber nvarchar(150)=null                            
                    
 ,@UploadImagePath NVARCHAR(200) = NULL                     
                    
 ,@IsNotRequiredEmail bit=0                     
                    
 ,@ConsumerName NVARCHAR(200) =NULL                        
 ,@BranchName NVARCHAR(150) =NULL                      
 ,@Question1 nvarchar(1000)=NULL                    
 ,@Question2 nvarchar(1000)=NULL              
 ,@InvoiceNumber nvarchar(100)=NULL                    
 ,@InvoiceAmount decimal(18,0)=NULL          
 ,@Gift nvarchar(200) = null          
AS                                        
                    
SET NOCOUNT ON                                        
                    
BEGIN TRANSACTION SaveECouponConfiguration                                        
                    
BEGIN TRY                                        
                    
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;                                        
                    
 SET @SPStatus = 0;                                        
                    
 SET @SPReturnMessage = '';                                        
                    
                                        
                    
 DECLARE @EserviceTypeID INTEGER                                        
                    
 DECLARE @EServiceBarcodeID BIGINT                                        
                    
 DECLARE @Points INTEGER                                        
                    
 DECLARE @SelectedAnswer INTEGER                                        
                    
 DECLARE @EServiceID INTEGER                                        
                    
 DECLARE @NotificationID INTEGER                                        
                    
 DECLARE @NotificationSendID INTEGER                                        
                    
 DECLARE @LanguageID INTEGER                                        
                    
 DECLARE @CompetitionName NVARCHAR(200)                                        
                    
 --DECLARE @ConsumerName NVARCHAR(100)                                        
                    
 --DECLARE @EligibleCoupons integer                                                      
                    
 DECLARE @Barcode NVARCHAR(100)                                      
                    
                                         
                    
                                      
                    
 DECLARE @SMSBody nvarchar(max)                                      
                    
 DECLARE @EmailBody nvarchar(max)                                      
                    
                                  
                    
 DECLARE @TempBarcodeTable TABLE (                                        
                    
  Barcode NVARCHAR(100)                      
                    
  ,EServiceBarcodeID INT                                        
                    
  ,NotificationID INT                                        
                    
  );                                     
                    
  if(@Mobile='')                
 set @Mobile=NULL                
 if(@Email='')                
 set @Email=NULL                                       
                    
 IF @ConsumerID = 0                                        
                    
  SET @ConsumerID = NULL                                        
                    
                                        
                    
 IF @GuestID = 0                                        
                    
  SET @GuestID = NULL                                     
                    
                                        
                    
 IF @RetailoutletID = 0                                         
                    
  set @RetailoutletID = null                                        
                    
                                        
                    
 if @RetailoutletID is not null                                        
             
 begin                                        
                    
  if not exists (select * from [dbo].[coc_ECouponOutlets](NOLOCK) where retailoutletid = @RetailoutletID and ecouponid = @EcouponID and isactive = 1)                                        
                    
  begin                            
                    
   SET @ErrorMessage = 'Invalid Retail Outlet ID';                                        
                    
   SET @SPStatus = 1;                                        
                    
   SET @SPReturnMessage = @ErrorMessage;                                        
                    
   select * from @TempBarcodeTable;                                        
                    
   ROLLBACK TRANSACTION SaveECouponConfiguration;                                          
                    
   RETURN;                                        
                    
  end                                        
                    
 end                                        
                    
                              
                    
 if not exists (select * from [dbo].[coc_ECoupons](NOLOCK) EC inner join [dbo].[coc_EServices] ES (NOLOCK) ON EC.eserviceid = ES.eserviceid                                        
                    
   where convert(date, getdate()) between convert(date, ES.FromDate)  and convert(date, ES.ToDate) and ES.isactive = 1 and EC.isactive =1)                                        
                    
 begin                                        
                    
  SET @ErrorMessage = 'Competition Not active';                                     
                    
  SET @SPStatus = 1;                                        
                    
  SET @SPReturnMessage = @ErrorMessage;                                        
                    
  select * from @TempBarcodeTable;                                        
                    
  ROLLBACK TRANSACTION SaveECouponConfiguration;                                          
                    
  RETURN;                                        
                    
 end                                       
         declare @AllowedParticipationCount int          
   select @AllowedParticipationCount = Isnull(APIParticipationCount,IsNull(NumberOfGuestParticipations,0)) from coc_ECoupons where ECouponID= @EcouponID          
  IF @Email IS NOT NULL or @Mobile IS NOT NULL                    
    BEGIN                       
       DECLARE @ParticipationsCount int                      
       SELECT @ParticipationsCount = count(*)                          
       FROM coc_ECouponParticipations(NOLOCK)                
       WHERE  (ParticipationEmailID= @Email  or ParticipationMobile=@Mobile )                     
        AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                                            
        IF ( @ParticipationsCount >= @AllowedParticipationCount)                   
    BEGIN                  
   SET @SPStatus = 1;                                              
                        
   SET @SPReturnMessage = 'Already Participated with Same Mobile Or Email';                                              
                        
   SET @SPReturnMessage = 'Already Participated with Same Mobile Or Email';                                                                  
   SET @ErrorMessage = 'Already Participated with Same Mobile Or Email';                                              
                        
   select * from @TempBarcodeTable;                                              
                        
   ROLLBACK TRANSACTION SaveECouponConfiguration;                                              
                        
   RETURN;                                                          
  END                                                          
   END                              
                    
                                        
                    
 print('@ConsumerID IS NULL   AND @GuestID IS NULL  ')                                        
                    
 print('@ConsumerID = '+ convert(varchar,@consumerid) )                       
                    
 print('@GuestID = '+ convert(varchar,@GuestID) )                               
                    
               
                    
 IF (                                        
                    
   @ConsumerID IS NULL                                        
                    
   AND @GuestID IS NULL                                        
                    
  )                                        
                    
 BEGIN                                        
                    
  INSERT INTO coc_ECouponParticipationsInvalid (                                        
                    
   ECouponID                                        
                    
   ,ParticipationDate                                        
                    
   ,Barcode                                        
                    
   ,ParticipationMobile                                        
                    
   ,ParticipationEmailID                                        
                    
   ,ConsumerID                                        
                    
   ,Reason                                        
                    
   ,ConsumerName                                        
                    
   )                                        
                    
  SELECT @EcouponID                               
                    
   ,GETDATE()                                        
                    
   ,@Barcode                                        
                    
   ,@Mobile                                        
                    
   ,@Email                                        
                    
   ,@ConsumerID                       
                    
   ,'P'                                        
                    
   ,@ConsumerName                                        
                    
                                        
                    
  SET @ErrorMessage = 'Barcode is Not There to Asign';                                        
                    
  SET @SPStatus = 1;                                        
                    
  SET @SPReturnMessage = @ErrorMessage;                                        
                    
  select * from @TempBarcodeTable;                                        
                    
  ROLLBACK TRANSACTION SaveECouponConfiguration;                                          
                    
  RETURN;          
                    
 END                                        
                    
                                        
                    
 IF @ConsumerID IS NOT NULL                                        
                    
 BEGIN                                        
                    
  IF @Email IS NULL                                        
                    
   SELECT @Email = EmailID                                        
                    
   FROM coc_Consumers(NOLOCK)      
                    
   WHERE ConsumerID = @ConsumerID                                        
                    
    AND IsActive = 1                                        
                    
    AND IsDeleted = 0                                        
                    
    --AND IsVerified = 1                                        
                    
                                        
                    
  IF @ConsumerName IS NULL   or @ConsumerName = ''                                    
                    
   SELECT @ConsumerName =  coalesce(FullName,FirstName,SecondName,FamilyName)
                    
   FROM coc_Consumers(NOLOCK)                                        
                    
   WHERE ConsumerID = @ConsumerID                                        
                    
    AND IsActive = 1                                        
                    
    AND IsDeleted = 0                                        
                    
    --AND IsVerified = 1                                        
                    
                                        
                    
  IF @Mobile IS NULL                      
                    
   SELECT @Mobile = PrimaryMobile                                        
                    
   FROM coc_Consumers(NOLOCK)                                       
                    
   WHERE ConsumerID = @ConsumerID                                        
                    
    AND IsActive = 1                                        
                    
    AND IsDeleted = 0                                        
                    
    --AND IsVerified = 1                                        
                    
 END                                        
                    
ELSE                                        
                    
 BEGIN                                        
                    
  IF @Email IS NULL                                        
                    
   SELECT @Email = EmailID                                        
                    
   FROM coc_Guests(NOLOCK)                          
                    
   WHERE GuestID = @GuestID                                
                    
    AND IsActive = 1                                        
                    
    --AND IsVerified = 1                                        
                    
                                        
                    
  IF @ConsumerName IS NULL or @ConsumerName = ''                                        
                    
   SELECT @ConsumerName = coalesce(FullName,FirstName)                                      
                    
   FROM coc_Guests(NOLOCK)                                        
                    
   WHERE GuestID = @GuestID                                        
                    
    AND IsActive = 1                                        
                    
    --AND IsVerified = 1                                        
                    
                                        
                    
  IF @Mobile IS NULL                                        
                    
   SELECT @Mobile = PrimaryMobile                                        
                    
   FROM coc_Guests(NOLOCK)                           
                    
   WHERE GuestID = @GuestID                                
                    
    AND IsActive = 1                                        
                    
    --AND IsVerified = 1                                
                    
 END                                        
                    
                                        
                    
 IF @Mobile IS NULL                                        
                    
  OR len(@Mobile) <> 14                                        
                    
  OR SUBSTRING(@Mobile, 1, 6) <> '009665'                                        
                    
 BEGIN                                        
                    
  SET @ErrorMessage = 'InvalidMobile'   ;                            
                    
  SET @SPReturnMessage = @ErrorMessage;                                       
                    
 END                       
                    
 ELSE IF @Email IS NULL and @IsNotRequiredEmail=0   and @EcouponID <> 10364                          
                    
 BEGIN                                        
                    
  SET @ErrorMessage = 'InvalidEmail'   ;                            
                    
  SET @SPReturnMessage = @ErrorMessage;                                           
                    
 END                                        
                    
ELSE                                        
                    
 BEGIN                                        
                    
                                                  
                    
  DECLARE @Answers AS TABLE (                                        
                    
   ID INTEGER Identity(1, 1)                            
                    
,QuestionBankID INTEGER                                        
                    
   ,QuestionOptionID INTEGER                                        
                    
   ,AnswerRank INTEGER                                        
                    
   ,AnswerValue VARCHAR(100)                                        
                    
   )                                        
                    
                                        
                    
  INSERT INTO @Answers (                                        
                    
   QuestionBankID                                        
                    
   ,QuestionOptionID                                        
                    
   ,AnswerRank                                        
                    
 ,AnswerValue                                        
                    
   )                                        
                    
  SELECT Answer.value('(QuestionID[1])', 'INTEGER')              
                    
   ,Answer.value('(AnswerID[1])', 'INTEGER')                                        
                    
   ,Answer.value('(AnswerRank[1])', 'INTEGER')                                        
                    
   ,Answer.value('(AnswerValue[1])', 'VARCHAR(100)')                                        
                    
  FROM @AnswersXML.nodes('/ECouponParticipation/Answers') AS Data(Answer)                            
                    
                                        
                    
  UPDATE @Answers                                        
                    
  SET QuestionOptionID = NULL                                        
                    
  WHERE QuestionOptionID = 0                                        
                    
                                                    
                    
  SELECT @EServiceID = EServiceID                                        
                    
  FROM coc_ECoupons(NOLOCK)                                        
                    
  WHERE EcouponID = @EcouponID                                        
                    
                                        
                    
  DECLARE @errortext [Remark]                                        
                    
  DECLARE @return_value INT                                        
                    
                                        
                    
                                                   
            
  PRINT @ConsumerId                                        
                    
  PRINT @EserviceId                                        
                    
  PRINT @errortext                                        
                    
                                        
                    
                                                    
                    
                                          
                    
                                        
                    
  DECLARE @NumberOfConsumerParticipations INT                                        
                    
  DECLARE @NumberOfGuestParticipations INT                                        
                    
  DECLARE @NumberOfParticipations INT                                        
                    
  DECLARE @LoyaltyPointSetupID INT = 103;                                        
     
  DECLARE @AllowMultiple bit                                        
                    
  DECLARE @GeneralNotificationTemplateID INT                                        
  --DECLARE @APIParticipationCount INT                                        
                  
                      
                    
  SELECT @EServiceID = EServiceID                                        
                    
   ,@NumberOfConsumerParticipations = isnull(APIParticipationCount,ISNULL(NumberOfConsumerParticipations, 0)   )      
   --,@APIParticipationCount = ISNULL(APIParticipationCount,0)      
                    
   ,@NumberOfGuestParticipations = ISNULL(NumberOfGuestParticipations, 0)                                        
                    
   ,@NumberOfParticipations = ISNULL(participationCount, 0)                                        
                    
   ,@EserviceTypeID = EntryTypeID                                        
                    
   ,@AllowMultiple = MultipleParticipation                                        
               
   ,@GeneralNotificationTemplateID = ParticipationNotificationTemplateID                                        
                    
  FROM coc_ECoupons(NOLOCK)                                        
                    
  WHERE ECouponID = @EcouponID                                        
                    
                                        
                    
  if(@AllowMultiple=0)                                        
                    
    set @NumberOfCopons = 1;                                                
                                        
                    
  if(isnull(@NumberOfParticipations,0)=0)                                        
                    
   set @NumberOfParticipations= 100000                                        
                    
                                        
                    
                     
                    
 IF (                                        
                    
    @EserviceTypeID = 42                                        
                    
    OR @EserviceTypeID = 41                                        
                    
    )                                        
                    
  BEGIN                                        
                    
   DECLARE @Participations INT                                        
                    
   DECLARE @NoOfCoponsLeft INT;                                        
                    
                                        
                    
   IF @ConsumerID IS NOT NULL                                        
                    
   BEGIN                                        
                    
    SELECT @Participations = count(*) --, @NumberOfParticipations = @NumberOfConsumerParticipations                                                       
                    
    FROM coc_ECouponParticipations(NOLOCK) CP                                        
                    
    WHERE ConsumerID = @ConsumerID                                        
                    
     AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                                      
                 
                                   
                    
    IF (@NumberOfConsumerParticipations < (@NumberOfCopons + @Participations))                                        
                    
    BEGIN                                        
                    
     SET @NoOfCoponsLeft = @NumberOfConsumerParticipations - @Participations;                                        
                    
     SET @SPStatus = 1;                                        
                  
     SET @SPReturnMessage = 'Number of coupons exceeds Number of consumer participations count';                                        
                    
     SET @SPReturnMessage += ' you have only ' + convert(VARCHAR, @NoOfCoponsLeft) + ' coupons left';                                        
                    
   SET @ErrorMessage = 'You Already Participated';                                        
                    
     select * from @TempBarcodeTable;                                        
                    
     ROLLBACK TRANSACTION SaveECouponConfiguration;                                        
                    
     RETURN;                                        
                    
    END                                        
                    
   END                                        
                    
  ELSE                                        
                    
   BEGIN                                        
                    
    SELECT @Participations = count(*) --, @NumberOfParticipations = @NumberOfGuestParticipations                                                         
                    
    FROM coc_ECouponParticipations(NOLOCK) CP                                        
                    
    WHERE GuestID = @GuestID                                
                    
     AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                                       
                    
                                        
                    
    IF (@NumberOfGuestParticipations < (@NumberOfCopons + @Participations))                  
                    
    BEGIN           
                    
     SET @NoOfCoponsLeft = @NumberOfGuestParticipations - @Participations;                                        
                    
     SET @SPStatus = 1;                                        
                    
     SET @SPReturnMessage = 'Number of coupons exceeds Number of guest participations count';                                        
                    
     SET @SPReturnMessage += ' you have only ' + convert(VARCHAR, @NoOfCoponsLeft) + ' coupons left';                           
                    
  SET @ErrorMessage = 'You Already Participated';                                        
                    
     select * from @TempBarcodeTable;                                        
                    
     ROLLBACK TRANSACTION SaveECouponConfiguration;                                             
                    
     RETURN;                                            
    END                                        
                    
   END                                          
                    
                                        
                    
   IF ISNULL(@Participations, 0) < @NumberOfParticipations                                        
                    
   BEGIN                                        
                    
                                 
                    
    select @NotificationID = NotificationID from coc_notifications(NOLOCK) where eserviceid = @EServiceID                                         
            
                                        
                    
    INSERT INTO @TempBarcodeTable (                                        
                    
     Barcode                                      
             
     ,EServiceBarcodeID                                       
                    
     ,NotificationID                                        
                    
     )                                        
                    
    SELECT TOP (@NumberOfCopons)                                         
                    
     Barcode                                        
                    
     ,EServiceBarcodeID                                        
                    
     ,NotificationID                                        
                    
    FROM coc_EServiceBarcodes(NOLOCK) --WITH(XLOCK, ROWLOCK)                                        
                    
    WHERE                                        
                    
     Notificationid = @NotificationID                                         
                    
     AND IsUsed = 0                                        
                    
     AND AsignedMoile IS NULL                                        
                    
    ORDER BY Rand()                                        
                    
                                
                    
 set @Barcode =(select top 1 Barcode from @TempBarcodeTable)                      
                    
    --WAITFOR DELAY '00:00:4';                                        
                   
       print('barcode = ' +@Barcode )                                       
                    
    IF @ConsumerID IS NOT NULL                                        
                    
    BEGIN                                        
                    
                                            
                    
       EXEC AddCustomerLoyaltyPoints                                         
                    
        @EcouponID,                                        
                    
        @ConsumerID,                                        
                    
        @LoyaltyPointSetupID,                                        
                    
        @ErrorMessage OUTPUT                                            
                    
                                            
                    
    END                                        
                    
                                        
                    
  Declare @UsedByAPI bit;                                
                    
  if(@APIKey is not null)                                
                    
   set @UsedByAPI = 1;                                
                    
                                
                    
    UPDATE EB                                        
                    
    SET ConsumerID = @ConsumerID                                        
                    
     ,AsignedMoile = @Mobile                                        
                    
     ,IsUsed = 1                                 
                    
     ,UsedDate = GETDATE()                                 
                    
     ,GuestID = @GuestID                                      
                    
  ,UsedByAPI=@UsedByAPI                                    
                    
  ,RetailoutletID=@RetailoutletID                                    
                    
     ,APIKey=@APIKey                                    
                    
    FROM coc_EServiceBarcodes(NOLOCK) EB                          
                    
WHERE EServiceBarcodeID IN (                                        
                    
      SELECT EServiceBarcodeID                                        
                    
      FROM @TempBarcodeTable                                        
                    
      )        and IsUsed= 0     AND AsignedMoile IS NULL                               
                    
                               
                    
           if @@ROWCOUNT <> @NumberOfCopons                    
                    
   begin                                        
                    
     SET @ErrorMessage = 'Transaction Error';                                        
                    
     SET @SPStatus = 1;                                        
                    
     SET @SPReturnMessage = @ErrorMessage;                                        
                    
     select * from @TempBarcodeTable;                                        
                    
     ROLLBACK TRANSACTION SaveECouponConfiguration;              
                    
     RETURN;                                        
                    
    end                                          
                    
    IF (ISNULL(@Barcode, '0') != '0') OR EXISTS ( SELECT *FROM @TempBarcodeTable)                             
                    
 BEGIN                                        
                    
     DECLARE @ECouponParticipationID BIGINT                                        
                    
                                        
                    
     INSERT INTO coc_ECouponParticipations (                                        
                    
      ECouponID                                        
                    
      ,ParticipationDate                                        
                    
      ,Barcode                                        
                    
,ParticipationMobile                                        
                    
      ,ParticipationEmailID                                        
                
      ,ConsumerID                                        
                    
      ,GuestID                                        
                    
      ,ConsumerName                                        
                    
      ,RetailoutletID                                 
                    
   ,RequestSourceType                              
                    
   ,ReferenceNumber                          
                    
   ,UploadImagePath                    
                    
   ,IsFromCompetitionLink                                     
   ,BranchName                    
   ,Question1                    
   ,Question2              
   ,InvoiceAmount          
   ,InvoiceNumber        
   ,Gift        
   )                                        
                    
     SELECT @EcouponID                                        
                    
,GETDATE()                                        
                    
      ,Barcode                                        
                    
      ,@Mobile                                        
                    
      ,@Email                                        
                    
      ,@ConsumerID                                        
                    
      ,@GuestID                                        
                    
      ,@ConsumerName                                        
                    
      ,@RetailoutletID                              
                    
   ,@RequestSourceType                               
                    
   ,@ReferenceNumber                            
                    
   ,@UploadImagePath                         
                    
   ,0                            
   ,@BranchName                    
   ,@Question1                    
   ,@Question2            
   ,@InvoiceAmount          
   ,@InvoiceNumber          
   ,@Gift        
     FROM @TempBarcodeTable                                        
                    
                                        
                    
     --SELECT @NotificationSendID = NotificationSendID                                        
                    
     --FROM coc_NotificationSends(NOLOCK)                                        
                    
     --WHERE NotificationID = @NotificationID                                        
                    
                                        
                    
     SELECT @ECouponParticipationID = SCOPE_IDENTITY()                                        
                    
                                        
                  
     DECLARE @ID INTEGER                                        
                    
     DECLARE @QuestionBankID INTEGER                                        
                    
     DECLARE @QuestionOptionID INTEGER                                        
                    
     DECLARE @AnswerRank INTEGER                                   
                    
     DECLARE @AnswerValue VARCHAR(100)                                        
                    
                                        
                    
     --@Answers (ID, QuestionBankID, QuestionOptionID, AnswerRank)                                                        
                    
     SELECT TOP 1 @ID = ID                                        
             
      ,@QuestionBankID = QuestionBankID                                        
                    
      ,@QuestionOptionID = QuestionOptionID                                        
                    
      ,@AnswerRank = AnswerRank                                        
                    
      ,@AnswerValue = AnswerValue             
                    
     FROM @Answers                                        
                    
                                        
                    
     DECLARE @ActiveID INTEGER                                        
                    
                                        
                    
     WHILE @ID IS NOT NULL                                   
                    
      AND @ID <> ISNULL(@ActiveID, 0)                                        
                    
     BEGIN                                        
            
      SET @ActiveID = @ID                                        
                    
                                        
                    
      INSERT INTO coc_ECouponParticipationAnswers (                                        
                    
       QuestionBankID                                        
                    
       ,QuestionOptionID                                        
                    
       ,AnswerRank                                        
                    
       ,ECouponParticipationID                                        
                    
       ,AnswerValue                                        
                    
       )                                     
                    
      VALUES (                       
                    
       @QuestionBankID                          
                    
       ,@QuestionOptionID                                        
                    
       ,@AnswerRank                                        
                    
       ,@ECouponParticipationID                                        
                    
       ,@AnswerValue                                      
                    
   )                                        
                    
                                        
                    
      SELECT TOP 1 @ID = ID                                        
                    
       ,@QuestionBankID = QuestionBankID                                        
                    
       ,@QuestionOptionID = QuestionOptionID                                        
                    
       ,@AnswerRank = AnswerRank                                        
                    
       ,@AnswerValue = AnswerValue                                        
                    
      FROM @Answers                                        
                    
      WHERE ID > @ActiveID                                        
                    
     END                                        
                    
                                        
                    
     IF @ConsumerID IS NOT NULL                                        
                    
     BEGIN                                        
                    
                                         
                    
      SELECT @EServiceBarcodeID = null                                   
                    
      SELECT *                                        
                    
       FROM @TempBarcodeTable order by EServiceBarcodeID ASC                                        
                    
      SELECT top 1 @EServiceBarcodeID = EServiceBarcodeID                                        
                    
       ,@Barcode = Barcode                                        
                    
      FROM @TempBarcodeTable order by EServiceBarcodeID ASC                                        
                    
      print '@EServiceBarcodeID: '+convert(varchar,@EServiceBarcodeID)                                        
                    
      WHILE @EServiceBarcodeID IS NOT NULL AND @EServiceBarcodeID <> ISNULL(@ActiveID, 0)                                        
                    
      BEGIN                                        
                    
       SET @ActiveID = @EServiceBarcodeID                                        
                    
                               
                    
                                          
                    
                                            
                    
       EXEC SaveNotificationSending                                        
                    
          @NotificationID                                        
                    
         ,@EcouponID                                        
                    
         ,@ConsumerID                                        
                    
         ,@GeneralNotificationTemplateID                                        
                    
         ,@EServiceID                                        
                    
         ,@Barcode                          
                    
         ,@ErrorMessage OUTPUT                    
                    
       SELECT top 1 @EServiceBarcodeID = EServiceBarcodeID                                        
                    
        ,@Barcode = Barcode                                        
                    
       FROM @TempBarcodeTable                                         
                    
       WHERE EServiceBarcodeID > @ActiveID                                        
                    
       order by EServiceBarcodeID ASC                                        
                    
      END                                       
                    
     END                                        
                    
     SET @ParticipationBarcode = @Barcode;                                        
                    
     SELECT Barcode                                        
                    
      ,EServiceBarcodeID                                        
                    
      ,NotificationID                                        
                    
     FROM @TempBarcodeTable                                        
                    
     SET @ErrorMessage = ''                                        
                    
    END                                        
                    
    ELSE                                        
                    
    BEGIN                                        
                    
     SET @ErrorMessage = 'Barcode is Not There to Asign'                                        
                    
     SET @SPStatus = 1;                                  
                    
     SET @SPReturnMessage = @ErrorMessage;                                        
                    
     select * from @TempBarcodeTable;                                        
                    
    END                                        
                    
   END                                        
                    
 ELSE                                        
                    
   BEGIN                                        
                    
    INSERT INTO coc_ECouponParticipationsInvalid (                                 
                    
     ECouponID                        
                    
     ,ParticipationDate                                        
                    
     ,Barcode                                     
                    
     ,ParticipationMobile                                        
                    
     ,ParticipationEmailID                                        
                    
     ,ConsumerID                                  
                    
     ,Reason                                        
                    
     ,ConsumerName               
                    
     )                                        
                    
    SELECT @EcouponID                                        
                    
     ,GETDATE()                                        
                    
     ,Barcode                                        
                    
     ,@Mobile                                        
                    
     ,@Email                                        
                    
     ,@ConsumerID                                        
                    
     ,'P'                                        
                    
     ,@ConsumerName                                        
                    
    FROM @TempBarcodeTable                                        
                    
    select * from @TempBarcodeTable;                       
                    
    SET @ErrorMessage = 'You Already Participated'                                        
                    
    SET @SPStatus = 1;                                        
                    
    SET @SPReturnMessage = @ErrorMessage;                                        
                    
   END                                        
                    
  END                                        
                    
 ELSE -- else entrytypeid not in 41 or 42                                        
                    
  BEGIN                                        
                    
   select * from @TempBarcodeTable;                                     
                    
   SET @ErrorMessage = 'Invalid Competition Type'                                        
                    
   SET @SPStatus = 1;                                        
                    
   SET @SPReturnMessage = @ErrorMessage;                                    
                    
  END               
                    
                                        
                    
  IF (ISNULL(@ErrorMessage, '') <> '')                                        
                    
  BEGIN                                        
                    
   IF @ConsumerID IS NOT NULL                                        
                    
   BEGIN                  -------------------------------------------------------------------//                                                   
                    
    --//-------------------------------------------------------                                                      
                    
    DECLARE @return_value1 INT                                        
                    
                 
                    
    EXEC @return_value1 = [dbo].[SaveEServiceAddOnConsumers] @ConsumerID = @ConsumerID                                        
                    
     ,@EServiceID = @EServiceID                                        
                    
                                        
                    
    PRINT '@return_value1'                                        
                    
    PRINT @return_value1                                        
                    
                                        
                    
    --------------------------------------------------------------------//                                                      
                    
    SET XACT_ABORT ON;                                        
                    
   END                                        
                    
  END               
                    
                                        
                    
  SELECT @ErrorMessage                                        
                    
                                        
                    
                                      
                    
 END                                        
        
                               
                    
                                      
                    
 COMMIT TRANSACTION SaveECouponConfiguration                                        
                    
END TRY                                        
                    
                                        
                    
BEGIN CATCH                                        
                    
 ROLLBACK TRANSACTION SaveECouponConfiguration                                        
                    
                                        
                    
 SELECT @ErrorMessage = ERROR_MESSAGE()                                        
                    
                                        
                    
 SET @SPStatus = 1;                                        
                    
 SET @SPReturnMessage = @ErrorMessage;                                        
                    
                                        
                    
 RAISERROR (                      
                    
   @ErrorMessage                                        
                    
   ,16                                        
                    
   ,1                                        
                    
   );                                        
                    
END CATCH                                        
                    
                                        
                    
SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[USP_API_SaveNewGuest]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================        
-- Author:  Rafeeq Mohammad        
-- Create date: March-25-2019        
-- Description: API Guest Participation      
-- Example Execution: USP_API_SaveNewGuest         
-- =============================================        
CREATE PROCEDURE [dbo].[USP_API_SaveNewGuest]         
@FirstName nvarchar(200)          
,@LastName nvarchar(200)          
,@Mobile nvarchar(15)         
,@MiddleName nvarchar(200)=null          
,@EmailID nvarchar(100)=null          
,@Gender int=null          
,@DOB datetime=null      
,@InvoiceNumber nvarchar(150) =null       
,@InvoiceAmount decimal(18,2)=null       
,@ReferenceNumber nvarchar(150)      
,@RequestSourceType int=5       
,@GuestID int OUTPUT             
,@ConsumerID int OUTPUT      
,@SPStatus int = NULL out        
,@SPReturnMessage nvarchar(500) = NULL out        
AS             
      
  begin try        
              
  BEGIN     
  
 if(@EmailID = '')    
  set @EmailID = null    
 if(@Mobile = '')    
 set @Mobile = null            
  
  DECLARE @GuestID_CompetitionLink integer =0;          
  DECLARE @ConsumerID_CompetitionLink integer=0;           
  IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1 and isactive= 1 and isdeleted = 0 AND (PrimaryMobile=@Mobile))          
   select top 1 @ConsumerID_CompetitionLink = ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1  and isactive= 1 and isdeleted = 0 AND (PrimaryMobile=@Mobile)           
  else IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1 and isactive= 1 and isdeleted = 0 AND (@EmailID IS NULL and EmailID=@EmailID))          
   select top 1 @ConsumerID_CompetitionLink = ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1  and isactive= 1 and isdeleted = 0 AND (EmailID=@EmailID)           
             
  if @ConsumerID_CompetitionLink = 0          
  BEGIN          
   IF EXISTS (select GuestID FROM coc_guests(NOLOCK) WHERE (PrimaryMobile=@Mobile))          
    select top 1 @GuestID_CompetitionLink = GuestID FROM coc_guests(NOLOCK) WHERE (PrimaryMobile=@Mobile) and IsActive = 1            
   else IF EXISTS (select GuestID FROM coc_guests(NOLOCK) WHERE EmailID=@EmailID and IsActive = 1 )          
    select top 1 @GuestID_CompetitionLink = GuestID FROM coc_guests(NOLOCK) WHERE (EmailID=@EmailID) and IsActive = 1           
  END          
          
           
          
  IF @GuestID_CompetitionLink = 0 and @ConsumerID_CompetitionLink = 0          
    BEGIN          
     Insert into coc_guests(     
  FullName,         
      FirstName          
     ,SecondName           
     ,FamilyName          
     ,DOB          
     ,PrimaryMobile          
     ,EmailID          
     ,IsActive          
     ,IsVerified          
     ,Gender          
     ,AddDate          
     ,RequestSourceType      
  ,ReferenceNumber)          
               
     SELECT   @FirstName+' '+@MiddleName,       
     @FirstName          
     ,@MiddleName           
     ,@LastName          
     ,@DOB          
     ,@Mobile          
     ,@EmailID          
     ,1          
     ,1          
     ,@Gender          
     ,GETDATE()          
     ,@RequestSourceType      
  ,@ReferenceNumber          
          
   SET @GuestID = SCOPE_IDENTITY()                
    END          
     ELSE          
 BEGIN          
  SET @GuestID = @GuestID_CompetitionLink;          
  SET @ConsumerID = @ConsumerID_CompetitionLink;          
 END          
          
   SET @SPStatus = 0;        
  SET @SPReturnMessage = '';      
    END          
 end try        
 begin catch        
 SET @SPStatus = 1;        
 SET @SPReturnMessage = ERROR_MESSAGE();        
 end catch           
GO
/****** Object:  StoredProcedure [dbo].[USP_API_ServiceLogin]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Shiva  
-- Create date: March-06-2019  
-- Description: check APIkey and password in coc_CorporateAPIUser table  
-- Example Execution: USP_API_ServiceLogin   
-- =============================================  
CREATE PROCEDURE [dbo].[USP_API_ServiceLogin]  
(  
@APIKey nvarchar(50),  
@Password nvarchar(50),  
@ServiceKey nvarchar(50),  
@SPStatus int = NULL out,  
@SPReturnMessage nvarchar(500) = NULL out  
)  
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
 declare  @TempTable table (ServiceKey nvarchar(50),APIKey nvarchar(50),CorporateID int,EServiceID int,ECoponID int)  
  
 begin try   
 if exists (select * from coc_CorporateAPIUser(NOLOCK) where APIKey = @APIKey and Password = @Password)  
  begin  
  Declare @EService_ID int ;  
  Declare @ECopon_ID int ;  
  Declare @Corporate_ID int;  
  set @Corporate_ID = (SELECT CorporateID from coc_CorporateAPIUser(NOLOCK) where APIKey=@APIKey and Password = @Password)  
  Set @EService_ID = (select EServiceID from coc_ServiceKeys(NOLOCK) where ServiceKey=@ServiceKey)  
  if(@EService_ID is not null)  
   set @ECopon_ID = (select ECouponID from coc_ECoupons(NOLOCK) where EServiceID=@EService_ID)  
  
  insert into @TempTable (ServiceKey,APIKey ,CorporateID ,EServiceID ,ECoponID)  
  Select @ServiceKey,@APIKey,@Corporate_ID,@EService_ID,@ECopon_ID  
   SET @SPStatus = 0;  
   SET @SPReturnMessage = '';  
   select ServiceKey,APIKey,CorporateID,EServiceID,ECoponID from @TempTable  
  
  end       
 else        
   begin       
  SET @SPStatus = 1;  
  SET @SPReturnMessage = 'Invalid Credintials';  
   end  
 end try  
 begin catch  
 SET @SPStatus = 1;  
 SET @SPReturnMessage = ERROR_MESSAGE();  
 end catch  
      
END
GO
/****** Object:  StoredProcedure [dbo].[USP_API_UseVoucherBarcode]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Shiva  
-- Create date: March-08-2019  
-- Description: use barcode  
-- Example Execution: USP_API_UseVoucherBarcode   
-- =============================================  
CREATE PROCEDURE [dbo].[USP_API_UseVoucherBarcode]  
(  
 @barcode  NVARCHAR(500)= NULL,      
 @languageId INTEGER,   
 @corporateID BIGINT,  
 @isAPIRequest BIT= 0,  
 @BarcodeID INTEGER= NULL,  
 @InvoiceAmount dbo.Amount = NULL,  
 @InvoiceNumber varchar(50) = NULL,  
 @APIKey nvarchar(50) = NULL,    
 @Location nvarchar(100) = NULL,    
 @SPStatus int = NULL out,  
 @SPReturnMessage nvarchar(500) = NULL out  
)  
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
 declare @APIUserID int  
 if @BarcodeID is null   
  select @BarcodeID = EServiceBarcodeID from coc_EServiceBarcodes (NOLOCK) where Barcode = @barcode and CorporateID = @corporateID   
 begin try   
  select @APIUserID = CorporateAPIUserID from coc_CorporateAPIUser (NOLOCK) where APIKey= @APIKey and CorporateID = @corporateID  
  SET @SPStatus = 0;  
  SET @SPReturnMessage = '';  
  UPDATE coc_EServiceBarcodes SET IsUsed=1,   
     UsedDate = getdate(),  
     UsedByAPI = @isAPIRequest  ,  
     CorporateAPIUserID = @APIUserID,  
     InvoiceAmount = @InvoiceAmount,   
     InvoiceNumber = @InvoiceNumber,  
     Location = @Location  
     WHERE EServiceBarcodeID=@BarcodeID  and CorporateID = @corporateID  
  
 end try  
 begin catch  
 SET @SPStatus = 1;  
 SET @SPReturnMessage = ERROR_MESSAGE();  
 end catch  
      
END
GO
/****** Object:  StoredProcedure [dbo].[usp_AutomaticVoucherBarcodeCreation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_AutomaticVoucherBarcodeCreation]
AS
 SET NOCOUNT ON 
	 declare @VoucherName nvarchar(1000)
	 declare @TotalBarcodes int
	 declare @AvailbleBarcodes int
	 declare @TotalBarcodesUsed int
	 declare @NotificationID int
	 declare @RequiredBarcodes int
	 declare @EServiceID int
	 declare @CorporateID int
	 declare @ServiceTypeID int
	 declare @ServiceName nvarchar(1000)
	 declare @desc nvarchar(max)
   declare @Notifications table (NotificationID bigint,EServiceID int,NotificationCount int, corporateID int, ServiceTypeID int)
	

insert into @Notifications
	 select  NotificationID,N.EServiceID,NotificationCount, CorporateID, ServiceTypeID
		from coc_Notifications N (NOLOCK) inner join coc_EServices ES (NOLOCK)
			ON ES.EServiceID= N.EServiceID
		where N.eserviceid in (select eserviceid from coc_EServices (NOLOCK) where isactive=1 and FromDate<=getdate() and ToDate>=getdate() and servicetypeid = 51)

WHILE exists(select * from @Notifications)
BEGIN
    set @NotificationID=0
	set @TotalBarcodes=0
	set @TotalBarcodesUsed=0
	set @AvailbleBarcodes=0
	set @EServiceID=0
	set @ServiceName=''
	set @desc=''
	select top 1 @NotificationID=NotificationID,@EServiceID=EServiceID, @CorporateID = corporateID, @ServiceTypeID = ServiceTypeID from @Notifications
	select @TotalBarcodes=COUNT(*) from coc_EServiceBarcodes (NOLOCK) where NotificationID = @NotificationID
	select @TotalBarcodesUsed=COUNT(*) from coc_EServiceBarcodes (NOLOCK) where NotificationID = @NotificationID and IsUsed= 1
	set @RequiredBarcodes=(@TotalBarcodes/100)*15
	select @AvailbleBarcodes=COUNT(*) from coc_EServiceBarcodes (NOLOCK) where NotificationID = @NotificationID and IsUsed=0
	select @ServiceName=EService from coc_EServiceLanguages (NOLOCK) where LanguageID=1 and EServiceID=@EServiceID
	set @desc='Voucher Name : '+@ServiceName+'<br>'+'Total Barcodes : '+convert(nvarchar(100),@TotalBarcodes)+'<br>'+'Availble Barcodes : '+convert(nvarchar(100),@AvailbleBarcodes)+'<br>';

      --select TaskTypeId,Date,ExecuteDate,UniqueId, Parameters, UserId, Status, ExecutionStatus from coc_ServiceTask 
	  select @AvailbleBarcodes, @RequiredBarcodes
	IF (@AvailbleBarcodes<@RequiredBarcodes or @AvailbleBarcodes= 0)
	begin
		
		DECLARE @RC int
		DECLARE @TaskTypeId int = 1
		DECLARE @UniqueId int 
		set @UniqueId= @EServiceID
		DECLARE @ExecuteDate datetime = getdate()
		DECLARE @TaskParameters nvarchar(max)
		DECLARE @TaskData nvarchar(max) = null
		DECLARE @UserId int = 1
		DECLARE @ServiceTaskId int
		DECLARE @ReturnValue [dbo].[Remark]
		DECLARE @NumberOfBarcodes int = 1000

		if not exists(select * from coc_ServiceTask (NOLOCK) where UniqueId= @UniqueId and Status in (1,3))
		begin
			set @TaskParameters= '<?xml version="1.0" encoding="utf-16"?><BarcodeGenerateParams xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ServiceID>'+cast(@EServiceID as varchar)+'</ServiceID><NoOfBarcodes>'+cast(@NumberOfBarcodes as varchar)+'</NoOfBarcodes><NotificationID>'+cast(@NotificationID as varchar)+'</NotificationID><ServiceTypeID>'+cast(@ServiceTypeID as varchar)+'</ServiceTypeID><Prefix /><Suffix /><CorporateID>'+cast(@CorporateID as varchar)+'</CorporateID><LanguageID>1</LanguageID><UserId>'+cast(@UserId as varchar)+'</UserId></BarcodeGenerateParams>'

			-- TODO: Set parameter values here.

			EXECUTE @RC = [dbo].[SaveServiceTask] 
			   @TaskTypeId
			  ,@UniqueId
			  ,@ExecuteDate
			  ,@TaskParameters
			  ,@TaskData
			  ,@UserId
			  ,@ServiceTaskId OUTPUT
			  ,@ReturnValue OUTPUT
		
			set @desc='Voucher Name : '+@ServiceName+'<br>'+'Total Barcodes : '+convert(nvarchar(100),@TotalBarcodes)+'<br>'+'Availble Barcodes : '+convert(nvarchar(100),@AvailbleBarcodes)+'<br> Added Barcodes : '+convert(nvarchar(100),@NumberOfBarcodes)+'<br> ';
			print 'Email sent'
			exec msdb.dbo.sp_send_dbmail
			@profile_name = 'Email',
			@recipients = 'shamim@logicsystems-me.com',
			--@copy_recipients='shamim@logicsystems-me.com;cs@e-copon.com',
			@subject = 'Voucher Barcode added',
			@body  = @desc,
			@body_format='HTML'
		end 
	End
    delete from @Notifications where NotificationID=@NotificationID
	
END




GO
/****** Object:  StoredProcedure [dbo].[USP_ChangeContactInfoAudit]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- Author:  Rafeeq Mohammad     
-- Create date: 05/30/2018    
-- Description: send otp    
-- =============================================    
CREATE PROCEDURE [dbo].[USP_ChangeContactInfoAudit] (    
 @ConsumerID INT    
 ,@EmailID NVARCHAR(100) = NULL    
 ,@Mobile NVARCHAR(20) = NULL    
 ,@ReturnMsg NVARCHAR(100) OUT    
 ,@ErrorMessage NVARCHAR(4000) OUT    
 )    
AS    
BEGIN    
 DECLARE @OtpID INTEGER = NULL;    
 DECLARE @Otp INTEGER = NULL;    
 DECLARE @Upper INTEGER = 100000;    
 DECLARE @Lower INTEGER = 999999;    
 DECLARE @Minutes INTEGER;    
 DECLARE @OtpTypeID INTEGER = 131;    
 DECLARE @OldEmail VARCHAR(100);    
 DECLARE @OldMobile VARCHAR(100);    
    
 BEGIN TRY    
  
  --validate consumer for profile edit      
 Declare @RegistrationID int;  
 set @RegistrationID = @ConsumerID;  
if(@RegistrationID is not null and @RegistrationID  <> 0)      
  begin -- @RegistrationID null check if starts      
   Declare @ECouponID int = 0;      
   select top 1 @ECouponID = ECouponID from coc_ECouponParticipations (NOLOCK) where ConsumerID = @RegistrationID order by ECouponParticipationID desc;      
   if(@ECouponID <> 0)      
     begin-- @@ECouponID null check if starts        
  Declare @FinalDrawDate datetime;      
  select @FinalDrawDate = max(drawdate)  from coc_ECouponDraw(NOLOCK) where ecouponid = @ECouponID;       
  if(convert(date,getdate())<convert(date,@FinalDrawDate))      
   begin  
     SET @ErrorMessage = 'Sorry, you cannot update your data, if you want to amend any of the data, please contact technical support at the following email: support@e-copon.com';    
     SET @ReturnMsg = 'Unsuccess';        
    Return;  
   end  
      end  -- @@ECouponID null check if ends       
    end -- @RegistrationID null check if ends    
  
  
  
  IF (    
    @EmailID IS NOT NULL    
    AND @EmailID <> ''    
    )    
  BEGIN    
   IF NOT EXISTS (    
     SELECT US.UserName    
     FROM [coc_Users] US(NOLOCK)    
     LEFT JOIN [coc_Consumers] CS(NOLOCK) ON CS.UserID = US.UserID    
     WHERE (us.UserName = @EmailID)    
      AND US.IsDeleted = 0    
     )    
   BEGIN --BEGIN IF    
    --INSERT INTO coc_ChangeContactInformationAudit    
    SELECT @Minutes = SetupValue    
    FROM COC_SystemSetups   (NOLOCK) 
    WHERE SystemSetupID = 504    
    
    SET @Otp = ROUND(((@Upper - @Lower - 1) * RAND() + @Lower), 0);    
    
    INSERT INTO coc_OTP (    
     OtpTypeID    
     ,Otp    
     ,OTPDate    
     ,OtpExpity    
     ,IsActive    
     )    
    SELECT @OtpTypeID    
     ,@Otp    
     ,GETDATE()    
     ,DATEADD(minute, @Minutes, GETDATE())    
     ,1    
    
    SET @OtpID = SCOPE_IDENTITY();    
    
    SELECT @OldEmail = EmailID    
     ,@OldMobile = MobileNumber    
    FROM coc_users   (NOLOCK) 
    WHERE UserID = (    
      SELECT TOP 1 UserID    
      FROM coc_consumers (NOLOCK)   
      WHERE ConsumerID = @ConsumerID    
      );    
    
    INSERT INTO coc_ChangeContactInformationAudit (    
     ConsumerID    
     ,NewEmailID    
     ,OldEmailID    
     ,NewMobile    
     ,OldMobile    
     ,OTPID    
     ,OTPGeneratedOn    
     ,IsVerified    
     ,OTP    
     ,AddedOn    
     )    
    SELECT @ConsumerID    
     ,@EmailID    
     ,@OldEmail    
     ,@Mobile    
     ,@OldMobile    
     ,@OtpID    
     ,GETDATE()    
     ,0    
     ,@Otp    
     ,GETDATE();    
    
    SET @ErrorMessage = 'OTP Generated successfully';    
    SET @ReturnMsg = 'Success';    
   END --END IF    
   ELSE    
   BEGIN -- BEGIN ELSE    
    SET @ErrorMessage = 'EmailAlreadyExists';    
    SET @ReturnMsg = 'Unsuccess';    
   END --END ELSE    
  END    
  ELSE IF (    
    @Mobile IS NOT NULL    
    AND @Mobile <> ''    
    )    
  BEGIN    
   IF NOT EXISTS (    
     SELECT US.UserName    
     FROM [coc_Users] US(NOLOCK)    
     LEFT JOIN [coc_Consumers] CS(NOLOCK) ON CS.UserID = US.UserID    
     WHERE (us.mobilenumber = @Mobile)    
      AND US.IsDeleted = 0    
     )    
   BEGIN --BEGIN IF    
    --INSERT INTO coc_ChangeContactInformationAudit    
    SELECT @Minutes = SetupValue    
    FROM COC_SystemSetups (NOLOCK)    
    WHERE SystemSetupID = 504    
    
    SET @Otp = ROUND(((@Upper - @Lower - 1) * RAND() + @Lower), 0);    
    
    INSERT INTO coc_OTP (    
     OtpTypeID    
     ,Otp    
     ,OTPDate    
     ,OtpExpity    
     ,IsActive    
     )    
    SELECT @OtpTypeID    
     ,@Otp    
     ,GETDATE()    
     ,DATEADD(minute, @Minutes, GETDATE())    
     ,1    
    
    SET @OtpID = SCOPE_IDENTITY();    
    
    SELECT @OldEmail = EmailID    
     ,@OldMobile = MobileNumber    
    FROM coc_users   (NOLOCK) 
    WHERE UserID = (    
      SELECT TOP 1 UserID    
      FROM coc_consumers (NOLOCK)   
      WHERE ConsumerID = @ConsumerID    
      );    
    
    INSERT INTO coc_ChangeContactInformationAudit (    
     ConsumerID    
     ,NewEmailID    
     ,OldEmailID    
     ,NewMobile    
     ,OldMobile    
     ,OTPID    
     ,OTPGeneratedOn    
     ,IsVerified    
     ,OTP    
     ,AddedOn    
     )    
    SELECT @ConsumerID    
     ,@EmailID    
     ,@OldEmail    
     ,@Mobile    
     ,@OldMobile    
     ,@OtpID    
     ,GETDATE()    
     ,0    
     ,@Otp    
     ,GETDATE();    
    
    SET @ErrorMessage = 'OTP Generated successfully';    
    SET @ReturnMsg = 'Success';    
   END --END IF    
   ELSE    
   BEGIN -- BEGIN ELSE    
    SET @ErrorMessage = 'MobileAlreadyExists';    
    SET @ReturnMsg = 'Unsuccess';    
   END --END ELSE    
  END    
    
  SELECT @OTPID OTPID    
   ,@OTP OTP;    
 END TRY    
    
 BEGIN CATCH    
  SET @ReturnMsg = 'Unsuccess';    
  SET @ErrorMessage = ERROR_MESSAGE();    
 END CATCH    
END 
GO
/****** Object:  StoredProcedure [dbo].[USP_CheckConsumerProfile]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_CheckConsumerProfile] 
	@ConsumerID INTEGER	
	--USP_CheckConsumerProfile 20951
AS
SET NOCOUNT ON
	BEGIN		
		
		SELECT Count(*) IsFullProfile from coc_Consumers (NOLOCK) WHERE ConsumerID = @ConsumerID  AND (FirstName IS NOT NULL AND SecondName IS NOT NULL AND FamilyName IS NOT NULL 
		AND  CityID IS NOT NULL AND Gender IS NOT NULL AND BirthDate IS NOT NULL AND NationalityID IS NOT NULL)

	END

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_CompetitionRegistration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_CompetitionRegistration] (                      
 @FirstName NVARCHAR(200)                      
 ,@SecondName NVARCHAR(200)                   
 ,@FamilyName NVARCHAR(200)=null                     
 ,@PrimaryMobile VARCHAR(15)                      
 ,@EmailID VARCHAR(100)                      
 ,@Password VARCHAR(200)                      
 ,@CountryID INT = 183                  
 ,@NationalityID INT =null              
 ,@CityID INT  = null                
 ,@Gender INT = null                 
 ,@DOB Datetime = null      
 ,@UserIdentityTypeID INT=NULL    
 ,@IdentityNumber NVARCHAR(100)=NULL    
 ,@OtpID INT                      
 ,@ImageFile NVARCHAR(100) = NULL                      
 ,@IsFromCompetitionLink bit = null                    
 ,@ErrorMessage VARCHAR(500) OUTPUT          
 ,@ECouponID bigint=null                    
 )                      
AS                      
BEGIN                      
 BEGIN TRY                      
  BEGIN TRANSACTION SaveCorporateUser                      
                      
  DECLARE @LoyaltyPoint INTEGER;                      
  DECLARE @MemberShipID NVARCHAR(40) = NEWID();                      
  DECLARE @yearDiff INTEGER;                      
  DECLARE @AgeGroupID INTEGER;                      
  DECLARE @ConsumerID INTEGER;                      
  DECLARE @USERID INTEGER;                      
  DECLARE @cocUserID INT;                      
  DECLARE @cocConsumerID INT;                      
  DECLARE @cocOtpID INT;                      
  DECLARE @cocOtpExpiry DATETIME;       
  
   --if user exists in consumer table but not in users table then                           
   IF EXISTS (SELECT PrimaryMobile FROM coc_Consumers(NOLOCK) WHERE PrimaryMobile=@PrimaryMobile AND UserID IS NULL AND  IsNull(IsDeleted,0) = 0)                           
   BEGIN                          
   SELECT @LoyaltyPoint = SetupValue FROM coc_LoyaltyPointSetups(NOLOCK) WHERE LoyaltyPointSetupID = 101;                            
   SELECT @ConsumerID = ConsumerID from coc_Consumers(nolock) where   PrimaryMobile=@PrimaryMobile AND UserID IS NULL AND  IsNull(IsDeleted,0) = 0;                              
  INSERT INTO coc_Users (                                
      UserName                                
      ,[Password]                                
      ,RoleID                                
      ,MobileNumber                                
      ,EmailID                                
      ,ResetRequired                                
      ,CreatedDate                            
     ,IsActive                          
     ,IsDeleted                          
     ,FullName                          
      )                                
     SELECT @EmailID                                
      ,@Password                                
      ,5                                
      ,@PrimaryMobile                                
      ,@EmailID                                
      ,0                                
      ,GETDATE()                                
      ,1                          
   ,0                          
   ,isnull(@FirstName,'') +' '+isnull(@SecondName,'')   
   
     SET @USERID = SCOPE_IDENTITY();                           
                               
      Update coc_Consumers set MembershipNumber=IsNull(MembershipNumber,CONVERT(NVARCHAR(10), @MemberShipID))        
      ,UserID=@USERID        
      ,LoyaltyPoint=@LoyaltyPoint                          
      ,FullName = isnull(@FirstName,'') +' '+isnull(@SecondName,'')                         
      ,IsActive=1                          
      ,IsDeleted=0                              
      ,UserIdentityNumber = @IdentityNumber           
      ,UserIdentityTypeID = @UserIdentityTypeId          
      ,EditDate = GETDATE()      
      ,Gender = @Gender      
      ,CountryID = @CountryId      
      ,CityID = @CityId      
      ,NationalityID = @NationalityId      
      ,UpdatedBy = @UserID  
      ,IsVerified=1
      where ConsumerID=@ConsumerID;                          
                           
                               
     INSERT INTO coc_ConsumerPointDetails (                                
      ConsumerID                                
      ,PointDate                                
      ,LoyaltyPoint                                
      ,RedeemPoint                                
      ,PointSource                        
      )                                
     SELECT @ConsumerID                                
      ,GETDATE()                                
      ,@LoyaltyPoint                                
      ,0                                
      ,101                      
   if(@ConsumerID is not null and @ConsumerID != 0)                      
     begin                      
        SET @ErrorMessage = @ConsumerID                                
     end                      
   else                      
  begin                      
   SET @ErrorMessage = 'Generic Error'                                                         
  end                      
  COMMIT TRANSACTION SaveCorporateUser --end transaction                          
   Return;                          
  END   
                      
  --if email exists in consumer table and not verified :                       
  IF EXISTS (                      
    SELECT 1                      
    FROM coc_Consumers(NOLOCK)                      
    WHERE EmailID = @EmailID                      
     AND IsVerified = 0 and IsDeleted = 0                      
    ) --if begin                      
  BEGIN                      
   SELECT @cocUserID = UserID                      
    ,@cocConsumerID = ConsumerID                      
    ,@cocOtpID = otpid                      
   FROM coc_Consumers (NOLOCK)                     
   WHERE EmailID = @EmailID                      
    AND IsVerified = 0 and IsDeleted = 0;                      
                      
   SELECT @cocOtpExpiry = OtpExpity                      
   FROM coc_OTP(NOLOCK)                      
   WHERE otpID = @cocOtpID;                      
                      
   IF (GetDate() > @cocOtpExpiry) --if begin                      
   BEGIN                      
    UPDATE coc_Consumers                      
    SET IsDeleted = 1                      
     ,IsActive = 0                      
    WHERE ConsumerID = @cocConsumerID;                      
                      
    UPDATE coc_Users                      
    SET IsDeleted = 1                      
     ,IsActive = 0                      
    WHERE UserID = @cocUserID;                      
   END --end if              
   ELSE            
 begin            
   SELECT top 1 @ErrorMessage =  ConsumerID FROM coc_Consumers(NOLOCK) WHERE EmailID = @EmailID  AND IsVerified = 0 and IsDeleted = 0             
   UPDATE coc_Consumers SET OtpID = @OtpID WHERE ConsumerID = (SELECT top 1 ConsumerID FROM coc_Consumers(NOLOCK) WHERE EmailID = @EmailID  AND IsVerified = 0 and IsDeleted = 0)             
   ROLLBACK TRANSACTION SaveCorporateUser;              
      Return;            
 end -- end else                    
  END --end if                      
                
             
                    
  --if mobile exists in consumer table and not verified:                       
  IF EXISTS (                      
    SELECT 1                      
    FROM coc_Consumers(NOLOCK)                      
    WHERE PrimaryMobile = @PrimaryMobile                      
     AND IsVerified = 0  and IsDeleted = 0                      
    ) --if begin                      
  BEGIN                      
   SELECT @cocUserID = UserID      
    ,@cocConsumerID = ConsumerID                      
    ,@cocOtpID = otpid                      
   FROM coc_Consumers(NOLOCK)                      
   WHERE PrimaryMobile = @PrimaryMobile                      
    AND IsVerified = 0 and IsDeleted = 0;                      
                      
   SELECT @cocOtpExpiry = OtpExpity                      
   FROM coc_OTP(NOLOCK)                      
   WHERE otpID = @cocOtpID;                     
                      
   IF (GetDate() > @cocOtpExpiry) --if begin                      
   BEGIN                      
    UPDATE coc_Consumers                      
    SET IsDeleted = 1            
     ,IsActive = 0                      
    WHERE ConsumerID = @cocConsumerID;                      
                      
    UPDATE coc_Users                      
    SET IsDeleted = 1                      
     ,IsActive = 0                      
    WHERE UserID = @cocUserID;                      
   END --end if              
   ELSE            
 begin            
   SELECT top 1 @ErrorMessage =  ConsumerID FROM coc_Consumers(NOLOCK) WHERE  PrimaryMobile = @PrimaryMobile  AND IsVerified = 0 and IsDeleted = 0             
     UPDATE coc_Consumers SET OtpID = @OtpID WHERE ConsumerID = (SELECT top 1 ConsumerID FROM coc_Consumers(NOLOCK) WHERE PrimaryMobile = @PrimaryMobile  AND IsVerified = 0 and IsDeleted = 0)             
   ROLLBACK TRANSACTION SaveCorporateUser;              
      Return;            
 end -- end else                     
  END --end if                      
                   
  --if email or mobile exists in Consumer or user table and not deleted                      
  IF EXISTS (                      
    SELECT 1                      
    FROM coc_Consumers(NOLOCK)                      
    WHERE (                      
      EmailID = @EmailID                      
      OR PrimaryMobile = @PrimaryMobile                      
      )                      
     AND (IsDeleted = 0 and IsActive = 1)                      
    )                      
   OR EXISTS (                      
    SELECT 1                      
    FROM coc_Users(NOLOCK)                      
    WHERE (                      
      EmailID = @EmailID                      
      OR MobileNumber = @PrimaryMobile                      
      )                      
     AND (IsDeleted = 0 and IsActive = 1)                      
    )                      
  BEGIN                      
   SET @ErrorMessage = 'EmailOrMobileAlreadyExists';                      
  END   
  ELSE IF EXISTS(SELECT UserIdentityNumber from coc_consumers where UserIdentityNumber = @IdentityNumber and IsDeleted = 0)          
    BEGIN        
  SET @ErrorMessage = 'User Identity Number Already Exists';    
 END--UserIdentityNumber validation eneded   
  ELSE -- BEGIN ELSE                      
  BEGIN                      
   SELECT @LoyaltyPoint = SetupValue                
   FROM coc_LoyaltyPointSetups(NOLOCK)                      
   WHERE LoyaltyPointSetupID = 101;                      
                      
   --RoleID 5 is for consumer/Individual User                      
   INSERT INTO coc_Users (                      
    UserName                      
    ,[Password]                      
    ,RoleID                      
    ,MobileNumber                      
    ,EmailID                      
    ,ResetRequired                      
    ,CreatedDate
	,FullName
    )                      
   SELECT @EmailID                      
    ,@Password                      
    ,5                      
    ,@PrimaryMobile                      
    ,@EmailID                      
    ,0                      
    ,GETDATE()
	,isnull(@FirstName,'') +' '+isnull(@SecondName,'')
                      
   SET @USERID = SCOPE_IDENTITY()                            
   INSERT INTO COC_Consumers (                      
    FirstName                   
 ,SecondName                     
    ,FamilyName                      
    ,UserID                   
 ,Gender                  
 ,BirthDate                     
    ,PrimaryMobile                      
    ,EmailID                      
    ,CountryID                   
 ,NationalityID              
 ,CityID                     
    ,IsActive                      
    ,AddDate                      
    ,IsVerified                      
    ,OtpID                      
    ,ImageFile                      
    ,LoyaltyPoint                      
    ,MembershipNumber                      
 ,IsFromCompetitionLink          
 ,ECouponID    
 ,UserIdentityTypeID    
 ,UserIdentityNumber 
 ,FullName
    )                      
   VALUES (                      
    @FirstName                      
    ,@SecondName                  
 ,@FamilyName                      
    ,@USERID                  
 ,@Gender                  
 ,@DOB                      
    ,@PrimaryMobile                      
    ,@EmailID                      
    ,@CountryID                   
 ,@NationalityID               
 ,@CityID                    
    ,1                      
    ,GETDATE()                      
    ,0                      
    ,@OtpID                      
    ,@ImageFile                      
    ,@LoyaltyPoint                      
    ,CONVERT(NVARCHAR(10), @MemberShipID)                      
 ,@IsFromCompetitionLink          
 ,@ECouponID     
 ,@UserIdentityTypeID    
 ,@IdentityNumber
 ,isnull(@FirstName,'') +' '+isnull(@SecondName,'')
    )                      
                      
   SET @ConsumerID = SCOPE_IDENTITY()                      
                      
   INSERT INTO coc_ConsumerPointDetails (                      
    ConsumerID                      
    ,PointDate                      
    ,LoyaltyPoint                      
    ,RedeemPoint                      
    ,PointSource                      
    )                      
   SELECT @ConsumerID                      
    ,GETDATE()                      
    ,@LoyaltyPoint                      
    ,0                      
    ,101                      
                      
   SET @ErrorMessage = @ConsumerID                      
  END --end else                      
                      
  COMMIT TRANSACTION SaveCorporateUser --end transaction                      
   --print(@ErrorMessage);                      
 END TRY --end try block                      
                      
 BEGIN CATCH --begin catch                      
  SELECT ERROR_LINE()                      
   ,ERROR_NUMBER();                      
                      
  SELECT @ErrorMessage = CONCAT (                      
    ERROR_MESSAGE()                      
    ,ERROR_LINE()                      
    ,ERROR_NUMBER()                      
    );           
        
                 
  --print(@ErrorMessage);                        
  ROLLBACK TRANSACTION SaveCorporateUser;                      
 END CATCH --end catch                      
END 
GO
/****** Object:  StoredProcedure [dbo].[usp_CompetitionResultReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_CompetitionResultReport]  -- For Report                                              
  @LanguageID  int=1                                                   
 ,@ECouponID  BIGINT=null                                           
 ,@DrawID BIGINT=null                                                
 --,@DrawDate  nvarchar(20)=null      
 ,@FromDate date=  null            
 ,@ToDate date=  null                                             
 ,@PageSize  int=100                                            
 ,@RecordCount bigint    output                                         
 ,@PageIndex int=1                              
 ,@Mobile nvarchar(100) =NULL                              
 ,@EmailID varchar(50)=NULL                              
 --,@CompetitionName nvarchar(100)=NULL                              
 ,@Name nvarchar(200)=NULL          
 ,@MembershipNumber nvarchar(100) =NULL            
 ,@CorporateID int=NULL          
                                          
AS                                                    
BEGIN                                                          
  SET NOCOUNT ON;                                          
   declare @offset int,@fetch int;                                                 
  set @offset =@PageSize*(@PageIndex-1);                                              
  set @fetch =@PageSize;                                      
                                             
--    select @RecordCount= count(distinct ew.DrawDateTime) from coc_ECouponWinners ew                                              
-- inner join coc_Consumers c on ew.ConsumerID = c.ConsumerID                                           
--inner join coc_ECouponDrawPrizes edp on edp.ECouponDrawPrizeID = ew.ECouponDrawPrizeID                                           
--inner join coc_ECouponDraw ed on ed.ECouponDrawID = edp.ECouponDrawID                                          
--inner join coc_ECouponDrawLanguages edl on edl.ECouponDrawID = ed.ECouponDrawID and edl.LanguageID =@LanguageID and edl.ResourceKey = 'Name'                                          
--inner join coc_ECouponLanguages ecl on ecl.ECouponID = ed.ECouponID and ecl.LanguageID =@LanguageID                                          
--inner join coc_CityLanguages cl on cl.CityID = c.CityID and cl.LanguageID =@LanguageID                                           
--inner join coc_ECoupons ec on ec.ECouponID= ecl.ECouponID                                          
--inner join coc_EServiceLanguages esl on esl.EServiceID= ec.EServiceID                                           
--and esl.LanguageID= @LanguageID                                          
--inner join coc_ECouponParticipations ECP on ECP.ECouponParticipationID = ew.ECouponParticipationID                                           
--inner join coc_NationalityLanguages NL on NL.NationalityID=c.NationalityID and nl.LanguageID=@LanguageID                                           
--inner join coc_ECouponPrizesLanguages ECPL on ECPL.ECouponPrizeID=ew.ECouponPrizeID                                          
--and ECPL.LanguageID=@LanguageID where (@ECouponID is null or ed.ECouponID =@ECouponID)                                          
--and (@DrawID is null or ed.ECouponDrawID=@DrawID)                                           
--and (@DrawDate is null or Convert(date,ew.DrawDateTime)=Convert(date,@DrawDate))                                           
                                          
                                    
  declare  @CompetitionResultReport table(SNo bigint IDENTITY(1,1) PRIMARY KEY,DrawDateTime nvarchar(20),[Draw Name] nvarchar(300),                                   
  [Competion Name] nvarchar(1000),[Winner Name] nvarchar(200),[Email ID] nvarchar(200),[Winner Mobile Number] varchar(15),[Price  Name] nvarchar(300),                                    
  Barcode nvarchar(100))                                    
                                
  insert into @CompetitionResultReport             
  select  distinct(CONVERT(NVARCHAR(20),ew.DrawDateTime,100)),                                            
             edl.Value as [Draw Name],                  
                                   
     esl.EService as  [Competion Name] ,                                               
     ew.ConsumerName [Winner Name],      
   ew.Email [Email ID],    
        ew.MobileNumber [Winner Mobile Number],                                              
        ECPL.Value [ Price   Name ] ,                                    
           isnull(ECP.Barcode,'')                          
                                           
  from coc_ECouponWinners ew  (NOLOCK)                                          
left join coc_Consumers c (NOLOCK) on ew.ConsumerID = c.ConsumerID                                           
inner join coc_ECouponDrawPrizes edp  (NOLOCK) on edp.ECouponDrawPrizeID = ew.ECouponDrawPrizeID                                           
inner join coc_ECouponDraw ed (NOLOCK) on ed.ECouponDrawID = edp.ECouponDrawID                             
inner join coc_ECouponPrizesLanguages ECPL (NOLOCK) on ECPL.ECouponPrizeID=ew.ECouponPrizeID   and ECPL.ResourceKey= 'Name' and ECPL.LanguageID=@LanguageID                                        
inner join coc_ECouponDrawLanguages edl (NOLOCK) on edl.ECouponDrawID = ed.ECouponDrawID and edl.LanguageID =@LanguageID and edl.ResourceKey = 'Name'                                          
inner join coc_ECouponLanguages ecl (NOLOCK) on ecl.ECouponID = ed.ECouponID and ecl.LanguageID =@LanguageID                                          
left join coc_CityLanguages cl (NOLOCK) on cl.CityID = c.CityID and cl.LanguageID =@LanguageID                                           
inner join coc_ECoupons ec (NOLOCK) on ec.ECouponID= ecl.ECouponID                                          
inner join coc_EServiceLanguages esl (NOLOCK) on esl.EServiceID= ec.EServiceID     and esl.LanguageID= @LanguageID                                          
left join coc_ECouponParticipations ECP (NOLOCK) on ECP.ECouponParticipationID = ew.ECouponParticipationID                                     
left join coc_NationalityLanguages NL (NOLOCK) on NL.NationalityID=c.NationalityID and nl.LanguageID=@LanguageID     and ECPL.LanguageID=@LanguageID                   
where (@ECouponID is null or ed.ECouponID =@ECouponID)                          
and (@Mobile is null or  ew.MobileNumber like'%'+@Mobile+'%' or  ew.MobileNumber  =@Mobile )             
and (@MembershipNumber is null or c.MembershipNumber=@MembershipNumber )           
and (@EmailID is null or ew.Email like'%'+@EmailID+'%' or ew.Email = @EmailID )                       
and (@Name is null or ew.ConsumerName like'%'+@Name+'%' or ew.ConsumerName like'%'+@Name+'%' or ew.ConsumerName like'%'+@Name+'%' or ew.ConsumerName=@Name or c.FirstName+c.SecondName+' '+c.FamilyName=@Name or c.FirstName+c.SecondName+' '+c.FamilyName='%' 
 
    
      
        
+          
@Name+'%'  )                    
and (@DrawID is null or ed.ECouponDrawID=@DrawID )     
and (@FromDate is null or @ToDate is null or  convert(date,ew.DrawDateTime) between convert(date, @FromDate) and  convert(date, @ToDate))                                         
--and (@DrawDate is null or Convert(date,ew.DrawDateTime)=Convert(date,@DrawDate))                                    
and ECouponWinnerID not in (24561,24562,24563,24564,24565)                   
              
select  SNo,DrawDateTime ,[Draw Name],                                     
  [Competion Name] ,[Winner Name] ,isnull([Email ID],'') [Email ID],[Winner Mobile Number] ,[Price  Name],                                    
  Barcode   from  @CompetitionResultReport         
    order by 1 desc    OFFSET @offset ROWS                                              
FETCH NEXT @fetch ROWS ONLY                                     
                                       
                                   
select @RecordCount =count(*) from @CompetitionResultReport                                        
        where (@FromDate is null or @ToDate is null or  convert(date,DrawDateTime) between convert(date, @FromDate) and  convert(date, @ToDate) )                                             
                                                 
                                                        
END 
GO
/****** Object:  StoredProcedure [dbo].[USP_ConsumerRegistration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_ConsumerRegistration] (      
 @FirstName NVARCHAR(200)      
 ,@SecondName NVARCHAR(200)      
 ,@PrimaryMobile VARCHAR(15)      
 ,@EmailID VARCHAR(100)      
 ,@Password VARCHAR(200)      
 ,@CountryID INT      
 ,@OtpID INT      
 ,@ImageFile NVARCHAR(100) = NULL      
 ,@IsFromCompetitionLink bit = null    
 ,@ErrorMessage VARCHAR(500) OUTPUT    
 )      
AS      
BEGIN      
 BEGIN TRY      
  BEGIN TRANSACTION SaveCorporateUser      
      
  DECLARE @LoyaltyPoint INTEGER;      
  DECLARE @MemberShipID NVARCHAR(40) = NEWID();      
  DECLARE @yearDiff INTEGER;      
  DECLARE @AgeGroupID INTEGER;      
  DECLARE @ConsumerID INTEGER;      
  DECLARE @USERID INTEGER;      
  DECLARE @cocUserID INT;      
  DECLARE @cocConsumerID INT;      
  DECLARE @cocOtpID INT;      
  DECLARE @cocOtpExpiry DATETIME;      
     
	 --if user exists in consumer table but not in users table then 
   IF EXISTS (SELECT 1 FROM coc_Consumers(NOLOCK) WHERE EmailID = @EmailID AND PrimaryMobile=@PrimaryMobile AND UserID IS NULL AND  IsVerified = 0 and IsDeleted = 0) 
	  BEGIN
	  SELECT @LoyaltyPoint = SetupValue FROM coc_LoyaltyPointSetups(NOLOCK) WHERE LoyaltyPointSetupID = 101;  
	  SELECT @ConsumerID = ConsumerID from coc_Consumers(nolock) where   EmailID = @EmailID AND PrimaryMobile=@PrimaryMobile AND UserID IS NULL AND  IsVerified = 0 and IsDeleted = 0;    
		INSERT INTO coc_Users (      
		    UserName      
		    ,[Password]      
		    ,RoleID      
		    ,MobileNumber      
		    ,EmailID      
		    ,ResetRequired      
		    ,CreatedDate      
		    )      
		   SELECT @EmailID      
		    ,@Password      
		    ,5      
		    ,@PrimaryMobile      
		    ,@EmailID      
		    ,0      
		    ,GETDATE()      
		      
		   SET @USERID = SCOPE_IDENTITY()      
		   
		   Update coc_Consumers set UserID=@USERID,LoyaltyPoint=@LoyaltyPoint,OtpID=@OtpID where ConsumerID=@ConsumerID;
		   
		   INSERT INTO coc_ConsumerPointDetails (      
		    ConsumerID      
		    ,PointDate      
		    ,LoyaltyPoint      
		    ,RedeemPoint      
		    ,PointSource      
		    )      
		   SELECT @ConsumerID      
		    ,GETDATE()      
		    ,@LoyaltyPoint      
		    ,0      
		    ,101		      
		   SET @ErrorMessage = @ConsumerID 
	COMMIT TRANSACTION SaveCorporateUser --end transaction     
	Return;
  END

   IF EXISTS (SELECT 1 FROM coc_Consumers(NOLOCK) WHERE (EmailID = @EmailID OR PrimaryMobile=@PrimaryMobile) AND UserID IS NULL AND  IsVerified = 0 and IsDeleted = 0) 
	  BEGIN
	    SET @ErrorMessage = 'EmailAndMobileMissMatch';   
		 ROLLBACK TRANSACTION SaveCorporateUser;        
		Return;
	  END
  --if email exists in consumer table and not verified :       
  IF EXISTS (      
    SELECT 1      
    FROM coc_Consumers(NOLOCK)      
    WHERE EmailID = @EmailID      
     AND IsVerified = 0 and IsDeleted = 0      
    ) --if begin      
  BEGIN      
   SELECT @cocUserID = UserID      
    ,@cocConsumerID = ConsumerID      
    ,@cocOtpID = otpid      
   FROM coc_Consumers   (NOLOCK)  
   WHERE EmailID = @EmailID      
    AND IsVerified = 0 and IsDeleted = 0;      
      
   SELECT @cocOtpExpiry = OtpExpity      
   FROM coc_OTP    (NOLOCK)  
   WHERE otpID = @cocOtpID;      
      
   IF (GetDate() > @cocOtpExpiry) --if begin      
   BEGIN      
    UPDATE coc_Consumers      
    SET IsDeleted = 1      
     ,IsActive = 0      
    WHERE ConsumerID = @cocConsumerID;      
      
    UPDATE coc_Users      
    SET IsDeleted = 1      
     ,IsActive = 0      
    WHERE UserID = @cocUserID;      
   END --end if      
  END --end if      
      
  --if mobile exists in consumer table and not verified:       
  IF EXISTS (      
    SELECT 1      
    FROM coc_Consumers(NOLOCK)      
    WHERE PrimaryMobile = @PrimaryMobile      
     AND IsVerified = 0  and IsDeleted = 0      
    ) --if begin      
  BEGIN      
   SELECT @cocUserID = UserID      
    ,@cocConsumerID = ConsumerID      
    ,@cocOtpID = otpid      
   FROM coc_Consumers    (NOLOCK)  
   WHERE PrimaryMobile = @PrimaryMobile      
    AND IsVerified = 0 and IsDeleted = 0;      
      
   SELECT @cocOtpExpiry = OtpExpity      
   FROM coc_OTP    (NOLOCK)  
   WHERE otpID = @cocOtpID;      
      
   IF (GetDate() > @cocOtpExpiry) --if begin      
   BEGIN      
    UPDATE coc_Consumers      
    SET IsDeleted = 1      
     ,IsActive = 0      
    WHERE ConsumerID = @cocConsumerID;      
      
    UPDATE coc_Users      
    SET IsDeleted = 1      
     ,IsActive = 0      
    WHERE UserID = @cocUserID;      
   END --end if      
  END --end if      
      
  --if email or mobile exists in Consumer or user table and not deleted      
  IF EXISTS (      
    SELECT 1      
    FROM coc_Consumers(NOLOCK)      
    WHERE (      
      EmailID = @EmailID      
      OR PrimaryMobile = @PrimaryMobile      
      )      
     AND (IsDeleted = 0 and IsActive = 1)      
    )      
   OR EXISTS (      
    SELECT 1      
    FROM coc_Users(NOLOCK)      
    WHERE (      
      EmailID = @EmailID      
      OR MobileNumber = @PrimaryMobile      
      )      
     AND (IsDeleted = 0 and IsActive = 1)      
    )      
  BEGIN      
   SET @ErrorMessage = 'EmailOrMobileAlreadyExists';      
  END      
  ELSE -- BEGIN ELSE      
  BEGIN      
   SELECT @LoyaltyPoint = SetupValue      
   FROM coc_LoyaltyPointSetups(NOLOCK)      
   WHERE LoyaltyPointSetupID = 101;      
      
   --RoleID 5 is for consumer/Individual User      
   INSERT INTO coc_Users (      
    UserName      
    ,[Password]      
    ,RoleID      
    ,MobileNumber      
    ,EmailID      
    ,ResetRequired      
    ,CreatedDate      
    )      
   SELECT @EmailID      
    ,@Password      
    ,5      
    ,@PrimaryMobile      
    ,@EmailID      
    ,0      
    ,GETDATE()      
      
   SET @USERID = SCOPE_IDENTITY()      
      
   INSERT INTO COC_Consumers (      
    FirstName      
    ,FamilyName      
    ,UserID      
    ,PrimaryMobile      
    ,EmailID      
    ,CountryID      
    ,IsActive      
    ,AddDate      
    ,IsVerified      
    ,OtpID      
    ,ImageFile      
    ,LoyaltyPoint      
    ,MembershipNumber      
 ,IsFromCompetitionLink    
    )      
   VALUES (      
    @FirstName      
    ,@SecondName      
    ,@USERID      
    ,@PrimaryMobile      
    ,@EmailID      
    ,@CountryID      
    ,1      
    ,GETDATE()      
    ,0      
    ,@OtpID      
    ,@ImageFile      
    ,@LoyaltyPoint      
    ,CONVERT(NVARCHAR(10), @MemberShipID)      
 ,@IsFromCompetitionLink    
    )      
      
   SET @ConsumerID = SCOPE_IDENTITY()      
      
   INSERT INTO coc_ConsumerPointDetails (      
    ConsumerID      
    ,PointDate      
    ,LoyaltyPoint      
    ,RedeemPoint      
    ,PointSource      
    )      
   SELECT @ConsumerID      
    ,GETDATE()      
    ,@LoyaltyPoint      
    ,0      
    ,101      
      
   SET @ErrorMessage = @ConsumerID      
  END --end else      
      
  COMMIT TRANSACTION SaveCorporateUser --end transaction      
   --print(@ErrorMessage);      
 END TRY --end try block      
      
 BEGIN CATCH --begin catch      
  SELECT ERROR_LINE()      
   ,ERROR_NUMBER();      
      
  SELECT @ErrorMessage = CONCAT (      
    ERROR_MESSAGE()      
    ,ERROR_LINE()      
    ,ERROR_NUMBER()      
    );      
      
  --print(@ErrorMessage);        
  ROLLBACK TRANSACTION SaveCorporateUser;      
 END CATCH --end catch      
END 
GO
/****** Object:  StoredProcedure [dbo].[usp_ConsumerVoucherListing]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_ConsumerVoucherListing]
 @ConsumerID INTEGER 
,@LanguageID INTEGER 
,@VoucherType INTEGER = NULL--(1- Received Vouchers, 2- Remaining Vouchers, 3- Finished Vouchers, 4- Used Vouchers)
,@PageNumber INTEGER
,@PageSize INTEGER
,@TotalRecords INTEGER OUTPUT

AS 
BEGIN

if @VoucherType is null 
	set @VoucherType = 1

IF OBJECT_ID('tempdb..#VOUCHERLISTING') IS NOT NULL DROP TABLE #VOUCHERLISTING

CREATE TABLE #VOUCHERLISTING
(
	TotalRecords int,
	VoucherName nvarchar(150),
	IssuedDate varchar(15),
	ExpiryDate varchar(15),
	CouponValue nvarchar(250),
	Barcode nvarchar(250),
	CorporateName nvarchar(150),
	VoucherCategoryName nvarchar(150),
	VoucherCategoryImage nvarchar(150),
	DistributorName nvarchar(150),
	CorporateLogoFile nvarchar(150),
	DistributorLogoFile nvarchar(150),
	VoucherPrimaryImageURL nvarchar(150),
	DateOfUse varchar(15),
	PlaceOfUse varchar(15),
	
)

Insert into #VOUCHERLISTING (TotalRecords,VoucherName,IssuedDate,ExpiryDate,CouponValue,Barcode,CorporateName,VoucherCategoryName,VoucherCategoryImage,DistributorName,CorporateLogoFile,DistributorLogoFile,VoucherPrimaryImageURL, DateOfUse, PlaceOfUse )

SELECT   TotalRecords = COUNT(*) OVER(),
		 evls.ResourceValue AS VoucherName 		
		,cast(eb.AssignedDate as date) IssuedDate
        ,cast(esrs.ToDate as date) ExpiryDate	
		,(select top 1 EService from coc_EServiceLanguages(NOLOCK) where coc_EServiceLanguages.eserviceID = esrs.EServiceID) CouponValue
		,eb.Barcode 
		,crs.CorporateName 		
		,(Select top 1 ResourceValue from coc_EVoucherCategoryLanguages(NOLOCK) where coc_EVoucherCategoryLanguages.ResourceKey = 'CategoryName' 
		 and evc.EVoucherCategoryID=coc_EVoucherCategoryLanguages.EVoucherCategoryID and evc.EvoucherCategoryID = ev.EvoucherCategoryID )VoucherCategoryName
		,(Select top 1 ImageFile from coc_EVoucherCategory(NOLOCK) where coc_EVoucherCategory.EVoucherCategoryID=ev.EVoucherCategoryID )VoucherCategoryImage
		,(select top 1 CorporateName from coc_Corporates(NOLOCK) where ((eb.DistributorCorporateID is null) or (eb.DistributorCorporateID = coc_Corporates.CorporateID)))DistributorName
		,(select top 1 LogoFile from coc_Corporates(NOLOCK) where (coc_Corporates.CorporateID = esrs.CorporateID))CorporateLogoFile		
		,(select top 1 LogoFile from coc_Corporates(NOLOCK) where (coc_Corporates.CorporateID = eb.DistributorCorporateID or eb.DistributorCorporateID is null))DistributorLogoFile		
		,ISNULL(EV.ImageFile, ISNULL((SELECT top 1 ImageFile from coc_EVoucherImages EVI(NOLOCK) Where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1 and EVI.LanguageID = @LanguageId), (SELECT top 1 ImageFile from coc_EVoucherImages EVI Where EVI.EVoucherID =
		EV.EVoucherID and EVI.IsPrimaryImage = 1)))  as VoucherPrimaryImageURL,
		eb.UsedDate as DateOfUse,
		ISNULL(KLL.KioskLocation,'') as PlaceOfUse
		FROM coc_EServiceBarcodes eb(NOLOCK)
			INNER JOIN coc_EVoucher ev(NOLOCK) ON eb.EVoucherID = ev.EVoucherID AND ev.IsActive = 1
			INNER JOIN coc_EVoucherCategory evc(NOLOCK) ON ev.EVoucherCategoryID = evc.EVoucherCategoryID AND ev.IsActive = 1
			INNER JOIN coc_EVoucherCategoryLanguages evcl(NOLOCK) ON evcl.EVoucherCategoryID = evc.EVoucherCategoryID
			INNER JOIN coc_EVoucherLanguages evl(NOLOCK) ON evl.EVoucherID = ev.EVoucherID AND evl.LanguageID = @languageId AND evl.ResourceKey = 'Description'
			INNER JOIN coc_EVoucherLanguages evls(NOLOCK) ON evls.EVoucherID = ev.EVoucherID AND evls.LanguageID = @languageId AND evls.ResourceKey = 'VoucherName'		 
			INNER JOIN coc_EServices esrs(NOLOCK) ON esrs.EServiceID = ev.EServiceID
			INNER JOIN coc_Corporates crs(NOLOCK) ON crs.CorporateID = esrs.CorporateID
			LEFT JOIN coc_KioskLocationLanguages KLL(NOLOCK) ON KLL.KioskLocationID = eb.UsedAtKioskID
		where 
		eb.ConsumerID = @ConsumerID 
		and case 
			when @VoucherType= 1 then 'Y'
			when @VoucherType= 2 and eb.IsUsed = 0 and cast(ev.ExpiryDate as date) > cast(getdate() as date)  then 'Y' 
			when @VoucherType= 3 and cast(ev.ExpiryDate as date) < cast(getdate() as date) then 'Y' 
			when @VoucherType= 4 and eb.IsUsed = 1 then 'Y' 
			end = 'Y'
		ORDER BY 1 OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY;

select * from #VOUCHERLISTING
--set @TotalRecords = (select top 1  TotalRecords from #VOUCHERLISTING);
set @TotalRecords = isnull((select top 1  TotalRecords from #VOUCHERLISTING),0);
--print (concat('total recoreds : ',@TotalRecords));
 	 
END
GO
/****** Object:  StoredProcedure [dbo].[usp_core_CheckCompatitionParticipants]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_CheckCompatitionParticipants]              
 @EServiceID INTEGER,                 
 @RetailOutletID INTEGER             
AS              
begin              
              
SET NOCOUNT ON              
       
  Declare @ECouponID bigint      
      
  --SELECT  top 50 EP.Barcode, EP.ParticipationMobile as PrimaryMobile,EP.ConsumerID    
  -- FROM coc_ECoupons EC(NOLOCK)            
  --  INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID             
  --  INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID            
  --  WHERE ES.EServiceID = @EServiceID AND (EP.RetailOutletID =@RetailOutletID OR (EP.RetailOutletID is null and EC.AllowStandardBarcode = 1)) order by NEWID()     
	
	SELECT  top 50 EP.Barcode, EP.ParticipationMobile as PrimaryMobile,isnull(EP.ConsumerID,0) as ConsumerID    
          FROM [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations] (NOLOCK) EP            
           WHERE EP.EServiceID = @EServiceID AND (EP.RetailOutletID =@RetailOutletID OR (EP.RetailOutletID is null and EP.AllowStandardBarcode = 1)) order by NEWID()     


    
      
 SET NOCOUNT OFF              
end 




GO
/****** Object:  StoredProcedure [dbo].[usp_core_CheckConsumerIdentityNumber]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Rafeeq Mohammad  
-- Create date: 11 November 2020  
-- Description: Check Consumer Identity Number  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_core_CheckConsumerIdentityNumber]  
 @ConsumerId int,  
 @LanguageID INTEGER = 1,  
 @RoleID INTEGER = null,  
 @UserID bigint = null,  
 @ImpersonationUserID bigint=null,  
 @SpResponseStatus int = null out,  
 @SpResponseMessage nvarchar(max) = null out,  
 @SpErrorDetails nvarchar(max) = null out  
AS  
BEGIN  
SET NOCOUNT ON;  
 Begin Try    
  IF EXISTS(Select UserIdentityNumber from coc_Consumers(nolock) where ConsumerID = @ConsumerId and (UserIdentityNumber is not null and UserIdentityNumber != '') and (UserIdentityTypeID is not null and UserIdentityTypeID <> 0))  
   begin  
	Set @SpResponseStatus=1;       
	Set @SpResponseMessage='Success';      
	Set @SpErrorDetails='Success';   
   end  
 Else  
  begin  
	Set @SpResponseStatus=0;       
	Set @SpResponseMessage='UserIdentityNumberNotExists';      
	Set @SpErrorDetails='UserIdentityNumberNotExists';   
  end  
END TRY                  
  BEGIN CATCH        
  Set @SpResponseStatus=0;       
  Set @SpResponseMessage='GenericError';      
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
  END CATCH                  
 END  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Usp_Core_CheckECouponParticipationExternalBarcodes]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Usp_Core_CheckECouponParticipationExternalBarcodes]          
AS          
Begin          
SET NOCOUNT ON          
DECLARE @GeneralNotificationTemplateID int = 14          
          
Declare @ParticipationTable table(ExternalParticipationID bigint,ECouponID bigint,EnteredBarcode NULLDescription,ParticipationMobile Mobile,ParticipationEmailID Email,          
ConsumerID int,RetailOutletID int,CorporateID int,ProcessDate datetime null)          
insert into @ParticipationTable          
   select ExternalParticipationID,ECouponID,EnteredBarcode,ParticipationMobile,ParticipationEmailID,ConsumerID,RetailOutletID,CorporateID,ProcessDate from coc_ECouponParticipationByExternalBarcode(nolock) where ParticipantStatus=1          
          
Declare @ExternalParticipationID bigint,@ECouponID bigint,@EnteredBarcode NULLDescription,@ParticipationMobile Mobile,@ParticipationEmailID Email,          
@ConsumerID int,@RetailOutletID int,@CorporateID int,@ProcessDate datetime=NULL,@NotificationID int,@EServiceID int,@EServiceBarcodeID bigint,@Barcode NULLDescription,@ECouponParticipationID bigint,@ErrorMessage Remark          
        
Declare @NotificationSendID bigint        
While exists(select ExternalParticipationID from @ParticipationTable)          
begin          
        
   select top 1 @ExternalParticipationID=ExternalParticipationID,@ECouponID=ECouponID,@EnteredBarcode=EnteredBarcode,@ParticipationMobile=ParticipationMobile,@ParticipationEmailID=ParticipationEmailID,          
   @ConsumerID=ConsumerID,@RetailOutletID=RetailOutletID,@CorporateID=CorporateID,@ProcessDate=ProcessDate from @ParticipationTable          
        
   select @EServiceID=EServiceID from coc_ECoupons(nolock) where ECouponID=@ECouponID          
   select @NotificationID=NotificationID  from coc_Notifications(nolock) where EServiceID=@EServiceID          
          
   if exists(select ExternalBarcode from coc_EServiceExternalBarcodes(nolock) where ExternalBarcode=@EnteredBarcode           
        and EServiceID=@EServiceID and (isnull(@CorporateID,0)=0 or CorporateID=@CorporateID)           
  and (isnull(@RetailOutletID,0)=0 or RetailoutletID=@RetailOutletID)          
  and isnull(EServiceBarcodeID,0)=0 and isnull(IsBlocked,0)=0 and isnull(IsUsed,0)=0 and isnull(ExternalParticipationID,0)=0)          
   begin          
                
 SELECT TOP 1 @EServiceBarcodeID=BC.EServiceBarcodeID,@Barcode=BC.Barcode FROM coc_EServiceBarcodes(NOLOCK) BC                                                      
     INNER JOIN coc_Notifications NT(NOLOCK) ON BC.NotificationID = NT.NotificationID AND NT.EServiceID =@EServiceID                                          
  WHERE BC.IsUsed = 0                              
  INSERT INTO coc_ECouponParticipations(ECouponID,ParticipationDate,Barcode,ParticipationMobile,ParticipationEmailID,ConsumerID,GuestID,RetailOutletID,EnteredStandardBarcode)                                       
      SELECT @EcouponID,GETDATE(),@Barcode,@ParticipationMobile,@ParticipationEmailID,@ConsumerID,NULL,@RetailOutletID,@EnteredBarcode                  
  Set @ECouponParticipationID=SCOPE_IDENTITY()               
  UPDATE coc_EServiceBarcodes SET AsignedMoile = @ParticipationMobile,AsignedEmailID=@ParticipationEmailID,IsUsed =1,UsedDate = GETDATE(),ConsumerID=@ConsumerID,GuestID=NULL where EServiceBarcodeID = @EServiceBarcodeID          
           
   EXEC SaveNotificationSending @NotificationID,@EcouponID,@ConsumerID,@GeneralNotificationTemplateID,@EServiceID,@Barcode,@ErrorMessage OUTPUT          
                                
   --SELECT top 1 @NotificationSendID=NotificationSendID from coc_NotificationSends(nolock) where NotificationID=@NotificationID order by 1 desc                        
          
    insert into coc_NotificationSends(NotificationID,SendingDate,SendingType,SearchCount,NotificationCount)                    
         select @NotificationID, getdate(),4,0,0                               
   SELECT @NotificationSendID=SCOPE_IDENTITY()                             
   insert into coc_NotificationSendLanguages(NotificationSendID,LanguageID,Subject,Message)                   
        select  @NotificationSendID,1,'You have Successfully Participated in Competition, all the best to you',''                            
   insert into coc_NotificationSendLanguages(NotificationSendID,LanguageID,Subject,Message)                   
         select  @NotificationSendID,2,N'تمت المشاركة في المسابقة بنجاح، كل التوفيق لك.',N''           
        
   insert into coc_ConsumerNotifications(NotificationSendID,ConsumerID,SendDate,HasChecked,IsPushed,SendPushNotification)                    
             select @NotificationSendID,@ConsumerID,getdate(),0,0,1                
        
   update coc_ECouponParticipationByExternalBarcode set ECouponParticipationID=@ECouponParticipationID,ParticipantStatus=2,ProcessDate=GETDATE(),Remarks='Success' where ExternalParticipationID=@ExternalParticipationID          
          
   update coc_EServiceExternalBarcodes set EServiceBarcodeID=@EServiceBarcodeID,ExternalParticipationID=@ECouponParticipationID where ExternalBarcode=@EnteredBarcode           
         and EServiceID=@EServiceID and (isnull(@CorporateID,0)=0 or CorporateID=@CorporateID)           
   and (isnull(@RetailOutletID,0)=0 or RetailoutletID=@RetailOutletID)          
   and isnull(EServiceBarcodeID,0)=0 and isnull(IsBlocked,0)=0 and isnull(IsUsed,0)=0 and isnull(ExternalParticipationID,0)=0          
   end          
   else          
   begin          
     if(@ProcessDate is not null and DATEDIFF(HOUR,@ProcessDate,GETDATE())>=72)        
  begin        
     Set @GeneralNotificationTemplateID = 16          
        EXEC SaveNotificationSending @NotificationID,@EcouponID,@ConsumerID,@GeneralNotificationTemplateID,@EServiceID,@EnteredBarcode,@ErrorMessage OUTPUT          
  SELECT top 1 @NotificationSendID=NotificationSendID from coc_NotificationSends(nolock) where NotificationID=@NotificationID order by 1 desc                        
        insert into coc_ConsumerNotifications(NotificationSendID,ConsumerID,SendDate,HasChecked,IsPushed,SendPushNotification)                    
             select @NotificationSendID,@ConsumerID,getdate(),0,0,1        
     update coc_ECouponParticipationByExternalBarcode set ParticipantStatus=3,Remarks='Barcode not found',ProcessDate=GETDATE() where ExternalParticipationID=@ExternalParticipationID          
  end        
  else if(@ProcessDate is null)        
  begin        
     update coc_ECouponParticipationByExternalBarcode set ProcessDate=GETDATE() where ExternalParticipationID=@ExternalParticipationID        
  end        
   end          
   delete from @ParticipationTable where ExternalParticipationID=@ExternalParticipationID          
end          
          
end 
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_CheckThirdPartyUser]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[USP_CORE_CheckThirdPartyUser]  
(  
 @MobileNumber nvarchar(20)   
,@SpResponseStatus int            = null OUTPUT      
,@SpResponseMessage nvarchar(max) = null OUTPUT      
)  
AS   
BEGIN  
SET @SpResponseStatus = 0;  
SET @SpResponseMessage = 'UserDoesNotExists';  
IF EXISTS(SELECT ConsumerID FROM coc_Consumers where PrimaryMobile = @MobileNumber and UserID is null and IsActive = 1 and IsDeleted = 0 )  
 BEGIN  
   SELECT ConsumerID,UserID,PrimaryMobile,EmailID,COALESCE(FullName,FirstName,SecondName,FamilyName) FullName,FirstName,SecondName,FamilyName FROM coc_Consumers where   
   PrimaryMobile = @MobileNumber and  
   UserID is null and IsActive = 1 and IsDeleted = 0  
   SET @SpResponseStatus = 2;  
   SET @SpResponseMessage = 'ThirdPartyUserExist';  
  END  
END
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_CheckUserProximity]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:	Mohammad Rafeeq .
-- Create date:  24 Nov,2020.
-- Description:	 This stored procedure checks the location of user and determines the proximity of retailoutlet
-- =============================================
CREATE PROCEDURE [dbo].[USP_CORE_CheckUserProximity]
	@ConsumerID int,
	@ECouponID int, 
	@EServiceID int, 
	@DeviceSource nvarchar(200) = null,
	@MacAddress nvarchar(200) = null,
	@ConsumerLatitude nvarchar(200),
	@ConsumerLongitude nvarchar(200),
	@SPStatus int = null out,-- 1 = within range, 2 = not within range, 0= failure
	@ClosestRetailoutletID int = null out,
	@Message nvarchar(500) = null out,
	@ErrorMessage nvarchar(1000) = null out
AS
BEGIN
	
 BEGIN TRY

	IF NOT EXISTS(SELECT LocationValidationRequired FROM coc_ECoupons Where ECouponID = @ECouponID and ISNULL(LocationValidationRequired,0)=1)
	 begin -- check competition Location Validation Required or not
	   SET @SPStatus = 1;
	   SET @Message = 'LocationValidationNotRequired';
	   SET @ClosestRetailoutletID = 0; 
	   return;
	 end

	 IF NOT EXISTS(SELECT ECouponID FROM coc_ECouponOutlets Where ECouponID = @ECouponID)
	 begin -- check Retailoutlet
	   SET @SPStatus = 0;
	   SET @Message = 'ConfigurationError';
	   SET @ClosestRetailoutletID = 0; 
	   return;
	 end

	SET @SPStatus = 2;
	SET @Message = 'LocationNotInRange';
	SET @ClosestRetailoutletID = 0; 

	declare @_ConsumerLatitude decimal(10,6)
	declare @_ConsumerLongitude decimal(10,6)
	declare @_RetailoutletLatitude decimal(10,6)
	declare @_RetailoutletLongitude decimal(10,6)
	declare @_RetailoutletProximityRadius decimal(10,6)	
	declare @_DefaultProximityRadius decimal(10,6)	= 200;

	declare @GUID nvarchar(100);
	SET @GUID = NEWID();

	Set @_ConsumerLatitude = CONVERT(DECIMAL(10,6), REPLACE(@ConsumerLatitude, ',', ''));
	Set @_ConsumerLongitude = CONVERT(DECIMAL(10,6), REPLACE(@ConsumerLongitude, ',', ''));
		

	declare @SuccessPollCount int
		
	DECLARE @CalculatedDistance DECIMAL(20,8)
	
	
	INSERT INTO coc_core_RetailoutletDistanceCalculationAudit(ConsumerID,ECouponID,EServiceID,DeviceSource,Latitude,Longitude,MacAddress,CreatedOn,Description,GUID)
	VALUES(@ConsumerID,@ECouponID,@EServiceID,@DeviceSource,@ConsumerLatitude,@ConsumerLongitude,@MacAddress,GETDATE(),'RequestReceived',@GUID)

	Declare @Retailoutlet_Temp table(RetailoutletID int);
	
		Insert into @Retailoutlet_Temp(RetailoutletID) select RetailOutletID from coc_ECouponOutlets where ECouponID = @ECouponID;
		Declare @TopRetailoutletID int;

	WHILE exists(select RetailoutletID from @Retailoutlet_Temp)
		BEGIN	--while begin		    
				SELECT top 1 @TopRetailoutletID = RetailoutletID from @Retailoutlet_Temp;
				Select @_RetailoutletLatitude = CONVERT(DECIMAL(10,6), REPLACE(ISNULL(Latitude,0), ',', ''))
				,@_RetailoutletLongitude = CONVERT(DECIMAL(10,6), REPLACE(ISNULL(Longitude,0), ',', ''))
				,@_RetailoutletProximityRadius = Isnull(ProximityValue,@_DefaultProximityRadius)
				from coc_RetailOutlets where RetailOutletID  =  @TopRetailoutletID;                                                               																		

                SELECT @CalculatedDistance = dbo.DistanceBetweenPoints(@_ConsumerLatitude, @_RetailoutletLatitude, @_ConsumerLongitude, @_RetailoutletLongitude)

			IF @CalculatedDistance <= @_RetailoutletProximityRadius
				 BEGIN
					 SET @SPStatus = 1;
				     SET @Message = 'LocationInRange';
	                 SET @ClosestRetailoutletID = @TopRetailoutletID; 
					 INSERT INTO coc_core_RetailoutletDistanceCalculationAudit(ConsumerID,ECouponID,EServiceID,DeviceSource
					 ,Latitude,Longitude,MacAddress,CreatedOn,CalculatedDistance,RetailoutletID,Description,GUID,Status,ProximityRadiusValue)
					 VALUES(@ConsumerID,@ECouponID,@EServiceID,@DeviceSource,@ConsumerLatitude,@ConsumerLongitude,@MacAddress
					 ,GETDATE(),@CalculatedDistance,@TopRetailoutletID,@Message,@GUID,@SPStatus,@_RetailoutletProximityRadius)
					 Break;
				 END
			Else
				BEGIN
				     SET @SPStatus = 2;
				     SET @Message = 'LocationNotInRange';
	                 SET @ClosestRetailoutletID = 0; 
					 INSERT INTO coc_core_RetailoutletDistanceCalculationAudit(ConsumerID,ECouponID,EServiceID,DeviceSource
					 ,Latitude,Longitude,MacAddress,CreatedOn,CalculatedDistance,RetailoutletID,Description,GUID,Status,ProximityRadiusValue)
					 VALUES(@ConsumerID,@ECouponID,@EServiceID,@DeviceSource,@ConsumerLatitude,@ConsumerLongitude,@MacAddress
					 ,GETDATE(),@CalculatedDistance,@TopRetailoutletID,@Message,@GUID,@SPStatus,@_RetailoutletProximityRadius)
				END

				DELETE from @Retailoutlet_Temp where RetailoutletID = @TopRetailoutletID;
	  END --while end

	END TRY

	BEGIN CATCH
	 SET @SPStatus = 0;
	 SET @Message = 'GenericError';
	 SET @ErrorMessage = 'ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
	 SET @ClosestRetailoutletID = 0; 
	END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[Usp_Core_ConsumerEmailVerification]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================                            
-- Author:  <Rafeeq Mohammad>                            
-- Create date: <dec-10-2020>                      
-- Description: Usp_Core_ConsumerEmailVerification(update email verification)                        
-- =============================================                                              
CREATE PROCEDURE [dbo].[Usp_Core_ConsumerEmailVerification]     
 @ConsumerId int    
,@EmailId VARCHAR(100) = nulll   
,@Mobile VARCHAR(20) = nulll
,@IsEmailVerification bit = 0
,@IsMobileVerification bit = 0
,@LanguageID int                 =  1                        
,@UserID bigint                  =  null                        
,@RoleID bigint                  =  null                        
,@ImpersonationUserID bigint     =  null                        
,@SpResponseStatus int =null           out                        
,@SpResponseMessage nvarchar(max) =null out                        
,@SpErrorDetails nvarchar(max) =null    out                                        
AS                        
                        
 BEGIN TRY                        
        
  Declare @DefaultExpirtyTimeInMinutes int = 1440; --24 hours
  Declare @DefaultOTPExpirtyTimeInMinutes int = 5;  
 if (@IsEmailVerification = 1) and exists(Select EmailId from coc_Consumers(nolock) where ConsumerID = @ConsumerId and EmailID = @EmailId and IsActive = 1 and IsDeleted = 0)    
    BEGIN    
		Declare @VerificationSentOn datetime;  
		Declare @TimeDifference int;  
		SELECT @VerificationSentOn = EmailVerificationSentOn From coc_Consumers(nolock) where ConsumerID = @ConsumerId;  
		SELECT @TimeDifference   = datediff(minute, @VerificationSentOn,GETDATE());  
		IF (@TimeDifference <= @DefaultExpirtyTimeInMinutes)      
		  BEGIN  
			Update coc_Consumers set IsEmailVerified = 1 where ConsumerID = @ConsumerId and  EmailID = @EmailId;    
			  Set @SpResponseStatus=1;                        
			  Set @SpResponseMessage='SUCCESS';                         
			  Set @SpErrorDetails='SUCCESS';  
		  END  
		ELSE  
		   BEGIN  
				Set @SpResponseStatus=0;                        
				Set @SpResponseMessage='TimeExpired';                         
				Set @SpErrorDetails='Verification Time Expired';     
			END  
	Return;
   END    
     
 if (@IsMobileVerification = 1) and exists(Select PrimaryMobile from coc_Consumers(nolock) where ConsumerID = @ConsumerId and PrimaryMobile = @Mobile and IsActive = 1 and IsDeleted = 0)    
    BEGIN    
		Declare @OTPVerificationSentOn_ datetime;  
		Declare @OTPTimeDifference_ int;  
		SELECT @OTPVerificationSentOn_ = MobileOTPSentOn From coc_Consumers(nolock) where ConsumerID = @ConsumerId;  
		SELECT @OTPTimeDifference_   = datediff(minute, @OTPVerificationSentOn_,GETDATE());  
		IF (@OTPTimeDifference_ <= @DefaultOTPExpirtyTimeInMinutes)      
		  BEGIN  
			Update coc_Consumers set IsMobileVerified = 1, IsVerified = 1 where ConsumerID = @ConsumerId and  PrimaryMobile = @Mobile;    
			  Set @SpResponseStatus=1;                        
			  Set @SpResponseMessage='SUCCESS';                         
			  Set @SpErrorDetails='SUCCESS';  
		  END  
		ELSE  
		   BEGIN  
				Set @SpResponseStatus=0;                        
				Set @SpResponseMessage='TimeExpired';                         
				Set @SpErrorDetails='Verification Time Expired';     
			END  
	Return;
   END 

 ELSE    
    BEGIN    
	Set @SpResponseStatus=0;                        
	Set @SpResponseMessage='EmailIdNotExists';                         
	Set @SpErrorDetails='EmailId Not Exists or not found';     
    END    
    
 END TRY                        
 BEGIN CATCH                        
     
 Set @SpResponseStatus=0;                        
 Set @SpResponseMessage='GenericError';                         
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())    
 + '>, ErrorSeverity : <'    
 + convert(varchar(500),Error_severity())    
 +'>, ErrorState : <'+convert(varchar(500), Error_state())    
 +'> , ErrorProcedure : <'+Error_procedure()     
 +'> ,ErrorLine <'+convert(varchar(500), Error_line())    
 +'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                         
 END CATCH                        
                        
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_ConsumerProfileUpdateRequest]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_CORE_ConsumerProfileUpdateRequest]        
 @ConsumerID bigint
,@UserIdentityTypeID   INT =NULL      
,@UserIdentityNumber NVARCHAR(100)=NULL      
,@MembershipNumber  NVARCHAR(100)=NULL 
,@EmailID           NVARCHAR(100)=NULL     
,@PrimaryMobile     VARCHAR(15) =NULL 
,@FullName          VARCHAR(500) =NULL 
,@BirthDate         DATETIME =NULL
,@Address1			NVARCHAR(200)=NULL
,@Address2			NVARCHAR(200)=NULL
,@SecondaryMobile   VARCHAR(15) =NULL
,@KnowECouponID		INT = NULL
,@Gender			SMALLINT = NULL
,@NationalityID		INT = NULL
,@CountryID			INT = NULL
,@CityID			INT = NULL
,@LanguageID int                 =  1        
,@UserID bigint                  =  null        
,@RoleID bigint                  =  null        
,@ImpersonationUserID bigint     =  null        
,@SpResponseStatus INT            OUT        
,@SpResponseMessage NVARCHAR(MAX) OUT        
,@SpErrorDetails NVARCHAR(MAX)    OUT        
AS        
BEGIN TRY      
BEGIN          
IF NOT EXISTS(SELECT * FROM dbo.coc_ConsumerProfileEdit WITH(NOLOCK) WHERE ConsumerID=@ConsumerID)
BEGIN  
INSERT INTO coc_ConsumerProfileEdit       
(ConsumerID      
,UserIdentityTypeID 
,UserIdentityNumber
,MembershipNumber
,EmailID      
,PrimaryMobile
,FullName
,BirthDate
,Address1
,Address2
,SecondaryMobile
,KnowECouponID
,Gender
,NationalityID
,CountryID
,CityID)      
VALUES(@ConsumerID
,@UserIdentityTypeID
,@UserIdentityNumber
,@MembershipNumber
,@EmailID
,@PrimaryMobile
,@FullName
,@BirthDate
,@Address1
,@Address2
,@SecondaryMobile
,@KnowECouponID
,@Gender
,@NationalityID
,@CountryID
,@CityID)
END  
ELSE  
BEGIN   
UPDATE coc_ConsumerProfileEdit       
SET     
 UserIdentityNumber =@UserIdentityNumber     
,UserIdentityTypeID = @UserIdentityTypeID
,MembershipNumber = @MembershipNumber
,EmailID = @EmailID
,PrimaryMobile = @PrimaryMobile
,FullName = @FullName
,BirthDate = @BirthDate
,Address1 = @Address1
,Address2 = @Address2
,SecondaryMobile = @SecondaryMobile
,KnowECouponID = @KnowECouponID
,Gender = @Gender
,NationalityID = @NationalityID
,CountryID = @CountryID
,CityID = @CityID
WHERE ConsumerID=@ConsumerID  
END
 SET @SpResponseStatus=1;        
 SET @SpResponseMessage='Success';        
 SET @SpErrorDetails='Success';       
END       
 END TRY        
 BEGIN CATCH         
 Set @SpResponseStatus=0;        
 Set @SpResponseMessage='GenericError';        
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,        
  ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>,        
  ErrorState : <'+convert(varchar(500), Error_state())+'> ,        
  ErrorProcedure : <'+Error_procedure() +'> ,      
  ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';        
 END CATCH        
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_ConsumerRequestProfileDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[USP_CORE_ConsumerRequestProfileDetails]
 @ConsumerID	BIGINT  
AS BEGIN

DECLARE @UserIdentityType	    VARCHAR(50) = NULL        
,@UserIdentityNumber	NVARCHAR(100) = NULL        
,@MembershipNumber		NVARCHAR(100) = NULL   
,@EmailID				NVARCHAR(100) = NULL       
,@PrimaryMobile			VARCHAR(15) = NULL   
,@FullName				VARCHAR(500) = NULL   
,@BirthDate				DATETIME = NULL  
,@Address1				NVARCHAR(200) = NULL  
,@Address2				NVARCHAR(200) = NULL  
,@SecondaryMobile		VARCHAR(15) = NULL   
,@Gender				VARCHAR(10) = NULL  
,@Nationality			NVARCHAR(100) = NULL  
,@Country				NVARCHAR(100) = NULL  
,@City					NVARCHAR(100) = NULL
,@ReqestUserIdentityType	VARCHAR(50) = NULL        
,@ReqestUserIdentityNumber	NVARCHAR(100) = NULL        
,@ReqestMembershipNumber	NVARCHAR(100) = NULL   
,@ReqestEmailID				NVARCHAR(100) = NULL       
,@ReqestPrimaryMobile		VARCHAR(15) = NULL   
,@ReqestFullName			VARCHAR(500) = NULL   
,@ReqestBirthDate			DATETIME = NULL  
,@ReqestAddress1			NVARCHAR(200) = NULL  
,@ReqestAddress2			NVARCHAR(200) = NULL  
,@ReqestSecondaryMobile		VARCHAR(15) = NULL   
,@ReqestGender				VARCHAR(10) = NULL  
,@ReqestNationality			NVARCHAR(100) = NULL  
,@ReqestCountry				NVARCHAR(100) = NULL  
,@ReqestCity				NVARCHAR(100) = NULL

SELECT @UserIdentityType = UserIdentityTypeID
,@UserIdentityNumber = UserIdentityNumber
,@MembershipNumber = MembershipNumber
,@EmailID = EmailID
,@PrimaryMobile = PrimaryMobile
,@FullName = FullName
,@BirthDate = BirthDate
,@Address1 = Address1
,@Address2 = Address2
,@SecondaryMobile = SecondaryMobile
,@Gender = CASE WHEN Gender = 1 then 'Male' ELSE 'Female' END
,@Nationality = NationalityID  
,@Country = CountryID
,@City = CityID FROM dbo.coc_Consumers WITH(NOLOCK) where ConsumerID = @ConsumerID

SELECT @City = City FROM coc_CityLanguages WITH(NOLOCK) WHERE CityID = @City AND LanguageID = 1
SELECT @Country = Country FROM coc_CountryLanguages WITH(NOLOCK) WHERE CountryID = @Country AND LanguageID = 1
SELECT @Nationality = Nationality FROM coc_NationalityLanguages WITH(NOLOCK) WHERE NationalityID = @Nationality AND LanguageID = 1
SELECT @UserIdentityType = UserIdentityName_EN FROM coc_core_UserIdentityTypes WITH(NOLOCK) WHERE UserIdentityTypeID = @UserIdentityType

SELECT @ReqestUserIdentityType = UserIdentityTypeID
,@ReqestUserIdentityNumber = UserIdentityNumber
,@ReqestMembershipNumber = MembershipNumber
,@ReqestEmailID = EmailID
,@ReqestPrimaryMobile = PrimaryMobile
,@ReqestFullName = FullName
,@ReqestBirthDate = BirthDate
,@ReqestAddress1 = Address1
,@ReqestAddress2 = Address2
,@ReqestSecondaryMobile = SecondaryMobile
,@ReqestGender = CASE WHEN Gender = 1 then 'Male' ELSE 'Female' END
,@ReqestNationality = NationalityID  
,@ReqestCountry = CountryID
,@ReqestCity = CityID FROM dbo.coc_ConsumerProfileEdit WITH(NOLOCK) where ConsumerID = @ConsumerID

SELECT @ReqestCity = City FROM coc_CityLanguages WITH(NOLOCK) WHERE CityID = @ReqestCity AND LanguageID = 1
SELECT @ReqestCountry = Country FROM coc_CountryLanguages WITH(NOLOCK) WHERE CountryID = @ReqestCountry AND LanguageID = 1
SELECT @ReqestNationality = Nationality FROM coc_NationalityLanguages WITH(NOLOCK) WHERE NationalityID = @ReqestNationality AND LanguageID = 1
SELECT @ReqestUserIdentityType = UserIdentityName_EN FROM coc_core_UserIdentityTypes WITH(NOLOCK) WHERE UserIdentityTypeID = @ReqestUserIdentityType

SELECT
 @ConsumerID AS ConsumerID
,@UserIdentityType  AS UserIdentityType    
,@UserIdentityNumber AS UserIdentityNumber
,@EmailID			AS EmailId
,@PrimaryMobile		AS PrimaryMobile
,@FullName			AS FullName
,CONVERT(VARCHAR(12),@BirthDate,103)			AS BirthDate
,@Address1			AS Address1
,@Address2			AS Address2
,@SecondaryMobile	AS SecondaryMobile
,@Gender			AS Gender
,@Nationality		AS Nationality
,@Country			AS Country
,@City				AS City
,@ReqestUserIdentityType	AS ReqestUserIdentityType
,@ReqestUserIdentityNumber	AS ReqestUserIdentityNumber
,@ReqestEmailID				AS ReqestEmailId
,@ReqestPrimaryMobile		AS ReqestPrimaryMobile
,@ReqestFullName			AS ReqestFullName
,CONVERT(VARCHAR(12),@ReqestBirthDate,103)			AS ReqestBirthDate
,@ReqestAddress1			AS ReqestAddress1
,@ReqestAddress2			AS ReqestAddress2
,@ReqestSecondaryMobile		AS ReqestSecondaryMobile
,@ReqestGender				AS ReqestGender
,@ReqestNationality			AS ReqestNationality
,@ReqestCountry				AS ReqestCountry
,@ReqestCity				AS ReqestCity

END
GO
/****** Object:  StoredProcedure [dbo].[usp_core_DeleteCompetitionById]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_DeleteCompetitionById]              
 @CompetitionStagingID bigint                             
,@UserID INTEGER                 =null                  
,@LanguageID int                 =1                 
,@RoleID bigint                  =null                  
,@ImpersonationUserID bigint     =null                  
,@SpResponseStatus int             out                  
,@SpResponseMessage nvarchar(max)   out                
,@SpErrorDetails nvarchar(max)      out                
AS                  
 SET NOCOUNT ON                  
 BEGIN TRY                  
 BEGIN       
Declare @CurrentRequestGUID nvarchar(max)      
Declare @BarcodeConsumptionID bigint      
Declare @CompetitionFeeAmount decimal(18,2)    
Declare @CorporateID  int    
select top 1 @CorporateID=CorporateID,@CurrentRequestGUID=[guid] from coc_competition_staging(nolock) where  CompetitionStagingID=@CompetitionStagingID     
select top 1 @CompetitionFeeAmount=Amount from coc_Pricing_log where guid=(select guid from coc_competition_staging(NOLOCK) where CompetitionStagingID=@CompetitionStagingID) and PricingSourceTypeId=4 and PricingSourceId=7    
  --Remove Before isnerting data in to temp table      
  if exists(select * from Coc_Pricing_log  where guid=@CurrentRequestGUID and BarcodePurchaseId is not null )      
  begin    
   update coc_BarcodePurchase set IsCompetitionFeeAapply=0 where BarcodePurchaseId=(select top 1 BarcodePurchaseId from Coc_Pricing_log (NOLOCK)  where guid=@CurrentRequestGUID and BarcodePurchaseId is not null)    
  end    
    
    
 WHILE Exists(select BarcodeConsumptionID from coc_BarcodesConsumption (NOLOCK) where CompetitionStagingId=@CompetitionStagingID)                   
 BEGIN         
   select top 1 @BarcodeConsumptionID=BarcodeConsumptionID from coc_BarcodesConsumption(nolock) where CompetitionStagingId=@CompetitionStagingID      
   if exists(select * from coc_BarcodesConsumption(nolock) where BaseConsumptionID=@BarcodeConsumptionID)      
   begin      
  delete from coc_BarcodesConsumption where BaseConsumptionID=@BarcodeConsumptionID      
   end      
   UPDATE coc_BarcodesConsumption SET CompetitionStagingId = NULL,NoOfBarcodesUsed=NULL where  BarcodeConsumptionID=@BarcodeConsumptionID       
 End      
    
declare @ECouponID bigint=NULL    
select @ECouponID=CompetitionId from coc_competition_staging(nolock) where  CompetitionStagingID=@CompetitionStagingID     
if(@ECouponID is not null)    
begin    
 update  coc_ECoupons set IsActive=0,IsApproved=0 where ECouponID=@ECouponID    
 update coc_EServices set IsActive=0 where EServiceID=(select EServiceID from coc_ECoupons(nolock) where ECouponID=@ECouponID)    
end    
delete from coc_BarcodesConsumption where CompetitionStagingId = @CompetitionStagingID      
Delete from coc_Pricing_log where guid=(select guid from coc_competition_staging where CompetitionStagingID=@CompetitionStagingID)      
Delete from dbo.coc_CompetitionPayment  where  CompetitionStagingID=@CompetitionStagingID      
delete from coc_competition_staging_checklists where  CompetitionStagingID=@CompetitionStagingID     
delete from coc_competition_staging_rejections where  CompetitionStagingID=@CompetitionStagingID     
delete from coc_Competition_Staging_RetailOutlets where CompetitionStagingID=@CompetitionStagingID     
    
delete from  coc_competition_staging_cities  where     CompetitionStagingID=@CompetitionStagingID      
delete from  coc_competition_staging_countries where  CompetitionStagingID=@CompetitionStagingID    
     
       
delete from  coc_competition_staging_draws_languages where CompetitionStagingDrawID in (select CompetitionStagingDrawID from coc_competition_staging_draws (NOLOCK) where  CompetitionStagingID=@CompetitionStagingID)      
delete from  coc_competition_staging_draws_details where CompetitionStagingDrawID in (select CompetitionStagingDrawID from coc_competition_staging_draws (NOLOCK) where  CompetitionStagingID=@CompetitionStagingID)      
delete from  coc_competition_staging_draws where  CompetitionStagingID=@CompetitionStagingID       
    
delete from  coc_competition_staging_ParticipationTypes where  CompetitionStagingID=@CompetitionStagingID       
delete from  coc_competition_staging_prizes_languages where CompetitionStagingPrizeID in (select CompetitionStagingPrizeID from coc_competition_staging_prizes (NOLOCK) where  CompetitionStagingID=@CompetitionStagingID )      
delete from  coc_competition_staging_prizes where  CompetitionStagingID=@CompetitionStagingID       
delete from  coc_competition_staging_CompetitionMethods where  CompetitionStagingID=@CompetitionStagingID       
delete from  coc_competition_staging_CompetitionTypes where  CompetitionStagingID=@CompetitionStagingID      
delete from  coc_competition_staging_languages where  CompetitionStagingID=@CompetitionStagingID       
delete from  coc_competition_staging where  CompetitionStagingID=@CompetitionStagingID       
  --Update the IsCompetitionFeeAapplyto false Because it is deleting     
      
    
--  if(@CompetitionFeeAmount=0.00)     
--  begin    
-- if exists(select top 1 BarcodePurchaseId from coc_BarcodePurchase where IsCompetitionFeeAapply=1 and corporateID=9 and CAST(DATEADD(year, 1, [date]) AS DATE) >= CAST(getdate() AS DATE) order by BarcodePurchaseId desc)    
-- begin    
--   update coc_BarcodePurchase set IsCompetitionFeeAapply=0     
--   where BarcodePurchaseId=(select top 1 BarcodePurchaseId from coc_BarcodePurchase     
--   where IsCompetitionFeeAapply=1 and corporateID=@CorporateID and CAST(DATEADD(year, 1, [date]) AS DATE) >= CAST(getdate() AS DATE)  order by BarcodePurchaseId desc)    
-- end     
--end    
 Set @SpResponseStatus=1;                  
 Set @SpResponseMessage='Success';                  
 Set @SpErrorDetails='Success';         
            
 END                   
 END TRY                  
 BEGIN CATCH           
 Set @SpResponseStatus=0;                  
 Set @SpResponseMessage='GenericError';                  
  Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,      
   ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>,      
    ErrorState : <'+convert(varchar(500), Error_state())+'> ,       
 ErrorProcedure : <'+Error_procedure() +'> ,       
 ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                
        
      
 END CATCH                  
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_DeleteProfile]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[USP_CORE_DeleteProfile]
 @profileID INT = NULL,
 @SpStatus INT OUT,      
 @ErrorMessage NVARCHAR(500) OUT

 AS BEGIN
 SET @SpStatus = 1;      
SET @ErrorMessage = 'Success';      
BEGIN TRY      
    DELETE FROM coc_Core_ProfileReportsColumns WHERE ProfileID = @profileID
END TRY      
      
BEGIN CATCH      
SET @SpStatus = 0;      
SET @ErrorMessage = ERROR_MESSAGE();      
END CATCH 
 END
GO
/****** Object:  StoredProcedure [dbo].[usp_core_EditDynamicLinkById]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Rafeeq Mohammad>
-- Create date: <16-06-2020>
-- Description:	<Edit Dynamic link>
-- =============================================
CREATE PROCEDURE [dbo].[usp_core_EditDynamicLinkById]
  @DynamicLinkID bigint 
AS
BEGIN
SET NOCOUNT ON
SELECT
  CD.DynamicLinkID
 ,CD.LinkName 
 ,CD.EcouponID 
 ,CD.RetailoutletID 
 ,CD.BackgroundImage 
 ,CD.ModalPopupLogo 
 ,CD.ModalContentBackgroundImage 
 ,CD.IsActive 
 ,CD.CompetitionImage 
 ,CS.CompetitionStagingID
 ,(CASE WHEN Exists(SELECT CompetitionStagingID FROM coc_Competition_Staging_ParticipationTypes(NOLOCK) 
 WHERE CompetitionStagingID= CS.CompetitionStagingID and CompetitionParticipationTypeID=22) THEN 1 ELSE 0 END) AS IsSocialMediaLink,
 CD.SocialMediaID
 FROM Coc_Core_DynamicLinks CD (NOLOCK) 
 INNER JOIN coc_competition_staging CS (NOLOCK) ON CS.CompetitionId = CD.EcouponID
 WHERE CD.DynamicLinkID = @DynamicLinkID
END
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_EditSpecialBarcode]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[USP_CORE_EditSpecialBarcode]
 @ECouponOutletID int 
,@LanguageID int = 1
AS  
BEGIN  
  begin try
select     CE.ECouponOutletID
		   ,CE.ECouponID   
		   ,CEB.StandardBarcode  
           ,CE.RetailOutletID 
		   ,CRL.RetailOutlet
           ,CE.TotalAllowedParticipationPerCustomer    
           ,CE.TotalAllowedParticipationPerCustomerPerDay    
           ,CE.TotalAllowedParticipationPerGuest    
           ,CE.TotalAllowedParticipationPerGuestPerDay    
           ,CE.TotalAllowedParticipationinOutlet    
           ,CE.TotalAllowedParticipationPerBarcode    
           ,CE.TotalAllowedParticipationPerBarcodePerDay
		   ,CS.CompetitionStagingID from  coc_ECouponOutlets  CE (NOLOCK) 
     INNER JOIN coc_ECouponStandardBarcodes CEB (NOLOCK) on CEB.ECouponOutletID = CE.ECouponOutletID  
	 Inner Join coc_RetailOutletLanguages CRL(NOLOCK) on CRL.RetailOutletID = CE.RetailOutletID and CRL.LanguageID = @LanguageID
	 inner join coc_competition_staging cs(NOLOCK) on cs.CompetitionId = CE.ECouponID
     where CE.ECouponOutletID = @ECouponOutletID  
	 end try
	 begin catch
	 print (Error_message());
	 end catch  
END
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_ExternalBarcodeParticipation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_CORE_ExternalBarcodeParticipation]            
(            
@EServiceID int ,            
@EcouponID int ,            
@EnteredBarcode nvarchar(100) ,            
@ParticipationMobile nvarchar(20) = null,            
@ParticipationEmailID nvarchar(100) = null,            
@ConsumerID INT=null ,            
@ConsumerName nvarchar(200) = null,            
@ReturnMessage nvarchar(500) out,            
@ReturnStatus int out,            
@CorporateID int,            
@IsFromCompetitionLink bit=null,            
@RetailOutletID int=null            
)            
AS BEGIN            
      BEGIN TRANSACTION savebarcode            
BEGIN TRY             
            
Declare @AllowExternalBarcode bit,            
@BarcodeLength nvarchar(20),            
@BarcodePrefix nvarchar(20),            
@AllowExternalBarcodeAsPending bit,            
@EnteredBarcodePrefix nvarchar(10);            
            
Select             
 @EServiceID = ES.EServiceID            
,@AllowExternalBarcode = ES.AllowExternalBarcode            
,@BarcodeLength = ES.BarcodeLength            
,@BarcodePrefix = ES.BarcodePrefix            
,@AllowExternalBarcodeAsPending = ES.AllowExternalBarcodeAsPending            
from coc_EServices(nolock) ES where ES.EServiceID = @EServiceID            
            
SELECT @EnteredBarcodePrefix  = SUBSTRING (@EnteredBarcode, 1, LEN(@BarcodePrefix)) ;            
            
IF(@AllowExternalBarcode = 1) -- allow ExternalBarcode START            
   BEGIN            
              
  IF(1=1) -- @EnteredBarcodePrefix  = @BarcodePrefix and @BarcodeLength = LEN(@EnteredBarcode) check prefix and length of entered barcode START            
     BEGIN    -- condition removed as per shamim bhai instruction on 27-05-2021        
                 
       Declare @CompetitionParticipationLimit int;            
     Declare @ConsumerParticipationCount int;            
                 
            
     if exists(select ConsumerID from coc_ECouponParticipationByExternalBarcode(nolock) where ConsumerID = @ConsumerID and EnteredBarcode=@EnteredBarcode)--check used barcode or not start            
       begin            
       SET @ReturnMessage = 'Your barcode that you entered or scanned is used.';--'ExternalBarcodeAlreadyUsed';            
       SET @ReturnStatus = 0;            
       INSERT INTO coc_ECouponParticipationByExternalBarcode(ECouponID,ParticipationDate,EnteredBarcode,ParticipationMobile,ParticipationEmailID            
       ,ConsumerID,RetailOutletID,ConsumerName,CorporateID,IsFromCompetitionLink,ParticipantStatus,Remarks)            
       SELECT @ECouponID,GETDATE(),@EnteredBarcode,@ParticipationMobile,@ParticipationEmailID            
       ,@ConsumerID,@RetailOutletID,@ConsumerName,@CorporateID,@IsFromCompetitionLink,5,@ReturnMessage;--status = 5 already used            
                   
       end--check used barcode or not end            
            
  else --save valid barcode            
       begin             
    if exists(select ExternalBarcode from coc_EServiceExternalBarcodes(nolock) where ExternalBarcode=@EnteredBarcode             
        and EServiceID=@EServiceID and (isnull(@CorporateID,0)=0 or CorporateID=@CorporateID)             
        and (isnull(@RetailOutletID,0)=0 or RetailoutletID=@RetailOutletID)            
        and isnull(EServiceBarcodeID,0)=0 and isnull(IsBlocked,0)=0 and isnull(IsUsed,0)=0 and isnull(ExternalParticipationID,0)=0)            
    begin            
       -- if barcode already there in coc_EServiceExternalBarcodes table          
       --exec Usp_Core_CheckECouponParticipationExternalBarcodes          
   if not exists(select ECouponID from coc_ECouponParticipationByExternalBarcode(nolock)  where ECouponID=@EcouponID and ConsumerID=@ConsumerID and EnteredBarcode=@EnteredBarcode)    
       INSERT INTO coc_ECouponParticipationByExternalBarcode(ECouponID,ParticipationDate,EnteredBarcode,ParticipationMobile,ParticipationEmailID            
       ,ConsumerID,RetailOutletID,ConsumerName,CorporateID,IsFromCompetitionLink,ParticipantStatus,Remarks)            
 SELECT @ECouponID,GETDATE(),@EnteredBarcode,@ParticipationMobile,@ParticipationEmailID            
       ,@ConsumerID,@RetailOutletID,@ConsumerName,@CorporateID,@IsFromCompetitionLink,1,@ReturnMessage;-- status 1 success       
    
    Declare @ExternalParticipationID bigint, @GeneralNotificationTemplateID int = 14 ,      
    @ProcessDate datetime=NULL,@NotificationID int,      
    @EServiceBarcodeID bigint,@Barcode NULLDescription,@ECouponParticipationID bigint,@ErrorMessage Remark ,@NotificationSendID bigint        
           
    Select @NotificationID=NotificationID from coc_Notifications(nolock) where EServiceID=@EServiceID;    
    select top 1 @ExternalParticipationID=ExternalParticipationID,@ProcessDate=ProcessDate from coc_ECouponParticipationByExternalBarcode(nolock)     
    where ECouponID=@EcouponID and ConsumerID=@ConsumerID and EnteredBarcode=@EnteredBarcode    
        
 SELECT TOP 1 @EServiceBarcodeID=BC.EServiceBarcodeID,@Barcode=BC.Barcode FROM coc_EServiceBarcodes(NOLOCK) BC                                                          
     INNER JOIN coc_Notifications NT(NOLOCK) ON BC.NotificationID = NT.NotificationID AND NT.EServiceID =@EServiceID                                              
  WHERE BC.IsUsed = 0                                  
  INSERT INTO coc_ECouponParticipations(ECouponID,ParticipationDate,Barcode,ParticipationMobile,ParticipationEmailID,ConsumerID,GuestID,RetailOutletID,EnteredStandardBarcode)                                           
      SELECT @EcouponID,GETDATE(),@Barcode,@ParticipationMobile,@ParticipationEmailID,@ConsumerID,NULL,@RetailOutletID,@EnteredBarcode                      
  Set @ECouponParticipationID=SCOPE_IDENTITY()                   
  UPDATE coc_EServiceBarcodes SET AsignedMoile = @ParticipationMobile,AsignedEmailID=@ParticipationEmailID,IsUsed =1,UsedDate = GETDATE(),ConsumerID=@ConsumerID,GuestID=NULL where EServiceBarcodeID = @EServiceBarcodeID              
               
     EXEC SaveNotificationSending @NotificationID,@EcouponID,@ConsumerID,@GeneralNotificationTemplateID,@EServiceID,@Barcode,@ErrorMessage OUTPUT              
                                    
   SELECT top 1 @NotificationSendID=NotificationSendID from coc_NotificationSends(nolock) where NotificationID=@NotificationID                            
              
    insert into coc_NotificationSends(NotificationID,SendingDate,SendingType,SearchCount,NotificationCount)                        
         select @NotificationID, getdate(),4,0,0                                   
   SELECT @NotificationSendID=SCOPE_IDENTITY()                                 
   insert into coc_NotificationSendLanguages(NotificationSendID,LanguageID,Subject,Message)                       
        select  @NotificationSendID,1,'You have Successfully Participated in Competition, all the best to you',''                                
   insert into coc_NotificationSendLanguages(NotificationSendID,LanguageID,Subject,Message)                       
         select  @NotificationSendID,2,N'تمت المشاركة في المسابقة بنجاح، كل التوفيق لك.',N''               
            
   insert into coc_ConsumerNotifications(NotificationSendID,ConsumerID,SendDate,HasChecked,IsPushed,SendPushNotification)                        
             select @NotificationSendID,@ConsumerID,getdate(),0,0,1                    
            
   update coc_ECouponParticipationByExternalBarcode set ECouponParticipationID=@ECouponParticipationID,ParticipantStatus=2,ProcessDate=GETDATE(),Remarks='Success' where ExternalParticipationID=@ExternalParticipationID              
              
   update coc_EServiceExternalBarcodes set EServiceBarcodeID=@EServiceBarcodeID,ExternalParticipationID=@ECouponParticipationID where ExternalBarcode=@EnteredBarcode               
         and EServiceID=@EServiceID and (isnull(@CorporateID,0)=0 or CorporateID=@CorporateID)               
   and (isnull(@RetailOutletID,0)=0 or RetailoutletID=@RetailOutletID)              
   and isnull(EServiceBarcodeID,0)=0 and isnull(IsBlocked,0)=0 and isnull(IsUsed,0)=0 and isnull(ExternalParticipationID,0)=0      
       SET @ReturnMessage = ''--'You have Successfully Participated in Competition, all the best to you';--'ExternalBarcodeParticipationSuccess';            
       SET @ReturnStatus = 1;         
      
    end    --new       
   Else      
     begin      
       SET @ReturnMessage = 'Your transaction is under process. will get back to you after 24H.';--'ExternalBarcodeParticipationSuccess';            
       SET @ReturnStatus = 1;            
       INSERT INTO coc_ECouponParticipationByExternalBarcode(ECouponID,ParticipationDate,EnteredBarcode,ParticipationMobile,ParticipationEmailID            
       ,ConsumerID,RetailOutletID,ConsumerName,CorporateID,IsFromCompetitionLink,ParticipantStatus,Remarks)            
       SELECT @ECouponID,GETDATE(),@EnteredBarcode,@ParticipationMobile,@ParticipationEmailID            
       ,@ConsumerID,@RetailOutletID,@ConsumerName,@CorporateID,@IsFromCompetitionLink,1,@ReturnMessage;-- status 1 success         
  end      
        
  end--save valid barcode end            
            
            
     END -- check prefix and length of entered barcode END            
            
  ELSE -- PREFIX NOT MATCH START            
    BEGIN            
            
    SET @ReturnMessage = 'Your barcode that you entered or scanned is incorrect.';--'ExternalBarcodeInvalidPrefixOrNumberOfDigits';            
    SET @ReturnStatus = 0;            
    INSERT INTO coc_ECouponParticipationByExternalBarcode(ECouponID,ParticipationDate,EnteredBarcode,ParticipationMobile,ParticipationEmailID            
       ,ConsumerID,RetailOutletID,ConsumerName,CorporateID,IsFromCompetitionLink,ParticipantStatus,Remarks)            
       SELECT @ECouponID,GETDATE(),@EnteredBarcode,@ParticipationMobile,@ParticipationEmailID            
       ,@ConsumerID,@RetailOutletID,@ConsumerName,@CorporateID,@IsFromCompetitionLink,4,@ReturnMessage; --status prefix or number of digits wrong            
                
                
    END  -- PREFIX NOT MATCH END            
            
            
            
   END -- allow ExternalBarcode END            
    Commit TRANSACTION savebarcode             
   END TRY            
            
   BEGIN CATCH            
      rollback TRANSACTION savebarcode      
   SET @ReturnMessage = ERROR_MESSAGE();                 
   SET @ReturnStatus = 0;            
            
   END CATCH            
            
            
            
END            
             
              
            
GO
/****** Object:  StoredProcedure [dbo].[Usp_Core_GenerateUserToken]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Usp_Core_GenerateUserToken] 
@CRNumber NVARCHAR(20),
@Token nvarchar(500) = null out    
AS              
 SET NOCOUNT ON              
 BEGIN  
  --declare @min_integer int =1,@max_integer int =  10000000
  --Set @Token= floor(rand()*(@max_integer - @min_integer + 1) + @min_integer)
  Set @Token= LEFT(CAST(RAND()*1000000000 AS INT),6)
  declare @UserID int
  SELECT TOP (1)   
            @UserID=US.UserID  
         FROM [coc_Users] US(NOLOCK)          
         LEFT JOIN [coc_Corporates] CR(NOLOCK) ON CR.UserID = US.UserID          
         LEFT JOIN [coc_CorporateUsers] CE(NOLOCK) ON CE.UserID = US.UserID          
         WHERE CR.CRNumber = @CRNumber AND US.IsActive=1 and US.IsDeleted = 0   
  update coc_Users set UserToken=@Token where UserID=@UserID
END    
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_core_GetAllCompetitionPayments]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_GetAllCompetitionPayments]     
 @CompetitionStagingID  bigint          
,@Vat int                 =15                   
,@UserID INTEGER                 =null        
,@LanguageID int                 =1        
,@RoleID bigint                  =null        
,@ImpersonationUserID bigint     =null        
,@SpResponseStatus int            out        
,@SpResponseMessage nvarchar(max) out        
,@SpErrorDetails nvarchar(max)    out        
AS        
 SET NOCOUNT ON        
 BEGIN TRY        
 BEGIN   
  declare @VatPercentage decimal(10,2);
select top 1 @VatPercentage=SetupValue from [dbo].[COC_SystemSetups] where SetupKey='VatPercentage'
  set @VatPercentage=cast(@VatPercentage/100 as decimal(10,2))


   select CP.CompetitionPaymentID   
	,CP.CompetitionStagingID 
	,CP.PaymentDate 
	,(select ResourceValue from coc_competition_staging_languages(nolock) where CompetitionStagingID=@CompetitionStagingID and ResourceKey='ContestName' and languageid=@LanguageID) as ContestName 
	,convert(varchar, CP.PaymentDate, 103) as PaymentDate  
	, (case when @LanguageID=1 
        then 
		(select CurrencySymbol_EN from [dbo].[coc_Currency] (NOLOCK) where CurrencyId=(select BaseCurrencyId from [dbo].[coc_Settings](NOLOCK)))
		else
		(select CurrencySymbol_AR from [dbo].[coc_Currency](NOLOCK) where CurrencyId=(select BaseCurrencyId from [dbo].[coc_Settings](NOLOCK)))
		end
		) as CurrencySymbol
	,PaidAmount
	,(select sum(amount)   from Coc_Pricing_log (NOLOCK) where guid= CS.guid) as InvoiceAmount 
    ,(select sum(amount) *@VatPercentage from Coc_Pricing_log(NOLOCK) where guid= CS.guid) as VatAmount
	,CP.CreatedBy
	,CP.CreatedDate 
	,CP.PaymentReceipt
  FROM coc_CompetitionPayment(NOLOCK)CP 
 inner join coc_competition_staging(nolock) CS on CS.CompetitionStagingID=CP.CompetitionStagingID
 where CP.CompetitionStagingID=  @CompetitionStagingID
 END        
      
 Set @SpResponseStatus=1;        
 Set @SpResponseMessage='Success';        
 Set @SpErrorDetails='Success';        
 END TRY        
 BEGIN CATCH        
        
 Set @SpResponseStatus=0;        
 Set @SpResponseMessage='GenericError';        
 Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';       

 END CATCH        
 SET NOCOUNT OFF
 

GO
/****** Object:  StoredProcedure [dbo].[usp_core_GetAllDynamiclinkByCompetition]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[usp_core_GetAllDynamiclinkByCompetition]
@ECouponID bigint,
@LanguageID int = 1
AS
BEGIN
SELECT 
CD.DynamicLinkID,
CD.LinkName,
CD.ECouponID,
CD.RetailoutletID,
CD.BackgroundImage ,
CD.ModalPopupLogo,
CD.ModalContentBackgroundImage,
CD.CompetitionImage,
CS.CompetitionStagingID,
CRL.RetailOutlet,
CD.SocialMediaID,
(CASE WHEN @LanguageID = 1 THEN SM.SocialMediaName ELSE SM.SocialMediaNameAR END) AS SocialMediaName
FROM COC_CORE_DYNAMICLINKS(NOLOCK) CD
inner JOIN coc_competition_staging(NOLOCK) CS ON CS.CompetitionId = CD.EcouponID
LEFT JOIN coc_RetailOutletLanguages CRL(NOLOCK) ON CRL.RetailOutletID = CD.RetailoutletID and CRL.LanguageID = @LanguageID
LEFT JOIN coc_SocialMedia SM (NOLOCK) ON CD.SocialMediaID = SM.SocialMediaID
WHERE CD.EcouponID = @ECouponID
END
GO
/****** Object:  StoredProcedure [dbo].[usp_core_GetAllPurchaseBarcodeForAdmin]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_GetAllPurchaseBarcodeForAdmin]     
 @CorporateId INTEGER           =null         
,@UserID INTEGER                 =null      
,@LanguageID int                 =null      
,@RoleID bigint                  =null      
,@ImpersonationUserID bigint     =null      
,@SpResponseStatus int            out      
,@SpResponseMessage nvarchar(max) out      
,@SpErrorDetails nvarchar(max)    out      
AS      
 SET NOCOUNT ON      
 BEGIN TRY      
 BEGIN   
  SELECT BP.PurchaseNo
		,BP.CorporateId
		,BP.[Date]
		,BP.NoOfBarcodes
	    ,BP.TotalAmount
		,IsNull(BP.NoOfBarCodesApproved,0) as NoOfBarCodesApproved
		,BP.[Status]
  ,      bPP.BarcodePurcahsePaymentId      
  ,      bPP.BarcodePurchaseId    
  ,      bPP.PaymentReceipt     
  ,      bPP.UserId    
  ,      convert(varchar, bPP.PaymentDate, 103) as PaymentDate  
  ,      bPP.PaymentReceipt
  ,		 bPP.PaidAmount
   
  FROM coc_BarcodePurchase(NOLOCK) BP    
  inner join coc_BarcodePurchasePayment bPP (NOLOCK) on bPP.BarcodePurchaseId=BP.BarcodePurchaseId  
     
 END      
    
 Set @SpResponseStatus=1;      
 Set @SpResponseMessage='Success';      
 Set @SpErrorDetails='Success';      
 END TRY      
 BEGIN CATCH      
      
 Set @SpResponseStatus=0;      
 Set @SpResponseMessage='GenericError';      
 Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
      
 END CATCH      
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_core_GetAllPurchaseBarcodePayments]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_GetAllPurchaseBarcodePayments]       
 @BarcodePurchaseId INTEGER                   
,@UserID INTEGER                 =null        
,@LanguageID int                 =null        
,@RoleID bigint                  =null        
,@ImpersonationUserID bigint     =null        
,@SpResponseStatus int            out        
,@SpResponseMessage nvarchar(max) out        
,@SpErrorDetails nvarchar(max)    out        
AS        
 SET NOCOUNT ON        
 BEGIN TRY        
 BEGIN        
  SELECT bPP.BarcodePurcahsePaymentId        
  ,      bPP.BarcodePurchaseId      
  ,      bPP.PaymentReceipt       
  ,      bPP.UserId      
  ,      convert(varchar, bPP.PaymentDate, 103) as PaymentDate    
  ,      IsNull(bPP.NOfBarcodesApproved,0) as NoOfBarCodesApproved  
  ,      bPP.PaymentReceipt  
  ,   bPP.PaidAmount  
  ,(Select sum(PaidAmount) from coc_BarcodePurchasePayment(nolock) where BarcodePurchaseId=bp.BarcodePurchaseId and  Status!=5) AS TotalPaidAmount
  ,BP.Tax 
  ,BP.TotalAmount   
  ,bPP.RemainingAmount   
  ,BP.Amount  
  ,BP.[Status] as BarcodePurchaseStatus 
  ,bPP.[Status] as PurchasePaymentStatus
  FROM coc_BarcodePurchase(NOLOCK) BP      
  inner join coc_BarcodePurchasePayment bPP (NOLOCK) on bPP.BarcodePurchaseId=BP.BarcodePurchaseId    
  WHERE BP.BarcodePurchaseId=@BarcodePurchaseId       
 END        
      
 Set @SpResponseStatus=1;        
 Set @SpResponseMessage='Success';        
 Set @SpErrorDetails='Success';        
 END TRY        
 BEGIN CATCH        
        
 Set @SpResponseStatus=0;        
 Set @SpResponseMessage='GenericError';        
 Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';       


 END CATCH        
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_Core_GetCompetitionDetailsByBarcodeFilePrefix]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Narender Gorige>
-- Create date: <08-08-2021>
-- Description:	<Get competition details by barcode File Prefix>
-- =============================================
CREATE PROCEDURE [dbo].[USP_Core_GetCompetitionDetailsByBarcodeFilePrefix]  
	@BarcodeFilePrefix nvarchar(200)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    

Declare @UploadDataResponse table(
ECoponID int,
EserviceID int,
CorporateID bigint,
RetailOutletID bigint,
ServiceKey varchar(100),
CorporateName nvarchar(250),
CorporateEmailId varchar(250),
CRNumber varchar(100),
BarcodePreFix nvarchar(50),
BarcodeLength int
)

INSERT INTO @UploadDataResponse(EserviceID,ECoponID,CorporateID,RetailOutletID,ServiceKey,CorporateName,CorporateEmailId,CRNumber,BarcodePreFix,BarcodeLength) 
Select TOP 1 ES.EserviceID, EC.ECouponID,ES.CorporateID,null,SK.ServiceKey,CR.CorporateName,CR.EmailID,CR.CRNumber,ES.BarcodePrefix,ES.BarcodeLength from coc_EServiceLanguages ESL 
inner join coc_EServices ES on ES.eserviceId = ESL.EserviceId 
inner join coc_ECoupons EC on EC.EserviceID = ES.EserviceID
left join coc_ServiceKeys SK on SK.eserviceID = es.EServiceID
inner join coc_Corporates CR on CR.CorporateID = ES.CorporateID
where EC.BarcodeFilePrefix = @BarcodeFilePrefix and ESL.LanguageID=1


Select EserviceID,ECoponID,CorporateID,RetailOutletID,ServiceKey,CorporateName,CorporateEmailId,CRNumber,BarcodePreFix,BarcodeLength from @UploadDataResponse


END
GO
/****** Object:  StoredProcedure [dbo].[USP_Core_GetCompetitionDetailsByName]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<RM,Rafeeq>
-- Create date: <05-05-2021>
-- Description:	<Get External barcode upload competition name>
-- =============================================
CREATE PROCEDURE [dbo].[USP_Core_GetCompetitionDetailsByName]  
	@CompetitionName nvarchar(200)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    

Declare @UploadDataResponse table(
ECoponID int,
EserviceID int,
CorporateID bigint,
RetailOutletID bigint,
ServiceKey varchar(100),
CorporateName nvarchar(250),
CorporateEmailId varchar(250),
CRNumber varchar(100),
BarcodePreFix nvarchar(50),
BarcodeLength int
)

INSERT INTO @UploadDataResponse(EserviceID,ECoponID,CorporateID,RetailOutletID,ServiceKey,CorporateName,CorporateEmailId,CRNumber,BarcodePreFix,BarcodeLength) 
Select TOP 1 ES.EserviceID, EC.ECouponID,ES.CorporateID,null,SK.ServiceKey,CR.CorporateName,CR.EmailID,CR.CRNumber,ES.BarcodePrefix,ES.BarcodeLength from coc_EServiceLanguages ESL 
inner join coc_EServices ES on ES.eserviceId = ESL.EserviceId 
inner join coc_ECoupons EC on EC.EserviceID = ES.EserviceID
left join coc_ServiceKeys SK on SK.eserviceID = es.EServiceID
inner join coc_Corporates CR on CR.CorporateID = ES.CorporateID
where ESL.EService = @CompetitionName and ESL.LanguageID=1


Select EserviceID,ECoponID,CorporateID,RetailOutletID,ServiceKey,CorporateName,CorporateEmailId,CRNumber,BarcodePreFix,BarcodeLength from @UploadDataResponse


END
GO
/****** Object:  StoredProcedure [dbo].[Usp_core_GetCompetitionLinkDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================      
-- Author:  <Rafeeq Mohammad>      
-- Create date: <18-05-2020>      
-- Description: <Get competition link details by name>      
-- =============================================      
CREATE PROCEDURE [dbo].[Usp_core_GetCompetitionLinkDetails](       
 @LinkName nvarchar(200)      
 )      
AS      
BEGIN      
 -- SET NOCOUNT ON added to prevent extra result sets from      
 -- interfering with SELECT statements.      
 SET NOCOUNT ON;    
 
    SELECT TOP 1 DL.DynamicLinkID,DL.LinkName,DL.EcouponID,DL.RetailoutletID,DL.BackgroundImage,DL.ModalPopupLogo,
    DL.ModalContentBackgroundImage,DL.IsActive,DL.Style,DL.CompetitionImage,IsNull(DL.CompetitionType,1) CompetitionType,
    isnull(DL.AutoParticipation,0) AS AutoParticipation,SM.SocialMediaName,
    SM.SocialMediaNameAR, DL.SocialMediaID
    FROM Coc_Core_DynamicLinks DL (NOLOCK)    
    LEFT JOIN coc_SocialMedia SM (NOLOCK) ON DL.SocialMediaID = SM.SocialMediaID AND SM.IsActive = 1
    WHERE DL.LinkName = @LinkName AND DL.IsActive = 1 ORDER BY DL.DynamicLinkID DESC  
       
END
GO
/****** Object:  StoredProcedure [dbo].[usp_core_GetCompetitionPaymentById]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_GetCompetitionPaymentById]        
 @CompetitionStagingID bigint                      
,@UserID INTEGER                 =null            
,@LanguageID int                 =1    
,@Vat int                 =15             
,@RoleID bigint                  =null            
,@ImpersonationUserID bigint     =null            
,@SpResponseStatus int              out           
,@SpResponseMessage nvarchar(max)   out          
,@SpErrorDetails nvarchar(max)       out         
AS            
 SET NOCOUNT ON            
 BEGIN TRY            
 BEGIN  
 declare @VatPercentage decimal(18,2);
 select top 1 @VatPercentage=SetupValue from [dbo].[COC_SystemSetups] (NOLOCK) where SetupKey='VatPercentage'
 set @VatPercentage=cast(@VatPercentage/100 as decimal(10,2))
 -- select @VatPercentage
 if exists(select * FROM coc_CompetitionPayment (NOLOCK) where CompetitionStagingID=@CompetitionStagingID)  
 begin
  SELECT CS.CorporateID            
  ,      CS.CompetitionStagingID   
  --,     CP.CompetitionPaymentID   
  ,(select sum(PaidAmount) from coc_CompetitionPayment(nolock) where CompetitionStagingID=@CompetitionStagingID) as  TotalPaidAmount           
  ,(CASE WHEN  @LanguageID=1 then (select CurrencySymbol_EN 
     from    coc_Currency (NOLOCK) where CurrencyId =(select BaseCurrencyId from  coc_Settings(NOLOCK))) 
    else (select CurrencySymbol_AR from  coc_Currency (NOLOCK) where CurrencyId =(select BaseCurrencyId from  coc_Settings (NOLOCK))) end) as CurrencySymbol  
  ,(CASE WHEN  @LanguageID=1 then  C.CorporateName else C.CorporateNameAR end) as CorporateName
  ,(select ResourceValue from coc_competition_staging_languages(NOLOCK) where CompetitionStagingID=@CompetitionStagingID and ResourceKey='ContestName' and LanguageID=@LanguageID) as CompetitionName
  ,(select sum(amount)   from Coc_Pricing_log(NOLOCK) where guid= CS.guid) as InvoiceAmount 
  ,(select sum(amount) *@VatPercentage from Coc_Pricing_log (NOLOCK) where guid= CS.guid) as VatAmount
  ,C.FirstName
  ,C.MiddleName
  ,C.LastName
  ,C.EmailID 
  FROM coc_competition_staging(nolock) CS    
  --inner join coc_competition_staging(nolock) CS on CP.CompetitionStagingID=CS.CompetitionStagingID
  inner join coc_Corporates(nolock)   C on C.CorporateID=CS.CorporateId
  WHERE CS.CompetitionStagingID=@CompetitionStagingID            
  end
  else
  begin
   SELECT CS.CorporateID            
  ,      CS.CompetitionStagingID   
  ,0.00 as  TotalPaidAmount 
  ,(CASE WHEN  @LanguageID=1 then (select CurrencySymbol_EN 
     from    coc_Currency (NOLOCK) where CurrencyId =(select BaseCurrencyId from  coc_Settings(NOLOCK))) 
     else (select CurrencySymbol_AR from  coc_Currency (NOLOCK) where CurrencyId =(select BaseCurrencyId from  coc_Settings(NOLOCK))) end) as CurrencySymbol  
  ,(CASE WHEN  @LanguageID=1 then  C.CorporateName else C.CorporateNameAR end) as CorporateName
   ,(select ResourceValue from coc_competition_staging_languages(NOLOCK) where CompetitionStagingID=@CompetitionStagingID and ResourceKey='ContestName' and LanguageID=@LanguageID) as CompetitionName
  ,(select sum(amount)   from Coc_Pricing_log(NOLOCK) where guid= CS.guid) as InvoiceAmount 
  ,(select sum(amount) *@VatPercentage from Coc_Pricing_log (NOLOCK) where guid= CS.guid) as VatAmount
  ,C.FirstName
  ,C.MiddleName
  ,C.LastName
  ,C.EmailID 
  from coc_competition_staging(nolock) CS
  inner join coc_Corporates(nolock)   C on C.CorporateID=CS.CorporateId
  where  CS.CompetitionStagingID=@CompetitionStagingID
  end

    
 Set @SpResponseStatus=1;            
 Set @SpResponseMessage='Success';            
 Set @SpErrorDetails='Success';    
      
 END             
 END TRY            
 BEGIN CATCH     
 Set @SpResponseStatus=0;            
 Set @SpResponseMessage='GenericError';            
 Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';       




 END CATCH            
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_core_GetCompetitionResults]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_GetCompetitionResults]              
 @EServiceID INTEGER,                 
 @LanguageID INTEGER,                
 @DrawID INTEGER=0,                
 @DrawPrizeID INTEGER=0,                
 @UserId INTEGER,                
 @ReturnValue [Remark] OUTPUT,              
 @NumberOfWinners int = 1              
AS              
begin              
              
SET NOCOUNT ON              
 BEGIN TRY              
          
              
  DECLARE @EmailSubject [Remark]              
  DECLARE @EmailBody [Remark]              
  DECLARE @SMS [Remark]              
  DECLARE @Counter INTEGER              
  DECLARE @ECouponID INTEGER            
            
                
  DECLARE @CorporateID INTEGER              
              
  SELECT @CorporateID= CorporateID from coc_EServices (NOLOCK) where EServiceID=@EServiceID              
  SElECT @ECouponID = ECouponID FROM coc_ECoupons(NOLOCK) where EServiceID = @EServiceID            
  drop table if exists #ResultTable             
  IF OBJECT_ID('tempdb..#ResultTable') IS NULL            
 create table  #ResultTable             
 (            
  UniqueID INTEGER IDENTITY(1,1),              
  ECouponParticipationID bigint,              
  Barcode nvarchar(100),               
  ECouponID INTEGER,              
  EServiceID INTEGER,              
  ConsumerID INTEGER,              
  GuestID INTEGER,              
  ParticipationMobile varchar(15) ,              
  ParticipationEmailID varchar(100),              
  ConsumerName nvarchar(100),              
  CorporateID INTEGER,              
  MembershipNumber varchar(30),              
  EmailSubject NVARCHAR(1000),              
  EmailBody NVARCHAR(1000),              
  SMS NVARCHAR(1000),              
  TypeID TINYINT            
 )            
             
  DECLARE @SelectedWinnerData AS TABLE              
  (              
   UniqueID INTEGER ,              
   ECouponParticipationID bigint,              
   Barcode nvarchar(100),               
   ECouponID INTEGER,              
   EServiceID INTEGER,              
   ConsumerID INTEGER,              
   GuestID INTEGER,              
   ParticipationMobile [Mobile],              
   ParticipationEmailID [Email],              
   ConsumerName [NullName],              
   CorporateID INTEGER,              
   MembershipNumber [NullCode],              
   EmailSubject NVARCHAR(1000),              
   EmailBody NVARCHAR(1000),              
   SMS NVARCHAR(1000),              
   TypeID TINYINT              
  )              
  DECLARE @AllWinners AS TABLE              
  (              
   UniqueID INTEGER IDENTITY(1,1),              
   EcouponID INTEGER,              
   EServiceID INTEGER,              
   DeclaredDate DATETIME,              
   ECouponWinnerID INTEGER              
  )              
                
  DECLARE @WinnerList AS TABLE              
  (              
   ECouponID INTEGER,              
   WinnerName NullName,              
   PrizeType NullDescription,              
   PrizeHeader NullDescription,              
   PrizeDetail Remark,              
   ImageFile NullDescription,              
   EService Remark              
  )              
              
  --Check winners count for the draw is already done              
  DECLARE @winnersCount INTEGER              
              
  SELECT  @winnersCount = Count(*) FROM coc_ECouponWinners ew  (NOLOCK)            
  INNER JOIN coc_ECouponDrawPrizes edp (NOLOCK) ON edp.ECouponDrawPrizeID= ew.ECouponDrawPrizeID              
  WHERE edp.ECouponDrawPrizeID = @DrawPrizeID               
              
  DECLARE @frequency INTEGER              
                
  SELECT @frequency= Frequency FROM coc_ECouponDrawPrizes (NOLOCK) WHERE ECouponDrawPrizeID = @DrawPrizeID              
               
  PRINT @winnersCount              
  PRINT @frequency              
               
  IF(@winnersCount + @NumberOfWinners > @frequency)             
  BEGIN              
   SET @ReturnValue = '101'              
   SELECT UniqueID ,              
   ECouponID ,           
   EServiceID ,              
   ConsumerID ,              
   substring(ParticipationMobile,1,5)+ '*****'+ substring(ParticipationMobile,11,len(ParticipationMobile)) as ParticipationMobile ,              
   ParticipationEmailID ,              
   ConsumerName ,              
   CorporateID ,              
   MembershipNumber ,              
   EmailSubject ,              
   EmailBody ,              
   SMS ,              
   TypeID  FROM @SelectedWinnerData              
   return              
  END              
  IF(@NumberOfWinners > @frequency)              
  BEGIN              
   SET @ReturnValue = '102'              
   SELECT UniqueID ,              
   ECouponID ,              
   EServiceID ,              
   ConsumerID ,              
   substring(ParticipationMobile,1,5)+ '*****'+ substring(ParticipationMobile,11,len(ParticipationMobile)) as ParticipationMobile ,              
   ParticipationEmailID ,              
   ConsumerName ,              
   CorporateID ,              
   MembershipNumber ,              
   EmailSubject ,              
   EmailBody ,              
   SMS ,              
   TypeID FROM @SelectedWinnerData              
   return              
  END              
                
              
 BEGIN TRANSACTION TRN_GetCompetitionResults              
            
                
  --Check for case 1              
  DECLARE @retailOutletsCount INT              
  SELECT @retailOutletsCount = Count(*) FROM coc_ECouponDrawPrizes edr(NOLOCK) WHERE edr.ECouponDrawID = @DrawID and edr.ECouponPrizeID = @DrawPrizeID        
  --and edr.RetailOutletID = (select top 1 RetailOutletID from coc_ECouponDrawPrizes(NOLOCK) where ECouponPrizeID = @DrawPrizeID)           
                
  --- Get Participants and save to @ResultTable                  
  SELECT TOP 1 @EmailSubject=GT.TemplateTitle,@EmailBody=GT.Template               
   FROM coc_GeneralNotificationTemplates GN(NOLOCK)              
    INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID              
  WHERE TemplateTypeID=141 AND EmailUsage=1 AND LanguageID=@LanguageID              
                
                
  SELECT TOP 1 @SMS=GT.Template              
   FROM coc_GeneralNotificationTemplates GN(NOLOCK)              
    INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID              
  WHERE TemplateTypeID=141 AND SMSUsage=1 AND LanguageID=@LanguageID              
                
    drop table if exists #TempExclusionMobiles             
 IF OBJECT_ID('tempdb..#TempExclusionMobiles') IS NULL            
 create table  #TempExclusionMobiles             
 (            
  Mobile varchar(15)  not null,            
  ECouponID INTEGER            
 )            
            
    drop table if exists #TempExclusionEmails            
 IF OBJECT_ID('tempdb..#TempExclusionEmails') IS NULL             
 create table #TempExclusionEmails             
 (            
  EmailID varchar(100)  not null,            
  ECouponID INTEGER            
 )            
              
 delete from #TempExclusionMobiles where ECouponID= @ECouponID            
 delete from #TempExclusionEmails where ECouponID= @ECouponID            
            
 insert into #TempExclusionMobiles            
  SELECT PrimaryMobile, @ECouponID FROM coc_ConsumerExclusions(NOLOCK) CEx             
        WHERE ((CEx.ECouponID is NULL AND CEx.CorporateID is NULL)             
         OR (CEx.ECouponID = @ECouponID OR CEx.CorporateID = @CorporateID))            
         and ISNULL(PrimaryMobile,'') <> ''            
            
 insert into #TempExclusionMobiles            
  select P_EW.MobileNumber, @ECouponID from coc_ECouponWinners(NOLOCK) P_EW             
         INNER JOIN coc_ECouponDrawPrizes(NOLOCK) P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID            
         INNER JOIN coc_ECouponDraw(NOLOCK) P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID            
        where (P_ED.ECouponID = @ECouponID )            
         and ISNULL(P_EW.MobileNumber,'') <> ''            
              
 insert into #TempExclusionEmails            
  SELECT EmailID, @ECouponID FROM coc_ConsumerExclusions(NOLOCK) CEx             
        WHERE ((CEx.ECouponID is NULL AND CEx.CorporateID is NULL)             
         OR (CEx.ECouponID = @ECouponID OR CEx.CorporateID = @CorporateID))           
         and ISNULL(EmailID,'') <> ''            
            
 insert into #TempExclusionEmails            
  select P_EW.Email, @ECouponID from coc_ECouponWinners(NOLOCK) P_EW             
         INNER JOIN coc_ECouponDrawPrizes(NOLOCK) P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID            
         INNER JOIN coc_ECouponDraw(NOLOCK) P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID         
        where (P_ED.ECouponID = @ECouponID )            
         and ISNULL(P_EW.Email,'') <> ''            
           
-- from consumer table                
  INSERT INTO #ResultTable              
  SELECT  top 10000  EP.ECouponParticipationID, EP.Barcode, EC.ECouponID,EC.EServiceID,EP.ConsumerID, NULL as GuestID, ISNULL(EP.ParticipationMobile,CS.PrimaryMobile),              
    ISNULL(EP.ParticipationEmailID, CS.EmailID),ISNULL(EP.ConsumerName, ISNULL(CS.FirstName,'')+' '+ISNULL(CS.SecondName,'')+' '+ISNULL(CS.FamilyName,'')) ,ES.CorporateID,CS.MembershipNumber,              
   @EmailSubject,@EmailBody,@SMS,2              
   FROM coc_ECoupons EC(NOLOCK)              
    INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID              
    INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID              
    INNER JOIN coc_Consumers CS(NOLOCK) ON EP.ConsumerID=CS.ConsumerID     
 WHERE ES.EServiceID = @EServiceID              
  AND (@retailOutletsCount= 0         
  OR EP.RetailOutletID IN (Select CONVERT(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes edr (NOLOCK) WHERE  edr.ECouponDrawID = @DrawID and edr.ECouponPrizeID = @DrawPrizeID)              
  OR (EP.RetailOutletID is null and EC.AllowStandardBarcode = 1)--added for testing        
  )     order by RAND()           
  --AND (@retailOutletsCount= 0 OR EP.RetailOutletID IN (Select RetailOutletID FROM coc_ECouponDrawRetailOutlets edr WHERE  edr.ECoponDrawID = @DrawID and edr.RetailOutletID = (select top 1 RetailOutletID from coc_ECouponDrawPrizes where ECouponPrizeID = @DrawPrizeID)))              
                 
-- From Guest  Table (new)              
   INSERT INTO #ResultTable              
   SELECT top 10000 EP.ECouponParticipationID, EP.Barcode, EC.ECouponID,EC.EServiceID, Null as ConsumerID, EP.GuestID,ISNULL(EP.ParticipationMobile,GS.PrimaryMobile),              
    ISNULL(EP.ParticipationEmailID, GS.EmailID),ISNULL(EP.ConsumerName, GS.FullName) ,ES.CorporateID,NULL,              
   @EmailSubject,@EmailBody,@SMS,1              
   FROM coc_ECoupons EC(NOLOCK)              
    INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID  --AND ES.CorporateID=@CorporateID              
    INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID              
    INNER JOIN coc_Guests GS(NOLOCK) ON EP.GuestID=GS.GuestID              
  --WHERE CONVERT(VARCHAR(12),GETDATE(),106) >= CONVERT(VARCHAR(12),EC.ResultDate,106) AND EC.ResulltDeclared=0              
  WHERE ES.EServiceID = @EServiceID           
   AND (@retailOutletsCount= 0         
   OR EP.RetailOutletID IN (Select CONVERT(int,RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes edr (NOLOCK) WHERE  edr.ECouponDrawID = @DrawID and edr.ECouponPrizeID = @DrawPrizeID)        
   OR (EP.RetailOutletID is null and EC.AllowStandardBarcode = 1)--added for testing        
   )   order by RAND()              
            
              
if @EServiceID = 246 or isnull(@ECouponID,0) = 10184       
 DELETE FROM  #ResultTable where ParticipationMobile is null or  len(ParticipationMobile) < 10            
else            
 DELETE FROM  #ResultTable where ParticipationMobile is null or  len(ParticipationMobile) <> 14            
              
  DELETE FROM  #ResultTable where ConsumerName like '%?%' or ParticipationMobile like '%?%'              
  DELETE FROM  #ResultTable where ConsumerName like '%jjjj%'               
  DELETE FROM  #ResultTable where len(ConsumerName) <8         
  DELETE FROM  #ResultTable where ConsumerName like '%0%' or ConsumerName like '%1%' or ConsumerName like '%2%' or ConsumerName like '%3%' or ConsumerName like '%4%' or ConsumerName like '%5%' or ConsumerName like '%6%' or ConsumerName like '%7%' or ConsumerName like '%8%' or ConsumerName like '%9%'              
  DELETE FROM  #ResultTable where ParticipationMobile in (select Mobile from #TempExclusionMobiles)            
  DELETE FROM  #ResultTable where ParticipationEmailID in (select EmailID from #TempExclusionEmails)            
      
  /**Delete duplicate emails and mobile form #Result table***/    
  --DELETE n1 FROM #ResultTable n1, #ResultTable n2 WHERE n1.ECouponParticipationID > n2.ECouponParticipationID AND n1.ParticipationEmailID = n2.ParticipationEmailID     
  --DELETE n1 FROM #ResultTable n1, #ResultTable n2 WHERE n1.ECouponParticipationID > n2.ECouponParticipationID AND n1.ParticipationMobile = n2.ParticipationMobile     
  /**Delete duplicate emails and mobile form #Result table***/    
    
  DECLARE @participantsCount INT              
  DECLARE @winnersSelected int = 0              
  while @winnersSelected < @NumberOfWinners              
  begin              
                 
   SELECT @participantsCount = Count(*) FROM #ResultTable              
              
   DECLARE @Random INT;              
   DECLARE @Upper INT;              
   DECLARE @Lower INT              
              
   SET @Lower = 1 ---- The lowest random number              
   SET @Upper = @participantsCount ---- The highest random number              
   SELECT @Random = ROUND(((@Upper - @Lower -1) * RAND() + @Lower), 0)              
                
   declare @uniqueID integer              
   select @uniqueID = UniqueID from (              
    Select ROW_NUMBER() OVER (ORDER BY UniqueID asc) as RowNum,*              
    from #ResultTable              
   ) temp where RowNum = @Random              
                 
   INSERT INTO @SelectedWinnerData               
    select *  FROM #ResultTable where UniqueID= @uniqueID              
                  
   --DEC@ECouponDrawPrizeID INTEGER,              
   DECLARE @ConsumerID INTEGER = NULL              
   DECLARE @TypeID TINYINT = NULL              
   DECLARE @ConsumerName NVARCHAR(200)= NULL              
   DECLARE @Email NVARCHAR(200)= NULL              
   DECLARE @MembershipID NVARCHAR(20)= NULL              
   DECLARE @ParticipationMobile [Mobile]= NULL              
   DECLARE @GuestID INTEGER= NULL              
   DECLARE @ECouponParticipationID BIGINT= NULL              
                
   SELECT @ConsumerID = ConsumerID, @TypeID=TypeID, @ConsumerName = ConsumerName, @Email= ParticipationEmailID, @MembershipID=MembershipNumber,               
     @ParticipationMobile= ParticipationMobile, @GuestID = GuestID , @ECouponParticipationID = ECouponParticipationID               
    from @SelectedWinnerData              
    where UniqueID= @uniqueID              
              
              
   DECLARE @result [Remark]              
   print @ConsumerID              
   print @ConsumerName              
                  
   EXEC SaveResultDeclaration_New  @EServiceID, @UserId, @DrawPrizeID, @ConsumerID, @GuestID, @TypeID, @ECouponParticipationID, @ParticipationMobile, @ConsumerName, @Email, @MembershipID, @ReturnValue= @result OUTPUT              
                
   Print cast(@winnersSelected as varchar) + '-> '+ @result              
              
   IF(@result != '')              
   BEGIN              
    SET @ReturnValue = @result              
    print 'error saving'+ @result              
    break              
   END              
                 
   SELECT  @winnersCount = Count(*) FROM coc_ECouponWinners ew   (NOLOCK)           
    INNER JOIN coc_ECouponDrawPrizes edp (NOLOCK) ON edp.ECouponDrawPrizeID= ew.ECouponDrawPrizeID              
    WHERE edp.ECouponDrawPrizeID = @DrawPrizeID               
   IF(@winnersCount > @frequency)              
   BEGIN              
    print cast(@winnersCount as varchar)+ '>' + cast(@frequency as varchar)              
    SET @ReturnValue = '101'              
    print 'Exceeded frequency'              
    break              
   END              
   select @winnersSelected =  @winnersSelected + 1              
   DELETE FROM  #ResultTable where ConsumerID = @ConsumerID or GuestID = @GuestID or ParticipationMobile = @ParticipationMobile              
                 
  end              
          
  --Table[0] Winner               
  SELECT UniqueID ,              
   ECouponID ,              
   EServiceID ,              
   ConsumerID ,              
   substring(ParticipationMobile,1,5)+ '*****'+ substring(ParticipationMobile,11,len(ParticipationMobile)) as ParticipationMobile ,              
   ParticipationEmailID ,              
   ConsumerName ,              
   CorporateID ,              
   MembershipNumber ,              
   EmailSubject ,              
   EmailBody ,              
   SMS ,                 
   TypeID,Barcode  FROM @SelectedWinnerData              
              
  ----Tables[1]  Prize Details              
     SELECT edp.ECouponDrawPrizeID,ep.ECouponPrizeID, edp.Frequency,edp.ECouponDrawID, ep.ImageFile from coc_ECouponDrawPrizes edp (NOLOCK)              
   join coc_ECouponPrizes ep (NOLOCK) on edp.ECouponPrizeID= ep.ECouponPrizeID               
  WHERE edp.ECouponDrawPrizeID = @DrawPrizeID              
              
              
  -- Table[2] All winners for the draw              
  SELECT edp.ECouponDrawPrizeID,edp.ECouponDrawID,edp.ECouponPrizeID,ew.*               
   FROM coc_ECouponWinners ew (NOLOCK)              
    INNER JOIN coc_ECouponDrawPrizes edp (NOLOCK) ON edp.ECouponDrawPrizeID= ew.ECouponDrawPrizeID              
   WHERE edp.ECouponDrawID = @DrawID               
              
  --Table[3] Pending Prizes              
               
  SELECT ECouponDrawPrizeID,  edp.ECouponPrizeID, epl.Value [PrizeResourceValue]              
    FROM coc_ECouponDrawPrizes edp(NOLOCK)                 
     INNER JOIN coc_ECouponPrizes ep (NOLOCK) ON ep.ECouponPrizeID = edp.ECouponPrizeID              
     INNER JOIN coc_ECouponPrizesLanguages epl(NOLOCK) ON ep.ECouponPrizeID = epl.ECouponPrizeID  AND epl.LanguageID=@LanguageID AND epl.ResourceKey='Name'              
    WHERE edp.ECouponDrawID = @DrawID              
     AND Frequency> (SELECT Count(*) FROM coc_ECouponWinners ew (NOLOCK) WHERE ew.ECouponDrawPrizeID = edp.ECouponDrawPrizeID)              
  print @ReturnValue              
  if isnull(@ReturnValue,'') = ''              
  begin              
   print 'Commit'              
   commit TRANSACTION TRN_GetCompetitionResults              
  end              
  else              
  begin              
   print @ReturnValue              
   print ' rollback'              
              
   SELECT @ReturnValue=ERROR_MESSAGE()              
   ROLLBACK TRANSACTION TRN_GetCompetitionResults              
  END               
  END TRY              
  BEGIN CATCH               
   print 'catch- rollback'              
              
   SELECT @ReturnValue=ERROR_MESSAGE()              
   SELECT @ReturnValue ReturnValue              
   ROLLBACK TRANSACTION TRN_GetCompetitionResults              
  END CATCH              
 SET NOCOUNT OFF              
end 

-----------------------------------------------------------------------------------------------------------------------------------------------------


GO
/****** Object:  StoredProcedure [dbo].[usp_core_GetCompetitionResultsWithTempTable]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_GetCompetitionResultsWithTempTable]              
 @EServiceID INTEGER,                 
 @LanguageID INTEGER,                
 @DrawID INTEGER=0,                
 @DrawPrizeID INTEGER=0,                
 @UserId INTEGER,                
 @ReturnValue [Remark] OUTPUT,              
 @NumberOfWinners int = 1              
AS              
begin              
              
SET NOCOUNT ON              
 BEGIN TRY              
          
              
  DECLARE @EmailSubject [Remark]              
  DECLARE @EmailBody [Remark]              
  DECLARE @SMS [Remark]              
  DECLARE @Counter INTEGER              
  DECLARE @ECouponID INTEGER            
            
                
  DECLARE @CorporateID INTEGER              
              
  SELECT @CorporateID= CorporateID from coc_EServices (NOLOCK) where EServiceID=@EServiceID              
  SElECT @ECouponID = ECouponID FROM coc_ECoupons(NOLOCK) where EServiceID = @EServiceID            
  drop table if exists #ResultTable             
  IF OBJECT_ID('tempdb..#ResultTable') IS NULL            
 create table  #ResultTable             
 (            
  UniqueID INTEGER IDENTITY(1,1),              
  ECouponParticipationID bigint,              
  Barcode nvarchar(100),               
  ECouponID INTEGER,              
  EServiceID INTEGER,              
  ConsumerID INTEGER,              
  GuestID INTEGER,              
  ParticipationMobile varchar(15) ,              
  ParticipationEmailID varchar(100),              
  ConsumerName nvarchar(100),              
  CorporateID INTEGER,              
  MembershipNumber varchar(30),              
  EmailSubject NVARCHAR(1000),              
  EmailBody NVARCHAR(1000),              
  SMS NVARCHAR(1000),              
  TypeID TINYINT            
 )            
             
  DECLARE @SelectedWinnerData AS TABLE              
  (              
   UniqueID INTEGER ,              
   ECouponParticipationID bigint,              
   Barcode nvarchar(100),               
   ECouponID INTEGER,              
   EServiceID INTEGER,              
   ConsumerID INTEGER,              
   GuestID INTEGER,              
   ParticipationMobile [Mobile],              
   ParticipationEmailID [Email],              
   ConsumerName [NullName],              
   CorporateID INTEGER,              
   MembershipNumber [NullCode],              
   EmailSubject NVARCHAR(1000),              
   EmailBody NVARCHAR(1000),              
   SMS NVARCHAR(1000),              
   TypeID TINYINT              
  )              
  DECLARE @AllWinners AS TABLE              
  (              
   UniqueID INTEGER IDENTITY(1,1),              
   EcouponID INTEGER,              
   EServiceID INTEGER,              
   DeclaredDate DATETIME,              
   ECouponWinnerID INTEGER              
  )              
                
  DECLARE @WinnerList AS TABLE              
  (              
   ECouponID INTEGER,              
   WinnerName NullName,              
   PrizeType NullDescription,              
   PrizeHeader NullDescription,              
   PrizeDetail Remark,              
   ImageFile NullDescription,              
   EService Remark              
  )              
              
  --Check winners count for the draw is already done              
  DECLARE @winnersCount INTEGER              
              
  SELECT  @winnersCount = Count(*) FROM coc_ECouponWinners ew  (NOLOCK)            
  INNER JOIN coc_ECouponDrawPrizes edp (NOLOCK) ON edp.ECouponDrawPrizeID= ew.ECouponDrawPrizeID              
  WHERE edp.ECouponDrawPrizeID = @DrawPrizeID               
              
  DECLARE @frequency INTEGER              
                
  SELECT @frequency= Frequency FROM coc_ECouponDrawPrizes (NOLOCK) WHERE ECouponDrawPrizeID = @DrawPrizeID              
               
  PRINT @winnersCount              
  PRINT @frequency              
               
  IF(@winnersCount + @NumberOfWinners > @frequency)             
  BEGIN              
   SET @ReturnValue = '101'              
   SELECT UniqueID ,              
   ECouponID ,              
   EServiceID ,              
   ConsumerID ,              
   substring(ParticipationMobile,1,5)+ '*****'+ substring(ParticipationMobile,11,len(ParticipationMobile)) as ParticipationMobile ,              
   ParticipationEmailID ,              
   ConsumerName ,              
   CorporateID ,              
   MembershipNumber ,              
   EmailSubject ,              
   EmailBody ,              
   SMS ,              
   TypeID  FROM @SelectedWinnerData              
   return              
  END              
  IF(@NumberOfWinners > @frequency)              
  BEGIN              
   SET @ReturnValue = '102'              
   SELECT UniqueID ,              
   ECouponID ,              
   EServiceID ,              
   ConsumerID ,              
   substring(ParticipationMobile,1,5)+ '*****'+ substring(ParticipationMobile,11,len(ParticipationMobile)) as ParticipationMobile ,              
   ParticipationEmailID ,              
   ConsumerName ,              
   CorporateID ,              
   MembershipNumber ,              
   EmailSubject ,              
   EmailBody ,              
   SMS ,              
   TypeID FROM @SelectedWinnerData              
   return              
  END              
                
              
 BEGIN TRANSACTION TRN_GetCompetitionResults              
            
                
  --Check for case 1              
  DECLARE @retailOutletsCount INT              
  --SELECT @retailOutletsCount = Count(*) FROM coc_ECouponDrawRetailOutlets edr(NOLOCK) WHERE edr.ECoponDrawID = @DrawID           
  --and edr.RetailOutletID = (select top 1 RetailOutletID from coc_ECouponDrawPrizes(NOLOCK) where ECouponPrizeID = @DrawPrizeID)             

  Select @retailOutletsCount = count(*) FROM coc_ECouponDrawPrizes edr (NOLOCK) 
  WHERE  edr.ECouponDrawID = @DrawID and edr.ECouponDrawPrizeID = @DrawPrizeID

                
  --- Get Participants and save to @ResultTable                  
  SELECT TOP 1 @EmailSubject=GT.TemplateTitle,@EmailBody=GT.Template               
   FROM coc_GeneralNotificationTemplates GN(NOLOCK)              
    INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID              
  WHERE TemplateTypeID=141 AND EmailUsage=1 AND LanguageID=@LanguageID              
                
                
  SELECT TOP 1 @SMS=GT.Template              
   FROM coc_GeneralNotificationTemplates GN(NOLOCK)              
    INNER JOIN coc_GeneralNotificationTemplateLanguages GT(NOLOCK) ON GN.GeneralNotificationTemplateID=GT.GeneralNotificationTemplateID              
  WHERE TemplateTypeID=141 AND SMSUsage=1 AND LanguageID=@LanguageID              
                
    drop table if exists #TempExclusionMobiles             
 IF OBJECT_ID('tempdb..#TempExclusionMobiles') IS NULL            
 create table  #TempExclusionMobiles             
 (            
  Mobile varchar(15)  not null,            
  ECouponID INTEGER            
 )            
            
    drop table if exists #TempExclusionEmails            
 IF OBJECT_ID('tempdb..#TempExclusionEmails') IS NULL             
 create table #TempExclusionEmails             
 (            
  EmailID varchar(100)  not null,            
  ECouponID INTEGER            
 )            
              
 delete from #TempExclusionMobiles where ECouponID= @ECouponID            
 delete from #TempExclusionEmails where ECouponID= @ECouponID            
            
 insert into #TempExclusionMobiles            
  SELECT PrimaryMobile, @ECouponID FROM coc_ConsumerExclusions(NOLOCK) CEx             
        WHERE ((CEx.ECouponID is NULL AND CEx.CorporateID is NULL)             
         OR (CEx.ECouponID = @ECouponID OR CEx.CorporateID = @CorporateID))            
         and ISNULL(PrimaryMobile,'') <> ''            
            
 insert into #TempExclusionMobiles            
  select P_EW.MobileNumber, @ECouponID from coc_ECouponWinners(NOLOCK) P_EW             
         INNER JOIN coc_ECouponDrawPrizes(NOLOCK) P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID            
         INNER JOIN coc_ECouponDraw(NOLOCK) P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID            
        where (P_ED.ECouponID = @ECouponID )            
         and ISNULL(P_EW.MobileNumber,'') <> ''            
              
 insert into #TempExclusionEmails            
  SELECT EmailID, @ECouponID FROM coc_ConsumerExclusions(NOLOCK) CEx             
        WHERE ((CEx.ECouponID is NULL AND CEx.CorporateID is NULL)             
         OR (CEx.ECouponID = @ECouponID OR CEx.CorporateID = @CorporateID))           
         and ISNULL(EmailID,'') <> ''            
            
 insert into #TempExclusionEmails            
  select P_EW.Email, @ECouponID from coc_ECouponWinners(NOLOCK) P_EW             
         INNER JOIN coc_ECouponDrawPrizes(NOLOCK) P_EDP ON P_EDP.ECouponDrawPrizeID= P_EW.ECouponDrawPrizeID            
         INNER JOIN coc_ECouponDraw(NOLOCK) P_ED ON P_ED.ECouponDrawID= P_EDP.ECouponDrawID         
        where (P_ED.ECouponID = @ECouponID )            
         and ISNULL(P_EW.Email,'') <> ''     
     
 DECLARE @RetailOutletTemp Table (RetailOutletID int)   
 insert into @RetailOutletTemp  
Select CONVERT(int,edr.RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes edr (NOLOCK) WHERE  edr.ECouponDrawID = @DrawID and edr.ECouponDrawPrizeID = @DrawPrizeID  
-- from temp table                
 INSERT INTO #ResultTable              
  SELECT  top 10000  EP.ECouponParticipationID, EP.Barcode, EP.ECouponID,EP.EServiceID,EP.ConsumerID, EP.GuestID, EP.ParticipationMobile,              
    EP.ParticipationEmailID,EP.ConsumerName ,EP.CorporateID,EP.MembershipNumber,@EmailSubject,@EmailBody,@SMS,2              
   FROM [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations](nolock) EP              
    INNER JOIN coc_Consumers CS(NOLOCK) ON EP.ConsumerID=CS.ConsumerID    
 WHERE EP.EServiceID = @EServiceID   
  -- AND (EP.IsFromCompetitionLink=1 OR (EP.IsFromCompetitionLink=0 and ISNULL(cs.IsMobileVerified,0)=1 AND ISNULL(CS.IsEmailVerified,0)=1))  
  AND (@retailOutletsCount= 0   
  OR EP.RetailOutletID IN (Select RetailOutletID FROM @RetailOutletTemp)        
  OR (EP.RetailOutletID is null and EP.AllowStandardBarcode = 1)--added for testing        
  )     order by Rand()   
    
INSERT INTO #ResultTable              
  SELECT  top 10000  EP.ECouponParticipationID, EP.Barcode, EP.ECouponID,EP.EServiceID,EP.ConsumerID, EP.GuestID, EP.ParticipationMobile,              
    EP.ParticipationEmailID,EP.ConsumerName ,EP.CorporateID,EP.MembershipNumber,@EmailSubject,@EmailBody,@SMS,1              
   FROM [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations](nolock) EP              
    INNER JOIN coc_Guests GS(NOLOCK) ON EP.GuestID=GS.GuestID     
 WHERE EP.EServiceID = @EServiceID              
  AND (@retailOutletsCount= 0    
  OR EP.RetailOutletID IN (Select RetailOutletID FROM @RetailOutletTemp)        
  OR (EP.RetailOutletID is null and EP.AllowStandardBarcode = 1)--added for testing        
  )     order by Rand()    
              
if @EServiceID = 246 or isnull(@ECouponID,0) = 10184            
 DELETE FROM  #ResultTable where ParticipationMobile is null or  len(ParticipationMobile) < 10            
else            
 DELETE FROM  #ResultTable where ParticipationMobile is null or  len(ParticipationMobile) <> 14            
              
  DELETE FROM  #ResultTable where ConsumerName like '%?%' or ParticipationMobile like '%?%'              
  DELETE FROM  #ResultTable where ConsumerName like '%jjjj%'               
  DELETE FROM  #ResultTable where len(ConsumerName) <8         
  DELETE FROM  #ResultTable where ConsumerName like '%0%' or ConsumerName like '%1%' or ConsumerName like '%2%' or ConsumerName like '%3%' or ConsumerName like '%4%' or ConsumerName like '%5%' or ConsumerName like '%6%' or ConsumerName like '%7%' or ConsumerName like '%8%' or ConsumerName like '%9%'              
  DELETE FROM  #ResultTable where ParticipationMobile in (select Mobile from #TempExclusionMobiles)            
  DELETE FROM  #ResultTable where ParticipationEmailID in (select EmailID from #TempExclusionEmails)            
      
  /**Delete duplicate emails and mobile form #Result table***/    
  --DELETE n1 FROM #ResultTable n1, #ResultTable n2 WHERE n1.ECouponParticipationID > n2.ECouponParticipationID AND n1.ParticipationEmailID = n2.ParticipationEmailID     
  --DELETE n1 FROM #ResultTable n1, #ResultTable n2 WHERE n1.ECouponParticipationID > n2.ECouponParticipationID AND n1.ParticipationMobile = n2.ParticipationMobile     
  /**Delete duplicate emails and mobile form #Result table***/    
    
  DECLARE @participantsCount INT              
  DECLARE @winnersSelected int = 0              
  while @winnersSelected < @NumberOfWinners              
  begin              
             
   SELECT @participantsCount = Count(*) FROM #ResultTable              
              
   DECLARE @Random INT;              
   DECLARE @Upper INT;              
   DECLARE @Lower INT              
              
   SET @Lower = 1 ---- The lowest random number              
   SET @Upper = @participantsCount ---- The highest random number              
   SELECT @Random = ROUND(((@Upper - @Lower -1) * RAND() + @Lower), 0)              
                
   declare @uniqueID integer=NULL              
   select @uniqueID = UniqueID from (              
    Select ROW_NUMBER() OVER (ORDER BY UniqueID asc) as RowNum,*              
    from #ResultTable              
   ) temp where RowNum = @Random              
                 
   INSERT INTO @SelectedWinnerData               
    select *  FROM #ResultTable where UniqueID= @uniqueID              
                  
   --DEC@ECouponDrawPrizeID INTEGER,              
   DECLARE @ConsumerID INTEGER = NULL              
   DECLARE @TypeID TINYINT = NULL              
   DECLARE @ConsumerName NVARCHAR(200)= NULL              
   DECLARE @Email NVARCHAR(200)= NULL              
   DECLARE @MembershipID NVARCHAR(20)= NULL              
   DECLARE @ParticipationMobile [Mobile]= NULL              
   DECLARE @GuestID INTEGER= NULL              
   DECLARE @ECouponParticipationID BIGINT= NULL              
                
   SELECT @ConsumerID = ConsumerID, @TypeID=TypeID, @ConsumerName = ConsumerName, @Email= ParticipationEmailID, @MembershipID=MembershipNumber,               
     @ParticipationMobile= ParticipationMobile, @GuestID = GuestID , @ECouponParticipationID = ECouponParticipationID               
    from @SelectedWinnerData  where UniqueID= @uniqueID              
              
              
   DECLARE @result [Remark]              
   print @ConsumerID              
   print @ConsumerName              
                  
   EXEC SaveResultDeclaration_New  @EServiceID, @UserId, @DrawPrizeID, @ConsumerID, @GuestID, @TypeID, @ECouponParticipationID, @ParticipationMobile, @ConsumerName, @Email, @MembershipID, @ReturnValue= @result OUTPUT              
   if(isnull(@Email,'')<>'')
     Delete from #ResultTable where ParticipationEmailID=@Email 
   if(isnull(@ParticipationMobile,'')<>'')
     Delete from #ResultTable where ParticipationMobile=@ParticipationMobile         
   Print cast(@winnersSelected as varchar) + '-> '+ @result              
              
   IF(@result != '')              
   BEGIN              
    SET @ReturnValue = @result              
    print 'error saving'+ @result              
    break              
   END              
                 
   SELECT  @winnersCount = Count(*) FROM coc_ECouponWinners ew   (NOLOCK)           
    INNER JOIN coc_ECouponDrawPrizes edp (NOLOCK) ON edp.ECouponDrawPrizeID= ew.ECouponDrawPrizeID              
    WHERE edp.ECouponDrawPrizeID = @DrawPrizeID    
	
   IF(@winnersCount > @frequency)              
   BEGIN              
    print cast(@winnersCount as varchar)+ '>' + cast(@frequency as varchar)              
    SET @ReturnValue = '101'              
    print 'Exceeded frequency'              
    break              
   END              
   select @winnersSelected =  @winnersSelected + 1              
   if(isnull(@ConsumerID,0)<>0)
     Delete from #ResultTable where ConsumerID=@ConsumerID 
   if(isnull(@GuestID,0)<>0)
     Delete from #ResultTable where GuestID=@GuestID  
   if(isnull(@Email,'')<>'')
     Delete from #ResultTable where ParticipationEmailID=@Email 
   if(isnull(@ParticipationMobile,'')<>'')
     Delete from #ResultTable where ParticipationMobile=@ParticipationMobile  
                 
  end              
          
  --Table[0] Winner               
  SELECT UniqueID ,        
   ECouponID ,              
   EServiceID ,              
   ConsumerID ,              
   substring(ParticipationMobile,1,5)+ '*****'+ substring(ParticipationMobile,11,len(ParticipationMobile)) as ParticipationMobile ,              
   ParticipationEmailID ,              
   ConsumerName ,              
   CorporateID ,              
   MembershipNumber ,              
   EmailSubject ,              
   EmailBody ,              
   SMS ,                 
   TypeID,Barcode  FROM @SelectedWinnerData              
              
  ----Tables[1]  Prize Details              
     SELECT edp.ECouponDrawPrizeID,ep.ECouponPrizeID, edp.Frequency,edp.ECouponDrawID, ep.ImageFile from coc_ECouponDrawPrizes edp (NOLOCK)              
   join coc_ECouponPrizes ep (NOLOCK) on edp.ECouponPrizeID= ep.ECouponPrizeID               
  WHERE edp.ECouponDrawPrizeID = @DrawPrizeID              
              
              
  -- Table[2] All winners for the draw              
  SELECT edp.ECouponDrawPrizeID,edp.ECouponDrawID,edp.ECouponPrizeID,ew.*               
   FROM coc_ECouponWinners ew (NOLOCK)              
    INNER JOIN coc_ECouponDrawPrizes edp (NOLOCK) ON edp.ECouponDrawPrizeID= ew.ECouponDrawPrizeID              
   WHERE edp.ECouponDrawID = @DrawID               
              
  --Table[3] Pending Prizes              
               
  SELECT ECouponDrawPrizeID,  edp.ECouponPrizeID, epl.Value [PrizeResourceValue]              
    FROM coc_ECouponDrawPrizes edp(NOLOCK)                 
     INNER JOIN coc_ECouponPrizes ep (NOLOCK) ON ep.ECouponPrizeID = edp.ECouponPrizeID              
     INNER JOIN coc_ECouponPrizesLanguages epl(NOLOCK) ON ep.ECouponPrizeID = epl.ECouponPrizeID  AND epl.LanguageID=@LanguageID AND epl.ResourceKey='Name'              
    WHERE edp.ECouponDrawID = @DrawID              
     AND Frequency> (SELECT Count(*) FROM coc_ECouponWinners ew (NOLOCK) WHERE ew.ECouponDrawPrizeID = edp.ECouponDrawPrizeID)              
  print @ReturnValue              
  if isnull(@ReturnValue,'') = ''              
  begin              
   print 'Commit'              
   commit TRANSACTION TRN_GetCompetitionResults              
  end              
  else              
  begin              
   print @ReturnValue              
   print ' rollback'              
              
   SELECT @ReturnValue=ERROR_MESSAGE()              
   ROLLBACK TRANSACTION TRN_GetCompetitionResults              
  END               
  END TRY              
  BEGIN CATCH               
   print 'catch- rollback'              
              
   SELECT @ReturnValue=ERROR_MESSAGE()              
   SELECT @ReturnValue ReturnValue              
   ROLLBACK TRANSACTION TRN_GetCompetitionResults              
  END CATCH              
 SET NOCOUNT OFF              
end  


--------------------------------------------------------------------------------------------------------------------------------------------------------



GO
/****** Object:  StoredProcedure [dbo].[usp_core_GetConsumerProfile]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================        
-- Author:  Rafeeq Mohammad        
-- Create date: 15 November 2020        
-- Description: Get Consumer Profile       
-- =============================================        
CREATE PROCEDURE [dbo].[usp_core_GetConsumerProfile]      
 @SearchKey nvarchar(100) = null,       
 @ConsumerId int = null,        
 @LanguageID INTEGER = 1,        
 @RoleID INTEGER = null,        
 @UserID bigint = null,        
 @ImpersonationUserID bigint=null,        
 @SpResponseStatus int = null out,        
 @SpResponseMessage nvarchar(max) = null out,        
 @SpErrorDetails nvarchar(max) = null out        
AS        
BEGIN        
SET NOCOUNT ON;        
 Begin Try          
  Set @SpResponseStatus=1;             
  Set @SpResponseMessage='Success';            
  Set @SpErrorDetails='Success';        
      
  SELECT cc.ConsumerId ConsumerID,cc.UserId UserID, coalesce(cc.FullName,cc.FirstName) FullName      
  ,IsNull(cc.Gender,0) Gender,cc.BirthDate,cc.PrimaryMobile,cc.EmailId EmailID,IsNull(cc.IsEmailVerified,0)IsEmailVerified,IsNull(cc.IsMobileVerified,0)IsMobileVerified      
  ,cc.CityId , cc.CountryId, cc.ImageFile,cc.IsVerified,cc.IsActive,cc.IsDeleted      
  ,cc.NationalityId,cc.MembershipNumber,cc.IsFromCompetitionLink,cc.UserIdentityTypeId,cc.UserIdentityNumber      
  ,cc.AddDate RegisteredDate      
  ,(case when cc.IsActive = 0 then 2 else cc.StatusID end) ConsumerStatus    
  ,cl.Country as CountryName
  ,ct.City as CityName
  ,(case when cc.BirthDate is null then '' else CONVERT(int,ROUND(DATEDIFF(hour,cc.BirthDate,GETDATE())/8766.0,0)) end) ConsumerAge
  ,(case when @LanguageID = 1 then cuit.UserIdentityName_EN else cuit.UserIdentityName_AR end) IdentityType
  from coc_consumers(nolock) cc 
  left join coc_CountryLanguages cl on cl.CountryID = cc.CountryID and cl.LanguageID = @LanguageID
  left join coc_CityLanguages ct on ct.CityID = cc.CityID and ct.LanguageID = @LanguageID
  left join coc_core_UserIdentityTypes cuit on cuit.UserIdentityTypeID = cc.UserIdentityTypeID
  where cc.EmailID LIKE '%'+LTRIM(RTRIM(@SearchKey))+'%'  or cc.PrimaryMobile like '%'+LTRIM(RTRIM(@SearchKey))+'%'       
  or cc.MembershipNumber  like '%'+LTRIM(RTRIM(@SearchKey))+'%'  or cc.UserIdentityNumber like '%'+LTRIM(RTRIM(@SearchKey))+'%'     
  or cc.FullName  like '%'+LTRIM(RTRIM(@SearchKey))+'%' or cc.FirstName  like '%'+LTRIM(RTRIM(@SearchKey))+'%'  or (cc.ConsumerID = @ConsumerId )    
  order by cc.IsActive desc  
            
END TRY                        
  BEGIN CATCH              
  Set @SpResponseStatus=0;             
  Set @SpResponseMessage='GenericError';            
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
  END CATCH                        
 END        
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_core_GetConsumerStatusList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- Author:  Rafeeq Mohammad    
-- Create date: 15 November 2020    
-- Description: Get Consumer Status List  
-- =============================================    
CREATE PROCEDURE [dbo].[usp_core_GetConsumerStatusList] 
 @LanguageID INTEGER = 1,    
 @RoleID INTEGER = null,    
 @UserID bigint = null,    
 @ImpersonationUserID bigint=null,    
 @SpResponseStatus int = null out,    
 @SpResponseMessage nvarchar(max) = null out,    
 @SpErrorDetails nvarchar(max) = null out    
AS    
BEGIN    
SET NOCOUNT ON;    
 Begin Try      
  Set @SpResponseStatus=1;         
  Set @SpResponseMessage='Success';        
  Set @SpErrorDetails='Success';    
  SELECT ConsumerStatusID
		,(case when @LanguageID = 1 then StatusEnglish else StatusArabic end)StatusText 		
		,[Type]
  FROM [eCoponTest2020February5].[dbo].[coc_Core_ConsumerStatus]
        
END TRY                    
  BEGIN CATCH          
  Set @SpResponseStatus=0;         
  Set @SpResponseMessage='GenericError';        
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
  
  END CATCH                    
 END    
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Usp_Core_GetCorporateProfileData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Usp_Core_GetCorporateProfileData]
@UserID INTEGER,
@SpResponseStatus int OUTPUT,      
@SpResponseMessage nvarchar(max) OUTPUT,      
@SpErrorDetails nvarchar(max) OUTPUT  

AS
SET NOCOUNT ON
BEGIN  TRY   

			SELECT CU.UserID,
				CU.UserName,
				CU.EmailID,
				CU.[Password],
				CU.MobileNumber,
				CC.FirstName,
				CC.JCCICode,
				CC.CRNumber,
				CC.UserID,
				CC.EmailID,
				CC.AddDate,
				CU.ResetRequired,
			    Convert(varchar(10),CONVERT(date,CC.LicenseExpiryDate,106),103) AS LicenseExpiryDate,
				CC.CRDocumentFile,
				CC.IDSponsorFile,
				CC.LogoFile,
				CC.LastName,
				CC.MiddleName,

				CC.CountryID,
				CC.CityID,
				CC.Address1,
				CC.PhoneNumber,
				CC.FaxNumber,
				CC.IsEmailCommunication,
				CC.IsSMSCommunication,
				CC.IsMobileCommunication,
				CC.CanContactMorning,
				CC.CanContactEvening,
				CC.NewsLetterNotification,
				CC.PromotionNotification,
				CU.IsActive,
				CC.CorporateName,
				CC.CorporateNameAR,
				CC.MerchantCode

				FROM  coc_Users CU(NOLOCK)

					INNER JOIN coc_Corporates CC (NOLOCK) ON CU.UserID=CC.UserID

			    WHERE CC.UserID=@UserID

		      Set @SpResponseStatus=1;       
	          Set @SpResponseMessage='Success';      
	          Set @SpErrorDetails=NULL;  

END TRY                  
  BEGIN CATCH        
  Set @SpResponseStatus=0;       
  Set @SpResponseMessage='GenericError';      
   SET @SpErrorDetails = convert(varchar(500), Error_number()) + 'ErrorNumber'     
                               + convert(varchar(500),Error_severity()) + 'ErrorSeverity'     
                               + 'ErrorState' +convert(varchar(500), Error_state())     
                               + 'ErrorProcedure' + Error_procedure()     
                               + 'ErrorLine' +convert(varchar(500), Error_line()) + 'ErrorMessage'     
                               + Error_message();    
       
  END CATCH                  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_GetDrawPrizeByRetailoutlet]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[USP_CORE_GetDrawPrizeByRetailoutlet]
@Retailoutlet varchar(100),
@ECouponDrawID int,
@LanguageID int = 1
AS
BEGIN

SELECT ECouponDrawPrizeID as [Value],  edp.ECouponPrizeID, epl.Value as [Text]  
  FROM coc_ECouponDrawPrizes edp(NOLOCK)     
   INNER JOIN coc_ECouponPrizes ep (NOLOCK) ON ep.ECouponPrizeID = edp.ECouponPrizeID  
   INNER JOIN coc_ECouponPrizesLanguages epl (NOLOCK) ON ep.ECouponPrizeID = epl.ECouponPrizeID  AND epl.LanguageID=@LanguageID AND epl.ResourceKey='Name'  
   WHERE edp.ECouponDrawID = @ECouponDrawID  and edp.RetailOutlets  = @Retailoutlet
   AND Frequency> (SELECT Count(*) FROM coc_ECouponWinners ew (NOLOCK) WHERE ew.ECouponDrawPrizeID = edp.ECouponDrawPrizeID)  

END
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_GetDuplicateConsumerRequestProfileDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[USP_CORE_GetDuplicateConsumerRequestProfileDetails]    
 @ConsumerId INT = 0    
AS BEGIN    
    
DECLARE @tempEmail VARCHAR(150) = NULL,    
  @tempMobileNo VARCHAR(15) = NULL    
    
SELECT @tempEmail = EmailID, @tempMobileNo = PrimaryMobile FROM dbo.coc_ConsumerProfileEdit WITH(NOLOCK) WHERE ConsumerID = @ConsumerId    
    
IF EXISTS (SELECT * FROM dbo.coc_Consumers WITH(NOLOCK) WHERE ConsumerID <> @ConsumerId AND (EmailID = @tempEmail OR PrimaryMobile = @tempMobileNo))    
BEGIN    
 SELECT @ConsumerId AS ConsumerID, FullName, EmailID AS EmailId, PrimaryMobile FROM dbo.coc_Consumers WITH(NOLOCK) WHERE  (EmailID = @tempEmail OR PrimaryMobile = @tempMobileNo)    
END    
--ELSE    
-- SELECT '' AS ConsumerID, '' FullName, '' EmailId, '' PrimaryMobile    
    
END
GO
/****** Object:  StoredProcedure [dbo].[Usp_core_GetDynamicLinkQuestionsAndOptions]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================      
-- Author:  <Rafeeq Mohammad>      
-- Create date: <18-05-2020>      
-- Description: <Get competition link details by name>      
-- =============================================      
CREATE PROCEDURE [dbo].[Usp_core_GetDynamicLinkQuestionsAndOptions]       
 @DynamicLinkID bigint,
 @LanguageID int=1
AS      
BEGIN      
 SET NOCOUNT ON;      
 SELECT DynamicLinkQAID,
   (Case when @LanguageID=1 then Question else QuestionAR end) AS Question FROM Coc_Core_DynamicLinkQuestions(NOLOCK)    
     WHERE DynamicLinkID = @DynamicLinkID AND ISACTIVE = 1 
  
 Select DynamicLinkAnswerID,DynamicLinkQAID,
 (Case when @LanguageID=1 then QAOption else QAOptionAR end) AS QAOption from Coc_Core_DynamicLinkQAOptions(nolock) where DynamicLinkQAID in (SELECT DynamicLinkQAID FROM Coc_Core_DynamicLinkQuestions(NOLOCK)    
     WHERE DynamicLinkID = @DynamicLinkID AND ISACTIVE = 1)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_core_GetECouponIntegralShopperByECouponID]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_core_GetECouponIntegralShopperByECouponID]  
(    
@ECouponID bigint    
)    
AS    
BEGIN    
SELECT top 1    
 EIS.ECouponID,    
 ISNULL(EIS.AllowToPlayMultipleTimes,0)AllowToPlayMultipleTimes,    
 ISNULL(EIS.ConsumerPlayGameCount,0)ConsumerPlayGameCount,    
 ISNULL(EIS.GuestPlayGameCount,0)GuestPlayGameCount,    
 ISNULL(EIS.ShowOnMobile,0)ShowOnMobile,    
 ISNULL(EIS.ShowOnWeb,0)ShowOnWeb,    
 ISNULL(EIS.StandardBarcodeIsRequriedAllTheTime,0)StandardBarcodeIsRequriedAllTheTime,    
 EIS.ECouponIntegralShopperID,    
 EIS.BaseURL,
 EIS.PrivateKey
 from coc_core_ECouponIntegralShoppers(nolock) EIS     
 INNER JOIN coc_ECoupons(nolock) EC on EC.ECouponID =  EIS.ECouponID    
where EIS.ECouponID = @ECouponID order by EIS.ECouponIntegralShopperID desc    
  
Select IntegralShopperParamterID  
,ECouponIntegralShopperID  
,ParameterName  
,ParameterValue from coc_core_IntegralShopperParameters(nolock)  
where ECouponIntegralShopperID = (select ECouponIntegralShopperID from coc_core_ECouponIntegralShoppers(nolock) where ECouponID =@ECouponID )  
END
GO
/****** Object:  StoredProcedure [dbo].[usp_core_GetEcouponStagingData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_GetEcouponStagingData]    
(    
@CompetitionStagingID BIGINT    
)    
AS    
BEGIN    
DECLARE @ECouponID bigint;    
DECLARE @EserviceID bigint;
DECLARE @AllowExternalBarcode bit;
DECLARE @BarcodePrefix nvarchar(10) ;
DECLARE @BarcodeLength nvarchar(20) ;
DECLARE @AllowExternalBarcodeAsPending bit;
Declare @ServiceKey nvarchar(50);

DECLARE @AllowExternalValidation bit;
DECLARE @ExternalRedirectionURL nvarchar(300);
DECLARE @BaseURL nvarchar(300);
DECLARE @ConsumerPlayGameCount int;
DECLARE @GuestPlayGameCount int;
DECLARE @AllowToPlayMultipleTimes bit;
DECLARE @StandardBarcodeIsRequriedAllTheTime bit;
DECLARE @APIKey nvarchar(50);
DECLARE @Password nvarchar(50);
DECLARE @CompetitionMethodId bigint;


SELECT @ECouponID = ISNULL(CS.CompetitionId,0) FROM coc_competition_staging(NOLOCK) CS    
WHERE CS.CompetitionStagingID = @CompetitionStagingID;    
    
SELECT @EserviceID = EserviceID FROM coc_ECoupons(nolock) where  ECouponID = @ECouponID;
SELECT @AllowExternalBarcode=AllowExternalBarcode,@BarcodePrefix=BarcodePrefix
       ,@BarcodeLength=BarcodeLength,@AllowExternalBarcodeAsPending=AllowExternalBarcodeAsPending,
       @AllowExternalValidation = AllowExternalValidation, @ExternalRedirectionURL = ExternalRedirectionURL
from coc_eservices(nolock) where EserviceID=@EserviceID;
SELECT @ServiceKey=ServiceKey FROM coc_ServiceKeys(nolock) where EServiceID = @EserviceID;

SELECT @BaseURL = BaseURL, @ConsumerPlayGameCount = ConsumerPlayGameCount, 
        @GuestPlayGameCount = GuestPlayGameCount, @AllowToPlayMultipleTimes = AllowToPlayMultipleTimes, 
        @StandardBarcodeIsRequriedAllTheTime = StandardBarcodeIsRequriedAllTheTime 
FROM coc_core_ECouponIntegralShoppers (NOLOCK) WHERE ECouponID = @ECouponID;

SELECT @APIKey = APIKey, @Password = Password 
FROM coc_CorporateAPIUser API (NOLOCK)
INNER JOIN coc_eservices ES ON ES.CorporateID = API.CorporateID
WHERE ES.EServiceID = @EserviceID

SELECT @CompetitionMethodId = CompetitionMethodId FROM coc_competition_staging_CompetitionMethods 
WHERE CompetitionStagingID=@CompetitionStagingID

  SELECT ECouponID,[ParticipationByKiosk]     
     ,[NumberOfConsumerParticipations]    
     ,[NumberOfGuestParticipations]       
     ,[AllowMobileParticipation]     
     ,[AllowWebParticipation]     
     ,[AllowStandardBarcode]    
     ,[StandardBarcodeValue]    
     ,[MultipleParticipation]     
     ,isnull(ParticipationCount,0) [ParticipationCount]    
     ,[IsShowMobile]  
     ,EserviceID
     ,@ServiceKey ServiceKey     
     ,@AllowExternalBarcode AllowExternalBarcode
     ,@BarcodePrefix BarcodePrefix
     ,@BarcodeLength BarcodeLength
     ,@AllowExternalBarcodeAsPending AllowExternalBarcodeAsPending
     ,@AllowExternalValidation AllowExternalValidation
     ,@ExternalRedirectionURL ExternalRedirectionURL
     ,@BaseURL BaseURL
     ,@ConsumerPlayGameCount ConsumerPlayGameCount
     ,@GuestPlayGameCount GuestPlayGameCount
     ,@AllowToPlayMultipleTimes AllowToPlayMultipleTimes
     ,@StandardBarcodeIsRequriedAllTheTime StandardBarcodeIsRequriedAllTheTime
     ,@APIKey APIKey
     ,@Password [Password]
     ,@CompetitionMethodId CompetitionMethodId
  FROM coc_ECoupons(nolock) WHERE ECouponID = @ECouponID    
    
    
    
  SELECT CSC.CompetitionStagingID,CSC.CompetitionTypeId,CPTL.Name FROM coc_competition_staging_CompetitionTypes(NOLOCK) CSC     
  INNER JOIN coc_CompetitionParticipationTypeLanguages CPTL (NOLOCK) ON CPTL.CompetitionParticipationTypeID=CSC.CompetitionTypeId AND CPTL.LanguageID =1    
  WHERE CSC.CompetitionStagingID = @CompetitionStagingID;    
    
  SELECT CSL.ResourceValue AS CompetitionName FROM coc_competition_staging_languages(NOLOCK) CSL INNER JOIN coc_competition_staging(NOLOCK) CSS    
  ON CSS.CompetitionStagingID = CSL.CompetitionStagingID and csl.LanguageID = 1     
  WHERE CSL.CompetitionStagingID = @CompetitionStagingID and ResourceKey  = 'ContestName'    
    
  END
GO
/****** Object:  StoredProcedure [dbo].[usp_core_GetEcouponStagingData27072021_Bckup]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_GetEcouponStagingData27072021_Bckup]    
(    
@CompetitionStagingID BIGINT    
)    
AS    
BEGIN    
DECLARE @ECouponID bigint;    
DECLARE @EserviceID bigint;
DECLARE @AllowExternalBarcode bit;
DECLARE @BarcodePrefix nvarchar(10) ;
DECLARE @BarcodeLength nvarchar(20) ;
DECLARE @AllowExternalBarcodeAsPending bit;
Declare @ServiceKey nvarchar(50);



SELECT @ECouponID = ISNULL(CS.CompetitionId,0) FROM coc_competition_staging(NOLOCK) CS    
WHERE CS.CompetitionStagingID = @CompetitionStagingID;    
    
SELECT @EserviceID = EserviceID FROM coc_ECoupons(nolock) where  ECouponID = @ECouponID;
SELECT @AllowExternalBarcode=AllowExternalBarcode,@BarcodePrefix=BarcodePrefix
       ,@BarcodeLength=BarcodeLength,@AllowExternalBarcodeAsPending=AllowExternalBarcodeAsPending from coc_eservices(nolock) where EserviceID=@EserviceID;
SELECT @ServiceKey=ServiceKey FROM coc_ServiceKeys(nolock) where EServiceID = @EserviceID;

  SELECT ECouponID,[ParticipationByKiosk]     
     ,[NumberOfConsumerParticipations]    
     ,[NumberOfGuestParticipations]       
     ,[AllowMobileParticipation]     
     ,[AllowWebParticipation]     
     ,[AllowStandardBarcode]    
     ,[StandardBarcodeValue]    
     ,[MultipleParticipation]     
     ,isnull(ParticipationCount,0) [ParticipationCount]    
     ,[IsShowMobile]  
     ,EserviceID
     ,@ServiceKey ServiceKey     
     ,@AllowExternalBarcode AllowExternalBarcode
     ,@BarcodePrefix BarcodePrefix
     ,@BarcodeLength BarcodeLength
     ,@AllowExternalBarcodeAsPending AllowExternalBarcodeAsPending
  FROM coc_ECoupons(nolock) WHERE ECouponID = @ECouponID    
    
    
    
  SELECT CSC.CompetitionStagingID,CSC.CompetitionTypeId,CPTL.Name FROM coc_competition_staging_CompetitionTypes(NOLOCK) CSC     
  INNER JOIN coc_CompetitionParticipationTypeLanguages CPTL (NOLOCK) ON CPTL.CompetitionParticipationTypeID=CSC.CompetitionTypeId AND CPTL.LanguageID =1    
  WHERE CSC.CompetitionStagingID = @CompetitionStagingID;    
    
  SELECT CSL.ResourceValue AS CompetitionName FROM coc_competition_staging_languages(NOLOCK) CSL INNER JOIN coc_competition_staging(NOLOCK) CSS    
  ON CSS.CompetitionStagingID = CSL.CompetitionStagingID and csl.LanguageID = 1     
  WHERE CSL.CompetitionStagingID = @CompetitionStagingID and ResourceKey  = 'ContestName'    
    
  END
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_GetExternalUserDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-------------------------------------------------------------------------------
-- Author       Rafeeq Mohammad
-- Created      10-09-2020
-- Purpose      Fetch the external user detail by following params(ConsumerID,OtpID,EmailId,PrimaryMobile).
-- Copyright © 2020, Logic Systems, All Rights Reserved
-------------------------------------------------------------------------------
CREATE PROC [dbo].[USP_CORE_GetExternalUserDetails] 
 @ConsumerID int = null
,@OtpId int  = null
AS
BEGIN
 SELECT top 1 UserID,FirstName,SecondName,EmailID,PrimaryMobile FROM coc_Consumers(NOLOCK) 
 WHERE (ConsumerID = @ConsumerID or OtpId = @OtpId) and IsActive=1 and IsDeleted=0
END
GO
/****** Object:  StoredProcedure [dbo].[usp_core_GetGeneratedPromoCodes]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  proc [dbo].[usp_core_GetGeneratedPromoCodes]
  @Status NVARCHAR(255) = NULL    
AS
Begin
    Select PromoCodeBundleID,CategoryID,PromoCodeCount,Status from coc_core_PromoCodeBundle(nolock) where Status=@Status
end
GO
/****** Object:  StoredProcedure [dbo].[Usp_Core_GetHomeContent]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Usp_Core_GetHomeContent]     
 @UserID INTEGER=NULL,    
 @LanguageID INTEGER    
AS    
SET NOCOUNT ON    
 BEGIN    
  DECLARE @Counter INTEGER    
  DECLARE @Winners AS TABLE    
  (    
   UniqueID INTEGER IDENTITY(1,1),    
   EcouponID INTEGER,    
   EServiceID INTEGER,    
   DeclaredDate DATETIME    
  )    
      
  DECLARE @WinnerList AS TABLE    
  (    
   ECouponID INTEGER,    
   WinnerName NullName,    
   PrizeType NullDescription,    
   PrizeHeader NullDescription,    
   PrizeDetail Remark,    
   ImageFile NullDescription,    
   EService Remark,    
   ConsumerID INTEGER    
  )    
       
  --Tables[0] ECoupon    
  SELECT EC.ECouponID,EC.EServiceID,CONVERT(NVARCHAR(12),EC.ResultDate,106) ResultDate,EC.WinnerCount,EC.EntryTypeID,EC.MinInvoiceValue,EC.AdditionalCouponValue,EC.AllowMultipleInvoices,EC.CouponPerInvoice,    
    EC.CouponPerMember,EC.UserAurthorised,ISNULL(EC.QuestionCount,0) QuestionCount,EC.ImageFile,EC.UsesTerm,EC.ECouponTemplate,EC.ParticipationByKiosk,    
    '' as [ServiceName],--SL.EService [ServiceName],    
    CONVERT(NVARCHAR(12),ES.FromDate,106) StatDate,CONVERT(NVARCHAR(12),ES.ToDate,106) EndDate,EC.MemberOnly,EC.ImageFile as DisplayImage     
   FROM coc_ECoupons(NOLOCK) EC    
    INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID = ES.EServiceID    
    INNER JOIN coc_EServiceLanguages SL(NOLOCK) ON ES.EServiceID=SL.EServiceID AND SL.LanguageID = @LanguageID    
  WHERE EC.IsActive=1 AND CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE) AND EC.ResulltDeclared=0    
    and ES.EServiceID not in (125,127,128)    
 and EC.EServiceID <> 183 -- added by rafeeq   
 and isnull(EC.IsShowMobile, 1) = 1  
  ORDER BY EC.ECouponID DESC     
    
  --Tables[1] Ticket    
  --SELECT TC.EServiceEventID,TC.EServiceID,TC.EventDescription,EV.EnumValue,FORMAT(TC.EventDate,'dd/MM/yyyy')EventDate,FORMAT(TC.LastDate,'dd/MM/yyyy')LastDate,SL.EService [ServiceName],    
  --  FORMAT(TC.PurchaseStartDate,'dd/MM/yyyy')PurchaseStartDate,FORMAT(TC.PurchaseEndDate,'dd/MM/yyyy')PurchaseEndDate,TC.EventCost,TC.IsActive,TC.EventDescription [TicketDescription],TC.DisplayImage     
  -- FROM coc_EServiceEvents(NOLOCK) TC    
  -- INNER JOIN coc_EnumValueLanguages(NOLOCK) EV ON TC.EventTypeID=EV.EnumValueID AND EV.LanguageID=@LanguageID    
  -- INNER JOIN coc_EServiceLanguages(NOLOCK) SL ON TC.EServiceID=SL.EServiceID AND SL.LanguageID = @LanguageID    
  --WHERE TC.IsActive=1 AND CAST(GETDATE() AS DATE) BETWEEN CAST(TC.PurchaseStartDate AS DATE) AND CAST(TC.PurchaseEndDate AS DATE)    
  --ORDER BY TC.EServiceEventID DESC     
    
  --Tables[1] Advertisement1    
  SELECT AD.AdvertisementID,AD.AdvertisementName,FORMAT(AD.StartDate,'dd/MM/yyyy')StartDate,ISNULL(AD.TargetURL,'')TargetURL,AD.Cost,AD.DisplayTypeID,AD.IsImage,AD.IsVideo,    
    AD.Duration,ISNULL(AD.PositionID,101) PositionID,AD.IsActive,AD.TargetPlateform,AD.PopupHeight,AD.PopupWidth  ,   
 isnull(AD.TargetLinkType,'URL') TargetLinkType, isnull(AD.eCouponID,0) eCouponID  
   FROM coc_Advertisements(NOLOCK) AD  
  WHERE IsActive=1    
   ORDER BY AD.AdvertisementID    
    
  --Tables[2] Advertisement2    
  SELECT FL.AdvertisementFileID,FL.AdvertisementID,FL.FilePath,FL.IsURL,AdvertisementText,ISNULL(AV.PositionID,101) PositionID,AV.IsImage,AV.IsVideo,AV.IsActive    
   FROM coc_AdvertisementFiles(NOLOCK) FL     
    INNER JOIN coc_Advertisements(NOLOCK) AV ON FL.AdvertisementID=AV.AdvertisementID     
   WHERE AV.IsActive=1     
  ORDER BY FL.AdvertisementID    
         
  --Tables[4] Advertisement3    
  --SELECT AP.AdvertisementPageID,AP.AdvertisementID,AP.PageID,ISNULL(AV.PositionID,101) PositionID,AV.IsImage,AV.IsVideo,AV.IsActive    
  -- FROM coc_AdvertisementPages(NOLOCK) AP  
  --  INNER JOIN coc_Advertisements(NOLOCK) AV ON AP.AdvertisementID=AV.AdvertisementID     
  -- WHERE AV.IsActive=1    
  --ORDER BY AP.AdvertisementID    
    
  --Tables[5] Locations    
  --SELECT KL.KioskLocationID, [Location],Address1,Address2,CityID,KK.KioskLocation    
  -- FROM coc_KioskLocations(NOLOCK) KL    
  --INNER JOIN coc_KioskLocationLanguages(NOLOCK) KK ON KL.KioskLocationID=KK.KioskLocationID AND KK.LanguageID=@LanguageID    
        
  --Tables[6] Setups    
  --SELECT SystemSetupID,SetupKey,SetupValue     
  -- FROM COC_SystemSetups(NOLOCK)    
       
  --Tables[7] KioskLocations    
  --SELECT KL.KioskLocationID,KL.Address1,KL.Address2,KL.MacAddress1,KL.MacAddress2,KL.Location,CL.City,LL.KioskLocation,KL.Remarks    
  -- FROM coc_KioskLocations(NOLOCK) KL    
  --  INNER JOIN coc_CityLanguages(NOLOCK) CL ON CL.CityID=KL.CityID AND  CL.LanguageID=@LanguageID    
  --  INNER JOIN coc_KioskLocationLanguages(NOLOCK) LL ON LL.KioskLocationID=KL.KioskLocationID AND LL.LanguageID=@LanguageID    
    
  -- Tables[3] Prizes    
  SELECT ECouponPrizeID,ECouponID,PrizeTypeID,PrizeHeader,PrizeDetail,ImageFile,EV.EnumValue [Title]     
   FROM coc_ECouponPrizes(NOLOCK) EP  
    INNER JOIN coc_EnumValueLanguages(NOLOCK) EV ON EP.PrizeTypeID=EV.EnumValueID AND LanguageID=@LanguageID    
         
  --INSERT INTO @Winners    
  --SELECT  DISTINCT TOP 3 EC.ECouponID ,EC.EServiceID,EC.DeclaredDate    
  -- FROM coc_ECouponWinners EW (NOLOCK)     
  --  INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponPrizeID=EW.ECouponPrizeID    
  --  INNER JOIN coc_ECoupons EC(NOLOCK) ON EP.ECouponID=EC.ECouponID    
  -- ORDER BY EC.DeclaredDate DESC     
  --Tables[3] WinnersList    
  --SELECT @Counter=MIN(ECouponID) FROM @Winners    
  --WHILE(@Counter IS NOT NULL)    
  --BEGIN    
  -- INSERT INTO @WinnerList    
  --  SELECT TOP 2 EC.ECouponID,CS.FirstName +' '+CS.SecondName [WinnerName],CP.EnumValue [PrizeType],EP.PrizeHeader,EP.PrizeDetail,CS.ImageFile ,SR.EService,CS.ConsumerID    
  --   FROM @Winners EC     
  --    INNER JOIN coc_EServiceLanguages SR(NOLOCK) ON EC.EServiceID=SR.EServiceID AND SR.LanguageID=@LanguageID    
  --    INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponID=EC.ECouponID    
  --    INNER JOIN coc_ECouponWinners ES(NOLOCK) ON EP.ECouponPrizeID=ES.ECouponPrizeID    
  --    INNER JOIN coc_Consumers CS(NOLOCK) ON ES.ConsumerID=CS.ConsumerID    
  --    INNER JOIN coc_EnumValueLanguages CP(NOLOCK) ON EP.PrizeTypeID=CP.EnumValueID AND CP.LanguageID=@LanguageID    
  --   WHERE EC.EcouponID=@Counter    
  -- INSERT INTO @WinnerList    
  --  SELECT TOP 2 EC.ECouponID,CS.GuestName [WinnerName],CP.EnumValue [PrizeType],EP.PrizeHeader,EP.PrizeDetail,'' ImageFile ,SR.EService,0 ConsumerID    
  --   FROM @Winners EC     
  --    INNER JOIN coc_EServiceLanguages SR(NOLOCK) ON EC.EServiceID=SR.EServiceID AND SR.LanguageID=@LanguageID    
  --    INNER JOIN coc_ECouponPrizes EP(NOLOCK) ON EP.ECouponID=EC.ECouponID    
  --    INNER JOIN coc_ECouponWinners ES(NOLOCK) ON EP.ECouponPrizeID=ES.ECouponPrizeID    
  --    INNER JOIN coc_GuestParticipations CS(NOLOCK) ON ES.MobileNumber=CS.Mobile AND ES.ConsumerID IS NULL      
  --    INNER JOIN coc_EnumValueLanguages CP(NOLOCK) ON EP.PrizeTypeID=CP.EnumValueID AND CP.LanguageID=@LanguageID    
  --   WHERE EC.EcouponID=@Counter    
  -- SELECT @Counter=MIN(ECouponID) FROM @Winners WHERE ECouponID>@Counter    
  --END    
  --SELECT * FROM @WinnerList ORDER BY ECouponID DESC     
    
    --Table[10] HomeScreenSetup    
  --SELECT SystemSetupID,SetupKey,SetupValue     
  -- FROM COC_SystemSetups(NOLOCK)     
  --WHERE SystemSetupID=501      
 END    
SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[usp_core_GetNationalityInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_GetNationalityInformation]   
 @NationalityID INTEGER=NULL,  
 @LanguageID INTEGER=1  
  AS   
 BEGIN  
  
 --Table 1 [Nationality]  
 --SELECT CU.NationalityID,Nationality,IsActive,CL.LanguageID  
 -- FROM [coc_Nationalities] CU(NOLOCK)   
 --  INNER JOIN [coc_NationalityLanguages] CL(NOLOCK) ON CL.NationalityID=CU.NationalityID --AND CL.LanguageID=@LanguageID  
 -- WHERE (@NationalityID IS NULL OR CU.NationalityID=@NationalityID) --AND IsActive=1  
 --  order by CU.DisplayOrder, CL.Nationality  
 --Table 1 [NationalityLanguages]  
 SELECT Cl.NationalityID,LanguageID,Nationality   
  FROM [coc_NationalityLanguages] CL(NOLOCK) inner join [coc_Nationalities] CU(NOLOCK) ON CL.NationalityID=CU.NationalityID  
 WHERE (@NationalityID IS NULL OR CL.NationalityID=@NationalityID) AND CL.LanguageID=@LanguageID   
  order by CU.DisplayOrder, CL.Nationality  
  
END
GO
/****** Object:  StoredProcedure [dbo].[usp_core_GetPurchaseBarcodeById]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_GetPurchaseBarcodeById]        
 @BarcodePurchaseId bigint                      
,@UserID INTEGER                 =null            
,@LanguageID int                 =1           
,@RoleID bigint                  =null            
,@ImpersonationUserID bigint     =null            
,@SpResponseStatus int              out           
,@SpResponseMessage nvarchar(max)    out         
,@SpErrorDetails nvarchar(max)      out          
AS            
 SET NOCOUNT ON            
 BEGIN TRY            
 BEGIN          
  SELECT BP.CorporateID            
  ,      BP.BarcodePurchaseId            
  ,      BP.PurchaseNo          
  ,     convert(varchar, BP.[Date], 103) as  [Date]         
  ,      BP.NoOfBarcodes            
  ,      BP.BarcodePriceId            
  ,      BP.UserID            
  ,      BP.Amount            
  ,      BP.BarcodePriceId            
  ,      BP.TaxApplicable            
  ,      BP.Tax            
  ,      BP.TotalAmount            
  ,      BP.[Status]           
  ,      BP.NoOfBarCodesApproved            
  ,      BP.ApprovedAdminId            
  ,      BP.CreatedDate            
  ,      BP.AdminApprovedDate     
  ,(select sum(PaidAmount) from coc_BarcodePurchasePayment where BarcodePurchaseId=@BarcodePurchaseId and Status!=5) as  TotalPaidAmount           
  ,(CASE WHEN  @LanguageID=1 then (select CurrencySymbol_EN from  coc_Currency (NOLOCK)
  where CurrencyId =(select BaseCurrencyId from  coc_Settings (NOLOCK))) 
  else (select CurrencySymbol_AR from  coc_Currency (NOLOCK) 
  where CurrencyId =(select BaseCurrencyId from  coc_Settings(NOLOCK))) end) as CurrencySymbol  
  ,(CASE WHEN  @LanguageID=1 then  C.CorporateName else C.CorporateNameAR end) as CorporateName
  ,(C.FirstName+' '+C.MiddleName+' '+ C.LastName) as CorporateFullName
  ,C.EmailID 
   --, SUM(BPP.PaidAmount) as TotalPaidAmount2    
  FROM coc_BarcodePurchase(NOLOCK) BP     
  inner join coc_Corporates   C (NOLOCK) on C.CorporateID=BP.CorporateId
  WHERE BP.BarcodePurchaseId=@BarcodePurchaseId            
    
 Set @SpResponseStatus=1;            
 Set @SpResponseMessage='Success';            
 Set @SpErrorDetails='Success';    
      
 END             
 END TRY            
 BEGIN CATCH     
 Set @SpResponseStatus=0;            
 Set @SpResponseMessage='GenericError';            
 Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';       

      
 END CATCH            
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_GetReportsProfile]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[USP_CORE_GetReportsProfile]              
 @UserId INT = null,                
 @ReportId INT = NULL,              
 @ProfileID INT = NULL            
 AS BEGIN              
 SET NOCOUNT ON              
 declare @RoleID int            
        
 IF(@ProfileID = 0)        
   SET @ProfileID = NULL;        
        
 IF(@UserId = 0)        
   SET @UserId = NULL;        
        
 IF(@ReportId = 0)        
   SET @ReportId = NULL;        
        
 select @RoleID = coc_Users.RoleID from coc_Users where UserID= @UserId            
            
 --if exists(select * from coc_Core_ProfileReportsColumns where UserID= @UserId and ReportID = @ReportId)            
 --begin            
 --            SELECT top 1 ProfileID, ProfileName,ColumnName,UserID,ReportID FROM coc_Core_ProfileReportsColumns WITH(NOLOCK)             
 --                                                 WHERE UserID = @UserId AND ReportID = @ReportId              
 --                                                 order by ProfileID            
            
 --end            
 --else            
 Begin            
             SELECT  ProfileID,       
     ProfileName,      
     ColumnName,      
     UserID,      
     ReportID,      
     IsSystem,  
     IsDefault as IsDefaultView,  
       (select ReportName_EN from coc_Reports where ReportID=@ReportId) as ReportName      
          FROM coc_Core_ProfileReportsColumns WITH(NOLOCK)          
          
                                                  WHERE (RoleID is null or Roleid = @RoleID) AND ReportID = @ReportId            
                                                        and (UserID is null or UserID = @UserId)    AND (@ProfileID IS NULL OR ProfileID = @ProfileID)                                                       
                                                  order by isnull(IsDefault,0) desc, ProfileID            
 end            
            
 END
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_GetReportsProfileColumnbyProfileID]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[USP_CORE_GetReportsProfileColumnbyProfileID]
@profileID	INT = NULL
AS BEGIN
	SELECT ColumnName FROM coc_Core_ProfileReportsColumns WITH(NOLOCK) WHERE ProfileID = @profileID
END
GO
/****** Object:  StoredProcedure [dbo].[usp_core_GetReportsProfileSystemColumnbyReportID]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[usp_core_GetReportsProfileSystemColumnbyReportID]
 @reportID INT       
,@LanguageID int =1  
AS BEGIN      
 SELECT   
  PRC.ProfileID, 
  PRC.ColumnName  
 ,(Case when @LanguageID=1 then  R.ReportName_EN ELSE R.ReportName_AR END)as ReportName  
 FROM coc_Core_ProfileReportsColumns PRC WITH(NOLOCK)   
 inner join coc_Reports R on R.ReportID=PRC.ReportID  
 WHERE PRC.ReportID = @reportID and  IsSystem=1    
END
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_GetRetailoutletByDraw]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[USP_CORE_GetRetailoutletByDraw]  
@ECoponDrawID INT,  
@LanguageID INT = 1  
AS  
BEGIN

if(@LanguageID <> 1) and not exists (SELECT CONVERT(int,CER.RetailOutlets) as RetailOutletID FROM coc_ECouponDrawPrizes CER (NOLOCK)  
INNER JOIN coc_RetailOutletLanguages CRL(NOLOCK) ON CRL.RetailOutletID = CONVERT(int,CER.RetailOutlets)  
WHERE CER.ECouponDrawID = @ECoponDrawID AND CRL.LanguageID = @LanguageID  )

 begin
    SELECT DISTINCT CONVERT(int,CER.RetailOutlets) as [Value],CRL.RetailOutlet as [Text] FROM coc_ECouponDrawPrizes CER (NOLOCK)  
	INNER JOIN coc_RetailOutletLanguages CRL(NOLOCK) ON CRL.RetailOutletID = CONVERT(int,RetailOutlets)  
	WHERE CER.ECouponDrawID = @ECoponDrawID AND CRL.LanguageID = 1  
 end

 Else

 begin
	SELECT DISTINCT CONVERT(int,CER.RetailOutlets) as [Value],CRL.RetailOutlet as [Text] FROM coc_ECouponDrawPrizes CER (NOLOCK)  
	INNER JOIN coc_RetailOutletLanguages CRL(NOLOCK) ON CRL.RetailOutletID = CONVERT(int,CER.RetailOutlets)  
	WHERE CER.ECouponDrawID = @ECoponDrawID AND CRL.LanguageID = @LanguageID  
 end


END  


------------------------------------------------------------------------------------------------------------------------------------------


GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_GetSpecialBarcodeList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[USP_CORE_GetSpecialBarcodeList]
 @ECouponID bigint  
,@LanguageID int = 1
AS  
BEGIN  
  begin try
select     CE.ECouponOutletID
		   ,CE.ECouponID   
		   ,CEB.StandardBarcode  
           ,CE.RetailOutletID 
		   ,CRL.RetailOutlet
           ,CE.TotalAllowedParticipationPerCustomer    
           ,CE.TotalAllowedParticipationPerCustomerPerDay    
           ,CE.TotalAllowedParticipationPerGuest    
           ,CE.TotalAllowedParticipationPerGuestPerDay    
           ,CE.TotalAllowedParticipationinOutlet    
           ,CE.TotalAllowedParticipationPerBarcode    
           ,CE.TotalAllowedParticipationPerBarcodePerDay  from  coc_ECouponOutlets  CE (NOLOCK) 
     INNER JOIN coc_ECouponStandardBarcodes CEB(NOLOCK) on CEB.ECouponOutletID = CE.ECouponOutletID  
	 Inner Join coc_RetailOutletLanguages CRL(NOLOCK) on CRL.RetailOutletID = CE.RetailOutletID and CRL.LanguageID = @LanguageID
     where CE.ECouponID = @ECouponID  
	 end try
	 begin catch
	 print (Error_message());
	 end catch  
END
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_GetStagingCompetitionInfo]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[USP_CORE_GetStagingCompetitionInfo]     
@CompetitionStagingID bigint      
AS      
BEGIN      
SELECT       
CS.CompetitionStagingID      
,CS.CompetitionId ECouponID      
,CS.NoOfCoupons      
,CS.NumberOfLinks      
,CS.NumberOfSpecialBarcodes      
,(CASE       
WHEN Exists(select CompetitionStagingID from coc_Competition_Staging_CompetitionMethods(nolock) where CompetitionStagingID=@CompetitionStagingID and CompetitionMethodId=2) then      
1 -- micro link methodtypeid = 2      
WHEN Exists(select CompetitionStagingID from coc_Competition_Staging_ParticipationTypes(nolock) where CompetitionStagingID=@CompetitionStagingID and (CompetitionParticipationTypeID=18 or CompetitionParticipationTypeID=21)) then      
1 -- micro link CompetitionParticipationTypeID = 18      
else      
0      
END)IsMicroLink      
,(CASE       
WHEN Exists(select CompetitionStagingID from coc_Competition_Staging_ParticipationTypes(nolock) where CompetitionStagingID=@CompetitionStagingID and (CompetitionParticipationTypeID=19 or CompetitionParticipationTypeID=21)) then      
1-- MulitipleLink CompetitionParticipationTypeID = 19      
else      
0      
END)IsMulitipleLink      
,(CASE       
WHEN Exists(select CompetitionStagingID from coc_Competition_Staging_ParticipationTypes(nolock) where CompetitionStagingID=@CompetitionStagingID and CompetitionParticipationTypeID=4) then      
1-- SpecialBarcode CompetitionParticipationTypeID = 4      
else      
0      
END)IsSpecialBarcode      
,(SELECT Count(*) FROM coc_ECouponOutlets(nolock) where EcouponID = cs.CompetitionId and RetailOutletID is not null)RowCountOfSpecialBarcode      
,(SELECT Count(*) FROM Coc_Core_DynamicLinks(nolock) where EcouponID = cs.CompetitionId)RowCountOfDynamiclink      
,(CASE       
WHEN Exists(select CompetitionStagingID from coc_Competition_Staging_ParticipationTypes(nolock) where CompetitionStagingID=@CompetitionStagingID and CompetitionParticipationTypeID=4) then      
(CS.NoOfCoupons*10/100)   -- SpecialBarcode CompetitionParticipationTypeID = 4      
else      
CS.NoOfCoupons     
END)StandardBarcodeCoupons    
 ,(CASE       
WHEN Exists(select CompetitionStagingID from coc_Competition_Staging_ParticipationTypes(nolock) where CompetitionStagingID=@CompetitionStagingID and CompetitionParticipationTypeID in (11)) then      
1     
else      
0
END) IsAllowExternalBarcode
,(CASE       
WHEN Exists(select CompetitionStagingID from coc_Competition_Staging_CompetitionMethods(nolock) where CompetitionStagingID=@CompetitionStagingID and CompetitionMethodId = 6) then      
1       
else      
0      
END) AS IsIntegralShopper
,(CASE       
WHEN Exists(select CompetitionStagingID from coc_Competition_Staging_ParticipationTypes(nolock) where CompetitionStagingID=@CompetitionStagingID and CompetitionParticipationTypeID=22) then      
1
else      
0      
END)IsSocialMediaLink      
,(SELECT Count(*) FROM coc_competition_staging_SocialMedia(nolock) where CompetitionStagingID = @CompetitionStagingID) as NumberOfSocialMediaLinks      
    
FROM coc_competition_staging(nolock)  CS      
where CS.CompetitionStagingID=@CompetitionStagingID      
      
END
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_GetUserIndentityTypes]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_CORE_GetUserIndentityTypes]
@LanguageID int = 1
AS  
BEGIN  
SELECT UserIdentityTypeID  
      ,(case when @LanguageID = 1 then  UserIdentityName_EN 
	  else UserIdentityName_AR
	  end) UserIdentityName
      ,RegularExpression  
      ,IsActive        
  FROM coc_core_UserIdentityTypes where IsActive = 1  
END
GO
/****** Object:  StoredProcedure [dbo].[usp_core_GetWebVoucherList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_GetWebVoucherList]
     @UserID INTEGER = null
	,@LanguageId INTEGER = 1
	,@CorporateID INTEGER = NULL
	,@CategoryID INTEGER = NULL
AS
BEGIN
	
	DECLARE @canApply BIT = 1
	DECLARE  @ConsumerId INTEGER = NULL
	SET @ConsumerId = (SELECT TOP 1 ConsumerId FROM COC_CONSUMERS (NOLOCK) WHERE USERID = @USERID)
	SELECT EV.EVoucherID
		,SL.EServiceID
		,EV.IsActive
		,EVL_Name.ResourceValue AS NAME
		,SL.EService
		,ISNULL(EV.ImageFile, ISNULL((
					SELECT TOP 1 ImageFile
					FROM coc_EVoucherImages EVI (NOLOCK)
					WHERE EVI.EVoucherID = EV.EVoucherID
						AND EVI.IsPrimaryImage = 1
						AND EVI.LanguageID = @LanguageId
					), (
					SELECT TOP 1 ImageFile
					FROM coc_EVoucherImages EVI (NOLOCK)
					WHERE EVI.EVoucherID = EV.EVoucherID
						AND EVI.IsPrimaryImage = 1
					))) AS ImageFile
		,@canApply [CanApply]
		,CONVERT(NVARCHAR(12), ES.FromDate, 106) AS StartDate
		,CONVERT(NVARCHAR(12), ES.ToDate, 106) AS EndDate
		,EVL_Desc.ResourceValue AS [Description]
		,EVL_Loc.ResourceValue AS Location
		,EVL_Remark.ResourceValue AS Remarks
		,EVL_Terms.ResourceValue AS Terms
		,C.CorporateID
		,C.CorporateName
		,EVL_Desc.ResourceValue Description
	FROM coc_EVoucher EV(NOLOCK)
	INNER JOIN coc_EVoucherLanguages EVL_Desc(NOLOCK) ON EVL_Desc.EVoucherID = EV.EVoucherID
		AND EVL_Desc.LanguageID = @LanguageID
		AND EVL_Desc.ResourceKey = 'Description'
	INNER JOIN coc_EVoucherLanguages EVL_Name (NOLOCK) ON EVL_Name.EVoucherID = EV.EVoucherID
		AND EVL_Name.LanguageID = @LanguageID
		AND EVL_Name.ResourceKey = 'VoucherName'
	LEFT JOIN coc_EVoucherLanguages EVL_Loc (NOLOCK) ON EVL_Loc.EVoucherID = EV.EVoucherID
		AND EVL_Loc.LanguageID = @LanguageID
		AND EVL_Loc.ResourceKey = 'LocationInfo'
	LEFT JOIN coc_EVoucherLanguages EVL_Remark(NOLOCK) ON EVL_Remark.EVoucherID = EV.EVoucherID
		AND EVL_Remark.LanguageID = @LanguageID
		AND EVL_Remark.ResourceKey = 'Remarks'
	LEFT JOIN coc_EVoucherLanguages EVL_Terms(NOLOCK) ON EVL_Terms.EVoucherID = EV.EVoucherID
		AND EVL_Terms.LanguageID = @LanguageID
		AND EVL_Terms.ResourceKey = 'Terms'
	INNER JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID = EV.EServiceID
	INNER JOIN coc_EServiceLanguages SL(NOLOCK) ON SL.EServiceID = ES.EServiceID
		AND SL.LanguageID = @LanguageID
	INNER JOIN coc_Corporates C (NOLOCK) ON C.CorporateID = ES.CorporateID
	INNER JOIN coc_EVoucherCategory EVC(NOLOCK) ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID
	WHERE ES.FromDate <= getdate()
		AND ES.ToDate >= getdate()
		AND EV.IsActive = 1
		AND (
			@CategoryID IS NULL
			OR EV.EVoucherCategoryID = @CategoryID
			)
		AND (
			@CorporateID IS NULL
			OR ES.CorporateID = @CorporateID
			)
-------------------------
	SELECT distinct C.CorporateID
		,C.CorporateName
		 
	FROM coc_EVoucherBundleQRCode VQR (NOLOCK)
	INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVBD.CorporateID = VQR.CorporateID
	INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID
	INNER JOIN coc_EVoucher EV(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID AND EV.IsActive = 1
	INNER JOIN coc_EServices ES (NOLOCK) ON ES.EServiceID = EV.EServiceID
	INNER JOIN coc_Corporates C(NOLOCK) ON C.CorporateID = VQR.CorporateID
	WHERE ES.FromDate <= getdate()
		AND ES.ToDate >= getdate()
		AND EV.IsActive = 1
		AND (@CategoryID IS NULL OR EV.EVoucherCategoryID = @CategoryID)
		AND (@CorporateID IS NULL OR ES.CorporateID = @CorporateID )
END
GO
/****** Object:  StoredProcedure [dbo].[usp_core_InsertCompetitionPayment]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_InsertCompetitionPayment]         
 @CompetitionStagingID bigint   
,@PaidAmount decimal(18,2)    
,@PaymentReceipt nvarchar(500)      
,@UserID int                            
,@LanguageID int                 =null         
,@RoleID bigint                  =null          
,@ImpersonationUserID bigint     =null          
,@SpResponseStatus int              out         
,@SpResponseMessage nvarchar(max)  out          
,@SpErrorDetails nvarchar(max)     out         
AS          
 SET NOCOUNT ON          
 BEGIN TRY  

 Insert into coc_CompetitionPayment
 select @CompetitionStagingID,getdate(),@PaidAmount,@UserID,getdate(),@PaymentReceipt     
 
 Set @SpResponseStatus=1;          
 Set @SpResponseMessage='Success';          
 Set @SpErrorDetails='Success';          
 END TRY          
 BEGIN CATCH     
 Set @SpResponseStatus=0;          
 Set @SpResponseMessage='GenericError';      
 Set @SpErrorDetails ='ErrorNumber : <' +  
   convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+   
   convert(varchar(500),Error_severity())+'>, ErrorState : <'+  
   convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+  
   convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';   
 END CATCH          
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_core_InsertConsumerLog]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Proc [dbo].[usp_core_InsertConsumerLog]
 @ConsumerID	int	
,@UnverifedEmailID	varchar(100)	
,@UnverifiedPrimaryMobile	varchar(15)	
,@AddedBy	int	
,@ErrorMessage nvarchar(50) out
AS
	BEGIN TRY
	declare  @PreviousEmailID varchar(100);
    declare  @PreviousPrimaryMobile varchar(15);	
	select @PreviousEmailID=EmailID,@PreviousPrimaryMobile=PrimaryMobile  from coc_Consumers(nolock) where ConsumerID=@ConsumerID
	insert into coc_ConsumersUpdateLog select @ConsumerID ,@UnverifedEmailID,@UnverifiedPrimaryMobile,@PreviousEmailID,@PreviousPrimaryMobile
	,null,null,@AddedBy,getdate(),null

	Set @ErrorMessage='Success';

	END TRY

BEGIN CATCH

	Set @ErrorMessage ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';

END CATCH

GO
/****** Object:  StoredProcedure [dbo].[usp_core_InsertPurchaseBarcodePayment]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_InsertPurchaseBarcodePayment]         
 @BarcodePurchaseId bigint   
,@PaidAmount decimal(18,2)    
,@PaymentReceipt nvarchar(200)      
,@UserID int                            
,@LanguageID int                 =null         
,@RoleID bigint                  =null          
,@ImpersonationUserID bigint     =null          
,@SpResponseStatus int              out         
,@SpResponseMessage nvarchar(max)  out          
,@SpErrorDetails nvarchar(max)     out         
AS          
 SET NOCOUNT ON          
 BEGIN TRY       
  declare @Status int;     
  declare @TotalPurshaseAmount decimal(18,2); 
  declare @TotalPaidAmount decimal(18,2);  
   declare @CurrentRemainingAmount decimal(18,2);
  declare @BarcodePurchasePaymentID bigint;  
  select   @TotalPurshaseAmount=TotalAmount from coc_BarcodePurchase(nolock) where BarcodePurchaseId=@BarcodePurchaseId
     
 Insert into coc_BarcodePurchasePayment(BarcodePurchaseId,PaymentDate,PaidAmount,UserId,CreatedDate,PaymentReceipt,Status)         
 Values(@BarcodePurchaseId,getdate(),@PaidAmount,@UserID,getdate(),@PaymentReceipt,3)     
 set @BarcodePurchasePaymentID=SCOPE_IDENTITY();  
 --update the Status of Purchase Barcode
 select @TotalPaidAmount=sum(PaidAmount) from coc_BarcodePurchasePayment(nolock) where BarcodePurchaseId=@BarcodePurchaseId and Status!=5
  set @CurrentRemainingAmount= @TotalPurshaseAmount-@TotalPaidAmount; 
  update coc_BarcodePurchasePayment set RemainingAmount=@CurrentRemainingAmount
  where BarcodePurcahsePaymentId =@BarcodePurchasePaymentID
  

  if(convert(int ,@TotalPurshaseAmount)=convert(int ,@TotalPaidAmount))    
  begin    
   set  @Status=3    
  end    
  else     
  begin     
    set  @Status=2    
  end    
  update coc_BarcodePurchase set [Status]=@Status where  BarcodePurchaseId=@BarcodePurchaseId  
 
 Set @SpResponseStatus=1;          
 Set @SpResponseMessage='Success';          
 Set @SpErrorDetails='Success';          
 END TRY          
 BEGIN CATCH     
 Set @SpResponseStatus=0;          
 Set @SpResponseMessage='GenericError';          
  Set @SpErrorDetails ='ErrorNumber ';      
   Set @SpErrorDetails ='ErrorNumber : <' +  
   convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+   
   convert(varchar(500),Error_severity())+'>, ErrorState : <'+  
   convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+  
   convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';   
 END CATCH          
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_InsertUpdate_Reports_Columns]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[USP_CORE_InsertUpdate_Reports_Columns]     
 @UserId INT = null,  
 @ReportId INT = NULL,
 @ColumnName NVARCHAR(MAX) = NULL,
 @ProfileID INT = NULL,
 @IsUpdate BIT = NULL,
 @ProfileName VARCHAR(100) = NULL,
 @SpStatus INT OUT,      
 @ErrorMessage NVARCHAR(500) OUT      
AS      
BEGIN      
SET @SpStatus = 1;      
SET @ErrorMessage = 'Success';      
BEGIN TRY      
    IF (@IsUpdate = 1)
	BEGIN
		UPDATE coc_Core_ProfileReportsColumns SET ColumnName = @ColumnName, UpdatedUserId = @UserId WHERE ProfileID = @ProfileID
	END
	ELSE
	BEGIN
		INSERT INTO coc_Core_ProfileReportsColumns (ProfileName, UserID, ReportID, ColumnName, UpdatedUserId) 
			VALUES (@ProfileName, @UserId, @ReportId, @ColumnName, @UserId )
	END
END TRY      
      
BEGIN CATCH      
SET @SpStatus = 0;      
SET @ErrorMessage = ERROR_MESSAGE();      
END CATCH      
      
END
GO
/****** Object:  StoredProcedure [dbo].[usp_core_InsertUpdateConsumerLog]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[usp_core_InsertUpdateConsumerLog]        
  @FirstName nvarchar(200)=NULL         
 ,@SecondName nvarchar(200)=NULL         
 ,@FamilyName nvarchar(200)=NULL        
 ,@Gender smallint=NULL         
 ,@CountryID int=NULL         
 ,@CityID int=NULL         
 ,@NationalityID int=NULL          
 ,@ConsumerID int=NULL         
 ,@BirthDate  nvarchar(100)=NULL         
,@UnverifedEmailID varchar(100)=NULL         
,@UnverifiedPrimaryMobile varchar(15)=NULL         
,@AddedBy int     
,@AdminAttachFile nvarchar(500)=null     
,@AdminRemarks nvarchar(MAX)=null    
,@EmailConsumersUpdateLogID bigint out      
,@MobileConsumersUpdateLogID bigint out      
,@ErrorMessage nvarchar(1000) out        
AS        

BEGIN TRANSACTION SaveConsumer
 BEGIN TRY   
 
       Declare @UserID int;
	   Select @UserID = UserId from coc_consumers (NOLOCK) where ConsumerId = @ConsumerId;

   update coc_Consumers set FirstName=@FirstName,        
        SecondName=@SecondName,        
        FamilyName=@FamilyName,        
        Gender=@Gender,        
        CountryID=@CountryID,        
        CityID=@CityID,        
        NationalityID=@NationalityID,        
        BirthDate=CONVERT(DATETIME, @BirthDate, 102),        
		PrimaryMobile=@UnverifiedPrimaryMobile,
		EmailID=@UnverifedEmailID,
		AdminAttachFile=@AdminAttachFile,    
		AdminRemarks=@AdminRemarks  
  where ConsumerID=@ConsumerID   
  
   update coc_Users set MobileNumber=@UnverifiedPrimaryMobile,EmailID=@UnverifedEmailID where UserID=@UserID  
   Set @EmailConsumersUpdateLogID =1; 
   Set @MobileConsumersUpdateLogID =1;
  Set @ErrorMessage='Success';          
 
  COMMIT TRANSACTION SaveConsumer   
  
 END TRY        

BEGIN CATCH        
  ROLLBACK TRANSACTION SaveConsumer            
 Set @ErrorMessage ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),  
 Error_severity())+'>, ErrorState : <'+convert(varchar(500),   
 Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500),  
 Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';        
        
END CATCH       
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_InsertUpdateReportsProfile]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[USP_CORE_InsertUpdateReportsProfile]           
 @UserId INT ,        
 @ReportId INT ,      
 @ColumnName NVARCHAR(MAX),      
 @ProfileID INT = NULL,  
 @RoleID INT=NULL,
 @ProfileName VARCHAR(100),      
 @IsDefaultView bit = 0,    
 @SpStatus INT OUT,            
 @ErrorMessage NVARCHAR(500) OUT            
AS            
BEGIN     
 if(@RoleID=0)        
 set @RoleID=null;  

if(@UserId=0)        
 set @UserId=null;     
  
if(@ProfileID=0)    
 set @ProfileID=null;    
Select @RoleID = RoleId from coc_Users(NoLock) where UserID=@UserId  
    
BEGIN TRY            
IF Exists(Select ProfileId from coc_Core_ProfileReportsColumns where ProfileID=@ProfileID)      
 BEGIN      
 UPDATE coc_Core_ProfileReportsColumns SET IsDefault = 0 ,   
   UpdatedUserId = @UserId WHERE ProfileID = @ProfileID    
     UPDATE coc_Core_ProfileReportsColumns SET ColumnName = @ColumnName,IsDefault = @IsDefaultView,   
   UpdatedUserId = @UserId,RoleID=@RoleID WHERE ProfileID = @ProfileID;      
 END      
ELSE      
 BEGIN      
 if(@IsDefaultView = 1)  
     UPDATE coc_Core_ProfileReportsColumns SET IsDefault = 0,UpdatedUserId = @UserId WHERE UserID = @UserId and RoleID = @RoleID   
  
   INSERT INTO coc_Core_ProfileReportsColumns (ProfileName, UserID, ReportID,RoleId, ColumnName,CreatedDate,IsDefault)       
    VALUES (@ProfileName, @UserId, @ReportId,@RoleID, @ColumnName,getdate(),@IsDefaultView);      
 END     
     
 SET @SpStatus = 1;            
SET @ErrorMessage = 'Success';     
END TRY      
BEGIN CATCH            
SET @SpStatus = 0;            
SET @ErrorMessage = ERROR_MESSAGE();            
END CATCH            
            
END
GO
/****** Object:  StoredProcedure [dbo].[usp_core_InsertWebNotificationsBySQLJob]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_InsertWebNotificationsBySQLJob]    
 AS    
 SET NOCOUNT ON    
   
declare @DrawDetailsOfAfter3Days table (ECouponID bigint,DrawDate datetime)   
declare @DrawDetailsOfToday table (ECouponID bigint,DrawDate datetime)  
  
insert into @DrawDetailsOfAfter3Days    
 select distinct ECouponID ,DrawDate from coc_ECouponDraw(NOLOCK) where convert(date,DrawDate)=convert(date,getdate()+3)  
insert into @DrawDetailsOfToday  
   select  distinct ECouponID,DrawDate from coc_ECouponDraw(NOLOCK) where convert(date,DrawDate)=convert(date,getdate())  
  
  
  
  declare @CompetitionName nvarchar(1000)    
  declare @DrawName nvarchar(1000)    
  declare @LocationName nvarchar(1000)    
  declare @DrawDate datetime=null    
  declare @EcouponId bigint    
  declare @CompetitionStagingId bigint    
  declare @WebNotificationId bigint    
  declare @EServiceID int    
  declare @ServiceName nvarchar(1000)    
  declare @ServiceNameAR nvarchar(1000)    
  
--Code for after 3 days Notification  
DECLARE Cur_DrawDetailsOfAfter3Days CURSOR  
STATIC FOR   
SELECT ECouponID from @DrawDetailsOfAfter3Days  
OPEN Cur_DrawDetailsOfAfter3Days  
IF @@CURSOR_ROWS > 0  
 BEGIN   
 FETCH NEXT FROM Cur_DrawDetailsOfAfter3Days INTO @EcouponId  
 WHILE @@Fetch_status = 0  
 BEGIN  
 set @CompetitionName=''    
 set @DrawName=''    
 set @LocationName=''    
 set @DrawDate=null    
 set @EcouponId=0   
 set @EServiceID=0    
 set @ServiceName=''   
 Set @ServiceNameAR=''  
     
 select @EcouponId=ECouponID,@DrawDate=DrawDate from @DrawDetailsOfAfter3Days    
 select @EServiceID=EServiceID from coc_ECoupons(NOLOCK) where ECouponID=@EcouponId   
 select @CompetitionStagingId=CompetitionStagingID from coc_competition_staging(NOLOCK)  where CompetitionId=@EcouponId   
 select @ServiceName=EService from coc_EServiceLanguages(NOLOCK) where EServiceID=@EServiceID and LanguageID=1    
 select @ServiceNameAR=EService from coc_EServiceLanguages(NOLOCK) where EServiceID=@EServiceID and LanguageID=2   
    
 --here WebNotificationTypeID 6 enum value for Draw notification find details in code enum WebNotificationTypeIDEnum  
  insert into coc_core_WebNotifications(WebNotificationDate,WebNotificationTypeID,RedirectionLink,ParamValue,AssignedToAdmin,NotificationFor)  
   Values(getdate(),6,'Competition/StepTwo/',@CompetitionStagingId,1,@CompetitionName)  
  
    set @WebNotificationId=(SELECT SCOPE_IDENTITY())   
     
   insert into coc_WebNotificationLanguages  
   select @WebNotificationId,1,'Draw Notification for '+@ServiceName   
      
 insert into coc_WebNotificationLanguages  
   select @WebNotificationId,2,N' رسم إشعار لـ '+@ServiceNameAR   
  
 FETCH NEXT FROM Cur_DrawDetailsOfAfter3Days INTO @EcouponId  
 END  
END  
CLOSE Cur_DrawDetailsOfAfter3Days  
DEALLOCATE Cur_DrawDetailsOfAfter3Days  
  
--Code for today Notification  
DECLARE Cur_DrawDetailsOfToday CURSOR  
STATIC FOR   
SELECT ECouponID from @DrawDetailsOfToday  
OPEN Cur_DrawDetailsOfToday  
IF @@CURSOR_ROWS > 0  
 BEGIN   
 FETCH NEXT FROM Cur_DrawDetailsOfToday INTO @EcouponId  
 WHILE @@Fetch_status = 0  
 BEGIN    
 set @CompetitionName=''    
 set @DrawName=''    
 set @LocationName=''    
 set @DrawDate=null    
 set @EcouponId=0    
 set @EServiceID=0    
 set @ServiceName=''   
 Set @ServiceNameAR=''  
     
 select  @EcouponId=ECouponID,@DrawDate=DrawDate from @DrawDetailsOfToday    
        
 select @EServiceID=EServiceID from coc_ECoupons(NOLOCK) where ECouponID=@EcouponId   
 select @CompetitionStagingId=CompetitionStagingID from coc_competition_staging(NOLOCK)  where CompetitionId=@EcouponId   
 select @ServiceName=EService from coc_EServiceLanguages(NOLOCK) where EServiceID=@EServiceID and LanguageID=1    
 select @ServiceNameAR=EService from coc_EServiceLanguages(NOLOCK) where EServiceID=@EServiceID and LanguageID=2   
    
 --here WebNotificationTypeID 6 enum value for Draw notification find details in code enum WebNotificationTypeIDEnum  
 insert into coc_core_WebNotifications(WebNotificationDate,WebNotificationTypeID,RedirectionLink,ParamValue,AssignedToAdmin,NotificationFor)  
   Values(getdate(),6,'Competition/StepTwo/',@CompetitionStagingId,1,@CompetitionName)  
     set @WebNotificationId=(SELECT SCOPE_IDENTITY())   
     
   insert into coc_WebNotificationLanguages  
   select @WebNotificationId,1,'Draw Notification for '+@ServiceName   
      
 insert into coc_WebNotificationLanguages  
   select @WebNotificationId,2,N' رسم إشعار لـ '+@ServiceNameAR   
  
 FETCH NEXT FROM Cur_DrawDetailsOfToday INTO @EcouponId  
 END  
END  
CLOSE Cur_DrawDetailsOfToday  
DEALLOCATE Cur_DrawDetailsOfToday  
  
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Usp_core_IsParticipateConsumer]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[Usp_core_IsParticipateConsumer]                        
(                          
@ECouponID int,                    
@ConsumerID int = null,                  
@GuestID int = null,                 
@RetailOutletID int=null,                
@IsParticipate bit output   
)                        
as                        
begin                       
   declare @startdate date              
   declare @enddate date              
   declare @presentdate date              
   declare @Isactive bit              
if @ConsumerID =0                   
   set @ConsumerID = null;                  
              
  if @RetailOutletID =0                   
   set @RetailOutletID = null;               
               
 if @GuestID =0                  
   set  @GuestID = null;                  
                   
    if @ConsumerID is not null and exists(select ECouponParticipationID from coc_ECouponParticipations(NOLOCK) where ECouponID=@ECouponID and ConsumerID=@ConsumerID and (@RetailOutletID is null or RetailOutletID=@RetailOutletID))       
 begin      
     set @IsParticipate=1     
 end      
   else if @GuestID is not null and exists(select ECouponParticipationID from coc_ECouponParticipations(NOLOCK) where ECouponID=@ECouponID and GuestID=@GuestID and (@RetailOutletID is null or RetailOutletID=@RetailOutletID))                    
    begin      
      set @IsParticipate=1        
 end                
    else                    
  set @IsParticipate=0                    
                
  --if(@IsParticipate=0)              
  --   begin              
  --  set @presentdate=Convert(date,getdate())              
  --  select @startdate=Convert(date,ES.FromDate),@enddate=Convert(date,ES.ToDate),@Isactive=EV.IsActive from coc_ECoupons(Nolock) EV              
  --          inner join coc_Eservices(NOLock) ES on ES.EServiceID=EV.EServiceID              
  -- where EV.ECouponID=@ECouponID              
  --      if(@startdate <= @presentdate and @enddate >= @presentdate and @Isactive=1)              
  --     set @IsParticipate=0               
  --   else              
  --    set @IsParticipate=1                
                   
  --end       
  select @IsParticipate                        
end 
GO
/****** Object:  StoredProcedure [dbo].[Usp_Core_LoadParticipationsToRaffleDraw]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- Author:  RM    
-- Create date: 02-06-2021    
-- Description: Load participations from live table to raffle draw table    
-- =============================================    
CREATE PROCEDURE [dbo].[Usp_Core_LoadParticipationsToRaffleDraw]    
 @EserviceID int,    
 @DrawID int=null    
AS    
BEGIN    
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
 SET NOCOUNT ON;    
    
Declare @EcouponID int; 
Declare @MaintTableCount int; 
Declare @RaffleDrawTableCount int; 
select @EcouponID = EcouponID from coc_ECoupons where eserviceid = @EserviceID   
  
select @RaffleDrawTableCount=count(*)  from [eCoponRaffleDraw].[dbo].coc_ecouponparticipations(nolock) where ecouponid = @EcouponID   
select @MaintTableCount=count(*)  from coc_ecouponparticipations(nolock) where ecouponid = @EcouponID   
if(@RaffleDrawTableCount <= 0 and @MaintTableCount<>0)  Exec usp_core_MoveParticipationDataToDummyTable 2,@EserviceID,@DrawID,null    
END 
GO
/****** Object:  StoredProcedure [dbo].[Usp_Core_LogVerificationSentTime]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================                          
-- Author:  <Rafeeq Mohammad>                          
-- Create date: <dec-10-2020>                    
-- Description: Usp_Core_LogSentVerificationTime(Update consumer table with sent time)                      
-- =============================================                                            
CREATE PROCEDURE [dbo].[Usp_Core_LogVerificationSentTime]   
 @ConsumerId int  
,@IsEmailVerification bit = 0
,@IsMobileVerification bit = 0
,@LanguageID int                 =  1                      
,@UserID bigint                  =  null                      
,@RoleID bigint                  =  null                      
,@ImpersonationUserID bigint     =  null                      
,@SpResponseStatus int =null           out                      
,@SpResponseMessage nvarchar(max) =null out                      
,@SpErrorDetails nvarchar(max) =null    out                                      
AS                      
                      
 BEGIN TRY                      
      
  Set @SpResponseStatus=1;                      
  Set @SpResponseMessage='SUCCESS';                       
  Set @SpErrorDetails='SUCCESS';   
  
 if exists(Select ConsumerID from coc_Consumers(nolock) where ConsumerID = @ConsumerId)  
    BEGIN  
	    IF(@IsEmailVerification = 1)
	     Update coc_Consumers set EmailVerificationSentOn = GETDATE() where ConsumerID = @ConsumerId ;  
		IF(@IsMobileVerification = 1)
	     Update coc_Consumers set MobileOTPSentOn = GETDATE() where ConsumerID = @ConsumerId ;  
    END  
   
 ELSE  
    BEGIN  
		Set @SpResponseStatus=1;                      
		Set @SpResponseMessage='ConsumerNotExists';                       
		Set @SpErrorDetails='Consumer Not Exists';   
    END  
  
 END TRY                      
 BEGIN CATCH                      
   
 Set @SpResponseStatus=0;                      
 Set @SpResponseMessage='GenericError';                       
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())  
 + '>, ErrorSeverity : <'  
 + convert(varchar(500),Error_severity())  
 +'>, ErrorState : <'+convert(varchar(500), Error_state())  
 +'> , ErrorProcedure : <'+Error_procedure()   
 +'> ,ErrorLine <'+convert(varchar(500), Error_line())  
 +'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                       
 END CATCH                      
                      
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_Core_MobileService_CheckRequestReference]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_Core_MobileService_CheckRequestReference]        
(        
@ReferenceNo nvarchar(50),        
@RequestBody nvarchar(max)=null,        
@SPStatus int = NULL out  
)        
AS        
BEGIN        
 -- SET NOCOUNT ON added to prevent extra result sets from        
 -- interfering with SELECT statements.        
 SET NOCOUNT ON;        
 begin try         
 if not exists (select * from coc_core_MobileServiceReferenceLog(NOLOCK) where ReferenceNumber = @ReferenceNo)        
  begin        
   SET @SPStatus = 0;    
       insert into coc_core_MobileServiceReferenceLog(ReferenceNumber,RequestBody)  
       select @ReferenceNo,@RequestBody
     select @ReferenceNo  
  end             
 else              
   begin             
     update coc_core_MobileServiceReferenceLog set RequestBody  = @RequestBody where ReferenceNumber =  @ReferenceNo;      
     SET @SPStatus = 1;  
  end        
 end try        
 begin catch        
 SET @SPStatus = 1;        
 end catch        
            
END
GO
/****** Object:  StoredProcedure [dbo].[USP_Core_MobileUser_UpdateProfile]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_Core_MobileUser_UpdateProfile] (            
  @ConsumerID INT   
 ,@CityID INT = NULL  
 ,@CountryID INT  = NULL   
 ,@EmailID VARCHAR(100)   
 ,@PrimaryMobile VARCHAR(15)  = null   
 ,@FullName nvarchar(100) = null  
 ,@Gender SMALLINT   = NULL   
 ,@BirthDate VARCHAR(100) = NULL     
 ,@NationalityID INT = NULL               
 ,@UserIdentityTypeID int = null        
 ,@UserIdentityNumber nvarchar(100) = null  
 ,@ErrorMessage NVARCHAR(4000) = null  OUTPUT   
 ,@Success int = null  OUTPUT  
 ,@RequestMobileOtp  bit =null OUTPUT  
 ,@RequestEmailOtp  bit =null OUTPUT   
 ,@MobileOtp  int =null OUTPUT  
 ,@EmailOtp  int =null OUTPUT   
 )            
AS            
BEGIN            
 BEGIN TRY            
          
 --validate consumer for profile edit              
 Declare @RegistrationID int   
 Declare @OtpTypeID int   
 Declare @ExistsUserIdentityTypeID int = null   
 Declare @ExistUserIdentityNumber nvarchar(100) = null  
 Declare @CurrentEmailID VARCHAR(100) =null  
 Declare @CurrentPrimaryMobile VARCHAR(15)  = null   
 Declare @IsEmailUpdated bit= 0   
 Declare @IsMobileUpdated  bit= 0   
 Declare @EmailOTPID int  =NULL   
 Declare @MobileOTPID  int  =NULL  
 DECLARE @MobileOTPValue int  =NULL  
 DECLARE @EmailOTPValue int  =NULL  
  
     SET @RequestEmailOtp=0 ;set @MobileOtp=0 ;set @EmailOtp=0;set @RequestMobileOtp=0;
    SET @Success=0;  


  SELECT @ExistsUserIdentityTypeID=UserIdentityTypeID,  
   @ExistUserIdentityNumber=UserIdentityNumber  
         FROM coc_Consumers(NOLOCK)            
   WHERE ConsumerID = @ConsumerID   
  
 set @RegistrationID = @ConsumerID;          
if(@RegistrationID is not null and @RegistrationID  <> 0)              
  begin -- @RegistrationID null check if starts              
   Declare @ECouponID int = 0;              
   select top 1 @ECouponID = ECouponID   
   from coc_ECouponParticipations (NOLOCK)   
   where ConsumerID = @RegistrationID   
   order by ECouponParticipationID desc;              
 if(@ECouponID <> 0)              
  begin-- @@ECouponID null check if starts                
   Declare @FinalDrawDate datetime;              
   select @FinalDrawDate = max(drawdate)    
   from coc_ECouponDraw (NOLOCK)  
   where ecouponid = @ECouponID;               
   if(convert(date,getdate())<convert(date,@FinalDrawDate))              
    begin          
    --SET @ErrorMessage = 'Sorry, you cannot update your data, if you want to amend any of the data, please contact technical support at the following email: support@e-copon.com';              
    SELECT 1;          
    --Return;          
    end          
   end  -- @@ECouponID null check if ends               
   end -- @RegistrationID null check if ends             
          
if (IsNull(@UserIdentityNumber,'') <> ''   
   and @UserIdentityTypeID is not null   
   and @UserIdentityTypeID <> 0)   
   and  exists(Select UserIdentityNumber   
   From coc_Consumers(NoLock)   
   where UserIdentityNumber = @UserIdentityNumber   
   and ConsumerID <> @ConsumerID) ----if (UserIdentityNumber check)        
   begin          
    SET @ErrorMessage = 'AlreadyExistsUserIdentityNumber';  
    SET @Success=0;  
    --SELECT @ErrorMessage;      
    Return;        
            end --end if (UserIdentityNumber check)       
          
  --set @ErrorMessage = 'before if condition';    
 -- Condition for validate Email and Mobile already exists   
 IF EXISTS (SELECT PrimaryMobile  FROM coc_Consumers(NOLOCK) WHERE IsVerified = 1 AND IsActive = 1 AND IsDeleted = 0 AND PrimaryMobile = @PrimaryMobile and ConsumerID <> @ConsumerID)      
 BEGIN    
    SET @ErrorMessage = 'AlreadyExistsMobileNumber';  
    SET @Success=0;  
    --SELECT @ErrorMessage;      
    Return;   
 END   
 IF EXISTS (SELECT EmailID  FROM coc_Consumers(NOLOCK) WHERE IsVerified = 1 AND IsActive = 1 AND IsDeleted = 0 AND  EmailID = @EmailID and ConsumerID <> @ConsumerID)      
 BEGIN    
    SET @ErrorMessage = 'AlreadyExistsEmailID';  
    SET @Success=0;  
    --SELECT @ErrorMessage;      
    Return;   
 END   
 --get exists mobile and Email  
 SELECT  @CurrentEmailID=EmailID,@CurrentPrimaryMobile=PrimaryMobile FROM coc_Consumers(NOLOCK) WHERE ConsumerID = @ConsumerID  
 if((@UserIdentityTypeID is null or @UserIdentityTypeID=0) or (@UserIdentityNumber is null or @UserIdentityNumber=''))  
   begin  
    --Set flag true if Mobile updated   
 IF(@CurrentPrimaryMobile <> @PrimaryMobile)   
 begin    
    SET @ErrorMessage = 'Can not update Mobile Number Because UserIdentityTypeID or UserIdentityNumber is empty';  
    SET @Success=0;  
    --SELECT @ErrorMessage;      
    Return;   
 end  
 --Set flag if Email updated  
 IF(@CurrentEmailID <> @EmailID)   
 begin  
    SET @ErrorMessage  = 'Can not update Email because UserIdentityTypeID or UserIdentityNumber is empty';  
    SET @Success=0;  
    --SELECT @ErrorMessage;      
    Return;   
  
 end  
  
  end  
  IF(((@UserIdentityTypeID  is not null or @UserIdentityTypeID!=0) AND (@UserIdentityNumber is not null or @UserIdentityNumber !='')) AND (@CurrentPrimaryMobile= @PrimaryMobile AND  @CurrentEmailID = @EmailID))  --condition if @UserIdentityTypeID and @UserIdentityNumber not null and email mobile not changed  
   begin  
      UPDATE coc_Consumers            
    SET          
     CityID = case when @CityID = 0 then null else @CityID            end            
    ,BirthDate = IIF(@BirthDate IS NULL, @BirthDate, convert(DATETIME, @BirthDate, 103))   
    ,CountryID = @CountryID             
    ,NationalityID = @NationalityID            
    ,Gender = @Gender  
    ,UserIdentityTypeID = @UserIdentityTypeID            
    ,UserIdentityNumber = @UserIdentityNumber        
    ,FullName = @FullName        
    WHERE ConsumerID = @ConsumerID;  
	SET @ErrorMessage = 'Success';    
    SET @Success=1;  
  end  
  else IF((@UserIdentityTypeID  is not null or @UserIdentityTypeID!=0) AND (@UserIdentityNumber is not null or @UserIdentityNumber !=''))  --condition if @UserIdentityTypeID and @UserIdentityNumber not null and email mobile not changed  
   begin  
     IF(@CurrentPrimaryMobile <> @PrimaryMobile)   
   begin  
  set @IsMobileUpdated=1  
  --Generating otp for mobile change  
  EXEC dbo.core_usp_WebserviceGenerateOTP  134, @OtpID = @MobileOTPID OUTPUT,  @OTPValue = @MobileOTPValue OUTPUT  
  
  end  
 --Set flag if Email updated  
 IF(@CurrentEmailID <> @EmailID)   
 begin  
  set @IsEmailUpdated=1  
  --Generating otp for email change  
  EXEC dbo.core_usp_WebserviceGenerateOTP  135, @OtpID = @EmailOTPID OUTPUT,  @OTPValue = @EmailOTPValue OUTPUT  
 end  
  end  
   --For a customer whose Identity Type & Identity Number has already been saved, they can edit all fields including Mobile and email, but they cannot edit Identity number and Identity type  
     if(@IsEmailUpdated=1 or  @IsMobileUpdated=1)  
   begin  
      --if no mobile/ email change is detected. If email/ mobile value changes then we will send OTP to the email/ mobile. We save the details in a temporary table and return the Unique ID in response along with the flags RequestMobileOtp and RequestEmailOtp  
       --Insert data into temp table  
    insert into core_coc_temp_Consumers  
    select   
    @ConsumerID,  
    @EmailID,  
    @PrimaryMobile,  
    @IsMobileUpdated,  
    @IsEmailUpdated,  
    @FullName,  
    @CountryID,  
    @CityID,  
    @Gender,  
    @MobileOTPID, --if Mobile @OtpTypeID=134  
    @EmailOTPID,  --if Email @OtpTypeID=135  
    @BirthDate,  
    @NationalityID,  
    @UserIdentityTypeID,  
    @UserIdentityNumber,  
    getdate(),  
    getdate()  
    if(@IsMobileUpdated=1)  
    begin  
    SET @ErrorMessage = 'RequestMobileOtp';    
    SET @Success=0;  
    SET @MobileOtp=@MobileOTPValue  
    set @RequestMobileOtp=1  
    end  
    if(@IsEmailUpdated=1)  
    begin  
    SET @RequestEmailOtp=1  
    SET @EmailOtp=@EmailOTPValue  
    SET @ErrorMessage = 'RequestEmailOtp';    
    SET @Success=0;  
    end  
    Return   
    end  
          
 END TRY            
            
 BEGIN CATCH            
  SET @ErrorMessage = ERROR_MESSAGE();   
  SET @Success=0;  
  SET @ErrorMessage = ERROR_MESSAGE() + ' Error occurred';            
  SELECT @ErrorMessage;            
 END CATCH;            
END
GO
/****** Object:  StoredProcedure [dbo].[usp_core_MoveParticipationDataToDummyTable]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_MoveParticipationDataToDummyTable]   
 @SourceID int = 1,      -- 1= Job,2= Web    
 @EServiceID INTEGER=NULL,                   
 @DrawID INTEGER=NULL,
 @RetailOutletID INTEGER =null
AS                
begin                 
SET NOCOUNT ON     
 BEGIN TRY    
    Declare @LoopRecordCount int=100000 
    Declare @ECouponID bigint=NULL 
	Declare @ECouponDrawID bigint=NULL
    Declare @DrawTempID int=NULL  
    Declare @LastECouponParticipationID bigint=0 
    Declare @LiveTableRecordCount bigint=0  
	Declare @LiveTableRecordCountWithOutRetailOutlet bigint=0  
    Declare @TestTableRecordCount bigint=0  
	Declare @EcouponDrawPrizeID bigint=0
	Declare @Frequency int=0
	Declare @RetailOutlets int=0
	Declare @bodyMessage nvarchar(max); 
    if(@SourceID=1) -- From job  
    begin  
    DECLARE @DrawTemp Table (ID int identity(1,1),ECouponID bigint,ECouponDrawID bigint) 
	DECLARE @CompetitionTemp Table (ECouponID bigint) 
	DECLARE @DrawPrizeTemp Table (ECouponDrawPrizeID bigint,Frequency int,RetailOutlets int) 
    insert into @DrawTemp(ECouponID,ECouponDrawID)  
      Select distinct ED.ECouponID,ED.ECouponDrawID from coc_ECouponDraw(nolock) ED  
		 inner join coc_ECouponDrawPrizes(nolock) EDP on EDP.ECouponDrawID=ED.ECouponDrawID  
		 inner join coc_ECouponPrizes(nolock) EP on EP.ECouponPrizeID=EDP.ECouponPrizeID  
         Where Convert(date,ED.DrawDate)=Convert(date,getdate()) and Ep.PrizeCount>(Select count(*) from coc_ECouponWinners(nolock) where ECouponPrizeID=EP.ECouponPrizeID)  
	Set @LastECouponParticipationID=0
    While exists(select * from @DrawTemp)  
    begin  
     Set @ECouponID=NULL  
	 Set @ECouponDrawID=NULL
     Set @DrawID=NULL  
     Set @DrawTempID=NULL 
     Set @LiveTableRecordCount=0 
	 Set @LiveTableRecordCountWithOutRetailOutlet=0
     Set @TestTableRecordCount=0  

	 Select top 1 @DrawTempID=ID,@ECouponID=ECouponID,@ECouponDrawID=ECouponDrawID from @DrawTemp 

	 insert into @DrawPrizeTemp(ECouponDrawPrizeID,Frequency,RetailOutlets)
	      select ECouponDrawPrizeID,Frequency,Convert(int,isnull(RetailOutlets,0)) from coc_ECouponDrawPrizes(nolock) where ECouponDrawID=@ECouponDrawID
      While exists(select * from @DrawPrizeTemp)  
	  begin
	       Set @EcouponDrawPrizeID=0
		   Set @Frequency=0
		   Set @RetailOutlets=0
		   Select top 1 @EcouponDrawPrizeID=EcouponDrawPrizeID,@Frequency=Frequency,@RetailOutlets=RetailOutlets from @DrawPrizeTemp
		   if ((Select Count(*) from coc_ECouponParticipations(nolock) Where ECouponID=@ECouponID and RetailOutletID=@RetailOutlets)<@Frequency)
		   begin
		        Set @bodyMessage=''
		        set @bodyMessage=N'<html><body><p>ECouponID : '+Convert(nvarchar(100),isnull(@ECouponID,0))+ N'</p><br>';
				set @bodyMessage=@bodyMessage+N'<p>EcouponDrawPrizeID : '+Convert(nvarchar(100),isnull(@EcouponDrawPrizeID,0))+ N'</p><br>';
				set @bodyMessage=@bodyMessage+N'<p>RetailOutlets : '+Convert(nvarchar(100),isnull(@RetailOutlets,0))+ N'</p><br>';
				set @bodyMessage=@bodyMessage+N'<br/><br/></body></html>'; 
				exec msdb.dbo.sp_send_dbmail  
						 @profile_name = 'Email', 
						 --@recipients = 'shivams.1987@gmail.com', 
						 @recipients = 'amer.syed@logicsystems-me.com;shamim@logicsystems-me.com;feroz@logicsystems-me.com;M.aziz@e-copon.com;mshafi@logicsystems-me.com',    
						 --@copy_recipients='shamim@e-copon.com;',    
						 @subject = N'Participation retailoutlets are missing',  
						 @body  = @bodyMessage, 
						 @body_format='HTML'  
		   end
		   Delete from @DrawPrizeTemp where ECouponDrawPrizeID=@EcouponDrawPrizeID
	  end
	 if	not exists(select * from @CompetitionTemp where ECouponID=@ECouponID)
	 begin
	    insert into @CompetitionTemp
	        select @ECouponID
	    Select @TestTableRecordCount=Count(*) from [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations](nolock) Where ECouponID=@ECouponID  
     if(@TestTableRecordCount=0)  
	 begin
       Select top 1 @LastECouponParticipationID=ECouponParticipationID from coc_ECouponParticipations(nolock) Where ECouponID=@ECouponID Order By ECouponParticipationID ASC  
	   Set @LastECouponParticipationID=@LastECouponParticipationID-1
	 end
     else  
	 begin
	   if(@LastECouponParticipationID=0)
	       Select top 1 @LastECouponParticipationID=ECouponParticipationID from [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations](nolock) Where ECouponID=@ECouponID Order By ECouponParticipationID Desc  
       Select top 1 @LastECouponParticipationID=ECouponParticipationID from coc_ECouponParticipations(nolock) Where ECouponID=@ECouponID and ECouponParticipationID>@LastECouponParticipationID Order By ECouponParticipationID ASC  
	   Set @LastECouponParticipationID=@LastECouponParticipationID-1
	 end
  
     Select @LiveTableRecordCount=Count(*) from coc_ECouponParticipations(nolock) Where ECouponID=@ECouponID  

     if(@LiveTableRecordCount>0 and @LiveTableRecordCount>@TestTableRecordCount)  
     begin  
        While((@LiveTableRecordCount-@TestTableRecordCount)>0)  
        begin
		  Insert into [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations](ECouponParticipationID,ECouponID,EServiceID,Barcode,ParticipationMobile,ParticipationEmailID,ConsumerID,GuestID,RetailOutletID,ConsumerName,CorporateID,EnteredStandardBarcode,MembershipNumber,AllowStandardBarcode,SourceID,AddedDate,IsFromCompetitionLink)    
				 SELECT  EP.ECouponParticipationID,EC.ECouponID,EC.EServiceID,EP.Barcode,ISNULL(EP.ParticipationMobile,CS.PrimaryMobile),                
					  ISNULL(EP.ParticipationEmailID, CS.EmailID),EP.ConsumerID, NULL as GuestID,EP.RetailOutletID,ISNULL(EP.ConsumerName, ISNULL(CS.FirstName,'')+' '+ISNULL(CS.SecondName,'')+' '+ISNULL(CS.FamilyName,'')) ,ES.CorporateID,EP.EnteredStandardBarcode,CS.MembershipNumber,EC.AllowStandardBarcode,@SourceID,getdate(),ISNULL(EP.IsFromCompetitionLink,0)               
					  FROM coc_ECoupons EC(NOLOCK)                
						INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID          
						INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID                
						INNER JOIN coc_Consumers CS(NOLOCK) ON EP.ConsumerID=CS.ConsumerID   
					  WHERE EC.ECouponID= @ECouponID and EP.ECouponParticipationID>@LastECouponParticipationID and  EP.ECouponParticipationID<=(@LastECouponParticipationID+@LoopRecordCount)
					  and EP.ECouponParticipationID not in (Select EPP.ECouponParticipationID from [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations] EPP where EPP.ECouponID= @ECouponID)
					Order By EP.ECouponParticipationID Asc

		  Insert into [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations](ECouponParticipationID,ECouponID,EServiceID,Barcode,ParticipationMobile,ParticipationEmailID,ConsumerID,GuestID,RetailOutletID,ConsumerName,CorporateID,EnteredStandardBarcode,MembershipNumber,AllowStandardBarcode,SourceID,AddedDate,IsFromCompetitionLink)    
				SELECT EP.ECouponParticipationID,EC.ECouponID,EC.EServiceID, EP.Barcode, ISNULL(EP.ParticipationMobile,GS.PrimaryMobile),                
			         ISNULL(EP.ParticipationEmailID, GS.EmailID),Null as ConsumerID, EP.GuestID,EP.RetailOutletID,ISNULL(EP.ConsumerName, GS.FullName) ,ES.CorporateID,Ep.EnteredStandardBarcode ,NULL,EC.AllowStandardBarcode,@SourceID,getdate(),ISNULL(EP.IsFromCompetitionLink,0)              
					  FROM coc_ECoupons EC(NOLOCK)                
					  INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID              
					  INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID                
					  INNER JOIN coc_Guests GS(NOLOCK) ON EP.GuestID=GS.GuestID      
					   WHERE EC.ECouponID= @ECouponID and EP.ECouponParticipationID>@LastECouponParticipationID and  EP.ECouponParticipationID<=(@LastECouponParticipationID+@LoopRecordCount)
					   and EP.ECouponParticipationID not in (Select EPP.ECouponParticipationID from [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations] EPP where EPP.ECouponID= @ECouponID)
			    Order By EP.ECouponParticipationID Asc    
			
			 Select top 1 @LastECouponParticipationID=ECouponParticipationID from [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations](nolock) Where ECouponID=@ECouponID Order By ECouponParticipationID Desc  
			 Select top 1 @LastECouponParticipationID=ECouponParticipationID from coc_ECouponParticipations(nolock) Where ECouponID=@ECouponID and ECouponParticipationID>@LastECouponParticipationID Order By ECouponParticipationID ASC  
	         Set @LastECouponParticipationID=@LastECouponParticipationID-1
			 Select @TestTableRecordCount=Count(*) from [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations](nolock) Where ECouponID=@ECouponID   
         end  
     end  

	 end
     Delete from @DrawTemp where ID=@DrawTempID  
    end  
 end  
    else if(@SourceID=2 and @EServiceID is not null) -- From web  
    begin  
     Set @LastECouponParticipationID=0
     Set @ECouponID=NULL  
     Set @DrawID=NULL  
     Set @DrawTempID=NULL 
     Set @LiveTableRecordCount=0  
     Set @TestTableRecordCount=0  

	 Select @ECouponID=ECouponID from coc_ECoupons(nolock) where EServiceID=@EServiceID   
     Select @TestTableRecordCount=Count(ECouponParticipationID) from [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations](nolock) Where ECouponID=@ECouponID  
     
	 if(@TestTableRecordCount<>0)   
	 begin
	   if(@LastECouponParticipationID=0)
	       Select top 1 @LastECouponParticipationID=ECouponParticipationID from [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations](nolock) Where ECouponID=@ECouponID Order By ECouponParticipationID Desc  
       Select top 1 @LastECouponParticipationID=ECouponParticipationID from coc_ECouponParticipations(nolock) Where ECouponID=@ECouponID and ECouponParticipationID>@LastECouponParticipationID Order By ECouponParticipationID ASC  
	   Set @LastECouponParticipationID=@LastECouponParticipationID-1
	 end
  
     Select @LiveTableRecordCount=Count(ECouponParticipationID) from coc_ECouponParticipations(nolock) Where ECouponID=@ECouponID  
     if(@LiveTableRecordCount>0 and @LiveTableRecordCount>@TestTableRecordCount)  
     begin  
	    set @LoopRecordCount=5000
		if(@TestTableRecordCount=0) 
		begin
          Insert into [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations](ECouponParticipationID,ECouponID,EServiceID,Barcode,ParticipationMobile,ParticipationEmailID,ConsumerID,GuestID,RetailOutletID,ConsumerName,CorporateID,EnteredStandardBarcode,MembershipNumber,AllowStandardBarcode,SourceID,AddedDate,IsFromCompetitionLink)    
			 SELECT top (@LoopRecordCount) EP.ECouponParticipationID,EC.ECouponID,EC.EServiceID,EP.Barcode,ISNULL(EP.ParticipationMobile,CS.PrimaryMobile),                
			      ISNULL(EP.ParticipationEmailID, CS.EmailID),EP.ConsumerID, NULL as GuestID,EP.RetailOutletID,ISNULL(EP.ConsumerName, ISNULL(CS.FirstName,'')+' '+ISNULL(CS.SecondName,'')+' '+ISNULL(CS.FamilyName,'')) ,ES.CorporateID,EP.EnteredStandardBarcode,CS.MembershipNumber,EC.AllowStandardBarcode,@SourceID,getdate(),ISNULL(EP.IsFromCompetitionLink,0)               
				  FROM coc_ECoupons EC(NOLOCK)                
					INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID          
					INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID                
					INNER JOIN coc_Consumers CS(NOLOCK) ON EP.ConsumerID=CS.ConsumerID   
				  WHERE EC.ECouponID= @ECouponID 
				  and (@RetailOutletID is null or EP.RetailOutletID = @RetailOutletID)
				  and EP.ECouponParticipationID not in (Select EPP.ECouponParticipationID from [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations] EPP where EPP.ECouponID= @ECouponID)
				Order By Rand()
  
			Insert into [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations](ECouponParticipationID,ECouponID,EServiceID,Barcode,ParticipationMobile,ParticipationEmailID,ConsumerID,GuestID,RetailOutletID,ConsumerName,CorporateID,EnteredStandardBarcode,MembershipNumber,AllowStandardBarcode,SourceID,AddedDate,IsFromCompetitionLink)    
				SELECT top (@LoopRecordCount) EP.ECouponParticipationID,EC.ECouponID,EC.EServiceID, EP.Barcode, ISNULL(EP.ParticipationMobile,GS.PrimaryMobile),                
			         ISNULL(EP.ParticipationEmailID, GS.EmailID),Null as ConsumerID, EP.GuestID,EP.RetailOutletID,ISNULL(EP.ConsumerName, GS.FullName) ,ES.CorporateID,Ep.EnteredStandardBarcode ,NULL,EC.AllowStandardBarcode,@SourceID,getdate(),ISNULL(EP.IsFromCompetitionLink,0)              
					  FROM coc_ECoupons EC(NOLOCK)                
					  INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID              
					  INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID                
					  INNER JOIN coc_Guests GS(NOLOCK) ON EP.GuestID=GS.GuestID      
					   WHERE EC.ECouponID= @ECouponID 
					   and (@RetailOutletID is null or EP.RetailOutletID = @RetailOutletID)
					   and EP.ECouponParticipationID not in (Select EPP.ECouponParticipationID from [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations] EPP where EPP.ECouponID= @ECouponID)
			    Order By Rand() 
			end
			else
			begin
			   Insert into [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations](ECouponParticipationID,ECouponID,EServiceID,Barcode,ParticipationMobile,ParticipationEmailID,ConsumerID,GuestID,RetailOutletID,ConsumerName,CorporateID,EnteredStandardBarcode,MembershipNumber,AllowStandardBarcode,SourceID,AddedDate,IsFromCompetitionLink)    
				 SELECT top (@LoopRecordCount) EP.ECouponParticipationID,EC.ECouponID,EC.EServiceID,EP.Barcode,ISNULL(EP.ParticipationMobile,CS.PrimaryMobile),                
					  ISNULL(EP.ParticipationEmailID, CS.EmailID),EP.ConsumerID, NULL as GuestID,EP.RetailOutletID,ISNULL(EP.ConsumerName, ISNULL(CS.FirstName,'')+' '+ISNULL(CS.SecondName,'')+' '+ISNULL(CS.FamilyName,'')) ,ES.CorporateID,EP.EnteredStandardBarcode,CS.MembershipNumber,EC.AllowStandardBarcode,@SourceID,getdate(),ISNULL(EP.IsFromCompetitionLink,0)               
					  FROM coc_ECoupons EC(NOLOCK)                
						INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID          
						INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID                
						INNER JOIN coc_Consumers CS(NOLOCK) ON EP.ConsumerID=CS.ConsumerID   
					  WHERE EC.ECouponID= @ECouponID and EP.ECouponParticipationID>@LastECouponParticipationID
					  and (@RetailOutletID is null or EP.RetailOutletID = @RetailOutletID)
					  and EP.ECouponParticipationID not in (Select EPP.ECouponParticipationID from [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations] EPP where EPP.ECouponID= @ECouponID)
					Order By Rand()
  
			Insert into [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations](ECouponParticipationID,ECouponID,EServiceID,Barcode,ParticipationMobile,ParticipationEmailID,ConsumerID,GuestID,RetailOutletID,ConsumerName,CorporateID,EnteredStandardBarcode,MembershipNumber,AllowStandardBarcode,SourceID,AddedDate,IsFromCompetitionLink)    
				SELECT top (@LoopRecordCount) EP.ECouponParticipationID,EC.ECouponID,EC.EServiceID, EP.Barcode, ISNULL(EP.ParticipationMobile,GS.PrimaryMobile),                
			         ISNULL(EP.ParticipationEmailID, GS.EmailID),Null as ConsumerID, EP.GuestID,EP.RetailOutletID,ISNULL(EP.ConsumerName, GS.FullName) ,ES.CorporateID,Ep.EnteredStandardBarcode ,NULL,EC.AllowStandardBarcode,@SourceID,getdate(),ISNULL(EP.IsFromCompetitionLink,0)              
					  FROM coc_ECoupons EC(NOLOCK)                
					  INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID=ES.EServiceID              
					  INNER JOIN coc_ECouponParticipations EP(NOLOCK) ON EC.ECouponID=EP.ECouponID                
					  INNER JOIN coc_Guests GS(NOLOCK) ON EP.GuestID=GS.GuestID      
					   WHERE EC.ECouponID= @ECouponID and EP.ECouponParticipationID>@LastECouponParticipationID
					   and (@RetailOutletID is null or EP.RetailOutletID = @RetailOutletID)
					   and EP.ECouponParticipationID not in (Select EPP.ECouponParticipationID from [eCoponRaffleDraw].[dbo].[coc_ECouponParticipations] EPP where EPP.ECouponID= @ECouponID)
			    Order By Rand()
			end
     end  
    
    end  
  END TRY                
  BEGIN CATCH                  
   
                Declare @body nvarchar(max);
		        set @body=N'<html><body><p>Critical!!!- Draw Data loading process Failed</p><br>Error : '+Convert(nvarchar(max),ERROR_MESSAGE())+'<br>';
				set @body=@body+N'<br/><br/></body></html>'; 
				exec msdb.dbo.sp_send_dbmail  
						 @profile_name = 'Email', 
						 @recipients = 'amer.syed@logicsystems-me.com;shamim@logicsystems-me.com;feroz@logicsystems-me.com;M.aziz@e-copon.com;mshafi@logicsystems-me.com',    
						 @subject = N'Critical!!!- Draw Data loading process Failed.',  
						 @body  = @body, 
						 @body_format='HTML'  
  END CATCH                
 SET NOCOUNT OFF                
end
GO
/****** Object:  StoredProcedure [dbo].[Usp_Core_OTPVerifiedByConsumer]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================                            
-- Author:  <Rafeeq Mohammad>                            
-- Create date: <dec-10-2020>                      
-- Description: Usp_Core_OTPVerifiedByConsumer(OTP Verified By Consumer)                        
-- =============================================                                              
CREATE PROCEDURE [dbo].[Usp_Core_OTPVerifiedByConsumer]     
 @ConsumerId int
,@LanguageID int                 =  1                      
,@UserID bigint                  =  null                      
,@RoleID bigint                  =  null                      
,@ImpersonationUserID bigint     =  null
,@SpResponseStatus int =null           out                        
,@SpResponseMessage nvarchar(max) =null out                        
,@SpErrorDetails nvarchar(max) =null    out   
AS                        
                        
 BEGIN TRY                        
  Update coc_Consumers set IsMobileVerified = 1, IsVerified = 1 where ConsumerID = @ConsumerId  
			  Set @SpResponseStatus=1;                        
			  Set @SpResponseMessage='SUCCESS';                         
			  Set @SpErrorDetails='SUCCESS';
 END TRY                        
 BEGIN CATCH                        
     
 Set @SpResponseStatus=0;                        
 Set @SpResponseMessage='GenericError';                         
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())    
 + '>, ErrorSeverity : <'    
 + convert(varchar(500),Error_severity())    
 +'>, ErrorState : <'+convert(varchar(500), Error_state())    
 +'> , ErrorProcedure : <'+Error_procedure()     
 +'> ,ErrorLine <'+convert(varchar(500), Error_line())    
 +'> ErrorMessage : <'+ERROR_MESSAGE()+'>';                         
 END CATCH                        
                        
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_RejectConsumerRequestProfileDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[USP_CORE_RejectConsumerRequestProfileDetails]  
 @ConsumerId INT = NULL,   
 @AdminUserId INT = NULL,  
 @RejectComment NVARCHAR(2000) = NULL,
 @consumerStatusId VARCHAR(1) = NULL,
 @LanguageID INT = NULL,  
 @RoleID INT = NULL,  
 @UserID INT = NULL,  
 @ImpersonationUserID INT = NULL,  
 @SpResponseStatus INT OUT,  
 @SpResponseMessage NVARCHAR(MAX) OUT,  
 @SpErrorDetails NVARCHAR(MAX) OUT   
AS  
BEGIN TRY          
BEGIN   
  
UPDATE coc_ConsumerProfileEdit SET AdminRemarks = @RejectComment , UpdatedBy = @AdminUserId, ConsumerStatus = @consumerStatusId
WHERE ConsumerID = @ConsumerId  
 SET @SpResponseStatus=1;            
 SET @SpResponseMessage='Success';            
 SET @SpErrorDetails='Success';   
END           
 END TRY            
 BEGIN CATCH             
 Set @SpResponseStatus=0;            
 Set @SpResponseMessage='GenericError';            
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,            
  ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>,            
   ErrorState : <'+convert(varchar(500), Error_state())+'> ,            
    ErrorProcedure : <'+Error_procedure() +'> ,          
 ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';            
            
 END CATCH
GO
/****** Object:  StoredProcedure [dbo].[usp_core_ResetCorporateUserPasswordByAdmin]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================        
-- Author:  Narender Gorige        
-- Create date: 06 Nov 2021        
-- Description: Reset Corporate User Password By Admin    
-- =============================================        
CREATE PROCEDURE [dbo].[usp_core_ResetCorporateUserPasswordByAdmin]    
 @CorporateUserId int ,        
 @NewPassword nvarchar(100),
 @SpResponseStatus int = null out,        
 @SpResponseMessage nvarchar(max) = null out,        
 @SpErrorDetails nvarchar(max) = null out        
AS        
BEGIN        
SET NOCOUNT ON;  
Begin Transaction UpdateCorporateUserPassword   
 Begin Try          
  Set @SpResponseStatus=1;             
  Set @SpResponseMessage='Success';            
  Set @SpErrorDetails='Success';

  UPDATE coc_Users SET Password = @NewPassword, EditdDate=GETDATE() 
  where UserID = @CorporateUserId;      

  Commit Transaction UpdateCorporateUserPassword;     
END TRY                        
 BEGIN CATCH  
    RollBack Transaction UpdateCorporateUserPassword;      
	Set @SpResponseStatus=0;             
	Set @SpResponseMessage='GenericError';            
	Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';            
 END CATCH                        
END        
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_core_ResetUserPasswordByAdmin]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================        
-- Author:  Rafeeq Mohammad        
-- Create date: 15 November 2020        
-- Description: Reset User Password By Admin    
-- =============================================        
CREATE PROCEDURE [dbo].[usp_core_ResetUserPasswordByAdmin]    
 @ConsumerId int ,        
 @NewPassword nvarchar(100),
 @LanguageID INTEGER = 1,        
 @RoleID INTEGER = null,        
 @UserID bigint = null,        
 @ImpersonationUserID bigint=null,        
 @SpResponseStatus int = null out,        
 @SpResponseMessage nvarchar(max) = null out,        
 @SpErrorDetails nvarchar(max) = null out        
AS        
BEGIN        
SET NOCOUNT ON;  
Begin Transaction UpdateConsumer   
 Begin Try          
  Set @SpResponseStatus=1;             
  Set @SpResponseMessage='Success';            
  Set @SpErrorDetails='Success';
  
  DECLARE @ConsumerUserId bigint;
  Select @ConsumerUserId = UserId From coc_consumers(NoLock) where ConsumerId = @ConsumerId;

  UPDATE coc_Users SET Password = @NewPassword, EditdDate=GETDATE() where UserID = @ConsumerUserId;      
  UPDATE coc_Consumers SET EditDate=GETDATE() where ConsumerID = @ConsumerId;  

  Commit Transaction UpdateConsumer;     
END TRY                        
 BEGIN CATCH  
    RollBack Transaction UpdateConsumer;      
	Set @SpResponseStatus=0;             
	Set @SpResponseMessage='GenericError';            
	Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';            
 END CATCH                        
END        
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_RetailoutletDropDown]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[USP_CORE_RetailoutletDropDown]
@CompetitionStagingId bigint,
@LanguageID int = 1
AS
BEGIN

 SELECT CSR.RetailOutletID,CRL.RetailOutlet AS [Name]  from coc_Competition_Staging_RetailOutlets(NOLOCK) CSR 
 INNER JOIN coc_RetailOutletLanguages CRL (NOLOCK) ON CRL.RetailOutletID = CSR.RetailOutletID AND CRL.LanguageID = @LanguageID
 where CSR.CompetitionStagingId = @CompetitionStagingId

END
GO
/****** Object:  StoredProcedure [dbo].[usp_core_SaveAndGetEcouponStandardData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Rafeeq Mohammad>
-- Create date: <16-06-2020>
-- Description:	<Update ECoupon Table>
-- =============================================
CREATE PROCEDURE [dbo].[usp_core_SaveAndGetEcouponStandardData]
 @ECouponID bigint,
 @AllowStandardBarcode bit,
 @StandardBarcodeValue nvarchar(200),
 @MultipleParticipation bit,
 @NumberOfConsumerParticipations int=0,
 @NumberOfGuestParticipations int=0,
 @ParticipationByKiosk bit,
 @AllowWebParticipation bit,
 @AllowMobileParticipation bit,
 @IsShowMobile bit,
 @ParticipationCount int,
 @UserID INTEGER,     
 @LanguageID INT=1,     
 @RoleID BIGINT=0,     
 @ImpersonationUserID BIGINT=0,   
 @SpResponseStatus INT output,     
 @SpResponseMessage NVARCHAR(max) output,     
 @SpErrorDetails NVARCHAR(max) output ,
 @Operation int = 1-- 1 is for update other than 1 is get data
AS
BEGIN
SET NOCOUNT ON

	BEGIN TRY
	BEGIN TRANSACTION TRANSACTION_ECoupon
	if(@Operation = 1)
	BEGIN
			UPDATE coc_ECoupons
			  SET [ParticipationByKiosk] = @ParticipationByKiosk
			  ,[NumberOfConsumerParticipations] = @NumberOfConsumerParticipations
			  ,[NumberOfGuestParticipations] = @NumberOfGuestParticipations
			  ,[AllowMobileParticipation] = @AllowMobileParticipation
			  ,[AllowWebParticipation] = @AllowWebParticipation
			  ,[AllowStandardBarcode] = @AllowStandardBarcode
			  ,[StandardBarcodeValue] = @StandardBarcodeValue
			  ,[MultipleParticipation] = @MultipleParticipation
			  ,[ParticipationCount] = @ParticipationCount
			  ,[IsShowMobile] = @IsShowMobile
				WHERE ECouponID = @ECouponID
    END
	
	SELECT [ECouponID]
      ,[EServiceID]
      ,[ResultDate]
      ,[WinnerCount]
      ,[EntryTypeID]
      ,[MinInvoiceValue]
      ,[AdditionalCouponValue]
      ,[AllowMultipleInvoices]
      ,[CouponPerInvoice]
      ,[CouponPerMember]
      ,[UserAurthorised]
      ,[QuestionCount]
      ,[ImageFile]
      ,[UsesTerm]
      ,[ECouponTemplate]
      ,[ParticipationByKiosk]
      ,[MemberOnly]
      ,[RegistrationRequired]
      ,[IsApproved]
      ,[ApprovalDate]
      ,[IsActive]
      ,[AddDate]
      ,[AddUserID]
      ,[EditDate]
      ,[EditUserID]
      ,[ResulltDeclared]
      ,[DeclaredDate]
      ,[DeclaredBy]
      ,[DisplayImage]
      ,[Location]
      ,[NumberOfConsumerParticipations]
      ,[NumberOfGuestParticipations]
      ,[AllowMobileParticipation]
      ,[AllowWebParticipation]
      ,[AllowStandardBarcode]
      ,[StandardBarcodeValue]
      ,[MultipleParticipation]
      ,[ParticipationCount]
      ,[SentEVoucher]
      ,[GenderRestriction]
      ,[LocationURL]
      ,[StandardBarcodeByRetailOutlet]
      ,[TotalAllowedParticipationPerCustomer]
      ,[TotalAllowedParticipationPerCustomerPerDay]
      ,[AllowedParticipationPerBarcodePerCustomer]
      ,[AllowedParticipationPerBarcodePerCustomerPerDay]
      ,[TotalAllowedParticipationPerGuest]
      ,[TotalAllowedParticipationPerGuestPerDay]
      ,[AllowedParticipationPerAttemptInKiosk]
      ,[StandardBarcodePrefix]
      ,[StandardBarcodeWidth]
      ,[StandardBarcodeByQuestionBank]
      ,[ParticipationNotificationTemplateID]
      ,[ParticipationSMSTemplateID]
      ,[ParticipationEmailTemplateID]
      ,[SendSMS]
      ,[SendEmail]
      ,[CountryID]
      ,[Priority]
      ,[RecursiveHoursParticipationDuration]
      ,[RecursiveHoursNumberOfParticipations]
      ,[IsShowMobile]
	FROM coc_ECoupons (NOLOCK) WHERE ECouponID = @ECouponID
	
	SET @SpResponseStatus = 1;     
	SET @SpResponseMessage = 'Success'; 

	COMMIT TRANSACTION TRANSACTION_ECoupon
	END TRY

	BEGIN CATCH
	ROLLBACK TRANSACTION TRANSACTION_ECoupon
	SET @SpResponseStatus =0;     
	SET @SpResponseMessage = ERROR_MESSAGE();     
	SET @SpErrorDetails = ERROR_MESSAGE(); 
	END CATCH
	SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[usp_core_SaveDynamicLink]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- Author:  <Rafeeq Mohammad>    
-- Create date: <16-06-2020>    
-- Description: <Save Dynamic link>    
-- =============================================    
CREATE PROCEDURE [dbo].[usp_core_SaveDynamicLink]    
  @DynamicLinkID bigint    
 ,@LinkName nvarchar(150)    
 ,@EcouponID bigint    
 ,@RetailoutletID int    
 ,@BackgroundImage nvarchar(200)    
 ,@ModalPopupLogo nvarchar(200)    
 ,@ModalContentBackgroundImage nvarchar(200)    
 ,@IsActive bit = 0    
 ,@CompetitionImage nvarchar(200)    
 ,@UserID INTEGER,         
 @LanguageID INT=1,         
 @RoleID BIGINT=0,         
 @ImpersonationUserID BIGINT=0,       
 @SpResponseStatus INT output,         
 @SpResponseMessage NVARCHAR(max) output,         
 @SpErrorDetails NVARCHAR(max) output,
 @SocialMediaID int = NULL
AS    
BEGIN    
SET NOCOUNT ON    
    
IF EXISTS(SELECT LINKNAME FROM Coc_Core_DynamicLinks(nolock) WHERE LinkName = @LinkName) and (@DynamicLinkID = 0)    
   BEGIN    
    SET @SpResponseStatus = 0;    
    SET @SpResponseMessage = 'Link name already exists';     
    return;    
   END    
    
 BEGIN TRY    
 BEGIN TRANSACTION TRANSACTION_ECoupon     
 SET @SpResponseStatus = 1;         
 Declare @EcouponIsAcitve bit = 0;    
 Select @EcouponIsAcitve  = IsActive From coc_ECoupons(nolock) where EcouponID = @EcouponID    
 IF(@DynamicLinkID = 0)    
  BEGIN     
         
    INSERT INTO Coc_Core_DynamicLinks    
           (LinkName    
           ,EcouponID    
           ,RetailoutletID    
           ,BackgroundImage    
           ,ModalPopupLogo    
           ,ModalContentBackgroundImage    
           ,IsActive 
		   ,AutoParticipation
           ,CreatedOn    
           ,CreatedBy    
           ,CompetitionImage
           ,CompetitionType
           ,SocialMediaID)    
     SELECT     
      @LinkName    
           ,@EcouponID    
           ,@RetailoutletID    
           ,@BackgroundImage    
           ,@ModalPopupLogo    
           ,@ModalContentBackgroundImage    
           ,@EcouponIsAcitve  
		   ,1
           ,GETDATE()    
           ,@UserID    
           ,@CompetitionImage    
           ,CASE WHEN @SocialMediaID IS NOT NULL THEN 11 ELSE NULL END
           ,@SocialMediaID    
    IF not exists(Select top 1 * from coc_ECouponOutlets(nolock) where ECouponID =@EcouponID and RetailOutletID = @RetailoutletID  )  
  BEGIN  
      
 INSERT INTO coc_ECouponOutlets            
           (ECouponID            
           ,RetailOutletID            
           ,TotalAllowedParticipationPerCustomer            
           ,TotalAllowedParticipationPerCustomerPerDay            
           ,TotalAllowedParticipationPerGuest            
           ,TotalAllowedParticipationPerGuestPerDay            
           ,IsActive            
           ,AddDate            
           ,AddUserID            
           ,TotalAllowedParticipationinOutlet            
           ,TotalAllowedParticipationPerBarcode            
           ,TotalAllowedParticipationPerBarcodePerDay            
           )            
     VALUES            
           (            
   @EcouponID            
           ,@RetailoutletID            
           ,1            
           ,1            
           ,1            
           ,1            
           ,1            
           ,GETDATE()            
           ,@UserID             
           ,10000            
           ,10000            
           ,10000            
     )  
  
  END  
     SET @SpResponseMessage = 'Insert Success';     
   END    
    ELSE    
  BEGIN     
    
 IF EXISTS(SELECT LINKNAME FROM Coc_Core_DynamicLinks(nolock) WHERE LinkName = @LinkName and DynamicLinkID != @DynamicLinkID)    
 begin    
     
   SET @SpResponseStatus = 0;    
    SET @SpResponseMessage = 'Link name already exists';     
    
 end    
      
 Else    
 begin    
    
  UPDATE Coc_Core_DynamicLinks SET     
   LinkName=@LinkName    
           ,EcouponID=@EcouponID    
           ,RetailoutletID=@RetailoutletID    
           ,BackgroundImage=@BackgroundImage    
           ,ModalPopupLogo=@ModalPopupLogo    
           ,ModalContentBackgroundImage=@ModalContentBackgroundImage    
           ,IsActive=@EcouponIsAcitve    
           ,UpdateOn=GETDATE()    
           ,UpdatedBy=@UserID    
           ,CompetitionImage=@CompetitionImage    
           ,SocialMediaID=@SocialMediaID
     WHERE DynamicLinkID = @DynamicLinkID    
  IF not exists(Select top 1 * from coc_ECouponOutlets(nolock) where ECouponID =@EcouponID and RetailOutletID = @RetailoutletID  )  
  BEGIN  
      
 INSERT INTO coc_ECouponOutlets            
           (ECouponID            
           ,RetailOutletID            
           ,TotalAllowedParticipationPerCustomer            
           ,TotalAllowedParticipationPerCustomerPerDay            
           ,TotalAllowedParticipationPerGuest            
           ,TotalAllowedParticipationPerGuestPerDay            
           ,IsActive            
           ,AddDate            
           ,AddUserID            
           ,TotalAllowedParticipationinOutlet            
           ,TotalAllowedParticipationPerBarcode            
           ,TotalAllowedParticipationPerBarcodePerDay            
           )            
     VALUES            
           (            
   @EcouponID            
           ,@RetailoutletID            
           ,1            
           ,1            
           ,1            
           ,1            
           ,1            
           ,GETDATE()            
           ,@UserID            
           ,10000            
           ,10000            
           ,10000            
     )  
  
  END  
  
  SET @SpResponseMessage = 'Update Success';     
  end    
  END    
    
 COMMIT TRANSACTION TRANSACTION_ECoupon    
 END TRY    
    
 BEGIN CATCH    
 ROLLBACK TRANSACTION TRANSACTION_ECoupon    
 SET @SpResponseStatus =0;         
 SET @SpResponseMessage = ERROR_MESSAGE();         
 SET @SpErrorDetails = ERROR_MESSAGE();     
 END CATCH    
 SET NOCOUNT OFF    
END  
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_SaveECouponIntegralShopper]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_CORE_SaveECouponIntegralShopper]  
 (  
 @ECouponIntegralShopperID bigint,  
 @ECouponID bigint,  
 @BaseURL nvarchar(1000), 
 @PrivateKey nvarchar(1000),
 @ConsumerPlayGameCount int,  
 @GuestPlayGameCount int,  
 @ShowOnMobile bit,  
 @ShowOnWeb bit,  
 @AllowToPlayMultipleTimes bit,  
 @StandardBarcodeIsRequriedAllTheTime bit,  
 @UserID bigint=null,                
 @RoleID bigint=null,                
 @ImpersonationUserID bigint=null,                
 @SpResponseStatus int = null out,                
 @SpResponseMessage nvarchar(max) = null out,                
 @SpErrorDetails nvarchar(max) = null    out      
 )  
AS  
SET NOCOUNT ON  
 BEGIN TRY   
   
 BEGIN TRANSACTION TRN_SaveECouponIntegralShopper  
 Set @SpResponseStatus=1;                 
 Set @SpResponseMessage='Success';                
 Set @SpErrorDetails=NULL;    
 IF(@AllowToPlayMultipleTimes = 0)  
   BEGIN  
   SET @ConsumerPlayGameCount = 1;  
   SET  @GuestPlayGameCount=1;  
   SET @StandardBarcodeIsRequriedAllTheTime=0;  
   END  
   IF(exists(select top 1 ECouponIntegralShopperID from coc_core_ECouponIntegralShoppers (NOLOCK) where ECouponID=@ECouponID ))  
     BEGIN  
  SET @ECouponIntegralShopperID = (select top 1 ECouponIntegralShopperID from coc_core_ECouponIntegralShoppers(NOLOCK) where ECouponID=@ECouponID);  
  END  
  
 IF(@ECouponIntegralShopperID = 0)--if starts  
  BEGIN  
   INSERT INTO coc_core_ECouponIntegralShoppers  
           (ECouponID  
           ,BaseURL  
           ,ConsumerPlayGameCount  
           ,GuestPlayGameCount  
           ,ShowOnMobile  
           ,ShowOnWeb  
           ,AllowToPlayMultipleTimes  
           ,StandardBarcodeIsRequriedAllTheTime  
           ,CreatedBy  
           ,CreatedOn  
           ,IsActive
		   ,PrivateKey)  
     VALUES  
           (@ECouponID  
           ,@BaseURL  
           ,@ConsumerPlayGameCount  
           ,@GuestPlayGameCount  
           ,@ShowOnMobile  
           ,@ShowOnWeb  
           ,@AllowToPlayMultipleTimes  
           ,@StandardBarcodeIsRequriedAllTheTime  
           ,@UserID  
           ,GETDATE()  
           ,1
		   ,@PrivateKey)  
  
  END -- if ends  
   ELSE -- else starts  
     BEGIN  
  UPDATE coc_core_ECouponIntegralShoppers SET  
      ECouponID=@ECouponID  
     ,BaseURL=@BaseURL 
	 ,PrivateKey=@PrivateKey
           ,ConsumerPlayGameCount=@ConsumerPlayGameCount  
           ,GuestPlayGameCount=@GuestPlayGameCount  
           ,ShowOnMobile=@ShowOnMobile  
           ,ShowOnWeb=@ShowOnWeb  
           ,AllowToPlayMultipleTimes=@AllowToPlayMultipleTimes  
           ,StandardBarcodeIsRequriedAllTheTime=@StandardBarcodeIsRequriedAllTheTime  
     ,UpdatedBy = @userID  
     ,UpdatedOn = getdate()  
      where ECouponIntegralShopperID = @ECouponIntegralShopperID  
  END--else ends  
   COMMIT TRANSACTION TRN_SaveECouponIntegralShopper  
 END TRY  
BEGIN CATCH    
ROLLBACK TRANSACTION TRN_SaveECouponIntegralShopper;  
Set @SpResponseStatus=0;                 
Set @SpResponseMessage='Failed';                
SELECT @SpErrorDetails=ERROR_MESSAGE();  
RAISERROR(@SpErrorDetails, 16, 1);     
END CATCH  
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_SaveECouponIntegralShopperParam]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_CORE_SaveECouponIntegralShopperParam]
	(
	@IntegralShopperParamterID int = 0,
	@ECouponIntegralShopperID bigint,
	@ParameterName nvarchar(1000),
	@ParameterValue nvarchar(1000),
	@UserID bigint=null,              
	@RoleID bigint=null,              
	@ImpersonationUserID bigint=null,              
	@SpResponseStatus int = null out,              
	@SpResponseMessage nvarchar(max) = null out,              
	@SpErrorDetails nvarchar(max) = null    out    
	)
AS
SET NOCOUNT ON
	BEGIN TRY 
	
	BEGIN TRANSACTION TRN_SaveECouponIntegralShopper
		Set @SpResponseStatus=1;               
		Set @SpResponseMessage='Success';              
		Set @SpErrorDetails=NULL;  
	IF(@IntegralShopperParamterID = 0)
	   BEGIN--IF BEGINS
		INSERT INTO coc_core_IntegralShopperParameters(ECouponIntegralShopperID,ParameterName,ParameterValue,IsActive,CreatedBy,CreatedOn)
		SELECT @ECouponIntegralShopperID,@ParameterName,@ParameterValue,1,@UserID,GETDATE()
	   END--IF ENDS
	ELSE 
	   BEGIN
		UPDATE coc_core_IntegralShopperParameters SET ParameterName=@ParameterName,ParameterValue=@ParameterValue
		,UpdatedBy=@UserID,UpdatedOn=GETDATE()
		where IntegralShopperParamterID=@IntegralShopperParamterID
	  END--ELSE ENDS	
	Commit	TRANSACTION TRN_SaveECouponIntegralShopper;

	END TRY
BEGIN CATCH		
ROLLBACK TRANSACTION TRN_SaveECouponIntegralShopper;
Set @SpResponseStatus=0;               
Set @SpResponseMessage='Failed';              
SELECT @SpErrorDetails=ERROR_MESSAGE();
RAISERROR(@SpErrorDetails, 16, 1);			
END CATCH
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_core_SaveECouponParticipationFromCompetitionLink]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_SaveECouponParticipationFromCompetitionLink]                           
        
  @EcouponID INTEGER                            
        
 ,@ConsumerID INTEGER                            
        
 ,@GuestID INTEGER                           
        
 ,@Mobile [Mobile] = NULL                            
        
 ,@Email [Email] = NULL                            
        
 ,@AnswersXML XML                             
        
 ,@RetailoutletID INT = NULL                            
        
 ,@ParticipationBarcode NVARCHAR(100) = NULL OUTPUT                            
        
 ,@ErrorMessage [Remark] = NULL OUTPUT                            
        
 ,@NumberOfCopons INT = 1                            
        
 ,@SPStatus INT = NULL OUT                            
        
 ,@SPReturnMessage NVARCHAR(500) = NULL OUT                            
        
 ,@APIKey nvarchar(50) = null                    
        
 ,@RequestSourceType int = null                  
        
 ,@ReferenceNumber nvarchar(150)=null                
        
 ,@UploadImagePath NVARCHAR(200) = NULL         
        
 ,@IsNotRequiredEmail bit=0         
        
 ,@ConsumerName NVARCHAR(200) =NULL            
 ,@BranchName NVARCHAR(150) =NULL          
 ,@Question1 nvarchar(1000)=NULL        
 ,@Question2 nvarchar(1000)=NULL        
AS                            
        
SET NOCOUNT ON                            
        
BEGIN TRANSACTION SaveECouponConfiguration                            
        
BEGIN TRY                            
        
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;                            
        
 SET @SPStatus = 0;                            
        
 SET @SPReturnMessage = '';                            
        
                            
        
 DECLARE @EserviceTypeID INTEGER                            
        
 DECLARE @EServiceBarcodeID BIGINT                            
        
 DECLARE @Points INTEGER                            
        
 DECLARE @SelectedAnswer INTEGER                            
        
 DECLARE @EServiceID INTEGER                            
        
 DECLARE @NotificationID INTEGER                            
        
 DECLARE @NotificationSendID INTEGER                            
        
 DECLARE @LanguageID INTEGER                            
        
 DECLARE @CompetitionName NVARCHAR(200)                            
        
 --DECLARE @ConsumerName NVARCHAR(100)                            
        
 --DECLARE @EligibleCoupons integer                                          
        
 DECLARE @Barcode NVARCHAR(100)                          
        
                             
        
                          
        
 DECLARE @SMSBody nvarchar(max)                          
        
 DECLARE @EmailBody nvarchar(max)                          
        
                             
        
 DECLARE @TempBarcodeTable TABLE (                            
        
  Barcode NVARCHAR(100)                            
        
  ,EServiceBarcodeID INT                            
        
  ,NotificationID INT                            
        
  );                            
        
  if(@Mobile='')    
 set @Mobile=NULL    
 if(@Email='')    
 set @Email=NULL                           
        
 IF @ConsumerID = 0                            
        
  SET @ConsumerID = NULL                            
        
                            
        
 IF @GuestID = 0                            
        
  SET @GuestID = NULL                            
        
                            
        
 IF @RetailoutletID = 0                             
        
  set @RetailoutletID = null                            
        
                            
        
 if @RetailoutletID is not null                            
        
 begin                            
        
  if not exists (select * from [dbo].[coc_ECouponOutlets](NOLOCK) where retailoutletid = @RetailoutletID and ecouponid = @EcouponID and isactive = 1)                            
        
  begin                
        
   SET @ErrorMessage = 'Invalid Retail Outlet ID';                            
        
   SET @SPStatus = 1;                            
        
   SET @SPReturnMessage = @ErrorMessage;                            
        
   select * from @TempBarcodeTable;                            
        
   ROLLBACK TRANSACTION SaveECouponConfiguration;                              
        
   RETURN;                            
        
  end                            
        
 end                            
        
                  
        
 if not exists (select * from [dbo].[coc_ECoupons](NOLOCK) EC inner join [dbo].[coc_EServices] ES (NOLOCK) ON EC.eserviceid = ES.eserviceid                            
        
   where convert(date, getdate()) between convert(date, ES.FromDate)  and convert(date, ES.ToDate) and ES.isactive = 1 and EC.isactive =1)                            
        
 begin                            
        
  SET @ErrorMessage = 'Competition Not active';                         
        
  SET @SPStatus = 1;                            
        
  SET @SPReturnMessage = @ErrorMessage;                            
        
  select * from @TempBarcodeTable;                            
        
  ROLLBACK TRANSACTION SaveECouponConfiguration;                              
        
  RETURN;                            
        
 end                           
        
  IF @Email IS NOT NULL or @Mobile IS NOT NULL        
    BEGIN           
       DECLARE @ParticipationsCount int          
       SELECT @ParticipationsCount = count(*)              
       FROM coc_ECouponParticipations(NOLOCK)         
       WHERE  (ParticipationEmailID= @Email  or ParticipationMobile=@Mobile )         
        AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                                
        IF ( @ParticipationsCount >= 1)       
         BEGIN      
   SET @SPStatus = 1;                                  
            
   SET @SPReturnMessage = 'Already Participated with Same Mobile Or Email';                                  
            
   SET @SPReturnMessage = 'Already Participated with Same Mobile Or Email';                                  
            
   SET @ErrorMessage = 'Already Participated with Same Mobile Or Email';                                  
            
   select * from @TempBarcodeTable;                                  
            
   ROLLBACK TRANSACTION SaveECouponConfiguration;                                  
            
   RETURN;                                              
  END                                              
   END                  
        
                            
        
 print('@ConsumerID IS NULL   AND @GuestID IS NULL  ')                            
        
 print('@ConsumerID = '+ convert(varchar,@consumerid) )           
        
 print('@GuestID = '+ convert(varchar,@GuestID) )                   
        
                
        
 IF (                            
        
   @ConsumerID IS NULL                            
        
   AND @GuestID IS NULL                            
        
  )                            
        
 BEGIN                            
        
  INSERT INTO coc_ECouponParticipationsInvalid (                            
        
   ECouponID                            
        
   ,ParticipationDate                            
        
   ,Barcode                            
        
   ,ParticipationMobile                            
        
   ,ParticipationEmailID                            
        
   ,ConsumerID                            
        
   ,Reason                            
        
   ,ConsumerName                            
        
   )                            
        
  SELECT @EcouponID                   
        
   ,GETDATE()                            
        
   ,@Barcode                            
        
   ,@Mobile                            
        
   ,@Email                            
        
   ,@ConsumerID           
        
   ,'P'                            
        
   ,@ConsumerName                            
        
                            
        
  SET @ErrorMessage = 'Barcode is Not There to Asign';                            
        
  SET @SPStatus = 1;                            
        
  SET @SPReturnMessage = @ErrorMessage;                            
        
  select * from @TempBarcodeTable;                            
        
  ROLLBACK TRANSACTION SaveECouponConfiguration;                              
        
  RETURN;                            
        
 END                            
        
                            
        
 IF @ConsumerID IS NOT NULL                            
        
 BEGIN                            
        
  IF @Email IS NULL                            
        
   SELECT @Email = EmailID                            
        
   FROM coc_Consumers(NOLOCK)                            
        
   WHERE ConsumerID = @ConsumerID                            
        
    AND IsActive = 1                            
        
    AND IsDeleted = 0                            
        
    AND IsVerified = 1                            
        
                            
        
  IF @ConsumerName IS NULL                            
        
   SELECT @ConsumerName = isnuLL(FirstName, '') + ' ' + isnull(SecondName, '') + ' ' + isnull(FamilyName, '')                            
        
   FROM coc_Consumers(NOLOCK)                            
        
   WHERE ConsumerID = @ConsumerID                            
        
    AND IsActive = 1                            
        
    AND IsDeleted = 0                            
        
    AND IsVerified = 1                            
        
                            
        
  IF @Mobile IS NULL          
        
   SELECT @Mobile = PrimaryMobile                            
        
   FROM coc_Consumers(NOLOCK)                            
        
   WHERE ConsumerID = @ConsumerID                            
        
    AND IsActive = 1                            
        
    AND IsDeleted = 0                            
        
    AND IsVerified = 1                            
        
 END                            
        
ELSE                            
        
 BEGIN                            
        
  IF @Email IS NULL                            
        
   SELECT @Email = EmailID                            
        
   FROM coc_Guests(NOLOCK)                            
        
   WHERE GuestID = @GuestID                    
        
    AND IsActive = 1                            
        
    AND IsVerified = 1                            
        
                            
        
  IF @ConsumerName IS NULL                            
        
   SELECT @ConsumerName = isnuLL(FullName, '')                            
        
   FROM coc_Guests(NOLOCK)                            
        
   WHERE GuestID = @GuestID                            
        
    AND IsActive = 1                            
        
    AND IsVerified = 1                            
        
                            
        
  IF @Mobile IS NULL                            
        
   SELECT @Mobile = PrimaryMobile                            
        
   FROM coc_Guests(NOLOCK)               
        
   WHERE GuestID = @GuestID                            
        
    AND IsActive = 1                            
        
    AND IsVerified = 1                            
        
 END                            
        
                            
        
 IF @Mobile IS NULL                            
        
  OR len(@Mobile) <> 14                            
        
  OR SUBSTRING(@Mobile, 1, 6) <> '009665'                            
        
 BEGIN                            
        
  SET @ErrorMessage = 'InvalidMobile'   ;                
        
  SET @SPReturnMessage = @ErrorMessage;                           
        
 END                            
        
 ELSE IF @Email IS NULL and @IsNotRequiredEmail=0               
        
 BEGIN                            
        
  SET @ErrorMessage = 'InvalidEmail'   ;                
        
  SET @SPReturnMessage = @ErrorMessage;                               
        
 END                            
        
ELSE                            
        
 BEGIN                            
        
                                      
        
  DECLARE @Answers AS TABLE (                            
        
   ID INTEGER Identity(1, 1)                
        
   ,QuestionBankID INTEGER                            
        
   ,QuestionOptionID INTEGER                            
        
   ,AnswerRank INTEGER                            
        
   ,AnswerValue VARCHAR(100)                            
        
   )                            
        
                            
        
  INSERT INTO @Answers (                            
        
   QuestionBankID                            
        
   ,QuestionOptionID                            
        
   ,AnswerRank                            
        
 ,AnswerValue                            
        
   )                            
        
  SELECT Answer.value('(QuestionID[1])', 'INTEGER')                            
        
   ,Answer.value('(AnswerID[1])', 'INTEGER')                            
        
   ,Answer.value('(AnswerRank[1])', 'INTEGER')                            
        
   ,Answer.value('(AnswerValue[1])', 'VARCHAR(100)')                            
        
  FROM @AnswersXML.nodes('/ECouponParticipation/Answers') AS Data(Answer)                
        
                            
        
  UPDATE @Answers                            
        
  SET QuestionOptionID = NULL                            
        
  WHERE QuestionOptionID = 0                            
        
                                        
        
  SELECT @EServiceID = EServiceID                            
        
  FROM coc_ECoupons(NOLOCK)                            
        
  WHERE EcouponID = @EcouponID                            
        
                            
        
  DECLARE @errortext [Remark]                            
        
  DECLARE @return_value INT                            
        
                            
        
                                       
        
  PRINT @ConsumerId                            
        
  PRINT @EserviceId                            
        
  PRINT @errortext                            
        
                            
        
                                        
        
                              
        
                            
        
  DECLARE @NumberOfConsumerParticipations INT                            
        
  DECLARE @NumberOfGuestParticipations INT                            
        
  DECLARE @NumberOfParticipations INT                            
        
  DECLARE @LoyaltyPointSetupID INT = 103;                            
        
  DECLARE @AllowMultiple bit                            
        
  DECLARE @GeneralNotificationTemplateID INT                            
        
                            
        
  SELECT @EServiceID = EServiceID                            
        
   ,@NumberOfConsumerParticipations = ISNULL(NumberOfConsumerParticipations, 0)                            
        
   ,@NumberOfGuestParticipations = ISNULL(NumberOfGuestParticipations, 0)                            
        
   ,@NumberOfParticipations = ISNULL(participationCount, 0)                            
        
   ,@EserviceTypeID = EntryTypeID                            
        
   ,@AllowMultiple = MultipleParticipation                            
        
   ,@GeneralNotificationTemplateID = ParticipationNotificationTemplateID                            
        
  FROM coc_ECoupons(NOLOCK)                            
        
  WHERE ECouponID = @EcouponID                            
        
                            
        
  if(@AllowMultiple=0)                            
        
    set @NumberOfCopons = 1;                                    
                            
        
  if(isnull(@NumberOfParticipations,0)=0)                            
        
   set @NumberOfParticipations= 100                            
        
                            
        
         
        
 IF (                            
        
    @EserviceTypeID = 42                            
        
    OR @EserviceTypeID = 41                            
        
    )                            
        
  BEGIN                            
        
   DECLARE @Participations INT                            
        
   DECLARE @NoOfCoponsLeft INT;                            
        
                            
        
   IF @ConsumerID IS NOT NULL                            
        
   BEGIN                            
        
    SELECT @Participations = count(*) --, @NumberOfParticipations = @NumberOfConsumerParticipations                                           
        
    FROM coc_ECouponParticipations(NOLOCK) CP                            
        
    WHERE ConsumerID = @ConsumerID                            
        
     AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                          
        
                            
        
    IF (@NumberOfConsumerParticipations < (@NumberOfCopons + @Participations))                            
        
    BEGIN                            
        
     SET @NoOfCoponsLeft = @NumberOfConsumerParticipations - @Participations;                            
        
     SET @SPStatus = 1;                            
        
     SET @SPReturnMessage = 'Number of coupons exceeds Number of consumer participations count';                            
        
     SET @SPReturnMessage += ' you have only ' + convert(VARCHAR, @NoOfCoponsLeft) + ' coupons left';                            
        
   SET @ErrorMessage = 'You Already Participated';                            
        
     select * from @TempBarcodeTable;                            
        
     ROLLBACK TRANSACTION SaveECouponConfiguration;                            
        
     RETURN;                            
        
    END                            
        
   END                            
        
  ELSE                            
        
   BEGIN                            
        
    SELECT @Participations = count(*) --, @NumberOfParticipations = @NumberOfGuestParticipations                                             
        
    FROM coc_ECouponParticipations(NOLOCK) CP                            
        
    WHERE GuestID = @GuestID                    
        
     AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                           
        
                            
        
    IF (@NumberOfGuestParticipations < (@NumberOfCopons + @Participations))                            
        
    BEGIN                            
        
     SET @NoOfCoponsLeft = @NumberOfGuestParticipations - @Participations;                            
        
     SET @SPStatus = 1;                            
        
     SET @SPReturnMessage = 'Number of coupons exceeds Number of guest participations count';                            
        
     SET @SPReturnMessage += ' you have only ' + convert(VARCHAR, @NoOfCoponsLeft) + ' coupons left';               
        
  SET @ErrorMessage = 'You Already Participated';                            
        
     select * from @TempBarcodeTable;                            
        
     ROLLBACK TRANSACTION SaveECouponConfiguration;                                 
        
     RETURN;                                
    END                            
        
   END                              
        
                            
        
   IF ISNULL(@Participations, 0) < @NumberOfParticipations                            
        
   BEGIN                            
        
                     
        
    select @NotificationID = NotificationID from coc_notifications(NOLOCK) where eserviceid = @EServiceID                             
        
                            
        
    INSERT INTO @TempBarcodeTable (                            
        
     Barcode                          
        
     ,EServiceBarcodeID                           
        
     ,NotificationID                            
        
     )                            
        
    SELECT TOP (@NumberOfCopons)                             
        
     Barcode                            
        
     ,EServiceBarcodeID                            
        
     ,NotificationID                            
        
    FROM coc_EServiceBarcodes(NOLOCK) --WITH(XLOCK, ROWLOCK)                            
        
    WHERE                            
        
     Notificationid = @NotificationID                             
        
     AND IsUsed = 0                            
        
     AND AsignedMoile IS NULL                            
        
    ORDER BY Rand()                            
        
                    
        
 set @Barcode =(select top 1 Barcode from @TempBarcodeTable)                        
        
    --WAITFOR DELAY '00:00:4';                            
        
       print('barcode = ' +@Barcode )                           
        
    IF @ConsumerID IS NOT NULL                            
        
    BEGIN                            
        
                                
        
       EXEC AddCustomerLoyaltyPoints                             
        
        @EcouponID,                            
        
        @ConsumerID,                            
        
        @LoyaltyPointSetupID,                            
        
        @ErrorMessage OUTPUT                                
        
                                
        
    END                            
        
                            
        
  Declare @UsedByAPI bit;                    
        
  if(@APIKey is not null)                    
        
   set @UsedByAPI = 1;                    
        
                    
        
    UPDATE EB                            
        
    SET ConsumerID = @ConsumerID                            
        
     ,AsignedMoile = @Mobile                            
        
     ,IsUsed = 1                     
        
     ,UsedDate = GETDATE()                     
        
     ,GuestID = @GuestID                          
        
  ,UsedByAPI=@UsedByAPI                        
        
  ,RetailoutletID=@RetailoutletID                        
        
     ,APIKey=@APIKey                        
        
    FROM coc_EServiceBarcodes(NOLOCK) EB              
        
    WHERE EServiceBarcodeID IN (                            
        
      SELECT EServiceBarcodeID                            
        
      FROM @TempBarcodeTable                            
        
      )        and IsUsed= 0     AND AsignedMoile IS NULL                   
        
                   
        
           if @@ROWCOUNT <> @NumberOfCopons        
        
   begin                            
        
     SET @ErrorMessage = 'Transaction Error';                            
        
     SET @SPStatus = 1;                            
        
     SET @SPReturnMessage = @ErrorMessage;                            
        
     select * from @TempBarcodeTable;                            
        
     ROLLBACK TRANSACTION SaveECouponConfiguration;                              
        
     RETURN;                            
        
    end                              
        
    IF (ISNULL(@Barcode, '0') != '0') OR EXISTS ( SELECT *FROM @TempBarcodeTable)                 
        
 BEGIN                            
        
     DECLARE @ECouponParticipationID BIGINT                            
        
                            
        
     INSERT INTO coc_ECouponParticipations (                            
        
      ECouponID                            
        
      ,ParticipationDate                            
        
      ,Barcode                            
        
,ParticipationMobile                            
        
      ,ParticipationEmailID                            
        
      ,ConsumerID                            
        
      ,GuestID                            
        
      ,ConsumerName                            
        
      ,RetailoutletID                     
        
   ,RequestSourceType                  
        
   ,ReferenceNumber              
        
   ,UploadImagePath        
        
   ,IsFromCompetitionLink                         
   ,BranchName        
   ,Question1        
   ,Question2        
   )                            
        
     SELECT @EcouponID                            
        
      ,GETDATE()                            
        
      ,Barcode                            
        
      ,@Mobile                            
        
      ,@Email                            
        
      ,@ConsumerID                            
        
      ,@GuestID                            
        
      ,@ConsumerName                            
        
      ,@RetailoutletID                  
        
   ,@RequestSourceType                   
        
   ,@ReferenceNumber                
        
   ,@UploadImagePath             
        
   ,1                
   ,@BranchName        
   ,@Question1        
   ,@Question2        
     FROM @TempBarcodeTable                            
        
                            
        
     --SELECT @NotificationSendID = NotificationSendID                            
        
     --FROM coc_NotificationSends(NOLOCK)                            
        
     --WHERE NotificationID = @NotificationID                            
        
                            
        
     SELECT @ECouponParticipationID = SCOPE_IDENTITY()                            
        
                            
        
     DECLARE @ID INTEGER                            
        
     DECLARE @QuestionBankID INTEGER                            
        
     DECLARE @QuestionOptionID INTEGER                            
        
     DECLARE @AnswerRank INTEGER                       
        
     DECLARE @AnswerValue VARCHAR(100)                            
        
                            
        
     --@Answers (ID, QuestionBankID, QuestionOptionID, AnswerRank)                                            
        
     SELECT TOP 1 @ID = ID                            
        
      ,@QuestionBankID = QuestionBankID                            
        
      ,@QuestionOptionID = QuestionOptionID                            
        
      ,@AnswerRank = AnswerRank                            
        
      ,@AnswerValue = AnswerValue                            
        
     FROM @Answers                            
        
                            
        
     DECLARE @ActiveID INTEGER                            
        
                            
        
     WHILE @ID IS NOT NULL                       
        
      AND @ID <> ISNULL(@ActiveID, 0)                            
        
     BEGIN                            
        
      SET @ActiveID = @ID                            
        
                            
        
      INSERT INTO coc_ECouponParticipationAnswers (                            
        
       QuestionBankID                            
        
       ,QuestionOptionID                            
        
       ,AnswerRank                            
        
       ,ECouponParticipationID                            
        
       ,AnswerValue                            
        
       )                         
        
      VALUES (           
        
       @QuestionBankID              
        
       ,@QuestionOptionID                            
        
       ,@AnswerRank                            
        
       ,@ECouponParticipationID                            
        
       ,@AnswerValue                          
        
   )                            
        
                            
        
      SELECT TOP 1 @ID = ID                            
        
       ,@QuestionBankID = QuestionBankID                            
        
       ,@QuestionOptionID = QuestionOptionID                            
        
       ,@AnswerRank = AnswerRank                            
        
       ,@AnswerValue = AnswerValue                            
        
      FROM @Answers                            
        
      WHERE ID > @ActiveID                            
        
     END                            
        
                            
        
     IF @ConsumerID IS NOT NULL                            
        
     BEGIN                            
        
                             
        
      SELECT @EServiceBarcodeID = null                            
        
      SELECT *                            
        
       FROM @TempBarcodeTable order by EServiceBarcodeID ASC                            
        
      SELECT top 1 @EServiceBarcodeID = EServiceBarcodeID                            
        
       ,@Barcode = Barcode                            
        
      FROM @TempBarcodeTable order by EServiceBarcodeID ASC                            
        
      print '@EServiceBarcodeID: '+convert(varchar,@EServiceBarcodeID)                            
        
      WHILE @EServiceBarcodeID IS NOT NULL AND @EServiceBarcodeID <> ISNULL(@ActiveID, 0)                            
        
      BEGIN                            
        
       SET @ActiveID = @EServiceBarcodeID                            
        
                   
        
                              
        
                                
        
       EXEC SaveNotificationSending                            
        
          @NotificationID                            
        
         ,@EcouponID                            
        
         ,@ConsumerID                            
        
         ,@GeneralNotificationTemplateID                            
        
         ,@EServiceID                            
        
         ,@Barcode                            
        
         ,@ErrorMessage OUTPUT                            
        
       SELECT top 1 @EServiceBarcodeID = EServiceBarcodeID                            
        
        ,@Barcode = Barcode                            
        
       FROM @TempBarcodeTable                             
        
       WHERE EServiceBarcodeID > @ActiveID                            
        
       order by EServiceBarcodeID ASC                            
        
      END                           
        
     END                            
        
     SET @ParticipationBarcode = @Barcode;                            
        
     SELECT Barcode                            
        
      ,EServiceBarcodeID                            
        
      ,NotificationID                            
        
     FROM @TempBarcodeTable                            
        
     SET @ErrorMessage = ''                            
        
    END                            
        
    ELSE                            
        
    BEGIN                            
        
     SET @ErrorMessage = 'Barcode is Not There to Asign'                            
        
     SET @SPStatus = 1;                      
        
     SET @SPReturnMessage = @ErrorMessage;                            
        
     select * from @TempBarcodeTable;                            
        
    END                            
        
   END                            
        
 ELSE                            
        
   BEGIN                            
        
    INSERT INTO coc_ECouponParticipationsInvalid (                            
        
     ECouponID                            
        
     ,ParticipationDate                            
        
     ,Barcode                            
        
     ,ParticipationMobile                            
        
     ,ParticipationEmailID                            
        
     ,ConsumerID                      
        
     ,Reason                            
        
     ,ConsumerName   
        
     )                            
        
    SELECT @EcouponID                            
        
     ,GETDATE()                            
        
     ,Barcode                            
        
     ,@Mobile                            
        
     ,@Email                            
        
     ,@ConsumerID                            
        
     ,'P'                            
        
     ,@ConsumerName                            
        
    FROM @TempBarcodeTable                            
        
    select * from @TempBarcodeTable;           
        
    SET @ErrorMessage = 'You Already Participated'                            
        
    SET @SPStatus = 1;                            
        
    SET @SPReturnMessage = @ErrorMessage;                            
        
   END                            
        
  END                            
        
 ELSE -- else entrytypeid not in 41 or 42                            
        
  BEGIN                            
        
   select * from @TempBarcodeTable;                            
        
   SET @ErrorMessage = 'Invalid Competition Type'                            
        
   SET @SPStatus = 1;                            
        
   SET @SPReturnMessage = @ErrorMessage;                        
        
  END                            
        
                            
        
  IF (ISNULL(@ErrorMessage, '') <> '')                            
        
  BEGIN                            
        
   IF @ConsumerID IS NOT NULL                            
        
   BEGIN                  -------------------------------------------------------------------//                                       
        
    --//-------------------------------------------------------                                          
        
    DECLARE @return_value1 INT                            
        
                            
        
    EXEC @return_value1 = [dbo].[SaveEServiceAddOnConsumers] @ConsumerID = @ConsumerID                            
        
     ,@EServiceID = @EServiceID                            
        
                            
        
    PRINT '@return_value1'                            
        
    PRINT @return_value1                            
        
                            
        
    --------------------------------------------------------------------//                                          
        
    SET XACT_ABORT ON;                            
        
   END                            
        
  END                            
        
                            
        
  SELECT @ErrorMessage                            
        
                            
        
                          
        
 END                            
        
                   
        
                          
        
 COMMIT TRANSACTION SaveECouponConfiguration                            
        
END TRY                            
        
                            
        
BEGIN CATCH                            
        
 ROLLBACK TRANSACTION SaveECouponConfiguration                            
        
                            
        
 SELECT @ErrorMessage = ERROR_MESSAGE()                            
        
                            
        
 SET @SPStatus = 1;                            
        
 SET @SPReturnMessage = @ErrorMessage;                            
        
                            
        
 RAISERROR (          
        
   @ErrorMessage                            
        
   ,16                            
        
   ,1                            
        
   );                            
        
END CATCH                            
        
                            
        
SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[usp_core_SaveEcouponSpecialBarcodeData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================        
-- Author:  <Rafeeq Mohammad>        
-- Create date: <16-06-2020>        
-- Description: <Save to coc_ECouponOutlets Table and coc_ECouponStandardBarcodes Table>        
-- =============================================        
CREATE PROCEDURE [dbo].[usp_core_SaveEcouponSpecialBarcodeData]        
 @ECouponID bigint,        
 @RetailOutletID int,        
 @FromECouponOutletID int= null,        
 @StandardBarcodeValue nvarchar(200),        
 @TotalAllowedParticipationPerCustomer int=0,        
 @TotalAllowedParticipationPerCustomerPerDay int=0,        
 @TotalAllowedParticipationPerGuest int=0,        
 @TotalAllowedParticipationPerGuestPerDay int = 0,        
 @TotalAllowedParticipationinOutlet int=0,        
 @TotalAllowedParticipationPerBarcode int=0,        
 @TotalAllowedParticipationPerBarcodePerDay int=0,        
 @UserID INTEGER,             
 @LanguageID INT=1,             
 @RoleID BIGINT=0,             
 @ImpersonationUserID BIGINT=0,           
 @SpResponseStatus INT output,             
 @SpResponseMessage NVARCHAR(max) output,             
 @SpErrorDetails NVARCHAR(max) output         
AS        
BEGIN        
SET NOCOUNT ON        
      
        
 BEGIN TRY        
 BEGIN TRANSACTION TRANSACTION_ECoupon        
   if(@FromECouponOutletID = 0 or @FromECouponOutletID is null)      
      BEGIN    
   DECLARE @ECouponOutletID bigint ;  
   
  INSERT INTO coc_ECouponOutlets        
           (ECouponID        
           ,RetailOutletID        
           ,TotalAllowedParticipationPerCustomer        
           ,TotalAllowedParticipationPerCustomerPerDay        
           ,TotalAllowedParticipationPerGuest        
           ,TotalAllowedParticipationPerGuestPerDay        
           ,IsActive        
           ,AddDate        
           ,AddUserID        
           ,TotalAllowedParticipationinOutlet        
           ,TotalAllowedParticipationPerBarcode        
           ,TotalAllowedParticipationPerBarcodePerDay        
           )        
     VALUES        
           (        
      @ECouponID        
           ,@RetailOutletID        
           ,@TotalAllowedParticipationPerCustomer        
           ,@TotalAllowedParticipationPerCustomerPerDay        
           ,@TotalAllowedParticipationPerGuest        
           ,@TotalAllowedParticipationPerGuestPerDay        
           ,1        
           ,GETDATE()        
           ,@UserID        
           ,@TotalAllowedParticipationinOutlet        
           ,@TotalAllowedParticipationPerBarcode        
           ,@TotalAllowedParticipationPerBarcodePerDay        
     )    
  set @ECouponOutletID = SCOPE_IDENTITY();              
  INSERT INTO coc_ECouponStandardBarcodes(ECouponOutletID,StandardBarcode,IsActive,AddDate,AddUserID,ECouponID,Type)        
  Select @ECouponOutletID,@StandardBarcodeValue,1,GETDATE(),@UserID,@ECouponID,1 ;    
  SET @SpResponseMessage = 'Insert Success';         
  
  
  
  
  END  
    
    
   ELSE      
     BEGIN      
      
   UPDATE coc_ECouponOutlets  SET      
           ECouponID = @ECouponID        
           ,RetailOutletID = @RetailOutletID        
           ,TotalAllowedParticipationPerCustomer  = @TotalAllowedParticipationPerCustomer        
           ,TotalAllowedParticipationPerCustomerPerDay = @TotalAllowedParticipationPerCustomerPerDay        
           ,TotalAllowedParticipationPerGuest =@TotalAllowedParticipationPerGuest        
           ,TotalAllowedParticipationPerGuestPerDay  =@TotalAllowedParticipationPerGuestPerDay                   
           ,EditDate=GETDATE()        
           ,EditUserID = @UserID      
           ,TotalAllowedParticipationinOutlet=@TotalAllowedParticipationinOutlet        
           ,TotalAllowedParticipationPerBarcode=@TotalAllowedParticipationPerBarcode        
           ,TotalAllowedParticipationPerBarcodePerDay=@TotalAllowedParticipationPerBarcodePerDay        
     WHERE ECouponOutletID = @FromECouponOutletID      
    
  update coc_ECouponStandardBarcodes set StandardBarcode = @StandardBarcodeValue ,EditDate= GETDATE(),EditUserID = @UserID     
  where ECouponOutletID = @FromECouponOutletID;    
  SET @SpResponseMessage = 'Update Success';         
      
  END      
      
 SET @SpResponseStatus = 1;             
     
        
 COMMIT TRANSACTION TRANSACTION_ECoupon        
 END TRY        
        
 BEGIN CATCH        
 ROLLBACK TRANSACTION TRANSACTION_ECoupon        
 SET @SpResponseStatus =0;             
 SET @SpResponseMessage = ERROR_MESSAGE();             
 SET @SpErrorDetails = ERROR_MESSAGE();         
 END CATCH        
 SET NOCOUNT OFF        
END
GO
/****** Object:  StoredProcedure [dbo].[usp_core_UpdateConsumerDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[usp_core_UpdateConsumerDetails]  
  @ConsumersUpdateLogID bigint  
 ,@ErrorMessage nvarchar(1000) out  
AS  
 BEGIN TRY  

 declare @ExpireInMinutes int=30

 declare @EmailID nvarchar(100)=NULL 
 declare @Mobile nvarchar(15)=NULL
 declare @ConsumerID int
 declare @UserID int
 declare @AddedDate datetime
 set @ErrorMessage=''
 select @EmailID=UnverifedEmailID,@Mobile=UnverifiedPrimaryMobile,@ConsumerID=ConsumerID,@AddedDate=AddedDate  from coc_ConsumersUpdateLog(nolock)
 where ConsumersUpdateLogID=@ConsumersUpdateLogID  and VerifiedDate is null

 Set @AddedDate=DATEADD(MINUTE, @ExpireInMinutes, @AddedDate)
 if(getdate()>@AddedDate)
 begin
   set @ErrorMessage='Expired'
     return;
 end
 
 if(@EmailID is not null)
 begin
   update coc_Consumers set EmailID=@EmailID where ConsumerID=@ConsumerID  
   select @UserID=UserID from coc_Consumers(nolock) where ConsumerID=@ConsumerID 
   update coc_Users set EmailID=@EmailID where UserID=@UserID
   update coc_ConsumersUpdateLog set VerifiedDate=getdate(),IsEmailVerified=1 where ConsumersUpdateLogID=@ConsumersUpdateLogID  
    Set @ErrorMessage='Success'; 
 end
 if(@Mobile is not null)
 begin
   update coc_Consumers set PrimaryMobile=@Mobile where ConsumerID=@ConsumerID  
   select @UserID=UserID from coc_Consumers(nolock) where ConsumerID=@ConsumerID  
    update coc_Users set MobileNumber=@Mobile where UserID=@UserID
   update coc_ConsumersUpdateLog set VerifiedDate=getdate(),IsMobileVerified=1 where ConsumersUpdateLogID=@ConsumersUpdateLogID  
     Set @ErrorMessage='Success'; 
 end

 
  
 END TRY  
  
BEGIN CATCH  
  
 Set @ErrorMessage ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>, ErrorState : <'+convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';  
  
END CATCH  
  
GO
/****** Object:  StoredProcedure [dbo].[usp_core_UpdateConsumerProfileByAdmin]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================                
-- Author:  Rafeeq Mohammad                
-- Create date: 15 November 2020                
-- Description: Update Consumer Profile               
-- =============================================                
CREATE PROCEDURE [dbo].[usp_core_UpdateConsumerProfileByAdmin]               
 @ConsumerId int,                
 @FullName nvarchar(250) = null,            
 @MembershipNumber varchar(50) = null,            
 @UserIdentityTypeId int = null,            
 @UserIdentityNumber nvarchar(100) = null,            
 @EmailID nvarchar(100) = null,            
 @PrimaryMobile nvarchar(20) = null,        
 @CountryId int = null,      
 @CityId int = null,      
 @NationalityId int = null,      
 @BirthDate datetime = null,      
 @Gender int = null,      
 @IsActive bit=null,            
 @LanguageID INTEGER = 1,                
 @RoleID INTEGER = null,                
 @UserID bigint = null,                
 @ImpersonationUserID bigint=null,                
 @SpResponseStatus int = null out,                
 @SpResponseMessage nvarchar(max) = null out,                
 @SpErrorDetails nvarchar(max) = null out                
AS                
BEGIN                
SET NOCOUNT ON;                
Begin Transaction UpdateConsumer            
 Begin Try                    
            
  if @CountryId = 0 set @CountryId = null;      
     if @CityId = 0 set @CityId = null       
  if @NationalityId = 0 set @NationalityId = null;      
  if @Gender = 0 set @Gender = null ;      
      
  IF Not EXISTS(SELECT ConsumerId from coc_consumers where ConsumerId = @ConsumerId )            
    BEGIN            
   Set @SpResponseStatus=0;                     
   Set @SpResponseMessage='ConsumerNotFound';                    
   Set @SpErrorDetails='Consumer Not Found';                
   RollBack Transaction UpdateConsumer;            
   Return;            
 END--Consumer Not Found validation ended            
            
  IF EXISTS(SELECT EmailID from coc_consumers where ConsumerId <> @ConsumerId and EmailID = @EmailID and IsActive = 1 and IsDeleted = 0)            
    BEGIN            
   Set @SpResponseStatus=0;                     
   Set @SpResponseMessage='EmailAlreadyExists';                    
   Set @SpErrorDetails='Email Already Exists';                
   RollBack Transaction UpdateConsumer;            
   Return;            
 END--email validation ended            
            
  IF EXISTS(SELECT PrimaryMobile from coc_consumers where ConsumerId <> @ConsumerId and PrimaryMobile = @PrimaryMobile and IsActive = 1 and IsDeleted = 0)            
    BEGIN            
   Set @SpResponseStatus=0;                     
   Set @SpResponseMessage='MobileAlreadyExists';                    
         Set @SpErrorDetails='Mobile Already Exists';                
   RollBack Transaction UpdateConsumer;            
   Return;            
 END--mobile validation eneded            
            
  IF EXISTS(SELECT UserIdentityNumber from coc_consumers where ConsumerId <> @ConsumerId and UserIdentityNumber = @UserIdentityNumber and IsActive = 1 and IsDeleted = 0)            
    BEGIN            
   Set @SpResponseStatus=0;                     
   Set @SpResponseMessage='UserIdentityNumberAlreadyExists';                    
         Set @SpErrorDetails='UserIdentityNumber Already Exists';                
   RollBack Transaction UpdateConsumer;            
   Return;            
 END--UserIdentityNumber validation eneded            
            
  IF (@FullName is null or @FullName = '')            
    BEGIN            
   Set @SpResponseStatus=0;                     
   Set @SpResponseMessage='FullNameShouldNotBeEmpty';                    
         Set @SpErrorDetails='FullName Should Not Be Empty';                
   RollBack Transaction UpdateConsumer;            
   Return;            
 END--FullName Null validation eneded             
            
  IF (@PrimaryMobile is null or @PrimaryMobile = '')            
    BEGIN            
   Set @SpResponseStatus=0;                     
   Set @SpResponseMessage='MobileShouldNotBeEmpty';                    
         Set @SpErrorDetails='Mobile Should Not Be Empty';                
   RollBack Transaction UpdateConsumer;            
   Return;            
 END--Mobile Null validation eneded             
            
  IF (@EmailID is null or @EmailID = '')            
    BEGIN           Set @SpResponseStatus=0;                     
   Set @SpResponseMessage='EmailShouldNotBeEmpty';                    
         Set @SpErrorDetails='Email Should Not Be Empty';                
   RollBack Transaction UpdateConsumer;            
   Return;            
 END--Email Null validation eneded             
            
 DECLARE @ConsumerUserID bigint;            
 Select @ConsumerUserID = UserID from coc_Consumers where ConsumerID = @ConsumerId;            
 IF (@UserIdentityNumber = '' OR @UserIdentityNumber IS NULL OR @UserIdentityTypeId = 0 OR @UserIdentityTypeId IS NULL)            
     BEGIN            
   SET @UserIdentityNumber = NULL;            
   SET @UserIdentityTypeId = NULL;            
  END            
          
  DECLARE @MemberShipID NVARCHAR(40) = NEWID();            
  Declare @Password nvarchar(20);          
  SET @Password = '1JHmFr2HIHE=';          
  DECLARE @LoyaltyPoint INTEGER;            
 --if user exists in consumer table but not in users table then                           
   IF EXISTS (SELECT PrimaryMobile FROM coc_Consumers(NOLOCK) WHERE PrimaryMobile=@PrimaryMobile AND UserID IS NULL AND  IsNull(IsDeleted,0) = 0)                           
   BEGIN                          
   SELECT @LoyaltyPoint = SetupValue FROM coc_LoyaltyPointSetups(NOLOCK) WHERE LoyaltyPointSetupID = 101;                            
   SELECT @ConsumerID = ConsumerID from coc_Consumers(nolock) where   PrimaryMobile=@PrimaryMobile AND UserID IS NULL AND  IsNull(IsDeleted,0) = 0;                              
  INSERT INTO coc_Users (                                
      UserName                                
      ,[Password]                                
      ,RoleID                                
      ,MobileNumber                                
      ,EmailID                                
      ,ResetRequired                                
      ,CreatedDate                            
     ,IsActive                          
     ,IsDeleted                          
     ,FullName                          
      )                                
     SELECT @EmailID                                
      ,@Password                                
      ,5                                
      ,@PrimaryMobile                                
      ,@EmailID                                
      ,0                                
      ,GETDATE()                                
      ,1                          
   ,0                          
   ,@FullName                          
     SET @USERID = SCOPE_IDENTITY();                           
                               
     Update coc_Consumers set MembershipNumber=IsNull(MembershipNumber,CONVERT(NVARCHAR(10), @MemberShipID))        
   ,UserID=@USERID        
   ,LoyaltyPoint=@LoyaltyPoint                          
   ,FullName = @FullName                          
      ,IsActive=1                          
      ,IsVerified=1                          
      ,IsDeleted=0                              
      ,UserIdentityNumber = @UserIdentityNumber           
      ,UserIdentityTypeID = @UserIdentityTypeId          
      ,EditDate = GETDATE()      
   ,Gender = @Gender      
   ,CountryID = @CountryId      
   ,CityID = @CityId      
   ,NationalityID = @NationalityId      
   ,BirthDate = @BirthDate      
   ,UpdatedBy = @UserID 
   ,FirstName = CASE WHEN CHARINDEX(' ', @FullName) > 0 THEN SUBSTRING(@FullName, 1, CHARINDEX(' ', @FullName) - 1) ELSE @FullName END
   ,FamilyName = CASE WHEN CHARINDEX(' ', @FullName) > 0 THEN SUBSTRING(@FullName, CHARINDEX(' ', @FullName) + 1, CASE WHEN (LEN(@FullName) - CHARINDEX(' ', @FullName))>1 THEN (LEN(@FullName) - CHARINDEX(' ', @FullName)) ELSE 1 END) ELSE NULL END
   ,SecondName = ''
   ,ThirdName = ''
      where ConsumerID=@ConsumerID;                          
                           
                               
     INSERT INTO coc_ConsumerPointDetails (                                
      ConsumerID                                
      ,PointDate                                
      ,LoyaltyPoint                                
      ,RedeemPoint                                
      ,PointSource                        
      )                                
     SELECT @ConsumerID                                
      ,GETDATE()                                
      ,@LoyaltyPoint                                
      ,0                                
      ,101                      
   if(@ConsumerID is not null and @ConsumerID != 0)                      
     begin                      
  Set @SpResponseStatus=1;                     
  Set @SpResponseMessage='ProfileUpdateSuccess';                    
  Set @SpErrorDetails='Profile updated successfully ';                             
    end                      
             
   else                      
  begin                      
   Set @SpResponseStatus=0;                      
   Set @SpResponseMessage='GenericError';                              
   Set @SpErrorDetails ='Data Not Saved';                          
  end                      
    COMMIT TRANSACTION UpdateConsumer --end transaction                          
 Return;                          
  END          
        
 UPDATE coc_Users SET UserName = @PrimaryMobile , MobileNumber = @PrimaryMobile , EmailID = @EmailID,EditdDate=GETDATE(), IsActive = @IsActive   where UserID = @ConsumerUserID;            
 UPDATE coc_Consumers SET PrimaryMobile = @PrimaryMobile , EmailID = @EmailID  , MembershipNumber = ISNULL(MembershipNumber,CONVERT(NVARCHAR(10), @MemberShipID))          
 ,FullName = @FullName , UserIdentityNumber = @UserIdentityNumber , UserIdentityTypeID = @UserIdentityTypeId,EditDate=GETDATE()       
 ,BirthDate = @BirthDate , CountryID = @CountryId , CityID = @CityId , NationalityID = @NationalityId , Gender= @Gender      
 ,UpdatedBy = @UserID      
 ,IsActive = @IsActive
 ,FirstName = CASE WHEN CHARINDEX(' ', @FullName) > 0 THEN SUBSTRING(@FullName, 1, CHARINDEX(' ', @FullName) - 1) ELSE @FullName END
 ,FamilyName = CASE WHEN CHARINDEX(' ', @FullName) > 0 THEN SUBSTRING(@FullName, CHARINDEX(' ', @FullName) + 1, CASE WHEN (LEN(@FullName) - CHARINDEX(' ', @FullName))>1 THEN (LEN(@FullName) - CHARINDEX(' ', @FullName)) ELSE 1 END) ELSE NULL END
 ,SecondName = ''
 ,ThirdName = ''
 where ConsumerID = @ConsumerId;            
       
 if(@IsActive = 0)      
    BEGIN      
   UPDATE coc_Consumers SET IsActive = 0 , IsDeleted = 1, DeActivatedBy = @UserID ,UpdatedBy=@UserID ,EditDate=GETDATE(),UserIdentityNumber=null,UserIdentityTypeID=null where ConsumerID = @ConsumerId;       
   UPDATE coc_Users SET IsActive = 0 , IsDeleted = 1, DeletedDate = GETDATE(), DeleteBy = @UserID,EditdDate=GETDATE() where UserID = @ConsumerUserID;      
 END      
      
      
       
 Declare @OldMobile nvarchar(50);        
 Declare @OldEmail nvarchar(50);        
 SELECT @OldMobile = PrimaryMobile,@OldEmail=EmailID from coc_Consumers(nolock) where ConsumerID = @ConsumerId;        
         
 IF(@OldMobile <> @PrimaryMobile)        
  BEGIN        
   UPDATE coc_Consumers SET IsMobileVerified = 0   where ConsumerID = @ConsumerId;        
  END        
 IF(@OldEmail <> @EmailID)        
  BEGIN        
   UPDATE coc_Consumers SET IsEmailVerified = 0   where ConsumerID = @ConsumerId;        
  END        
        
 Set @SpResponseStatus=1;                     
 Set @SpResponseMessage='ProfileUpdateSuccess';                    
 Set @SpErrorDetails='Profile updated successfully ';              
            
  Commit Transaction UpdateConsumer                 
END TRY                                
BEGIN CATCH                      
 RollBack Transaction UpdateConsumer            
 Set @SpResponseStatus=0;                     
 Set @SpResponseMessage='GenericError';                    
 Set @SpErrorDetails ='ErrorNumber : <' +convert(nvarchar(250),ERROR_NUMBER())+ '>, ErrorSeverity : <'+ convert(nvarchar(250),ERROR_SEVERITY())+'>, ErrorState : <'+convert(nvarchar(250),ERROR_STATE())+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+convert(nvarchar(250),ERROR_LINE())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';         
    
      
       
END CATCH                                
END                
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[USP_CORE_UpdateConsumerRequestProfileDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[USP_CORE_UpdateConsumerRequestProfileDetails]
	@ConsumerId INT = NULL, 
	@AdminUserId INT = NULL,
	@LanguageID INT = NULL,
	@RoleID INT = NULL,
	@UserID INT = NULL,
	@ImpersonationUserID INT = NULL,
	@SpResponseStatus INT OUT,
	@SpResponseMessage NVARCHAR(MAX) OUT,
	@SpErrorDetails NVARCHAR(MAX) OUT 
AS
BEGIN TRY        
BEGIN 
DECLARE @tempEmail VARCHAR(150) = NULL,  
  @tempMobileNo VARCHAR(15) = NULL  
  
SELECT @tempEmail = EmailID, @tempMobileNo = PrimaryMobile FROM dbo.coc_ConsumerProfileEdit WITH(NOLOCK) WHERE ConsumerID = @ConsumerId  

IF EXISTS (SELECT * FROM dbo.coc_Consumers WITH(NOLOCK) WHERE ConsumerID <> @ConsumerId AND IsActive = 1 AND (EmailID = @tempEmail OR PrimaryMobile = @tempMobileNo))  
BEGIN  
 UPDATE dbo.coc_Consumers SET IsActive = 0, IsDeleted = 1 WHERE (EmailID = @tempEmail OR PrimaryMobile = @tempMobileNo)  
END 

UPDATE t1 set t1.UserIdentityTypeID = t2.UserIdentityTypeID
, t1.UserIdentityNumber = t2.UserIdentityNumber
, t1.MembershipNumber = t2.MembershipNumber
, t1.EmailID = t2.EmailID
, t1.PrimaryMobile = t2.PrimaryMobile
, t1.FullName = t2.FullName
, t1.BirthDate = t2.BirthDate
, t1.Address1 = t2.Address1
, t1.Address2 = t2.Address2
, t1.SecondaryMobile = t2.SecondaryMobile
, t1.Gender = t2.Gender
, t1.NationalityID = t2.NationalityID
, t1.CountryID = t2.CountryID
, t1.CityID = t2.CityID
, t1.UpdatedBy = @AdminUserId
, t1.EditDate = GETDATE()
from coc_Consumers t1 inner join coc_ConsumerProfileEdit t2 on t1.ConsumerID = t2.ConsumerID
WHERE T2.ConsumerID = @ConsumerId

DELETE FROM coc_ConsumerProfileEdit WHERE ConsumerID = @ConsumerId

UPDATE t1 set EmailId = t2.EmailID, t1.PhoneNumber = t2.PrimaryMobile FROM coc_Users t1 INNER JOIN coc_Consumers t2 on t2.userid = t1.userid 
WHERE t2.ConsumerID = @ConsumerId

 SET @SpResponseStatus=1;          
 SET @SpResponseMessage='Success';          
 SET @SpErrorDetails='Success'; 
END         
 END TRY          
 BEGIN CATCH           
 Set @SpResponseStatus=0;          
 Set @SpResponseMessage='GenericError';          
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>,          
  ErrorSeverity : <'+ convert(varchar(500),Error_severity())+'>,          
   ErrorState : <'+convert(varchar(500), Error_state())+'> ,          
    ErrorProcedure : <'+Error_procedure() +'> ,        
 ErrorLine <'+convert(varchar(500), Error_line())+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';          
          
 END CATCH
GO
/****** Object:  StoredProcedure [dbo].[usp_core_ValidatePurchaseBarcodePayment]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_core_ValidatePurchaseBarcodePayment]         
 @BarcodePurchaseId bigint 
,@PaidAmount decimal(18,2)   
,@UserID bigint                 =null          
,@LanguageID int                 =null          
,@RoleID bigint                  =null          
,@ImpersonationUserID bigint     =null    
,@IsPaidAmountCorrect bit          out        
,@SpResponseStatus int             out           
,@SpResponseMessage nvarchar(max)  out         
,@SpErrorDetails nvarchar(max)     out          
AS          
 SET NOCOUNT ON          
 BEGIN TRY          
 BEGIN         
  declare  @TotalPurshaseAmount decimal(18,2);    
  declare  @TotalPaidAmount  decimal(18,2);    
  declare  @BalancePaidAmount  decimal(18,2);    
  select   @TotalPurshaseAmount=TotalAmount from coc_BarcodePurchase(nolock) where BarcodePurchaseId=@BarcodePurchaseId    
  set   @TotalPaidAmount=(select SUM(PaidAmount) from coc_BarcodePurchasePayment(nolock) where BarcodePurchaseId=@BarcodePurchaseId  and Status!=5 )
   print('BEGIN TRY ')  
    if @TotalPaidAmount is null
    begin
     set  @TotalPaidAmount=0.00;
    end
   select  @TotalPurshaseAmount    
  select  @TotalPaidAmount      
  select  @BalancePaidAmount      
  if(convert(decimal(18,2) ,@TotalPurshaseAmount)>=convert(decimal(18,2),@TotalPaidAmount+@PaidAmount))    
  begin    
  set @IsPaidAmountCorrect=1
  end
  else
  begin
   set @IsPaidAmountCorrect=0
  end    
  
 END
 select  @IsPaidAmountCorrect  
 Set @SpResponseStatus=1;          
 Set @SpResponseMessage='Success';          
 Set @SpErrorDetails='Success';          
 END TRY          
 BEGIN CATCH          
          
 Set @SpResponseStatus=0;          
 Set @SpResponseMessage='GenericError';          
 Set @SpErrorDetails ='ErrorNumber : <' +convert(varchar(500), Error_number())+ '>, ErrorSeverity : <'+   
 convert(varchar(500),Error_severity())+'>, ErrorState : <'+  
 convert(varchar(500), Error_state())+'> , ErrorProcedure : <'+Error_procedure() +'> , ErrorLine <'+  
 convert(varchar(500), Error_line())+'> ErrorMessage : <'+convert(varchar(500), ERROR_MESSAGE())+'>';                          
          
 END CATCH          
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Usp_Core_VerifyConsumerOTP]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Usp_Core_VerifyConsumerOTP]    
 @OtpTypeID INTEGER                 
,@OtpID int    
,@Otp INTEGER     
,@Mobile nvarchar(20)  = null  
,@EmailID nvarchar(100)  = null  
,@CountryID int    
,@LanguageID int = 1    
,@RoleID int = null    
,@UserID int = null    
,@ImpersonationUserID int = null    
,@SpResponseStatus int = null out    
,@SpResponseMessage nvarchar(500) = null out    
,@SpErrorDetails nvarchar(1000) = null out    
AS              
             
 SET NOCOUNT ON              
    
 BEGIN    
                
 DECLARE @RandomOtp INTEGER    
 DECLARE @Expity DATETIME      
     
 SELECT @RandomOtp = Otp ,@Expity = OtpExpity FROM coc_OTP(NOLOCK) WHERE OtpID = @OtpID  and OtpTypeID = @OtpTypeID;            
              
 IF (@RandomOtp = @Otp AND GETDATE() < @Expity)              
 BEGIN              
     UPDATE coc_OTP SET isVerified = 1 WHERE OtpID = @OtpID and OtpTypeID = @OtpTypeID;    
     if(@Mobile is not null)  
     UPDATE  coc_PreConsumerRegister set VerificationDate=GETDATE() , IsMobileVerified = 1,IsVerified=1,EditDate=GETDATE() where PrimaryMobile = @Mobile and OtpID = @OtpID    
     else if(@EmailID is not null)  
     UPDATE  coc_PreConsumerRegister set VerificationDate=GETDATE() , IsMobileVerified = 1,IsVerified=1,EditDate=GETDATE() where EmailID = @EmailID and OtpID = @OtpID    
  
     set @SpResponseStatus = 1;    
     set @SpResponseMessage = 'Success';    
     Set @SpErrorDetails = 'Otp verified';    
 END    
 else    
   begin    
        set @SpResponseStatus = 0;    
        set @SpResponseMessage = 'OTPNotMatchedOrTimeOut';    
        Set @SpErrorDetails = 'OTP Not Matched or time out';    
   end    
END    
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_CountriesForRegistration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_CountriesForRegistration]      
(      
@LanguageId int = 1      
)      
AS      
      
BEGIN      
--coc_Countries order by c      
--coc_CountryLanguages       
SELECT cc.CountryID,cl.Country CountryName,cc.FlagImage, cc.ISOCode,(cc.CountryCode) as CountryCode ,cc.ISOThreeCharCode ,cc.Currency CurrencyForPayTabs    
from coc_Countries (NOLOCK) cc inner join coc_CountryLanguages (NOLOCK) cl on cc.CountryId = cl.CountryID      
WHERE cl.LanguageId = @LanguageId and CC.IsActive = 1 and (cc.AllowRegistration = 1)      
END 
GO
/****** Object:  StoredProcedure [dbo].[usp_DeleteAllCompetitionBarcodesByIsusedFlag]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[usp_DeleteAllCompetitionBarcodesByIsusedFlag]
@ECouponID bigint,
@EServiceID INTEGER, 
@NotificationID BIGINT,
@IsUsed BIT              
AS
 SET NOCOUNT ON
 BEGIN TRANSACTION DeleteBarcodes                                    
 BEGIN TRY                                    
 
     DECLARE @TotalBarcodesDeleted INTEGER;
     DECLARE @TruncationProcessStage INTEGER = 1;
     
    PRINT CONVERT(VARCHAR(25), @TotalBarcodesDeleted)
     
     --Update the deleted entries column in statistics table
     IF (@IsUsed = 1) ----2 years since Competition Expired
     BEGIN
        PRINT 'USED BARCODES'
        --DECLARE @WinnerBarcodeCount int=0;
        --SELECT  @WinnerBarcodeCount = COUNT(DISTINCT ECouponParticipationID) FROM coc_ECouponWinners(NOLOCK) 
        --WHERE ECouponPrizeID in (SELECT ECouponPrizeID FROM coc_ECouponPrizes(NOLOCK) WHERE ECouponID=@ECouponID) 

        UPDATE coc_EServiceBarcodes_StatisticalData
        SET
        --TotalBarcodesDeleted = TotalBarcodesCreated-@WinnerBarcodeCount
        TotalBarcodesDeleted = TotalBarcodesCreated
        WHERE EServiceID = @EServiceID

        --Delete all used barcodes from coc_EServiceBarcodes
        DELETE FROM coc_EServiceBarcodes WHERE 
        NotificationID= @NotificationID 
        --and Barcode NOT IN (SELECT Barcode FROM coc_ECouponParticipations WHERE ECouponParticipationID IN (
        --SELECT  DISTINCT ECouponParticipationID FROM coc_ECouponWinners(NOLOCK) 
        --WHERE ECouponPrizeID in (SELECT ECouponPrizeID FROM coc_ECouponPrizes(NOLOCK) WHERE ECouponID=@ECouponID))) 
    
        SET @TruncationProcessStage = 3
     END
     ELSE ---2 months since Competition Expired
     BEGIN
        PRINT 'UNUSED BARCODES'

        SELECT @TotalBarcodesDeleted = COUNT(ESB.EServiceBarcodeID) 
        FROM coc_EServiceBarcodes (NOLOCK) ESB
        WHERE ESB.NotificationID=@NotificationID AND (ISNULL(ESB.IsUsed,0) = 0 
        OR (ISNULL(ESB.IsUsed,0) = 1 and ISNULL(ESB.IsDownloaded,0)=1 and ESB.ConsumerID IS NULL AND ESB.GuestID IS NULL AND ESB.AsignedEmailID IS NULL AND ESB.AsignedMoile IS NULL))

        UPDATE coc_EServiceBarcodes_StatisticalData
        SET
        TotalBarcodesDeleted = @TotalBarcodesDeleted
        WHERE EServiceID = @EServiceID

        --Delete all UnUsed barcodes from coc_EServiceBarcodes
        DELETE FROM coc_EServiceBarcodes 
        WHERE NotificationID=@NotificationID AND (ISNULL(IsUsed,0) = 0 
        OR (ISNULL(IsUsed,0) = 1 AND ISNULL(IsDownloaded,0)=1 AND ConsumerID IS NULL AND GuestID IS NULL AND AsignedEmailID IS NULL AND AsignedMoile IS NULL))

        SET @TruncationProcessStage = 2
     END

    --Update ‘TruncationProcessStage’ column in coc_EServices table with value (1 OR 2 OR 3)
    UPDATE coc_EServices SET TruncationProcessStage = @TruncationProcessStage
    WHERE EServiceID = @EServiceID 

    COMMIT TRANSACTION DeleteBarcodes                                   
 END TRY                                    
 BEGIN CATCH                                    
     ROLLBACK TRANSACTION DeleteBarcodes                                    
 END CATCH                

GO
/****** Object:  StoredProcedure [dbo].[USP_DeleteWinner]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_DeleteWinner]      
  @delete bit = 0      
, @ECouponWinnerID bigint      
, @ECouponID bigint = null      
, @MobileNumber varchar(20)       
, @EmailID  nvarchar(100)=null       
, @CorporateID bigint=null      
 ,@isExclusion bit=null  
,@ReturnValue VARCHAR(1000)   = NULL OUTPUT          
      
AS        
SET NOCOUNT ON        
if @EmailID=''      
  begin       
   set @EmailID=null      
 end   
 if @CorporateID=0  
  begin       
   set @CorporateID=null      
 end   
BEGIN   

if (@isExclusion= 1)      
begin       
 insert into coc_ConsumerExclusions(ECouponID, PrimaryMobile,EmailID,CorporateID) values (@ECouponID, @MobileNumber,@EmailID,@CorporateID)      
end       
--select * from coc_ConsumerExclusions order by ConsumerExclusionID desc      
--select * from coc_ConsumerExclusions where PrimaryMobile= @MobileNumber order by ConsumerExclusionID desc      
      
--select * from coc_ECouponWinners where ECouponWinnerID = @ECouponWinnerID      
       insert into coc_ECouponWinners_DeleteLog (
												[ECouponWinnerID],
												[ECouponPrizeID] ,
												[MobileNumber] ,
												[ConsumerID] ,
												[PrizeHeader] ,
												[PrizeDetail],
												[ImageFile] ,
												[ECouponDrawPrizeID],
												[ConsumerType] ,
												[ConsumerName] ,
												[Email],
												[MembershipID] ,
												[DrawDateTime] ,
												[GuestID] ,
												[ECouponParticipationID] ,
												[UserName] ,
												[DeleteDateTime],
												[DeleteComment] ) 
             	select 
												[ECouponWinnerID],
												[ECouponPrizeID] ,
												[MobileNumber] ,
												[ConsumerID] ,
												[PrizeHeader] ,
												[PrizeDetail],
												[ImageFile] ,
												[ECouponDrawPrizeID],
												[ConsumerType] ,
												[ConsumerName] ,
												[Email],
												[MembershipID] ,
												[DrawDateTime] ,
												[GuestID] ,
												[ECouponParticipationID] ,
												NULL ,
												Getdate(),
												NULL
	from coc_ECouponWinners where ECouponWinnerID = @ECouponWinnerID   

   delete from coc_ECouponWinners where ECouponWinnerID = @ECouponWinnerID      
    print('delete');     
   SET @ReturnValue = 'Success'   
 
END  
GO
/****** Object:  StoredProcedure [dbo].[USP_eCopon_GetCorporateDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--USP_eCopon_GetCorporateDetails 'rafeeq@logicsystems-me.com1','25478961'
CREATE PROCEDURE [dbo].[USP_eCopon_GetCorporateDetails]
@EmailID nvarchar(100),
@CRNumber nvarchar(100)
AS

BEGIN
 Select 
 CorporateID
      ,CRNumber
      ,EmailID
      ,MobileNumber
      ,UserID
      ,CorporateName
      ,MerchantCode
      ,CorporateType from coc_Corporates(NOLOCK) where EmailID = @EmailID and CRNumber = @CRNumber;
	

END
GO
/****** Object:  StoredProcedure [dbo].[USP_eCopon_SaveAdminServiceTaskNotification]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_eCopon_SaveAdminServiceTaskNotification] 
@EmailID nvarchar(100),
@CRNumber nvarchar(100),
@ErrorMessage nvarchar(500) out
AS

BEGIN	
begin try
Declare @CorporateUserID bigint;
	SELECT TOP 1 @CorporateUserID = UserID FROM coc_Corporates (NOLOCK) where EmailID = @EmailID and CRNumber = @CRNumber;
	if(@CorporateUserID is not null)
	begin
		INSERT INTO coc_ServiceTaskNotification ( UserId,  [Date], [Message], [Result], [STATUS], RowStatus,  LanguageId ,RedirectPage ,RedirectParameter)
		SELECT  UserId, getdate(),  'New Corporate Registered',  'Success',  1,  1, 1,'CorporateRegistration.ascx',CAST(@CorporateUserID AS VARCHAR(100)) from coc_Users (NOLOCK) where RoleID = 1 and IsActive = 1;
		set @ErrorMessage = '';
	end
	Else
	set @ErrorMessage = 'NO Corporate selected';
end try
begin catch
set @ErrorMessage = Error_Message();
end catch
END
GO
/****** Object:  StoredProcedure [dbo].[usp_ecoupon_SaveCompetitionRegistration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--use ecopontest2018aug28
CREATE proc [dbo].[usp_ecoupon_SaveCompetitionRegistration] @CompetitionRegistrationID bigint

,                                                   @UserID bigint

,                                                   @CompetitionRegistrationXML XML

,                                                   @CompetitionLanguageXML XML

,                                                   @CompetitionRegistrationDrawsXML XML

,                                                   @ReturnCompetitionRegistrationID bigint = null OUTPUT 

,													@ReturnValue nvarchar(500) = null output 





AS



	SET NOCOUNT ON



	BEGIN TRY



	SET @ReturnCompetitionRegistrationID = 0;



	Declare @CompetitionRegistrationIDValue bigint = 0;



	DECLARE @CompetitionRegistration AS TABLE (CompetitionRegistrationID bigint

	,CompanyName nvarchar(200) null

	,CompanyCRNumber nvarchar(30) null

	,AgencyName nvarchar(200) null

	,AgencyCRNumber nvarchar(30) null

	,NumberofECoupons bigint null 

	,NumberofDraw bigint null 

	,NumberofPrize bigint null 

	,StartDate datetime null 

	,EndDate datetime null 

	,Questions bit null 

	,Survey bit null 

	,ScanCoupon bit null 

	,StandardCoupons bit null 	 
	,CustomersService bit null
	)



	DECLARE @CompetitionLanguage AS TABLE (CompetitionLanguageID bigint

	,CompetitionRegistrationID bigint

	,LanguageID int null

	,CampaignNameEN nvarchar(200) null

	,CampaignNameAR nvarchar(200) null

	)



	DECLARE @CompetitionRegistrationDraws AS TABLE (CompetitionRegistrationDrawsID bigint

	,CompetitionRegistrationID bigint

	,DrawDate datetime null

	,NoOfWinners bigint

	)



	INSERT INTO @CompetitionRegistration (CompanyName,CompanyCRNumber,AgencyName,AgencyCRNumber,NumberofECoupons,NumberofDraw,NumberofPrize,StartDate,EndDate,Questions, Survey,ScanCoupon,StandardCoupons,CustomersService)

	SELECT CompetitionRegistration.value('(CompanyName[1])', '[Code]')

	,CompetitionRegistration.value('(CompanyCRNumber[1])', '[Code]')

	,CompetitionRegistration.value('(AgencyName[1])', '[Code]')

	,CompetitionRegistration.value('(AgencyCRNumber[1])', '[Code]')

	,CompetitionRegistration.value('(NumberofECoupons[1])', '[BIGINT]')

	,CompetitionRegistration.value('(NumberofDraw[1])', '[BIGINT]')

	,CompetitionRegistration.value('(NumberofPrize[1])', '[BIGINT]')

	,CompetitionRegistration.value('(StartDate[1])', '[DATETIME]')

	,CompetitionRegistration.value('(EndDate[1])', '[DATETIME]')

	,CompetitionRegistration.value('(Questions[1])', '[BIT]')

	,CompetitionRegistration.value('(Survey[1])', '[BIT]')

	,CompetitionRegistration.value('(ScanCoupon[1])', '[BIT]')

	,CompetitionRegistration.value('(StandardCoupons[1])', '[BIT]')

	,CompetitionRegistration.value('(CustomersService[1])', '[BIT]')

	FROM @CompetitionRegistrationXML.nodes('/CompetitionRegistration/CompetitionRegistrationData') AS Data(CompetitionRegistration);



	

	

	INSERT INTO @CompetitionLanguage (CampaignNameEN,CampaignNameAR ) SELECT CompetitionLanguage.value('(CampaignNameEN[1])', '[CODE]'),CompetitionLanguage.value('(CampaignNameAR[1])', '[CODE]')

	FROM @CompetitionLanguageXML.nodes('/CompetitionLanguage/CompetitionLanguageData') AS Data(CompetitionLanguage);

	



	INSERT INTO @CompetitionRegistrationDraws (DrawDate,NoOfWinners ) SELECT Data.CompetitionRegistrationDraw.value('(DrawDate[1])', '[datetime]'),Data.CompetitionRegistrationDraw.value('(NoOfWinners[1])', '[bigint]')

	FROM @CompetitionRegistrationDrawsXML.nodes('/CompetitionRegistrationDraws/CompetitionRegistrationDrawsData/Draw') AS Data(CompetitionRegistrationDraw);



	select * from @CompetitionRegistration;



	BEGIN TRANSACTION TRN_SaveEService



	IF (@CompetitionRegistrationID = 0)



	BEGIN

	

	--insert into CompetitionRegistration table

	print ('insert started');



	INSERT INTO coc_CompetitionRegistration

           ([CompanyName]

           ,[CompanyCRNumber]

           ,[AgencyName]

           ,[AgencyCRNumber]

           ,[NumberofECoupons]

           ,[NumberofDraw]

           ,[NumberofPrize]

           ,[StartDate]

           ,[EndDate]

           ,[Questions]

           ,[Survey]

           ,[ScanCoupon]

           ,[StandardCoupons]

		   ,[CustomersService]

           ,[CreatedBy]

           ,[Createddate])        

	 SELECT CompanyName,CompanyCRNumber,AgencyName,AgencyCRNumber,NumberofECoupons,NumberofDraw,NumberofPrize,StartDate,EndDate,Questions, Survey,ScanCoupon,StandardCoupons,CustomersService,@UserID,GetDate() FROM  @CompetitionRegistration

      

	  set @CompetitionRegistrationIDValue = scope_identity();    

	  SET @ReturnCompetitionRegistrationID = @CompetitionRegistrationIDValue;    

	

	

	INSERT INTO [dbo].[coc_CompetitionLanguage]

           ([CompetitionRegistrationID]

           ,[LanguageID]

           ,[CampaignName]

           ,[CreatedBy]

           ,[CreatedDate])

     select @CompetitionRegistrationIDValue , 1 ,CampaignNameEN,@UserID,GetDate() from @CompetitionLanguage



	 INSERT INTO [dbo].[coc_CompetitionLanguage]

           ([CompetitionRegistrationID]

           ,[LanguageID]

           ,[CampaignName]

           ,[CreatedBy]

           ,[CreatedDate])

     select @CompetitionRegistrationIDValue , 2 ,CampaignNameAR,@UserID,GetDate() from @CompetitionLanguage



	 INSERT INTO [dbo].[coc_CompetitionRegistrationDraws]

           ([DrawDate]

           ,[NoOfWinners]

           ,[CompetitionRegistrationID]

           ,[CreatedBy]

           ,[Createddate])

	Select  DrawDate , NoOfWinners, @CompetitionRegistrationIDValue,@UserID,GetDate() from @CompetitionRegistrationDraws



	print ('insert')

	END



	ELSE BEGIN



	select 1;

	print ('update')



	END



	COMMIT TRANSACTION TRN_SaveEService



	END TRY



	BEGIN CATCH



	ROLLBACK TRANSACTION TRN_SaveEService



	SELECT @ReturnValue='-200';

	SET @ReturnCompetitionRegistrationID = 0;

	print ('error: '+error_message())

	END CATCH



	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_EndorsementResendOtp]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[USP_EndorsementResendOtp] (        
 @EndorsementID bigint
 ,@RequestEmailOtp bit 
 ,@RequestMobileOtp bit           
 ,@ErrorMessage varchar(500) OUT
 ,@MobileOtp Int OUT
 ,@EmailOtp Int OUT 
 ,@Mobile varchar(20) OUT
 ,@Email varchar(100) OUT         
 )                        
AS                        
BEGIN             
        
 BEGIN TRY       
     
   set @ErrorMessage ='1'          
  If Not Exists(select * from coc_Endorsements where ID=@EndorsementID)        
   begin      
	  set @ErrorMessage ='InvalidEndorsementID'      
   end  
 else      
 begin 
    select @Mobile=PrimaryMobile,@Email=EmailID from coc_Endorsements (NOLOCK) where ID=@EndorsementID  
    DECLARE @Upper INTEGER = 100000                
    DECLARE @Lower INTEGER = 999999 
    set @MobileOtp=0    
	set @EmailOtp=0

	if(@RequestMobileOtp=1)
	begin
	    SELECT @MobileOtp = ROUND(((@Upper - @Lower - 1) * RAND() + @Lower), 0)    
		Update coc_Endorsements set MobileOtp=@MobileOtp,OtpGenerateDate=getdate() where ID=@EndorsementID  
		set @ErrorMessage ='0'    
	end 
	if(@RequestMobileOtp=1)
	begin
	     SELECT @EmailOtp = ROUND(((@Upper - @Lower - 1) * RAND() + @Lower), 0)    
		Update coc_Endorsements set EmailOtp=@EmailOtp,OtpGenerateDate=getdate() where ID=@EndorsementID     
		set @ErrorMessage ='0' 
	end   

        
 end         
       
               
 END TRY --end try block                        
                        
 BEGIN CATCH --begin catch           
            
   SELECT ERROR_LINE()                        
    ,ERROR_NUMBER();                        
                        
  -- SELECT @ErrorMessage = CONCAT (                        
  --ERROR_MESSAGE()                        
  --,ERROR_LINE()                        
  --,ERROR_NUMBER()                        
  --);         
   select @ErrorMessage='GenericError'      
             
 END CATCH --end catch            
          
        
                       
END 
GO
/****** Object:  StoredProcedure [dbo].[USP_EndorsementVerifyOtp]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_EndorsementVerifyOtp] (      
  @MobileOtp INT=NULL    
  ,@EmailOtp INT=NULL        
 ,@EndorsementID bigint        
 ,@ErrorMessage varchar(500) OUT        
 )                      
AS                      
BEGIN           
      
 BEGIN TRY         
    set @ErrorMessage ='0'        
 If Not Exists(select * from coc_Endorsements (NOLOCK) where MobileOtp=@MobileOtp and ID=@EndorsementID) and Not Exists (select * from coc_Endorsements (NOLOCK) where EmailOtp=@EmailOtp and ID=@EndorsementID)      
 begin    
   set @ErrorMessage ='InvalidMobileOrEmailOtp'    
 end    
 else If Not Exists(select * from coc_Endorsements (NOLOCK) where MobileOtp=@MobileOtp and ID=@EndorsementID)    
 begin    
    set @ErrorMessage ='InvalidMobileOtp'    
 end    
 else if Not Exists (select * from coc_Endorsements (NOLOCK) where EmailOtp=@EmailOtp and ID=@EndorsementID)      
 begin    
    set @ErrorMessage ='InvalidEmailOtp'    
 end    
 else    
 begin      
    update coc_Endorsements set IsMobileVerified=1,IsEmailVerified=1,VerifiedDate=getdate() where MobileOtp=@MobileOtp and EmailOtp=@EmailOtp  and ID=@EndorsementID      
 end       
     
             
 END TRY --end try block                      
                      
 BEGIN CATCH --begin catch         
          
   SELECT ERROR_LINE()                      
    ,ERROR_NUMBER();                      
                      
  -- SELECT @ErrorMessage = CONCAT (                      
  --ERROR_MESSAGE()                      
  --,ERROR_LINE()                      
  --,ERROR_NUMBER()                      
  --);       
   select @ErrorMessage='GenericError'    
           
 END CATCH --end catch          
        
      
                     
END 
GO
/****** Object:  StoredProcedure [dbo].[USP_ExternalUserRegistration]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_ExternalUserRegistration] (                    
 @FirstName NVARCHAR(200)                    
 ,@LastName NVARCHAR(200)                 
 ,@MiddleName NVARCHAR(200)                   
 ,@PrimaryMobile VARCHAR(15)                    
 ,@EmailID VARCHAR(100)         
 ,@CountryISOCode VARCHAR(5)        
 ,@ErrorCode INT OUTPUT        
 ,@ErrorMessage VARCHAR(300) OUTPUT        
 ,@ConsumerID INT OUTPUT        
 ,@APIKEY NVARCHAR(200)                    
 )                    
AS                    
BEGIN                    
 BEGIN TRY                    
  BEGIN TRANSACTION SaveExternalUser                           
                
  SET @ErrorCode =0 ;    
  DECLARE @MemberShipID NVARCHAR(40) = NEWID();                  
  INSERT INTO coc_API_ExternalParticipations      
           ([FirstName]  
           ,[LastName]      
           ,[MiddleName]      
           ,[PrimaryMobile]      
           ,[EmailID]      
           ,[CountryISOCode]      
           ,[APIKEY]      
           ,[AddedDate])      
     VALUES (                    
      @FirstName 
     ,@LastName       
     ,@MiddleName        
     ,@PrimaryMobile                    
     ,@EmailID                    
     ,@CountryISOCode                    
     ,@APIKEY                   
     ,GETDATE()                    
    )        
  --if email exists in consumer table and not verified :                     
  IF EXISTS (                    
    SELECT 1                    
    FROM coc_Consumers(NOLOCK)                    
    WHERE EmailID = @EmailID OR PrimaryMobile =@PrimaryMobile         
    ) --if begin                    
  BEGIN                    
         SET @ErrorCode = 101        
   SET @ErrorMessage = 'EmailOrMobileAlreadyExists'                 
  END               
        
  DECLARE @CountryID INT        
                   
  IF NOT EXISTS(SELECT 1 FROM coc_Countries (NOLOCK) where ISOCode=@CountryISOCode)        
  BEGIN        
  SET @ErrorCode = 102        
  SET @ErrorMessage = 'InvalidCountryISOCode'        
        
  END         
  ELSE        
  BEGIN        
 SELECT @CountryID= CountryID from COC_Countries (NOLOCK) WHERE ISOCode= @CountryISOCode        
  END        
          
  IF (@ErrorCode = 0)        
  BEGIN        
  INSERT INTO COC_Consumers (                    
    FirstName 
    ,FullName
    ,SecondName                   
    ,FamilyName        
    ,PrimaryMobile                    
    ,EmailID                    
    ,CountryID           
    ,IsActive                    
    ,AddDate                    
    ,IsVerified        
 ,IsFromCompetitionLink      
 ,APIKEY   
 ,MembershipNumber  
    )                    
   VALUES (                    
     @FirstName 
	,@FirstName -- fullname 
    ,@MiddleName                
    ,@LastName        
    ,@PrimaryMobile                    
    ,@EmailID                    
    ,@CountryID                    
    ,1                    
    ,GETDATE()                    
    ,0                    
    ,0        
 ,@APIKEY    
 ,CONVERT(NVARCHAR(10), @MemberShipID)  
    )                    
                    
   SET @ConsumerID = SCOPE_IDENTITY()             
        
  END        
          
                    
  COMMIT TRANSACTION SaveExternalUser --end transaction                    
   --print(@ErrorMessage);                    
 END TRY --end try block                    
                    
 BEGIN CATCH --begin catch                    
  SELECT ERROR_LINE()                    
   ,ERROR_NUMBER();                    
                    
  SELECT @ErrorMessage = CONCAT (                    
    ERROR_MESSAGE()                    
    ,ERROR_LINE()                    
    ,ERROR_NUMBER()                    
    );         
        
               
  --print(@ErrorMessage);                      
  ROLLBACK TRANSACTION SaveExternalUser;                    
 END CATCH --end catch                    
END 
GO
/****** Object:  StoredProcedure [dbo].[USP_ExternalUserRegistrationVouchrPackage]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_ExternalUserRegistrationVouchrPackage] (                        
  @FullName NVARCHAR(200)                                            
 ,@PrimaryMobile VARCHAR(15)                        
 ,@EmailID VARCHAR(100)             
 ,@ErrorCode INT OUTPUT            
 ,@ErrorMessage VARCHAR(300) OUTPUT            
 ,@ConsumerID INT OUTPUT                        
 )                        
AS                        
BEGIN                        
 BEGIN TRY                                        
  SET @ErrorCode =1 ;        
  DECLARE @MemberShipID NVARCHAR(40) = NEWID();                      
        
  --if email exists in consumer table and not verified :                         
  IF EXISTS (                        
    SELECT 1                        
    FROM coc_Consumers(NOLOCK)                        
    WHERE EmailID = @EmailID OR PrimaryMobile =@PrimaryMobile             
    ) --if begin                        
  BEGIN                        
         SET @ErrorCode = 101            
   SET @ErrorMessage = 'EmailOrMobileAlreadyExists'                     
  END                   
            
  DECLARE @CountryID INT =183           
                       
  IF (@ErrorCode = 1)            
  BEGIN            
  INSERT INTO COC_Consumers (                        
    FirstName     
    ,FullName            
    ,PrimaryMobile                        
    ,EmailID                        
    ,CountryID               
    ,IsActive                        
    ,AddDate                        
    ,IsVerified     
    ,MembershipNumber
    )                        
   VALUES (                        
     @FullName     
    ,@FullName           
    ,@PrimaryMobile                        
    ,@EmailID                        
    ,@CountryID                        
    ,1                        
    ,GETDATE()                        
    ,0         
 ,CONVERT(NVARCHAR(10), @MemberShipID)      
    )                        
                        
   SET @ConsumerID = SCOPE_IDENTITY()                 
            
  END            
                   
 END TRY --end try block                        
                        
 BEGIN CATCH --begin catch  
  SET @ErrorCode =0
  SELECT ERROR_LINE()                        
   ,ERROR_NUMBER();                        
                        
  SELECT @ErrorMessage = CONCAT (                        
    ERROR_MESSAGE()                        
    ,ERROR_LINE()                        
    ,ERROR_NUMBER()                        
    );             
            
                   
  --print(@ErrorMessage);                          
  ROLLBACK TRANSACTION SaveExternalUser;                        
 END CATCH --end catch                        
END 
GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ECouponIntegralShoppers]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_Get_ECouponIntegralShoppers]          
(          
@ECouponID bigint,      
@ConsumerID int=NULL,    
@GuestID int=NULL    
)          
AS          
BEGIN      
   if(@ConsumerID=0)    
       set @ConsumerID=NULL    
   if(@GuestID=0)    
      set @GuestID=NULL    
    
SELECT top 1          
 EIS.ECouponID,          
 ISNULL(EIS.AllowToPlayMultipleTimes,0)AllowToPlayMultipleTimes,          
 ISNULL(EIS.ConsumerPlayGameCount,0)ConsumerPlayGameCount,          
 ISNULL(EIS.GuestPlayGameCount,0)GuestPlayGameCount,          
 ISNULL(EIS.ShowOnMobile,0)ShowOnMobile,          
 ISNULL(EIS.ShowOnWeb,0)ShowOnWeb,          
 ISNULL(EIS.StandardBarcodeIsRequriedAllTheTime,0)StandardBarcodeIsRequriedAllTheTime,          
 EIS.ECouponIntegralShopperID,          
 ISNULL(EIS.BaseURL,'') as IntegralShopperURL,      
 EIS.PrivateKey      
 from coc_core_ECouponIntegralShoppers(nolock) EIS           
 INNER JOIN coc_ECoupons(nolock) EC on EC.ECouponID =  EIS.ECouponID          
where EIS.ECouponID = @ECouponID order by EIS.ECouponIntegralShopperID desc          
      
if(@ConsumerID is not null)  
begin  
select ConsumerID,FirstName,SecondName,EmailID,PrimaryMobile from coc_Consumers(nolock) where ConsumerID=@ConsumerID   
end  
  
if(@GuestID is not null)  
  begin  
select GuestID as ConsumerID,FULLName as FirstName,FamilyName as SecondName,EmailID,PrimaryMobile from coc_Guests(nolock) where GuestID=@GuestID   
end  
  
END      
  
  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[USP_GET_OCCUPATION]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Rafeeq  
-- Create date: 27/04/2018  
-- Description: Get Occupation by language -- api 
-- Sample call: USP_GET_OCCUPATION 2
-- ============================================= 
CREATE PROCEDURE [dbo].[USP_GET_OCCUPATION] (@LanguageID INT = 1)
AS
BEGIN
	SELECT OP.OccupationID
		,OL.Occupation
	FROM coc_Occupation OP (NOLOCK)
	JOIN coc_OccupationLanguages OL (NOLOCK) ON OL.OccupationID = OP.OccupationID
	WHERE OL.LANGUAGEID = @LanguageID
END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetAllBlogPostByPageIndex]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[usp_GetAllBlogPostByPageIndex]
(
@PageIndex int = 1,
@PageSize int = 100
)
as
begin 

declare @tempData table(
PostId int,
PostTitle nvarchar(100),
ShortPostContent nvarchar(100),
FullPostContent nvarchar(100)
)

insert into @tempData(PostId,PostTitle,ShortPostContent,FullPostContent)
select 1,'Test','short','full'
insert into @tempData(PostId,PostTitle,ShortPostContent,FullPostContent)
select 2,'Test','short','full'
insert into @tempData(PostId,PostTitle,ShortPostContent,FullPostContent)
select 3,'Test','short','full'
insert into @tempData(PostId,PostTitle,ShortPostContent,FullPostContent)
select 4,'Test','short','full'
insert into @tempData(PostId,PostTitle,ShortPostContent,FullPostContent)
select 5,'Test','short','full'

select * from @tempData

end
GO
/****** Object:  StoredProcedure [dbo].[usp_GetAllCompetitionNames]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 Create PROCEDURE [dbo].[usp_GetAllCompetitionNames]
  
@LanguageID INTEGER =1 
--,@EServiceID INTEGER = NULL  
--,@CorporateID INTEGER  
--,@CompetitionID INTEGER = NULL  
AS  
BEGIN  
--Tables[0] EServices  
 SELECT ES.EServiceID,ES.ServiceNumber,EL.EService+'-'+ES.ServiceNumber [EService],ES.ServiceDate, CONVERT(VARCHAR(12),ES.FromDate,103) [FromDate],CONVERT(VARCHAR(12),ES.ToDate,103) [ToDate],EC.ECouponID,  
  ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.IsActive--,ES.IsBarcodeUsed,ES.MessagePackTypeID [MessagePackID]  
    
   FROM coc_EServices ES(NOLOCK)   
    INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID  
    INNER JOIN coc_ECoupons  EC(NOLOCK) ON EC.EServiceID=ES.EServiceID  
	 order by ES.EServiceID desc  
    --INNER JOIN coc_MessagePackTypes MT(NOLOCK) ON ES.MessagePackTypeID=MT.MessagePackTypeID  
    --WHERE
   --(@EServiceID IS NULL OR ES.EServiceID=@EServiceID) AND  
   -- (@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND  
    --(@ServiceTypeID IS NULL OR ES.ServiceTypeID=@ServiceTypeID) AND  
    --(@ServiceNumber IS NULL OR ES.ServiceNumber=@ServiceNumber) AND  
    --(@ServiceSubTypeID IS NULL OR ES.ServiceSubTypeID=@ServiceSubTypeID) AND  
    --(@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID)  
       
END  
GO
/****** Object:  StoredProcedure [dbo].[usp_GetAllVouchersForReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[usp_GetAllVouchersForReport]                       
 @LanguageID INTEGER=1              
,@EServiceID INTEGER = NULL              
,@CorporateID INTEGER =NULL              
,@CompetitionID INTEGER = NULL              
AS              
BEGIN              
              
if @CorporateID = 0              
 select @CorporateID  = null              

 Select evl.ResourceValue as Text, ev.EVoucherID as Value from coc_EVoucher(nolock) ev
 inner join coc_EVoucherLanguages(nolock) evl on evl.EVoucherID=ev.EVoucherID and evl.LanguageID=@LanguageID and evl.ResourceKey='VoucherName'
 inner join coc_EServices(nolock) es on es.EServiceID=ev.EServiceID
 where (@EServiceID IS NULL OR es.EServiceID=@EServiceID) AND              
    (@CorporateID IS NULL OR es.CorporateID=@CorporateID) AND              
    ev.IsActive=1     
       order by  ES.EServiceID desc  
                  
              
END 
GO
/****** Object:  StoredProcedure [dbo].[usp_GetBarcodeStatus]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[usp_GetBarcodeStatus]  
(  
@Barcode nvarchar(50),  
@EncryptedBarcode nvarchar(50),  
@SadafcoTable bit = 0 out,  
@BarcodeTable bit = 0 out  
)  
AS  
BEGIN  
  
if exists(select Barcode [EncryptedBarcode] from coc_EServiceBarcodes(nolock) where barcode = @EncryptedBarcode)  
     set @BarcodeTable = 1;  
  
if exists(select Barcode [DecryptedBarcode] from coc_Sadafco_Participations(nolock) where barcode = @Barcode)  
 set @SadafcoTable = 1;  
  
select ep.ParticipationDate [ParticipatedOn] ,ep.Barcode,ep.ParticipationMobile [MobileNumber],  
ep.ParticipationEmailID [EmailID],case when cc.ConsumerID is not null then (cc.FirstName+' '+cc.SecondName+' '+cc.FamilyName) else g.FullName end  as [ConsumerName],  
essl.EService as CompetitionName , epl.Value [Prize]
from coc_ECouponParticipations(nolock) ep  
left join coc_consumers(nolock) cc on cc.ConsumerID = ep.ConsumerID
left join coc_Guests(nolock) g on g.GuestID = ep.GuestID
inner join coc_ECoupons(nolock) ecp on ecp.ECouponID=ep.ECouponID  
inner join coc_EServices(nolock) ess on ess.EServiceID=ecp.EServiceID  
inner join coc_EServiceLanguages(nolock) essl on essl.EServiceID = ess.EServiceID and essl.LanguageID=1  
left join coc_ECouponWinners(nolock) win on win.ECouponParticipationID = ep.ECouponParticipationID 
left join coc_ECouponPrizesLanguages epl (NOLOCK) on win.ECouponPrizeID = epl.ECouponPrizeID  and epl.LanguageID = 1 and epl.ResourceKey = 'PrizeDetail'
where ep.barcode = @EncryptedBarcode --and cc.IsDeleted=0 and cc.IsActive=1; 

END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetBlockListUserReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetBlockListUserReport]  
  @LanguageID  int=1                                                   
 ,@MobileNumber nvarchar(15)=  null            
 ,@EmailID nvarchar(100)=  null                                             
 ,@PageSize  int=100                                            
 ,@RecordCount bigint    output                                         
 ,@PageIndex int=1                              
 ,@CorporateID int=NULL       
 AS                                                    
BEGIN                                                          
  SET NOCOUNT ON;                              
     declare @offset bigint,@fetch  bigint;                            
     set @offset =@PageSize*(@PageIndex-1);                            
     set @fetch =@PageSize;
	 
	 select @RecordCount= count(*) 
	    from coc_ConsumerExclusions(nolock) ce
	      left join coc_Ecoupons(nolock) ec on ec.ECouponID=ce.ECouponID
		  left join coc_EServices(nolock) es on es.EServiceID=ec.EServiceID
		  left join coc_EServiceLanguages(nolock) esl on esl.LanguageID=1 and esl.EServiceID=es.EServiceID
		  left join coc_Corporates(nolock) c on c.CorporateID=es.CorporateID
   where (ce.EmailID like '%'+@EmailID+'%' or @EmailID is null) and (ce.PrimaryMobile like '%'+@MobileNumber+'%' or @MobileNumber is null)
	declare @BlockListUsers table (SNo bigint identity(1,1),[Mobile Number] nvarchar(15),EmailID nvarchar(100) ,[Competition Name]  nvarchar(1000),[Corporate Name] nvarchar(250),[Name] nvarchar(250))   
   
   insert into @BlockListUsers
        select distinct isnull(ce.PrimaryMobile,'') [Mobile Number],isnull(ce.EmailID,'') EmailID,
	     (case when ce.ECouponID is null then 'ALL' else  esl.EService end) [Competition Name], 
		  (case when c.CorporateName is null then 
				 (case when c.CorporateNameAR is null then (case when c.FirstName is null and c.MiddleName is null and c.LastName is null then 'ALL' else isnull(c.FirstName,'')+' '+isnull(c.MiddleName,'')+' '+isnull(c.LastName,'') end) else c.CorporateNameAR end) else c.CorporateName end) [Corporate Name] ,
		 isnull((select top 1 fullname from coc_Consumers(nolock) cn where cn.EmailID=ce.EmailID  or cn.PrimaryMobile =ce.PrimaryMobile  order by cn.IsDeleted , cn.IsActive desc),'') Name
		 from coc_ConsumerExclusions(nolock) ce
	      left join coc_Ecoupons(nolock) ec on ec.ECouponID=ce.ECouponID
		  left join coc_EServices(nolock) es on es.EServiceID=ec.EServiceID
		  left join coc_EServiceLanguages(nolock) esl on esl.LanguageID=1 and esl.EServiceID=es.EServiceID
		  left join coc_Corporates(nolock) c on c.CorporateID=es.CorporateID
   where (ce.EmailID =@EmailID or @EmailID is null) and (ce.PrimaryMobile=@MobileNumber or @MobileNumber is null)
   order by 1 desc OFFSET @offset ROWS FETCH NEXT @fetch ROWS ONLY   

	       

	select SNO,[Mobile Number],EmailID,[Competition Name],[Corporate Name],[Name] from @BlockListUsers 

	

END 
GO
/****** Object:  StoredProcedure [dbo].[usp_GetCompetationNameDropDownForReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetCompetationNameDropDownForReport] --1,NULL,2                    
 -- declare                  
@LanguageID INTEGER=1                    
,@EServiceID INTEGER = NULL                    
,@CorporateID INTEGER =NULL                    
,@CompetitionID INTEGER = NULL                    
AS                    
BEGIN                    
                    
if @CorporateID = 0                    
 select @CorporateID  = null                    
--Tables[0] EServices                    
 SELECT ES.EServiceID,ES.ServiceNumber,EL.EService as Text,ES.ServiceDate, CONVERT(VARCHAR(12),ES.FromDate,103) [FromDate],CONVERT(VARCHAR(12),ES.ToDate,103) [ToDate],EC.ECouponID as Value,                    
  ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.IsActive--,ES.IsBarcodeUsed,ES.MessagePackTypeID [MessagePackID]                    
                      
   FROM coc_EServices ES(NOLOCK)                     
    INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID                    
    INNER JOIN coc_ECoupons  EC(NOLOCK) ON EC.EServiceID=ES.EServiceID                    
    --INNER JOIN coc_MessagePackTypes MT(NOLOCK) ON ES.MessagePackTypeID=MT.MessagePackTypeID                    
   WHERE(@EServiceID IS NULL OR ES.EServiceID=@EServiceID) AND                    
    (@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND                    
    --(@ServiceTypeID IS NULL OR ES.ServiceTypeID=@ServiceTypeID) AND                    
    --(@ServiceNumber IS NULL OR ES.ServiceNumber=@ServiceNumber) AND                    
    --(@ServiceSubTypeID IS NULL OR ES.ServiceSubTypeID=@ServiceSubTypeID) AND                    
    (@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID)                    
       order by  ES.EServiceID desc                 
                        
                    
END 
GO
/****** Object:  StoredProcedure [dbo].[usp_GetCompetationNameForParticipationReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetCompetationNameForParticipationReport] --1,NULL,2                  
--  declare                
 @LanguageID INTEGER=1 
,@EServiceID INTEGER = NULL                  
,@CorporateID INTEGER =NULL                  
,@CompetitionID INTEGER = NULL                  
              
AS                  
BEGIN    
if @CorporateID = 0                  
 select @CorporateID  = null               
               
--Tables[0] EServices                  
  select distinct up.ECouponID, ESL.EServiceID, ESL.EService         
from UploadParticipations as UP         
inner join coc_ECoupons EC ON EC.ECouponID= UP.ECouponID         
inner join coc_EServiceLanguages ESL ON ESL.EServiceID= EC.EServiceID and ESL.LanguageID= @LanguageID
inner join coc_EServices ES ON ES.EServiceID= EC.EServiceID     
             
       order by  ESL.EServiceID desc               
                      
                  
END 

                    
                      
--   FROM coc_EServices ES(NOLOCK)                     
--    INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID                    
--    INNER JOIN coc_ECoupons  EC(NOLOCK) ON EC.EServiceID=ES.EServiceID                    
--    --INNER JOIN coc_MessagePackTypes MT(NOLOCK) ON ES.MessagePackTypeID=MT.MessagePackTypeID                    
--   WHERE(@EServiceID IS NULL OR ES.EServiceID=@EServiceID) AND                    
--    (@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND                    
--    --(@ServiceTypeID IS NULL OR ES.ServiceTypeID=@ServiceTypeID) AND                    
--    --(@ServiceNumber IS NULL OR ES.ServiceNumber=@ServiceNumber) AND                    
--    --(@ServiceSubTypeID IS NULL OR ES.ServiceSubTypeID=@ServiceSubTypeID) AND                    
--    (@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID)                    
--       order by  ES.EServiceID desc                 
                        
                    
--END 

GO
/****** Object:  StoredProcedure [dbo].[usp_GetCompetationNameReportForsadafco]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetCompetationNameReportForsadafco] --1,NULL,2                 
                
@LanguageID INTEGER=1                
,@EServiceID INTEGER = NULL                
,@CorporateID INTEGER =NULL                
,@CompetitionID INTEGER = NULL                
AS                
BEGIN                
                
if @CorporateID = 0                
 select @CorporateID  = null          
 set     @EServiceID=173    
--Tables[0] EServices                
 SELECT ES.EServiceID,ES.ServiceNumber,EL.EService as Text,ES.ServiceDate, CONVERT(VARCHAR(12),ES.FromDate,103) [FromDate],CONVERT(VARCHAR(12),ES.ToDate,103) [ToDate],EC.ECouponID as Value,                
  ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.IsActive--,ES.IsBarcodeUsed,ES.MessagePackTypeID [MessagePackID]                
                  
   FROM coc_EServices ES(NOLOCK)                 
    INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID                
    INNER JOIN coc_ECoupons  EC(NOLOCK) ON EC.EServiceID=ES.EServiceID                
    --INNER JOIN coc_MessagePackTypes MT(NOLOCK) ON ES.MessagePackTypeID=MT.MessagePackTypeID                
   WHERE(@EServiceID IS NULL OR ES.EServiceID=@EServiceID) AND                
    (@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND                
    --(@ServiceTypeID IS NULL OR ES.ServiceTypeID=@ServiceTypeID) AND                
    --(@ServiceNumber IS NULL OR ES.ServiceNumber=@ServiceNumber) AND                
    --(@ServiceSubTypeID IS NULL OR ES.ServiceSubTypeID=@ServiceSubTypeID) AND                
    (@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID)                
                     
             order by  ES.EServiceID      
                
END 
GO
/****** Object:  StoredProcedure [dbo].[usp_GetCompetationNameResultForReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetCompetationNameResultForReport] --1,NULL,2                  
                  
@LanguageID INTEGER=1                  
,@EServiceID INTEGER = NULL                  
,@CorporateID INTEGER =NULL                  
,@CompetitionID INTEGER = NULL                  
AS                  
BEGIN                  
                  
if @CorporateID = 0                  
 select @CorporateID  = null                  
--Tables[0] EServices                  
 SELECT ES.EServiceID,ES.ServiceNumber,EL.EService as Text,ES.ServiceDate, CONVERT(VARCHAR(12),ES.FromDate,103) [FromDate],CONVERT(VARCHAR(12),ES.ToDate,103) [ToDate],EC.ECouponID as Value,                  
  ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.IsActive--,ES.IsBarcodeUsed,ES.MessagePackTypeID [MessagePackID]                  
                    
   FROM coc_EServices ES(NOLOCK)                   
    INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID                  
    INNER JOIN coc_ECoupons  EC(NOLOCK) ON EC.EServiceID=ES.EServiceID                  
    --INNER JOIN coc_MessagePackTypes MT(NOLOCK) ON ES.MessagePackTypeID=MT.MessagePackTypeID                  
   WHERE(@EServiceID IS NULL OR ES.EServiceID=@EServiceID) AND                  
    (@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND                  
    --(@ServiceTypeID IS NULL OR ES.ServiceTypeID=@ServiceTypeID) AND                  
    --(@ServiceNumber IS NULL OR ES.ServiceNumber=@ServiceNumber) AND                  
    --(@ServiceSubTypeID IS NULL OR ES.ServiceSubTypeID=@ServiceSubTypeID) AND                  
    (@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID)                  
       order by  ES.EServiceID desc               
                      
                  
END 
GO
/****** Object:  StoredProcedure [dbo].[usp_GetCompetitionNames]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetCompetitionNames]   
@LanguageID INTEGER = 1   
AS    
BEGIN    
 SELECT ES.EServiceID,ES.ServiceNumber,EL.EService+'-'+ES.ServiceNumber [EService],ES.ServiceDate, CONVERT(VARCHAR(12),ES.FromDate,103) [FromDate],CONVERT(VARCHAR(12),ES.ToDate,103) [ToDate],EC.ECouponID,    
  ES.CorporateID,ES.ServiceTypeID,ES.ServiceSubTypeID,ES.CompetitionID,ES.IsActive  
  FROM coc_EServices ES(NOLOCK)     
  INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID    
  INNER JOIN coc_ECoupons  EC(NOLOCK) ON EC.EServiceID=ES.EServiceID    
  where (ES.IsActive = 1 or ES.EServiceID = 173) order by ES.EServiceID desc  
END    
GO
/****** Object:  StoredProcedure [dbo].[usp_GetCompetitionNamesForWinnersPage]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetCompetitionNamesForWinnersPage] 
@LanguageID INTEGER   

,@EServiceID INTEGER    = NULL

,@CorporateID INTEGER  

,@CompetitionID INTEGER = NULL

AS

BEGIN



	if @CorporateID = -1

		select @CorporateID = null

	--Tables[0] EServices

	SELECT ES.EServiceID                                                                   

	,      ES.ServiceNumber                                                                

	,      EL.EService--+'-'+ES.ServiceNumber [EService]

	,      ES.ServiceDate                                                                  

	,      CONVERT(VARCHAR(12),ES.FromDate,103) [FromDate]

	,      CONVERT(VARCHAR(12),ES.ToDate,103) [ToDate]

	,      EC.ECouponID                                                                    

	,      ES.CorporateID                                                                  

	,      ES.ServiceTypeID                                                                

	,      ES.ServiceSubTypeID                                                             

	,      ES.CompetitionID                                                                

	,      ES.IsActive--,ES.IsBarcodeUsed,ES.MessagePackTypeID [MessagePackID]             



	FROM       coc_EServices         ES(NOLOCK)

	INNER JOIN coc_EServiceLanguages EL(NOLOCK) ON ES.EServiceID=EL.EServiceID AND EL.LanguageID=@LanguageID

	INNER JOIN coc_ECoupons          EC(NOLOCK) ON EC.EServiceID=ES.EServiceID

	--INNER JOIN coc_MessagePackTypes MT(NOLOCK) ON ES.MessagePackTypeID=MT.MessagePackTypeID

	WHERE (@EServiceID IS NULL OR ES.EServiceID=@EServiceID) AND

		(@CorporateID IS NULL OR ES.CorporateID=@CorporateID) AND

		--(@ServiceTypeID IS NULL OR ES.ServiceTypeID=@ServiceTypeID) AND

		--(@ServiceNumber IS NULL OR ES.ServiceNumber=@ServiceNumber) AND

		--(@ServiceSubTypeID IS NULL OR ES.ServiceSubTypeID=@ServiceSubTypeID) AND

		(@CompetitionID IS NULL OR ES.CompetitionID=@CompetitionID)
		AND ES.EServiceID not in (288,203)

END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetCompetitionReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetCompetitionReport]  
 @LanguageID  int=1                                                     
 ,@FromDate date=  null              
 ,@ToDate date=  null                                               
 ,@PageSize  int=100                                              
 ,@RecordCount bigint    output                                           
 ,@PageIndex int=1                                
 ,@CorporateID int=NULL  
 ,@ECouponID  BIGINT=null  
 AS                                                    
BEGIN                                                             
  SET NOCOUNT ON;     
   declare @offset int,@fetch int;                                                   
  set @offset =@PageSize*(@PageIndex-1);                                                
  set @fetch =@PageSize; 

DECLARE @DrawTempTable TABLE (SNo bigint IDENTITY(1,1),ECouponID varchar(100),[CompetitionName] nvarchar(1000),[Draw Name] nvarchar(200),DrawDate nvarchar(100),[Status] nvarchar(100),[Order] int,[Corporate Name] nvarchar(100)
		,[Number Of Prize] INT, [Winners Chosen] INT)
Insert into @DrawTempTable(ECouponID,[CompetitionName],[Draw Name],DrawDate,[Status],[Order],[Corporate Name], [Number Of Prize], [Winners Chosen])
SELECT  
convert(varchar,ECouponID) ECouponID,
 EService [CompetitionName],     
  DrawName [Draw Name] ,CONVERT(NVARCHAR(20), DrawDate, 103) DrawDate,  
  (case   
  --when ECouponDrawID in (9, 15, 108, 109, 110, 111, 112, 113, 114, 115,116) then 'C'  
  --when ECouponDrawID in (10301, 10302, 10303) then 'D'  
  when (CONVERT(date,DrawDate) > CONVERT(date,GETDATE()))  then 'Not Active' --Not active  
  when (CONVERT(date,DrawDate) <= CONVERT(date,GETDATE()) and (WinnerCount >= NoOfTotalPrizes )) then 'Completed' --Complete      
  when (CONVERT(date,DrawDate) = CONVERT(date,GETDATE()) and (WinnerCount < NoOfTotalPrizes )) then 'Active' --Active      
  when (CONVERT(date,DrawDate) < CONVERT(date,GETDATE()) and (WinnerCount < NoOfTotalPrizes )) then 'Waiting' --Waiting  
   End   ) [Status]  , 
   (case    
     when (CONVERT(date,DrawDate) > CONVERT(date,GETDATE()))  then 2 
    when (CONVERT(date,DrawDate) <= CONVERT(date,GETDATE()) and (WinnerCount >= NoOfTotalPrizes )) then 4     
    when (CONVERT(date,DrawDate) = CONVERT(date,GETDATE()) and (WinnerCount < NoOfTotalPrizes )) then 1     
    when (CONVERT(date,DrawDate) < CONVERT(date,GETDATE()) and (WinnerCount < NoOfTotalPrizes )) then 3
   End   ) [Order],
   [Corporate Name],
  --ECouponDrawID,NoOfPrizeTypes,
  --convert(varchar,NoOfTotalPrizes) NoOfTotalPrizes,Convert(varchar,WinnerCount) WinnerCount, 
  --EntryTypeID,EnumValue,  
 -- CONVERT(varchar,CONVERT(date,ResultDate))ResultDate  ,
	NoOfTotalPrizes as [Number Of Prize],
	WinnerCount as [Winners Chosen]
  from (  
  select  
  ECdrawLanguage.value DrawName     
  , DrawDate ,EC.ECouponID,ES.EServiceID,EService,     
  (select Count(*) from coc_ECouponDrawPrizes(NOLOCK) EDP where EDP.ECouponDrawID = ECdraw.ECouponDrawID) as NoOfPrizeTypes   ,  
  (select sum(Frequency) from coc_ECouponDrawPrizes(NOLOCK) EDP   
  where EDP.ECouponDrawID = ECdraw.ECouponDrawID) as NoOfTotalPrizes   ,  
  (select Count(*) from coc_ECouponWinners(NOLOCK) EW_1 inner join coc_ECouponDrawPrizes EDW_1(NOLOCK) ON EDW_1.ECouponDrawPrizeID= EW_1.ECouponDrawPrizeID   
   where EDW_1.ECouponDrawID = ECdraw.ECouponDrawID) as WinnerCount       ,  
  (select max(EW_1.DrawDateTime) from coc_ECouponWinners(NOLOCK) EW_1 inner join coc_ECouponDrawPrizes(NOLOCK) EDW_1 ON EDW_1.ECouponDrawPrizeID= EW_1.ECouponDrawPrizeID   
   where EDW_1.ECouponDrawID = ECdraw.ECouponDrawID) as ResultDate       ,  
  EC.EntryTypeID  ,EL.EnumValue     ,ECdraw.ECouponDrawID,
  (Case when @LanguageID=2 then isnull(C.CorporateNameAR,isnull(C.CorporateName,isnull(C.FirstName,'')+isnull(C.MiddleName,'')+isnull(C.LastName,''))) else  isnull(C.CorporateName,isnull(C.CorporateNameAR,isnull(C.FirstName,'')+isnull(C.MiddleName,'')+isnull(C.LastName,''))) end) [Corporate Name]
	FROM coc_ECoupons(NOLOCK) EC          
	INNER JOIN coc_EServices(NOLOCK) ES ON EC.EServiceID=ES.EServiceID          
	INNER JOIN coc_EServiceLanguages(NOLOCK) EG ON EC.EServiceID=EG.EServiceID AND EG.LanguageID=@LanguageID          
	INNER JOIN coc_EnumValues(NOLOCK) EV ON EV.EnumValueID=EC.EntryTypeID            
	INNER JOIN coc_EnumValueLanguages(NOLOCK) EL ON EV.EnumValueID=EL.EnumValueID AND  EL.LanguageID=@LanguageID              
	INNER JOIN coc_ECouponDraw ECdraw(NOLOCK) ON ECdraw.ECouponID= ec.ECouponID      
	INNER JOIN coc_ECouponDrawLanguages(NOLOCK) ECdrawLanguage ON ECdrawLanguage.ECouponDrawID = ECdraw.ECouponDrawID    
	Inner join coc_Corporates(nolock) C on C.CorporateID=ES.CorporateID
	WHERE   EC.ResulltDeclared=0   AND   ECdrawLanguage.ResourceKey = 'Name' AND ECdrawLanguage.LanguageID = @LanguageID     
  )   tbl  
  where (@FromDate is null or @ToDate is null or  convert(date,DrawDate) between convert(date, @FromDate) and  convert(date, @ToDate)) 
  and (@ECouponID is null or ECouponID =@ECouponID)                        
  ORDER BY [Order]

  Set @RecordCount =(select count(*) from @DrawTempTable) 
  select ECouponID ,[CompetitionName] ,[Draw Name] ,DrawDate,[Status],[Order],[Corporate Name], [Number Of Prize], [Winners Chosen]  from  @DrawTempTable                                      
    order by SNo asc    OFFSET @offset ROWS                                                
FETCH NEXT @fetch ROWS ONLY   
                                                        
END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetCompetitionResultReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetCompetitionResultReport]  -- For Report        
            
  @LanguageID  int=1                                                                 
 ,@ECouponID  BIGINT = NULL                                                      
 ,@DrawID BIGINT=null                                                              
 ,@FromDate date=  null                          
 ,@ToDate date=  null                                                           
 ,@PageSize  int=100                                                          
 ,@RecordCount bigint   output                                                        
 ,@PageIndex int=1                                            
 ,@Mobile nvarchar(100) =NULL                                            
 ,@EmailID varchar(50)=NULL                                                             
 ,@Name nvarchar(200)=NULL                        
 ,@MembershipNumber nvarchar(100) =NULL                          
 ,@CorporateID int=NULL     
                     
AS                                                                  
BEGIN                                                                        
  SET NOCOUNT ON;                                                        
   declare @offset int,@fetch int;                                                               
  set @offset =@PageSize*(@PageIndex-1);                                                            
  set @fetch =@PageSize;                                                    
                                                                                   
                                                        
                                                  
  declare  @GetCompetitionResultReport table(DrawDateTime nvarchar(20),[Draw Name] nvarchar(300),                                                  
  [Competion Name] nvarchar(1000),[Winner Name] nvarchar(200),[Email ID] nvarchar(200),[Winner Mobile Number] varchar(15),[Price  Name] nvarchar(300),                                                  
  Barcode nvarchar(100))                                                  
                                              
  insert into @GetCompetitionResultReport                           
  select   distinct(CONVERT(NVARCHAR(20), ew.DrawDateTime,100)),                                                          
             edl.Value as [Draw Name],                                
                                                    
     esl.EService as  [Competion Name] ,                                                             
     ew.ConsumerName [Winner Name],                    
   ew.Email [Email ID],                  
        ew.MobileNumber [Winner Mobile Number],                                                            
        ECPL.Value [ Price   Name ] ,                                                  
           isnull(ECP.Barcode,'')                                         
                                                          
  from coc_ECouponWinners ew  (NOLOCK)                                                        
left join coc_Consumers c (NOLOCK) on ew.ConsumerID = c.ConsumerID                                                         
inner join coc_ECouponDrawPrizes edp  (NOLOCK) on edp.ECouponDrawPrizeID = ew.ECouponDrawPrizeID                                                         
inner join coc_ECouponDraw ed (NOLOCK) on ed.ECouponDrawID = edp.ECouponDrawID                                           
inner join coc_ECouponPrizesLanguages ECPL (NOLOCK) on ECPL.ECouponPrizeID=ew.ECouponPrizeID   and ECPL.ResourceKey= 'Name' and ECPL.LanguageID=@LanguageID                                                      
inner join coc_ECouponDrawLanguages edl (NOLOCK) on edl.ECouponDrawID = ed.ECouponDrawID and edl.LanguageID =@LanguageID and edl.ResourceKey = 'Name'                                                        
inner join coc_ECouponLanguages ecl (NOLOCK) on ecl.ECouponID = ed.ECouponID and ecl.LanguageID =@LanguageID                                                        
left join coc_CityLanguages cl (NOLOCK) on cl.CityID = c.CityID and cl.LanguageID =@LanguageID                                           
inner join coc_ECoupons ec (NOLOCK) on ec.ECouponID= ecl.ECouponID       
inner join coc_EServices es (NOLOCK) on es.EServiceID= ec.EServiceID      
inner join coc_EServiceLanguages esl (NOLOCK) on esl.EServiceID= ec.EServiceID     and esl.LanguageID= @LanguageID                                                        
left join coc_ECouponParticipations ECP (NOLOCK) on ECP.ECouponParticipationID = ew.ECouponParticipationID                                                   
left join coc_NationalityLanguages NL (NOLOCK) on NL.NationalityID=c.NationalityID and nl.LanguageID=@LanguageID     and ECPL.LanguageID=@LanguageID                                 
where (@ECouponID is null or ed.ECouponID =@ECouponID)     
and (@CorporateID is null or es.CorporateID=@CorporateID)    
and (@Mobile is null or  ew.MobileNumber like'%'+@Mobile+'%' or  ew.MobileNumber  =@Mobile )                           
and (@MembershipNumber is null or c.MembershipNumber=@MembershipNumber )                         
and (@EmailID is null or ew.Email like'%'+@EmailID+'%' or ew.Email = @EmailID )                                     
and (@Name is null or ew.ConsumerName like'%'+@Name+'%' or ew.ConsumerName like'%'+@Name+'%' or ew.ConsumerName like'%'+@Name+'%' or ew.ConsumerName=@Name or c.FirstName+c.SecondName+' '+c.FamilyName=@Name or c.FirstName+c.SecondName+' '+c.FamilyName='%' 
  
    
     
                       
+                        
@Name+'%'  )                                  
and (@DrawID is null or ed.ECouponDrawID=@DrawID )                   
and (@FromDate is null or @ToDate is null or  convert(date,ew.DrawDateTime) between convert(date, @FromDate) and  convert(date, @ToDate))                                                       
--and (@DrawDate is null or Convert(date,ew.DrawDateTime)=Convert(date,@DrawDate))                                                  
and ECouponWinnerID not in (24561,24562,24563,24564,24565)                                 
                            
select  DrawDateTime ,[Draw Name],                                                  
  [Competion Name] ,[Winner Name] ,isnull([Email ID],'') [Email ID],[Winner Mobile Number] ,[Price  Name],                                                  
  Barcode   from  @GetCompetitionResultReport                      
    order by 1 desc    OFFSET @offset ROWS                                                            
FETCH NEXT @fetch ROWS ONLY                                                   
                                                     
                                                 
select @RecordCount =count(*) from @GetCompetitionResultReport                                                      
        where (@FromDate is null or @ToDate is null or  convert(date,DrawDateTime) between convert(date, @FromDate) and  convert(date, @ToDate) )                                                           
                                                               
                                                                      
END 
GO
/****** Object:  StoredProcedure [dbo].[USP_GetCompetitionsWithDraws]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_GetCompetitionsWithDraws]          
 @CorporateID INTEGER ,          
 @LanguageID INTEGER          
AS          
SET NOCOUNT ON          
 BEGIN           
  SELECT ROW_NUMBER() OVER(ORDER BY ECouponID DESC) id,   ECouponID,EServiceID,EService [CompetitionName],       
  DrawName ,CONVERT(varchar, CONVERT(date,DrawDate)) DrawDate,    
  (case     
  when ECouponDrawID in (9, 15, 108, 109, 110, 111, 112, 113, 114, 115,116) then 'C'    
  when ECouponDrawID in (10301, 10302, 10303) then 'D'    
  when (CONVERT(date,DrawDate) > CONVERT(date,GETDATE()))  then 'C' --Not active    
  when (CONVERT(date,DrawDate) <= CONVERT(date,GETDATE()) and (WinnerCount >= NoOfTotalPrizes )) then 'D' --Complete        
  when (CONVERT(date,DrawDate) = CONVERT(date,GETDATE()) and (WinnerCount < NoOfTotalPrizes )) then 'A' --Active        
  when (CONVERT(date,DrawDate) < CONVERT(date,GETDATE()) and (WinnerCount < NoOfTotalPrizes )) then 'B' --Waiting    
   End   ) [Status]  ,    
  ECouponDrawID,NoOfPrizeTypes,NoOfTotalPrizes,WinnerCount, EntryTypeID,EnumValue,    
  CONVERT(varchar,CONVERT(date,ResultDate))ResultDate     
  from (    
  select    
  ECdrawLanguage.value DrawName       
  , DrawDate ,EC.ECouponID,ES.EServiceID,EService    
  ,       
      
  (select Count(*) from coc_ECouponDrawPrizes(NOLOCK) EDP where EDP.ECouponDrawID = ECdraw.ECouponDrawID) as NoOfPrizeTypes   ,    
  (select sum(Frequency) from coc_ECouponDrawPrizes(NOLOCK) EDP     
  where EDP.ECouponDrawID = ECdraw.ECouponDrawID) as NoOfTotalPrizes   ,    
  (select Count(*) from coc_ECouponWinners(NOLOCK) EW_1 inner join coc_ECouponDrawPrizes EDW_1(NOLOCK) ON EDW_1.ECouponDrawPrizeID= EW_1.ECouponDrawPrizeID     
   where EDW_1.ECouponDrawID = ECdraw.ECouponDrawID) as WinnerCount       ,    
  (select max(EW_1.DrawDateTime) from coc_ECouponWinners(NOLOCK) EW_1 inner join coc_ECouponDrawPrizes(NOLOCK) EDW_1 ON EDW_1.ECouponDrawPrizeID= EW_1.ECouponDrawPrizeID     
   where EDW_1.ECouponDrawID = ECdraw.ECouponDrawID) as ResultDate       ,    
  EC.EntryTypeID  ,EL.EnumValue     ,ECdraw.ECouponDrawID        
  FROM coc_ECoupons(NOLOCK) EC            
 INNER JOIN coc_EServices(NOLOCK) ES ON EC.EServiceID=ES.EServiceID            
 INNER JOIN coc_EServiceLanguages(NOLOCK) EG ON EC.EServiceID=EG.EServiceID AND EG.LanguageID=@LanguageID            
 INNER JOIN coc_EnumValues(NOLOCK) EV ON EV.EnumValueID=EC.EntryTypeID              
 INNER JOIN coc_EnumValueLanguages(NOLOCK) EL ON EV.EnumValueID=EL.EnumValueID AND  EL.LanguageID=@LanguageID                
 INNER JOIN coc_ECouponDraw ECdraw(NOLOCK) ON ECdraw.ECouponID= ec.ECouponID        
 INNER JOIN coc_ECouponDrawLanguages(NOLOCK) ECdrawLanguage ON ECdrawLanguage.ECouponDrawID = ECdraw.ECouponDrawID          
  WHERE   EC.ResulltDeclared=0   AND   ES.CorporateID=@CorporateID     and ECdrawLanguage.ResourceKey = 'Name' AND ECdrawLanguage.LanguageID = @LanguageID       
  )   tbl    where ECouponDrawID not in (12823,
12824,
12825,
10496,
10497,
10498,
10499,
10500,
10501,
10502,
10503,
10621,
10622,
10623,
10624,
10625,
10626)
  ORDER BY [Status]    
 END        
SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[usp_GetConfigurationParticipationsList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[usp_GetConfigurationParticipationsList]  
   @Language VARCHAR(10) = 'en-US',  
   @UserID bigint=null,  
   @RoleID bigint=null,  
   @ReturnValue Nvarchar(250) OUTPUT
AS     
BEGIN  
 BEGIN TRY  
  SET NOCOUNT ON;  
    select [ConfigurationParticipationsID],[ColumnName],[DisplayName],IsMandatory from coc_ConfigurationParticipations (NOLOCK) where IsMandatory=0
    SET @ReturnValue = 'success'
 END TRY  
 BEGIN CATCH     
  SET  @ReturnValue = 'generic error'  
 END CATCH  
END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetConfigurationParticipationsMandatoryList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[usp_GetConfigurationParticipationsMandatoryList]  
   @Language VARCHAR(10) = 'en-US',  
   @UserID bigint=null,  
   @RoleID bigint=null,  
   @ReturnValue Nvarchar(250) OUTPUT
AS     
BEGIN  
 BEGIN TRY  
  SET NOCOUNT ON;  
    select [ConfigurationParticipationsID],[ColumnName],[DisplayName],IsMandatory from coc_ConfigurationParticipations (NOLOCK) where IsMandatory=1
    SET @ReturnValue = 'success'
 END TRY  
 BEGIN CATCH     
  SET  @ReturnValue = 'generic error'  
 END CATCH  
END
GO
/****** Object:  StoredProcedure [dbo].[USP_GetConsumerNotificationBarcodes]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_GetConsumerNotificationBarcodes]
	@ConsumerID INTEGER,
	@LanguageID INTEGER,
	@ServiceTypeID integer
AS
	SET NOCOUNT ON
	BEGIN
		select ES.EServiceID as ID, EB.ConsumerID, ESL.LanguageID, EB.Barcode, C.CorporateName, C.LogoFile, ESL.EService Title
			from coc_EServiceBarcodes(NOLOCK) EB 
				inner join coc_Notifications(NOLOCK) N ON N.NotificationID = EB.NotificationID
				inner join coc_EServices(NOLOCK) ES ON ES.EServiceID = N.EServiceID 
				inner join coc_EServiceLanguages(NOLOCK) ESL ON ESL.EServiceID = N.EServiceID 
				inner join coc_Corporates(NOLOCK) C ON C.CorporateID = EB.CorporateID
			where ESl.LanguageID = @LanguageID
				and EB.ConsumerID =@ConsumerID
				and ES.ServiceTypeID =  @ServiceTypeID
			ORDER BY EB.AssignedDate desc
			--ORDER BY EB.EServiceBarcodeID desc

	END

	SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_GetConsumerNotificationByServiceType]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_GetConsumerNotificationByServiceType]  
 @ConsumerID INTEGER,  
 @LanguageID INTEGER,  
 @ServiceTypeID integer  
AS  
 SET NOCOUNT ON  
 BEGIN  
  SELECT CN.ConsumerNotificationID,NS.NotificationSendID,ISNULL(NT.NotificationRead,0)NotificationRead,NS.NotificationID,FORMAT(NS.SendingDate,'dd MMM yyyy' )SendingDate,NS.SendingType,CONVERT(VARCHAR(8), SendingDate, 108)[Time],  
   ISNULL(NL.[Subject],'')[Subject],ISNULL(NL.[Message],'')[Message],isnull(CU.FullName,CU.FirstName+' '+CU.SecondName+' '+CU.FamilyName) [FirstName],EB.Barcode,CN.HasChecked,ISNULL(ES.CompetitionID,0)CompetitionID,ISNULL(ES.CompetitionID,0) EntryTypeID,  
   ES.EServiceID, Case when (ISNULL(ES.CompetitionID,0)= 43 and ISNULL(NL.[Message],'') not like '%@barcode%') or EB.Barcode IS null THEN 'B' else 'Q' END BarcodeType,  
   CO.LogoFile,  ES.ServiceTypeID,
   CASE WHEN ES.ServiceTypeID = 51 THEN  
   ISNULL((SELECT top 1 EVI.ImageFile from coc_EVoucherImages (NOLOCK) EVI  INNER JOIN coc_EVoucher(NOLOCK) EV  ON EV.EVoucherID = EVI.EvoucherID Where EV.EServiceID = ES.EServiceID AND EVI.IsPrimaryImage = 1 and EVI.LanguageID = @LanguageId),   
   (SELECT top 1 EVI.ImageFile from coc_EVoucherImages(NOLOCK) EVI  INNER JOIN coc_EVoucher(NOLOCK) EV ON EV.EVoucherID = EVI.EVoucherId  Where EV.EServiceID= ES.EServiceID AND EVI.IsPrimaryImage = 1))   
   ELSE CASE WHEN ES.ServiceTypeID = 52 THEN  
   EC.ImageFile
   ELSE '' END
   END  AS ImageFile,
   CASE WHEN ES.ServiceTypeID = 51 THEN  
   ISNULL((SELECT top 1 EVI.ImageFile from coc_EVoucherImages (NOLOCK) EVI  INNER JOIN coc_EVoucher(NOLOCK) EV  ON EV.EVoucherID = EVI.EvoucherID Where EV.EServiceID = ES.EServiceID AND EVI.IsPrimaryImage = 1 and EVI.LanguageID = @LanguageId),   
   (SELECT top 1 EVI.ImageFile from coc_EVoucherImages(NOLOCK) EVI  INNER JOIN coc_EVoucher(NOLOCK) EV ON EV.EVoucherID = EVI.EVoucherId  Where EV.EServiceID= ES.EServiceID AND EVI.IsPrimaryImage = 1))   
   ELSE CASE WHEN ES.ServiceTypeID = 52 THEN  
   EC.ImageFile
   ELSE '' END
   END  AS PromotionImage 
  FROM coc_ConsumerNotifications CN  
   INNER JOIN coc_Consumers (NOLOCK) CU ON CU.ConsumerID=CN.ConsumerID  
   INNER JOIN coc_NotificationSends(NOLOCK) NS ON CN.NotificationSendID=NS.NotificationSendID  
   INNER JOIN coc_NotificationSendLanguages(NOLOCK) NL ON NL.NotificationSendID=CN.NotificationSendID AND LanguageID=@LanguageID --AND SendingType != 4  
   INNER JOIN coc_Notifications(NOLOCK) NT ON NT.NotificationID=NS.NotificationID  
   LEFT JOIN coc_EServiceBarcodes(NOLOCK) EB ON EB.NotificationID=NS.NotificationID AND CN.ConsumerID=EB.ConsumerID AND EB.ConsumerNotificationID=CN.ConsumerNotificationID  
   LEFT JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID=NT.EServiceID  
   LEFT JOIN coc_corporates(NOLOCK) CO ON CO.CorporateID =ES.CorporateID     
   LEFT join coc_ECoupons (NOLOCK) EC ON EC.EServiceID= ES.EServiceID
  WHERE ES.ServiceTypeID = @ServiceTypeID AND ISNULL(CN.ConsumerID,0)=@ConsumerID  AND NS.SendingDate<=GETDATE()  
  ORDER BY CN.HasChecked ASC,NS.SendingDate DESC  
 END  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_GetConsumerPushNotification]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetConsumerPushNotification]  
 @LanguageID INTEGER,  
 @SpResponseStatus int = null out,  
 @SpResponseMessage nvarchar(max) = null out,  
 @SpErrorDetails nvarchar(max) = null out  
  
AS       
 Begin Try      
 if isnull(@LanguageID,0) = 0  
 set @LanguageID = 1;  
  Set @SpResponseStatus=1;       
  Set @SpResponseMessage='Success';      
  Set @SpErrorDetails='Success';   
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
    
  Declare @NotificationCount int;  
  set @NotificationCount  = 0;  
  Declare @notifications table(ConsumerNotificationID int, BadgeCount int);  
    
  insert into @notifications (ConsumerNotificationID, BadgeCount)  
  SELECT top 5000 CN.ConsumerNotificationID, bdg.BadgeCount  
  
  FROM coc_ConsumerNotifications (NOLOCK) CN     
  
   INNER JOIN coc_Consumers (NOLOCK) CU ON CU.ConsumerID=CN.ConsumerID  
  
   INNER JOIN coc_NotificationSends(NOLOCK) NS ON CN.NotificationSendID=NS.NotificationSendID  
  
   INNER JOIN coc_NotificationSendLanguages(NOLOCK) NL ON NL.NotificationSendID=CN.NotificationSendID AND LanguageID=@LanguageID --AND SendingType != 4  
  
   LEFT JOIN coc_Notifications(NOLOCK) NT ON NT.NotificationID=NS.NotificationID      
        
      LEFT JOIN (SELECT COUNT(*) as BadgeCount, CU.ConsumerID  
      FROM coc_ConsumerNotifications CN(NOLOCK)   
   INNER JOIN coc_Consumers (NOLOCK) CU ON CU.ConsumerID=CN.ConsumerID  
   INNER JOIN coc_NotificationSends(NOLOCK) NS ON CN.NotificationSendID=NS.NotificationSendID  
   INNER JOIN coc_NotificationSendLanguages(NOLOCK) NL ON NL.NotificationSendID=CN.NotificationSendID AND LanguageID=@LanguageID --AND SendingType != 4  
   --LEFT JOIN coc_Notifications(NOLOCK) NT ON NT.NotificationID=NS.NotificationID  
   --LEFT JOIN coc_EServiceBarcodes(NOLOCK) EB ON EB.NotificationID=NS.NotificationID AND CN.ConsumerID=EB.ConsumerID AND EB.ConsumerNotificationID=CN.ConsumerNotificationID  
   --LEFT JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID=NT.EServiceID  
   --LEFT JOIN coc_corporates(NOLOCK) CO ON CO.CorporateID =ES.CorporateID  
      WHERE NS.SendingDate<=GETDATE() and CN.HasChecked = 0 and NS.GeneralNotificationId is NULL  
      group by CU.ConsumerID) bdg on bdg.ConsumerID = CU.ConsumerID  
              
  WHERE NS.SendingDate<=GETDATE() and isnull(CN.PushNotified,0) = 'False' and isnull(CN.SendPushNotification,0) = 'True'  
    And (isnull(CU.DeviceToken, '') <> '' or isnull(CU.AndroidDeviceToken, '') <> '')  and NS.GeneralNotificationId is NULL  
      
    ORDER BY NS.SendingDate DESC  
      
    UPDATE CN set PushNotified = 'True'  
    FROM coc_ConsumerNotifications (NOLOCK) CN INNER JOIN @notifications NTemp on NTemp.ConsumerNotificationID = CN.ConsumerNotificationID     
  
   INNER JOIN coc_Consumers (NOLOCK) CU ON CU.ConsumerID=CN.ConsumerID  
  
   INNER JOIN coc_NotificationSends(NOLOCK) NS ON CN.NotificationSendID=NS.NotificationSendID  
  
   INNER JOIN coc_NotificationSendLanguages(NOLOCK) NL ON NL.NotificationSendID=CN.NotificationSendID AND LanguageID=@LanguageID --AND SendingType != 4  
  
   LEFT JOIN coc_Notifications(NOLOCK) NT ON NT.NotificationID=NS.NotificationID        
              
  WHERE NS.SendingDate<=GETDATE() and isnull(CN.PushNotified,0) = 'False' and isnull(CN.SendPushNotification,0) = 'True'  
    And (isnull(CU.DeviceToken, '') <> '' or isnull(CU.AndroidDeviceToken, '') <> '')  and NS.GeneralNotificationId is NULL  
            
    
  SELECT CN.ConsumerNotificationID,NS.NotificationSendID,ISNULL(NT.NotificationRead,0)NotificationRead,NS.NotificationID,Convert(nvarchar(20),FORMAT(NS.SendingDate,'dd MMM yyyy'))SendingDate,NS.SendingType,CONVERT(VARCHAR(8), SendingDate, 108)[Time],  
  
   ISNULL(NL1.[Subject],'')[Subject1],ISNULL(NL1.[Message],'')[Message1],  
   ISNULL(NL2.[Subject],'')[Subject2],ISNULL(NL2.[Message],'')[Message2],  
   CU.FirstName+' '+CU.SecondName+' '+CU.FamilyName [FirstName],CN.HasChecked,  
      CU.DeviceToken as IOSDeviceToken, CU.AndroidDeviceToken, CN.PushAction, isnull(NTemp.BadgeCount,0) as BadgeCount,  
   (SELECT TOP 1 LanguageId from coc_checkversion (NOLOCK) WHERE ConsumerId= CU.ConsumerId AND DeviceType='Android' ORDER BY CheckVersionID desc) AndroidDeviceLanguageId,  
   (SELECT TOP 1 LanguageId from coc_checkversion (NOLOCK) WHERE ConsumerId= CU.ConsumerId AND DeviceType='iOS' ORDER BY CheckVersionID desc) iOSDeviceLanguageId  
  FROM coc_ConsumerNotifications (NOLOCK) CN INNER JOIN @notifications NTemp on NTemp.ConsumerNotificationID = CN.ConsumerNotificationID  
  
   INNER JOIN coc_Consumers (NOLOCK) CU ON CU.ConsumerID=CN.ConsumerID  
  
   INNER JOIN coc_NotificationSends(NOLOCK) NS ON CN.NotificationSendID=NS.NotificationSendID  
  
   LEFT OUTER JOIN coc_NotificationSendLanguages(NOLOCK) NL1 ON NL1.NotificationSendID=CN.NotificationSendID AND NL1.LanguageID=1 --AND SendingType != 4  
  
   LEFT OUTER JOIN coc_NotificationSendLanguages(NOLOCK) NL2 ON NL2.NotificationSendID=CN.NotificationSendID AND NL2.LanguageID=2   
  
   LEFT JOIN coc_Notifications(NOLOCK) NT ON NT.NotificationID=NS.NotificationID        
              
  WHERE NS.SendingDate<=GETDATE() and isnull(CN.SendPushNotification,0) = 'True'  
    And (isnull(CU.DeviceToken, '') <> '' or isnull(CU.AndroidDeviceToken, '') <> '') and NS.GeneralNotificationId is NULL   
      
  
  ORDER BY NS.SendingDate DESC  
END TRY                  
  BEGIN CATCH        
  Set @SpResponseStatus=0;       
  Set @SpResponseMessage='GenericError';      
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
  
  END CATCH                  
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_GetCorporateByCRNumber]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_GetCorporateByCRNumber]
 @EmailID nvarchar(100),  
 @CRNumber nvarchar(50)    
AS   
 SET NOCOUNT ON  
  BEGIN  
	
	SELECT 
	   [CorporateID]
      ,[JCCICode]
      ,[CRNumber]
      ,[EmailID]
      ,[MobileNumber]
      ,[UserID]
      ,[BarcodePrefix]
      ,[BarcodeSuffix]
      ,[BarcodeLength]
      ,[BarcodeTypeID]
      ,[IsActive]
      ,[AddDate]
      ,[LicenseExpiryDate]
      ,[CRDocumentFile]
      ,[IDSponsorFile]
      ,[LogoFile]
      ,[FirstName]
      ,[MiddleName]
      ,[LastName]
      ,[CountryID]
      ,[CityID]
      ,[Address1]
      ,[PhoneNumber]
      ,[FaxNumber]
      ,[Password]
      ,[IsEmailCommunication]
      ,[IsSMSCommunication]
      ,[IsMobileCommunication]
      ,[CanContactMorning]
      ,[CanContactEvening]
      ,[NewsLetterNotification]
      ,[PromotionNotification]
      ,[IsVerified]
      ,[CorporateName]
      ,[MerchantCode]
      ,[CorporateType]
  FROM coc_Corporates (NOLOCK) WHERE EmailID = @EmailID AND CRNumber = @CRNumber


  END  
 SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[Usp_GetCorporateReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Usp_GetCorporateReport]          
 @FromDate date = NULL                                  
 ,@ToDate date     = NULL     
  ,@LanguageID  int=1                                                                                                                   
 ,@PageSize  int=100                                                    
 ,@RecordCount bigint                                                  
 ,@PageIndex int=1                                      
 ,@CorporateID int= NULL          
 ,@Mobile nvarchar(100)= NULL                                                            
,@EmailID varchar(50)=NULL                                    
,@Name nvarchar(100)=NULL          
AS                                                            
BEGIN         
  SET NOCOUNT ON;                                           
  declare @offset bigint,@fetch  bigint;                                    
     set @offset =@PageSize*(@PageIndex-1);                                    
     set @fetch =@PageSize;       
        
 IF (@FromDate IS NULL)        
   SET @FromDate = GetDate();                                    
 IF (@ToDate IS NULL)        
   SET @ToDate = dateadd(dd, + 1, GetDate());        
IF (@LanguageID IS NULL)        
  SET @LanguageID = 1;    
  
   DECLARE @GetCorporateReport TABLE (          
   [Corporate Name] NVARCHar(200)
   ,[Corporate Name _AR] nvarchar(200)
   ,RegistrationDate Datetime
   ,ParticipationTime Datetime
   ,RegistrationDateTime Datetime
   ,CRNumber NVARChar(200)
   ,JCCICode NVARCHAR(200)
   ,VATNo NVARCHar(200)
   ,IsActive Bit
   ,IsVerified Bit
   ,FirstName NVARCHAR(200)
   ,MiddleName NVARCHAR(100)
   ,LastName NVARCHAR(200)
   ,MobileNumber NVARCHAR(15)
   ,[Country Name] NVARCHAR(50)
   ,[Country Name_AR] NVARCHAR(50)
   ,City NVARChAR (50)
   ,CityAr NVARCHAR(50)

  )     
  
             
 insert into @GetCorporateReport                                   
  select  cpi.CorporateName
  ,cpi.CorporateNameAR
  ,cpi.RegistrationDate
  ,cpi.ParticipationTime
  ,cpi.RegistrationDateTime
  ,cpi.CRNumber
  ,cpi.JCCICode
  ,cpi.VATNo
  ,cpi.IsActive
  ,cpi.IsVerified
  ,cpi.FirstName
  ,cpi.MiddleName
  ,cpi.LastName
  ,cpi.MobileNumber
  ,cpi.[Country Name En]
  ,cpi.[Country Name Ar]
  ,cpi.[City Name En]
  ,cpi.[City Name Ar]
                                         
    
   from vw_CorporateInformation cpi
 
       
where	(@FromDate is null or @ToDate is null or  convert(date,cpi.RegistrationDateTime) between convert(date, @FromDate) and  convert(date, @ToDate)) AND 
        
 (@Name IS NULL OR cpi.CorporateName LIKE '%' + @Name + '%' OR isnull(Cpi.CorporateNameAR, '') LIKE '%' + @Name + '%'  ) 
 
    select * from @GetCorporateReport   
	 order by 1 desc    OFFSET @offset ROWS                                            
FETCH NEXT @fetch ROWS ONLY                                   
                                     
                                 
select @RecordCount =count(*) from @GetCorporateReport                                      
        where (@FromDate is null or @ToDate is null or  convert(date,RegistrationDateTime) between convert(date, @FromDate) and  convert(date, @ToDate) ) 
	                                      
                                               
END
GO
/****** Object:  StoredProcedure [dbo].[USP_GetCountries]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_GetCountries] (@LanguageID INTEGER = 1)
--Exec USP_GetCountries 1
AS
SET NOCOUNT ON

SELECT c.CountryId
	,c.CountryCode
	,cl.Country AS CountryName
FROM coc_countries c (NOLOCK)
INNER JOIN coc_countrylanguages(NOLOCK) cl ON c.CountryId = cl.countryId
WHERE c.IsActive = 1
	AND cl.languageid = @LanguageID;

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_GETCOUNTRYCODE]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_GETCOUNTRYCODE]     
(    
@CountryId int,    
@ErrorMessage varchar(10) OUTPUT     
)    
AS    
BEGIN   
if(@CountryId=1)  
   set @CountryId=183  
if Exists(SELECT CountryID,TelephoneCode,ValidationExpression FROM coc_Countries (NOLOCK)  WHERE ISACTIVE = 1 AND CountryID = @CountryId)    
  Begin    
   SELECT CountryID,TelephoneCode,ValidationExpression FROM coc_Countries (NOLOCK) WHERE ISACTIVE = 1 AND CountryID = @CountryId;    
   SET @ErrorMessage = 1;    
  End    
Else    
 SET @ErrorMessage =0;    
END 
GO
/****** Object:  StoredProcedure [dbo].[Usp_GetCountryValidationData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Usp_GetCountryValidationData]  
(  
@CountryId int,  
@ErrorMessage varchar(10) OUTPUT   
--SELECT * FROM coc_Countries WHERE ISACTIVE = 1 AND COUNTRYID = @CountryId;  
--Declare @msg varchar(90);   
--EXEC USP_GETCOUNTRYCODE 108,@msg out  
)  
AS  
BEGIN  
if Exists(SELECT CountryID,TelephoneCode,ValidationExpression,MobileNumberLength FROM coc_Countries (NOLOCK) WHERE ISACTIVE = 1 AND CountryID = @CountryId)  
  Begin  
   SELECT CountryID,TelephoneCode,ValidationExpression,MobileNumberLength FROM coc_Countries (NOLOCK) WHERE ISACTIVE = 1 AND CountryID = @CountryId;  
   SET @ErrorMessage = 1;  
  End  
Else  
 SET @ErrorMessage =0;  
END  
GO
/****** Object:  StoredProcedure [dbo].[usp_GetDeletedReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetDeletedReport] -- For Report
  @LanguageID int        = 1
, @ECouponID BIGINT      = null
, @DrawID BIGINT         = null
, @DrawDate nvarchar(20) = null
, @PageSize int          = 100
, @RecordCount bigint     output
, @PageIndex int         = 1
, @Mobile nvarchar(100)   =NULL
, @EmailID varchar(50)   = NULL
, @Name nvarchar(200)    = NULL
, @MemberID nvarchar(200)= NULL

AS
BEGIN
	SET NOCOUNT ON;
	declare @offset int
	,       @fetch  int;
	set @offset =@PageSize*(@PageIndex-1);
	set @fetch =@PageSize;


	declare @TempTable Table ( SNo             bigint IDENTITY(1,1) PRIMARY KEY
	,                          [Member ID]     nvarchar(20)
	,                          [Consumer Name] nvarchar(500)
	,                          Mobile          nvarchar(15)
	,                          Email           nvarchar(250)
	,                          DeletedDate     datetime
	,                          Remarks         nvarchar(500)
	,                          IsDeleted       bit )

	insert into @TempTable ( [Consumer Name], Email, [Member ID], Mobile, DeletedDate, Remarks, IsDeleted )

	(select concat(isnull(C.FirstName,'')+' ',ISNULL(C.SecondName,'')+ ' ', isnull(C.FamilyName,'')) as [Consumer Name]
	,       C.EmailID                                                                               
	,       C.MembershipNumber                                                                      
	,       C.PrimaryMobile                                                                         
	,       U.DeletedDate                                                                           
	,       U.Remarks                                                                               
	,       U.IsDeleted                                                                             

	from       coc_Consumers(NOLOCK) C
	inner join coc_Users(NOLOCK)     U on C.userId = U.userId
	where U.IsDeleted=1 and U.Remarks is not null and U.DeletedDate is not null
		and (@Mobile is null or C.PrimaryMobile like'%'+@Mobile+'%')
		and (@EmailID is null or C.EmailID like'%'+@EmailID+'%')
		and (@Name is null or isnull(c.FirstName,'')+' '+isnull(c.SecondName,'')+' '+isnull(c.FamilyName,'') like'%'+@Name+'%')
		and (@MemberID is null or C.MembershipNumber like'%'+@MemberID+'%')

	)

	select SNo
	,      [Member ID]
	,      [Consumer Name]
	,      Mobile
	,      Email
	,      DeletedDate
	,      Remarks
	,      IsDeleted
	from @TempTable


	order by SNo asc OFFSET @offset ROWS
	FETCH NEXT @fetch ROWS ONLY


	select @RecordCount =count(*)
	from @TempTable



END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetDetailedWinnersReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetDetailedWinnersReport]  -- For Report                                          
  @LanguageID  int=1                                               
 ,@ECouponID  BIGINT=null                                       
 ,@DrawID BIGINT=null                                            
 --,@DrawDate  nvarchar(20)=null  
 ,@FromDate date=  null        
 ,@ToDate date=  null                                         
 ,@PageSize  int=100                                        
 ,@RecordCount bigint    output                                     
 ,@PageIndex int=1                          
 ,@Mobile nvarchar(100) =NULL                          
 ,@EmailID varchar(50)=NULL                          
 --,@CompetitionName nvarchar(100)=NULL                          
 ,@Name nvarchar(200)=NULL      
 ,@MembershipNumber nvarchar(100) =NULL        
 ,@CorporateID int=NULL      
                                      
AS                                                
BEGIN                                                      
  SET NOCOUNT ON;                                      
   declare @offset int,@fetch int;                                             
  set @offset =@PageSize*(@PageIndex-1);                                          
  set @fetch =@PageSize;                                  
                                         
--    select @RecordCount= count(distinct ew.DrawDateTime) from coc_ECouponWinners ew                                          
-- inner join coc_Consumers c on ew.ConsumerID = c.ConsumerID                                       
--inner join coc_ECouponDrawPrizes edp on edp.ECouponDrawPrizeID = ew.ECouponDrawPrizeID                                       
--inner join coc_ECouponDraw ed on ed.ECouponDrawID = edp.ECouponDrawID                                      
--inner join coc_ECouponDrawLanguages edl on edl.ECouponDrawID = ed.ECouponDrawID and edl.LanguageID =@LanguageID and edl.ResourceKey = 'Name'                                      
--inner join coc_ECouponLanguages ecl on ecl.ECouponID = ed.ECouponID and ecl.LanguageID =@LanguageID                                      
--inner join coc_CityLanguages cl on cl.CityID = c.CityID and cl.LanguageID =@LanguageID                                       
--inner join coc_ECoupons ec on ec.ECouponID= ecl.ECouponID                                      
--inner join coc_EServiceLanguages esl on esl.EServiceID= ec.EServiceID                                       
--and esl.LanguageID= @LanguageID                                      
--inner join coc_ECouponParticipations ECP on ECP.ECouponParticipationID = ew.ECouponParticipationID                                       
--inner join coc_NationalityLanguages NL on NL.NationalityID=c.NationalityID and nl.LanguageID=@LanguageID                                       
--inner join coc_ECouponPrizesLanguages ECPL on ECPL.ECouponPrizeID=ew.ECouponPrizeID                                      
--and ECPL.LanguageID=@LanguageID where (@ECouponID is null or ed.ECouponID =@ECouponID)                                      
--and (@DrawID is null or ed.ECouponDrawID=@DrawID)                                       
--and (@DrawDate is null or Convert(date,ew.DrawDateTime)=Convert(date,@DrawDate))                                       
                                      
                                
  declare  @GetWinnersReportData table(SNo bigint IDENTITY(1,1) PRIMARY KEY,DrawDateTime nvarchar(20),[Draw Name] nvarchar(300), [Draw Place] nvarchar(500),                                
  [Competion Name] nvarchar(1000),[Winner Name] nvarchar(200),[Email ID] nvarchar(200),[Winner Mobile Number] varchar(15),[Price  Name] nvarchar(300),                                
  Barcode nvarchar(100),[City] nvarchar(100),[Nationality] nvarchar(100), Photos varchar(200), Form varchar(200))                                
                                
  insert into @GetWinnersReportData                                 
  select  distinct(CONVERT(NVARCHAR(20),ew.DrawDateTime,100)),                                        
             edl.Value as [Draw Name],              
     ed.Location as [Draw Place],                                      
     esl.EService as  [Competion Name] ,                                           
     ew.ConsumerName [Winner Name],  
	  ew.Email [Email ID],
        ew.MobileNumber [Winner Mobile Number],                                          
        ECPL.Value [ Price   Name ] ,                                
           isnull(ECP.Barcode,'') ,                        
     cl.City [City], 	
        NL.Nationality [Nationality]  ,
		(CASE WHEN ecp.UploadImagePath IS NOT NULL THEN 'https://e-copon.com/UploadedFiles/DynamicCompetition/' + ecp.UploadImagePath ELSE '' END) Photos ,
	(CASE WHEN ecp.UploadImagePath2 IS NOT NULL THEN 'https://e-copon.com/UploadedFiles/DynamicCompetition/' + ecp.UploadImagePath2 ELSE '' END) Form  
  from coc_ECouponWinners ew  (NOLOCK)                                      
left join coc_Consumers c (NOLOCK) on ew.ConsumerID = c.ConsumerID                                       
inner join coc_ECouponDrawPrizes edp  (NOLOCK) on edp.ECouponDrawPrizeID = ew.ECouponDrawPrizeID                                       
inner join coc_ECouponDraw ed (NOLOCK) on ed.ECouponDrawID = edp.ECouponDrawID                         
inner join coc_ECouponPrizesLanguages ECPL (NOLOCK) on ECPL.ECouponPrizeID=ew.ECouponPrizeID   and ECPL.ResourceKey= 'Name' and ECPL.LanguageID=@LanguageID                                    
inner join coc_ECouponDrawLanguages edl (NOLOCK) on edl.ECouponDrawID = ed.ECouponDrawID and edl.LanguageID =@LanguageID and edl.ResourceKey = 'Name'                                      
inner join coc_ECouponLanguages ecl (NOLOCK) on ecl.ECouponID = ed.ECouponID and ecl.LanguageID =@LanguageID                                      
left join coc_CityLanguages cl (NOLOCK) on cl.CityID = c.CityID and cl.LanguageID =@LanguageID                                       
inner join coc_ECoupons ec (NOLOCK) on ec.ECouponID= ecl.ECouponID                                      
inner join coc_EServiceLanguages esl (NOLOCK) on esl.EServiceID= ec.EServiceID     and esl.LanguageID= @LanguageID                                      
left join coc_ECouponParticipations ECP (NOLOCK) on ECP.ECouponParticipationID = ew.ECouponParticipationID                                 
left join coc_NationalityLanguages NL (NOLOCK) on NL.NationalityID=c.NationalityID and nl.LanguageID=@LanguageID     and ECPL.LanguageID=@LanguageID               
where (@ECouponID is null or ed.ECouponID =@ECouponID)                      
and (@Mobile is null or  ew.MobileNumber like'%'+@Mobile+'%' or  ew.MobileNumber  =@Mobile )         
and (@MembershipNumber is null or c.MembershipNumber=@MembershipNumber )       
and (@EmailID is null or ew.Email like'%'+@EmailID+'%' or ew.Email = @EmailID )                   
and (@Name is null or ew.ConsumerName like'%'+@Name+'%' or ew.ConsumerName like'%'+@Name+'%' or ew.ConsumerName like'%'+@Name+'%' or ew.ConsumerName=@Name or c.FirstName+c.SecondName+' '+c.FamilyName=@Name or c.FirstName+c.SecondName+' '+c.FamilyName='%'
  
    
+      
@Name+'%'  )                
and (@DrawID is null or ed.ECouponDrawID=@DrawID ) 
and (@FromDate is null or @ToDate is null or  convert(date,ew.DrawDateTime) between convert(date, @FromDate) and  convert(date, @ToDate))                                     
--and (@DrawDate is null or Convert(date,ew.DrawDateTime)=Convert(date,@DrawDate))                                
and ECouponWinnerID not in (24561,24562,24563,24564,24565)               
          
select  SNo,DrawDateTime ,[Draw Name], [Draw Place] ,                                
  [Competion Name] ,[Winner Name] , [Email ID],[Winner Mobile Number] ,[Price  Name],                                
  Barcode ,[City] ,[Nationality], [Photos], [Form]  from  @GetWinnersReportData                                
    order by 1 desc    OFFSET @offset ROWS                                          
FETCH NEXT @fetch ROWS ONLY                                 
                                   
                               
select @RecordCount =count(*) from @GetWinnersReportData                                    
        where (@FromDate is null or @ToDate is null or  convert(date,DrawDateTime) between convert(date, @FromDate) and  convert(date, @ToDate) )                                         
                                             
                                                    
END 
GO
/****** Object:  StoredProcedure [dbo].[USP_GetDropDownValues]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_GetDropDownValues]
( @ScreeID int    = null
, @LanguageID int = null
)
as
begin

	SELECT DropDownValueID
	,      DropDownType
	,      DropDownTypeName
	,      DataValueField
	,      LTRIM(DataTextField_EN) DataTextField_EN
	,      DataTextField_AR
	FROM COC_DropDownValues(NOLOCK)
	where IsActive = 1 order by LTRIM(DataTextField_EN);

END
GO
/****** Object:  StoredProcedure [dbo].[USP_GetDynamicCompetition]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================        
-- Author:  <Shaik Layeeqh>        
-- Create date: <April-11-2019>        
-- Description: Get Dynamic Competition Data         
-- =============================================        
CREATE PROCEDURE [dbo].[USP_GetDynamicCompetition]        
(        
   @CompetitionName nvarchar(max)        
)        
AS        
BEGIN        
 SET NOCOUNT ON;        
 select dc.ECouponID,dc.RetailOutletID,dc.BackgroundCss,dc.ForegroundCss ,EC.EServiceID from coc_DynamicCompetition(NOLOCK) dc        
 INNER JOIN coc_ECoupons(NOLOCK) EC ON EC.ECouponID = dc.ECouponID         
 where dc.CompetitionName=@CompetitionName and dc.IsActive=1
END 
GO
/****** Object:  StoredProcedure [dbo].[USP_GetEcoponInfoByID]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[USP_GetEcoponInfoByID]                        
 @LanguageID int = 1,            
@ECouponID int                        
as            
begin            
            
 SELECT EC.ECouponID,EC.EServiceID,CONVERT(NVARCHAR(12),EC.ResultDate,106) ResultDate,EC.WinnerCount,EC.EntryTypeID,EC.MinInvoiceValue,EC.AdditionalCouponValue,EC.AllowMultipleInvoices,EC.CouponPerInvoice,            
   EC.CouponPerMember,EC.UserAurthorised,EC.QuestionCount,EC.ImageFile,
   (select Value from coc_ECouponLanguages (NOLOCK) where ECouponID=EC.ECouponID and LanguageID = @LanguageID  and ResourceKey='Description') as Description,  
   case when EL.LanguageID= 2 then '<div dir= ''rtl'' >'+(Case When IsNull(EL.UsesTerm,'')='<div><br></div>' or IsNull(EL.UsesTerm,'')=''  then (select isnull(ShortConfigTemsArabic,'')+ConfigTemsArabic from core_coc_Terms(NOLOCK) where TermAndConditionTypeID=1) else EL.UsesTerm end) + '</div>' else (Case when IsNull(EL.UsesTerm,'')='<div><br></div>' or IsNull(EL.UsesTerm,'')='' then (select isnull(ShortConfigTemsEng,'')+ConfigTemsEng from core_coc_Terms(NOLOCK) where TermAndConditionTypeID=1) else EL.UsesTerm end) end as UsesTerm,            
   EL.ECouponTemplate,EC.ParticipationByKiosk,SL.EService [ServiceName],            
   CONVERT(NVARCHAR(12),ES.FromDate,106) StartDate,(CONVERT(NVARCHAR(100),ES.ToDate,106)+' 11:59PM') EndDate,EC.MemberOnly,EC.DisplayImage,              
   case when EC.IsActive=1 AND (CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE)) THEN 1 else 0 end as IsActive,            
   ISNULL(AllowMobileParticipation, 1) as AllowMobileParticipation, ISNULL(AllowWebParticipation, 1) as AllowWebParticipation,         
   ISNULL((select sum(ISNULL(ep.PrizeCount,0)) from coc_ECouponPrizes(NOLOCK) EP where EP.ECouponID = EC.ECouponID),0) as PrizeCount,          
   (select count(*) from coc_ECouponDraw(NOLOCK) ED where ED.ECouponID = EC.ECouponID) as DrawsCount,            
   EC.Location, LocationURL            
  FROM coc_ECoupons(NOLOCK) EC            
   INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID = ES.EServiceID            
   INNER JOIN coc_EServiceLanguages SL(NOLOCK) ON ES.EServiceID=SL.EServiceID AND SL.LanguageID = @LanguageID            
   INNER JOIN coc_ECouponLanguages EL(NOLOCK) ON EL.ECouponID=EC.ECouponID AND EL.LanguageID = @LanguageID            
 WHERE             
   EC.ECouponID = @ECouponID             
               
end 
GO
/****** Object:  StoredProcedure [dbo].[USP_GetECouponConfigurationquestionnaire]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--USP_GetECouponConfigurationquestionnaire 2,1  
CREATE PROC [dbo].[USP_GetECouponConfigurationquestionnaire]  
(  
@ECouponID int,  
@LanguageID int = 1  
)  
AS  
BEGIN  
SELECT Row_number()   
               OVER(   
                 ORDER BY QB.questionbankid) ID,   
             QB.QuestionBankID,   
             QB.ECouponID,   
             QL.Question                     [Question],   
             QL.LanguageID   
      FROM   coc_questionbanks QB(nolock)   
             INNER JOIN coc_questionlanguages QL(nolock)   
             ON QB.questionbankid = QL.questionbankid  WHERE  ecouponid = @ECouponID   
             
     ---------------------------------------------------------  
        
      SELECT QO.QuestionOptionID,   
             QO.QuestionBankID,   
             QL.QuestionOption [Option],   
             QO.IsCorrect,   
             QL.LanguageID   
      FROM   coc_questionoptions (nolock)QO   
             left JOIN coc_questionoptionlanguages QL(nolock)   
                     ON QO.questionoptionid = QL.questionoptionid   
      -- AND QL.LanguageID=@LanguageID   
      WHERE  QO.questionbankid IN(SELECT QB.questionbankid   
                                  FROM   coc_questionbanks (nolock)QB   
                                  WHERE  ecouponid = @ECouponID)   
      ORDER  BY QO.questionoptionid,   
                QO.questionbankid,   
                QL.questionoption   
END
GO
/****** Object:  StoredProcedure [dbo].[usp_getEcouponStatus]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[usp_getEcouponStatus]
@ECouponID int
as
Begin
if exists (Select IsActive from coc_ecoupons (NOLOCK) where ECouponID = @ECouponID)
 begin
	Select IsActive from coc_ecoupons (NOLOCK) where ECouponID = @ECouponID
 end
else 
  begin
  select 0 as IsActive;
  end

End
GO
/****** Object:  StoredProcedure [dbo].[usp_GetEmailTemplates]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROC [dbo].[usp_GetEmailTemplates]   
 @EmailTemplateID int = null
AS    
BEGIN    
  select EmailTemplateID,Subject,EmailBody from coc_core_EmailTemplates(nolock) where EmailTemplateID=@EmailTemplateID and isactive=1
    
END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetErrorInfo]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetErrorInfo]  
AS  
SELECT  
    ERROR_NUMBER() AS ErrorNumber  
    ,ERROR_SEVERITY() AS ErrorSeverity  
    ,ERROR_STATE() AS ErrorState  
    ,ERROR_PROCEDURE() AS ErrorProcedure  
    ,ERROR_LINE() AS ErrorLine  
    ,ERROR_MESSAGE() AS ErrorMessage;
GO
/****** Object:  StoredProcedure [dbo].[USP_GetEserviceNames]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
-- =============================================  
-- Author:  <Rafeeq Mohammad>  
-- Create date: <April-10-2019>  
-- Description: Get Eservice Names   
-- =============================================  
CREATE PROCEDURE [dbo].[USP_GetEserviceNames]  
(  
@LanguageID int = 1,  
@CorporateID int = NULL  
)  
AS  
BEGIN  
  
 SET NOCOUNT ON;  
 select ec.ECouponID,esl.EService from coc_EServices (NOLOCK) es   
 inner join coc_ECoupons(NOLOCK) ec on es.EServiceID = ec.EServiceID  
 inner join coc_EServiceLanguages(NOLOCK) esl on esl.EServiceID = es.EServiceID and esl.LanguageID = @LanguageID    
 where es.IsActive = 1 and (@CorporateID is null or es.CorporateID=@CorporateID) order by ec.ECouponID desc  
END  

GO
/****** Object:  StoredProcedure [dbo].[USP_GetEserviceNamesByActiveDate]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_GetEserviceNamesByActiveDate]    
(    
@LanguageID int = 1,    
@CorporateID int = NULL    
)    
AS    
BEGIN    
    
 SET NOCOUNT ON;    
 select ec.ECouponID,esl.EService from coc_EServices (NOLOCK) es     
 inner join coc_ECoupons(NOLOCK) ec on es.EServiceID = ec.EServiceID    
 inner join coc_EServiceLanguages(NOLOCK) esl on esl.EServiceID = es.EServiceID and esl.LanguageID = @LanguageID      
 where es.IsActive = 1 and es.ToDate <= getdate()   and (@CorporateID is null or es.CorporateID=@CorporateID) order by ec.ECouponID desc    
END  
GO
/****** Object:  StoredProcedure [dbo].[USP_GETeVOUCHERIMAGE]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_GETeVOUCHERIMAGE](
@LanguageID INT,
@EserviceID int
)
AS
BEGIN

SELECT EI.EVoucherImagesID,EI.EVoucherID,EI.ImageFile FROM coc_EVoucherImages(NOLOCK) EI JOIN 

 coc_EVoucher (NOLOCK) EV ON EV.EVoucherID = EI.EVoucherID  WHERE 
	EV.EServiceID = @EServiceID
	--and EI.LanguageID = @LanguageID 


END
GO
/****** Object:  StoredProcedure [dbo].[Usp_GetExternalBarcodeCompetitionReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Usp_GetExternalBarcodeCompetitionReport]        
  @LanguageID  int=1                                                                     
 ,@EServiceID bigint=NULL                                                   
 ,@PageSize  int=100                                                  
 ,@RecordCount bigint output                                               
 ,@PageIndex int=1                                    
 ,@CorporateID int= NULL     
 ,@FromDate date=NULL                                  
 ,@ToDate date=NULL      
 ,@Mobile nvarchar(100)= NULL                                                          
 ,@EmailID varchar(50)=NULL                                  
 ,@Name nvarchar(100)=NULL        
 AS                                                          
BEGIN       
  SET NOCOUNT ON;                                         
  declare @offset bigint,@fetch  bigint;                                  
     set @offset =@PageSize*(@PageIndex-1);                                  
     set @fetch =@PageSize;     
      
 IF (@FromDate IS NULL)      
   SET @FromDate = GetDate();                                  
 IF (@ToDate IS NULL)      
   SET @ToDate = dateadd(dd, + 1, GetDate());      
IF (@LanguageID IS NULL)      
  SET @LanguageID = 1;     
     
 declare @ExternalBarcodeParticipants table (SNo bigint identity(1,1),[Mobile Number] nvarchar(15),EmailID nvarchar(100) ,[Competition Name]  nvarchar(1000),[RetailOutlet]  nvarchar(1000),[Corporate Name] nvarchar(250),[Name] nvarchar(250),[Entered Barcode] nvarchar(250),[Date Of Scanning] nvarchar(100), [Copon Number] nvarchar(250),[Status] nvarchar(500))           
     
 insert into @ExternalBarcodeParticipants([Date Of Scanning],[Mobile Number],EmailID,[Competition Name],[RetailOutlet],[Corporate Name],[Name],[Entered Barcode],[Copon Number],[Status])    
    Select CONVERT(NVARCHAR(19), EPE.ParticipationDate, 113), EPE.ParticipationMobile,EPE.ParticipationEmailID,ESL.EService,   
 (Case When EPE.RetailOutletID is not null then (Select RetailOutlet from coc_RetailOutletLanguages(nolock) where RetailOutletID=EPE.RetailOutletID and LanguageId=1)  else '' end),  
   (Case when C.CorporateName is not null  then C.CorporateName else (Case when C.CorporateNameAR is not null then C.CorporateNameAR else isnull(C.FirstName,'')+' '+isnull(C.FirstName,'')+' '+isnull(C.FirstName,'') end)  end) as CorporateName,    
   (Case when CS.FullName is not null then CS.FullName else ISNULL(CS.FirstName,'')+' '+ISNULL(CS.FirstName,'')+' '+ISNULL(CS.FirstName,'') end),    
   EPE.EnteredBarcode,  
   (Select EP.Barcode from coc_ECouponParticipations(nolock) EP Where EP.ECouponParticipationID=EPE.ECouponParticipationID),  
   (Case when EPE.ParticipantStatus=1 then 'Pending'  
     when EPE.ParticipantStatus=2 then 'Success'  
   when EPE.ParticipantStatus=3 then 'Participation failed'  
    when EPE.ParticipantStatus=4 then 'Invalid barcode'  
     when EPE.ParticipantStatus=5 then 'Already Used' end)  
  from coc_ECouponParticipationByExternalBarcode(nolock) EPE    
         inner join coc_ECoupons(nolock) EC on EC.ECouponID=EPE.ECouponID    
   inner join coc_EServices(nolock) ES on ES.ESErviceID=EC.EServiceID    
         inner join coc_EServiceLanguages(nolock) ESL on ESL.ESErviceID=ES.EServiceID and LanguageID=1    
   inner join coc_Corporates(nolock) C on C.CorporateID=ES.CorporateID    
            inner join coc_Consumers(nolock) CS on CS.ConsumerID= EPE.ConsumerID    
     
    where (@CorporateID is null or EPE.CorporateID=@CorporateID)    
 and (@EServiceID is null or ES.EServiceID=@EServiceID) and (CONVERT(DATE, EPE.ParticipationDate) BETWEEN @FromDate AND @ToDate)    
 and (@Mobile is null or EPE.ParticipationMobile=@Mobile) and (@EmailID is null or EPE.ParticipationEmailID=@EmailID)    
 and (@Name IS NULL OR CS.FullName LIKE '%' + @Name + '%' OR isnull(CS.FirstName, '') + ' ' + isnull(CS.SecondName, '') + ' ' + isnull(CS.FamilyName, '') LIKE '%' + @Name + '%'  )    
 --and (@MembershipNumber IS NULL OR CS.MembershipNumber = @MembershipNumber)     
      
  select @RecordCount= count(*) from @ExternalBarcodeParticipants              
      
  select [Date Of Scanning],[Mobile Number],EmailID,[Competition Name],[RetailOutlet],[Corporate Name],[Name],[Entered Barcode],isnull([Copon Number],'') Barcode,[Status] from @ExternalBarcodeParticipants order by SNO OFFSET @offset ROWS FETCH NEXT @fetch ROWS ONLY         
       
END
GO
/****** Object:  StoredProcedure [dbo].[USP_GetHomeBadges]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_GetHomeBadges]     
 @ConsumerID INTEGER = null,    
 @LanguageID INTEGER=1    
    
AS    
    
 BEGIN      
    
  DECLARE @EcouponCount int;    
  DECLARE @TicketCount int;    
  DECLARE @EvoucherCount int;    
  DECLARE @NotificationCount int= 0;    
  DECLARE @AllowHomePageScanning bit= 0;    
  --eCoupon Count    
    
  SELECT @EcouponCount = count(*) FROM coc_ECoupons(NOLOCK) EC    
    INNER JOIN coc_EServices ES(NOLOCK) ON EC.EServiceID = ES.EServiceID    
    INNER JOIN coc_EServiceLanguages SL(NOLOCK) ON ES.EServiceID=SL.EServiceID AND SL.LanguageID = @LanguageID    
  WHERE EC.IsActive=1 AND CAST(GETDATE() AS DATE) BETWEEN CAST(ES.FromDate AS DATE) AND CAST(ES.ToDate AS DATE) AND EC.ResulltDeclared=0     
    and ES.EServiceID not in (select distinct ES.EServiceID from coc_EServices(NOLOCK) ES     
    inner join coc_ECoupons(NOLOCK) EC ON EC.EServiceID = ES.EServiceID    
    inner join coc_ECouponParticipations(NOLOCK) ECP ON ECP.ECouponID = EC.ECouponID    
   where ECP.ConsumerID = @ConsumerID)    
    and  ISNULL(EC.IsShowMobile,1) = 1 ;    
       
  ----AllowHomePageScanning     
  Set @AllowHomePageScanning=0    
  --Ticket count    
    
  SELECT @TicketCount = count(*) FROM coc_EServiceEvents(NOLOCK) TC    
   INNER JOIN coc_EnumValueLanguages(NOLOCK) EV ON TC.EventTypeID=EV.EnumValueID AND EV.LanguageID=@LanguageID    
   INNER JOIN coc_EServiceLanguages(NOLOCK) SL ON TC.EServiceID=SL.EServiceID AND SL.LanguageID = @LanguageID    
  WHERE TC.IsActive=1 AND CAST(GETDATE() AS DATE) BETWEEN CAST(TC.PurchaseStartDate AS DATE) AND CAST(TC.PurchaseEndDate AS DATE)    
    
  --eVoucher count    
    
  SELECT @EvoucherCount = COUNT(distinct EV.EVoucherID) FROM coc_EVoucher EV(NoLOCK) INNER JOIN coc_EServices ES(NOLOCK) ON EV.EServiceID = ES.EServiceID     
   WHERE getdate() between es.FromDate and ES.ToDate  AND EV.IsActive = 1 and EV.EVoucherCategoryID is not null and (EV.EVoucherTypeID=1 or EV.EVoucherTypeID is null)      
    
  --Notification count    
  SELECT @NotificationCount = COUNT(*) FROM coc_ConsumerNotifications CN(NOLOCK)     
   INNER JOIN coc_Consumers (NOLOCK) CU ON CU.ConsumerID=CN.ConsumerID    
   INNER JOIN coc_NotificationSends(NOLOCK) NS ON CN.NotificationSendID=NS.NotificationSendID    
   INNER JOIN coc_NotificationSendLanguages(NOLOCK) NL ON NL.NotificationSendID=CN.NotificationSendID AND LanguageID=@LanguageID --AND SendingType != 4    
   --LEFT JOIN coc_Notifications(NOLOCK) NT ON NT.NotificationID=NS.NotificationID    
   --LEFT JOIN coc_EServiceBarcodes(NOLOCK) EB ON EB.NotificationID=NS.NotificationID AND CN.ConsumerID=EB.ConsumerID AND EB.ConsumerNotificationID=CN.ConsumerNotificationID    
   --LEFT JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID=NT.EServiceID    
   --LEFT JOIN coc_corporates(NOLOCK) CO ON CO.CorporateID =ES.CorporateID    
    
    
    
  WHERE  ISNULL(CN.ConsumerID,0)=@ConsumerID  AND NS.SendingDate<=GETDATE() and CN.HasChecked = 0    
    
  SELECT @EcouponCount as EcouponCount , @TicketCount as TicketCount , @EvoucherCount as EvoucherCount,@AllowHomePageScanning AllowHomePageScanning, @NotificationCount as NotificationCount    
 END    
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_GetMobileAdvertisements]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE PROCEDURE [dbo].[USP_GetMobileAdvertisements]    
 @ConsumerID INTEGER = null,    
 @LanguageID INTEGER=1,
 @PageID INTEGER=NULL  
  
AS  
  
SET NOCOUNT ON  
  
 BEGIN    
  
  if(@PageID=0)
    set  @PageID=null
  --Tables[0] Advertisement2  
  
  SELECT distinct FL.AdvertisementFileID,FL.AdvertisementID,FL.FilePath,FL.IsURL,AdvertisementText,ISNULL(AV.PositionID,101) PositionID,AV.IsImage,AV.IsVideo,AV.IsActive,  
    isnull(AV.TargetLinkType,'URL') TargetLinkType, isnull(AV.eCouponID,0) eCouponID, AV.TargetURL  
  
   FROM coc_AdvertisementFiles FL(NOLOCK)   
  
    INNER JOIN coc_Advertisements(NOLOCK) AV ON FL.AdvertisementID=AV.AdvertisementID 
	
left join coc_AdvertisementPages(NOLOCK) AP ON AP.AdvertisementID=AV.AdvertisementID  
  
   WHERE AV.IsActive=1 and (@PageID is null or AP.PageID=@PageID)  
    --and PositionID = '101'   
    and TargetPlateform IN(1,3)  
	
  
  ORDER BY FL.AdvertisementID  
  
  
 END  
  
  
  
SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[USP_GetMobileAppByUserId]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_GetMobileAppByUserId] 
@UserId bigint AS 
BEGIN
   SELECT
      TOP (1) 
	  US.UserID,
      UserName,
      US.[Password],
      US.IsActive,
      RoleID,
      US.MobileNumber,
      US.EmailID,
      US.ResetRequired,
      ISNULL(CS.ConsumerID, 0) [ConsumerID],
      CS.IsVerified,
      CS.OtpID [VerificationCode],
      ISNULL(US.FullName, '') FullName,
      CASE
         WHEN
            ISNULL(CS.Address1, '') = '' 
         THEN
            'Address' 
         ELSE
            CS.Address1 
      END
      Address1 
   FROM
      [coc_Users](NOLOCK) US 
      LEFT JOIN
         [coc_Consumers](NOLOCK) CS 
         ON CS.UserID = US.UserID 
   WHERE
      US.UserId = @UserId
END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetOrderShippingAddress]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  <Rafeeq Mohammad>  
-- Create date: <03-06-2020>  
-- Description: <Get-Latest-shipping-address>  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_GetOrderShippingAddress]   
 (  
  @ConsumerID int   
 )  
AS  
BEGIN  
 SELECT top (1) AD.ConsumerID,AD.PostalCode,AD.Address,LTRIM(RTRIM(CCL.Country)) Country,CC.ISOThreeCharCode ISOCode,LTRIM(RTRIM(CTL.City)) City,AD.State,AD.CountryID,AD.CityID from coc_OrderAddresses (NOLOCK) AD   
  INNER JOIN coc_Countries(NOLOCK) CC on CC.CountryID = AD.CountryID  
  INNER JOIN coc_CountryLanguages(NOLOCK) CCL on CCL.CountryID = CC.CountryID and CCL.LanguageID = 1  
  INNER JOIN coc_Cities(NOLOCK) CT on CT.CityID = AD.CityID  
  INNER JOIN coc_CityLanguages(NOLOCK) CTL on CTL.CityID = CT.CityID and CTL.LanguageID = 1  
 WHERE AD.ConsumerID = @ConsumerID order by OrderAdressID DESC   
END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetPaytabVoucher]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetPaytabVoucher]  
 @ConsumerID INTEGER   
,@GuestID INTEGER = NULL  
,@LanguageID INTEGER = 1  
,@VoucherID INTEGER   
,@Status INTEGER OUTPUT  
,@VoucherBarcode NVARCHAR(100) OUTPUT  
,@MessageText NVARCHAR(150) OUTPUT  
,@BarcodeID bigint output
AS  
BEGIN  
BEGIN TRY  
 --DECLARE @CorporateID INTEGER  
 DECLARE @ServiceID INTEGER  
 DECLARE @NotificationID INTEGER  
 SELECT @ServiceID=EServiceID FROM coc_EVoucher (NOLOCK) WHERE EVoucherID=@VoucherID  
 SELECT @NotificationID=NotificationID FROM coc_Notifications(NOLOCK) WHERE EServiceID=@ServiceID  
   
  
 BEGIN  
  DECLARE @eServiceBarcodeID INTEGER  
  Declare @barcode nvarchar(100)  
  
  
  SELECT TOP 1 @eServiceBarcodeID = EServiceBarcodeID, @barcode =Barcode FROM coc_EServiceBarcodes (NOLOCK) WHERE NotificationID=@NotificationID   AND EVoucherID IS NULL  
  IF @eServiceBarcodeID is null  
		BEGIN
			SELECT @Status = 0  
			, @VoucherBarcode = NULL  
			,@MessageText = 'Sorry there are no more vouchers available for this type'  
		END
  ELSE  
  BEGIN 
   UPDATE   top (1) coc_EServiceBarcodes  
      SET  ConsumerID = @ConsumerID  
					, GuestID = @GuestID  
					, EVoucherID = @VoucherID  
					, IsBlocked = 1  WHERE EServiceBarcodeID = @eServiceBarcodeID  
   SELECT @BarcodeID =@eServiceBarcodeID,  @Status = 1, @VoucherBarcode = @barcode ,@MessageText='Your request has been processed successfully'  
 END       
END   
  
END try  
BEGIN CATCH           
 SELECT @Status = 0, @MessageText=ERROR_MESSAGE()  
 RAISERROR(@MessageText, 16, 1);     
END CATCH  
END
GO
/****** Object:  StoredProcedure [dbo].[Usp_GetPromoCodeDetails]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Usp_GetPromoCodeDetails]            
  @ConsumerID INTEGER             
,@LanguageID INTEGER = 1            
AS            
BEGIN            
Select cp.ConsumerID,cp.PromoCode,  
    (Case when @LanguageID=2 then cc.CategoryNameAR else cc.CategoryName end) CategoryName,  
    convert(nvarchar(30),c.PromoCodeAddedDate) AppliedDateTime,  
    convert(nvarchar(30),c.PromoCodeExpiryDate) ExpiryDateTime,  
    (Case when DATEDIFF(minute, getdate(),c.PromoCodeExpiryDate)<0 then 1 else 0 end ) IsExpired  
    from  coc_core_PromoCodes(nolock) cp  
    inner join coc_core_Category(nolock) cc on cc.CategoryID=cp.CategoryID  
    inner join coc_consumers(nolock) c on c.ConsumerID=cp.ConsumerID  
    where cp.ConsumerID=@ConsumerID         
END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetRelatedFilterData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
CREATE  PROCEDURE [dbo].[usp_GetRelatedFilterData]      
   @Language VARCHAR(10) = 'en-US',      
   @FilterID bigint,     
   @ReportID bigint,     
   @SelectedValue nvarchar(500),      
   @Condition nvarchar(500),      
   @spResult INT OUTPUT,      
   @spResultMessage NVARCHAR(500) OUTPUT      
AS         
BEGIN      
 BEGIN TRY      
  SET NOCOUNT ON;      
  declare @outputquery nvarchar(max)    
  declare @conditionQueryType int    
  set @outputquery=''   
  set @conditionQueryType=1     
      
       
  if(@ReportID=0)    
  begin    
     SELECT @outputquery=ConditionQuery,@conditionQueryType=ConditionQueryType      
          from coc_ReportCommonFilters  (NOLOCK)     
    where IsActive=1 and CommonFilterID=@FilterID     
  end    
  else    
  begin    
  SELECT @outputquery=ConditionQuery,@conditionQueryType=ConditionQueryType      
          from coc_ReportFilters (NOLOCK)      
    where IsActive=1 and ReportFilterID=@FilterID       
end    
         
if(@outputquery!='')      
 begin   
   if(@conditionQueryType=1)  
   begin     
    set @outputquery=REPLACE(@outputquery, '@'+@Condition, @SelectedValue)      
    exec(@outputquery)   
   end    
   else  
   begin  
     if(@Language='en-US')
	 begin
       exec @outputquery 1,@SelectedValue
	 end 
	 else 
	 begin
       exec @outputquery 2,@SelectedValue
	 end  
   end   
  SELECT @spResult = 0,      
   @spResultMessage = 'Succes'      
end      
  else          
  begin      
 SELECT @spResult = 0,      
   @spResultMessage = 'Succes'      
      
 end      
        
 END TRY      
 BEGIN CATCH         
  SET  @spResult = 1       
  SET  @spResultMessage= 'Generic Error: '+ ERROR_MESSAGE()      
 END CATCH      
END 
GO
/****** Object:  StoredProcedure [dbo].[usp_GetReportFilterData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE  PROCEDURE [dbo].[usp_GetReportFilterData]  
   @Language VARCHAR(10) = 'en-US',  
   @ReportID bigint,  
   @spResult INT OUTPUT,  
   @spResultMessage NVARCHAR(500) OUTPUT  
AS     
BEGIN  
 BEGIN TRY  
  SET NOCOUNT ON;  
  declare @AccpetCommonFilters bit=null  
  set @AccpetCommonFilters=0  
  
  select @AccpetCommonFilters=AcceptCommonFilters from coc_Reports(NOLOCK) where ReportID=@ReportID  
  
  if (@AccpetCommonFilters=1)  
  begin   
  SELECT tblReportFilter.ReportFilterID,tblReportFilter.ReportID,  
         (case when @Language='en-US' then tblReportFilter.DisplayLabelName_EN  else tblReportFilter.DisplayLabelName_AR end) as DisplayLabelName,  
    tblReportFilter.ParameterControlType,  
    tblReportFilter.ParameterColumnName,  
    tblReportFilter.ParameterColumnDataType,  
    tblReportFilter.ConditionQuery,  
    tblReportFilter.IsCompulsory,  
    tblReportFilter.RelationFilterID,
	tblReportFilter.ConditionQueryType  
          from coc_ReportFilters(NOLOCK) tblReportFilter   
    where tblReportFilter.IsActive=1 and ReportID=@ReportID  
    union  
        SELECT tblReportFilter.CommonFilterID as ReportFilterID,0 as ReportID,  
         (case when @Language='en-US' then tblReportFilter.DisplayLabelName_EN  else tblReportFilter.DisplayLabelName_AR end) as DisplayLabelName,  
    tblReportFilter.ParameterControlType,  
    tblReportFilter.ParameterColumnName,  
    tblReportFilter.ParameterColumnDataType,  
    tblReportFilter.ConditionQuery,  
    tblReportFilter.IsCompulsory,  
    tblReportFilter.RelationFilterID,
	tblReportFilter.ConditionQueryType  
          from coc_ReportCommonFilters(NOLOCK) tblReportFilter   
    where tblReportFilter.IsActive=1  
end  
else  
begin  
SELECT tblReportFilter.ReportFilterID,tblReportFilter.ReportID,  
         (case when @Language='en-US' then tblReportFilter.DisplayLabelName_EN  else tblReportFilter.DisplayLabelName_AR end) as DisplayLabelName,  
    tblReportFilter.ParameterControlType,  
    tblReportFilter.ParameterColumnName,  
    tblReportFilter.ParameterColumnDataType,  
    tblReportFilter.ConditionQuery,  
    tblReportFilter.IsCompulsory,  
    tblReportFilter.RelationFilterID,
	tblReportFilter.ConditionQueryType  
          from coc_ReportFilters(NOLOCK) tblReportFilter   
    where tblReportFilter.IsActive=1 and ReportID=@ReportID  
end  
  
  SELECT @spResult = 0,  
   @spResultMessage = 'Succes'  
    
 END TRY  
 BEGIN CATCH     
  SET  @spResult = 1   
  SET  @spResultMessage= 'Generic Error: '+ ERROR_MESSAGE()  
 END CATCH  
END 
GO
/****** Object:  StoredProcedure [dbo].[usp_GetReportList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[usp_GetReportList]            



   @Language VARCHAR(10) = 'en-US',            



   @UserID bigint=null,            



   @RoleID bigint=1,            



   @spResult INT OUTPUT,            



   @spResultMessage NVARCHAR(500) OUTPUT               



AS               



BEGIN            





 BEGIN TRY            



  SET NOCOUNT ON;     

  

      if(@RoleID is null)

	     set @RoleID=1       



   SELECT tblReport.ReportID,            



      (case when @Language='en-US' then ReportName_EN  else ReportName_AR end) as ReportName,            



   tblReport.AcceptCommonFilters,            



   tblReport.Description,tblReport.DataModelType,tblReport.DataModel,            



   (select count(*) from coc_ReportFilters (NOLOCK) where ReportID=tblReport.ReportID and IsActive=1)as FilterCount            



          from coc_Reports(NOLOCK) tblReport             



    INNER JOIN coc_ReportMappingByRole(NOLOCK) tblRMR on tblRMR.ReportID=tblReport.ReportID            



    where tblReport.IsActive=1 and tblRMR.RoleID=@RoleID           



     order by tblReport.ReportID desc       



  SELECT @spResult = 0,            



   @spResultMessage = 'Succes'            



              



 END TRY            



 BEGIN CATCH               



  SET  @spResult = 1             



  SET  @spResultMessage= 'Generic Error: '+ ERROR_MESSAGE()            



 END CATCH            



END 
GO
/****** Object:  StoredProcedure [dbo].[usp_GetReportListById]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[usp_GetReportListById]
   @Language VARCHAR(10) = 'en-US',
   @ReportID bigint,
   @spResult INT OUTPUT,
   @spResultMessage NVARCHAR(500) OUTPUT
AS   
BEGIN
 BEGIN TRY
  SET NOCOUNT ON;
  SELECT tblReport.ReportID,
      (case when @Language='en-US' then ReportName_EN  else ReportName_AR end) as ReportName,
	  tblReport.Description,tblReport.DataModelType,tblReport.DataModel,
	  (select count(*) from coc_ReportFilters(NOLOCK) where ReportID=tblReport.ReportID and IsActive=1)as FilterCount
          from coc_Reports(NOLOCK) tblReport 
		  where tblReport.IsActive=1 and ReportID=@ReportID
     order by tblReport.ReportID desc
	 SELECT @spResult = 0,
	  @spResultMessage = 'Succes'
  
 END TRY
 BEGIN CATCH   
  SET  @spResult = 1 
  SET  @spResultMessage= 'Generic Error: '+ ERROR_MESSAGE()
 END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetReportOuputParams]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[usp_GetReportOuputParams]
   @Language VARCHAR(10) = 'en-US',
   @ReportID bigint,
   @spResult INT OUTPUT,
   @spResultMessage NVARCHAR(500) OUTPUT
AS   
BEGIN
 BEGIN TRY
  SET NOCOUNT ON;
  SELECT tblReportOutputParams.OutputParamName
          from coc_Report_OutputParams(NOLOCK) tblReportOutputParams 
		  where tblReportOutputParams.IsActive=1 and tblReportOutputParams.ReportID=@ReportID


	 SELECT @spResult = 0,
	  @spResultMessage = 'Succes'
  
 END TRY
 BEGIN CATCH   
  SET  @spResult = 1 
  SET  @spResultMessage= 'Generic Error: '+ ERROR_MESSAGE()
 END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[USP_GetRetailoutletByEcoupon]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
-- =============================================  
-- Author:  <Rafeeq Mohammad>  
-- Create date: <April-10-2019>  
-- Description: Get Retailoutlet By Ecoupon  
-- =============================================  
CREATE PROCEDURE [dbo].[USP_GetRetailoutletByEcoupon]  
(  
@ECouponID int  
)  
AS  
BEGIN  
  
 SET NOCOUNT ON;  
 select RO.RetailOutletID,ROL.RetailOutlet from coc_RetailOutlets(NOLOCK)  RO inner join coc_RetailOutletLanguages(NOLOCK)  ROL on ROL.RetailOutletID = RO.RetailOutletID  
 inner join coc_ECouponOutlets(NOLOCK) EO on EO.RetailOutletID = RO.RetailOutletID  
 where EO.ECouponID = @ECouponID  
END  
GO
/****** Object:  StoredProcedure [dbo].[usp_getstore]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_getstore]
(
@LanguageID int = 1,
@CorporateID int
)
as
begin
select coc_RetailOutlets.RetailOutletID ,coc_RetailOutletLanguages.RetailOutlet  from  coc_RetailOutlets(NOLOCK) join
coc_RetailOutletLanguages(NOLOCK) on coc_RetailOutlets.RetailOutletID = coc_RetailOutletLanguages.RetailOutletID
where coc_RetailOutlets.IsActive = 1 and coc_RetailOutletLanguages.LanguageID = @LanguageID and coc_RetailOutlets.CorporateID = @CorporateID
end



GO
/****** Object:  StoredProcedure [dbo].[usp_GetVoucherDashBoard]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[usp_GetVoucherDashBoard]
as
begin
DECLARE @VoucherCount int;
DECLARE @DistributedCount int;
DECLARE @TotalVoucherUsedCount int;

select @VoucherCount = count(*) from coc_evoucher(NOLOCK) join coc_EServices(NOLOCK) on coc_EServices.eserviceid = coc_evoucher.eserviceid

select @DistributedCount = count(*) from coc_EServiceBarcodes(NOLOCK) join coc_Notifications(NOLOCK) on coc_Notifications.notificationid = coc_EServiceBarcodes.notificationid join coc_EServices(NOLOCK) on coc_EServices.eserviceid = coc_Notifications.eserviceid where  coc_EServiceBarcodes.isused = 1

select @TotalVoucherUsedCount = count(*) from coc_EServiceBarcodes(NOLOCK) join coc_Notifications(NOLOCK) on coc_Notifications.notificationid = coc_EServiceBarcodes.notificationid join coc_EServices(NOLOCK) on coc_EServices.eserviceid = coc_Notifications.eserviceid where  coc_EServiceBarcodes.isused = 1

select @VoucherCount VoucherCount,@DistributedCount DistributedCount,@TotalVoucherUsedCount TotalVoucherUsedCount
end
GO
/****** Object:  StoredProcedure [dbo].[USP_GetVoucherDetailsByVoucherID]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ======================================================================      
-- Author         :  Rafeeq Mohammad   
-- Create date    : 21-March-2019      
-- Description    : Get Voucher Details By Evoucher ID  
-- Example Call   : USP_GetVoucherDetailsByVoucherID 34  
-- ======================================================================      
CREATE procedure [dbo].[USP_GetVoucherDetailsByVoucherID]  
(  
@EVoucherID INT  
)  
AS  
BEGIN  
  
 SET NOCOUNT ON;          
 DECLARE @LanguageID int = 1;  
    SELECT top 1  ELN.ResourceValue AS VoucherName,  
   ES.FromDate StartDate,   
   ES.ToDate EndDate,           
   EC.NumberOfVouchers,  
   EL.ResourceValue AS VoucherDescription,  
   EC.[Type] VoucherType,  
   EC.PromotionAmount ,   
   EC.VoucherAmount ,     
   EC.PriceAfterDiscount,    
   EC.DiscountType ,    
   EC.DiscountAmount ,    
   EC.OriginalPrice ,    
   EC.DiscountPercentage  
    FROM    coc_EVoucher(NOLOCK) EC     
 left JOIN  coc_EServices ES(NOLOCK) ON EC.EServiceID = ES.EServiceID   
 left JOIN  coc_EVoucherLanguages ELN(NOLOCK) ON  ELN.EVoucherID=@EVoucherID AND ELN.ResourceKey = 'VoucherName' AND ELN.LanguageID = @LanguageID   
 left JOIN coc_EVoucherLanguages EL(NOLOCK) ON  EL.EVoucherID=@EVoucherID AND EL.ResourceKey = 'Description'  AND ELN.LanguageID = @LanguageID   
 WHERE    EC.EVoucherID = @EVoucherID   
 END        
         
   
      
      
  
    
  
GO
/****** Object:  StoredProcedure [dbo].[usp_GetVoucherDynamicReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetVoucherDynamicReport]          
  @LanguageID  int=1                                                                       
 ,@EVoucherID  int=NULL                          
 ,@FromDate date=  NULL                                
 ,@ToDate date= NULL                        
 ,@Status int=NULL                                             
 ,@EmailID varchar(50)=NULL                       
 ,@Mobile nvarchar(100) =NULL                                                   
 ,@Name nvarchar(200)=NULL                              
 ,@CorporateID int=NULL                              
 ,@PageSize  int=100                                                                
 ,@RecordCount bigint   Output                                                             
 ,@PageIndex int=1                                                  
AS                                                                        
BEGIN  
   if isnull(@EVoucherID,0)=0
     return;
  SET NOCOUNT ON;    
   
   declare @offset int,@fetch int;                                                                     
   set @offset =@PageSize*(@PageIndex-1);                                                                  
   set @fetch =@PageSize;                                                          
                                                                 
  --declare  @GetVouchersReportData table(SNo bigint IDENTITY(1,1) PRIMARY KEY,[Voucher Name] nvarchar(2000),[Date of received] nvarchar(50),[Time of received] nvarchar(50),[Date redeemed] nvarchar(50),[Time redeemed] nvarchar(50), [Name] nvarchar(1000),   
  --[Mobile] varchar(15),[Email ID] nvarchar(100),[Nationality] nvarchar(100),[Date of birth] nvarchar(20),[Gender] nvarchar(10),[Status] nvarchar(20),[Voucher Barcode] nvarchar(100))                                                        
                       
 if(@Status is null)                      
 begin  
    select @RecordCount=count(esb.EServiceBarcodeID)                          
         from coc_EVoucher(nolock) ev                      
         inner join coc_EVoucherLanguages(nolock) evl on evl.EVoucherID=ev.EVoucherID and evl.LanguageID=@LanguageID and evl.ResourceKey='VoucherName'                      
   inner join coc_EServices(nolock) es on es.EServiceID=ev.EServiceID                      
   inner join coc_EServiceBarcodes(nolock) esb on esb.EVoucherID=ev.EVoucherID                      
   left join coc_Consumers c (NOLOCK) on esb.ConsumerID = c.ConsumerID                         
   left join coc_NationalityLanguages nl (NOLOCK) on nl.NationalityID=c.NationalityID and nl.LanguageID=@LanguageID                      
   where (@EVoucherID is null or ev.EVoucherID=@EVoucherID)           
   and (@CorporateID is null or es.CorporateID=@CorporateID)           
   and (@FromDate is null or convert(date,esb.AssignedDate)>= convert(date,@FromDate)) and (@ToDate is null or  convert(date,esb.AssignedDate,103)<=convert(date,@ToDate))         
      --and (@Mobile is null or  c.PrimaryMobile =@Mobile)            
   --and (@EmailID is null or c.EmailID= @EmailID)                                            
      --and (@Name is null or c.FullName=@Name)          


  SELECT ROW_NUMBER() OVER (                              
   ORDER BY (                              
     SELECT 1                              
     )                              
   ) SNo ,
   evl.ResourceValue [Voucher Name],CONVERT(NVARCHAR(20),esb.AssignedDate,103) as [Date of received], FORMAT(esb.UsedDate, 'hh:mm:ss tt') as[Time of received],  
 CONVERT(NVARCHAR(20),esb.UsedDate,103) as[Date redeemed],FORMAT(esb.UsedDate, 'hh:mm:ss tt')   as [Time redeemed],                     
        (case when c.FullName is null then isnull(c.firstname,'')+' '+isnull(c.SecondName,'')+' '+isnull(c.FamilyName,'') else c.FullName end) as [Name],                      
     isnull(c.PrimaryMobile,'') as [Mobile],isnull(c.EmailID,'') [Email ID],isnull(nl.Nationality,'') [Nationality],                      
     (case when c.BirthDate is null then '' else CONVERT(NVARCHAR(20),c.BirthDate,103) end) [Date of birth],                      
     (case when (c.Gender=1 or c.Gender=1500) then 'Male' else (case when (c.Gender=2 or c.Gender=1501) then 'female' else '' end) end) [Gender],                      
     (case when esb.UsedDate is null then 'Not Redeemed' else 'Redeemed' end) [Status],                      
     (case when esb.UsedDate is null then esb.Barcode+'~0' else esb.Barcode+'~1' end) [Voucher Barcode]                           
         from coc_EVoucher(nolock) ev                      
         inner join coc_EVoucherLanguages(nolock) evl on evl.EVoucherID=ev.EVoucherID and evl.LanguageID=@LanguageID and evl.ResourceKey='VoucherName'                      
   inner join coc_EServices(nolock) es on es.EServiceID=ev.EServiceID                      
   inner join coc_EServiceBarcodes(nolock) esb on esb.EVoucherID=ev.EVoucherID                      
   left join coc_Consumers c (NOLOCK) on esb.ConsumerID = c.ConsumerID                         
   left join coc_NationalityLanguages nl (NOLOCK) on nl.NationalityID=c.NationalityID and nl.LanguageID=@LanguageID                      
   where (@EVoucherID is null or ev.EVoucherID=@EVoucherID)           
   and (@CorporateID is null or es.CorporateID=@CorporateID)           
   and (@FromDate is null or convert(date,esb.AssignedDate)>= convert(date,@FromDate)) and (@ToDate is null or  convert(date,esb.AssignedDate,103)<=convert(date,@ToDate))         
      --and (@Mobile is null or  c.PrimaryMobile=@Mobile)            
   --and (@EmailID is null or c.EmailID=@EmailID)                                            
      --and (@Name is null or c.FullName =@Name)   
	  ORDER BY esb.EServiceBarcodeID Desc OFFSET @offset ROWS                              
      FETCH NEXT @fetch ROWS ONLY    
end                      
else if(@Status=1)                      
 begin  
 select @RecordCount=count(esb.EServiceBarcodeID)  
 from coc_EVoucher(nolock) ev                      
         inner join coc_EVoucherLanguages(nolock) evl on evl.EVoucherID=ev.EVoucherID and evl.LanguageID=@LanguageID and evl.ResourceKey='VoucherName'                      
   inner join coc_EServices(nolock) es on es.EServiceID=ev.EServiceID                      
   inner join coc_EServiceBarcodes(nolock) esb on esb.EVoucherID=ev.EVoucherID                      
   left join coc_Consumers c (NOLOCK) on esb.ConsumerID = c.ConsumerID                         
   left join coc_NationalityLanguages nl (NOLOCK) on nl.NationalityID=c.NationalityID and nl.LanguageID=@LanguageID                      
 where (@EVoucherID is null or ev.EVoucherID=@EVoucherID) and               
      (@CorporateID is null or es.CorporateID=@CorporateID) and             
     (@FromDate is null or convert(date,esb.AssignedDate)>=@FromDate) and (@ToDate is null or  convert(date,esb.AssignedDate,103)<=@ToDate) and                      
    --(@Mobile is null or c.PrimaryMobile  =@Mobile)  and                                     
    --        (@EmailID is null or c.EmailID = @EmailID ) and                                           
    --       (@Name is null or c.FullName=@Name) 
		    esb.UsedDate is not null                      

  SELECT ROW_NUMBER() OVER (                              
   ORDER BY (                              
     SELECT 1                              
     )                              
   ) SNo ,evl.ResourceValue [Voucher Name],CONVERT(NVARCHAR(20),esb.AssignedDate,103) as [Date of received], FORMAT(esb.UsedDate, 'hh:mm:ss tt') as[Time of received],  
   CONVERT(NVARCHAR(20),esb.UsedDate,103) as[Date redeemed], FORMAT(esb.UsedDate, 'hh:mm:ss tt')    as [Time redeemed],                      
       (case when c.FullName is null then isnull(c.firstname,'')+' '+isnull(c.SecondName,'')+' '+isnull(c.FamilyName,'') else c.FullName end) as [Name],                       
     isnull(c.PrimaryMobile,'') as [Mobile],isnull(c.EmailID,'') [Email ID],isnull(nl.Nationality,'') [Nationality],                    
     (case when c.BirthDate is null then '' else CONVERT(NVARCHAR(20),c.BirthDate,103) end)[Date of birth],                    
     (case when (c.Gender=1 or c.Gender=1500) then 'Male' else (case when (c.Gender=2 or c.Gender=1501) then 'female' else '' end) end) [Gender],                   
     (case when esb.UsedDate is null then 'Not Redeemed' else 'Redeemed' end)[Status],                  
      (case when esb.UsedDate is null then esb.Barcode+'~0' else esb.Barcode+'~1' end) [Voucher Barcode]                       
         from coc_EVoucher(nolock) ev                      
         inner join coc_EVoucherLanguages(nolock) evl on evl.EVoucherID=ev.EVoucherID and evl.LanguageID=@LanguageID and evl.ResourceKey='VoucherName'                      
   inner join coc_EServices(nolock) es on es.EServiceID=ev.EServiceID                      
   inner join coc_EServiceBarcodes(nolock) esb on esb.EVoucherID=ev.EVoucherID                      
   left join coc_Consumers c (NOLOCK) on esb.ConsumerID = c.ConsumerID                         
   left join coc_NationalityLanguages nl (NOLOCK) on nl.NationalityID=c.NationalityID and nl.LanguageID=@LanguageID                      
 where (@EVoucherID is null or ev.EVoucherID=@EVoucherID) and               
      (@CorporateID is null or es.CorporateID=@CorporateID) and             
     (@FromDate is null or convert(date,esb.AssignedDate)>=@FromDate) and (@ToDate is null or  convert(date,esb.AssignedDate,103)<=@ToDate) and                      
    --(@Mobile is null or c.PrimaryMobile  =@Mobile)  and                                     
    --        (@EmailID is null or c.EmailID = @EmailID ) and                                           
    --       (@Name is null or c.FullName=@Name) 
		    esb.UsedDate is not null  
	ORDER BY esb.EServiceBarcodeID Desc OFFSET @offset ROWS                              
      FETCH NEXT @fetch ROWS ONLY    
end                      
else if(@Status=2)                      
 begin  
 select @RecordCount=count(esb.EServiceBarcodeID)  
      from coc_EVoucher(nolock) ev              
         inner join coc_EVoucherLanguages(nolock) evl on evl.EVoucherID=ev.EVoucherID and evl.LanguageID=@LanguageID and evl.ResourceKey='VoucherName'                      
   inner join coc_EServices(nolock) es on es.EServiceID=ev.EServiceID                      
   inner join coc_EServiceBarcodes(nolock) esb on esb.EVoucherID=ev.EVoucherID                      
   left join coc_Consumers c (NOLOCK) on esb.ConsumerID = c.ConsumerID                       
   left join coc_NationalityLanguages nl (NOLOCK) on nl.NationalityID=c.NationalityID and nl.LanguageID=@LanguageID                      
 where (@EVoucherID is null or ev.EVoucherID=@EVoucherID) and              
      (@CorporateID is null or es.CorporateID=@CorporateID) and             
     (@FromDate is null or convert(date,esb.AssignedDate)>=@FromDate) and (@ToDate is null or  convert(date,esb.AssignedDate,103)<=@ToDate) and                      
    --(@Mobile is null or c.PrimaryMobile  =@Mobile)  and                                     
    --(@EmailID is null or c.EmailID = @EmailID ) and                                           
    --(@Name is null or c.FullName=@Name)
	 esb.UsedDate is null  
	 


	 SELECT ROW_NUMBER() OVER (                              
   ORDER BY (                              
     SELECT 1                              
     )                              
   ) SNo ,evl.ResourceValue [Voucher Name],CONVERT(NVARCHAR(20),esb.AssignedDate,103) as [Date of received], Right(CONVERT(NVARCHAR(20),esb.AssignedDate,22),11) as [Time of received],  
   CONVERT(NVARCHAR(20),esb.UsedDate,103) as[Date redeemed], FORMAT(esb.UsedDate, 'hh:mm:ss tt')   as [Time redeemed],    
        (case when c.FullName is null then isnull(c.firstname,'')+' '+isnull(c.SecondName,'')+' '+isnull(c.FamilyName,'') else c.FullName end) as [Name],                  
     isnull(c.PrimaryMobile,''),isnull(c.EmailID,''),isnull(nl.Nationality,'') [Nationality],                   
(case when c.BirthDate is null then '' else CONVERT(NVARCHAR(20),c.BirthDate,103) end) [Date of birth],                   
     (case when (c.Gender=1 or c.Gender=1500) then 'Male' else (case when (c.Gender=2 or c.Gender=1501) then 'female' else '' end) end) [Gender],                   
     (case when esb.UsedDate is null then 'Not Redeemed' else 'Redeemed' end) [Status],                    
     (case when esb.UsedDate is null then esb.Barcode+'~0' else esb.Barcode+'~1' end) [Voucher Barcode]                     
         from coc_EVoucher(nolock) ev              
         inner join coc_EVoucherLanguages(nolock) evl on evl.EVoucherID=ev.EVoucherID and evl.LanguageID=@LanguageID and evl.ResourceKey='VoucherName'                      
   inner join coc_EServices(nolock) es on es.EServiceID=ev.EServiceID                      
   inner join coc_EServiceBarcodes(nolock) esb on esb.EVoucherID=ev.EVoucherID                      
   left join coc_Consumers c (NOLOCK) on esb.ConsumerID = c.ConsumerID                       
   left join coc_NationalityLanguages nl (NOLOCK) on nl.NationalityID=c.NationalityID and nl.LanguageID=@LanguageID                      
 where (@EVoucherID is null or ev.EVoucherID=@EVoucherID) and              
      (@CorporateID is null or es.CorporateID=@CorporateID) and             
     (@FromDate is null or convert(date,esb.AssignedDate)>=@FromDate) and (@ToDate is null or  convert(date,esb.AssignedDate,103)<=@ToDate) and                      
    --(@Mobile is null or c.PrimaryMobile  =@Mobile)  and                                     
    --(@EmailID is null or c.EmailID = @EmailID ) and                                           
    --(@Name is null or c.FullName=@Name)
	 esb.UsedDate is null  
	ORDER BY esb.EServiceBarcodeID Desc OFFSET @offset ROWS                              
      FETCH NEXT @fetch ROWS ONLY    
end                      

--select SNO,[Voucher Name],[Date of received],[Time of received],[Date redeemed],[Time redeemed],[Name],[Mobile],[Email ID],[Nationality],[Date of birth],[Gender],[Status],[Voucher Barcode]                      
--from  @GetVouchersReportData                                                        
    --order by 1 desc                         
 --OFFSET @offset ROWS                                                                  
--FETCH NEXT @fetch ROWS ONLY                                                         
--select @RecordCount =count(*) from @GetVouchersReportData                                                            
END 
GO
/****** Object:  StoredProcedure [dbo].[usp_GetVoucherList]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetVoucherList]
     @UserID INTEGER = null
	,@LanguageId INTEGER = 1
	,@CorporateID INTEGER = NULL
	,@CategoryID INTEGER = NULL
AS
BEGIN
	
	DECLARE @canApply BIT = 1
	DECLARE  @ConsumerId INTEGER = NULL
	SET @ConsumerId = (SELECT TOP 1 ConsumerId FROM COC_CONSUMERS (NOLOCK) WHERE USERID = @USERID)
	SELECT EV.EVoucherID
		,SL.EServiceID
		,EV.IsActive
		,EVL_Name.ResourceValue AS NAME
		,SL.EService
		,ISNULL(EV.ImageFile, ISNULL((
					SELECT TOP 1 ImageFile
					FROM coc_EVoucherImages(NOLOCK) EVI
					WHERE EVI.EVoucherID = EV.EVoucherID
						AND EVI.IsPrimaryImage = 1
						AND EVI.LanguageID = @LanguageId
					), (
					SELECT TOP 1 ImageFile
					FROM coc_EVoucherImages(NOLOCK) EVI
					WHERE EVI.EVoucherID = EV.EVoucherID
						AND EVI.IsPrimaryImage = 1
					))) AS ImageFile
		,@canApply [CanApply]
		,CONVERT(NVARCHAR(12), ES.FromDate, 106) AS StartDate
		,CONVERT(NVARCHAR(12), ES.ToDate, 106) AS EndDate
		,EVL_Desc.ResourceValue AS [Description]
		,EVL_Loc.ResourceValue AS Location
		,EVL_Remark.ResourceValue AS Remarks
		,EVL_Terms.ResourceValue AS Terms
		,C.CorporateID
		,C.CorporateName
		,EVL_Desc.ResourceValue Description
	FROM coc_EVoucher EV(NOLOCK)
	INNER JOIN coc_EVoucherLanguages EVL_Desc(NOLOCK) ON EVL_Desc.EVoucherID = EV.EVoucherID
		AND EVL_Desc.LanguageID = @LanguageID
		AND EVL_Desc.ResourceKey = 'Description'
	INNER JOIN coc_EVoucherLanguages(NOLOCK) EVL_Name ON EVL_Name.EVoucherID = EV.EVoucherID
		AND EVL_Name.LanguageID = @LanguageID
		AND EVL_Name.ResourceKey = 'VoucherName'
	LEFT JOIN coc_EVoucherLanguages(NOLOCK) EVL_Loc ON EVL_Loc.EVoucherID = EV.EVoucherID
		AND EVL_Loc.LanguageID = @LanguageID
		AND EVL_Loc.ResourceKey = 'LocationInfo'
	LEFT JOIN coc_EVoucherLanguages(NOLOCK) EVL_Remark ON EVL_Remark.EVoucherID = EV.EVoucherID
		AND EVL_Remark.LanguageID = @LanguageID
		AND EVL_Remark.ResourceKey = 'Remarks'
	LEFT JOIN coc_EVoucherLanguages(NOLOCK) EVL_Terms ON EVL_Terms.EVoucherID = EV.EVoucherID
		AND EVL_Terms.LanguageID = @LanguageID
		AND EVL_Terms.ResourceKey = 'Terms'
	INNER JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID = EV.EServiceID
	INNER JOIN coc_EServiceLanguages SL(NOLOCK) ON SL.EServiceID = ES.EServiceID
		AND SL.LanguageID = @LanguageID
	INNER JOIN coc_Corporates(NOLOCK) C ON C.CorporateID = ES.CorporateID
	INNER JOIN coc_EVoucherCategory(NOLOCK) EVC ON EVC.eVoucherCategoryID = EV.eVoucherCategoryID
	WHERE ES.FromDate <= getdate()
		AND ES.ToDate >= getdate()
		AND EV.IsActive = 1
		AND (
			@CategoryID IS NULL
			OR EV.EVoucherCategoryID = @CategoryID
			)
		AND (
			@CorporateID IS NULL
			OR ES.CorporateID = @CorporateID
			)
-------------------------
	SELECT distinct C.CorporateID
		,C.CorporateName
		 
	FROM coc_EVoucherBundleQRCode VQR (NOLOCK)
	INNER JOIN coc_EVoucherBundleDistribution EVBD(NOLOCK) ON EVBD.CorporateID = VQR.CorporateID
	INNER JOIN coc_EVoucherBundle EVB(NOLOCK) ON EVB.EVoucherBundleID = EVBD.EVoucherBundleID
	INNER JOIN coc_EVoucher EV(NOLOCK) ON EVB.EVoucherID = EV.EVoucherID AND EV.IsActive = 1
	INNER JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID = EV.EServiceID
	INNER JOIN coc_Corporates(NOLOCK) C ON C.CorporateID = VQR.CorporateID
	WHERE ES.FromDate <= getdate()
		AND ES.ToDate >= getdate()
		AND EV.IsActive = 1
		AND (@CategoryID IS NULL OR EV.EVoucherCategoryID = @CategoryID)
		AND (@CorporateID IS NULL OR ES.CorporateID = @CorporateID )
END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetVouchersDetailReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetVouchersDetailReport]                             
 @LanguageID INTEGER=1                    
,@EServiceID INTEGER = NULL                    
,@CorporateID INTEGER =NULL                    
,@CompetitionID INTEGER = NULL                    
AS                    
BEGIN                    
                    
if @CorporateID = 0                    
 select @CorporateID  = null                    
      
 Select evl.ResourceValue as Text, ev.EVoucherID as Value from coc_EVoucher(nolock) ev      
 inner join coc_EVoucherLanguages(nolock) evl on evl.EVoucherID=ev.EVoucherID and evl.LanguageID=@LanguageID and evl.ResourceKey='VoucherName'      
 inner join coc_EServices(nolock) es on es.EServiceID=ev.EServiceID      
 where (@EServiceID IS NULL OR es.EServiceID=@EServiceID) AND                    
    (@CorporateID IS NULL OR es.CorporateID=@CorporateID) AND                    
    ev.IsActive=1           
       order by  ES.EServiceID desc        
                        
                    
END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetVoucherStatusForReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[usp_GetVoucherStatusForReport]                       
 @LanguageID INTEGER=1              
,@EServiceID INTEGER = NULL              
,@CorporateID INTEGER =NULL              
,@CompetitionID INTEGER = NULL              
AS              
BEGIN   

DECLARE @VoucherStatus TABLE (
    Text nvarchar(100) NOT NULL,
    Value INT NOT NULL
);

insert into @VoucherStatus
   select 'Redeemed',1
insert into @VoucherStatus
   select 'Not Redeemed',2
   
 select Text,Value from @VoucherStatus
              
END 
GO
/****** Object:  StoredProcedure [dbo].[usp_GetWinnersReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetWinnersReport]  -- For Report        
   
                       
  @LanguageID  int=1                                                                             
 ,@ECouponID  BIGINT=null                                                                     
 ,@DrawID BIGINT=null                                                                          
 --,@DrawDate  nvarchar(20)=null                                
 ,@FromDate date=  null                                      
 ,@ToDate date=  null                                                                       
 ,@PageSize  int=100                                                                      
 ,@RecordCount bigint   output                                                                    
 ,@PageIndex int=1                                                        
 ,@Mobile nvarchar(100) =NULL                                                        
 ,@EmailID varchar(50)=NULL                                                        
 --,@CompetitionName nvarchar(100)=NULL                                                        
 ,@Name nvarchar(200)=NULL                                    
 ,@MembershipNumber nvarchar(100) =NULL                                      
 ,@CorporateID int=NULL                                    
                                                                    
AS                                                                              
BEGIN                                                                                    
  SET NOCOUNT ON;                                                                    
   declare @offset int,@fetch int;                                                                           
  set @offset =@PageSize*(@PageIndex-1);                                                                        
  set @fetch =@PageSize;                                                                
                                                                       
                                                              
  declare  @GetWinnersReportData table(SNo bigint IDENTITY(1,1) PRIMARY KEY,DrawDate Nvarchar(20),DrawTime nvarchar(30), [Draw Name] nvarchar(300), [Draw Place] nvarchar(500),                                
  [Competion Name] nvarchar(1000),[Winner Name] nvarchar(200),[Email ID] nvarchar(200),[Winner Mobile Number] varchar(15),[Price  Name] nvarchar(300),                                                  
  Barcode nvarchar(100),[City] nvarchar(100),[Nationality] nvarchar(100),[Participation Date] DateTime, [Corporate Name] nvarchar(200))                                                        
  insert into @GetWinnersReportData                 
          
  select CONVERT(NVARCHAR(20),ew.DrawDateTime,103 )As DrawDate,                  
 FORMAT (ew.DrawDateTime, 'hh:mm:ss tt') As DrawTime,  
      edl.Value as [Draw Name],                                            
     ed.Location as [Draw Place],                                                                    
     esl.EService as  [Competion Name] ,                                                                         
     ew.ConsumerName [Winner Name],                                
   ew.Email [Email ID],                              
        ew.MobileNumber [Winner Mobile Number],                                                                        
        ECPL.Value [ Price   Name ] ,                                                              
           isnull(ECP.Barcode,'') ,                                                      
     cl.City [City],                                
        NL.Nationality [Nationality],       
 ECP.ParticipationDate as [Participation Date],      
            
  (case when @LanguageID=1 then isnull(cor.CorporateName,cor.CorporateNameAR) else isnull(cor.CorporateNameAR,cor.CorporateName) end) CorporateName                        
                          
                               
  from coc_ECouponWinners ew  (NOLOCK)                                                                    
left join coc_Consumers c (NOLOCK) on ew.ConsumerID = c.ConsumerID                                                                     
inner join coc_ECouponDrawPrizes edp  (NOLOCK) on edp.ECouponDrawPrizeID = ew.ECouponDrawPrizeID                                                                     
inner join coc_ECouponDraw ed (NOLOCK) on ed.ECouponDrawID = edp.ECouponDrawID                                        
inner join coc_ECouponPrizesLanguages ECPL (NOLOCK) on ECPL.ECouponPrizeID=ew.ECouponPrizeID   and ECPL.ResourceKey= 'Name' and ECPL.LanguageID=@LanguageID                                                                  
inner join coc_ECouponDrawLanguages edl (NOLOCK) on edl.ECouponDrawID = ed.ECouponDrawID and edl.LanguageID =@LanguageID and edl.ResourceKey = 'Name'                                                                    
inner join coc_ECouponLanguages ecl (NOLOCK) on ecl.ECouponID = ed.ECouponID and ecl.LanguageID =@LanguageID                                                                    
left join coc_CityLanguages cl (NOLOCK) on cl.CityID = c.CityID and cl.LanguageID =@LanguageID                                                                     
inner join coc_ECoupons ec (NOLOCK) on ec.ECouponID= ecl.ECouponID                         
Inner join coc_EServices es (nolock) on es.EServiceID = ec.EServiceID                         
Inner join  coc_Corporates cor (nolock) ON cor.CorporateID = es.CorporateID                          
inner join coc_EServiceLanguages esl (NOLOCK) on esl.EServiceID= ec.EServiceID     and esl.LanguageID= @LanguageID                                                                    
left join coc_ECouponParticipations ECP (NOLOCK) on ECP.ECouponParticipationID = ew.ECouponParticipationID                                                               
left join coc_NationalityLanguages NL (NOLOCK) on NL.NationalityID=c.NationalityID and nl.LanguageID=@LanguageID     and ECPL.LanguageID=@LanguageID                          
where (@ECouponID is null or ed.ECouponID =@ECouponID)                                                    
and (@Mobile is null or  ew.MobileNumber like'%'+@Mobile+'%' or  ew.MobileNumber  =@Mobile )                                       
and (@MembershipNumber is null or c.MembershipNumber=@MembershipNumber )                     
and (@EmailID is null or ew.Email like'%'+@EmailID+'%' or ew.Email = @EmailID )                                                 
and (@Name is null or ew.ConsumerName like'%'+@Name+'%' or ew.ConsumerName like'%'+@Name+'%' or ew.ConsumerName like'%'+@Name+'%' or ew.ConsumerName=@Name or c.FirstName+c.SecondName+' '+c.FamilyName=@Name or c.FirstName+c.SecondName+' '+c.FamilyName='%' +@Name+'%'  )                                              
and (@DrawID is null or ed.ECouponDrawID=@DrawID )                         
and (@FromDate is null or @ToDate is null or  ew.DrawDateTime between @FromDate and  @ToDate)                                                                   
--and (@DrawDate is null or Convert(date,ew.DrawDateTime)=Convert(date,@DrawDate))                                                              
and ECouponWinnerID not in (24561,24562,24563,24564,24565)                                             
 
select @RecordCount =count(*) from @GetWinnersReportData                                        
                                                                    

select  SNo,DrawDate,DrawTime ,[Draw Name], [Draw Place] ,                                                              
  [Competion Name] ,[Winner Name] , [Email ID],[Winner Mobile Number] ,[Price  Name],                                                              
  Barcode ,[City] ,[Nationality],CONVERT(NVARCHAR(20),[Participation Date],103) as [Participation Date], FORMAT ([Participation Date], 'hh:mm:ss tt')as [Participation Time], [Corporate Name] from  @GetWinnersReportData                      
    order by 1 desc    OFFSET @offset ROWS                                                                        
FETCH NEXT @fetch ROWS ONLY                                                                                                                          
                                                             

                                                                           
                                                                                  
END 
GO
/****** Object:  StoredProcedure [dbo].[usp_GetYesNoOption]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetYesNoOption] @LanguageID int  = 1
,                                           @CorporateID int
AS
BEGIN
	CREATE TABLE #YesNoOption ( id       bit
	,                           [Option] NVARCHAR(MAX) );
	INSERT INTO #YesNoOption
	SELECT 1
	,      'Yes'
	INSERT INTO #YesNoOption
	SELECT 0
	,      'No'
	Select *
	from #YesNoOption

END
GO
/****** Object:  StoredProcedure [dbo].[usp_homecare_SaveECouponParticipationFromCompetitionLink]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_homecare_SaveECouponParticipationFromCompetitionLink]                                     
                  
  @EcouponID INTEGER                                      
                  
 ,@ConsumerID INTEGER                                      
                  
 ,@GuestID INTEGER                                     
                  
 ,@Mobile [Mobile] = NULL                                      
                  
 ,@Email [Email] = NULL                                      
                  
 ,@AnswersXML XML                                       
                  
 ,@RetailoutletID INT = NULL                                      
                  
 ,@ParticipationBarcode NVARCHAR(100) = NULL OUTPUT                                      
                  
 ,@ErrorMessage [Remark] = NULL OUTPUT                                      
                  
 ,@NumberOfCopons INT = 1                                      
                  
 ,@SPStatus INT = NULL OUT                                      
                  
 ,@SPReturnMessage NVARCHAR(500) = NULL OUT                                      
                  
 ,@APIKey nvarchar(50) = null                              
                  
 ,@RequestSourceType int = null                            
                  
 ,@ReferenceNumber nvarchar(150)=null                          
                  
 ,@UploadImagePath NVARCHAR(200) = NULL                   
                  
 ,@IsNotRequiredEmail bit=0                   
                  
 ,@ConsumerName NVARCHAR(200) =NULL                      
 ,@BranchName NVARCHAR(150) =NULL                    
 ,@Question1 nvarchar(1000)=NULL                  
 ,@Question2 nvarchar(1000)=NULL                  
AS                                      
                  
SET NOCOUNT ON                                      
                  
BEGIN TRANSACTION SaveECouponConfiguration                                      
                  
BEGIN TRY                                      
                  
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;                                      
                  
 SET @SPStatus = 0;                                      
                  
 SET @SPReturnMessage = '';                                      
                  
                                      
                  
 DECLARE @EserviceTypeID INTEGER                                      
                  
 DECLARE @EServiceBarcodeID BIGINT                                      
                  
 DECLARE @Points INTEGER                                      
                  
 DECLARE @SelectedAnswer INTEGER                                      
                  
 DECLARE @EServiceID INTEGER                                      
                  
 DECLARE @NotificationID INTEGER                                      
                  
 DECLARE @NotificationSendID INTEGER                                      
                  
 DECLARE @LanguageID INTEGER                                      
                  
 DECLARE @CompetitionName NVARCHAR(200)                                      
                  
 --DECLARE @ConsumerName NVARCHAR(100)                                      
                  
 --DECLARE @EligibleCoupons integer                                                    
                  
 DECLARE @Barcode NVARCHAR(100)                                    
                  
                                       
                  
                                    
                  
 DECLARE @SMSBody nvarchar(max)                                    
                  
 DECLARE @EmailBody nvarchar(max)                                    
                  
                                       
                  
 DECLARE @TempBarcodeTable TABLE (                                      
                  
  Barcode NVARCHAR(100)                                      
                  
  ,EServiceBarcodeID INT                                      
                  
  ,NotificationID INT                                      
                  
  );                                      
                  
  if(@Mobile='')              
 set @Mobile=NULL              
 if(@Email='')              
 set @Email=NULL                                     
                  
 IF @ConsumerID = 0                                      
                  
  SET @ConsumerID = NULL                                      
                
                                      
                  
 IF @GuestID = 0                                      
                  
  SET @GuestID = NULL                                      
                  
                                      
             
 IF @RetailoutletID = 0                                       
                  
  set @RetailoutletID = null                                      
                  
                       
                  
 if @RetailoutletID is not null               
                  
 begin                                      
                  
  if not exists (select * from [dbo].[coc_ECouponOutlets](NOLOCK) where retailoutletid = @RetailoutletID and ecouponid = @EcouponID and IsActive=1)                                      
                  
  begin                                      
                  
   SET @ErrorMessage = 'Invalid Retail Outlet ID';                                      
                  
   SET @SPStatus = 1;                                      
                  
   SET @SPReturnMessage = @ErrorMessage;                                      
                  
   select * from @TempBarcodeTable;                                      
                  
   ROLLBACK TRANSACTION SaveECouponConfiguration;                                        
                  
   RETURN;                                      
                  
  end                                      
                  
 end                                      
                  
                            
                  
 if not exists (select * from [dbo].[coc_ECoupons](NOLOCK) EC inner join [dbo].[coc_EServices](NOLOCK) ES ON EC.eserviceid = ES.eserviceid                                      
                  
   where convert(date, getdate()) between convert(date, ES.FromDate)  and convert(date, ES.ToDate) and ES.isactive = 1 and EC.isactive =1)                                      
                  
 begin                                      
                  
  SET @ErrorMessage = 'Competition Not active';                                   
                  
  SET @SPStatus = 1;                                      
                  
  SET @SPReturnMessage = @ErrorMessage;                                      
                  
  select * from @TempBarcodeTable;                                      
                  
  ROLLBACK TRANSACTION SaveECouponConfiguration;                                        
                  
  RETURN;                                      
                  
 end                                     
                  
                             
                  
                                      
                  
 print('@ConsumerID IS NULL   AND @GuestID IS NULL  ')                                      
                  
 print('@ConsumerID = '+ convert(varchar,@consumerid) )                     
                  
 print('@GuestID = '+ convert(varchar,@GuestID) )                             
                  
                          
                  
 IF (                                      
                  
   @ConsumerID IS NULL                                      
                  
   AND @GuestID IS NULL                                      
                  
  )                                      
                  
 BEGIN                                      
                  
  INSERT INTO coc_ECouponParticipationsInvalid (                                      
                  
   ECouponID                                      
                  
   ,ParticipationDate                                      
                  
   ,Barcode                                      
                  
   ,ParticipationMobile                                      
                  
   ,ParticipationEmailID                                      
                  
   ,ConsumerID                                      
                  
   ,Reason                
                  
   ,ConsumerName                                      
                  
   )                                      
                  
  SELECT @EcouponID                             
                  
   ,GETDATE()                                      
                  
   ,@Barcode                                      
                  
   ,@Mobile                                      
                  
   ,@Email                                 
                  
   ,@ConsumerID                                      
                  
   ,'P'                                      
                  
   ,@ConsumerName                                      
                  
                                      
                  
  SET @ErrorMessage = 'Barcode is Not There to Asign';                                      
                  
  SET @SPStatus = 1;                                      
                  
  SET @SPReturnMessage = @ErrorMessage;                                      
                  
  select * from @TempBarcodeTable;                                      
                  
  ROLLBACK TRANSACTION SaveECouponConfiguration;                                        
                  
  RETURN;                                      
                  
 END                                      
                  
                                      
                  
 IF @ConsumerID IS NOT NULL                                      
                  
 BEGIN                           
                  
  IF @Email IS NULL                                      
                  
   SELECT @Email = EmailID                                      
                  
   FROM coc_Consumers(NOLOCK)                                      
                  
   WHERE ConsumerID = @ConsumerID                                      
                  
    AND IsActive = 1                                      
                  
    AND IsDeleted = 0                                      
                  
    AND IsVerified = 1                                      
                  
                                      
                  
  IF @ConsumerName IS NULL                                      
                  
   SELECT @ConsumerName = isnuLL(FirstName, '') + ' ' + isnull(SecondName, '') + ' ' + isnull(FamilyName, '')                                      
                  
   FROM coc_Consumers(NOLOCK)                                      
                  
   WHERE ConsumerID = @ConsumerID                                      
                  
    AND IsActive = 1                                      
                  
    AND IsDeleted = 0                                      
                  
    AND IsVerified = 1                                      
                  
                                      
                  
  IF @Mobile IS NULL                    
                  
   SELECT @Mobile = PrimaryMobile                                      
                  
   FROM coc_Consumers(NOLOCK)                                      
                  
   WHERE ConsumerID = @ConsumerID                                      
                  
    AND IsActive = 1                                      
                  
    AND IsDeleted = 0                                      
                  
    AND IsVerified = 1                                      
                  
 END                                      
                  
ELSE                                      
                  
 BEGIN                                      
                  
  IF @Email IS NULL                                      
                  
   SELECT @Email = EmailID                                      
                  
   FROM coc_Guests(NOLOCK)                                      
                  
   WHERE GuestID = @GuestID                              
                  
    AND IsActive = 1                                      
                  
    AND IsVerified = 1                                      
                  
                                      
                  
  IF @ConsumerName IS NULL                                      
                  
   SELECT @ConsumerName = isnuLL(FullName, '')                                      
                  
   FROM coc_Guests(NOLOCK)                                      
                  
   WHERE GuestID = @GuestID                                      
                  
    AND IsActive = 1                                      
                  
    AND IsVerified = 1                                      
                  
                                      
                  
  IF @Mobile IS NULL                                      
                  
   SELECT @Mobile = PrimaryMobile                                      
                  
   FROM coc_Guests(NOLOCK)         
                  
   WHERE GuestID = @GuestID                                      
                  
    AND IsActive = 1                                      
                  
    AND IsVerified = 1                                      
                  
 END                                      
                  
                                      
                  
 IF @Mobile IS NULL                                      
                  
  OR len(@Mobile) <> 14                                      
                  
  OR SUBSTRING(@Mobile, 1, 6) <> '009665'                                      
                  
 BEGIN                                      
                  
  SET @ErrorMessage = 'InvalidMobile'   ;                          
                  
  SET @SPReturnMessage = @ErrorMessage;                                     
                  
 END                                      
                  
 ELSE IF @Email IS NULL and @IsNotRequiredEmail=0                                        
                  
 BEGIN                                      
                  
  SET @ErrorMessage = 'InvalidEmail'   ;                          
                  
  SET @SPReturnMessage = @ErrorMessage;                                         
                  
 END                                      
                  
ELSE                                      
                  
 BEGIN                                      
                  
                                                
                  
  DECLARE @Answers AS TABLE (                                      
                  
   ID INTEGER Identity(1, 1)                         
                  
   ,QuestionBankID INTEGER                                      
                  
   ,QuestionOptionID INTEGER                                      
                  
   ,AnswerRank INTEGER                                      
                  
   ,AnswerValue VARCHAR(100)                                      
                  
   )                                      
                  
                                      
                  
  INSERT INTO @Answers (                                      
                  
   QuestionBankID                                      
                  
   ,QuestionOptionID                                      
                  
   ,AnswerRank                                      
                  
 ,AnswerValue                                      
                  
   )                                      
                  
  SELECT Answer.value('(QuestionID[1])', 'INTEGER')                                      
                  
   ,Answer.value('(AnswerID[1])', 'INTEGER')                  
                  
   ,Answer.value('(AnswerRank[1])', 'INTEGER')                                      
                  
   ,Answer.value('(AnswerValue[1])', 'VARCHAR(100)')                                      
                  
  FROM @AnswersXML.nodes('/ECouponParticipation/Answers') AS Data(Answer)                          
                  
                                      
                  
  UPDATE @Answers                                      
                  
  SET QuestionOptionID = NULL                                      
                  
  WHERE QuestionOptionID = 0                                      
                  
                                                  
                  
  SELECT @EServiceID = EServiceID                                      
                  
  FROM coc_ECoupons(NOLOCK)                                      
                  
  WHERE EcouponID = @EcouponID                                      
                  
                                      
                  
  DECLARE @errortext [Remark]                                      
                  
  DECLARE @return_value INT                                      
                  
                                      
                  
                                                 
                  
  PRINT @ConsumerId                                      
                  
  PRINT @EserviceId                                      
                  
  PRINT @errortext                                      
                  
                                      
                  
                                                  
                  
                                        
                  
                                   
                  
  DECLARE @NumberOfConsumerParticipations INT                                      
                  
  DECLARE @NumberOfGuestParticipations INT                                      
                  
  DECLARE @NumberOfParticipations INT                                      
                  
  DECLARE @LoyaltyPointSetupID INT = 103;                                      
                  
  DECLARE @AllowMultiple bit                                      
                  
  DECLARE @GeneralNotificationTemplateID INT                                      
                  
                                      
                  
  SELECT @EServiceID = EServiceID                                      
                  
   ,@NumberOfConsumerParticipations = ISNULL(NumberOfConsumerParticipations, 0)                                      
                  
   ,@NumberOfGuestParticipations = ISNULL(NumberOfGuestParticipations, 0)                                      
            
   ,@NumberOfParticipations = ISNULL(participationCount, 0)                                      
                  
   ,@EserviceTypeID = EntryTypeID                                      
                  
   ,@AllowMultiple = MultipleParticipation                                      
                  
   ,@GeneralNotificationTemplateID = ParticipationNotificationTemplateID                                      
                  
  FROM coc_ECoupons(NOLOCK)                                      
                  
  WHERE ECouponID = @EcouponID                                      
                  
                                      
                  
  if(@AllowMultiple=0)                                      
                  
    set @NumberOfCopons = 1;                                      
                  
                                      
                  
  if(isnull(@NumberOfParticipations,0)=0)                                      
                  
   set @NumberOfParticipations= 100   
IF @Email IS NOT NULL or @Mobile IS NOT NULL            
    BEGIN               
       DECLARE @ParticipationsCount int              
       SELECT @ParticipationsCount = count(*)                  
       FROM coc_ECouponParticipations(NOLOCK)             
       WHERE  (ParticipationEmailID= @Email   or ParticipationMobile=@Mobile )              
        AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                                    
        IF( @ParticipationsCount >= 1)           
         BEGIN          
   SET @SPStatus = 1;                                      
                
   SET @SPReturnMessage = 'Already Participated with Same Mobile Or Email';                                      
                
   SET @SPReturnMessage = 'Already Participated with Same Mobile Or Email';                                      
                
   SET @ErrorMessage = 'Already Participated with Same Mobile Or Email';                                      
                
   select * from @TempBarcodeTable;                                      
                
   ROLLBACK TRANSACTION SaveECouponConfiguration;                                      
            RETURN;                                                  
        END                                                  
   END            
 IF (                                      
                  
    @EserviceTypeID = 42                                      
                  
    OR @EserviceTypeID = 41                                      
                  
    )                                      
                  
  BEGIN                                      
                  
   DECLARE @Participations INT                                      
                  
   DECLARE @NoOfCoponsLeft INT;                
             
   --Same Mobile and Email Condition start          
                                   
                  
     IF(ISNULL(@RetailoutletID,0) > 0) --retail outlet condition            
    BEGIN            
       Declare @TotalAllowedParticipationinOutlet int;            
    Declare @DBTotalAllowedParticipationinOutlet int;            
    Select @TotalAllowedParticipationinOutlet=  count(*)   FROM coc_ECouponParticipations(NOLOCK) CP                                      
    WHERE ECouponID = @EcouponID  and RetailOutletID=@RetailoutletID             
            
    Select @DBTotalAllowedParticipationinOutlet=  TotalAllowedParticipationinOutlet   FROM coc_ECouponOutlets(NOLOCK) ECO                                      
    WHERE ECO.ECouponID = @EcouponID  and ECO.RetailOutletID=@RetailoutletID             
            
    IF(@TotalAllowedParticipationinOutlet >= @DBTotalAllowedParticipationinOutlet)            
      begin            
     SET @SPStatus = 1;                  
        SET @SPReturnMessage = 'Number of coupons exceeds Number of consumer participations count';                     
        SET @SPReturnMessage += 'Total Allowed Participation in Outlet Exceeds';                     
     SET @ErrorMessage = 'Total Allowed Participation in Outlet Exceeds';                     
        select * from @TempBarcodeTable;                     
        ROLLBACK TRANSACTION SaveECouponConfiguration;                
    RETURN;                        
   end            
   END  --retail outlet condition end            
                                      
                  
   IF @ConsumerID IS NOT NULL                                      
                  
   BEGIN                                      
                  
    SELECT @Participations = count(*) --, @NumberOfParticipations = @NumberOfConsumerParticipations                                                     
                  
    FROM coc_ECouponParticipations(NOLOCK) CP                                      
                  
    WHERE ConsumerID = @ConsumerID                                      
                  
     AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                                    
                  
                
                  
    IF (@NumberOfConsumerParticipations < (@NumberOfCopons + @Participations))    
                  
    BEGIN                                      
                  
     SET @NoOfCoponsLeft = @NumberOfConsumerParticipations - @Participations;                                      
                  
     SET @SPStatus = 1;                                      
                  
     SET @SPReturnMessage = 'Number of coupons exceeds Number of consumer participations count';                                      
                  
     SET @SPReturnMessage += ' you have only ' + convert(VARCHAR, @NoOfCoponsLeft) + ' coupons left';                                      
                  
   SET @ErrorMessage = 'You Already Participated';                                      
                  
     select * from @TempBarcodeTable;                                      
                  
     ROLLBACK TRANSACTION SaveECouponConfiguration;                                      
                  
     RETURN;                                      
                  
    END                                      
        
   END                                      
                  
  ELSE                                      
                  
   BEGIN                                      
                  
    SELECT @Participations = count(*) --, @NumberOfParticipations = @NumberOfGuestParticipations                                                       
                  
    FROM coc_ECouponParticipations(NOLOCK) CP                                      
                  
    WHERE GuestID = @GuestID                              
                  
     AND ECouponID = @EcouponID  and (@RetailoutletID is null or RetailOutletID=@RetailoutletID)                                     
                  
                                      
                  
    IF (@NumberOfGuestParticipations < (@NumberOfCopons + @Participations))                                      
                  
    BEGIN                                      
                  
     SET @NoOfCoponsLeft = @NumberOfGuestParticipations - @Participations;                                      
                  
     SET @SPStatus = 1;                                      
                  
     SET @SPReturnMessage = 'Number of coupons exceeds Number of guest participations count';                           
                  
     SET @SPReturnMessage += ' you have only ' + convert(VARCHAR, @NoOfCoponsLeft) + ' coupons left';                         
                  
  SET @ErrorMessage = 'You Already Participated';                                      
                  
     select * from @TempBarcodeTable;                                      
                  
     ROLLBACK TRANSACTION SaveECouponConfiguration;                                           
                  
     RETURN;                                          
    END                                      
                  
   END                                        
                  
                                      
                  
   IF ISNULL(@Participations, 0) < @NumberOfParticipations                                      
                  
   BEGIN                                      
                  
                               
                  
    select @NotificationID = NotificationID from coc_notifications(NOLOCK) where eserviceid = @EServiceID                                    
                  
                                      
                  
    INSERT INTO @TempBarcodeTable (                                      
                  
     Barcode                      
                  
     ,EServiceBarcodeID                                     
                  
     ,NotificationID                                      
                  
     )                                      
                  
    SELECT TOP (@NumberOfCopons)                                       
                  
     Barcode                                      
                  
     ,EServiceBarcodeID                             
                  
     ,NotificationID                                      
                  
    FROM coc_EServiceBarcodes(NOLOCK) --WITH(XLOCK, ROWLOCK)                                      
                  
    WHERE                                      
                  
     Notificationid = @NotificationID                                       
                  
     AND IsUsed = 0                                      
                  
     AND AsignedMoile IS NULL                                      
                  
    ORDER BY Rand()                                      
                  
                              
                  
 set @Barcode =(select top 1 Barcode from @TempBarcodeTable)                                  
                  
    --WAITFOR DELAY '00:00:4';                                      
                  
       print('barcode = ' +@Barcode )                                     
                  
    IF @ConsumerID IS NOT NULL                                      
                  
    BEGIN                                      
                  
                            
                  
       EXEC AddCustomerLoyaltyPoints                                    
                  
        @EcouponID,                                      
                  
        @ConsumerID,                                      
                  
        @LoyaltyPointSetupID,                                      
                  
        @ErrorMessage OUTPUT                                          
                  
                                          
                  
    END                                      
                  
                                      
                  
  Declare @UsedByAPI bit;                              
                  
  if(@APIKey is not null)                              
                  
   set @UsedByAPI = 1;                              
                  
                              
                  
    UPDATE EB                                      
                  
    SET ConsumerID = @ConsumerID                                      
                  
     ,AsignedMoile = @Mobile                                      
                  
     ,IsUsed = 1                               
                  
     ,UsedDate = GETDATE()                               
                  
     ,GuestID = @GuestID                                    
                  
  ,UsedByAPI=@UsedByAPI                                  
                  
  ,RetailoutletID=@RetailoutletID                                  
                  
     ,APIKey=@APIKey                                  
       
    FROM coc_EServiceBarcodes(NOLOCK) EB                        
                  
    WHERE EServiceBarcodeID IN (                                      
                  
      SELECT EServiceBarcodeID                                      
                  
      FROM @TempBarcodeTable                                      
                  
      )        and IsUsed= 0     AND AsignedMoile IS NULL                             
                  
                             
                  
           if @@ROWCOUNT <> @NumberOfCopons                  
                  
   begin                                      
                  
     SET @ErrorMessage = 'Transaction Error';                                      
                  
     SET @SPStatus = 1;                                      
                  
     SET @SPReturnMessage = @ErrorMessage;                                      
                  
     select * from @TempBarcodeTable;                                      
                  
     ROLLBACK TRANSACTION SaveECouponConfiguration;                                        
                  
     RETURN;                                      
                  
    end                                        
                  
    IF (ISNULL(@Barcode, '0') != '0') OR EXISTS ( SELECT *FROM @TempBarcodeTable)                           
                  
 BEGIN                                      
                  
     DECLARE @ECouponParticipationID BIGINT                                      
                  
                          
                  
     INSERT INTO coc_ECouponParticipations (                                      
                  
      ECouponID                                      
                  
      ,ParticipationDate                                      
                  
      ,Barcode                                      
                  
      ,ParticipationMobile                               
                  
      ,ParticipationEmailID                                      
                  
      ,ConsumerID                                      
                  
      ,GuestID                                      
                  
      ,ConsumerName                                      
                  
      ,RetailoutletID                               
                  
   ,RequestSourceType                            
                  
   ,ReferenceNumber                        
                  
   ,UploadImagePath                  
                  
   ,IsFromCompetitionLink                                   
   ,BranchName                  
   ,Question1                  
   ,Question2                  
   )     
                  
     SELECT @EcouponID                                      
                  
      ,GETDATE()                                      
                  
      ,Barcode                                      
                  
      ,@Mobile                                      
                  
      ,@Email                                      
                  
      ,@ConsumerID                                      
                  
      ,@GuestID                                      
                  
      ,@ConsumerName                                      
                  
      ,@RetailoutletID                            
                  
   ,@RequestSourceType                             
                  
   ,@ReferenceNumber                          
                  
   ,@UploadImagePath                       
                  
   ,1                          
   ,@BranchName                  
   ,@Question1                  
   ,@Question2                  
     FROM @TempBarcodeTable                                      
                  
                                      
                  
     --SELECT @NotificationSendID = NotificationSendID                                      
                  
     --FROM coc_NotificationSends(NOLOCK)                                      
                  
     --WHERE NotificationID = @NotificationID                                      
                  
                                      
                  
     SELECT @ECouponParticipationID = SCOPE_IDENTITY()                                      
                  
                                      
                  
     DECLARE @ID INTEGER                                      
                  
     DECLARE @QuestionBankID INTEGER                                      
                  
     DECLARE @QuestionOptionID INTEGER                                      
                  
     DECLARE @AnswerRank INTEGER                                 
                  
     DECLARE @AnswerValue VARCHAR(100)                                      
                  
                                      
                  
     --@Answers (ID, QuestionBankID, QuestionOptionID, AnswerRank)                                                      
                  
     SELECT TOP 1 @ID = ID                                      
                  
      ,@QuestionBankID = QuestionBankID                                      
                  
      ,@QuestionOptionID = QuestionOptionID                                      
                  
      ,@AnswerRank = AnswerRank                                      
                  
      ,@AnswerValue = AnswerValue                                      
                  
     FROM @Answers                                      
                  
                                      
                  
     DECLARE @ActiveID INTEGER                                      
                  
                                      
                  
     WHILE @ID IS NOT NULL                                 
                  
      AND @ID <> ISNULL(@ActiveID, 0)                                      
                  
     BEGIN                                      
                  
      SET @ActiveID = @ID                                      
                  
                                      
                  
      INSERT INTO coc_ECouponParticipationAnswers (                                      
                  
       QuestionBankID                
                  
       ,QuestionOptionID                                      
                  
       ,AnswerRank                                      
                  
       ,ECouponParticipationID                                      
                  
       ,AnswerValue                                      
                  
       )                                   
                  
      VALUES (                     
                  
       @QuestionBankID                        
                  
       ,@QuestionOptionID                                      
                  
       ,@AnswerRank                                      
                  
       ,@ECouponParticipationID                                      
                  
       ,@AnswerValue                                    
                  
   )                                      
                  
                                      
                  
      SELECT TOP 1 @ID = ID                                      
                  
       ,@QuestionBankID = QuestionBankID                                      
                  
       ,@QuestionOptionID = QuestionOptionID                                      
                  
       ,@AnswerRank = AnswerRank                                      
                  
       ,@AnswerValue = AnswerValue                                      
                  
      FROM @Answers                                      
                  
      WHERE ID > @ActiveID                                      
                  
     END                                      
                  
                                      
                  
     IF @ConsumerID IS NOT NULL                                      
                  
     BEGIN                                      
                  
                                       
                  
      SELECT @EServiceBarcodeID = null                                      
                  
      SELECT *                                      
                  
       FROM @TempBarcodeTable order by EServiceBarcodeID ASC                                      
                  
      SELECT top 1 @EServiceBarcodeID = EServiceBarcodeID                                      
                  
       ,@Barcode = Barcode                                      
                  
      FROM @TempBarcodeTable order by EServiceBarcodeID ASC                                      
                  
      print '@EServiceBarcodeID: '+convert(varchar,@EServiceBarcodeID)                                      
                  
      WHILE @EServiceBarcodeID IS NOT NULL AND @EServiceBarcodeID <> ISNULL(@ActiveID, 0)                                      
                  
      BEGIN                                      
                  
       SET @ActiveID = @EServiceBarcodeID                                      
                  
                             
                  
                                        
                  
                                                            
       EXEC SaveNotificationSending                                      
                  
          @NotificationID                                      
                  
         ,@EcouponID                                      
                  
         ,@ConsumerID                                      
                  
         ,@GeneralNotificationTemplateID                                      
                  
         ,@EServiceID                                      
                  
         ,@Barcode                                      
                  
         ,@ErrorMessage OUTPUT                                      
                  
       SELECT top 1 @EServiceBarcodeID = EServiceBarcodeID                                      
                  
        ,@Barcode = Barcode                                      
                  
       FROM @TempBarcodeTable                                       
                  
       WHERE EServiceBarcodeID > @ActiveID                                      
                  
       order by EServiceBarcodeID ASC                                      
                  
      END                                     
                  
     END                                      
                  
     SET @ParticipationBarcode = @Barcode;                                      
                  
     SELECT Barcode                                      
                  
      ,EServiceBarcodeID                                      
                  
      ,NotificationID                                      
                  
     FROM @TempBarcodeTable                                      
                  
     SET @ErrorMessage = ''                                      
                  
    END                                      
              
    ELSE                                      
                  
    BEGIN                                      
                  
     SET @ErrorMessage = 'Barcode is Not There to Asign'                                      
                  
     SET @SPStatus = 1;                                
                  
     SET @SPReturnMessage = @ErrorMessage;                                      
                  
     select * from @TempBarcodeTable;                                      
                  
    END                                      
                  
   END                                      
                  
 ELSE                                      
                  
   BEGIN                                      
                  
    INSERT INTO coc_ECouponParticipationsInvalid (                                      
                  
     ECouponID                                      
                  
     ,ParticipationDate                                      
                  
     ,Barcode                                      
                  
     ,ParticipationMobile                                      
                  
     ,ParticipationEmailID                                      
                  
     ,ConsumerID                                
                  
     ,Reason                                      
                  
     ,ConsumerName                                      
                  
     )                           
                  
    SELECT @EcouponID                                      
                  
     ,GETDATE()                                      
                  
     ,Barcode                                      
                  
     ,@Mobile                                      
                  
     ,@Email                                      
                  
     ,@ConsumerID                                      
                  
     ,'P'                                      
                  
     ,@ConsumerName                                      
                  
    FROM @TempBarcodeTable                                      
                  
    select * from @TempBarcodeTable;               
                  
    SET @ErrorMessage = 'You Already Participated'                             
                  
    SET @SPStatus = 1;                                      
                  
    SET @SPReturnMessage = @ErrorMessage;                                      
                  
   END                                      
                  
  END                                      
                  
 ELSE -- else entrytypeid not in 41 or 42                                      
                  
  BEGIN                                      
                  
   select * from @TempBarcodeTable;                                      
                  
   SET @ErrorMessage = 'Invalid Competition Type'                                      
                  
   SET @SPStatus = 1;                                      
                  
   SET @SPReturnMessage = @ErrorMessage;                                  
                  
  END                                      
                  
                                      
                  
  IF (ISNULL(@ErrorMessage, '') <> '')                                      
                  
  BEGIN                                      
                  
   IF @ConsumerID IS NOT NULL                                      
                  
   BEGIN                  -------------------------------------------------------------------//                                                 
                  
    --//-------------------------------------------------------                                                    
                  
    DECLARE @return_value1 INT                                      
                  
                                      
                  
    EXEC @return_value1 = [dbo].[SaveEServiceAddOnConsumers] @ConsumerID = @ConsumerID                                      
                  
     ,@EServiceID = @EServiceID                                      
                  
      
                  
    PRINT '@return_value1'                                      
                  
    PRINT @return_value1                                      
                  
                                      
                  
    --------------------------------------------------------------------//                                                    
                  
    SET XACT_ABORT ON;                                      
                  
   END                                      
                  
  END                                      
                  
                                      
                  
  SELECT @ErrorMessage                                      
                  
                                      
                  
                                    
                  
 END                                      
                  
                             
                  
                                    
                  
 COMMIT TRANSACTION SaveECouponConfiguration                                      
                  
END TRY                                      
                  
                                      
                  
BEGIN CATCH                                      
                  
 ROLLBACK TRANSACTION SaveECouponConfiguration                                      
                  
                                      
                  
 SELECT @ErrorMessage = ERROR_MESSAGE()                                      
                  
                                      
                  
 SET @SPStatus = 1;                                      
                  
 SET @SPReturnMessage = @ErrorMessage;                                      
                  
                                      
                  
 RAISERROR (                    
                  
   @ErrorMessage                                      
                  
   ,16                                      
                  
   ,1                                      
                  
   );                                      
                  
END CATCH                                      
                  
                                      
                  
SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[usp_InsertExclusion]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[usp_InsertExclusion]      
 @xml XML = null,      
 @eServiceId VARCHAR(10) = '',      
 @SpStatus INT OUT,      
 @ErrorMessage NVARCHAR(500) OUT      
AS      
BEGIN      
SET @SpStatus = 1;      
SET @ErrorMessage = 'Success';      
BEGIN TRY      
     SET NOCOUNT ON;        
IF(@eServiceId = '')      
 INSERT INTO [coc_ConsumerExclusions] ([ECouponID],[PrimaryMobile],[EmailID])      
 SELECT DISTINCT t.value('(eCouponId/text())[1]','nvarchar(50)')AS eCouponId,      
  ('00'+t.value('(Mobile/text())[1]','nvarchar(50)')+'')AS Mobile,      
  t.value('(Email/text())[1]','nvarchar(50)')AS Email      
        FROM @xml.nodes('Exclusion/members')AS TempTable(t)      
ELSE      
BEGIN      
 DECLARE @eCouponId INT = (SELECT ECouponID FROM coc_ECoupons WITH(NOLOCK) WHERE EServiceID = @eServiceId)      
  INSERT INTO [coc_ConsumerExclusions] ([ECouponID],[PrimaryMobile],[EmailID])      
  SELECT DISTINCT @eCouponId,      
  ('00'+t.value('(Mobile/text())[1]','nvarchar(50)')+'')AS Mobile,      
  t.value('(Email/text())[1]','nvarchar(50)')AS Email      
        FROM @xml.nodes('Exclusion/members')AS TempTable(t)      
END      
END TRY      
      
BEGIN CATCH      
SET @SpStatus = 0;      
SET @ErrorMessage = 'Error Message: '+ERROR_MESSAGE()+' Error line: '+CONVERT(nvarchar(max),ERROR_LINE());      
END CATCH      
      
END
GO
/****** Object:  StoredProcedure [dbo].[USP_IsParticipateConsumer]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[USP_IsParticipateConsumer]                    
(                      
@ECouponID int,                
@ConsumerID int = null,              
@GuestID int = null,             
@RetailOutletID int=null,            
@IsParticipate bit output                    
)                    
as                    
begin                   
   declare @startdate date          
   declare @enddate date          
   declare @presentdate date          
   declare @Isactive bit          
if @ConsumerID =0               
   set @ConsumerID = null;              
          
  if @RetailOutletID =0               
   set @RetailOutletID = null;           
           
 if @GuestID =0              
   set  @GuestID = null;              
               
    if @ConsumerID is not null and exists(select ECouponParticipationID from coc_ECouponParticipations(NOLOCK) where ECouponID=@ECouponID and ConsumerID=@ConsumerID and (@RetailOutletID is null or RetailOutletID=@RetailOutletID))   
 begin  
     set @IsParticipate=1    
 end  
   else if @GuestID is not null and exists(select ECouponParticipationID from coc_ECouponParticipations(NOLOCK) where ECouponID=@ECouponID and GuestID=@GuestID and (@RetailOutletID is null or RetailOutletID=@RetailOutletID))                
    begin  
      set @IsParticipate=1    
 end            
    else                
  set @IsParticipate=0                
            
  --if(@IsParticipate=0)          
  --   begin          
  --  set @presentdate=Convert(date,getdate())          
  --  select @startdate=Convert(date,ES.FromDate),@enddate=Convert(date,ES.ToDate),@Isactive=EV.IsActive from coc_ECoupons(Nolock) EV          
  --          inner join coc_Eservices(NOLock) ES on ES.EServiceID=EV.EServiceID          
  -- where EV.ECouponID=@ECouponID          
  --      if(@startdate <= @presentdate and @enddate >= @presentdate and @Isactive=1)          
  --     set @IsParticipate=0           
  --   else          
  --    set @IsParticipate=1            
               
  --end          
             
          
  select @IsParticipate                    
end 
GO
/****** Object:  StoredProcedure [dbo].[USP_IssueGiftReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- USP_IssueGiftReport 1,9,'01 Dec 2018','30 Jan 2019'
--use ecopontest2018december16 --use ecoponlive 
CREATE PROCEDURE [dbo].[USP_IssueGiftReport] (  
 @LanguageID INT  
 ,@CorporateID INT  
 ,@FromDate DATEtime  
 ,@ToDate DATEtime  
 )  
AS  
BEGIN  
SELECT   ROW_NUMBER() OVER(ORDER BY (SELECT 1)) SlNo,  
  convert(varchar,cast(EP.ParticipationDate as datetime)) ParticipationDate  
  ,EP.Barcode  
  ,EP.ParticipationMobile  
  ,EP.ParticipationEmailID  
  ,case when EP.ECouponID= 40 then ROL.RetailOutlet else case when @LanguageID= 1 then ddv.DataTextField_EN else ddv.DataTextField_AR end end as RetailOutlet  
  ,CRP.CorporateName  
  ,EP.ConsumerName  
  , convert(varchar,cast(EW.DrawDateTime as date)) DrawDateTime  
  ,EP.InvoiceNumber  
  ,EP.InvoiceAmount  
  ,case when EP.ECouponID = 40 then PZ.Category else '-' end as Category --PZ.Category  
  ,EPL.Value BOX   
  ,EP.ECouponID  
  --,EP.Restaurant  
  ,G.Age
  --,ddv.DataTextField_EN Restaurant  
  ,( case when @LanguageID = 1 then drpGender.DataTextField_EN else drpGender.DataTextField_AR end) Gender
  ,( case when @LanguageID = 1 then drpEducation.DataTextField_EN else drpEducation.DataTextField_AR end) Education  
  ,( case when @LanguageID = 1 then drpMaritalStatus.DataTextField_EN else drpMaritalStatus.DataTextField_AR end) MaritalStatus  
 FROM coc_ECouponParticipations(NOLOCK) EP   
 JOIN coc_ECouponWinners(NOLOCK) EW ON EW.GuestID = EP.GuestID  AND EW.ECouponParticipationID = EP.ECouponParticipationID  
 JOIN coc_Corporates(NOLOCK) CRP ON CRP.CorporateID = EP.CorporateID  
 left join coc_Guests(NOLOCK) G ON  G.GuestID= EP.GuestID  
 left join COC_DropDownValues drpGender(NOLOCK) ON drpGender.DataValueField = G.gender and drpGender.DropDownType = 1  
 left join COC_DropDownValues drpMaritalStatus(NOLOCK) ON drpMaritalStatus.DataValueField = G.MaritalStatus and drpMaritalStatus.DropDownType = 2  
 left join COC_DropDownValues drpEducation(NOLOCK) ON drpEducation.DataValueField = G.EducationQualification and drpEducation.DropDownType = 3   
 left join COC_DropDownValues(NOLOCK) ddv ON ddv.DataValueField = EP.Restaurant and ddv.DropDownType = 4  
 left JOIN coc_RetailOutlets(NOLOCK) RO ON RO.RetailOutletID = EP.RetailOutletID  
 left JOIN coc_RetailOutletLanguages(NOLOCK) ROL ON ROL.RetailOutletID = RO.RetailOutletID  
  AND ROL.LanguageID = @LanguageID  
 JOIN coc_ECouponPrizes(NOLOCK) PZ ON PZ.ECouponID = EP.ECouponID  
  AND EW.EcouponPrizeID = PZ.EcouponPrizeID  
 JOIN coc_ECouponPrizesLanguages(NOLOCK) EPL ON EPL.ECouponPrizeID = PZ.ECouponPrizeID  
  AND EPL.LanguageID = @LanguageID  
  AND EPL.ResourceKey = 'Name'  
 WHERE EP.CorporateID = @CorporateID  
  --EP.ECouponID = 40  
  AND (  
   CAST(CAST(DATEADD(hh, - 3, EW.drawdatetime) AS DATE) AS DATE) >= CAST(@FromDate AS DATE)  
   AND CAST(CAST(DATEADD(hh, - 3, EW.drawdatetime) AS DATE) AS DATE) <= CAST(@ToDate AS DATE)  
   )  
 ORDER BY EW.DrawDateTime  
END
GO
/****** Object:  StoredProcedure [dbo].[USP_MobileAppLogin]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_MobileAppLogin] 
@MobileNumber VARCHAR(20) = NULL AS 
BEGIN
   SELECT
      TOP (1) 
	  US.UserID,
      UserName,
      US.[Password],
      US.IsActive,
      RoleID,
      US.MobileNumber,
      US.EmailID,
      US.ResetRequired,
      ISNULL(CS.ConsumerID, 0) [ConsumerID],
      CS.IsVerified,
      CS.OtpID [VerificationCode],
      ISNULL(US.FullName, '') FullName,
      CASE
         WHEN
            ISNULL(CS.Address1, '') = '' 
         THEN
            'Address' 
         ELSE
            CS.Address1 
      END
      Address1 
   FROM
      [coc_Users](NOLOCK) US 
      LEFT JOIN
         [coc_Consumers](NOLOCK) CS 
         ON CS.UserID = US.UserID 
   WHERE
      mobilenumber = @MobileNumber 
      and US.IsDeleted = 0 
      and Us.IsActive = 1 
      and CS.IsVerified = 1;
END
GO
/****** Object:  StoredProcedure [dbo].[usp_ProcessCompetitionsStatisticalData]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[usp_ProcessCompetitionsStatisticalData]
AS
 SET NOCOUNT ON 
 BEGIN TRANSACTION StatisticalData                                    
 BEGIN TRY                                    
    DECLARE @ECouponID bigint;
    DECLARE @EServiceID INTEGER;
    DECLARE @NotificationID INTEGER;
    DECLARE @ToDate DATETIME;
    DECLARE @TotalNoOfBarcodes INTEGER;
    DECLARE @NotificationCount INTEGER;
    DECLARE @TotalBarcodesCreated INTEGER;
    DECLARE @TotalBarcodesDownloaded INTEGER = NULL;
    DECLARE @TotalBarcodesUsed INTEGER = NULL;
    DECLARE @EServices TABLE(ECouponID bigint,EServiceID INTEGER, ToDate DATETIME)

    INSERT INTO @EServices
    SELECT EC.ECouponID,ES.EServiceID, ES.ToDate FROM coc_EServices(NOLOCK) ES 
        inner join coc_ECoupons(nolock) EC on EC.EServiceID=ES.EServiceID
    --INNER JOIN coc_EServiceInvoices (NOLOCK) INV ON INV.EServiceID = ES.EServiceID
    WHERE 
    ES.EServiceID = 5   
    -- AND ES.IsActive = 1 AND ES.ServiceTypeID = 52 AND INV.IsBarcodeGenerated = 1
    AND ES.ToDate <= DATEADD(MONTH, -4, GETDATE()) 
    --ES.ToDate <= DATEADD(YEAR, -4, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0))
    ORDER BY ES.ToDate DESC

    WHILE EXISTS(SELECT * FROM @EServices)
    BEGIN
        
	    SELECT TOP 1 @ECouponID=ECouponID, @EServiceID=EServiceID, @ToDate = ToDate FROM @EServices
        PRINT CONVERT(VARCHAR(10), @EServiceID)
        SELECT @NotificationID = NotificationID, @TotalNoOfBarcodes=NotificationCount FROM coc_Notifications(nolock) WHERE EServiceID = @EServiceID
        SELECT @NotificationCount = ISNULL(NotificationCount,0) 
           FROM coc_EServiceInvoices (NOLOCK) INV WHERE INV.EServiceID = @EServiceID

        IF EXISTS (SELECT * FROM coc_competition_staging (NOLOCK) WHERE CompetitionId = @ECouponID)
        BEGIN
            SELECT @TotalNoOfBarcodes = ISNULL(CS.NoOfCoupons,0)
                FROM coc_competition_staging (NOLOCK) CS where CS.CompetitionId = @ECouponID

            --Open Quantity Competitions.
            IF @TotalNoOfBarcodes=0
                SET @TotalNoOfBarcodes = @NotificationCount
        END
        SELECT @TotalBarcodesCreated = COUNT(ESB.EServiceBarcodeID) 
        FROM coc_EServiceBarcodes (NOLOCK) ESB where ESB.NotificationID=@NotificationID

        SELECT @TotalBarcodesDownloaded = COUNT(ESB.EServiceBarcodeID) 
          FROM coc_EServiceBarcodes (NOLOCK) ESB
        where ESB.NotificationID=@NotificationID AND ISNULL(ESB.IsDownloaded,0) = 1

        SELECT @TotalBarcodesUsed = COUNT(ESB.EServiceBarcodeID) 
            FROM coc_EServiceBarcodes (NOLOCK) ESB
        where ESB.NotificationID=@NotificationID AND ISNULL(ESB.IsUsed,0) = 1
        
        IF NOT EXISTS(SELECT COUNT(EServiceID) FROM coc_EServiceBarcodes_StatisticalData(NOLOCK) WHERE EServiceID = @EServiceID)
        BEGIN
          INSERT INTO coc_EServiceBarcodes_StatisticalData(EServiceID, TotalNoOfBarcodes, ExtraBarcodesAdded, 
            TotalBarcodesCreated, TotalBarcodesDownloaded, TotalBarcodesUsed)
            SELECT @EServiceID, 
            @TotalNoOfBarcodes AS TotalNoOfBarcodes,
            (CASE WHEN (@NotificationCount > @TotalNoOfBarcodes) THEN  @NotificationCount-@TotalNoOfBarcodes ELSE 0 END) AS ExtraBarcodesAdded, 
            @TotalBarcodesCreated AS TotalBarcodesCreated,
            @TotalBarcodesDownloaded AS TotalBarcodesDownloaded,
            @TotalBarcodesUsed AS TotalBarcodesUsed
            
        END
        ELSE
        BEGIN
            UPDATE [dbo].[coc_EServiceBarcodes_StatisticalData]
                SET 
                TotalNoOfBarcodes = @TotalNoOfBarcodes,
                ExtraBarcodesAdded = CASE WHEN (@NotificationCount > @TotalNoOfBarcodes) THEN  @NotificationCount-@TotalNoOfBarcodes ELSE 0 END
                --TotalBarcodesCreated = @TotalBarcodesCreated,
                --TotalBarcodesDownloaded = @TotalBarcodesDownloaded,
                --TotalBarcodesUsed = @TotalBarcodesUsed
                WHERE EServiceID = @EServiceID
        END
        --Check if competition has expired 2 years back
        IF(@ToDate <= DATEADD(YEAR, -2, GETDATE()))
        BEGIN
            PRINT '2 YEARS BACK'
            -- 1. Delete all used barcodes from coc_EServiceBarcodes, 
            -- 2. Update the deleted entries column in statistics table
            -- 3. Update ‘TruncationProcessStage’ column in coc_EServices table with value = 3
            Exec usp_DeleteAllCompetitionBarcodesByIsusedFlag @ECouponID,@EServiceID, @NotificationID, 1
        END
        ELSE IF(@ToDate <= DATEADD(MONTH, -2, GETDATE()))
        BEGIN
            PRINT '2 MONTHS BACK'
            -- 1. Delete all unused barcodes from competitions from coc_EServiceBarcodes, 
            -- 2. Update the deleted entries column in statistics table
            -- 3. Update ‘TruncationProcessStage’ column in coc_EServices table with value = 2 
            Exec usp_DeleteAllCompetitionBarcodesByIsusedFlag @ECouponID, @EServiceID, @NotificationID, 0
        END

	    DELETE @EServices WHERE EServiceID=@EServiceID
    END
    
    SELECT EServiceID, TotalNoOfBarcodes, ExtraBarcodesAdded, TotalBarcodesCreated, 
    TotalBarcodesDownloaded, TotalBarcodesUsed,TotalBarcodesDeleted 
    FROM coc_EServiceBarcodes_StatisticalData

    COMMIT TRANSACTION StatisticalData  
    
 END TRY                                    
 BEGIN CATCH                                    
 ROLLBACK TRANSACTION StatisticalData 
     DECLARE @error INT, @ErrorMessage NVARCHAR(200);
     SELECT @ErrorMessage = ERROR_MESSAGE();                                  
     SELECT @error = ERROR_NUMBER();                                    
     RAISERROR ('usp_DeleteAllCompetitionBarcodesByIsusedFlag: %d: %s', 16, 1, @error, @ErrorMessage) ;                                  
 END CATCH 
GO
/****** Object:  StoredProcedure [dbo].[usp_RejectFromECouponParticipation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[usp_RejectFromECouponParticipation]   
 @Xml XML = null,
 @Reason nvarchar(max),
 @SpStatus INT OUT,    
 @ErrorMessage NVARCHAR(500) OUT    
AS    
BEGIN    
SET @SpStatus = 1;    
SET @ErrorMessage = 'Success';    
BEGIN TRY    
     SET NOCOUNT ON;  

DECLARE @ResultTemp Table (ID int identity(1,1),EService nvarchar(500),EmailID nvarchar(250),StartDate nvarchar(20),EndDate nvarchar(20))  
	 
DECLARE @ECouponParticipationDetailsTemp Table (ID int identity(1,1),ECouponID int,MobileNumber nvarchar(20),EmailID nvarchar(250),ECouponParticipationID bigint)  

 INSERT INTO @ECouponParticipationDetailsTemp  
   SELECT DataRow.value('(ECouponID/text())[1]','INTEGER'),                       
			  DataRow.value('(Mobile/text())[1]','NVARCHAR(20)'),                      
			  DataRow.value('(Email/text())[1]','VARCHAR(250)'),                      
			 DataRow.value('(ECouponParticipationID/text())[1]','INTEGER')                    
			  FROM @Xml.nodes('Rejections/Member') AS TempTable(DataRow)   


 Declare @ECoponID int 
 Declare @TopID int
 Declare @ECouponParticipationID bigint
 Declare @EmailID nvarchar(250)
 while exists(select * from @ECouponParticipationDetailsTemp)
 begin
    select top 1 @TopID=ID,@ECoponID=ECouponID,@ECouponParticipationID=ECouponParticipationID,@EmailID=EmailID from @ECouponParticipationDetailsTemp

	update coc_ECouponParticipations set ReasonForRejection=@Reason,IsRejected=1 where ECouponParticipationID=@ECouponParticipationID

	insert into @ResultTemp
	  Select esl.EService,@EmailID,
		   Convert(varchar(10),CONVERT(date,es.FromDate,106),103) as StartDate,          
		   Convert(varchar(10),CONVERT(date,es.ToDate,106),103) as EndDate          
		 from coc_EServices(nolock) es
		   inner join coc_EServiceLanguages(nolock) esl on esl.EServiceID=es.EServiceID and LanguageID=1
		   inner join coc_ECoupons(nolock) ec on ec.EServiceID=es.EServiceID
		  where ec.ECouponID=@ECoponID

	delete from @ECouponParticipationDetailsTemp where ID=@TopID

 end

 select EService,EmailID,StartDate,EndDate from @ResultTemp

  
END TRY    
    
BEGIN CATCH    
SET @SpStatus = 0;    
SET @ErrorMessage = ERROR_MESSAGE();    
END CATCH    
    
END
GO
/****** Object:  StoredProcedure [dbo].[usp_rpt_GetALLReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_rpt_GetALLReport]  

 @CompetitionName nvarchar(1000)=NULL         
 ,@FromDate date = NULL                                            
 ,@ToDate date     = NULL               
 ,@LanguageID  int=1                                                                                                                             
 ,@PageSize  int=100                                                              
 ,@RecordCount bigint     output                                                       
 ,@PageIndex int=1                                                
 ,@CorporateID int= NULL                    
                 
AS                                                                      
BEGIN                   
  SET NOCOUNT ON;                                                     
  declare @offset bigint,@fetch  bigint;                                              
     set @offset =@PageSize*(@PageIndex-1);                                              
     set @fetch =@PageSize;                 
                  
 IF (@FromDate IS NULL)                  
   SET @FromDate = GetDate();                                              
 IF (@ToDate IS NULL)                  
   SET @ToDate = dateadd(dd, + 1, GetDate());                  
IF (@LanguageID IS NULL)                  
  SET @LanguageID = 1; 


  declare  @GetCompetitionReport table(
  [Competition Name] nvarchar(1000),
  [Competition Order No] nvarchar(100),
  [Corporate Name] nvarchar(200),
  DrawDateTime nvarchar(20),                                          
 [Winner Name] nvarchar(200),
 [Winner Mobile Number] varchar(15),
 [Participation Date] Date,
 ParticipationTime datetime,
 [Registration Date] date,
 RegistrationTime datetime
 )


 insert into @GetCompetitionReport                                             
  select    
  ci.CompetitionName,
  ci.CompetitionOrderNo,
  ci.CorporateName,
  ci.DrawDateTime,
  ci.WinnerName,
  ci.WinnerMobileNumber,
  ci.participationDate,
  ci.ParticipationTime,
  ci.RegistrationDate,
  ci.RegistrationTime
                                         
  from ws_Competitionformation ci          
           
                 
where (@FromDate is null or @ToDate is null or  convert(date,ci.RegistrationDate) between convert(date, @FromDate) and  convert(date, @ToDate)) AND           
     (@FromDate is null or @ToDate is null or  convert(date,ci.ParticipationDate) between convert(date, @FromDate) and  convert(date, @ToDate)) AND           
                  
 (@CompetitionName IS NULL OR ci.CompetitionName LIKE '%' + @CompetitionName + '%' )           
           
  select @RecordCount =count(*) from @GetCompetitionReport                                                
        where (@FromDate is null or @ToDate is null or  convert(date,RegistrationTime) between convert(date, @FromDate) and  convert(date, @ToDate) )       
      
    select [Competition Name] [Competition Order No] ,[Corporate Name],DrawDateTime,[Winner Name],[Winner Mobile Number],ParticipationTime,[Participation Date],[Registration Date],RegistrationTime     
         from @GetCompetitionReport          
                order by 1 desc    OFFSET @offset ROWS                                                      
                          FETCH NEXT @fetch ROWS ONLY                                             
                                               
                                           
          
                                                 
                                                   
END
GO
/****** Object:  StoredProcedure [dbo].[usp_rpt_GetCorporateReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_rpt_GetCorporateReport]                
--declare              
 @CorporateName nvarchar(100)=NULL                       
 ,@FromDate date = NULL                                                          
 ,@ToDate date     = NULL                             
  ,@LanguageID  int=1                                                                                                                                           
 ,@PageSize  int=100                                                                            
 ,@RecordCount bigint  Output                                                                        
 ,@PageIndex int=1                                                              
 ,@CorporateID int= NULL                                  
                               
AS                                                                                    
BEGIN                                 
  SET NOCOUNT ON;                                                                   
  declare @offset bigint,@fetch  bigint;                                                            
     set @offset =@PageSize*(@PageIndex-1);                                                            
     set @fetch =@PageSize;                               
                                
 IF (@FromDate IS NULL)                                
   SET @FromDate = GetDate();                                                            
 IF (@ToDate IS NULL)                                
   SET @ToDate = dateadd(dd, + 1, GetDate());                                
IF (@LanguageID IS NULL)                                
  SET @LanguageID = 1;                            
                          
   DECLARE @GetCorporateReport TABLE (                   
    SNo bigint IDENTITY(1,1) PRIMARY KEY,                
   [Corporate Name] NVARCHar(200)                        
   ,[Corporate Name _AR] nvarchar(200)                        
   ,RegistrationDate Nvarchar(20)               
   ,RegistrationTime Nvarchar(20)               
   ,ParticipationDate Nvarchar(20)               
    ,ParticipationTime Nvarchar(20)              
    ,CRNumber NVARChar(200)                        
   ,JCCICode NVARCHAR(200)                        
   ,VATNo NVARCHar(200)                        
   ,IsActive Bit                        
   ,IsVerified Bit                        
   ,FirstName NVARCHAR(200)                        
   ,MiddleName NVARCHAR(100)                        
   ,LastName NVARCHAR(200)                        
   ,MobileNumber NVARCHAR(15)                        
   ,[Country Name] NVARCHAR(50)                        
   ,[Country Name_AR] NVARCHAR(50)                        
   ,City NVARChAR (50)                        
   ,City_AR NVARCHAR(50)                        
                        
  )                             
                          
                                     
 insert into @GetCorporateReport                                                           
  select                 
           
                  
   cpi.CorporateName                        
  ,cpi.CorporateNameAR                        
  ,Convert(Nvarchar(20),cpi.RegistrationDateTime,103) As RegistrationDate              
   ,FORMAT(cpi.RegistrationDateTime, 'hh:mm:ss tt') as RegistrationTime  --RIGHT(CONVERT(VARCHAR(30),(cpi.RegistrationDateTime), 22), 11) as RegistrationTime              
   ,Convert(Nvarchar(20),cpi.RegistrationDateTime,103) As ParticipationDate               
   ,FORMAT(cpi.RegistrationDateTime, 'hh:mm:ss tt') --RIGHT(CONVERT(VARCHAR(30),(cpi.RegistrationDateTime), 22), 11)               
  ,cpi.CRNumber                        
  ,cpi.JCCICode                        
  ,cpi.VATNo                        
  ,cpi.IsActive                        
  ,cpi.IsVerified                        
  ,cpi.FirstName                        
  ,cpi.MiddleName                        
  ,cpi.LastName                        
  ,cpi.MobileNumber                        
  ,cpi.[Country Name En]                        
  ,cpi.[Country Name Ar]                        
  ,cpi.[City Name En]                        
  ,cpi.[City Name Ar]                        
                                                                 
                            
   from vw_CorporateInformation cpi                        
                         
                               
where (@FromDate is null or @ToDate is null or  convert(date,cpi.RegistrationDate) between convert(date, @FromDate) and  convert(date, @ToDate)) AND                         
                                
 (@CorporateName IS NULL OR cpi.CorporateName LIKE '%' + @CorporateName + '%' OR isnull(Cpi.CorporateNameAR, '') LIKE '%' + @CorporateName + '%'  )                         
                         
  select @RecordCount =count(*) from @GetCorporateReport                                                              
        where (@FromDate is null or @ToDate is null or  convert(date,RegistrationDate,103) between convert(date, @FromDate) and  convert(date, @ToDate) )               
                
    select Sno, [Corporate Name] ,[Corporate Name _AR] ,RegistrationDate,RegistrationTime,ParticipationDate, ParticipationTime,CRNumber,JCCICode,VATNo,IsActive,IsVerified,                    
       FirstName,MiddleName,LastName,MobileNumber,[Country Name],[Country Name_AR] ,City,City_AR  from @GetCorporateReport                           
                order by 1 desc    OFFSET @offset ROWS                                                                    
                          FETCH NEXT @fetch ROWS ONLY                                                           
                                                             
                                                         
                        
                                                               
                                                                 
END
GO
/****** Object:  StoredProcedure [dbo].[usp_rpt_GetCunsumers]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[usp_rpt_GetCunsumers]  ------------reports      
 @LanguageID  int=1,                          
 @RecordCount bigint out,                               
 @PageIndex int=1,                             
 @IsExport bit = 0,  
 @PageSize  int=100,                        
 @Mobile nvarchar(100) =NULL,                          
 @EmailID varchar(50)=NULL,                        
 @Name nvarchar(100)=NULL                                                 
AS                                         
 BEGIN                                                    
   declare @offset int,@fetch int;                                                   
  set @offset =@PageSize*(@PageIndex-1);                                                
  set @fetch =@PageSize;   
                             
  declare  @GeData table(SNo bigint IDENTITY(1,1) PRIMARY KEY, [Competition Name] nvarchar(1000),  
  ParticipationDate nvarchar(25), Barcode nvarchar(100), [Membership ID] nvarchar(100), [Consumer Name] nvarchar(1000),[Mobile Number] nvarchar(100),  
  Email nvarchar(100), [Nationality]  nvarchar(100),Gender nvarchar(20),DateOfBirth nvarchar(100), [City] nvarchar(100),[Remarks] nvarchar(max),[UserType] nvarchar(100))     
  
  insert into @GeData  
SELECT distinct   
    esl.EService as [Competition Name],  
   Convert(nvarchar(25), convert(date, CS.AddDate)) as ParticipationDate, ep.Barcode,  CS.MembershipNumber as [Membership ID],  
 CS.FirstName+' '+CS.SecondName+' '+CS.FamilyName AS [Consumer Name],CS.PrimaryMobile,CS.EmailID,NL.Nationality,  
    --CS.Gender,  
     case when CS.Gender= 2 then 'Female'  when CS.Gender= 1 then 'Male' else '' end Gender,  
 case when CS.BirthDate is null then '' else convert(nvarchar(100),convert(date, CS.BirthDate)) end DateOfBirth,  
  CA.City,U.Remarks,'Member' as UserType  
  FROM [coc_Consumers](NOLOCK)CS       
    LEFT JOIN [coc_CountryLanguages]CL(NOLOCK) ON CL.CountryID=CS.CountryID AND CL.LanguageID = 1    
    LEFT JOIN [coc_CityLanguages]CA(NOLOCK) ON CA.CityID=CS.CityID AND CA.LanguageID = 1    
    LEFT JOIN [coc_EnumValueLanguages]EVL(NOLOCK) ON EVL.EnumValueID=CS.Gender AND EVL.LanguageID = 1    
    LEFT JOIN coc_NationalityLanguages(NOLOCK) NL ON NL.NationalityID = CS.NationalityID and NL.LanguageID = 1    
 INNER JOIN coc_ECouponParticipations(NOLOCK) ep ON CS.ConsumerID=EP.ConsumerID  
 INNER JOIN coc_ECoupons(NOLOCK) ec on ec.ECouponID = ep.ECouponID                                         
 INNER JOIN coc_EServices(NOLOCK) es on es.EServiceID = ec.EServiceID                                       
 LEFT JOIN coc_EServiceLanguages(NOLOCK) esl on esl.EServiceID = ec.EServiceID  and esl.LanguageID = 1  
 INNER JOIN coc_Users(NOLOCK) U on CS.UserID=u.UserID where 1=1  
    and (@Mobile is null or  CS.PrimaryMobile like'%'+@Mobile+'%' or  ep.ParticipationMobile ='%'+@Mobile+'%' )      
    and (@EmailID is null or CS.EmailID like'%'+@EmailID+'%' or ep.ParticipationEmailID = @EmailID )               
    and (@Name is null or CS.FirstName like'%'+@Name+'%' or CS.SecondName like'%'+@Name+'%' or CS.FamilyName like'%'+@Name+'%')      
  
                                 
select @RecordCount =count(*) from @GeData   
  
 select  SNo, [Competition Name],  
  ParticipationDate, Barcode, [Membership ID], [Consumer Name],[Mobile Number],  
  Email, [Nationality],Gender,DateOfBirth , [City],[Remarks],[UserType] from  @GeData                                      
    order by SNo asc    OFFSET @offset ROWS                                                
FETCH NEXT @fetch ROWS ONLY                    
                                        
 END   
  
  
GO
/****** Object:  StoredProcedure [dbo].[usp_rpt_GetCustomerParticipation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_rpt_GetCustomerParticipation]       
 @FromDate date    =  NULL                                                     
,@ToDate date             = NULL                            
,@vEServiceID bigint       = NULL                              
,@vCorporateID bigint      = NULL                              
,@CorporateID bigint      = NULL                              
,@LanguageID INTEGER      =  1                                                          
,@UserTypeId int          =  NULL                                                          
,@PageSize int            =  50                                                          
,@RecordCount bigint        OUT                                                 
,@PageIndex int           =  1                                                          
,@IsExport bit             = 0                                                          
,@Mobile nvarchar(100)     = NULL                              
,@MembershipNumber nvarchar(100) = NULL                              
,@EmailID varchar(50)     =  NULL                              
,@Name nvarchar(100)      =  NULL                              
AS                              
BEGIN     
  --if @vEServiceID is null  
  --   return;  
 IF (@CorporateID IS NULL)                                
  SET @CorporateID = @vCorporateID                                
                                
 IF (@vCorporateID IS NULL)                                
  SET @vCorporateID = @CorporateID                                
                                
 DECLARE @offset BIGINT                                
  ,@fetch BIGINT;                                
                                
 SET @offset = @PageSize * (@PageIndex - 1);                                
 SET @fetch = @PageSize;                                
 IF (@FromDate IS NULL)                                
  SET @FromDate = GetDate();                                
 IF (@ToDate IS NULL)                                
  SET @ToDate = dateadd(dd, + 1, GetDate());                                
     
 IF (@LanguageID IS NULL)                                
  SET @LanguageID = 1;                                
     
 IF (@UserTypeId = 1)                                
 BEGIN                    
     if(@IsExport=0)                  
 begin                  
    SELECT @RecordCount=count(ep.ECouponParticipationID) FROM coc_ECouponParticipations(NOLOCK) ep                     
       INNER JOIN coc_ECoupons(NOLOCK) ec ON ec.ECouponID = ep.ECouponID                   
   INNER JOIN coc_EServices(NOLOCK) es ON es.EServiceID = ec.EServiceID and (@vEServiceID IS NULL OR es.EServiceID = @vEServiceID)                               
   --INNER JOIN coc_EServiceLanguages(NOLOCK) esl ON esl.EServiceID = ec.EServiceID AND esl.LanguageID = @LanguageID                                
   Inner JOIN coc_Consumers(NOLOCK) c ON c.ConsumerID = ep.ConsumerID                                
   Where (CONVERT(DATE, ep.ParticipationDate) BETWEEN Convert(date,@FromDate) AND Convert(date,@ToDate) )                  
   AND (@Mobile IS NULL OR ep.ParticipationMobile=@Mobile)                   
   AND (@EmailID IS NULL OR ep.ParticipationEmailID=@EmailID)                   
   --AND (@Name IS NULL OR ep.ConsumerName LIKE '%' + @Name + '%')                   
 end                  
 SELECT ROW_NUMBER() OVER (                                
   ORDER BY (                                
     SELECT 1                                
     )                                
   ) SNo                   
   ,EP.ECouponID                              
    ,ep.ECouponParticipationID                    
 ,ISNULL((select case when count(*) >0 then 'Yes' else 'No' END from coc_ConsumerExclusions Ex where (Ex.ECouponID is null or Ex.ECouponID = EP.ECouponID) and Ex.PrimaryMobile = EP.ParticipationMobile ),'No') As [Block]                       
 ,(CASE WHEN ep.IsRejected = 1 THEN 'Rejected' ELSE 'Approved' END) STATUS                  
 ,isnull(ep.ReasonForRejection, '') [Reason For Rejection]                                
    ,(CASE WHEN ep.UploadImagePath IS NOT NULL THEN 'https://e-copon.com/UploadedFiles/DynamicCompetition/' + ep.UploadImagePath ELSE '' END) Photos                                
    ,(CASE WHEN ep.UploadImagePath2 IS NOT NULL THEN 'https://e-copon.com/UploadedFiles/DynamicCompetition/' + ep.UploadImagePath2 ELSE '' END) Form                                
,esl.EService AS [Competition Name]                  
 ,(case when @LanguageID=1 then (Select isnull(cor.CorporateName,cor.CorporateNameAR) from coc_Corporates cor (nolock) where cor.CorporateID = es.CorporateID)                   
     else (Select isnull(cor.CorporateNameAR,cor.CorporateName) from coc_Corporates cor (nolock) where cor.CorporateID = es.CorporateID) end) [Corporate Name]                  
 ,isnull(ep.ConsumerName,isnull(c.FullName, ''))  AS [Consumer Name]                   
     ,isnull(ep.ParticipationMobile, c.PrimaryMobile) AS Mobile                                
    ,isnull(ep.ParticipationEmailID, c.EmailID) AS Email                      
 ,isnull((select cl.City from coc_CityLanguages(nolock) cl where cl.CityID = c.CityID And cl.LanguageID = @LanguageID),'') As City                   
 ,isnull(c.UserIdentityNumber, '') [ID Number]                   
    ,CONVERT(NVARCHAR(19), ep.ParticipationDate, 103) [Participation Date]               
 , FORMAT (ep.ParticipationDate, 'hh:mm:ss tt') as [Participation Time]                
    ,isnull(ep.Barcode, '') Barcode                                 
    ,isnull(c.MembershipNumber,'') AS [Member ID]                                
    ,isnull((select nl.Nationality from coc_NationalityLanguages(NOLOCK) nl Where nl.NationalityID = c.NationalityID AND nl.LanguageID = @LanguageID),'') AS Nationality                               
,(CASE WHEN c.BirthDate IS NULL THEN '' ELSE convert(VARCHAR, convert(DATE, c.BirthDate)) END) AS DateOfBirth                                
 ,(CASE WHEN c.Gender = 2 THEN 'Female' WHEN c.Gender = 1 THEN 'Male' ELSE '' END) AS Gender                                
 ,c.IqamaNumber AS IqamaNumber                  
 ,c.IsActive [Customer Status]                      
 ,isnull(c.IsEmailVerified,0) AS IsEmailVerified                  
 ,isnull(c.IsMobileVerified,0) AS IsMobileVerified                  
 ,ep.Latitude                      
 ,ep.Longitude                      
 ,ep.DistanceToRetailoutlet                      
 ,c.Organization AS Organization                  
 ,c.OccupationID As Occupation                      
 ,c.MaritalStatusID As MaritalStatus                      
 ,c.PromoCodeID As PromoCode                      
 ,convert(VARCHAR, convert(DATE, c.PromoCodeExpiryDate)) AS PromoCodeExpiryDate                  
 , CASE WHEN c.IsDeleted=1 THEN 'True' Else 'Flase' end IsDeleted                      
 ,CASE WHEN es.CompetitionID = 42 THEN 'Correct Answer' ELSE CASE WHEN ep.RetailOutletID IS NULL THEN '' ELSE                   
 isnull((select rol.RetailOutlet from coc_RetailOutletLanguages(NOLOCK) rol Where rol.RetailOutletID = ep.RetailOutletID AND rol.LanguageID = @LanguageID),'')END END AS Remarks                                
    ,'Member'  AS [User Type]      
, ep.Question1  
,ep.UserName  
,Case when Isnull(EP.SocialMediaID,0)<>0 then (SELECT SM.SocialMediaName FROM coc_SocialMedia (NOLOCK) SM WHERE SM.SocialMediaID = EP.SocialMediaID) else '' end AS SocialMedia
   FROM coc_ECouponParticipations(NOLOCK) ep                    
   INNER JOIN coc_ECoupons(NOLOCK) ec  ON ec.ECouponID = ep.ECouponID                   
   INNER JOIN coc_EServices(NOLOCK) es ON es.EServiceID = ec.EServiceID and (@vEServiceID IS NULL OR es.EServiceID = @vEServiceID)                   
   AND (@vCorporateID IS NULL OR es.CorporateID = @vCorporateID)                  
   INNER JOIN coc_EServiceLanguages(NOLOCK) esl ON esl.EServiceID = ec.EServiceID AND esl.LanguageID = @LanguageID                             
   Inner JOIN coc_Consumers(NOLOCK) c ON c.ConsumerID = ep.ConsumerID      
    left join coc_EServiceExternalBarcodes eeb (nolock)  on eeb.EServiceID = esl.EServiceID      
    Where (CONVERT(DATE, ep.ParticipationDate,103) BETWEEN Convert(date,@FromDate) AND Convert(date,@ToDate) )                  
   AND (@Mobile IS NULL OR ep.ParticipationMobile= @Mobile)                   
   AND (@EmailID IS NULL OR ep.ParticipationEmailID = @EmailID)                   
   --AND (@Name IS NULL OR ep.ConsumerName LIKE '%' + @Name + '%')                  
 ORDER BY EP.ECouponParticipationID Desc OFFSET @offset ROWS                                
      FETCH NEXT @fetch ROWS ONLY                   
                   
 END                                
 ELSE IF (@UserTypeId = 2)                   
 BEGIN                                
  if(@IsExport=0)                  
  begin                  
     SELECT @RecordCount=count(ep.ECouponParticipationID) FROM coc_ECouponParticipations(NOLOCK) ep                     
   INNER JOIN coc_ECoupons(NOLOCK) ec ON ec.ECouponID = ep.ECouponID                   
   INNER JOIN coc_EServices(NOLOCK) es ON es.EServiceID = ec.EServiceID and (@vEServiceID IS NULL OR es.EServiceID = @vEServiceID)                               
 --INNER JOIN coc_EServiceLanguages(NOLOCK) esl ON esl.EServiceID = ec.EServiceID AND esl.LanguageID = @LanguageID                                
   Inner JOIN coc_Guests(NOLOCK) g ON g.GuestID = ep.GuestID                   
 Where (CONVERT(DATE, ep.ParticipationDate) BETWEEN Convert(date,@FromDate) AND Convert(date,@ToDate) )                  
   AND (@Mobile IS NULL OR ep.ParticipationMobile= @Mobile)                   
   AND (@EmailID IS NULL OR ep.ParticipationEmailID = @EmailID)                   
   --AND (@Name IS NULL OR ep.ConsumerName LIKE '%' + @Name + '%')                   
  end                  
                     
 SELECT ROW_NUMBER() OVER (                                
   ORDER BY (                                
     SELECT 1                                
)                                
   ) SNo                   
   ,EP.ECouponID                              
    ,ep.ECouponParticipationID                    
 ,ISNULL((select case when count(*) >0 then 'Yes' else 'No' END from coc_ConsumerExclusions Ex where (Ex.ECouponID is null or Ex.ECouponID = EP.ECouponID) and Ex.PrimaryMobile = EP.ParticipationMobile ),'No') As [Block]                       
 ,(CASE WHEN ep.IsRejected = 1 THEN 'Rejected' ELSE 'Approved' END) STATUS                  
 ,isnull(ep.ReasonForRejection, '') [Reason For Rejection]                                
    ,(CASE WHEN ep.UploadImagePath IS NOT NULL THEN 'https://e-copon.com/UploadedFiles/DynamicCompetition/' + ep.UploadImagePath ELSE '' END) Photos                                
    ,(CASE WHEN ep.UploadImagePath2 IS NOT NULL THEN 'https://e-copon.com/UploadedFiles/DynamicCompetition/' + ep.UploadImagePath2 ELSE '' END) Form                                
 ,esl.EService AS [Competition Name]                  
 ,(case when @LanguageID=1 then (Select isnull(cor.CorporateName,cor.CorporateNameAR) from coc_Corporates cor (nolock) where cor.CorporateID = es.CorporateID)                   
     else (Select isnull(cor.CorporateNameAR,cor.CorporateName) from coc_Corporates cor (nolock) where cor.CorporateID = es.CorporateID) end) [Corporate Name]                  
 ,isnull(ep.ConsumerName, isnull(g.FullName, '')) AS [Consumer Name]                   
     ,isnull(ep.ParticipationMobile, g.PrimaryMobile) AS Mobile                                
    ,isnull(ep.ParticipationEmailID, g.EmailID) AS Email                      
 ,isnull((select cl.City from coc_CityLanguages (nolock) cl where cl.CityID = g.CityID And cl.LanguageID = @LanguageID),'') As City                   
 ,'' [ID Number]                   
 ,CONVERT(NVARCHAR(19), ep.ParticipationDate, 103) [Participation Date]               
 ,  FORMAT (ep.ParticipationDate, 'hh:mm:ss tt') as [Participation Time]               
  ,isnull(ep.Barcode, '') Barcode                                 
 ,'' AS [Member ID]                                
 ,isnull((select nl.Nationality from coc_NationalityLanguages(NOLOCK) nl Where nl.NationalityID =Convert(int, g.Nationality) AND nl.LanguageID = @LanguageID),'')  Nationality                               
,(CASE WHEN g.DOB IS NULL THEN '' ELSE convert(VARCHAR, convert(DATE, g.DOB)) end)  AS DateOfBirth          
 ,(CASE WHEN g.Gender = 2 THEN 'Female' WHEN g.Gender = 1 THEN 'Male' ELSE '' END) AS Gender                                
 ,'' AS IqamaNumber                  
 ,g.IsActive [Customer Status]                      
 , 0 AS IsEmailVerified                  
 ,isnull(g.IsVerified,0) AS IsMobileVerified                  
 ,ep.Latitude                      
 ,ep.Longitude                      
 ,ep.DistanceToRetailoutlet                      
 ,'' AS Organization                  
 ,''  As Occupation                      
 ,''  As MaritalStatus                      
 ,''  As PromoCode                      
 ,'' AS PromoCodeExpiryDate                  
 , CASE WHEN g.IsActive=1 THEN 'True' Else 'Flase' end IsDeleted                      
    ,CASE WHEN es.CompetitionID = 42 THEN 'Correct Answer' ELSE CASE WHEN ep.RetailOutletID IS NULL THEN '' ELSE                   
 isnull((select rol.RetailOutlet from coc_RetailOutletLanguages(NOLOCK) rol Where rol.RetailOutletID = ep.RetailOutletID AND rol.LanguageID = @LanguageID),'')END END AS Remarks                                
    ,'Guest' AS [User Type]      
, ep.Question1  
,ep.UserName 
,Case when Isnull(EP.SocialMediaID,0)<>0 then (SELECT SM.SocialMediaName FROM coc_SocialMedia (NOLOCK) SM WHERE SM.SocialMediaID = EP.SocialMediaID) else '' end AS SocialMedia
   FROM coc_ECouponParticipations(NOLOCK) ep                    
   INNER JOIN coc_ECoupons(NOLOCK) ec  ON ec.ECouponID = ep.ECouponID                   
   INNER JOIN coc_EServices(NOLOCK) es ON es.EServiceID = ec.EServiceID and (@vEServiceID IS NULL OR es.EServiceID = @vEServiceID)                   
   AND (@vCorporateID IS NULL OR es.CorporateID = @vCorporateID)                  
   INNER JOIN coc_EServiceLanguages(NOLOCK) esl ON esl.EServiceID = ec.EServiceID AND esl.LanguageID = @LanguageID                             
   Inner JOIN coc_Guests(NOLOCK) g ON g.GuestID = ep.GuestID       
left join coc_EServiceExternalBarcodes eeb (nolock)  on eeb.EServiceID = esl.EServiceID                   
   Where (CONVERT(DATE, ep.ParticipationDate) BETWEEN Convert(date,@FromDate) AND Convert(date,@ToDate) )                  
   AND (@Mobile IS NULL OR ep.ParticipationMobile = @Mobile)                   
   AND (@EmailID IS NULL OR ep.ParticipationEmailID= @EmailID)                   
   --AND (@Name IS NULL OR ep.ConsumerName LIKE '%' + @Name + '%')                  
 ORDER BY Ep.ECouponParticipationID Desc OFFSET @offset ROWS                                
      FETCH NEXT @fetch ROWS ONLY                    
                  
 END                                
 ELSE                                
 BEGIN                  
 if(@IsExport=0)                  
 begin                  
    SELECT  @RecordCount=count(ep.ECouponParticipationID) FROM coc_ECouponParticipations(NOLOCK) ep                     
       INNER JOIN coc_ECoupons(NOLOCK) ec ON ec.ECouponID = ep.ECouponID                   
    INNER JOIN coc_EServices(NOLOCK) es ON es.EServiceID = ec.EServiceID                   
    --INNER JOIN coc_EServiceLanguages(NOLOCK) esl ON esl.EServiceID = ec.EServiceID AND esl.LanguageID = @LanguageID                             
    LEFT JOIN coc_Consumers(NOLOCK) c ON c.ConsumerID = ep.ConsumerID                                
    LEFT JOIN coc_Guests(NOLOCK) g ON g.GuestID = ep.GuestID                    
    Where (CONVERT(DATE, ep.ParticipationDate,103) BETWEEN Convert(date,@FromDate) AND Convert(date,@ToDate) )                  
    --AND (@Mobile IS NULL OR ep.ParticipationMobile=@Mobile)                   
    --AND (@EmailID IS NULL OR ep.ParticipationEmailID=@EmailID)                   
    --AND (@Name IS NULL OR ep.ConsumerName LIKE '%' + @Name + '%')                  
    and (@vEServiceID IS NULL OR es.EServiceID = @vEServiceID)                   
    AND (@vCorporateID IS NULL OR es.CorporateID = @vCorporateID)                  
 end                  
     
 SELECT ROW_NUMBER() OVER (                                
   ORDER BY (                                
     SELECT 1                                
     )                                
   ) SNo                   
   ,EP.ECouponID                              
    ,ep.ECouponParticipationID                    
 ,ISNULL((select case when count(*) >0 then 'Yes' else 'No' END from coc_ConsumerExclusions Ex where (Ex.ECouponID is null or Ex.ECouponID = EP.ECouponID) and Ex.PrimaryMobile = EP.ParticipationMobile ),'No') As [Block]                       
 ,(CASE WHEN ep.IsRejected = 1 THEN 'Rejected' ELSE 'Approved' END) STATUS                  
 ,isnull(ep.ReasonForRejection, '') [Reason For Rejection]         
    ,(CASE WHEN ep.UploadImagePath IS NOT NULL THEN 'https://e-copon.com/UploadedFiles/DynamicCompetition/' + ep.UploadImagePath ELSE '' END) Photos                                
    ,(CASE WHEN ep.UploadImagePath2 IS NOT NULL THEN 'https://e-copon.com/UploadedFiles/DynamicCompetition/' + ep.UploadImagePath2 ELSE '' END) Form                                
 ,esl.EService AS [Competition Name]                  
 ,(case when @LanguageID=1 then (Select isnull(cor.CorporateName,cor.CorporateNameAR) from coc_Corporates cor (nolock) where cor.CorporateID = es.CorporateID)                   
     else (Select isnull(cor.CorporateNameAR,cor.CorporateName) from coc_Corporates cor (nolock) where cor.CorporateID = es.CorporateID) end) [Corporate Name]                  
 ,CASE WHEN c.ConsumerID IS NOT NULL THEN isnull(ep.ConsumerName,isnull(c.FullName, ''))     
     ELSE isnull(ep.ConsumerName, isnull(g.FullName, '')) END AS [Consumer Name]                   
     ,CASE WHEN c.ConsumerID IS NOT NULL THEN isnull(ep.ParticipationMobile, c.PrimaryMobile)                  
 ELSE  isnull(ep.ParticipationMobile, g.PrimaryMobile) end AS Mobile                                
    ,CASE WHEN c.ConsumerID IS NOT NULL THEN isnull(ep.ParticipationEmailID, c.EmailID)                   
 else isnull(ep.ParticipationEmailID, g.EmailID) end AS Email                      
 ,CASE WHEN c.ConsumerID IS NOT NULL THEN isnull((select cl.City from coc_CityLanguages(nolock) cl where cl.CityID = c.CityID And cl.LanguageID = @LanguageID),'')                   
    else isnull((select cl.City from coc_CityLanguages (nolock) cl where cl.CityID = g.CityID And cl.LanguageID = @LanguageID),'') end As City                   
 ,isnull(c.UserIdentityNumber, '') [ID Number]                   
    ,CONVERT(NVARCHAR(19), ep.ParticipationDate, 103) [Participation Date]                 
 ,  FORMAT (ep.ParticipationDate, 'hh:mm:ss tt') as [Participation Time]                 
                 
    ,isnull(ep.Barcode, '') Barcode                                 
    ,CASE WHEN c.ConsumerID IS NOT NULL THEN isnull(c.MembershipNumber,'') else                  
    '' end AS [Member ID]                                
    ,CASE WHEN c.ConsumerID IS NOT NULL THEN isnull((select nl.Nationality from coc_NationalityLanguages(NOLOCK) nl Where nl.NationalityID = c.NationalityID AND nl.LanguageID = @LanguageID),'')                  
 else isnull((select nl.Nationality from coc_NationalityLanguages(NOLOCK) nl Where nl.NationalityID =Convert(int, g.Nationality) AND nl.LanguageID = @LanguageID),'') end Nationality                               
,CASE WHEN c.ConsumerID IS NOT NULL THEN (CASE WHEN c.BirthDate IS NULL THEN '' ELSE convert(VARCHAR, convert(DATE, c.BirthDate)) END)       
     else (CASE WHEN g.DOB IS NULL THEN '' ELSE convert(VARCHAR, convert(DATE, g.DOB)) end) end AS DateOfBirth                                
 ,CASE WHEN c.ConsumerID IS NOT NULL THEN (CASE WHEN c.Gender = 2 THEN 'Female' WHEN c.Gender = 1 THEN 'Male' ELSE '' END)                  
    else (CASE WHEN g.Gender = 2 THEN 'Female' WHEN g.Gender = 1 THEN 'Male' ELSE '' END) end AS Gender                                
 ,CASE WHEN c.ConsumerID IS NOT NULL THEN c.IqamaNumber                  
   else '' end AS IqamaNumber   
 ,(CASE WHEN c.ConsumerID IS NOT NULL THEN c.IsActive                  
   else g.IsActive end) [Customer Status]                      
 ,CASE WHEN c.ConsumerID IS NOT NULL THEN isnull(c.IsEmailVerified,0)         
    else 0 end AS IsEmailVerified                  
 ,CASE WHEN c.ConsumerID IS NOT NULL THEN isnull(c.IsMobileVerified,0)                   
    else isnull(g.IsVerified,0) end AS IsMobileVerified                  
 ,ep.Latitude                      
 ,ep.Longitude                      
 ,ep.DistanceToRetailoutlet                      
 ,CASE WHEN c.ConsumerID IS NOT NULL THEN c.Organization                    
    else '' end AS Organization                  
 ,CASE WHEN c.ConsumerID IS NOT NULL THEN c.OccupationID                   
    else '' end As Occupation                      
 ,CASE WHEN c.ConsumerID IS NOT NULL THEN c.MaritalStatusID                  
    else '' end As MaritalStatus                      
 ,CASE WHEN c.ConsumerID IS NOT NULL THEN c.PromoCodeID                   
     else '' end As PromoCode                      
 ,CASE WHEN c.ConsumerID IS NOT NULL THEN convert(VARCHAR, convert(DATE, c.PromoCodeExpiryDate))                  
     else '' end AS PromoCodeExpiryDate                  
 , CASE WHEN c.IsDeleted=1 THEN 'True' Else 'Flase' end IsDeleted                      
    ,CASE WHEN es.CompetitionID = 42 THEN 'Correct Answer' ELSE CASE WHEN ep.RetailOutletID IS NULL THEN '' ELSE                   
 isnull((select rol.RetailOutlet from coc_RetailOutletLanguages(NOLOCK) rol Where rol.RetailOutletID = ep.RetailOutletID AND rol.LanguageID = @LanguageID),'')END END AS Remarks                                
    ,CASE WHEN c.ConsumerID IS NOT NULL THEN 'Member' WHEN g.GuestID IS NOT NULL THEN 'Guest' END AS [User Type]       
, ep.Question1  
,ep.UserName  
,Case when Isnull(EP.SocialMediaID,0)<>0 then (SELECT SM.SocialMediaName FROM coc_SocialMedia (NOLOCK) SM WHERE SM.SocialMediaID = EP.SocialMediaID) else '' end AS SocialMedia
   FROM coc_ECouponParticipations(NOLOCK) ep                    
   INNER JOIN coc_ECoupons(NOLOCK) ec  ON ec.ECouponID = ep.ECouponID                   
   INNER JOIN coc_EServices(NOLOCK) es ON es.EServiceID = ec.EServiceID                   
   INNER JOIN coc_EServiceLanguages(NOLOCK) esl ON esl.EServiceID = ec.EServiceID AND esl.LanguageID = @LanguageID                             
   LEFT JOIN coc_Consumers(NOLOCK) c ON c.ConsumerID = ep.ConsumerID                                
   LEFT JOIN coc_Guests(NOLOCK) g ON g.GuestID = ep.GuestID       
   left join coc_EServiceExternalBarcodes eeb (nolock)  on eeb.EServiceID = esl.EServiceID                      
   Where (CONVERT(DATE, ep.ParticipationDate,103) BETWEEN Convert(date,@FromDate) AND Convert(date,@ToDate))                  
   --AND (@Mobile IS NULL OR ep.ParticipationMobile=@Mobile)                   
    --AND (@EmailID IS NULL OR ep.ParticipationEmailID=@EmailID)                   
    --AND (@Name IS NULL OR ep.ConsumerName LIKE '%' + @Name + '%')                  
    and (@vEServiceID IS NULL OR es.EServiceID = @vEServiceID)                   
    AND (@vCorporateID IS NULL OR es.CorporateID = @vCorporateID)                  
 ORDER BY EP.ECouponParticipationID Desc OFFSET @offset ROWS                                
      FETCH NEXT @fetch ROWS ONLY                    
                   
                   
                   
 END                                  
                   
                              
END
GO
/****** Object:  StoredProcedure [dbo].[usp_rpt_GetCustomerParticipationsadfco]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_rpt_GetCustomerParticipationsadfco]                             
  @FromDate date=null,                            
  @ToDate date=null,                            
  @ECouponID bigint = null,            
 @vEServiceID bigint = 173,                            
 @vCorporateID bigint = null,                            
 @vMembershipId [NullCode]=NULL,                            
 @LanguageID INTEGER=1 ,                           
 @UserTypeId int=0,    
   @PageSize  int=100,          
   @RecordCount bigint output,           
  @PageIndex int=1                               
AS                             
  BEGIN                 
 declare @offset bigint,@fetch bigint;                   
  set @offset =@PageSize*(@PageIndex-1);                
  set @fetch =@PageSize;                 
 declare  @UserType nvarchar(50)=null;                  
 if(@UserTypeId =1)                                     
    set @UserType ='Member';                      
 if(@UserTypeId =2)                                     
    set @UserType ='Guest';              
   if(@FromDate is null)                          
    set @FromDate =GetDate();                          
  if(@ToDate is null)                          
    set @ToDate = dateadd(dd,+1, GetDate());                          
  if (@LanguageID is null)                          
 set @LanguageID = 1;           
          
declare  @CustomerParticipation table(SNo bigint , ConsumerID int, ECouponParticipationID bigint,          
 [Participation Date] datetime, [Member ID] nvarchar(20), [Consumer Name] nvarchar(500),Mobile nvarchar(15),                        
 Email nvarchar(250), Gender smallint ,[Social Media ID] nvarchar(100),[Social Media Type] nvarchar(50),ECouponID bigint,                         
 [Competition Name] nvarchar(500), EServiceID int, Remarks nvarchar(500),Nationality nvarchar(100) );          
          
Insert INTO @CustomerParticipation (SNo , ConsumerID ,ECouponParticipationID,[Participation Date],          
 [Member ID] , [Consumer Name],Mobile, Email,Gender,[Social Media ID],[Social Media Type],          
  ECouponID ,[Competition Name] , EServiceID , Remarks ,Nationality)          
  select  ROW_NUMBER() OVER(ORDER BY ParticipationDate desc)[S.No], ConsumerID,                        
 ECouponParticipationID, [Participation Date], [Member ID], [Consumer Name],Mobile,                        
 Email, Gender, [Social Media ID], [Social Media Type], ECouponID,                         
 [Competition Name], EServiceID, Remarks, isnull(Nationality,'') as Nationality                        
 from    --ORDER BY ConsumerID, ECouponParticipationID           
( select distinct c.ConsumerID, ep.ECouponParticipationID, CONVERT(NVARCHAR(12),                          
   ep.ParticipationDate,106) [Participation Date], c.MembershipNumber as [Member ID],                           
   case when c.ConsumerID is not null then                          
     isnull(ep.ConsumerName, concat(isnull(c.FirstName,'')+' ', isnull(CONCAT(ISNULL(c.SecondName,'')+ ' ', isnull(c.FamilyName,'')),'')))                           
    else                          
     isnull(ep.ConsumerName, concat(isnull(g.FirstName,'')+' ', isnull(CONCAT(ISNULL(g.SecondName,'')+ ' ', isnull(g.FamilyName,'')),'')))                           
    end as [Consumer Name],                           
   isnull(ep.ParticipationMobile, c.PrimaryMobile) as Mobile, isnull(ep.ParticipationEmailID, c.EmailID) as Email, c.Gender,                      
   case when c.IsFacebookUser = 'true' then c.FacebookID                           
     when c.IsTwitterUser = 'true' then c.TwitterID                           
     when c.IsGmailUser = 'true' then c.GmailID                          
     when c.IsYahooUser = 'true' then c.YahooID                          
     when c.IsOutlookUser = 'true' then c.OutlookID end as [Social Media ID],                          
   case when c.IsFacebookUser = 'true' then 'Facebook'                           
     when c.IsTwitterUser = 'true' then 'Twitter'                              when c.IsGmailUser = 'true' then 'Google'                           
     when c.IsYahooUser = 'true' then 'Yahoo'                           
     when c.IsOutlookUser = 'true' then 'Outlook' end as [Social Media Type],                           
   ec.ECouponID, esl.EService as [Competition Name], es.EServiceID ,                          
   case when es.CompetitionID = 42 then 'Correct Answer' else                          
    case when ep.RetailOutletID is null then '' else rol.RetailOutlet end end as Remarks                                      
 ,ParticipationDate                     
 ,nl.Nationality                       
    from  coc_ECouponParticipations(NOLOCK) ep                          
    inner join  coc_ECoupons(NOLOCK) ec on ec.ECouponID = ep.ECouponID                             
 inner join  coc_EServices(NOLOCK) es on es.EServiceID = ec.EServiceID                           
 inner join  coc_EServiceLanguages(NOLOCK) esl on esl.EServiceID = ec.EServiceID  and esl.LanguageID = @LanguageID                           
 left join  coc_Consumers(NOLOCK) c on c.ConsumerID = ep.ConsumerID                          
 left join  coc_Guests(NOLOCK) g on g.GuestID = ep.GuestID                          
    left join  coc_RetailOutletLanguages(NOLOCK) rol on rol.RetailOutletID= ep.RetailOutletID and rol.LanguageID = @LanguageID                         
 left join  coc_NationalityLanguages(NOLOCK) nl on nl.NationalityID=c.NationalityID and nl.LanguageID= @LanguageID                      
    where (isnull(@vEServiceID,0) = 0 or es.EServiceID = @vEServiceID)                          
    and (@vMembershipId is null or c.MembershipNumber = @vMembershipId)                          
    and CONVERT(date, ep.ParticipationDate)  between @FromDate and @ToDate                          
 and (@vCorporateID IS NULL or es.CorporateID = @vCorporateID)                          
 and (ec.ECouponID <> 2  or (ec.ECouponID = 2 and ep.RetailOutletID is not null))                          
 and len(isnull(C.PrimaryMobile, ep.ParticipationMobile)) = 14                          
 and not (g.GuestID is null and c.ConsumerID is null)                           
UNION                          
                          
  select c.ConsumerID, ep.ECouponParticipationID,  CONVERT(NVARCHAR(12),                          
   ep.ParticipationDate,106) [Participation Date], c.MembershipNumber as [Member ID],                           
   concat(isnull(c.FirstName,'')+' ', isnull(CONCAT(isnull(c.SecondName,'')+' ',isnull(c.FamilyName,'')),'')) as [Consumer Name],                           
   c.PrimaryMobile as Mobile, c.EmailID as Email, c.Gender,                        
   case when c.IsFacebookUser = 'true' then c.FacebookID                           
     when c.IsTwitterUser = 'true' then c.TwitterID                           
     when c.IsGmailUser = 'true' then c.GmailID                          
     when c.IsYahooUser = 'true' then c.YahooID                          
     when c.IsOutlookUser = 'true' then c.OutlookID end as [Social Media ID],                          
   case when c.IsFacebookUser = 'true' then 'Facebook'                           
     when c.IsTwitterUser = 'true' then 'Twitter'                           
     when c.IsGmailUser = 'true' then 'Google'                           
     when c.IsYahooUser = 'true' then 'Yahoo'                           
     when c.IsOutlookUser = 'true' then 'Outlook' end as [Social Media Type],                           
   ec.ECouponID, esl.EService as [Competition Name], es.EServiceID ,                          
   case when es.CompetitionID = 42 then 'Correct Answer' else case when ep.Reason = 'W' then  'Wrong Answer'  else 'Repeated Attempt' end end as Remarks                             
   ,ParticipationDate                     
   ,nl.Nationality                       
    from  coc_ECouponParticipationsInvalid(NOLOCK) ep                          
    inner join  coc_Consumers(NOLOCK) c on c.ConsumerID = ep.ConsumerID                          
    inner join  coc_ECoupons(NOLOCK) ec on ec.ECouponID = ep.ECouponID                             
 inner join  coc_EServices(NOLOCK) es on es.EServiceID = ec.EServiceID                           
 inner join  coc_EServiceLanguages(NOLOCK) esl on esl.EServiceID = ec.EServiceID                  
 left join  coc_NationalityLanguages(NOLOCK) nl on nl.NationalityID=c.NationalityID and nl.LanguageID= @LanguageID                      
    where (isnull(@vEServiceID,0) = 0 or es.EServiceID = @vEServiceID)                          
    and (@vMembershipId is null or c.MembershipNumber = @vMembershipId)                          
    and CONVERT(date, ep.ParticipationDate)  between CONVERT(date,@FromDate) and CONVERT(date,@ToDate)                          
 and esl.LanguageID = @LanguageID                           
 and (@vCorporateID IS NULL or es.CorporateID = @vCorporateID)                          
 and es.CompetitionID <> 45 and es.CompetitionID <> 41                  
 and len(isnull(C.PrimaryMobile, ep.ParticipationMobile)) = 14                          
)   as tbl where isnull([Consumer Name],'') <> '';          
          
select @RecordCount= count(*) from @CustomerParticipation          
            
select * from @CustomerParticipation order by SNo  OFFSET @offset ROWS                
FETCH NEXT @fetch ROWS ONLY           
            
                          
 END 

GO
/****** Object:  StoredProcedure [dbo].[usp_rpt_GetCustomerParticipationtest]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_rpt_GetCustomerParticipationtest]              
 @FromDate date=null,                            
 @ToDate date=null,                            
 @vEServiceID bigint = null,                            
 @vCorporateID bigint = null,                            
 @vMembershipId [NullCode]=NULL,                            
 @LanguageID INTEGER=1 ,                           
 @UserTypeId int=0 ,            
 @PageSize  int=100,                  
 @RecordCount bigint output,                   
 @PageIndex int=1  ,                 
 @IsExport bit = 0 ,               
 @Mobile nvarchar(100) =NULL,     
 @EmailID varchar(50)=NULL,       
 @Name nvarchar(100)=NULL                                     
AS                             
 BEGIN                   
 declare @offset bigint,@fetch bigint;                     
  set @offset =@PageSize*(@PageIndex-1);                  
  set @fetch =@PageSize;                   
 declare  @UserType nvarchar(50)=null;                   
       IF(@IsExport=1)               
   BEGIN             
 set @offset = 0;                  
 set @fetch = (SELECT Power(cast(2 as varchar),(32) -1)   from sys.types Where name = 'Int' )                    
   END          
                  
 if(@UserTypeId =1)                                       
    set @UserType ='Member';                        
 if(@UserTypeId =2)                                       
    set @UserType ='Guest';                
   if(@FromDate is null)                            
    --set @FromDate =GetDate();    
	 select top 1 @FromDate =ParticipationDate from coc_ECouponParticipations(NOLOCK) order by ParticipationDate asc;                                                      
  if(@ToDate is null)                            
    set @ToDate = dateadd(dd,+1, GetDate());                            
  if (@LanguageID is null)                            
 set @LanguageID = 1;             
            
declare  @CustomerParticipation table(SNo bigint , ConsumerID int, ECouponParticipationID bigint,            
 [Participation Date] datetime, [Member ID] nvarchar(20), [Consumer Name] nvarchar(500),Mobile nvarchar(15),                          
 Email nvarchar(250), Gender smallint ,[Social Media ID] nvarchar(100),[Social Media Type] nvarchar(50),ECouponID bigint,                           
 [Competition Name] nvarchar(500), EServiceID int, Remarks nvarchar(500),Nationality nvarchar(100) );            
            
Insert INTO @CustomerParticipation (SNo , ConsumerID ,ECouponParticipationID,[Participation Date],            
 [Member ID] , [Consumer Name],Mobile, Email,Gender,[Social Media ID],[Social Media Type],            
  ECouponID ,[Competition Name] , EServiceID , Remarks ,Nationality)            
  select  ROW_NUMBER() OVER(ORDER BY ParticipationDate desc)[S.No], ConsumerID,                          
 ECouponParticipationID, [Participation Date], [Member ID], [Consumer Name],Mobile,                          
 Email, Gender, [Social Media ID], [Social Media Type], ECouponID,                           
 [Competition Name], EServiceID, Remarks, isnull(Nationality,'') as Nationality                          
 from    --ORDER BY ConsumerID, ECouponParticipationID             
( select distinct c.ConsumerID, ep.ECouponParticipationID, CONVERT(NVARCHAR(12),                            
   ep.ParticipationDate,106) [Participation Date], c.MembershipNumber as [Member ID],                             
   case when c.ConsumerID is not null then                            
     isnull(ep.ConsumerName, concat(isnull(c.FirstName,'')+' ', isnull(CONCAT(ISNULL(c.SecondName,'')+ ' ', isnull(c.FamilyName,'')),'')))                             
    else                            
     isnull(ep.ConsumerName, concat(isnull(g.FirstName,'')+' ', isnull(CONCAT(ISNULL(g.SecondName,'')+ ' ', isnull(g.FamilyName,'')),'')))                             
    end as [Consumer Name],                             
   isnull(ep.ParticipationMobile, c.PrimaryMobile) as Mobile, isnull(ep.ParticipationEmailID, c.EmailID) as Email, c.Gender,                        
   case when c.IsFacebookUser = 'true' then c.FacebookID       
     when c.IsTwitterUser = 'true' then c.TwitterID                             
     when c.IsGmailUser = 'true' then c.GmailID                            
     when c.IsYahooUser = 'true' then c.YahooID                           
     when c.IsOutlookUser = 'true' then c.OutlookID end as [Social Media ID],        
   case when c.IsFacebookUser = 'true' then 'Facebook'                             
     when c.IsTwitterUser = 'true' then 'Twitter'                             
     when c.IsGmailUser = 'true' then 'Google'                             
     when c.IsYahooUser = 'true' then 'Yahoo'                             
     when c.IsOutlookUser = 'true' then 'Outlook' end as [Social Media Type],                             
   ec.ECouponID, esl.EService as [Competition Name], es.EServiceID ,                            
   case when es.CompetitionID = 42 then 'Correct Answer' else                            
    case when ep.RetailOutletID is null then '' else rol.RetailOutlet end end as Remarks                                        
 ,ParticipationDate                       
 ,nl.Nationality                         
    from ecoponlive.dbo.coc_ECouponParticipations(NOLOCK) ep                            
    inner join coc_ECoupons(NOLOCK) ec on ec.ECouponID = ep.ECouponID                               
 inner join coc_EServices(NOLOCK) es on es.EServiceID = ec.EServiceID                             
 inner join coc_EServiceLanguages(NOLOCK) esl on esl.EServiceID = ec.EServiceID  and esl.LanguageID = @LanguageID                             
 left join coc_Consumers(NOLOCK) c on c.ConsumerID = ep.ConsumerID                            
 left join coc_Guests(NOLOCK) g on g.GuestID = ep.GuestID                            
    left join coc_RetailOutletLanguages(NOLOCK) rol on rol.RetailOutletID= ep.RetailOutletID and rol.LanguageID = @LanguageID                           
 left join coc_NationalityLanguages(NOLOCK) nl on nl.NationalityID=c.NationalityID and nl.LanguageID= @LanguageID                        
    where (isnull(@vEServiceID,0) = 0 or es.EServiceID = @vEServiceID)                            
    and (@vMembershipId is null or c.MembershipNumber = @vMembershipId)                            
    and CONVERT(date, ep.ParticipationDate)  between @FromDate and @ToDate                            
 and (@vCorporateID IS NULL or es.CorporateID = @vCorporateID)                           
 and (ec.ECouponID <> 2  or (ec.ECouponID = 2 and ep.RetailOutletID is not null))    
  and (@Mobile is null or  ep.ParticipationMobile like'%'+@Mobile+'%' or  ep.ParticipationMobile =@Mobile )      
and (@EmailID is null or ep.ParticipationEmailID like'%'+@EmailID+'%' or ep.ParticipationEmailID = @EmailID )  
and (@Name is null or c.FirstName like'%'+@Name+'%' or c.SecondName like'%'+@Name+'%' or c.FamilyName like'%'+@Name+'%')                             
 and len(isnull(C.PrimaryMobile, ep.ParticipationMobile)) = 14                            
 and not (g.GuestID is null and c.ConsumerID is null)                             
UNION                            
                            
  select c.ConsumerID, ep.ECouponParticipationID,  CONVERT(NVARCHAR(12),                            
   ep.ParticipationDate,106) [Participation Date], c.MembershipNumber as [Member ID],                             
   concat(isnull(c.FirstName,'')+' ', isnull(CONCAT(isnull(c.SecondName,'')+' ',isnull(c.FamilyName,'')),'')) as [Consumer Name],                             
   c.PrimaryMobile as Mobile, c.EmailID as Email, c.Gender,                          
   case when c.IsFacebookUser = 'true' then c.FacebookID                             
     when c.IsTwitterUser = 'true' then c.TwitterID                             
     when c.IsGmailUser = 'true' then c.GmailID                            
     when c.IsYahooUser = 'true' then c.YahooID                            
     when c.IsOutlookUser = 'true' then c.OutlookID end as [Social Media ID],                            
   case when c.IsFacebookUser = 'true' then 'Facebook'    
     when c.IsTwitterUser = 'true' then 'Twitter'                             
     when c.IsGmailUser = 'true' then 'Google'                             
     when c.IsYahooUser = 'true' then 'Yahoo'                             
     when c.IsOutlookUser = 'true' then 'Outlook' end as [Social Media Type],                             
   ec.ECouponID, esl.EService as [Competition Name], es.EServiceID ,                            
   case when es.CompetitionID = 42 then 'Correct Answer' else case when ep.Reason = 'W' then  'Wrong Answer'  else 'Repeated Attempt' end end as Remarks                               
   ,ParticipationDate             
   ,nl.Nationality                         
    from coc_ECouponParticipationsInvalid(NOLOCK) ep                            
    inner join coc_Consumers(NOLOCK) c on c.ConsumerID = ep.ConsumerID                            
    inner join coc_ECoupons(NOLOCK) ec on ec.ECouponID = ep.ECouponID                               
 inner join coc_EServices(NOLOCK) es on es.EServiceID = ec.EServiceID                             
 inner join coc_EServiceLanguages(NOLOCK) esl on esl.EServiceID = ec.EServiceID                    
 left join coc_NationalityLanguages(NOLOCK) nl on nl.NationalityID=c.NationalityID and nl.LanguageID= @LanguageID                        
    where (isnull(@vEServiceID,0) = 0 or es.EServiceID = @vEServiceID)                            
    and (@vMembershipId is null or c.MembershipNumber = @vMembershipId)                            
    and CONVERT(date, ep.ParticipationDate)  between CONVERT(date,@FromDate) and CONVERT(date,@ToDate)  and esl.LanguageID = @LanguageID                             
 and (@vCorporateID IS NULL or es.CorporateID = @vCorporateID)   
 and es.CompetitionID <> 45 and es.CompetitionID <> 41   
   and (@Mobile is null or  ep.ParticipationMobile like'%'+@Mobile+'%' or  ep.ParticipationMobile =@Mobile )      
and (@EmailID is null or ep.ParticipationEmailID like'%'+@EmailID+'%' or ep.ParticipationEmailID = @EmailID )  
and (@Name is null or c.FirstName like'%'+@Name+'%' or c.SecondName like'%'+@Name+'%' or c.FamilyName like'%'+@Name+'%')                   
 and len(isnull(C.PrimaryMobile, ep.ParticipationMobile)) = 14      
                         
)   as tbl where isnull([Consumer Name],'') <> '';            
            
select @RecordCount= count(*) from @CustomerParticipation            
              
select SNo , ConsumerID ,ECouponParticipationID,[Participation Date],            
 [Member ID] , [Consumer Name],Mobile, Email,Gender,[Social Media ID],[Social Media Type],            
  ECouponID ,[Competition Name] , EServiceID , Remarks ,Nationality from @CustomerParticipation order by SNo  OFFSET @offset ROWS                  
FETCH NEXT @fetch ROWS ONLY             
              
                            
 END
GO
/****** Object:  StoredProcedure [dbo].[usp_rpt_GetCustomerRegistrations]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_rpt_GetCustomerRegistrations]  
  @FromDate date=null,                                                                          
  @ToDate date=null,                                                                          
  @vEServiceID bigint = null,                                                                          
  @vCorporateID bigint = null,                                                                          
  @MembershipNumber [NullCode]=NULL,                                                                         
  @LanguageID INTEGER=1,                                                                      
  @UserTypeId int =NULL,                                                             
  @UserId  bigint = 21572,                                                     
  @PageSize  int=100,                                                    
   @RecordCount bigint output ,                                                     
  @PageIndex int=1                                
  ,@Mobile nvarchar(100) =NULL                                  
 ,@EmailID varchar(50)=NULL                                 
 ,@Name nvarchar(100)=NULL                                                     
                                                        
 AS                                                                             
 BEGIN                                           
 if(@UserTypeId=0)                                          
   set @UserTypeId=null                                                    
  declare  @UserType nvarchar(50)=null;                                                    
 if(@UserTypeId =1)                                                                     
    set @UserType ='Member';                                                      
 if(@UserTypeId =2)                                                                     
    set @UserType ='Guest';                                                      
                                                     
 declare @offset int,@fetch int;                                                       
  set @offset =@PageSize*(@PageIndex-1);                                                    
  set @fetch =@PageSize;                                                     
                                                 
                                                     
                                                     
  select @RecordCount=count(*)  from dbo.vw_MembersList(NOLOCK) where (@UserTypeId is null or UserType=@UserType)                                                     
     AND(@FromDate is null or @ToDate is null or  convert(date,AddDate) between convert(date, @FromDate) and  convert(date, @ToDate))                                 
  and (@Name is null or dbo.vw_MembersList.FullName like'%'+@Name+'%' or dbo.vw_MembersList.FullName like'%'+@Name+'%' or dbo.vw_MembersList.FullName like'%'+@Name+'%')                                   
  and (@Mobile is null or  dbo.vw_MembersList.PrimaryMobile like'%'+@Mobile+'%' or  dbo.vw_MembersList.PrimaryMobile =@Mobile )                                  
  and (@EmailID is null or dbo.vw_MembersList.EmailID like'%'+@EmailID+'%' or dbo.vw_MembersList.EmailID = @EmailID )                                           
  and (@MembershipNumber is null or dbo.vw_MembersList.MembershipNumber = @MembershipNumber )                                                          
                       
 select                                                         
 row_number() over( order by UserType desc) SNO, CONVERT(NVARCHAR(20),registrationdate,103 )registrationdate,FORMAT(CONVERT(datetime, registrationtime,101), 'hh:mm:ss tt') as registrationtime,  replace(replace(MembershipNumber, CHAR(9),' '), CHAR(10),' ') as MembershipID,                
 replace(replace(replace(FullName, CHAR(9),' '), CHAR(10),' '), CHAR(13),' ') as [Name], replace(replace(PrimaryMobile, CHAR(9),' '), CHAR(10),' ') as [Mobile number], isnull(replace(replace(EmailID, CHAR(9),' '), CHAR(10),' '),'') Email, Gender,         
 DateOfBirth, Country,                                      
 City, Nationality, UserType, Occupation, JobNumber, OccupationitFollows, MaritalStatus,EntryType, ID                                                 
 from (                                                        
 SELECT * from dbo.vw_MembersList  (NOLOCK)                                                      
    where (@UserTypeId is null or UserType=@UserType)                                                     
     AND(@FromDate is null or @ToDate is null or  convert(date,AddDate) between convert(date, @FromDate) and  convert(date, @ToDate))                                 
  and (@Name is null or dbo.vw_MembersList.FullName like'%'+@Name+'%' or dbo.vw_MembersList.FullName like'%'+@Name+'%' or dbo.vw_MembersList.FullName like'%'+@Name+'%')                                   
  and (@Mobile is null or  dbo.vw_MembersList.PrimaryMobile like'%'+@Mobile+'%' or  dbo.vw_MembersList.PrimaryMobile =@Mobile )                                  
  and (@EmailID is null or dbo.vw_MembersList.EmailID like'%'+@EmailID+'%' or dbo.vw_MembersList.EmailID = @EmailID )                                           
  and (@MembershipNumber is null or dbo.vw_MembersList.MembershipNumber = @MembershipNumber )                               
  order by 1 desc OFFSET @offset ROWS                        
  FETCH NEXT @fetch ROWS ONLY                             
) as tble                                                 
                                                
                                                    
                                                   
                                               
 end
GO
/****** Object:  StoredProcedure [dbo].[usp_rpt_GetECouponParticipations]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
   CREATE PROCEDURE [dbo].[usp_rpt_GetECouponParticipations]  -- For Report      
  
  @LanguageID  int=1                           
 ,@ECouponID  BIGINT=null                     
 ,@PageSize  int=100                    
 ,@RecordCount bigint output                      
 ,@PageIndex int=1       
 ,@UserTypeId int =NULL       
 ,@CompetitionName nvarchar(100)=NULL  
 ,@Date date=NULL    
 ,@Time  time=null  
 ,@Mobile nvarchar(100) =null    
 ,@EmailID varchar(50)=NULL   
 ,@KioskID  int=null    
 AS                          
BEGIN                                
  SET NOCOUNT ON;   
 declare @offset int,@fetch int;                         
  set @offset =@PageSize*(@PageIndex-1);                      
  set @fetch =@PageSize;  
declare  @table table(Sno bigint IDENTITY(1,1),CompetitionName nvarchar(1000),ParticipationDate datetime,ParticipationTime time,
ParticipationMobile varchar(15), 
  ParticipationEmailID varchar(100),ConsumerName nvarchar(100),KioskID int, RetailOutlet nvarchar(100)); 
  insert  @table(CompetitionName,ParticipationDate,ParticipationTime,ParticipationMobile,
  ParticipationEmailID,ConsumerName,KioskID,RetailOutlet)   select ECL.Value CompetitionName,    
  convert(varchar(11),EP.ParticipationDate) ParticipationDate,    convert(varchar(11), convert(time, EP.ParticipationDate)) ParticipationTime, 
      EP.ParticipationMobile,    EP.ParticipationEmailID,   EP.ConsumerName,    EP.KioskID,    ROL.RetailOutlet 
	   from coc_ECouponParticipations(NOLOCK) EP 
inner join coc_ECouponLanguages(NOLOCK) ECL ON ECL.ECouponID= EP.ECouponID and ECL.LanguageID= 1
   inner join coc_RetailOutletLanguages(NOLOCK) ROL ON ROL.RetailOutletID= EP.RetailOutletID and ROL.LanguageID= 1                      
   where (@CompetitionName is null or ECL.Value=@CompetitionName )  
    and (@EmailID is null or EP.ParticipationEmailID = @EmailID)                        
       and (@KioskID is null or EP.KioskID = @KioskID)   
	        and (@Mobile is null or EP.ParticipationMobile = @Mobile)    
			  and (@Date is null or convert(date,EP.ParticipationDate)>=convert(date,@Date) )  
			     and (@Time is null or CONVERT(varchar(15), CAST(EP.ParticipationDate AS TIME) ,100)=CONVERT(varchar(15), CAST(@Time AS TIME) ,100))        
     
select * from  @table  order by SNo asc    OFFSET @offset ROWS                      
FETCH NEXT @fetch ROWS ONLY  
select @RecordCount= count(*)from @table      
  
 END  
  
GO
/****** Object:  StoredProcedure [dbo].[usp_rpt_GetEndorsements]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_rpt_GetEndorsements] -- For Report          
  @LanguageID int           = 1          
, @ECouponID BIGINT         = NULL          
, @DrawID BIGINT            = null          
, @DrawDate nvarchar(20)    = null    
, @FromDate date   =null                                                    
, @ToDate date    =null        
, @PageSize int             = 100          
, @RecordCount bigint        out          
, @PageIndex int            = 1          
, @UserTypeId int            =NULL          
, @Name nvarchar(100)       = NULL          
, @EmailID varchar(50)      = NULL          
, @PrimaryMobile varchar(15)= NULL        
, @MembershipNumber nvarchar(100) =NULL         
, @IqamaNumber varchar(20)  = NULL          
, @CorporateID int          = NULL     
, @EndorsementDate  datetime =null       
          
AS          
BEGIN          
 SET NOCOUNT ON;          
 declare @offset int          
 ,       @fetch  int;          
 set @offset =@PageSize*(@PageIndex-1);          
 set @fetch =@PageSize;          
 declare @CustomerParticipation table ( SNo                bigint          
 ,                                      [Consumer Name]    nvarchar(500)          
 ,                                      [Competition Name] nvarchar(500)          
 ,                                      [Draw Name]        nvarchar(500)          
 ,                                      Mobile             nvarchar(15)          
 ,                                      Email              nvarchar(250)          
 ,                                      Nationality        nvarchar(100)          
 ,                                      City               nvarchar(100)          
 ,                                      [Mobile Verified]  nvarchar(100)          
 ,                                      [Email Verified]   nvarchar(100)          
 ,                                      MembershipNumber   nvarchar(50)          
 ,                                      IqamaNumber        nvarchar(50)          
 ,                                      CreatedDate        nvarchar(500) );          
          
 Insert INTO @CustomerParticipation ( SNo, [Consumer Name], [Competition Name], [Draw Name], Mobile, Email, Nationality, City, [Mobile Verified], [Email Verified], MembershipNumber, IqamaNumber, CreatedDate )          
          
 SELECT [ID]                                                                                                          SNo          
 ,      concat(isnull(e.FirstName,'')+' ', isnull(CONCAT(isnull(e.SecondName,'')+' ',isnull(e.FamilyName,'')),'')) as [Name]          
 ,      esl.EService                                                                                               as [Competion Name]          
 ,      edl.Value                                                                                                  as [Draw Name]          
 ,      e.PrimaryMobile                                                                                                     
 ,      e.EmailID                                                                                                           
 ,      nl.Nationality                                                                                                      
 ,      cl.City                                                                                                       [City]          
 ,      (case when e.IsMobileVerified = 1 then 'Yes'          
                                          else 'No' end )                                                          as [Mobile Verified]          
 ,      (case when e.IsEmailVerified = 1 then 'Yes'          
                                         else 'No' end )                                                           as [Email Verified]          
 ,      e.MembershipNumber                                                                                                  
 ,      e.IqamaNumber                                    
 ,      e.CreatedDate                                                                                                       
 --,ed.Location as [Draw Place]          
 --,[ConsumerID]          
 FROM       coc_Endorsements(NOLOCK)         e            
 inner join  coc_NationalityLanguages(NOLOCK) nl  on nl.NationalityID=e.NationalityID and nl.LanguageID= @LanguageID          
 left join  coc_Consumers(NOLOCK)            c   on e.ConsumerID = c.ConsumerID          
 inner join coc_ECouponDraw(NOLOCK)          ed  on ed.ECouponDrawID = e.DrawID          
 inner join coc_ECouponDrawLanguages(NOLOCK) edl on edl.ECouponDrawID = ed.ECouponDrawID and edl.LanguageID =@LanguageID and edl.ResourceKey = 'Name'          
 inner join coc_ECoupons(NOLOCK)             ec  on ec.ECouponID= ed.ECouponID          
 inner join coc_EServices(NOLOCK)            es  on es.EServiceID= ec.EServiceID          
 inner join coc_EServiceLanguages(NOLOCK)    esl on esl.EServiceID= ec.EServiceID and esl.LanguageID= @LanguageID          
 inner join  coc_CityLanguages(NOLOCK)        cl  on cl.CityID = e.CityID and cl.LanguageID =@LanguageID          
          
 where (@Name is null or e.FirstName = @Name or e.SecondName=@Name or e.SecondName=@Name)          
  and (@EmailID is null or e.EmailID = @EmailID)          
  and (@PrimaryMobile is null or e.PrimaryMobile=@PrimaryMobile)       
  and (@MembershipNumber is null or  c.MembershipNumber=@MembershipNumber )          
  and (@IqamaNumber is null or e.IqamaNumber=@IqamaNumber)          
  and (@ECouponID is null or ec.ECouponID=@ECouponID)          
  and (@CorporateID is null or es.CorporateID=@CorporateID)      
  and (@FromDate is null or @ToDate is null or  convert(date,e.CreatedDate) between convert(date, @FromDate) and  convert(date, @ToDate))  
  --and (@StartDate is null or Convert(date,e.CreatedDate)=Convert(date,@StartDate))              
 select @RecordCount= count(*)          
 from @CustomerParticipation   
   where (@FromDate is null or @ToDate is null or  convert(date,CreatedDate) between convert(date, @FromDate) and  convert(date, @ToDate) )                                            
 select *          
 from @CustomerParticipation          
 order by 1 desc OFFSET @offset ROWS          
 FETCH NEXT @fetch ROWS ONLY          
          
END   
GO
/****** Object:  StoredProcedure [dbo].[usp_rpt_GetEservice]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_rpt_GetEservice]          
 @EServiceID INTEGER=NULL,          
 @CorporateID INTEGER=NULL,          
 @LanguageID INTEGER=1          
AS          
 SET NOCOUNT ON      
 if(@CorporateID=0)    
   set @CorporateID=null    
  SELECT EL.EServiceID as value,EL.EService+' - '+ES.ServiceNumber as text         
  FROM  [coc_EServiceLanguages]EL (NOLOCK)           
  LEFT JOIN [coc_EServices]ES(NOLOCK) ON ES.EServiceID=El.EServiceID           
  WHERE (@EServiceID IS NULL OR EL.EServiceID=@EServiceID AND ES.ServiceSubTypeID=63)            
   AND(@CorpoRateID IS NULL OR ES.CorporateID=@CorporateID)          
   AND(@LanguageID IS NULL OR EL.LanguageID=@LanguageID)    order by   EL.EServiceID desc    
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[usp_rpt_GetEVoucherName]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_rpt_GetEVoucherName] @CorporateID INTEGER =NULL
,                                        @LanguageID INTEGER = 1
AS
BEGIN
	SET NOCOUNT ON

	select distinct (EVoucherID)  as [value]
	,               ResourceValue as Text
	from [coc_EVoucherLanguages] (NOLOCK)
	where 1=1 AND resourcekey = 'VoucherName'
		and LanguageID=@LanguageID

END
GO
/****** Object:  StoredProcedure [dbo].[usp_rpt_GetUploadParticipation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
        
CREATE PROCEDURE [dbo].[usp_rpt_GetUploadParticipation]  -- For Report                    
  @LanguageID  int=1                                                                                         
 ,@ECouponID  BIGINT=null                                                                                 
 ,@FromDate date=  null                                                  
 ,@ToDate date=  null                                                                                   
 ,@PageSize  int=100                                                                                  
 ,@RecordCount bigint   output
 ,@PageIndex int=1                                                                    
AS                                                                                          
BEGIN  
  if isnull(@ECouponID,0)=0
      return;
  SET NOCOUNT ON;                                                                                
   declare @offset int,@fetch int;                                                                                       
  set @offset =@PageSize*(@PageIndex-1);                                                                                    
  set @fetch =@PageSize;                                                                            
                                                                                   
                                                                          
  declare  @GetUploadReportData table(SNo bigint IDENTITY(1,1) PRIMARY KEY,EService Nvarchar(200),UploadDate Date, Uploaded int,        
 CompletedParticipations int, Pending int, Cancelled int)                                          
                                                                   
  insert into @GetUploadReportData                             
                      
 select ESL.EService, cast(UploadDate as date) UploadDate, count(*) Uploaded,         
sum(case when UP.ParticipantAdded is null then 0 else 1 end) [Completed Participations],         
sum(case when UP.Status is null then 1 else 0 end) Pending, sum(case when UP.Status is not null then 1 else 0 end) Cancelled         
from UploadParticipations as UP         
inner join coc_ECoupons EC ON EC.ECouponID= UP.ECouponID         
inner join coc_EServices ES ON ES.EServiceID= EC.EServiceID        
inner join coc_EServiceLanguages ESL ON ESL.EServiceID= ES.EServiceID and ESL.LanguageID= 1        
where (@ECouponID is null or EC.ECouponID =@ECouponID)      
and (@FromDate is null or @ToDate is null or  up.UploadDate between @FromDate and  @ToDate)                                                                   
group by ESL.EService, cast(UploadDate as date)        
                                         
               
 select  SNo, EService,format(UploadDate,'dd/MM/yyyy') as UploadDate,Uploaded,CompletedParticipations,Pending,Cancelled                                                                       
  from  @GetUploadReportData                                  
               
                
                                                   
    order by 1 desc    OFFSET @offset ROWS                                                                                    
FETCH NEXT @fetch ROWS ONLY                                                                                                                           
                      
select @RecordCount =count(*) from @GetUploadReportData                                                    
        where (@FromDate is null or @ToDate is null or  convert(date,UploadDate,103) between @FromDate and  @ToDate )                                                                     
                                                                                    
                                                                                              
END            
         
                            
                                 
                                     
                                     
                                        
                                          
                                            
                                              
                                               
                                                  
    
GO
/****** Object:  StoredProcedure [dbo].[usp_rpt_GetVoucherdistributionandusageReport]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_rpt_GetVoucherdistributionandusageReport] @LanguageID INTEGER  = null
,                                                                     @Evoucherid bigint    =null
,                                                                     @FromDate date       = null
,                                                                     @Mobile nvarchar(100) =NULL
,                                                                     @ToDate date         = null
,                                                                     @Name nvarchar(100)  = null
,                                                                     @PageSize int        = 100
,                                                                     @PageIndex int       = 1
,                                                                     @RecordCount bigint  = null output
as
begin
	declare @offset bigint
	,       @fetch  bigint;
	set @offset =@PageSize*(@PageIndex-1);
	set @fetch =@PageSize;
	if (@LanguageID is null)
		set @LanguageID = 1;
	declare @Voucherdistribution table ( SNo           bigint
	,                                    FirstName     nvarchar(100)
	,                                    SecondName    nvarchar(100)
	,                                    FamilyName    nvarchar(100)
	,                                    PrimaryMobile nvarchar(100)
	,                                    VoucherName   nvarchar(100)
	,                                    UsedDate      nvarchar(100) )
	insert into @Voucherdistribution ( SNo, FirstName, SecondName, FamilyName, PrimaryMobile, VoucherName, UsedDate )
	select ROW_NUMBER() OVER(ORDER BY ESL.EService desc)                                  [S.No]
	,      C.FirstName                                                                    
	,      C.SecondName                                                                   
	,      C.FamilyName                                                                   
	,      C.PrimaryMobile                                                                
	,      ESL.EService                                                                   
	,      case when ESB.UsedDate is null then 'Not Used'
	                                      else CONVERT(NVARCHAR(12),ESB.UsedDate ,106) end
	from       coc_EServiceBarcodes(NOLOCK)  ESB
	Inner join coc_Notifications(NOLOCK)     N   On N.NotificationID= ESB.NotificationID
	inner join coc_EServiceLanguages(NOLOCK) ESL ON ESL.EServiceID= N.EServiceID and ESL.LanguageID = 1
	inner join coc_Consumers(NOLOCK)         C   on C.ConsumerID= ESB.ConsumerID
	where EVoucherID is not null or EVoucherID=@Evoucherid --ConsumerID= 80 and
		and ( ESB.UsedDate is null or (CONVERT(date, ESB.UsedDate) >= CONVERT(date,@FromDate) and CONVERT(date, ESB.UsedDate)<=CONVERT(date,@ToDate )))
		and (@Mobile is null or C.PrimaryMobile like '% @Mobile %')
	order by ESB.EServiceBarcodeID desc
	select @RecordCount= count(*)
	from @Voucherdistribution

	select SNo
	,      FirstName
	,      SecondName
	,      FamilyName
	,      PrimaryMobile
	,      VoucherName
	,      UsedDate

	from @Voucherdistribution
	order by SNo OFFSET @offset ROWS
	FETCH NEXT @fetch ROWS ONLY


END
GO
/****** Object:  StoredProcedure [dbo].[usp_rpt_UserType]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[usp_rpt_UserType]    
        
@CorporateID INTEGER =NULL ,  
@LanguageID INTEGER=1     
as      
Begin      
Create Table #Usertype(UserTypeId int, UserType nvarchar(20))      
      
Insert into #Usertype Values(1, 'Consumer')      
Insert into #Usertype Values(2, 'Guest')      
      
Select  UserTypeId as [value],UserType as [text] from #Usertype      
End 
GO
/****** Object:  StoredProcedure [dbo].[usp_SaveBrandBuzz]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_SaveBrandBuzz] 
(
  @CorporateID INTEGER  
 ,@ECouponID BIGINT  
 ,@CustomerName NVARCHAR(100)  
 ,@Mobile NVARCHAR(15)  
 ,@Email NVARCHAR(100)  
 ,@ConsumerAge integer
 ,@Gender int
 ,@MaritalStatus int
 ,@EducationQualification int
 ,@Restaurant int  
 ,@InvoiceAmount DECIMAL(18, 0)  
 ,@InvoiceNumber NVARCHAR(50)  
 ,@ReturnValue NVARCHAR(500) OUTPUT  
 ,@ReturnMessage NVARCHAR(500) OUTPUT  
 )
AS  
BEGIN  
 BEGIN TRY  
  SELECT @ReturnValue = ''  
  
  SELECT @ReturnMessage = 'Success'  
  if ISNULL(@CorporateID,0) = 0  
   select @CorporateID = 9  
  DECLARE @guestID INTEGER;  
  DECLARE @ECouponPrizeID INTEGER;  
  DECLARE @PrizeValue VARCHAR(100);  
  DECLARE @NotificationID INTEGER;  
  DECLARE @GiftCount INTEGER = 0;  
  DECLARE @ECouponParticipationID INTEGER;  
  
  SELECT @GiftCount = count(coc_ECouponWinners.ECouponPrizeID)  
  FROM coc_ECouponWinners(NOLOCK)  
  WHERE ecouponprizeid IN (  
    SELECT DISTINCT coc_ECouponPrizes.ECouponPrizeID  
    FROM coc_ECouponPrizes  (NOLOCK)
    JOIN coc_ECouponPrizesLanguages(NOLOCK) ON coc_ECouponPrizesLanguages.ECouponPrizeID = coc_ECouponPrizes.ECouponPrizeID  
    WHERE coc_ECouponPrizesLanguages.ResourceKey = 'Name'  
     AND coc_ECouponPrizes.ECouponID = @ECouponID       
    )  
   AND CAST(DATEADD(hh,-3,drawdatetime) AS DATE) = CAST(DATEADD(hh,-3,getdate()) AS DATE)  
  

   Declare @TempData table(ECouponPrizeID int ,Value nvarchar(100),Category nvarchar(100));
  Insert into @TempData
   SELECT distinct coc_ECouponWinners.ECouponPrizeID ,coc_ECouponPrizesLanguages.Value,coc_ECouponPrizes.Category FROM coc_ECouponWinners(NOLOCK)  
   join coc_ECouponPrizes(NOLOCK) on coc_ECouponPrizes.ECouponPrizeID = coc_ECouponWinners.ECouponPrizeID
   join coc_ECouponPrizesLanguages(NOLOCK) ON coc_ECouponPrizesLanguages.ECouponPrizeID = coc_ECouponPrizes.ECouponPrizeID  
     WHERE coc_ECouponWinners.ecouponprizeid  IN (  SELECT   coc_ECouponPrizes.ECouponPrizeID  FROM coc_ECouponPrizes(NOLOCK)  
       JOIN coc_ECouponPrizesLanguages(NOLOCK) ON coc_ECouponPrizesLanguages.ECouponPrizeID = coc_ECouponPrizes.ECouponPrizeID  
       WHERE coc_ECouponPrizesLanguages.ResourceKey = 'Name'  AND coc_ECouponPrizes.ECouponID = @ECouponID and coc_ECouponPrizesLanguages.LanguageID= 1 and coc_ECouponPrizes.Category = 'A')  
	   and coc_ECouponPrizesLanguages.LanguageID = 1
	  AND   CAST(DATEADD(hh,-3,coc_ECouponWinners.drawdatetime) AS DATE)   =  CAST(DATEADD(hh,-3,getdate()) AS DATE) 
 


  /*logic to get barcode*/  
  DECLARE @BarCodes TABLE (  
   EServiceBarcodeID INTEGER  
   ,AsignedMoile [Mobile]  
   ,Barcode [NullDescription]  
   ,IsUsed BIT  
   );  
  
  SELECT @NotificationID = NotificationID  
  FROM coc_Notifications(NOLOCK) N  
  INNER JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID = N.EServiceID  
  INNER JOIN coc_ECoupons(NOLOCK) EC ON EC.EServiceID = ES.EServiceID  
   AND ec.ECouponID = @ECouponID  
  
  INSERT INTO @BarCodes (  
   EServiceBarcodeID  
   ,AsignedMoile  
   ,Barcode  
   ,IsUsed  
   )  
  SELECT TOP 1 BC.EServiceBarcodeID  
   ,@Mobile  
   ,BC.Barcode  
   ,1  
  FROM coc_EServiceBarcodes(NOLOCK) BC  
  WHERE BC.IsUsed = 0  
   AND NotificationID = @NotificationID  
  
  --AND BC.NotificationID = @NotificationID;  
  /*logic to get barcode*/  
  /*logic to get prize from coc_ECouponPrizes*/  
   
   SELECT TOP 1 @ECouponPrizeID = coc_ECouponPrizes.ECouponPrizeID  
    ,@PrizeValue = coc_ECouponPrizesLanguages.Value  
   FROM coc_ECouponPrizes (NOLOCK) 
   JOIN coc_ECouponPrizesLanguages(NOLOCK) ON coc_ECouponPrizesLanguages.ECouponPrizeID = coc_ECouponPrizes.ECouponPrizeID  
   WHERE coc_ECouponPrizesLanguages.ResourceKey = 'Name'  
    AND coc_ECouponPrizes.ECouponID = @ECouponID      
    --AND coc_ECouponPrizes.EcouponPrizeID NOT IN (  
    -- SELECT coc_ECouponWinners.ECouponPrizeID  
    -- FROM coc_ECouponWinners  
    -- WHERE ECouponPrizeID IN (  
    --   SELECT DISTINCT coc_ECouponPrizes.ECouponPrizeID  
    --   FROM coc_ECouponPrizes  
    --   JOIN coc_ECouponPrizesLanguages ON coc_ECouponPrizesLanguages.ECouponPrizeID = coc_ECouponPrizes.ECouponPrizeID  
    --   WHERE coc_ECouponPrizesLanguages.ResourceKey = 'Name'  
    --    AND coc_ECouponPrizes.ECouponID = @ECouponID          
    --   )  
    --   AND   CAST(DATEADD(hh,-3,coc_ECouponWinners.drawdatetime) AS DATE)   
    --    = CAST(DATEADD(hh,-3,getdate()) AS DATE)      
    -- )  
	 
	 and coc_ECouponPrizes.EcouponPrizeID NOT IN (select ECouponPrizeID from @TempData)   ORDER BY NEWID();     
  
  
  IF (isnull(@ECouponPrizeID, 0) = 0)  
  BEGIN  
   SET @ReturnValue = 'UnSuccess';  
   SET @ReturnMessage = 'Today quota over'  
  
   SELECT ECouponPrizeID = 0  
    ,PrizeValue = ''  
    ,Barcode = ''  
    ,@GiftCount GiftCount  
  
   PRINT ('-- end --')  
  
   RETURN;  
  END  
  
  BEGIN TRANSACTION savegift  
  
  /*logic to get prize from coc_ECouponPrizes*/  
  SELECT @guestID = GuestID  
  FROM coc_Guests (NOLOCK) 
  WHERE PrimaryMobile = @Mobile  
  
  IF @guestID IS NULL  
  BEGIN -- if begin  
   ------------ INSERT coc_Guests ------------------  
   INSERT INTO coc_Guests (  
    FullName  
    ,PrimaryMobile  
    ,EmailID  
    ,IsActive  
    ,AddDate  
	,Age 
	,Gender 
	,MaritalStatus 
	,EducationQualification 
    )  
   VALUES (  
    @CustomerName  
    ,@Mobile  
    ,@Email  
    ,1  
    ,GETDATE()  
	,@ConsumerAge 
	,@Gender 
	,@MaritalStatus 
	,@EducationQualification 
    )  
  
   SET @guestID = SCOPE_IDENTITY();  
  
   
  END -- end if  

ELSE  
 BEGIN -- else begin   
	update coc_Guests   set
     FullName  =  @CustomerName  
    ,PrimaryMobile  = @Mobile  
    ,EmailID  = @Email           
	,Age = @ConsumerAge
	,Gender = @Gender 
	,MaritalStatus  = @MaritalStatus
	,EducationQualification = @EducationQualification 
    where GuestID = @guestID;
 END -- else end  
  
  ------------ INSERT coc_ECouponParticipations ------------------  
   INSERT INTO coc_ECouponParticipations (  
    ECouponID  
    ,ParticipationDate  
    ,Barcode  
    ,ParticipationMobile  
    ,ParticipationEmailID  
    ,GuestID      
    ,ConsumerName  
    ,InvoiceAmount  
    ,InvoiceNumber  
    ,CorporateID  
	,Restaurant
    )  
   VALUES (  
    @ECouponID  
    ,GETDATE()  
    ,(  
     SELECT Barcode  
     FROM @BarCodes  
     )  
    ,@Mobile  
    ,@Email  
    ,@guestID      
    ,@CustomerName  
    ,@InvoiceAmount  
    ,@InvoiceNumber  
    ,@CorporateID  
	,@Restaurant
    )  
  SET @ECouponParticipationID = SCOPE_IDENTITY();  
  
   UPDATE EB  
   SET GuestID = @GuestID  
    ,AsignedMoile = @Mobile  
    ,AsignedEmailID = @Email  
    ,IsUsed = 1  
    ,UsedDate = GETDATE()  
   FROM coc_EServiceBarcodes EB  
   WHERE EServiceBarcodeID IN (  
     SELECT EServiceBarcodeID  
     FROM @BarCodes  
     )  
  
   ------------ INSERT coc_ECouponWinners ------------------  
   INSERT INTO coc_ECouponWinners (  
    ECouponPrizeID  
    ,MobileNumber  
    ,ConsumerName  
    ,Email  
    ,DrawDateTime  
    ,GuestID  
    ,ECouponParticipationID  
    )  
   VALUES (  
    @ECouponPrizeID  
    ,@Mobile  
    ,@CustomerName  
    ,@Email  
    ,GETDATE()  
    ,@guestID  
    ,@ECouponParticipationID  
    )  
    ------------ INSERT DONE ------------------  

  SELECT @ECouponPrizeID ECouponPrizeID  
   ,@PrizeValue PrizeValue  
   ,(  
    SELECT Barcode  
    FROM @BarCodes  
    ) AS Barcode  
   ,(@GiftCount + 1) GiftCount  
  
  COMMIT TRANSACTION savegift  
 END TRY  
  
 BEGIN CATCH  
  ROLLBACK TRANSACTION savegift; 
  SET @ReturnValue = 'UnSuccess';     
  set @ReturnMessage = ERROR_MESSAGE();  
 END CATCH  
END
GO
/****** Object:  StoredProcedure [dbo].[usp_savecompetitioncontactus]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[usp_savecompetitioncontactus]
(
@ECouponID int
,@Name nvarchar(50)
,@Email nvarchar(50)
,@Subject nvarchar(150)
,@Message nvarchar(MAX)

)
as
begin


INSERT INTO coc_CompetitionContactUs
           ([ECouponID]
           ,[Name]
           ,[Email]
           ,[Subject]
           ,[Message]
           ,[CreatedOn])
     select
           @ECouponID,
           @Name, 
           @Email, 
           @Subject,
           @Message,
           getdate()


end
GO
/****** Object:  StoredProcedure [dbo].[usp_SaveEcouponDrawConfig]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 CREATE PROCEDURE [dbo].[usp_SaveEcouponDrawConfig] 
         @RetailXml XML=null
 ,@PrizeXml XML=null
 ,@DrawXml  XML=null
 ,@EcouponID INTEGER          
 ,@DrawID INTEGER=0          
 , @ReturnValue NVARCHAR(50)  output         
AS          
BEGIN          
 SET NOCOUNT ON;          
 BEGIN TRANSACTION SaveEcouponDrawConfig          
 BEGIN TRY          
  BEGIN          
   DECLARE @DrawPrizes TABLE          
   (           
   PrizeID INTEGER,          
   PrizeCount INTEGER,
   DraWName [NULLDescription]             
   )          
   DECLARE @DrawOutlets TABLE          
   (          
   RetailOutletID INTEGER,    
   nameEng [NULLDescription]       
   )             
   DECLARE  @EcouponDraw TABLE          
   (          
   nameEng [NULLDescription]          
   ,nameAr [NullDescription]          
   ,location [NullDescription]          
   ,locationURL [NullDescription]          
   ,drawdate DATETIME          
   ,descriptionEng [NullDescription]          
   ,descriptionAr [NullDescription]          
   ,latitude [NullCode]          
   ,longitude [NullCode]          
   )          
              
   INSERT INTO @DrawOutlets(RetailOutletID,nameEng)          
   SELECT drawUtlet.value('(RetailOutletID[1])', 'INTEGER'),  
   drawUtlet.value('(nameEng[1])', '[Description]')         
   FROM @RetailXml.nodes('/ECoupon/RetailOutlet') AS Data(drawUtlet)          
          
   INSERT INTO @DrawPrizes(PrizeID,PrizeCount,DraWName)          
   SELECT drawPrize.value('(PrizeID[1])', '[INTEGER]'),          
   drawPrize.value('(PrizeCount[1])', '[INTEGER]') ,     
   drawPrize.value('(nameEng[1])', '[NullDescription]')          
   FROM @PrizeXml.nodes('/ECoupon/Prize') AS Data(drawPrize)          
          
   INSERT INTO @EcouponDraw(nameEng,nameAr,location, locationURL, drawdate,descriptionEng,descriptionAr,latitude,longitude)          
   SELECT draw.value('(nameEng[1])', '[Description]'),          
   draw.value('(nameAr[1])', '[Description]'),          
   draw.value('(location[1])', '[Remark]'),          
   draw.value('(locationURL[1])', '[NullDescription]'),         
   convert(datetime ,draw.value('(drawdate[1])','[NullDescription]')),        
   draw.value('(descriptionEng[1])', '[NullDescription]'),          
   draw.value('(descriptionAr[1])', '[NullDescription]'),          
   draw.value('(latitude[1])', '[NullCode]'),          
   draw.value('(longitude[1])', '[NullCode]')          
   FROM @DrawXml.nodes('/ECoupon/Draw') AS Data(draw)          
   select * from 	@DrawOutlets      
   select * from 	@DrawPrizes      
   select * from 	@EcouponDraw      

   DECLARE @LanguageID INTEGER           
                 
     print('   IF(@DrawID = 0)   ')     
    INSERT INTO coc_ECouponDraw(ECouponID,DrawDate,Location,Latitude,Longitude)          
    SELECT @EcouponID,ED.drawdate,ED.location,ED.latitude,ED.longitude          
    FROM @EcouponDraw ED        
	       
   print('   before starting cursor   ')       
DECLARE @ECouponDrawID int; 
DECLARE ECouponDraw_cursor1 CURSOR FOR     
SELECT  ECouponDrawID from coc_ECouponDraw(NOLOCK) where ECouponID=@EcouponID;  
OPEN ECouponDraw_cursor1    
  
  --select * from @EcouponDraw

FETCH NEXT FROM ECouponDraw_cursor1     
INTO @ECouponDrawID   
  declare @loopindex int = 0;
WHILE @@FETCH_STATUS = 0    
BEGIN   
declare @EnglishgName nvarchar(100);

    print('print in fetch'+convert(varchar,@ECouponDrawID)); 

    INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,ResourceKey,Value,LanguageID)          
    SELECT @ECouponDrawID,'Name',ED.nameEng,1           
    FROM @EcouponDraw ED order by  ED.nameEng offset @loopindex rows fetch next 1 rows only        
          
    INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,ResourceKey,Value,LanguageID)          
    SELECT  @ECouponDrawID,'Name',ED.nameAr,2          
    FROM @EcouponDraw ED   order by  ED.nameAr offset @loopindex rows fetch next 1 rows only     

    INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,ResourceKey,Value,LanguageID)          
    SELECT @ECouponDrawID,'DrawDetail',ED.descriptionEng,1           
    FROM @EcouponDraw ED   order by  ED.descriptionEng offset @loopindex rows fetch next 1 rows only         
          
    INSERT INTO coc_ECouponDrawLanguages(ECouponDrawID,ResourceKey,Value,LanguageID)          
    SELECT @ECouponDrawID,'DrawDetail',ED.descriptionAr,2          
    FROM @EcouponDraw ED order by  ED.descriptionAr offset @loopindex rows fetch next 1 rows only            

    --INSERT INTO coc_ECouponDrawRetailOutlets(ECoponDrawID,RetailOutletID)          
    --SELECT @ECouponDrawID,DO.RetailOutletID           
    --FROM @DrawOutlets DO  where DO.nameEng=(SELECT ED.nameEng FROM @EcouponDraw ED order by  ED.nameEng offset @loopindex rows fetch next 1 rows only) 
    

    INSERT INTO coc_ECouponDrawPrizes(ECouponDrawID,ECouponPrizeID,Frequency)          
    SELECT @ECouponDrawID,DP.PrizeID,DP.PrizeCount           
    FROM @DrawPrizes DP where DP.DraWName=(SELECT ED.nameEng FROM @EcouponDraw ED order by  ED.nameEng offset @loopindex rows fetch next 1 rows only)                 
          
      
	set @loopindex = @loopindex+1; 

    FETCH NEXT FROM ECouponDraw_cursor1     
INTO @ECouponDrawID 
      print('after starting cursor')    
END     
CLOSE ECouponDraw_cursor1;    
DEALLOCATE ECouponDraw_cursor1; 
    print('out of the cursor    ')    
   END               
  COMMIT TRANSACTION SaveEcouponDrawConfig          
  SET @ReturnValue=''          
 END TRY          
 BEGIN CATCH          
  ROLLBACK TRANSACTION SaveEcouponDrawConfig          
  SELECT ERROR_LINE()          
  SELECT ERROR_MESSAGE()          
  SET @ReturnValue='-505'          
 END CATCH          
 SET NOCOUNT OFF          
END   


--------------------------------------------------------------------------------------------------------------------------------------------


GO
/****** Object:  StoredProcedure [dbo].[usp_SaveEmailSchedule]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_SaveEmailSchedule]    
   @ConsumerID int  
  ,@GuestID int    
  ,@EmailBody nvarchar(max)    
  ,@EmailID nvarchar(200)    
 ,@SPStatus INT = NULL OUT      
 ,@SPReturnMessage NVARCHAR(500) = NULL OUT      
AS      
SET NOCOUNT ON      
BEGIN TRY      
 SET @SPStatus = 0;      
 SET @SPReturnMessage = '';      
 insert into coc_EmailSchedule(ConsumerID,GuestID,EmailBody,EmailID,IsProcessed,CreatedDate,NoOfTriesAttempted)    
   select @ConsumerID,@GuestID,@EmailBody,@EmailID,0,getdate(),0    
    
END TRY      
BEGIN CATCH      
 SET @SPStatus = 1;      
 SET @SPReturnMessage = ERROR_MESSAGE();      
END CATCH 
GO
/****** Object:  StoredProcedure [dbo].[USP_SaveEndorsement]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_SaveEndorsement] (           
   @DrawID bigint                             
  ,@FirstName NVARCHAR(200)=NULL                              
 ,@SecondName NVARCHAR(200)=NULL                           
 ,@FamilyName NVARCHAR(200)=NULL                             
 ,@PrimaryMobile VARCHAR(15)=NULL                              
 ,@EmailID VARCHAR(100)=NULL                              
 ,@Gender INT                  
 ,@NationalityID INT=NULL                         
 ,@CountryID INT=NULL                          
 ,@CityID INT=NULL                          
 ,@MembershipNumber NVARCHAR(20) = NULL                
 ,@IqamaNumber NVARCHAR(20) = NULL        
 ,@DeviceToken NVARCHAR(250)        
 ,@ConsumerID int=null               
 ,@MobileOtp INT OUT        
 ,@EmailOtp int OUT                
 ,@EndorsementID bigint OUT                
 ,@ErrorMessage varchar(500) OUT        
 ,@RequestMobileOtp bit OUT        
 ,@RequestEmailOtp bit OUT  
 ,@ResendOtpTime int OUT              
 )                              
AS                              
BEGIN                   
  DECLARE @Upper INTEGER = 100000                  
 DECLARE @Lower INTEGER = 999999                  
set @EndorsementID =0                             
set @ErrorMessage ='0'                
  set @MobileOtp=0         
  set @EmailOtp=0           
   set @RequestMobileOtp=1        
   set @RequestEmailOtp=1   
   set  @ResendOtpTime=10         
                             
 BEGIN TRY             
      
 IF (@FirstName is null or @FirstName='')    
 begin   
    set @ErrorMessage ='FirstNameRequired'              
 end    
 else if(@SecondName is null or @SecondName='')    
 begin   
    set @ErrorMessage ='SecondNameRequired'    
 end     
 else if(@PrimaryMobile is null or @PrimaryMobile='')    
 begin  
    set @ErrorMessage ='MobileNumberRequired'    
 end      
  else if(@EmailID is null or @EmailID='')    
 begin 
    set @ErrorMessage ='EmailIDRequired'    
 end      
 else if(@NationalityID is null or @NationalityID=0)    
 begin  
    set @ErrorMessage ='NationalityRequired'    
 end      
 else if(@IqamaNumber is null or @IqamaNumber='')    
 begin 
    set @ErrorMessage ='IqamaNumberRequired'    
 end            
else    
begin  
IF Exists(select * from coc_Endorsements(NOLOCK) where DrawID=@DrawID and (PrimaryMobile=@PrimaryMobile or EmailID=@EmailID))     
begin
  set @ErrorMessage ='You have already submited your endorsement' 
end
else
begin
  SELECT @MobileOtp = ROUND(((@Upper - @Lower - 1) * RAND() + @Lower), 0)          
 SELECT @EmailOtp = ROUND(((@Upper - @Lower - 1) * RAND() + @Lower), 0)                  
    insert into coc_Endorsements                
       select @FirstName,@SecondName,@FamilyName,@PrimaryMobile,@EmailID,@Gender,@NationalityID,@CountryID,@CityID,@MembershipNumber,@IqamaNumber,getdate(),0,0,1,@MobileOtp,@DrawID,@DeviceToken,@EmailOtp,@ConsumerID,0,null,getdate()               
             set @EndorsementID=SCOPE_IDENTITY()       
end   
end
              
               
 --IF Exists(select * from coc_Endorsements where DrawID=@DrawID and IsActive=1 and IsDeleted=0 and IsMobileVerified=1 and IsEmailVerified=1 and (PrimaryMobile=@PrimaryMobile or EmailID=@EmailID))              
 --begin              
 --   set @ErrorMessage ='EmailOrMobileAlreadyExists'              
 --end              
 --else if exists(select * from coc_Endorsements where DrawID=@DrawID and IsDeleted=0 and (IsMobileVerified=0 or IsEmailVerified=0) and PrimaryMobile=@PrimaryMobile and EmailID=@EmailID)              
 --begin              
 --   update coc_Endorsements set IsDeleted=1,IsActive=1 where DrawID=@DrawID and IsDeleted=0 and (IsMobileVerified=0 or IsEmailVerified=0) and PrimaryMobile=@PrimaryMobile and EmailID=@EmailID             
 --   SELECT @MobileOtp = ROUND(((@Upper - @Lower - 1) * RAND() + @Lower), 0)          
 --SELECT @EmailOtp = ROUND(((@Upper - @Lower - 1) * RAND() + @Lower), 0)          
                 
 --   insert into coc_Endorsements                
 --      select @FirstName,@SecondName,@FamilyName,@PrimaryMobile,@EmailID,@Gender,@NationalityID,@CountryID,@CityID,@MembershipNumber,@IqamaNumber,getdate(),0,0,1,@MobileOtp,@DrawID,@DeviceToken,@EmailOtp,@ConsumerID,0                
 --            set @EndorsementID=SCOPE_IDENTITY()                
 --end                        
 --else              
 --begin              
 --    SELECT @MobileOtp = ROUND(((@Upper - @Lower - 1) * RAND() + @Lower), 0)          
 --SELECT @EmailOtp = ROUND(((@Upper - @Lower - 1) * RAND() + @Lower), 0)                  
 --   insert into coc_Endorsements                
 --      select @FirstName,@SecondName,@FamilyName,@PrimaryMobile,@EmailID,@Gender,@NationalityID,@CountryID,@CityID,@MembershipNumber,@IqamaNumber,getdate(),0,0,1,@MobileOtp,@DrawID,@DeviceToken,@EmailOtp,@ConsumerID,0                
 --            set @EndorsementID=SCOPE_IDENTITY()                
 --end                      
                  
                    
                     
 END TRY --end try block                              
                              
 BEGIN CATCH --begin catch                 
                  
     set @EndorsementID=0                
                                
   SELECT ERROR_LINE()                              
    ,ERROR_NUMBER();                              
       
  -- SELECT @ErrorMessage = CONCAT (                              
  --ERROR_MESSAGE()                              
  --,ERROR_LINE()                              
  --,ERROR_NUMBER()                              
  --);                   
  select @ErrorMessage='GenericError'        
        
 END CATCH --end catch                  
                
              
                             
END 


select top 10 * from coc_Endorsements order by 1 desc




GO
/****** Object:  StoredProcedure [dbo].[usp_SaveIssueGift]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_SaveIssueGift] @CorporateID INTEGER
	,@ECouponID BIGINT
	,@CustomerName NVARCHAR(100)
	,@Mobile NVARCHAR(15)
	,@Email NVARCHAR(100)
	,@RetailOutletID INT
	,@InvoiceAmount DECIMAL(18, 0)
	,@InvoiceNumber NVARCHAR(50)
	,@Category VARCHAR(2)
	,@ReturnValue [Remark] OUTPUT
	,@ReturnMessage NVARCHAR(500) OUTPUT
AS
BEGIN
	BEGIN TRY
		SELECT @ReturnValue = ''

		SELECT @ReturnMessage = 'Success'
		if ISNULL(@CorporateID,0) = 0
			select @CorporateID = 9
		DECLARE @guestID INTEGER;
		DECLARE @ECouponPrizeID INTEGER;
		DECLARE @PrizeValue VARCHAR(100);
		DECLARE @NotificationID INTEGER;
		DECLARE @GiftCount INTEGER = 0;
		DECLARE @ECouponParticipationID INTEGER;

		SELECT @GiftCount = count(coc_ECouponWinners.ECouponPrizeID)
		FROM coc_ECouponWinners(NOLOCK)
		WHERE ecouponprizeid IN (
				SELECT DISTINCT coc_ECouponPrizes.ECouponPrizeID
				FROM coc_ECouponPrizes(NOLOCK)
				JOIN coc_ECouponPrizesLanguages(NOLOCK) ON coc_ECouponPrizesLanguages.ECouponPrizeID = coc_ECouponPrizes.ECouponPrizeID
				WHERE coc_ECouponPrizesLanguages.ResourceKey = 'Name'
					AND coc_ECouponPrizes.ECouponID = @ECouponID
					--AND coc_ECouponPrizes.CATEGORY LIKE '%' + @Category + '%'
				)
			AND CAST(DATEADD(hh,-3,drawdatetime) AS DATE) = CAST(DATEADD(hh,-3,getdate()) AS DATE)

		/*logic to get barcode*/
		DECLARE @BarCodes TABLE (
			EServiceBarcodeID INTEGER
			,AsignedMoile [Mobile]
			,Barcode [NullDescription]
			,IsUsed BIT
			);

		SELECT @NotificationID = NotificationID
		FROM coc_Notifications(NOLOCK) N
		INNER JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID = N.EServiceID
		INNER JOIN coc_ECoupons(NOLOCK) EC ON EC.EServiceID = ES.EServiceID
			AND ec.ECouponID = @ECouponID

		INSERT INTO @BarCodes (
			EServiceBarcodeID
			,AsignedMoile
			,Barcode
			,IsUsed
			)
		SELECT TOP 1 BC.EServiceBarcodeID
			,@Mobile
			,BC.Barcode
			,1
		FROM coc_EServiceBarcodes(NOLOCK) BC
		WHERE BC.IsUsed = 0
			AND NotificationID = @NotificationID

		--AND BC.NotificationID = @NotificationID;
		/*logic to get barcode*/
		/*logic to get prize from coc_ECouponPrizes*/

		IF(@Category = 'A')
		   BEGIN
		   SELECT TOP 1 @ECouponPrizeID = coc_ECouponPrizes.ECouponPrizeID
				,@PrizeValue = coc_ECouponPrizesLanguages.Value
			FROM coc_ECouponPrizes(NOLOCK)
			JOIN coc_ECouponPrizesLanguages(NOLOCK) ON coc_ECouponPrizesLanguages.ECouponPrizeID = coc_ECouponPrizes.ECouponPrizeID
			WHERE coc_ECouponPrizesLanguages.ResourceKey = 'Name'
				AND coc_ECouponPrizes.ECouponID = @ECouponID
				AND coc_ECouponPrizes.CATEGORY LIKE '%' + @Category + '%'
				AND coc_ECouponPrizes.EcouponPrizeID NOT IN (
					SELECT coc_ECouponWinners.ECouponPrizeID
					FROM coc_ECouponWinners(NOLOCK)
					WHERE ecouponprizeid IN (
							SELECT DISTINCT coc_ECouponPrizes.ECouponPrizeID
							FROM coc_ECouponPrizes(NOLOCK)
							JOIN coc_ECouponPrizesLanguages(NOLOCK) ON coc_ECouponPrizesLanguages.ECouponPrizeID = coc_ECouponPrizes.ECouponPrizeID
							WHERE coc_ECouponPrizesLanguages.ResourceKey = 'Name'
								AND coc_ECouponPrizes.ECouponID = @ECouponID
								AND coc_ECouponPrizes.CATEGORY = 'A'
							)
						)
			ORDER BY NEWID();


		   END
		ELSE
		  BEGIN
			SELECT TOP 1 @ECouponPrizeID = coc_ECouponPrizes.ECouponPrizeID
				,@PrizeValue = coc_ECouponPrizesLanguages.Value
			FROM coc_ECouponPrizes (NOLOCK)
			JOIN coc_ECouponPrizesLanguages(NOLOCK) ON coc_ECouponPrizesLanguages.ECouponPrizeID = coc_ECouponPrizes.ECouponPrizeID
			WHERE coc_ECouponPrizesLanguages.ResourceKey = 'Name'
				AND coc_ECouponPrizes.ECouponID = @ECouponID
				AND coc_ECouponPrizes.CATEGORY LIKE '%' + @Category + '%'
				AND coc_ECouponPrizes.EcouponPrizeID NOT IN (
					SELECT coc_ECouponWinners.ECouponPrizeID
					FROM coc_ECouponWinners(NOLOCK)
					WHERE ecouponprizeid IN (
							SELECT DISTINCT coc_ECouponPrizes.ECouponPrizeID
							FROM coc_ECouponPrizes(NOLOCK)
							JOIN coc_ECouponPrizesLanguages(NOLOCK) ON coc_ECouponPrizesLanguages.ECouponPrizeID = coc_ECouponPrizes.ECouponPrizeID
							WHERE coc_ECouponPrizesLanguages.ResourceKey = 'Name'
								AND coc_ECouponPrizes.ECouponID = @ECouponID
								AND coc_ECouponPrizes.CATEGORY LIKE '%' + @Category + '%'
							)
							AND   CAST(DATEADD(hh,-3,coc_ECouponWinners.drawdatetime) AS DATE) 
								= CAST(DATEADD(hh,-3,getdate()) AS DATE)
						--AND coc_ECouponWinners.drawdatetime BETWEEN  DATEADD(hh,-3,coc_ECouponWinners.drawdatetime)  
							--	AND DATEADD(hh,-3,getdate())
					)
			ORDER BY NEWID();
		  END


		IF (isnull(@ECouponPrizeID, 0) = 0)
		BEGIN
			SET @ReturnValue = 'UnSuccess';
			SET @ReturnMessage = 'Today quota over for category'

			SELECT ECouponPrizeID = 0
				,PrizeValue = ''
				,Barcode = ''
				,@GiftCount GiftCount

			PRINT ('-- end --')

			RETURN;
		END

		BEGIN TRANSACTION savegift

		/*logic to get prize from coc_ECouponPrizes*/
		SELECT @guestID = GuestID
		FROM coc_Guests (NOLOCK)
		WHERE PrimaryMobile = @Mobile

		IF @guestID IS NULL
		BEGIN -- if begin
			------------ INSERT coc_Guests ------------------
			INSERT INTO coc_Guests (
				FullName
				,PrimaryMobile
				,EmailID
				,IsActive
				,AddDate
				)
			VALUES (
				@CustomerName
				,@Mobile
				,@Email
				,1
				,GETDATE()
				)

			SET @guestID = SCOPE_IDENTITY();

			------------ INSERT coc_ECouponParticipations ------------------
			INSERT INTO coc_ECouponParticipations (
				ECouponID
				,ParticipationDate
				,Barcode
				,ParticipationMobile
				,ParticipationEmailID
				,GuestID
				,RetailOutletID
				,ConsumerName
				,InvoiceAmount
				,InvoiceNumber
				,CorporateID
				)
			VALUES (
				@ECouponID
				,GETDATE()
				,(
					SELECT Barcode
					FROM @BarCodes
					)
				,@Mobile
				,@Email
				,@guestID
				,@RetailOutletID
				,@CustomerName
				,@InvoiceAmount
				,@InvoiceNumber
				,@CorporateID
				)
		SET @ECouponParticipationID = SCOPE_IDENTITY();

			UPDATE EB
			SET GuestID = @GuestID
				,AsignedMoile = @Mobile
				,AsignedEmailID = @Email
				,IsUsed = 1
				,UsedDate = GETDATE()
			FROM coc_EServiceBarcodes EB
			WHERE EServiceBarcodeID IN (
					SELECT EServiceBarcodeID
					FROM @BarCodes
					)

			------------ INSERT coc_ECouponWinners ------------------
			INSERT INTO coc_ECouponWinners (
				ECouponPrizeID
				,MobileNumber
				,ConsumerName
				,Email
				,DrawDateTime
				,GuestID
				,ECouponParticipationID
				)
			VALUES (
				@ECouponPrizeID
				,@Mobile
				,@CustomerName
				,@Email
				,GETDATE()
				,@guestID
				,@ECouponParticipationID
				)
				------------ INSERT DONE ------------------
		END -- end if
		ELSE
		BEGIN -- else begin
			------------ INSERT coc_ECouponParticipations ------------------
			INSERT INTO coc_ECouponParticipations (
				ECouponID
				,ParticipationDate
				,Barcode
				,ParticipationMobile
				,ParticipationEmailID
				,GuestID
				,RetailOutletID
				,ConsumerName
				,InvoiceAmount
				,InvoiceNumber
				,CorporateID
				)
			VALUES (
				@ECouponID
				,GETDATE()
				,(
					SELECT Barcode
					FROM @BarCodes
					)
				,@Mobile
				,@Email
				,@guestID
				,@RetailOutletID
				,@CustomerName
				,@InvoiceAmount
				,@InvoiceNumber
				,@CorporateID
				)

				SET @ECouponParticipationID = SCOPE_IDENTITY();

			UPDATE EB
			SET GuestID = @GuestID
				,AsignedMoile = @Mobile
				,AsignedEmailID = @Email
				,IsUsed = 1
				,UsedDate = GETDATE()
			FROM coc_EServiceBarcodes EB
			WHERE EServiceBarcodeID IN (
					SELECT EServiceBarcodeID
					FROM @BarCodes
					)

			------------ INSERT coc_ECouponWinners ------------------
			INSERT INTO coc_ECouponWinners (
				ECouponPrizeID
				,MobileNumber
				,ConsumerName
				,Email
				,DrawDateTime
				,GuestID
				,ECouponParticipationID
				)
			VALUES (
				@ECouponPrizeID
				,@Mobile
				,@CustomerName
				,@Email
				,GETDATE()
				,@guestID
				,@ECouponParticipationID
				)
				------------ INSERT DONE ------------------
		END -- else end

		SELECT @ECouponPrizeID ECouponPrizeID
			,@PrizeValue PrizeValue
			,(
				SELECT Barcode
				FROM @BarCodes
				) AS Barcode
			,(@GiftCount + 1) GiftCount

		COMMIT TRANSACTION savegift
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION savegift;

		SELECT @ReturnValue = ERROR_MESSAGE();
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[USP_SaveNewBarcodePurchaseNotification]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_SaveNewBarcodePurchaseNotification]   
@UserID int,  
@ErrorMessage nvarchar(500) out  
AS  
  
BEGIN   
begin try  
 
  INSERT INTO coc_ServiceTaskNotification ( UserId,  [Date], [Message], [Result], [STATUS], RowStatus,  LanguageId ,RedirectPage ,RedirectParameter)  
  select UserID,getdate(),'New Barcode Purchase','Success',1,1,1,'','' from coc_Users (NOLOCK) where RoleID = 1 and IsActive = 1;  
  set @ErrorMessage = '';  
 
end try  
begin catch  
set @ErrorMessage = Error_Message();  
end catch  
END  
GO
/****** Object:  StoredProcedure [dbo].[usp_SaveOrderShippingAddress]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Rafeeq Mohammad>
-- Create date: <03-06-2020>
-- Description:	<Save-Latest-shipping-address>
-- =============================================
CREATE PROCEDURE [dbo].[usp_SaveOrderShippingAddress] 
	(
	 @ConsumerID int
	,@Address nvarchar(max)
	,@CityID int
	,@CountryID int
	,@State nvarchar(20)
	,@PostalCode nvarchar(20)
	,@SPStatus int out
	,@SPMessage nvarchar(120) out
	)
AS
BEGIN
	begin try
	SET NOCOUNT ON;

	INSERT INTO coc_OrderAddresses
           ([ConsumerID]
           ,[Address]
           ,[CityID]
           ,[CountryID]
           ,[State]
           ,[PostalCode]
           ,[CreatedOn])
     VALUES
           (@ConsumerID 
           ,@Address 
           ,@CityID 
           ,@CountryID 
           ,@State 
           ,@PostalCode 
           ,Getdate())
Set @SPStatus = 1;
Set @SPMessage = 'Saved';
 END try
 Begin catch
 Set @SPStatus = 0;
 Set @SPMessage = ERROR_MESSAGE();
 end catch
END
GO
/****** Object:  StoredProcedure [dbo].[usp_SavePaytabTransaction]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  <Rafeeq>  
-- Create date: <28-05-2020>  
-- Description: <Insert Update coc_AuditPaytabTransaction table>  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SavePaytabTransaction]  
 (  
            @PaytabAuditID bigint = null  
		   ,@TransactionRefNum nvarchar(50) = null  
           ,@BarcodeID bigint = null  
           ,@VoucherAmount decimal(18,2) = null  
           ,@ConsumerID int = null  
           ,@EvoucherID int = null  
           ,@OrderID nvarchar(50) = null   
           ,@InvoiceID nvarchar(50) = null  
           ,@RequestStatus int = null  
           ,@PaytabRefNum nvarchar(200) = null  
           ,@CardLastFourDigits nvarchar(10) = null  
		   ,@CardFirstSixDigits nvarchar(10) = null  
		   ,@CardBrand nvarchar(50) = null  
           ,@PaytabResponseCode nvarchar(50) = null  
           ,@PaytabResponseMessage nvarchar(200) = null  
		   ,@SP_Status int = null out  
		   ,@ErrorMessage varchar(500) = null out  
		   ,@PaytabAuditIDOut bigint = null out  
		   ,@Barcode nvarchar(150) = null out  
		   ,@ImageFile nvarchar(500) = null out  
 )  
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
 BEGIN TRY   
 IF(@PaytabAuditID is null or @PaytabAuditID = 0)  
   BEGIN  
  INSERT INTO coc_AuditPaytabTransaction(  
		   TransactionRefNum  
           ,BarcodeID  
           ,VoucherAmount  
           ,ConsumerID  
           ,EvoucherID  
           ,RequestStatus  
           ,RequestTime  
           )  
     VALUES  
           (  
			@TransactionRefNum  
           ,@BarcodeID  
           ,@VoucherAmount  
           ,@ConsumerID  
           ,@EvoucherID  
           ,@RequestStatus  
           ,GETDATE()  
     )  
    set  @PaytabAuditIDOut = SCOPE_IDENTITY();  
    set  @ErrorMessage= 'Saved';   
   END  
  
 ELSE  
   BEGIN  
   UPDATE coc_AuditPaytabTransaction   
           SET  
            OrderID = @OrderID   
           ,InvoiceID = @InvoiceID  
           ,RequestStatus = @RequestStatus  
           ,PaytabRefNum = @PaytabRefNum  
           ,CardLastFourDigits = @CardLastFourDigits  
		   ,CardFirstSixDigits = @CardFirstSixDigits
           ,PaytabResponseCode = @PaytabResponseCode  
           ,PaytabResponseTime = GETDATE()  
           ,PaytabResponseMessage = @PaytabResponseMessage 
		   ,CardBrand = @CardBrand
     WHERE PaytabAuditID = @PaytabAuditID    ;  
  
     IF(@PaytabResponseCode = '100')--success  
       begin  
    Declare @ptConsumerID int;  
    Declare @ptGuestID int = NULL;  
    Declare @ptVoucherID int;  
    Declare @pteServiceBarcodeID int;  
    Declare @ptbarcode nvarchar(150);  
    Declare @ptEserviceID int;  
  
    SELECT @ptConsumerID = ConsumerID , @ptVoucherID=EvoucherID,@pteServiceBarcodeID=BarcodeID FROM coc_AuditPaytabTransaction  (NOLOCK) 
    WHERE PaytabAuditID = @PaytabAuditID;  
      
    Select @ptEserviceID = EServiceID from coc_Notifications(NOLOCK) where NotificationID =   
    (select NotificationID from coc_EServiceBarcodes(NOLOCK) where EServiceBarcodeID = @pteServiceBarcodeID)  
  
    Select @ptbarcode = Barcode from coc_EServiceBarcodes(NOLOCK) where EServiceBarcodeID = @pteServiceBarcodeID;  

	SET @ImageFile = (SELECT top(1) ISNULL(EV.ImageFile, ISNULL((SELECT top 1 ImageFile from coc_EVoucherImages(NOLOCK) EVI 
						Where EVI.EVoucherID = EV.EVoucherID and EVI.IsPrimaryImage = 1 and EVI.LanguageID = 1),
						(SELECT top 1 ImageFile from coc_EVoucherImages(NOLOCK) EVI Where EVI.EVoucherID =
						EV.EVoucherID and EVI.IsPrimaryImage = 1)))  as ImageFile  FROM coc_EVoucher EV(NOLOCK)   where EVoucherID = @ptVoucherID)
  
     UPDATE   top (1) coc_EServiceBarcodes  
     SET  ConsumerID = @ptConsumerID    
     , GuestID = @ptGuestID    
     , EVoucherID = @ptVoucherID    
     , IsDirectVoucher = 1    
    WHERE    
     EServiceBarcodeID = @pteServiceBarcodeID    
      
    DECLARE @return_value int    
    EXEC @return_value = [dbo].[SaveNotificationForConsumer]     
        @TemplateID=NULL,    
        @MessageTitleText = 'New Voucher',    
        @MessageText = 'Dear @name, You have received new voucher from @corporate. The barcode is @barcode',    
        @ConsumerID = @ptConsumerID,    
        @EServiceID = @ptEserviceID,    
        @Barcode = @ptbarcode  ;  
  
    set @Barcode = @ptbarcode;  
    end  
  
  
   set   @PaytabAuditIDOut = @PaytabAuditID  
  set  @ErrorMessage= 'Updated';   
   END  
   Select @SP_Status = 1;  
  END TRY    
 BEGIN CATCH             
  SELECT @SP_Status = 0, @ErrorMessage=ERROR_MESSAGE()    
  RAISERROR(@ErrorMessage, 16, 1);       
  END CATCH    
END
GO
/****** Object:  StoredProcedure [dbo].[usp_SaveSMSSchedule]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_SaveSMSSchedule]   
   @EcouponID int  
   ,@ConsumerID int    
  ,@GuestID int    
  ,@SMSBody nvarchar(max)    
  ,@MobileNumber nvarchar(20)    
 ,@SPStatus INT = NULL OUT      
 ,@SPReturnMessage NVARCHAR(500) = NULL OUT      
AS      
SET NOCOUNT ON      
BEGIN TRY      
 SET @SPStatus = 0;      
 SET @SPReturnMessage = '';   
  
  if ((select count(*) from coc_ecoupons(NOLOCK) where ecouponid=@EcouponID and SendSMS=1)>0)      
   begin      
    insert into coc_SMSSchedule(ConsumerID,GuestID,SMSBody,MobileNumber,IsProcessed,CreatedDate,NoOfTriesAttempted)    
     select @ConsumerID,@GuestID,@SMSBody,@MobileNumber,0,getdate(),0     
   end      
   
    
END TRY      
BEGIN CATCH      
 SET @SPStatus = 1;      
 SET @SPReturnMessage = ERROR_MESSAGE();      
END CATCH 
GO
/****** Object:  StoredProcedure [dbo].[usp_SendAnEmailForNoParticipations]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
 CREATE PROCEDURE [dbo].[usp_SendAnEmailForNoParticipations]
AS
 SET NOCOUNT ON 

	 DECLARE @desc NVARCHAR(MAX)
	 DECLARE @ECouponDrawID BIGINT
     DECLARE @CorporateName NVARCHAR(100)
     DECLARE @ServiceName NVARCHAR(1000)
	 DECLARE @html1 NVARCHAR(max)
	 DECLARE @html2 NVARCHAR(max)
     DECLARE @COUNT INTEGER
     DECLARE @PartcipationCount INTEGER

     SET @html1='<html><head></head><body>';	
	 SET @html2='</body></html>';
	 SET @desc=''

    DECLARE @ECouponDraws TABLE 
    (
    ECouponDrawID BIGINT,
    CompetitionName [Remark],
    CorporateName [NullDescription],
    PartcipationCount INT
    )  
    
    INSERT INTO @ECouponDraws
    SELECT 
    ED.ECouponDrawID AS ECouponDrawID,
    ESL.EService AS CompetitionName,
    isnull(C.CorporateName,C.CorporateNameAR) AS CorporateName,
    (SELECT COUNT(*) FROM coc_ECouponParticipations(NOLOCK) EP WHERE EP.ECouponID=ed.ECouponID) AS PartcipationCount 
    FROM coc_ECouponDraw(NOLOCK) ED 
    INNER JOIN coc_ECoupons(NOLOCK) EC ON EC.ECouponID=ED.ECouponID
    INNER JOIN coc_EServices(NOLOCK) ES on ES.EServiceID=EC.EServiceID
    INNER JOIN coc_EServiceLanguages(NOLOCK) ESL on ESL.EServiceID=ES.EServiceID and ESL.LanguageID=1
    INNER JOIN coc_Corporates(NOLOCK) C on C.CorporateID=ES.CorporateID
    WHERE CONVERT(DATE, ED.DrawDate) BETWEEN CONVERT(DATE, GETDATE()) AND CONVERT(DATE, DATEADD(DD,5,GETDATE())) AND ES.IsActive = 1 
    ORDER BY DrawDate ASC

    SELECT @COUNT = COUNT(ECouponDrawID) FROM @ECouponDraws

    PRINT 'Total No. of Draws:'+ CONVERT(VARCHAR, @COUNT)
        
    WHILE EXISTS(SELECT * FROM @ECouponDraws)
    BEGIN
        SET @ECouponDrawID=0
        SET @ServiceName=''
        SET @CorporateName = ''
        SET @desc = ''
        SET @PartcipationCount = 0
	
	    SELECT TOP 1 @ECouponDrawID=ECouponDrawID, 
        @ServiceName=CompetitionName, 
        @CorporateName=CorporateName,
        @PartcipationCount = PartcipationCount
        FROM @ECouponDraws

        --Send an email if there are no participations for the competition.
        IF (@PartcipationCount = 0)
        BEGIN
            SET @desc=@desc+'<div style="border:1px solid black; padding:5px 30px;background-color: lightblue;">
                <p> Hi Othman, </p>
                <p> We have checked the draws today.</p>
                <p> Competition Name : <b>'+ @ServiceName +'</b> </p>
                <p> Corporate Name : <b>'+ @CorporateName +'</b> </p>
                <p> There are no Participants for <b>'+ @ServiceName +'</b> competition. </p>
                <p> Please do the needful, if required upload the DATA else the draw may end up with error message. </p>
                </div>';

            SET @desc=@html1+@desc+@html2
            PRINT @desc

		    EXEC msdb.dbo.sp_send_dbmail
		    @profile_name = 'Email',
		    @recipients = 'barayan@e-copon.com',
		    @copy_recipients='amer.syed@logicsystems-me.com;shamim@logicsystems-me.com;feroz@logicsystems-me.com;M.aziz@e-copon.com;mshafi@logicsystems-me.com',
		    @subject = 'High Alert! No participants for Competition',
		    @body  = @desc,
		    @body_format='HTML'
        END

	    DELETE @ECouponDraws WHERE ECouponDrawID=@ECouponDrawID
    END
    
GO
/****** Object:  StoredProcedure [dbo].[usp_SendAnEmailForUpcomingDraws]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
 CREATE PROCEDURE [dbo].[usp_SendAnEmailForUpcomingDraws]
AS
 SET NOCOUNT ON 
	 DECLARE @DrawName NVARCHAR(1000)
	 DECLARE @DrawDate DATETIME=null
	 DECLARE @ServiceName NVARCHAR(1000)
	 DECLARE @desc NVARCHAR(MAX)
	 DECLARE @ECouponDrawID BIGINT
     DECLARE @CorporateName NVARCHAR(100)
     DECLARE @StartDate DATETIME
     DECLARE @EndDate DATETIME
     DECLARE @DrawPrizeCount INT
     DECLARE @DrawPrizeName NVARCHAR(1000)
     DECLARE @RetailOutlets NVARCHAR(1000)
     DECLARE @TypeOfprizes INT
	 DECLARE @html1 NVARCHAR(max)
	 DECLARE @html2 NVARCHAR(max)
     DECLARE @XML AS XML, @STR AS VARCHAR(MAX), @DELIMITER AS VARCHAR(10)

     SET @html1='<html>
     <head></head>
     <body>
     <table border=''1''><tr>
     <th>Competition Name</th>
     <th>Corporate Name</th>
     <th>Start Date</th>
     <th>End Date</th>
     <th>Draw Name</th>
     <th>Draw Date</th>
     <th>Draw Prize Count</th>
     <th>Draw Prize Name</th>
     <th>Type Of prizes</th>
     <th>RetailOutlets</th>
     </tr>';	
	 SET @html2='</table></body></html>';
	 SET @desc=''
     SET @DELIMITER =',' 

    DECLARE @DrawDetails TABLE (ID INT IDENTITY(1, 1) PRIMARY KEY, ECouponDrawID BIGINT, DrawDate DATETIME)   
    INSERT INTO @DrawDetails
    SELECT ED.ECouponDrawID, ED.DrawDate 
    FROM coc_ECouponDraw (NOLOCK) ED
    INNER JOIN coc_ECoupons(NOLOCK) EC on EC.ECouponID=ED.ECouponID
    INNER JOIN coc_EServices(NOLOCK) ES on ES.EServiceID=EC.EServiceID AND ES.IsActive = 1
    WHERE CONVERT(DATE, DrawDate) BETWEEN CONVERT(DATE, GETDATE()) AND  CONVERT(DATE, DATEADD(DD,10,GETDATE()))
    ORDER BY DrawDate ASC
    WHILE EXISTS(SELECT * FROM @DrawDetails)
    BEGIN
        SET @ECouponDrawID=0
        SET @ServiceName=''
        SET @CorporateName = ''
	    SET @DrawName=''
	    SET @DrawDate=null
        SET @DrawPrizeCount = 0
        SET @DrawPrizeName = ''
        SET @TypeOfprizes = 0
        SET @RetailOutlets = ''
        SET @STR = ''
        SET @XML = ''
	
	    SELECT TOP 1 @ECouponDrawID=ECouponDrawID,@DrawDate=DrawDate FROM @DrawDetails

        SET @STR=(SELECT DISTINCT STRING_AGG(EDPR.RetailOutlets,',') FROM coc_ECouponDrawPrizes(NOLOCK) EDPR WHERE EDPR.ECouponDrawID=@ECouponDrawID) 
        SET @XML = CAST(( '<RetailOutlets>' + REPLACE(@STR, @DELIMITER, '</RetailOutlets><RetailOutlets>') + '</RetailOutlets>' ) AS XML)

        SELECT 
        @ServiceName = ESL.EService,
        @CorporateName = ISNULL(C.CorporateName,C.CorporateNameAR),
        @StartDate = CONVERT(DATE, ES.FromDate),
        @EndDate = CONVERT(DATE, ES.ToDate),
        @DrawName = EDL.Value, 
        @DrawDate = CONVERT(DATE, ED.DrawDate),
        @DrawPrizeCount = (SELECT SUM(EDP.Frequency) FROM coc_ECouponDrawPrizes(NOLOCK) EDP WHERE EDP.ECouponDrawID=ED.ECouponDrawID),
        @TypeOfprizes = (SELECT COUNT(DISTINCT EDP.ECouponPrizeID) FROM coc_ECouponDrawPrizes(NOLOCK) EDP WHERE EDP.ECouponDrawID=ED.ECouponDrawID),
        @DrawPrizeName = (SELECT STRING_AGG(EPL.Value, ',') FROM coc_ECouponPrizesLanguages(NOLOCK) EPL WHERE EPL.LanguageID=1 AND EPL.ResourceKey='Name' AND 
        EPL.ECouponPrizeID IN (SELECT DISTINCT EDP.ECouponPrizeID FROM coc_ECouponDrawPrizes(NOLOCK) EDP WHERE EDP.ECouponDrawID=ED.ECouponDrawID) ),
        @RetailOutlets = (SELECT STRING_AGG(ISNULL(RL.RetailOutlet,''),',') FROM coc_RetailOutletLanguages RL(NOLOCK) 
        WHERE RL.RetailOutletID IN (SELECT RetailOutlets.value('.', 'INTEGER') AS RetailOutletID FROM @XML.nodes('RetailOutlets') AS Data(RetailOutlets)) AND RL.LanguageID = 1)
        FROM coc_ECouponDraw(NOLOCK) ED 
        INNER JOIN coc_ECouponDrawLanguages(NOLOCK)EDL on EDL.ECouponDrawID=ED.ECouponDrawID and EDL.LanguageID=1 and EDL.ResourceKey='Name'
        INNER JOIN coc_ECoupons(NOLOCK) EC on EC.ECouponID=ED.ECouponID
        INNER JOIN coc_EServices(NOLOCK) ES on ES.EServiceID=EC.EServiceID
        INNER JOIN coc_EServiceLanguages(NOLOCK) ESL on ESL.EServiceID=ES.EServiceID and ESL.LanguageID=1
        INNER JOIN coc_Corporates(nolock) C on C.CorporateID=ES.CorporateID
        WHERE ED.ECouponDrawID =  @ECouponDrawID
        ORDER BY ED.DrawDate ASC

        IF(@DrawDate<=CONVERT(DATE, DATEADD(DD,3,GETDATE())))
        BEGIN
            SET @desc=@desc+'<tr style=''background-color:#51ff51;''>
                <td>'+ @ServiceName + '</td>
                <td>' + @CorporateName + '</td>
                <td>' + CONVERT(varchar(12),@StartDate, 107) + '</td>
                <td>' + CONVERT(varchar(12),@EndDate, 107) + '</td>
                <td>' + @DrawName + '</td>
                <td>' + CONVERT(varchar(12),@DrawDate, 107) + '</td>
                <td>' + convert(nvarchar(10),@DrawPrizeCount) + '</td>
                <td>' + @DrawPrizeName + '</td>
                <td>' + convert(nvarchar(10),@TypeOfprizes) + '</td>
                <td>' + @RetailOutlets + '</td>
                </tr>';
        END
        ELSE
        BEGIN
            SET @desc=@desc+'<tr style=''background-color:#ffb100;''>
                <td>'+ @ServiceName + '</td>
                <td>' + @CorporateName + '</td>
                <td>' + CONVERT(varchar(12),@StartDate, 107) + '</td>
                <td>' + CONVERT(varchar(12),@EndDate, 107) + '</td>
                <td>' + @DrawName + '</td>
                <td>' + CONVERT(varchar(12),@DrawDate, 107) + '</td>
                <td>' + convert(nvarchar(10),@DrawPrizeCount) + '</td>
                <td>' + @DrawPrizeName + '</td>
                <td>' + convert(nvarchar(10),@TypeOfprizes) + '</td>
                <td>' + @RetailOutlets + '</td>
                </tr>';
        END

	    DELETE @DrawDetails WHERE ECouponDrawID=@ECouponDrawID
    END

   IF (@desc<>'')
	BEGIN
	    SET @desc=@html1+@desc+@html2
        PRINT @desc
		EXEC msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = 'barayan@e-copon.com',
		@copy_recipients='amer.syed@logicsystems-me.com;shamim@logicsystems-me.com;feroz@logicsystems-me.com;
        M.aziz@e-copon.com;mshafi@logicsystems-me.com',
		@subject = 'Draw Details (Winner Selection)',
		@body  = @desc,
		@body_format='HTML'
	END
    
GO
/****** Object:  StoredProcedure [dbo].[USP_SendEmailDailyByJobForSadafcoStatus]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Proc [dbo].[USP_SendEmailDailyByJobForSadafcoStatus]  
AS  
Begin 
    declare @NoOfParticipationsByRegistrationYesterday int;  
	declare @NoOfParticipationsByRegistrationToday int;  
 declare @NoOfParticipationsByRegistrationSinceStart int;  
    declare @ParticipationByBarcodeScanningYesterday  int;  
	declare @ParticipationByBarcodeScanningToday  int;  
 declare @ParticipationByBarcodeScanningSinceStart  int;  
    declare @NoOFRegistrationsFailurbyOTPYesterday int; 
	declare @NoOFRegistrationsFailurbyOTPToday int; 
 declare @NoOFRegistrationsFailurbyOTPSinceStart int;  
 declare @NoOfRegistrationFailurebyBarcodeEnterYesterday int;  
    declare @NoOfRegistrationFailurebyBarcodeEnterSinceStart int;  
 declare @bodyMessage nvarchar(max);  
 declare @bodyMessage1 nvarchar(max); 


 
 set @NoOfParticipationsByRegistrationYesterday= (select count(*)   from coc_ECouponParticipations(NOLOCK) where  CONVERT(DATE,ParticipationDate)=CONVERT(DATE,getdate()-1) and ECouponID=10173 and ConsumerName is not null)  
 set @NoOfParticipationsByRegistrationToday= (select count(*)   from coc_ECouponParticipations(NOLOCK) where  CONVERT(DATE,ParticipationDate)=CONVERT(DATE,getdate()) and ECouponID=10173 and ConsumerName is not null)  
  
  
set @NoOfParticipationsByRegistrationSinceStart= (select count(*)  from coc_ECouponParticipations(NOLOCK) where   ECouponID=10173 and ConsumerName is not null )  
  
set @ParticipationByBarcodeScanningYesterday= (select count(*)  from coc_ECouponParticipations(NOLOCK) where CONVERT(DATE,ParticipationDate)=CONVERT(DATE,getdate()-1) and ECouponID=10173 and ConsumerName is null )  
set @ParticipationByBarcodeScanningToday= (select count(*)  from coc_ECouponParticipations(NOLOCK) where CONVERT(DATE,ParticipationDate)=CONVERT(DATE,getdate()) and ECouponID=10173 and ConsumerName is null )  
  
set @ParticipationByBarcodeScanningSinceStart= (select count(*) as BarcodePartiipation from coc_ECouponParticipations(NOLOCK) where  ECouponID=10173 and ConsumerName is null )  
  
  
set @NoOFRegistrationsFailurbyOTPYesterday=(Select Count(C.ConsumerID) from  coc_Consumers(NOLOCK) C WHERE  CONVERT(DATE,C.AddDate)=CONVERT(DATE,getdate()-1) and (C.IsVerified =0 and c.IsActive=1 and c.IsDeleted=0) and C.ECouponID=10173)  
set @NoOFRegistrationsFailurbyOTPToday=(Select Count(C.ConsumerID) from  coc_Consumers(NOLOCK) C WHERE  CONVERT(DATE,C.AddDate)=CONVERT(DATE,getdate()) and (C.IsVerified =0 and c.IsActive=1 and c.IsDeleted=0) and C.ECouponID=10173)  
  
set @NoOfRegistrationFailurebyBarcodeEnterYesterday= (select count( distinct ConsumerID) from coc_SadafcoBarcodesFailure(nolock) where  CONVERT(date,LogDate) = CONVERT(DATE,getdate()-1))  
 
  
  
  set @bodyMessage=N'<html><body><h4><p><b>Competition:</b> Saudia Icecream Summer </p></h4><p: '+Convert(nvarchar(100),getdate())+ N'</p><table border=''1''><tr><th>Total Participation in Competition till date </th><td><b>'+convert(nvarchar(20),@NoOfParticipationsByRegistrationSinceStart+ @ParticipationByBarcodeScanningSinceStart)+N'</b></td></tr></table> <br/><br/>';

set @bodyMessage=@bodyMessage+N'<table border=''1''><tr><th bgcolor="#5599ff">Participation Method </th><th bgcolor="#5599ff">Yesterday</th><th bgcolor="#5599ff">Today</th></tr><tr><th>Through Registration </th><td><b>'+convert(nvarchar(20),@NoOfParticipationsByRegistrationYesterday)+N'</b></td><td><b>'+convert(nvarchar(20),@NoOfParticipationsByRegistrationToday)+N'</b></td></tr>';  
set @bodyMessage=@bodyMessage+N'<tr><th>By Entering Barcode </th><td><b>'+convert(nvarchar(20),@ParticipationByBarcodeScanningYesterday)+N'</b></td><td><b>'+convert(nvarchar(20),@ParticipationByBarcodeScanningToday)+N'</b></td></tr>';  
set @bodyMessage=@bodyMessage+N'</table> <br/><br/>';  
  
set @bodyMessage=@bodyMessage+N'<table border=''1''><tr><th bgcolor="#5599ff"> </th><th bgcolor="#5599ff">Yesterday</th><th bgcolor="#5599ff">Today</th></tr><tr><th> No of incomplete Registrations </th><td><b>'+convert(nvarchar(20),@NoOFRegistrationsFailurbyOTPYesterday)+N'</b></td><td><b>'+convert(nvarchar(20),@NoOFRegistrationsFailurbyOTPToday)+N'</b></td></tr>';  
--set @bodyMessage=@bodyMessage+N'<tr><th>No Of Registration Failure By Barcode Enter</th><td><b>'+convert(nvarchar(20),@NoOfRegistrationFailurebyBarcodeEnterYesterday)+N'</b></tr>';  
  
  
  
set @bodyMessage1=@bodyMessage1+N'</table> <br/><br/></body></html>';  
  
exec msdb.dbo.sp_send_dbmail  
		 @profile_name = 'Email',      
		 @recipients = 'sumaya.bahamdain@sadafco.com; gabriel.predescu@sadafco.com; abdullah.alsaedi@sadafco.com',    
		@copy_recipients='shamim@e-copon.com;barayan@e-copon.com;amin@e-copon.com;kstel@e-copon.com',    
		@subject = N'Saudia Icecream Summer (Daily Summary)',  
		@body  = @bodyMessage, 
	    @body_format='HTML'  
  
end
GO
/****** Object:  StoredProcedure [dbo].[usp_SendEmailForCompetitionParticipation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_SendEmailForCompetitionParticipation]
AS
 SET NOCOUNT ON 
 begin
 DECLARE @ResultTable AS TABLE  
(   
[RetailOutletID] INTEGER,  
[RetailOutlet] NVARCHAR(200),  
[Today] INTEGER,  
[Yesterday] INTEGER  
) 

insert into @ResultTable
select RO.RetailOutletID, ROl.RetailOutlet, 
		(select count(*) from coc_ECouponParticipations(NOLOCK) EP_T where EP_T.RetailOutletID= RO.RetailOutletID and convert(date,EP_T.ParticipationDate)= convert(date, getdate()) and ECouponID= 10179 ) as Today,
		(select count(*) from coc_ECouponParticipations(NOLOCK) EP_Y where EP_Y.RetailOutletID= RO.RetailOutletID and convert(date,EP_Y.ParticipationDate)= DATEADD(day,-1,convert(date, getdate())) and ECouponID= 10179) as Yesterday
	from coc_RetailOutlets RO
		inner join coc_RetailOutletLanguages(NOLOCK) ROL ON ROL.RetailOutletID= RO.RetailOutletID
	where CorporateID= 3 and RO.RetailOutletID in (select RetailOutletID from coc_ECouponOutlets(NOLOCK) where ECouponID= 10179)


	 declare @RetailOutletID INTEGER
	 declare @RetailOutlet NVARCHAR(200)
	 declare @Today INTEGER
	 declare @Yesterday INTEGER
	 declare @desc nvarchar(max)
	 declare @TodayTotal INTEGER=0
	 declare @YesterdayTotal INTEGER=0


    set @desc='<html><body><p>Competition Name: Jeddah Season Shopping Festival</p><p>Current date: '+Convert(nvarchar(100),getdate())+'</p><table border=''1''><tr><th>Location</th><th>Yesterday</th><th>Today</th></tr>'
WHILE exists(select * from @ResultTable)
BEGIN
    set @RetailOutletID=0
	set @RetailOutlet=''
	set @Today=0
	set @Yesterday=0
	
    select top 1 @RetailOutletID=RetailOutletID,@RetailOutlet=RetailOutlet,@Today=Today,@Yesterday=Yesterday from @ResultTable
	set @desc=@desc+'<tr><td>'+@RetailOutlet+'</td><td>'+convert(nvarchar(20),@Yesterday)+'</td><td>'+convert(nvarchar(20),@Today)+'</td></tr>'
	set @TodayTotal=@TodayTotal+@Today
	set @YesterdayTotal=@YesterdayTotal+@Yesterday

    delete @ResultTable where RetailOutletID=@RetailOutletID
END
set @desc=@desc+'<tr><td>TOTAL</td><td>'+convert(nvarchar(20),@YesterdayTotal)+'</td><td>'+convert(nvarchar(20),@TodayTotal)+'</td></tr></table></body></html>';
--print @desc
exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = 'barayan@e-copon.com',
		@copy_recipients='shamim@logicsystems-me.com;mshafi@logicsystems-me.com;rafeeq3030@gmail.com',
		@subject = 'Jeddah Season Shopping Festival',
		@body  = @desc,
		@body_format='HTML'
end
GO
/****** Object:  StoredProcedure [dbo].[usp_SendEmailForCompetitionParticipationSummary]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_SendEmailForCompetitionParticipationSummary]
AS
 SET NOCOUNT ON 
 begin
 DECLARE @ResultTable AS TABLE  
(   
[RetailOutletID] INTEGER,  
[RetailOutlet] NVARCHAR(200),  
[Today] INTEGER,
[Total] INTEGER
) 

--JEDDAH SEASON

insert into @ResultTable
select RO.RetailOutletID, ROl.RetailOutlet, 
		(select count(*) from coc_ECouponParticipations(NOLOCK) EP_T where EP_T.RetailOutletID= RO.RetailOutletID and convert(date,EP_T.ParticipationDate)= convert(date, getdate()) and ECouponID= 10179 ) as Today,
		(select count(*) from coc_ECouponParticipations(NOLOCK) EP_T where EP_T.RetailOutletID= RO.RetailOutletID and ECouponID= 10179 ) as Total
	from coc_RetailOutlets(NOLOCK) RO
		inner join coc_RetailOutletLanguages(NOLOCK) ROL ON ROL.RetailOutletID= RO.RetailOutletID and ROL.LanguageID= 2
	where CorporateID= 3 and RO.RetailOutletID in (select RetailOutletID from coc_ECouponOutlets(NOLOCK) where ECouponID= 10179)
	order by Total desc

	 declare @RetailOutletID INTEGER
	 declare @RetailOutlet NVARCHAR(200)
	 --declare @Today INTEGER
	 declare @Total INTEGER
	 declare @desc nvarchar(max)
	 --declare @TodayTotal INTEGER=0
	 declare @GrandTotal INTEGER=0
	 declare @sms nvarchar(200)


    set @desc=N'<html><body style="direction:rtl"><p>اسم المسابقة : مهرجان موسم جدة للتسوق</p><p>تاريخ: '+Convert(nvarchar(100),getdate())+ N'</p><table border=''1''><tr><th>الموقع</th><th>اجمالي</th></tr>'
	--set @desc='<html><body><p>Competition Name: Jeddah Season Shopping Festival</p><p>Current date: '+Convert(nvarchar(100),getdate())+'</p><table border=''1''><tr><th>Location</th><th>Today</th><th>Total</th></tr>'
	set @sms = N'مسابقة مهرجان موسم جدة للتسوق'
	set @sms= @sms+ '
'
WHILE exists(select * from @ResultTable)
BEGIN
    set @RetailOutletID=0
	set @RetailOutlet=''
	--set @Today=0
	set @Total=0
	
    --select top 1 @RetailOutletID=RetailOutletID,@RetailOutlet=RetailOutlet,@Today=Today,@Total=Total from @ResultTable
	select top 1 @RetailOutletID=RetailOutletID,@RetailOutlet=RetailOutlet,@Total=Total from @ResultTable order by Total desc
	--set @desc=@desc+'<tr><td>'+@RetailOutlet+'</td><td>'+convert(nvarchar(20),@Today)+'</td><td>'+convert(nvarchar(20),@Total)+'</td></tr>'
	set @desc=@desc+N'<tr><td>'+@RetailOutlet+'</td><td>'+convert(nvarchar(20),@Total)+'</td></tr>'
	--set @TodayTotal=@TodayTotal+@Today
	set @GrandTotal=@GrandTotal+@Total
	set @sms = @sms+ N' '+@RetailOutlet +' ('+ convert(nvarchar(20),@Total) + ')
'
    delete @ResultTable where RetailOutletID=@RetailOutletID
END
--set @desc=@desc+'<tr><td>TOTAL</td><td>'+convert(nvarchar(20),@TodayTotal)+'</td><td>'+convert(nvarchar(20),@GrandTotal)+'</td></tr></table></body></html>';
set @desc=@desc+N'<tr><td><b>اجمالي</b></td><td><b>'+convert(nvarchar(20),@GrandTotal)+'</b></td></tr></table></body></html>';
--print @desc
exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = 'shamim@logicsystems-me.com;',
		@copy_recipients='shamim@logicsystems-me.com;mshafi@logicsystems-me.com;rafeeq3030@gmail.com',
		@subject = N'مهرجان موسم جدة للتسوق',
		@body  = @desc,
		@body_format='HTML'

exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = 'alsaaed@jcci.org.sa',
		@copy_recipients='barayan@e-copon.com;shamim@e-copon.com;kstel@e-copon.com',
		@subject = 'Jeddah Season Shopping Festival',
		@body  = @desc,
		@body_format='HTML'

set @sms = @sms+ N' اجمالي المشاركات ('+convert(nvarchar(20),@GrandTotal)+ ') '
exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = '966506111953@web.unifonic.com',
		@subject = 'send+eCopon+0b1344',
		@body  = @sms,
		@body_format='TEXT'
exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = '966504691644@web.unifonic.com',
		@subject = 'send+eCopon+0b1344',
		@body  = @sms,
		@body_format='TEXT'
exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = '966505355977@web.unifonic.com',
		@subject = 'send+eCopon+0b1344',
		@body  = @sms,
		@body_format='TEXT'
exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = '966555356030@web.unifonic.com',
		@subject = 'send+eCopon+0b1344',
		@body  = @sms,
		@body_format='TEXT'
exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = '966559555040@web.unifonic.com',
		@subject = 'send+eCopon+0b1344',
		@body  = @sms,
		@body_format='TEXT'
exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = '966541111074@web.unifonic.com',
		@subject = 'send+eCopon+0b1344',
		@body  = @sms,
		@body_format='TEXT'

end

GO
/****** Object:  StoredProcedure [dbo].[usp_SendEmailForCompetitionParticipationSummary_raya]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_SendEmailForCompetitionParticipationSummary_raya]
AS
 SET NOCOUNT ON 
 begin
 DECLARE @ResultTable AS TABLE  
(   
[RetailOutletID] INTEGER,  
[RetailOutlet] NVARCHAR(200),  
[Today] INTEGER,
[Total] INTEGER
) 

declare @eCoponID int = 10163
declare @CompetitionName nvarchar(100) 
declare @corporateid int
--select @CompetitionName= Value from co*c_ECouponLanguages where ECouponID= @eCoponID and LanguageID = 2 and ResourceKey = 'Name'
select  @CompetitionName = EService, @corporateid= CorporateID from coc_EServiceLanguages(NOLOCK) ESL 
	inner join coc_ECoupons(NOLOCK) EC ON EC.EServiceID= ESL.EServiceID and ESL.LanguageID= 1 
	inner join coc_eServices(NOLOCK) ES ON ES.EServiceID= EC.EServiceID
	where EC.ECouponID= @eCoponID 


insert into @ResultTable
select isnull(RO.RetailOutletID,-1) RetailOutletID, isnull(ROL.RetailOutlet , 'Barcode' ) RetailOutlet, 
	sum(case when convert(date,EP.ParticipationDate)= convert(date, getdate()) then 1 else 0 end), 
	count(*) from coc_ECouponParticipations(NOLOCK) EP 
		left join coc_RetailOutlets(NOLOCK) RO ON RO.RetailOutletID = EP.RetailOutletID
		left join coc_RetailOutletLanguages(NOLOCK) ROL ON ROL.RetailOutletID= RO.RetailOutletID and ROL.LanguageID= 1
		where EP.ECouponID= @eCoponID
		group by RO.RetailOutletID, ROl.RetailOutlet
		order by RetailOutlet

--select RO.RetailOutletID, ROl.RetailOutlet, 
--		(select count(*) from coc_ECouponParticipations EP_T where EP_T.RetailOutletID= RO.RetailOutletID and convert(date,EP_T.ParticipationDate)= convert(date, getdate()) and ECouponID= @eCoponID ) as Today,
--		(select count(*) from coc_ECouponParticipations EP_T where EP_T.RetailOutletID= RO.RetailOutletID and ECouponID= @eCoponID ) as Total
--	from coc_RetailOutlets RO
--		left join coc_RetailOutletLanguages ROL ON ROL.RetailOutletID= RO.RetailOutletID and ROL.LanguageID= 1
--	where CorporateID= @corporateid and RO.RetailOutletID in (select RetailOutletID from coc_ECouponOutlets where ECouponID= @eCoponID)
--	order by Total desc

	 declare @RetailOutletID INTEGER
	 declare @RetailOutlet NVARCHAR(200)
	 --declare @Today INTEGER
	 declare @Total INTEGER
	 declare @desc nvarchar(max)
	 --declare @TodayTotal INTEGER=0
	 declare @GrandTotal INTEGER=0
	 declare @sms nvarchar(max)


    set @desc=N'<html><body style="direction:rtl"><p>Competition Name : '+@CompetitionName+N'</p><p>Date: '+Convert(nvarchar(100),getdate())+ N'</p><table border=''1''><tr><th>Location</th><th>Total</th></tr>'
	--set @desc='<html><body><p>Competition Name: Jeddah Season Shopping Festival</p><p>Current date: '+Convert(nvarchar(100),getdate())+'</p><table border=''1''><tr><th>Location</th><th>Today</th><th>Total</th></tr>'
	set @sms = @CompetitionName
	set @sms= @sms+ '
'
WHILE exists(select * from @ResultTable)
BEGIN
    set @RetailOutletID=0
	set @RetailOutlet=''
	--set @Today=0
	set @Total=0
	
    --select top 1 @RetailOutletID=RetailOutletID,@RetailOutlet=RetailOutlet,@Today=Today,@Total=Total from @ResultTable
	select top 1 @RetailOutletID=RetailOutletID,@RetailOutlet=RetailOutlet,@Total=Total from @ResultTable order by Total desc
	--set @desc=@desc+'<tr><td>'+@RetailOutlet+'</td><td>'+convert(nvarchar(20),@Today)+'</td><td>'+convert(nvarchar(20),@Total)+'</td></tr>'
	set @desc=@desc+N'<tr><td>'+@RetailOutlet+'</td><td>'+convert(nvarchar(20),@Total)+'</td></tr>'
	--set @TodayTotal=@TodayTotal+@Today
	set @GrandTotal=@GrandTotal+@Total
	set @sms = @sms+ N' '+@RetailOutlet +' ('+ convert(nvarchar(20),@Total) + ')
'
    delete @ResultTable where RetailOutletID=@RetailOutletID
END
--set @desc=@desc+'<tr><td>TOTAL</td><td>'+convert(nvarchar(20),@TodayTotal)+'</td><td>'+convert(nvarchar(20),@GrandTotal)+'</td></tr></table></body></html>';
set @desc=@desc+N'<tr><td><b>Total</b></td><td><b>'+convert(nvarchar(20),@GrandTotal)+'</b></td></tr></table></body></html>';
--print @desc
exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = 'alimoze@alraya.com.sa;',
		@copy_recipients='shamim@e-copon.com;kstel@e-copon.com;barayan@e-copon.com;',
		@subject = @CompetitionName,
		@body  = @desc,
		@body_format='HTML'

exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = 'shamim@logicsystems-me.com;',
		@subject = @CompetitionName,
		@body  = @desc,
		@body_format='HTML'

set @sms = @sms+ N' Total Participations ('+convert(nvarchar(20),@GrandTotal)+ ') '
exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = '966506111953@web.unifonic.com;',
		@subject = 'send+eCopon+0b1344',
		@body  = @sms,
		@body_format='TEXT'


set @sms = @sms+ N' Total Participations ('+convert(nvarchar(20),@GrandTotal)+ ') '
exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = '966504691644@web.unifonic.com;',
		@subject = 'send+eCopon+0b1344',
		@body  = @sms,
		@body_format='TEXT'


set @sms = @sms+ N' Total Participations ('+convert(nvarchar(20),@GrandTotal)+ ') '
exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = '966504649015@web.unifonic.com ',
		@subject = 'send+eCopon+0b1344',
		@body  = @sms,
		@body_format='TEXT'


set @sms = @sms+ N' Total Participations ('+convert(nvarchar(20),@GrandTotal)+ ') '
exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = '966509719678@web.unifonic.com ',
		@subject = 'send+eCopon+0b1344',
		@body  = @sms,
		@body_format='TEXT'
		--00966504649015@web.unifonic.com;00966509719678@web.unifonic.com
end

GO
/****** Object:  StoredProcedure [dbo].[usp_SendEmailForCouponDraw]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
 CREATE PROCEDURE [dbo].[usp_SendEmailForCouponDraw]  
AS  
 SET NOCOUNT ON   
  declare @CompetitionName nvarchar(1000)  
  declare @DrawName nvarchar(1000)  
  declare @LocationName nvarchar(1000)  
  declare @DrawDate datetime=null  
  declare @EcouponId bigint  
  declare @EServiceID int  
  declare @ServiceName nvarchar(1000)  
  declare @desc nvarchar(max)  
  declare @ECouponDrawID bigint  
  declare @RetailOutletCount int  
  declare @EmailSubject varchar(100)   
  select @EmailSubject = 'Draw Details'  
  
  declare @startdate datetime  
  declare @enddate datetime  
  set @startdate=getdate() -1 
  set @enddate=@startdate+7  
  
  declare @html1 nvarchar(max)  
  declare @html2 nvarchar(max)  
     set @html1='<html><head></head><body><table border=''1''><tr><th>Competition Name</th><th>Draw Name</th><th>Location</th><th>Draw Date</th><th>Outlets</th></tr>';   
  set @html2='</table></body></html>';  
  set @desc=''  
  
  
  
declare @DrawDetails table (ECouponDrawID bigint,ECouponID bigint,DrawDate datetime,Location nvarchar(500), RetailOutletCount int)     
insert into @DrawDetails  
  select ECouponDrawID,ECouponID,DrawDate,isnull(Location,'') ,   
  (select count(*) from coc_ECouponDrawPrizes(NOLOCK) DRO where DRO.ECouponDrawID = ED.ECouponDrawID) from coc_ECouponDraw(NOLOCK) ED where DrawDate>=@startdate and DrawDate<=@enddate order by DrawDate asc  
WHILE exists(select * from @DrawDetails)  
BEGIN  
    set @ECouponDrawID=0  
    set @CompetitionName=''  
 set @DrawName=''  
 set @LocationName=''  
 set @DrawDate=null  
 set @EcouponId=0  
 set @ECouponDrawID=0  
 set @EServiceID=0  
 set @ServiceName=''  
 set @RetailOutletCount=0  
   
 select top 1 @ECouponDrawID=ECouponDrawID,@EcouponId=ECouponID,@DrawDate=DrawDate,@LocationName=Location, @RetailOutletCount= RetailOutletCount  
  from @DrawDetails order by DrawDate asc  
      
 select @EServiceID=EServiceID from coc_ECoupons(NOLOCK) where ECouponID=@EcouponId  
  
 select @ServiceName=EService from coc_EServiceLanguages(NOLOCK) where EServiceID=@EServiceID and LanguageID=1  
  
 select @DrawName=Value from coc_ECouponDrawLanguages(NOLOCK) where ECouponDrawID=@ECouponDrawID and LanguageID=1 and ResourceKey='Name'  
 if @RetailOutletCount = 0   
  select @EmailSubject = 'Draw Details (Warning)!!!!!'   
 if(@DrawDate<=getdate()+3)  
  begin  
    set @desc=@desc+'<tr style=''background-color:#51ff51;''><td>'+@ServiceName+'</td><td>'+@DrawName+'</td><td>'+@LocationName+'</td><td>'+convert(nvarchar(50),@DrawDate)+'</td><td>'+convert(nvarchar(50),@RetailOutletCount)+'</td></tr>';  
  end  
 else  
   begin  
     set @desc=@desc+'<tr style=''background-color:#ffb100;''><td>'+@ServiceName+'</td><td>'+@DrawName+'</td><td>'+@LocationName+'</td><td>'+convert(nvarchar(50),@DrawDate)+'</td><td>'+convert(nvarchar(50),@RetailOutletCount)+'</td></tr>';  
   end  
 delete @DrawDetails where ECouponDrawID=@ECouponDrawID  
END  
  
   IF (@desc<>'')  
 begin  
     set @desc=@html1+@desc+@html2  
  exec msdb.dbo.sp_send_dbmail  
  @profile_name = 'Email',  
  @recipients = 'shamim@logicsystems-me.com;amer.syed@logicsystems-me.com;feroz@logicsystems-me.com;',  
  @copy_recipients='shamim@logicsystems-me.com;mshafi@logicsystems-me.com;rafeeq@logicsystems-me.com',  
  @subject = @EmailSubject,  
  @body  = @desc,  
  @body_format='HTML'  
 End  
      
  
GO
/****** Object:  StoredProcedure [dbo].[usp_SendEmailForDailySummary_ecopon]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_SendEmailForDailySummary_ecopon]
as
begin

	declare @YesterdayRegistrations INTEGER
	select @YesterdayRegistrations = count(*) from coc_Consumers (NOLOCK) 
		where convert(date, Adddate) = convert(date, dateadd(day,-1,getdate()))

	declare @YesterdayParticipationTotal INTEGER
	declare @YesterdayMaxParticipationHour INTEGER
	declare @YesterdayMaxParticipationHourCount INTEGER
	
	declare @TodayParticipationTotal INTEGER
	
	select top 1 --convert(date, ParticipationDate) ,
			@YesterdayMaxParticipationHour = datepart(hour, ParticipationDate) , 
			@YesterdayMaxParticipationHourCount = count(*)  
		from coc_ECouponParticipations(NOLOCK) where ParticipationDate is not null
			and convert(date, ParticipationDate) = convert(date, dateadd(day,-1,getdate()))
		group by convert(date, ParticipationDate) ,datepart(hour, ParticipationDate) 
		order by count(*)  desc 

	select @YesterdayParticipationTotal =  count(*)  
		from coc_ECouponParticipations(NOLOCK) where ParticipationDate is not null
			and convert(date, ParticipationDate) = convert(date, dateadd(day,-1,getdate()))
		
	select @TodayParticipationTotal =  count(*)  
		from coc_ECouponParticipations(NOLOCK) where ParticipationDate is not null
			and convert(date, ParticipationDate) = convert(date, dateadd(day,0,getdate()))
	
 DECLARE @CompetitionSummartTable AS TABLE  
(   
[eCouponID] INTEGER,  
[CompetitionName] NVARCHAR(200),  
[Yesterday] INTEGER,
[Today] integer,
[Total] INTEGER,
[StartDate] date,
[EndDate] date
) 

declare @eCoponID int
declare @CompetitionName nvarchar(100) 
	

insert into @CompetitionSummartTable
select EP.ECouponID, ESL.EService CompetitionName, 
		sum(case when convert(date,EP.ParticipationDate)= dateadd(day,-1,convert(date, getdate())) then 1 else 0 end) Yesterday, 
		sum(case when convert(date,EP.ParticipationDate)= convert(date, getdate()) then 1 else 0 end) ToDay, 
		count(*) Total,CONVERT(date,es.FromDate),CONVERT(date,es.ToDate)
	from coc_ECouponParticipations (NOLOCK) EP 
		inner join coc_ECoupons(NOLOCK) EC ON EC.ECouponID= EP.ECouponID
		inner  join coc_eServices(NOLOCK) ES ON ES.EServiceID= EC.EServiceID
		inner join coc_EServiceLanguages(NOLOCK) ESL ON ESL.EServiceID = EC.EServiceID and ESL.LanguageID= 1
	where ES.IsActive = 1 
		and convert(date, getdate()) between ES.FromDate and dateadd(day,1,ES.ToDate)
		--and ES.ToDate between dateadd(day,-1,convert(date, getdate()))  and convert(date, getdate())
		--and ES.FromDate between dateadd(day,-1,convert(date, getdate()))  and convert(date, getdate())
	group by EP.ECouponID, ESL.EService,Es.FromDate,Es.ToDate
	order by Yesterday desc

--select RO.RetailOutletID, ROl.RetailOutlet, 
--		(select count(*) from coc_ECouponParticipations EP_T where EP_T.RetailOutletID= RO.RetailOutletID and convert(date,EP_T.ParticipationDate)= convert(date, getdate()) and ECouponID= @eCoponID ) as Today,
--		(select count(*) from coc_ECouponParticipations EP_T where EP_T.RetailOutletID= RO.RetailOutletID and ECouponID= @eCoponID ) as Total
--	from coc_RetailOutlets RO
--		left join coc_RetailOutletLanguages ROL ON ROL.RetailOutletID= RO.RetailOutletID and ROL.LanguageID= 1
--	where CorporateID= @corporateid and RO.RetailOutletID in (select RetailOutletID from coc_ECouponOutlets where ECouponID= @eCoponID)
--	order by Total desc

	
	 declare @Yesterday INTEGER
	 declare @Total INTEGER
	 declare @desc nvarchar(max)
	 declare @YesterdayTotal INTEGER=0
	 declare @GrandTotal INTEGER=0
	 declare @sms nvarchar(max)

	 	

	set @desc=N'<html><body style="direction:ltr"><p>Date: <b>'+Convert(nvarchar(100),getdate())+ N'</b></p><p>Registrations Yesterday:<b>'+ Convert(nvarchar(100), @YesterdayRegistrations) +N'</b> </p>'
	
	set @desc= @desc + N'<p>Today''s Total Participations <b>'+Convert(nvarchar(100),@TodayParticipationTotal)+'</b> </p>'
	set @desc= @desc + N'<p>Yesterday''s Total Participations <b>'+Convert(nvarchar(100),@YesterdayParticipationTotal)+'</b> </p>'
	
	set @desc= @desc + N'<p>Yesterday Maximum Participations of <b>'+Convert(nvarchar(100),@YesterdayMaxParticipationHourCount)+'</b> during the hour <b>'+Convert(nvarchar(100),@YesterdayMaxParticipationHour)+'</b></p>'
	set @desc= @desc + N'<hr>'
    set @desc= @desc + N'<p><b>Competition Participation Summary as below</b></p><table border=''1''><tr bgcolor="#aaaaaa"><th>S.No</th><th>Date</th><th>Competition Name</th><th>Period(Days)</th><th>Past To</th><th>Coming In</th><th>Participation for today</th><th>Participation for yesterday</th><th>Total Participation</th></tr>'
	--set @desc='<html><body><p>Competition Name: Jeddah Season Shopping Festival</p><p>Current date: '+Convert(nvarchar(100),getdate())+'</p><table border=''1''><tr><th>Location</th><th>Today</th><th>Total</th></tr>'
	--set @sms = @CompetitionName
	--set @sms= @sms+ '
--'
Declare @Sno int = 1;
Declare @PeriodDays int;
Declare @PastTo int;
Declare @ComingIn int;
Declare @PRCForToday int ;
WHILE exists(select * from @CompetitionSummartTable)
BEGIN
    set @eCoponID=0
	set @CompetitionName=''
	set @Yesterday=0
	set @Total=0
	set @PeriodDays = 0;
	set @PastTo = 0;
	set @ComingIn = 0;
	set @PRCForToday = 0 ;
    --select top 1 @RetailOutletID=RetailOutletID,@RetailOutlet=RetailOutlet,@Today=Today,@Total=Total from @CompetitionSummartTable
	select top 1 @eCoponID=eCouponID,@CompetitionName=CompetitionName,@Yesterday=Yesterday,@Total=Total,@PeriodDays=DATEDIFF(DAY, StartDate, EndDate),@PastTo=DATEDIFF(DAY, StartDate, CONVERT(date,GETDATE()-1)),@ComingIn=DATEDIFF(DAY, CONVERT(date,GETDATE()), DATEADD(day,1,EndDate)),@PRCForToday=Today from @CompetitionSummartTable order by Yesterday desc
	set @desc=@desc+N'<tr><td>'+convert(nvarchar(5),@Sno)+'</td><td>'+CONVERT(nvarchar(100),convert(date,GETDATE()))+'</td><td>'+@CompetitionName+'</td><td>'+convert(nvarchar(20),@PeriodDays)+'</td><td>'+convert(nvarchar(20),@PastTo)+'</td><td>'+convert(nvarchar(20),@ComingIn)+'</td><td>'+convert(nvarchar(20),@PRCForToday)+'</td><td>'+convert(nvarchar(20),@Yesterday)+'</td><td>'+convert(nvarchar(20),@Total)+'</td></tr>'
	--set @desc=@desc+N'<tr><td>'+@CompetitionName+'</td><td>'+convert(nvarchar(20),@Total)+'</td></tr>'
	set @YesterdayTotal=@YesterdayTotal+@Yesterday
	set @GrandTotal=@GrandTotal+@Total
	--set @sms = @sms+ N' '+@RetailOutlet +' ('+ convert(nvarchar(20),@Total) + ')
--'
    delete @CompetitionSummartTable where eCouponID=@eCoponID
	set @Sno=@Sno+1;
END
--set @desc=@desc+N'<tr bgcolor="#0066aa"><td><b>TOTAL</b></td><td><b>'+convert(nvarchar(20),@YesterdayTotal)+'</b></td><td><b>'+convert(nvarchar(20),@GrandTotal)+'</b></td></tr></table></body></html>';
--print @desc
declare @subject varchar(100)
select @subject= 'eCopon Daily Summary: [' + convert(varchar,getdate(),105)+']'

exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = 'kstel@e-copon.com;barayan@e-copon.com;amin@e-copon.com;',
		@copy_recipients='rafeeq3030@gmail.com;shamim@e-copon.com;shamim@logicsystems-me.com;mshafi@logicsystems-me.com',
		@subject = @subject,
		@body  = @desc,
		@body_format='HTML'

end
GO
/****** Object:  StoredProcedure [dbo].[usp_SendEmailForDailySummary_ecopon_backup]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_SendEmailForDailySummary_ecopon_backup]
AS
 SET NOCOUNT ON 
 begin


	declare @YesterdayRegistrations INTEGER
	select @YesterdayRegistrations = count(*) from coc_Consumers (NOLOCK) 
		where convert(date, Adddate) = convert(date, dateadd(day,-1,getdate()))

	declare @YesterdayParticipationTotal INTEGER
	declare @YesterdayMaxParticipationHour INTEGER
	declare @YesterdayMaxParticipationHourCount INTEGER
	
	select top 1 --convert(date, ParticipationDate) ,
			@YesterdayMaxParticipationHour = datepart(hour, ParticipationDate) , 
			@YesterdayMaxParticipationHourCount = count(*)  
		from coc_ECouponParticipations(NOLOCK) where ParticipationDate is not null
			and convert(date, ParticipationDate) = convert(date, dateadd(day,-1,getdate()))
		group by convert(date, ParticipationDate) ,datepart(hour, ParticipationDate) 
		order by count(*)  desc 

	select @YesterdayParticipationTotal =  count(*)  
		from coc_ECouponParticipations(NOLOCK) where ParticipationDate is not null
			and convert(date, ParticipationDate) = convert(date, dateadd(day,-1,getdate()))
		

 DECLARE @CompetitionSummartTable AS TABLE  
(   
[eCouponID] INTEGER,  
[CompetitionName] NVARCHAR(200),  
[Yesterday] INTEGER,
[Total] INTEGER
) 

declare @eCoponID int
declare @CompetitionName nvarchar(100) 
	

insert into @CompetitionSummartTable
select EP.ECouponID, ESL.EService CompetitionName, 
		sum(case when convert(date,EP.ParticipationDate)= dateadd(day,-1,convert(date, getdate())) then 1 else 0 end) Yesterday, 
		count(*) Total
	from coc_ECouponParticipations(NOLOCK) EP 
		inner join coc_ECoupons(NOLOCK) EC ON EC.ECouponID= EP.ECouponID
		inner  join coc_eServices(NOLOCK) ES ON ES.EServiceID= EC.EServiceID
		inner join coc_EServiceLanguages(NOLOCK) ESL ON ESL.EServiceID = EC.EServiceID and ESL.LanguageID= 1
	where ES.IsActive = 1 
		and convert(date, getdate()) between ES.FromDate and dateadd(day,1,ES.ToDate)
		--and ES.ToDate between dateadd(day,-1,convert(date, getdate()))  and convert(date, getdate())
		--and ES.FromDate between dateadd(day,-1,convert(date, getdate()))  and convert(date, getdate())
	group by EP.ECouponID, ESL.EService
	order by Yesterday desc

--select RO.RetailOutletID, ROl.RetailOutlet, 
--		(select count(*) from coc_ECouponParticipations EP_T where EP_T.RetailOutletID= RO.RetailOutletID and convert(date,EP_T.ParticipationDate)= convert(date, getdate()) and ECouponID= @eCoponID ) as Today,
--		(select count(*) from coc_ECouponParticipations EP_T where EP_T.RetailOutletID= RO.RetailOutletID and ECouponID= @eCoponID ) as Total
--	from coc_RetailOutlets RO
--		left join coc_RetailOutletLanguages ROL ON ROL.RetailOutletID= RO.RetailOutletID and ROL.LanguageID= 1
--	where CorporateID= @corporateid and RO.RetailOutletID in (select RetailOutletID from coc_ECouponOutlets where ECouponID= @eCoponID)
--	order by Total desc

	
	 declare @Yesterday INTEGER
	 declare @Total INTEGER
	 declare @desc nvarchar(max)
	 declare @YesterdayTotal INTEGER=0
	 declare @GrandTotal INTEGER=0
	 declare @sms nvarchar(max)

	 	

	set @desc=N'<html><body style="direction:ltr"><p>Date: <b>'+Convert(nvarchar(100),getdate())+ N'</b></p><p>Registrations Yesterday:<b>'+ Convert(nvarchar(100), @YesterdayRegistrations) +N'</b> </p>'
	
	set @desc= @desc + N'<p>Yesterday''s Total Participations <b>'+Convert(nvarchar(100),@YesterdayParticipationTotal)+'</b> </p>'
	
	set @desc= @desc + N'<p>Yesterday Maximum Participations of <b>'+Convert(nvarchar(100),@YesterdayMaxParticipationHourCount)+'</b> during the hour <b>'+Convert(nvarchar(100),@YesterdayMaxParticipationHour)+'</b></p>'
	set @desc= @desc + N'<hr>'
    set @desc= @desc + N'<p><b>Competition Participation Summary as below</b></p><table border=''1''><tr bgcolor="#aaaaaa"><th>Competition Name</th><th>Yesterday</th><th>Total</th></tr>'
	--set @desc='<html><body><p>Competition Name: Jeddah Season Shopping Festival</p><p>Current date: '+Convert(nvarchar(100),getdate())+'</p><table border=''1''><tr><th>Location</th><th>Today</th><th>Total</th></tr>'
	--set @sms = @CompetitionName
	--set @sms= @sms+ '
--'
WHILE exists(select * from @CompetitionSummartTable)
BEGIN
    set @eCoponID=0
	set @CompetitionName=''
	set @Yesterday=0
	set @Total=0
	
    --select top 1 @RetailOutletID=RetailOutletID,@RetailOutlet=RetailOutlet,@Today=Today,@Total=Total from @CompetitionSummartTable
	select top 1 @eCoponID=eCouponID,@CompetitionName=CompetitionName,@Yesterday=Yesterday,@Total=Total from @CompetitionSummartTable order by Yesterday desc
	set @desc=@desc+N'<tr><td>'+@CompetitionName+'</td><td>'+convert(nvarchar(20),@Yesterday)+'</td><td>'+convert(nvarchar(20),@Total)+'</td></tr>'
	--set @desc=@desc+N'<tr><td>'+@CompetitionName+'</td><td>'+convert(nvarchar(20),@Total)+'</td></tr>'
	set @YesterdayTotal=@YesterdayTotal+@Yesterday
	set @GrandTotal=@GrandTotal+@Total
	--set @sms = @sms+ N' '+@RetailOutlet +' ('+ convert(nvarchar(20),@Total) + ')
--'
    delete @CompetitionSummartTable where eCouponID=@eCoponID
END
set @desc=@desc+N'<tr bgcolor="#0066aa"><td><b>TOTAL</b></td><td><b>'+convert(nvarchar(20),@YesterdayTotal)+'</b></td><td><b>'+convert(nvarchar(20),@GrandTotal)+'</b></td></tr></table></body></html>';
--print @desc
declare @subject varchar(100)
select @subject= 'eCopon Daily Summary: [' + convert(varchar,getdate(),105)+']'

exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = 'kstel@e-copon.com;barayan@e-copon.com;amin@e-copon.com;',
		@copy_recipients='shamim@e-copon.com;shamim@logicsystems-me.com;mshafi@logicsystems-me.com',
		@subject = @subject,
		@body  = @desc,
		@body_format='HTML'
		

--set @sms = @sms+ N' Total Participations ('+convert(nvarchar(20),@GrandTotal)+ ') '
--exec msdb.dbo.sp_send_dbmail
--		@profile_name = 'Email',
--		@recipients = '966506111953@web.unifonic.com;',
--		@subject = 'send+eCopon+0b1344',
--		@body  = @sms,
--		@body_format='TEXT'


end
GO
/****** Object:  StoredProcedure [dbo].[usp_SendEmailForDailySummary_voucher]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_SendEmailForDailySummary_voucher]
as
begin

	--declare @GetVoucherYesterdayRegistrations INTEGER
	--select @GetVoucherYesterdayRegistrations = count(*) from coc_Consumers (NOLOCK) 
	--	where convert(date, Adddate) = convert(date, dateadd(day,-1,getdate()))

	declare @GetVoucherSummaryYesterdayTotal INTEGER
	declare @GetVoucherSummaryYesterdayMaxHour INTEGER
	declare @GetVoucherSummaryYesterdayMaxHourCount INTEGER

	declare @RedeemVoucherSummaryYesterdayTotal INTEGER
	--declare @RedeemVoucherSummaryYesterdayMaxHour INTEGER
	--declare @RedeemVoucherSummaryYesterdayMaxHourCount INTEGER
	
	declare @GetVoucherSummaryTodayTotal INTEGER
	declare @RedeemVoucherSummaryTodayTotal INTEGER
	
	select top 1 --convert(date, ParticipationDate) ,
			@GetVoucherSummaryYesterdayMaxHour = datepart(hour, AssignedDate) , 
			@GetVoucherSummaryYesterdayMaxHourCount = count(*) 
		from coc_EVoucher (NOLOCK) EV 
			inner  join coc_eServices(NOLOCK) ES ON ES.EServiceID= EV.EServiceID
			inner join coc_EServiceLanguages(NOLOCK) ESL ON ESL.EServiceID = EV.EServiceID and ESL.LanguageID= 1
			inner join coc_Notifications (NOLOCk) N ON N.EServiceID= EV.EServiceID
			inner join coc_EServiceBarcodes (NOLOCK) ESB ON ESB.NotificationID = N.NotificationID
		where AssignedDate is not null
			and convert(date, AssignedDate) = convert(date, dateadd(day,-1,getdate()))
		group by convert(date, AssignedDate) ,datepart(hour, AssignedDate) 
		order by count(*)  desc 
		
	select @GetVoucherSummaryYesterdayTotal =  count(*)  
		from coc_EVoucher (NOLOCK) EV 
			inner  join coc_eServices(NOLOCK) ES ON ES.EServiceID= EV.EServiceID
			inner join coc_EServiceLanguages(NOLOCK) ESL ON ESL.EServiceID = EV.EServiceID and ESL.LanguageID= 1
			inner join coc_Notifications (NOLOCk) N ON N.EServiceID= EV.EServiceID
			inner join coc_EServiceBarcodes (NOLOCK) ESB ON ESB.NotificationID = N.NotificationID
		where AssignedDate is not null
			and convert(date, AssignedDate) = convert(date, dateadd(day,-1,getdate()))
	
	select @GetVoucherSummaryTodayTotal =  count(*)  
		from coc_EVoucher (NOLOCK) EV 
			inner  join coc_eServices(NOLOCK) ES ON ES.EServiceID= EV.EServiceID
			inner join coc_EServiceLanguages(NOLOCK) ESL ON ESL.EServiceID = EV.EServiceID and ESL.LanguageID= 1
			inner join coc_Notifications (NOLOCk) N ON N.EServiceID= EV.EServiceID
			inner join coc_EServiceBarcodes (NOLOCK) ESB ON ESB.NotificationID = N.NotificationID
		where AssignedDate is not null
			and convert(date, AssignedDate) = convert(date, dateadd(day,0,getdate()))

	select @RedeemVoucherSummaryTodayTotal =  count(*)  
		from coc_EVoucher (NOLOCK) EV 
			inner  join coc_eServices(NOLOCK) ES ON ES.EServiceID= EV.EServiceID
			inner join coc_EServiceLanguages(NOLOCK) ESL ON ESL.EServiceID = EV.EServiceID and ESL.LanguageID= 1
			inner join coc_Notifications (NOLOCk) N ON N.EServiceID= EV.EServiceID
			inner join coc_EServiceBarcodes (NOLOCK) ESB ON ESB.NotificationID = N.NotificationID
		where UsedDate is not null
			and convert(date, UsedDate) = convert(date, dateadd(day,0,getdate()))
	
	select @GetVoucherSummaryYesterdayTotal =  count(*)  
		from coc_EVoucher (NOLOCK) EV 
			inner  join coc_eServices(NOLOCK) ES ON ES.EServiceID= EV.EServiceID
			inner join coc_EServiceLanguages(NOLOCK) ESL ON ESL.EServiceID = EV.EServiceID and ESL.LanguageID= 1
			inner join coc_Notifications (NOLOCk) N ON N.EServiceID= EV.EServiceID
			inner join coc_EServiceBarcodes (NOLOCK) ESB ON ESB.NotificationID = N.NotificationID
		where AssignedDate is not null
			and convert(date, AssignedDate) = convert(date, dateadd(day,-1,getdate()))
	
	select @RedeemVoucherSummaryYesterdayTotal =  count(*)  
		from coc_EVoucher (NOLOCK) EV 
			inner  join coc_eServices(NOLOCK) ES ON ES.EServiceID= EV.EServiceID
			inner join coc_EServiceLanguages(NOLOCK) ESL ON ESL.EServiceID = EV.EServiceID and ESL.LanguageID= 1
			inner join coc_Notifications (NOLOCk) N ON N.EServiceID= EV.EServiceID
			inner join coc_EServiceBarcodes (NOLOCK) ESB ON ESB.NotificationID = N.NotificationID
		where UsedDate is not null
			and convert(date, UsedDate) = convert(date, dateadd(day,-1,getdate()))

	
 DECLARE @VoucherDetailTable AS TABLE  
(   
[eCouponID] INTEGER,  
[VoucherName] NVARCHAR(200),  
[GetVoucherYesterday] INTEGER,
[GetVoucherToday] integer,
[GetVoucherTotal] INTEGER,
[RedeemYesterday] INTEGER,
[RedeemToday] integer,
[RedeemTotal] INTEGER,
[StartDate] date,
[EndDate] date
) 

declare @eCoponID int
declare @VoucherName nvarchar(100) 
	

insert into @VoucherDetailTable
select EV.EVoucherID, ESL.EService VoucherName, 
		sum(case when convert(date,ESB.AssignedDate)= dateadd(day,-1,convert(date, getdate())) then 1 else 0 end) GetVoucherYesterday, 
		sum(case when convert(date,ESB.AssignedDate)= convert(date, getdate()) then 1 else 0 end) GetVoucherToday, 
		sum(case when ESB.AssignedDate is not null then 1 else 0 end) GetVoucherTotal,
		sum(case when convert(date,ESB.UsedDate)= dateadd(day,-1,convert(date, getdate())) then 1 else 0 end) RedeemYesterday, 
		sum(case when convert(date,ESB.UsedDate)= convert(date, getdate()) then 1 else 0 end) RedeemToday, 
		sum(case when ESB.UsedDate is not null then 1 else 0 end) RedeemTotal,
		--count(*) GetVoucherTotal,
		CONVERT(date,es.FromDate),CONVERT(date,es.ToDate)
	from  
		coc_EVoucher (NOLOCK) EV 
		inner  join coc_eServices(NOLOCK) ES ON ES.EServiceID= EV.EServiceID
		inner join coc_EServiceLanguages(NOLOCK) ESL ON ESL.EServiceID = EV.EServiceID and ESL.LanguageID= 1
		inner join coc_Notifications (NOLOCk) N ON N.EServiceID= EV.EServiceID
		inner join coc_EServiceBarcodes (NOLOCK) ESB ON ESB.NotificationID = N.NotificationID
	where ES.IsActive = 1 and EV.IsActive= 1
		and convert(date, getdate()) between ES.FromDate and dateadd(day,1,ES.ToDate)
		--and ES.ToDate between dateadd(day,-1,convert(date, getdate()))  and convert(date, getdate())
		--and ES.FromDate between dateadd(day,-1,convert(date, getdate()))  and convert(date, getdate())
	group by EV.EVoucherID, ESL.EService,Es.FromDate,Es.ToDate
	order by GetVoucherYesterday desc

--select RO.RetailOutletID, ROl.RetailOutlet, 
--		(select count(*) from coc_ECouponParticipations EP_T where EP_T.RetailOutletID= RO.RetailOutletID and convert(date,EP_T.ParticipationDate)= convert(date, getdate()) and ECouponID= @eCoponID ) as GetVoucherToday,
--		(select count(*) from coc_ECouponParticipations EP_T where EP_T.RetailOutletID= RO.RetailOutletID and ECouponID= @eCoponID ) as GetVoucherTotal
--	from coc_RetailOutlets RO
--		left join coc_RetailOutletLanguages ROL ON ROL.RetailOutletID= RO.RetailOutletID and ROL.LanguageID= 1
--	where CorporateID= @corporateid and RO.RetailOutletID in (select RetailOutletID from coc_ECouponOutlets where ECouponID= @eCoponID)
--	order by GetVoucherTotal desc

	
	 declare @GetVoucherYesterday INTEGER
	 declare @GetVoucherTotal INTEGER
	 declare @desc nvarchar(max)
	 declare @GetVoucherYesterdayTotal INTEGER=0
	 declare @GrandGetVoucherTotal INTEGER=0
	 declare @sms nvarchar(max)
	 Declare @GetVoucherToday int ;

	 
	 	

	set @desc=N'<html><body style="direction:ltr"><p>Date: <b> '+Convert(nvarchar(100),getdate())+ N'</b></p>'
	--<p> GetVoucherYesterday:<b>'+ Convert(nvarchar(100), @GetVoucherYesterdayRegistrations) +N'</b> </p>

	set @desc= @desc + N'<p>Today''s Total Get Voucher : <b> '+Convert(nvarchar(100),isnull(@GetVoucherSummaryTodayTotal,0))+'</b> </p>'
	set @desc= @desc + N'<p>Yesterday''s Total get Voucher : <b> '+Convert(nvarchar(100),isnull(@GetVoucherSummaryYesterdayTotal,0))+'</b> </p>'
	
	set @desc= @desc + N'<p>GetVoucherYesterday Maximum get Voucher of : <b> '+Convert(nvarchar(100),isnull(@GetVoucherSummaryYesterdayMaxHourCount,'0'))+'</b> during the hour <b>'+Convert(nvarchar(100),isnull(@GetVoucherSummaryYesterdayMaxHour,'-'))+'</b></p></br>'
	
	set @desc= @desc + N'<p>Today''s Total Redeem Voucher : <b> '+Convert(nvarchar(100),isnull(@RedeemVoucherSummaryTodayTotal,0))+'</b> </p>'
	set @desc= @desc + N'<p>Yesterday''s Total Redeem Voucher : <b> '+Convert(nvarchar(100),isnull(@RedeemVoucherSummaryYesterdayTotal,0))+'</b> </p>'
	
	set @desc= @desc + N'<hr>'
    set @desc= @desc + N'<p><b>Voucher Summary as below : </b></p><table border=''1''><tr bgcolor="#aaaaaa"><th>S.No</th><th>Date</th><th>Voucher Name</th><th>Period(Days)</th><th>Past To</th><th>Coming In</th><th>Get Voucher Today</th><th>Get Voucher Yesterday</th><th>Get Voucher Total</th><th>Redeem Today</th><th>Redeem Yesterday</th><th>Redeem Total</th></tr>'
	
	--set @sms = @VoucherName
	--set @sms= @sms+ '
--'
Declare @Sno int = 1;
Declare @PeriodDays int;
Declare @PastTo int;
Declare @ComingIn int;
declare @RedeemToday INTEGER
declare @RedeemYesterday INTEGER
declare @RedeemTotal INTEGER

WHILE exists(select * from @VoucherDetailTable)
BEGIN
    set @eCoponID=0
	set @VoucherName=''
	set @GetVoucherYesterday=0
	set @GetVoucherTotal=0
	set @RedeemToday=0
	set @RedeemYesterday=0
	set @RedeemTotal=0
	set @PeriodDays = 0;
	set @PastTo = 0;
	set @ComingIn = 0;
	set @GetVoucherToday = 0 ;
    --select top 1 @RetailOutletID=RetailOutletID,@RetailOutlet=RetailOutlet,@GetVoucherToday=GetVoucherToday,@GetVoucherTotal=GetVoucherTotal from @VoucherDetailTable
	select top 1 @eCoponID=eCouponID,@VoucherName=VoucherName,@GetVoucherYesterday=GetVoucherYesterday,@GetVoucherTotal=GetVoucherTotal,@PeriodDays=DATEDIFF(DAY, StartDate, EndDate),@PastTo=DATEDIFF(DAY, StartDate, CONVERT(date,GETDATE()-1)),@ComingIn=DATEDIFF(DAY, CONVERT(date,GETDATE()), DATEADD(day,1,EndDate)),@GetVoucherToday=GetVoucherToday,
			@RedeemYesterday= RedeemYesterday, @RedeemToday= RedeemToday, @RedeemTotal= RedeemTotal
		from @VoucherDetailTable order by GetVoucherYesterday desc
	set @desc=@desc+N'<tr><td>'+convert(nvarchar(5),@Sno)+'</td><td>'+CONVERT(nvarchar(100),convert(date,GETDATE()))+'</td><td>'+@VoucherName+'</td><td>'+convert(nvarchar(20),@PeriodDays)+'</td><td>'+convert(nvarchar(20),@PastTo)+'</td><td>'+convert(nvarchar(20),@ComingIn)+'</td><td>'+convert(nvarchar(20),@GetVoucherToday)+'</td><td>'+convert(nvarchar(20),@GetVoucherYesterday)+'</td><td>'+convert(nvarchar(20),@GetVoucherTotal)+'</td><td>'+convert(nvarchar(20),@RedeemToday)+'</td><td>'+convert(nvarchar(20),@RedeemYesterday)+'</td><td>'+convert(nvarchar(20),@RedeemTotal)+'</td></tr>'
	--set @desc=@desc+N'<tr><td>'+@VoucherName+'</td><td>'+convert(nvarchar(20),@GetVoucherTotal)+'</td></tr>'
	set @GetVoucherYesterdayTotal=@GetVoucherYesterdayTotal+@GetVoucherYesterday
	set @GrandGetVoucherTotal=@GrandGetVoucherTotal+@GetVoucherTotal
	--set @sms = @sms+ N' '+@RetailOutlet +' ('+ convert(nvarchar(20),@GetVoucherTotal) + ')
--'
    delete @VoucherDetailTable where eCouponID=@eCoponID
	set @Sno=@Sno+1;
END
--set @desc=@desc+N'<tr bgcolor="#0066aa"><td><b>GetVoucherTotal</b></td><td><b>'+convert(nvarchar(20),@GetVoucherSummaryYesterdayTotal)+'</b></td><td><b>'+convert(nvarchar(20),@GrandGetVoucherTotal)+'</b></td></tr></table></body></html>';
--print @desc
declare @subject varchar(100)
select @subject= 'eCopon Daily Voucher Summary: [' + convert(varchar,getdate(),105)+']'

exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		--@recipients = 'shamim@logicsystems-me.com',
		@recipients = 'm.aziz@e-copon.com;',
		@copy_recipients='rafeeq3030@gmail.com;shamim@e-copon.com;shamim@logicsystems-me.com;mshafi@logicsystems-me.com',
		@subject = @subject,
		@body  = @desc,
		@body_format='HTML'
select @desc
end
GO
/****** Object:  StoredProcedure [dbo].[usp_SendEmailForInactiveCompetitions]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_SendEmailForInactiveCompetitions]
AS
 SET NOCOUNT ON 
	 declare @CompetitionName nvarchar(1000)
	 --declare @DrawName nvarchar(1000)
	 --declare @LocationName nvarchar(1000)
	 declare @FromDate datetime=null
	 declare @ToDate datetime=null
	 declare @EcouponId bigint
	 declare @desc nvarchar(max)
	 declare @sms nvarchar(max)
	

	 --declare @startdate datetime
	 --declare @enddate datetime
	 --set @startdate=getdate() + 7
	 --set @enddate=@startdate+6

	 declare @html1 nvarchar(max)
	 declare @html2 nvarchar(max)
     set @html1='<html><head></head><body><table border=''1''><tr><th>Competition Name</th><th>From Date</th><th>To date</th><th>Days to  Start</th></tr>';	
	 set @html2='</table></body></html>';
	 set @desc= ''
	 set @sms= ''

declare @CompetitionDetails table (ECouponID bigint,FromDate datetime,ToDate datetime,CompetitionName nvarchar(500))   
insert into @CompetitionDetails
	 select ECouponID, FromDate, ToDate, ESL.EService  from coc_ECoupons(NOLOCK) EC
			inner join coc_EServices(NOLOCK) ES ON ES.EServiceID= EC.EServiceID
			inner join coc_EServiceLanguages(NOLOCK) ESL ON ESL.EServiceID= ES.EServiceID and ESL.LanguageID= 1
		where ES.FromDate<=getdate()+7 and (ES.IsActive = 0 or EC.IsActive= 0)  and ES.ToDate> getdate()
		order by FromDate asc
WHILE exists(select * from @CompetitionDetails)
BEGIN
    set @EcouponId=0
    set @CompetitionName=''
	set @FromDate=null
	set @ToDate=null
	
	select top 1 @EcouponId=ECouponID, @FromDate=FromDate, @ToDate=ToDate, @CompetitionName= CompetitionName from @CompetitionDetails order by FromDate asc

	if(@FromDate<=getdate()+1)
	begin
		set @desc=@desc+'<tr style=''background-color:#ffb100;''><td>'+@CompetitionName+'</td><td>'+convert(varchar(50), @FromDate)+'</td><td>'+convert(varchar(50), @ToDate)+'</td><td>'+convert(varchar(10),datediff(day, getdate(), @FromDate))+'</td></tr>';
	end
	else
	begin
		set @desc=@desc+'<tr style=''background-color:#ffffff;''><td>'+@CompetitionName+'</td><td>'+convert(varchar(50), @FromDate)+'</td><td>'+convert(varchar(50), @ToDate)+'</td><td>'+convert(varchar(10),datediff(day, getdate(), @FromDate))+'</td></tr>';
	end

	if (@sms <> '')
		set @sms = @sms+ ',
'

	set @sms = @sms+ @CompetitionName +' ('+convert(varchar(11), @FromDate)  +')'

	delete from @CompetitionDetails where ECouponID=@ECouponID
END

   IF (@desc<>'')
	begin
	    set @desc=@html1+@desc+@html2
		exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = 'barayan@e-copon.com',
		@copy_recipients='shamim@logicsystems-me.com',
		--@copy_recipients='shamim@logicsystems-me.com;cs@e-copon.com',
		@subject = 'Inactive Competition Details',
		@body  = @desc,
		@body_format='HTML'
	End
    IF (@sms <> '')
	begin
		
		set @sms = N' Below Competitions not active: 
'+@sms
		exec msdb.dbo.sp_send_dbmail
				@profile_name = 'Email',
				@recipients = '966506111953@web.unifonic.com;',
				@subject = 'send+eCopon+0b1344',
				@body  = @sms,
				@body_format='TEXT'
	end

GO
/****** Object:  StoredProcedure [dbo].[usp_SendEmailForLessBarcodes]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


 CREATE PROCEDURE [dbo].[usp_SendEmailForLessBarcodes]
AS
 SET NOCOUNT ON 
	 declare @CompetitionName nvarchar(1000)
	 declare @TotalBarcodes int
	 declare @AvailbleBarcodes int
	 declare @NotificationID int
	 declare @RequiredBarcodes int
	 declare @EServiceID int
	 declare @ServiceName nvarchar(1000)
	 declare @desc nvarchar(max)
	 declare @sendEmail bit
   declare @Notifications table (NotificationID bigint,EServiceID int,NotificationCount int)
	

insert into @Notifications
	 select NotificationID,EServiceID,NotificationCount from coc_Notifications(NOLOCK) where eserviceid in (select eserviceid from coc_EServices(NOLOCK) where isactive=1 and FromDate<=getdate() and ToDate>=getdate())
WHILE exists(select * from @Notifications)
BEGIN
    set @NotificationID=0
	set @TotalBarcodes=0
	set @AvailbleBarcodes=0
	set @EServiceID=0
	set @ServiceName=''
	set @desc=''
	set @sendEmail = 0
    select top 1 @NotificationID=NotificationID,@EServiceID=EServiceID from @Notifications
	select @TotalBarcodes=COUNT(*) from coc_EServiceBarcodes(NOLOCK) where NotificationID = @NotificationID
	set @RequiredBarcodes=(@TotalBarcodes/100)*15
	select @AvailbleBarcodes=COUNT(*) from coc_EServiceBarcodes(NOLOCK) where NotificationID = @NotificationID and IsUsed=0
	select @ServiceName=EService from coc_EServiceLanguages(NOLOCK) where LanguageID=1 and EServiceID=@EServiceID
	set @desc='Competition Name : '+@ServiceName+'<br>'+'Total Barcodes : '+convert(nvarchar(100),@TotalBarcodes)+'<br>'+'Availble Barcodes : '+convert(nvarchar(100),@AvailbleBarcodes)+'<br>';
	IF (@AvailbleBarcodes<@RequiredBarcodes)
		set @sendEmail = 1

	if @EServiceID = 173-- sadafco
	begin
		
		set @sendEmail = 0
		--declare @TotalStandardBarcodes int
		declare @RequiredStandardBarcodes int
		declare @AvailbleStandardBarcodes int

		--select @TotalStandardBarcodes=100000

		set @RequiredStandardBarcodes=20000
		select @AvailbleBarcodes=COUNT(*) from coc_EServiceBarcodes(NOLOCK) where NotificationID = @NotificationID and AsignedMoile is null
		
		select @AvailbleStandardBarcodes=COUNT(*) from coc_EServiceBarcodes(NOLOCK) where NotificationID = @NotificationID and IsUsed = 0

		set @desc='Competition Name : '+@ServiceName+'<br>'+'Total Barcodes : '+convert(nvarchar(100),@TotalBarcodes)+'<br>'+'Available Barcodes : '+convert(nvarchar(100),@AvailbleBarcodes)+'<br>'+'Available Standard Barcodes : '+convert(nvarchar(100),@AvailbleStandardBarcodes)+'<br>';	
		
		IF (@AvailbleBarcodes<@RequiredBarcodes or @AvailbleStandardBarcodes<@RequiredStandardBarcodes)
			set @sendEmail = 1

	end
      
	IF (@sendEmail= 1)
	begin
		exec msdb.dbo.sp_send_dbmail
		@profile_name = 'Email',
		@recipients = 'barayan@e-copon.com',
		@copy_recipients='shamim@logicsystems-me.com;cs@e-copon.com',
		@subject = 'Barcode info',
		@body  = @desc,
		@body_format='HTML'
	End
    delete @Notifications where NotificationID=@NotificationID
	
END
GO
/****** Object:  StoredProcedure [dbo].[usp_SendSadafcoDailyStatusEmail]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_SendSadafcoDailyStatusEmail]  @ServerAddr nvarchar(128),
@From nvarchar(128),
@To nvarchar(1024),
@Subject nvarchar(256),
@Bodytext nvarchar(max) = 'This is a test text email from MS SQL server, do not reply.',
@User nvarchar(128) = '',
@Password nvarchar(128) = '',
@SSLConnection int = 0,
@ServerPort int = 25
AS
DECLARE @hr int
DECLARE @oSmtp int
DECLARE @result int
DECLARE @description nvarchar(255)
EXEC @hr = sp_OACreate 'EASendMailObj.Mail',@oSmtp OUT
If @hr <> 0
BEGIN
    PRINT 'Please make sure you have EASendMail Component installed!'
    EXEC @hr = sp_OAGetErrorInfo @oSmtp, NULL, @description OUT
    IF @hr = 0
    BEGIN
        PRINT @description
    END
    RETURN
End
EXEC @hr = sp_OASetProperty @oSmtp, 'LicenseCode', 'TryIt'
EXEC @hr = sp_OASetProperty @oSmtp, 'ServerAddr', @ServerAddr
EXEC @hr = sp_OASetProperty @oSmtp, 'ServerPort', @ServerPort
EXEC @hr = sp_OASetProperty @oSmtp, 'UserName', @User
EXEC @hr = sp_OASetProperty @oSmtp, 'Password', @Password
EXEC @hr = sp_OASetProperty @oSmtp, 'FromAddr', @From
EXEC @hr = sp_OAMethod @oSmtp, 'AddRecipientEx', NULL,  @To, 0
EXEC @hr = sp_OASetProperty @oSmtp, 'Subject', @Subject
EXEC @hr = sp_OASetProperty @oSmtp, 'BodyText', @BodyText
If @SSLConnection > 0
BEGIN
    EXEC @hr = sp_OAMethod @oSmtp, 'SSL_init', NULL
END
/* you can also add an attachment like this */
/*EXEC @hr = sp_OAMethod @oSmtp, 'AddAttachment', @result OUT, 'd:\test.jpg'*/
/*If @result <> 0 */
/*BEGIN*/
/*   EXEC @hr = sp_OAMethod @oSmtp, 'GetLastErrDescription', @description OUT*/
/*    PRINT 'failed to add attachment with the following error:'*/
/*    PRINT @description*/
/*END*/
PRINT 'Start to send email ...'
EXEC @hr = sp_OAMethod @oSmtp, 'SendMail', @result OUT
If @hr <> 0
BEGIN
    EXEC @hr = sp_OAGetErrorInfo @oSmtp, NULL, @description OUT
    IF @hr = 0
    BEGIN
        PRINT @description
    END
    RETURN
End
If @result <> 0
BEGIN
    EXEC @hr = sp_OAMethod @oSmtp, 'GetLastErrDescription', @description OUT
    PRINT 'failed to send email with the following error:'
    PRINT @description
END
ELSE
BEGIN
    PRINT 'Email was sent successfully!'
END
EXEC @hr = sp_OADestroy @oSmtp
GO
/****** Object:  StoredProcedure [dbo].[usp_SendSMSSQL]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[usp_SendSMSSQL]    
as 
BEGIN 
   Declare @sResponse varchar(1000)
   Declare @iReq int,@hr int 
   Declare @sUrl as nvarchar(500) 
   DECLARE @errorSource VARCHAR(8000)
   DECLARE @errorDescription VARCHAR(8000) 

   Declare @SMSID bigint
   Declare @NoOfTriesAttempted bigint
   Declare @MobileNo varchar(15)
   Declare @smstext as nvarchar(max)

   WHILE ((SELECT count(*) FROM coc_SMSSchedule(NOLOCK) where ISNULL(IsProcessed,0)=0 and ISNULL(NoOfTriesAttempted,0)=0)>0)
BEGIN  
    SELECT top 1 @SMSID=SMSID,@MobileNo=MobileNumber,@smstext=SMSBody,@NoOfTriesAttempted=ISNULL(NoOfTriesAttempted,0) FROM coc_SMSSchedule (NOLOCK) where ISNULL(IsProcessed,0)=0 and ISNULL(NoOfTriesAttempted,0)=0

	 -- Create Object for XMLHTTP 
   EXEC @hr = sp_OACreate 'Microsoft.XMLHTTP', @iReq OUT 
 
   print @hr 
 
   if @hr <> 0 
      Raiserror('sp_OACreate Microsoft.XMLHTTP FAILED!', 16, 1) 
 
   set @sUrl='http://api.unifonic.com/wrapper/sendSMS.php?userid=e-copon@outlook.com&password=Ecd#$2020&msg=#Msg#&sender=ecopon&to=#MobNo#&encoding=UTF8' 
 
   set @sUrl=REPLACE(@sUrl,'#MobNo#',@MobileNo) 
   set @sUrl=REPLACE(@sUrl,'#Msg#',@smstext) 
 
   print @sUrl 
 
  --  sms code start 
   EXEC @hr = sp_OAMethod @iReq, 'Open', NULL, 'GET', @sUrl, true 
   print @hr 
 
   if @hr <> 0 
      begin
        Raiserror('sp_OAMethod Open FAILED!', 16, 1) 
		UPDATE coc_SMSSchedule SET NoOfTriesAttempted=(@NoOfTriesAttempted+1), IsProcessed = 1,Status=@hr where SMSID=@SMSID;  
	  end
 
   EXEC @hr = sp_OAMethod @iReq, 'send' 
   select @iReq
   print @hr 
 
   if @hr <> 0 
   Begin 
       UPDATE coc_SMSSchedule SET NoOfTriesAttempted=(@NoOfTriesAttempted+1),IsProcessed = 1,Status=@hr where SMSID=@SMSID; 
       EXEC sp_OAGetErrorInfo @iReq, @errorSource OUTPUT, @errorDescription OUTPUT
       
       SELECT [Error Source] = @errorSource, [Description] = @errorDescription
     
       Raiserror('sp_OAMethod Send FAILED!', 16, 1) 
	  
   end 
else 
Begin
    UPDATE coc_SMSSchedule SET IsProcessed=1,NoOfTriesAttempted=(@NoOfTriesAttempted+1),SendDate=getdate(),Status=@hr where SMSID=@SMSID; 
    EXEC @hr = sp_OAGetProperty @iReq,'responseText', @sResponse OUT 
    print @hr
	
  
end

 
END  


end

GO
/****** Object:  StoredProcedure [dbo].[usp_Service_GetEserviceInformation]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Service_GetEserviceInformation]  
  @EServiceID INTEGER,  
  @CorpoRateID INTEGER=NULL,  
  @LanguageID INTEGER=1  
AS  
 SET NOCOUNT ON   
  SELECT 
  EL.EServiceID,
  EL.EService ,
  (select CorporateName  from coc_Corporates where CorporateID
   in(select CorporateID from coc_EServices(NOLOCK) where  EServiceID=@EServiceID)) as CorporateNameEN,
  (select CorporateNameAR  from coc_Corporates where CorporateID
   in(select CorporateID from coc_EServices(NOLOCK) where  EServiceID=@EServiceID)) as CorporateNameAR
  FROM  [coc_EServiceLanguages]EL (NOLOCK)   
  LEFT JOIN [coc_EServices]ES(NOLOCK) ON ES.EServiceID=El.EServiceID   
  WHERE  EL.EServiceID=@EServiceID   
   AND EL.LanguageID=@LanguageID
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Service_GetMapStores]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Service_GetMapStores]   
 @ECouponID INTEGER ,            
 @LanguageID INTEGER=1            
AS            
SET NOCOUNT ON            
 BEGIN    
     
      SELECT EO.ecouponoutletid [EcouponoutletID],               
             EO.ecouponid [EcouponID],               
             EO.retailoutletid [RetailOutletID],               
             RL.retailoutlet [RetailOutletName],  
			 ISNULL(RO.Longitude, 21.488498046) Longitude,  
             ISNULL(RO.Latitude, 39.187332584) Latitude,  
             ISNULL(RO.ProximityValue,200) ProximityValue , 
	(RO.Address1) [Address]
      FROM   coc_ecouponoutlets(nolock) EO               
             INNER JOIN coc_retailoutlets (nolock) RO               
                     ON EO.retailoutletid = RO.retailoutletid               
             inner JOIN coc_retailoutletlanguages RL(nolock)               
                    ON RO.retailoutletid = RL.retailoutletid               
                       AND RL.languageid = @LanguageID               
      WHERE  EO.ecouponid = @ECouponID order by RO.RetailOutletID Desc            
END          
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Test_GetAllUsers]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[usp_Test_GetAllUsers]
as 
begin
Select top 10
UserID as Id,
UserName as [Name],
EmailID,
MobileNumber as Mobile,
'Address' as [Address],
IsActive
 from coc_Users(NOLOCK)
end
GO
/****** Object:  StoredProcedure [dbo].[usp_Test_SaveUser]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[usp_Test_SaveUser]
(
@UserName varchar(100),
@Emailid varchar(100),
@MobileNumber varchar(100),
@ReturnResult int out
)
as 
begin
if(@UserName is not null and @Emailid is not null and @MobileNumber is not null)
set @ReturnResult = 1;
else
set @ReturnResult = 0;
end
GO
/****** Object:  StoredProcedure [dbo].[USP_UpdateConsumer_Profile]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_UpdateConsumer_Profile]
(
@ConsumerID int,
@FirstName nvarchar(200),
@SecondName nvarchar(200),
@FamilyName nvarchar(200),
@CityID int,
@Gender smallint,
@BirthDate datetime,
@NationalityID int,
@ReturnMsg nvarchar(100) out
)
AS
BEGIN

SELECT 1;
IF EXISTS(SELECT * FROM coc_consumers(NOLOCK) WHERE ConsumerID = @ConsumerID)
BEGIN--IF BEGIN
UPDATE coc_consumers SET FirstName = @FirstName , SecondName = @SecondName , FamilyName = @FamilyName

, CityID = @CityID , Gender = @Gender , BirthDate = @BirthDate , NationalityID = @NationalityID

WHERE ConsumerID = @ConsumerID;

SET @ReturnMsg = 'SUCCESS';
END--END IF
ELSE 
BEGIN -- ELSE BEGIN
SET @ReturnMsg = 'UNSUCCESS';
END--ELSE END

END
GO
/****** Object:  StoredProcedure [dbo].[USP_UpdateConsumerProfile]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_UpdateConsumerProfile] (          
 @Address1 NVARCHAR(255) = NULL          
 ,@CityID INT = NULL          
 ,@ConsumerID INT          
 ,@BirthDate VARCHAR(100) = NULL          
 ,@VerificationDate VARCHAR(100) = NULL          
 ,@FirstName NVARCHAR(200)  = NULL           
 ,@SecondName NVARCHAR(200) = NULL            
 ,@FamilyName NVARCHAR(255)  = NULL           
 ,@PrimaryMobile VARCHAR(15)  = null        
 ,@SecondaryMobile VARCHAR(15) = NULL          
 ,@EmailID VARCHAR(100)          
 ,@IqamaNumber NVARCHAR(20) = NULL          
 ,@CountryID INT  = NULL           
 ,@OtpID INT = NULL          
 ,@ImageFile NVARCHAR(100) = NULL          
 ,@KnowECouponID INT = NULL          
 ,@KnowECouponOthers NVARCHAR(100) = NULL          
 ,@MembershipNumber NVARCHAR(20) = NULL          
 ,@NationalityID INT = NULL          
 ,@Gender SMALLINT   = NULL          
 ,@ThirdName NVARCHAR(200) = NULL          
 ,@OccupationID INT = NULL          
 ,@JobNumber NVARCHAR(50) = NULL          
 ,@Organization NVARCHAR(150) = NULL          
 ,@MaritalStatusID INT = NULL          
 ,@FamilyMember NVARCHAR(50) = NULL          
 ,@ErrorMessage NVARCHAR(4000) OUTPUT        
 ,@UserIdentityTypeID int = null      
 ,@UserIdentityNumber nvarchar(100) = null      
 ,@FullName nvarchar(100) = null      
 )          
AS          
BEGIN          
 BEGIN TRY          
        
 --validate consumer for profile edit            
 Declare @RegistrationID int;        
 set @RegistrationID = @ConsumerID;        
if(@RegistrationID is not null and @RegistrationID  <> 0)            
  begin -- @RegistrationID null check if starts            
   Declare @ECouponID int = 0;            
   select top 1 @ECouponID = ECouponID from coc_ECouponParticipations (NOLOCK) where ConsumerID = @RegistrationID order by ECouponParticipationID desc;            
   if(@ECouponID <> 0)            
     begin-- @@ECouponID null check if starts              
  Declare @FinalDrawDate datetime;            
  select @FinalDrawDate = max(drawdate)  from coc_ECouponDraw (NOLOCK) where ecouponid = @ECouponID;             
  if(convert(date,getdate())<convert(date,@FinalDrawDate))            
   begin        
    --SET @ErrorMessage = 'Sorry, you cannot update your data, if you want to amend any of the data, please contact technical support at the following email: support@e-copon.com';            
    SELECT @ErrorMessage;        
    --Return;        
   end        
      end  -- @@ECouponID null check if ends             
    end -- @RegistrationID null check if ends           
        
		if (IsNull(@UserIdentityNumber,'') <> '' and @UserIdentityTypeID is not null and @UserIdentityTypeID <> 0) and  exists(Select UserIdentityNumber From coc_Consumers(NoLock) where UserIdentityNumber = @UserIdentityNumber and ConsumerID <> @ConsumerID) ----if (UserIdentityNumber check)      
			begin        
				SET @ErrorMessage = 'AlreadyExistsUserIdentityNumber';
				SELECT @ErrorMessage;    
				Return;      
			end --end if (UserIdentityNumber check)     
        
  --set @ErrorMessage = 'before if condition';          
  IF EXISTS (          
    SELECT ConsumerID          
    FROM coc_Consumers(NOLOCK)          
    WHERE ConsumerID = @ConsumerID          
    )          
  BEGIN --begin if          
   UPDATE coc_Consumers          
   SET Address1 = @Address1          
    ,CityID = @CityID          
    ,BirthDate = IIF(@BirthDate IS NULL, @BirthDate, convert(DATETIME, @BirthDate, 103))          
    ,VerificationDate = IIF(@VerificationDate IS NULL, @VerificationDate, convert(DATETIME, @VerificationDate, 103))          
    ,FirstName = coalesce(@FirstName,@FullName)          
    ,SecondName = @SecondName          
    ,FamilyName = @FamilyName          
    --,PrimaryMobile = @PrimaryMobile          
    ,SecondaryMobile = @SecondaryMobile          
    --,EmailID = @EmailID          
    ,IqamaNumber = @IqamaNumber          
    --,CountryID = @CountryID          
    ,OtpID = @OtpID          
    ,ImageFile = @ImageFile          
    ,KnowECouponID = @KnowECouponID          
    ,KnowECouponOthers = @KnowECouponOthers          
    --,MembershipNumber = @MembershipNumber          
    ,NationalityID = @NationalityID          
    ,Gender = @Gender          
    ,ThirdName = @ThirdName          
    ,OccupationID = @OccupationID          
    ,JobNumber = @JobNumber          
    ,Organization = @Organization          
    ,MaritalStatusID = @MaritalStatusID          
    ,FamilyMember = @FamilyMember       
,UserIdentityTypeID = @UserIdentityTypeID          
    ,UserIdentityNumber = @UserIdentityNumber      
 ,FullName = @FullName      
   WHERE ConsumerID = @ConsumerID;          
          
   SET @ErrorMessage = 'Success';          
          
   SELECT @ErrorMessage;          
  END --end if          
  ELSE          
  BEGIN -- begin else          
   SET @ErrorMessage = 'ConsumerId not exists';          
          
   SELECT @ErrorMessage;          
  END -- end else             
 END TRY          
          
 BEGIN CATCH          
  SET @ErrorMessage = ERROR_MESSAGE();        
  SET @ErrorMessage = ERROR_MESSAGE() + ' Error occurred';          
          
  SELECT @ErrorMessage;          
 END CATCH;          
END 
GO
/****** Object:  StoredProcedure [dbo].[usp_UpdatePushNotified]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_UpdatePushNotified]
@ConsumerNotificationID int,
 @SpResponseStatus int = null out,  
 @SpResponseMessage nvarchar(max) = null out,  
 @SpErrorDetails nvarchar(max) = null out  
AS

Begin Try   
Set @SpResponseStatus=1;       
  Set @SpResponseMessage='Success';      
  Set @SpErrorDetails='Success';   
UPDATE coc_consumernotifications set ispushed=1 where consumernotificationid=@consumernotificationid
END TRY                  
  BEGIN CATCH        
  Set @SpResponseStatus=0;       
  Set @SpResponseMessage='GenericError';      
  Set @SpErrorDetails ='ErrorNumber : <' +Convert(nvarchar(50),ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(nvarchar(50),ERROR_SEVERITY())+'>, ErrorState : <'+Convert(nvarchar(50),ERROR_STATE())+'> , ErrorProcedure : <'+Convert(nvarchar(50),ERROR_PROCEDURE())+'> , ErrorLine <'+Convert(nvarchar(50),ERROR_LINE())+'> ErrorMessage : <'+Convert(nvarchar(50),ERROR_MESSAGE())+'>';      
  
  END CATCH                  
 SET NOCOUNT OFF  

GO
/****** Object:  StoredProcedure [dbo].[usp_UpdatePushNotifiedForGeneralNotification]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_UpdatePushNotifiedForGeneralNotification]  
 @ConsumerNotificationIDs XML=NULL,  
 @SpResponseStatus int = null out,    
 @SpResponseMessage nvarchar(max) = null out,    
 @SpErrorDetails nvarchar(max) = null out    
AS  
Begin Try     
  Set @SpResponseStatus=1;         
  Set @SpResponseMessage='Success';        
  Set @SpErrorDetails='Success';  
  if(@ConsumerNotificationIDs is not null)
  begin
     DECLARE @ConsumerNotificationTemp Table (ConsumerNotificationID bigint)  
     INSERT INTO @ConsumerNotificationTemp                              
     SELECT ConsumerNotification.value('(@ConsumerNotificationID)', 'bigint')                                 
             FROM @ConsumerNotificationIDs.nodes('/XML/Row') AS Data(ConsumerNotification) 
     UPDATE coc_consumernotifications set ispushed=1 where consumernotificationid in (select ConsumerNotificationID from @ConsumerNotificationTemp)  
   end
  END TRY                    
  BEGIN CATCH          
  Set @SpResponseStatus=0;         
  Set @SpResponseMessage='GenericError';        
  Set @SpErrorDetails ='ErrorNumber : <' +Convert(nvarchar(50),ERROR_NUMBER())+ '>, ErrorSeverity : <'+ Convert(nvarchar(50),ERROR_SEVERITY())+'>, ErrorState : <'+Convert(nvarchar(50),ERROR_STATE())+'> , ErrorProcedure : <'+Convert(nvarchar(50),ERROR_PROCEDURE())+'> , ErrorLine <'+Convert(nvarchar(50),ERROR_LINE())+'> ErrorMessage : <'+Convert(nvarchar(50),ERROR_MESSAGE())+'>';        
    
  END CATCH                    
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Usp_UserInfoDelete]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[Usp_UserInfoDelete]      
@UserID int=null,     
@AdminUserID int=NULL,     
@Remarks nvarchar(max),   
@ReasonForDeleteFile    nvarchar(500),   
@spResult int output     
   
as       
begin      
Begin try    
    
 update coc_consumers set  IsVerified=0,IsActive=0,IsDeleted=1 where  UserID=@UserID     
    
 update coc_Users set IsActive=0,IsDeleted=1, Remarks=@Remarks, DeletedDate=GETDATE(), DeleteBy=@AdminUserID,ReasonForDeleteFile=@ReasonForDeleteFile   
    where UserID=@UserID     
    
 set @spResult=0;      
 end try    
 begin catch    
      
   set @spResult=1;      
 end catch    
     
    
    
end 
GO
/****** Object:  StoredProcedure [dbo].[USP_ValidateBasicLoginUser]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_ValidateBasicLoginUser] ( @EmailId VARCHAR(200)     = NULL

,                                                     @MobileNumber VARCHAR(20) = NULL

--exec USP_ValidateBasicLoginUser null,'00966557476051' 

)

AS

BEGIN

	SELECT TOP (1) US.UserID                                                  

	,              UserName                                                   

	,              US.[Password]                                              

	,              US.IsActive                                                

	,              RoleID                                                     

	,              US.MobileNumber                                            

	,              US.EmailID                                                 

	,              US.ResetRequired                                           

	,              ISNULL(CS.ConsumerID, 0)                                    [ConsumerID]

	,              CS.IsVerified                                              

	,              CS.OtpID                                                    [VerificationCode]

	,              ISNULL(US.FullName, '')                                     FullName

	,              CASE WHEN ISNULL(CS.Address1, '') = '' THEN 'Address'

	                                                      ELSE CS.Address1 END Address1

	FROM      [coc_Users](NOLOCK)     US

	LEFT JOIN [coc_Consumers](NOLOCK) CS ON CS.UserID = US.UserID

	WHERE (UserName = @EmailId

		OR mobilenumber = @MobileNumber) and US.IsDeleted = 0

END
GO
/****** Object:  StoredProcedure [dbo].[USP_VALIDATECORPORATE]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_VALIDATECORPORATE] (  
 @EMAILID VARCHAR(50) = NULL  
 ,@MOBILENUMBER VARCHAR(20) = NULL  
 ,@USERNAME NVARCHAR(100) = NULL  
 ,@UserID bigint = null
 ,@RETURNRESULT VARCHAR(100) OUT  
 )  
AS  
BEGIN  
 SET @RETURNRESULT = '';  
  
 IF (@EMAILID IS NOT NULL)  
 BEGIN  
  IF EXISTS (  
    SELECT EmailID  
    FROM coc_Users(NOLOCK)  
    WHERE IsActive = 1  
     AND EmailID = @EMAILID  and UserID <> @UserID
    )  
  BEGIN  
   SET @RETURNRESULT = 'Email already exists';  
  
   RETURN;  
  END  
 END  
  
 IF (@USERNAME IS NOT NULL)  
 BEGIN  
  IF EXISTS (  
    SELECT UserName  
    FROM coc_Users(NOLOCK)  
    WHERE IsActive = 1  
     AND UserName = @USERNAME  and UserID <> @UserID
    )  
  BEGIN  
   SET @RETURNRESULT = 'User Name already exists';  
  
   RETURN;  
  END  
 END  
  
 IF (@MOBILENUMBER IS NOT NULL)  
 BEGIN  
  IF EXISTS (  
    SELECT MOBILENUMBER  
    FROM coc_Users(NOLOCK)  
    WHERE IsActive = 1  and UserID <> @UserID
     AND MOBILENUMBER = @MOBILENUMBER  
    )  
  BEGIN  
   SET @RETURNRESULT = 'Mobile number already exists';  
  
   RETURN;  
  END  
 END  
END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidatePrizeCategory]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_ValidatePrizeCategory] (
	@ECouponID INTEGER
	,@Category VARCHAR(2)
	,@Available INT OUT
	)
AS
BEGIN
	DECLARE @Used INT = 0
	DECLARE @PrizeCount INT = 0
	SET @Available = 1;

		SELECT @PrizeCount = count(*)
	FROM coc_ECouponWinners(NOLOCK)
	WHERE ecouponprizeid IN (
			SELECT DISTINCT coc_ECouponPrizes.ECouponPrizeID
			FROM coc_ECouponPrizes (NOLOCK)
			JOIN coc_ECouponPrizesLanguages(NOLOCK) ON coc_ECouponPrizesLanguages.ECouponPrizeID = coc_ECouponPrizes.ECouponPrizeID
			WHERE coc_ECouponPrizesLanguages.ResourceKey = 'Name'
				AND coc_ECouponPrizes.ECouponID = @ECouponID
				AND coc_ECouponPrizes.CATEGORY LIKE '%' + @Category + '%'
			)
		 

	SELECT @Used = count(*)
	FROM coc_ECouponWinners(NOLOCK)
	WHERE ecouponprizeid IN (
			SELECT DISTINCT coc_ECouponPrizes.ECouponPrizeID
			FROM coc_ECouponPrizes(NOLOCK)
			JOIN coc_ECouponPrizesLanguages(NOLOCK) ON coc_ECouponPrizesLanguages.ECouponPrizeID = coc_ECouponPrizes.ECouponPrizeID
			WHERE coc_ECouponPrizesLanguages.ResourceKey = 'Name'
				AND coc_ECouponPrizes.ECouponID = @ECouponID
				AND coc_ECouponPrizes.CATEGORY LIKE '%' + @Category + '%'
			)
		AND	CAST(DATEADD(hh,-3,coc_ECouponWinners.drawdatetime) AS DATE) 
								= CAST(DATEADD(hh,-3,getdate()) AS DATE)
--		AND CAST(drawdatetime AS DATE) = CAST(getdate() AS DATE)

		--print 'category count '+convert(varchar, @PrizeCount )
		--print 'used count '+convert(varchar, @Used )

	

	IF (
			@Category = 'A'
			AND @Used >= 2 
			)
	BEGIN
		SET @Available = 0;
	END

	IF (
			@Category = 'B'
			AND @Used >= 120   
			)
	BEGIN
		SET @Available = 0;
	END

	IF (
			@Category = 'C'
			AND @Used >= 150   
			)
	BEGIN
		SET @Available = 0;
	END

	SELECT @Available
END
GO
/****** Object:  StoredProcedure [dbo].[USP_ValidateUser_APICompetitionLink]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_ValidateUser_APICompetitionLink]                
   @PrimaryMobile nvarchar(15) = null               
  ,@EmailID nvarchar(100)        = null      
  ,@GuestID [int] OUTPUT                   
  ,@ConsumerID [int] OUTPUT                   
AS                   
 SET NOCOUNT ON                  
  BEGIN                  
              
 if(@EmailID = '')          
   set @EmailID = null          
 if(@PrimaryMobile = '')          
 set @PrimaryMobile = null           
          
  DECLARE @GuestID_CompetitionLink integer =0;                
  DECLARE @ConsumerID_CompetitionLink integer=0;                 
              
  IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE isactive= 1 and isdeleted = 0 AND (PrimaryMobile=@PrimaryMobile))                
   select top 1 @ConsumerID_CompetitionLink = ConsumerID FROM coc_Consumers(NOLOCK) WHERE isactive= 1 and isdeleted = 0 AND (PrimaryMobile=@PrimaryMobile)                 
  else IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE isactive= 1 and isdeleted = 0 AND (EmailID=@EmailID))                
   select top 1 @ConsumerID_CompetitionLink = ConsumerID FROM coc_Consumers(NOLOCK) WHERE isactive= 1 and isdeleted = 0 AND (EmailID=@EmailID)                   
              
  set @GuestID = @GuestID_CompetitionLink;              
  set @ConsumerID = @ConsumerID_CompetitionLink;              
  Select 'Success';              
  END 
GO
/****** Object:  StoredProcedure [dbo].[USP_ValidateUser_CompetitionLink]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_ValidateUser_CompetitionLink]          
   @PrimaryMobile nvarchar(15) = null         
  ,@EmailID nvarchar(100)        = null
  ,@GuestID [int] OUTPUT             
  ,@ConsumerID [int] OUTPUT             
AS             
 SET NOCOUNT ON            
  BEGIN            
        
 if(@EmailID = '')    
   set @EmailID = null    
 if(@PrimaryMobile = '')    
 set @PrimaryMobile = null     
    
  DECLARE @GuestID_CompetitionLink integer =0;          
  DECLARE @ConsumerID_CompetitionLink integer=0;           
        
  IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1 and isactive= 1 and isdeleted = 0 AND (PrimaryMobile=@PrimaryMobile))          
   select top 1 @ConsumerID_CompetitionLink = ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1  and isactive= 1 and isdeleted = 0 AND (PrimaryMobile=@PrimaryMobile)           
  else IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1 and isactive= 1 and isdeleted = 0 AND (EmailID=@EmailID))          
   select top 1 @ConsumerID_CompetitionLink = ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1  and isactive= 1 and isdeleted = 0 AND (EmailID=@EmailID)           
             
  if @ConsumerID_CompetitionLink = 0          
  BEGIN          
   IF EXISTS (select GuestID FROM coc_guests(NOLOCK) WHERE (PrimaryMobile=@PrimaryMobile))          
    select top 1 @GuestID_CompetitionLink = GuestID FROM coc_guests(NOLOCK) WHERE (PrimaryMobile=@PrimaryMobile)           
   else IF EXISTS (select GuestID FROM coc_guests(NOLOCK) WHERE (EmailID=@EmailID)and isactive= 1 )          
    select top 1 @GuestID_CompetitionLink = GuestID FROM coc_guests(NOLOCK) WHERE (EmailID=@EmailID)  and isactive= 1          
  END          
        
  set @GuestID = @GuestID_CompetitionLink;        
  set @ConsumerID = @ConsumerID_CompetitionLink;        
  Select 'Success';        
  END 
GO
/****** Object:  StoredProcedure [dbo].[USP_ValidateUser_DynamicCompetitionLink]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_ValidateUser_DynamicCompetitionLink]                        
   @PrimaryMobile nvarchar(15) = null        
  ,@EmailID nvarchar(100)        = null        
  ,@GuestID [int]  = null  OUTPUT                           
  ,@ConsumerID [int]  = null  OUTPUT      
  ,@IsVerified bit=0 OUTPUT    
AS                           
 SET NOCOUNT ON                          
  BEGIN                          
                      
 if(@EmailID = '')                  
   set @EmailID = null                  
 if(@PrimaryMobile = '')                  
    set @PrimaryMobile = null                   
                  
  DECLARE @GuestID_CompetitionLink integer =0;                        
  DECLARE @ConsumerID_CompetitionLink integer=0;       
  Declare @IsVerified_CompetitionLink bit=0    
                      
  IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE isactive= 1 and isdeleted = 0 AND (PrimaryMobile=@PrimaryMobile) and UserID is not null)                        
   select top 1 @ConsumerID_CompetitionLink = ConsumerID,@IsVerified_CompetitionLink=IsVerified FROM coc_Consumers(NOLOCK) WHERE  isactive= 1 and isdeleted = 0 AND (PrimaryMobile=@PrimaryMobile)                         
  else IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE isactive= 1 and isdeleted = 0 AND (EmailID=@EmailID)  and UserID is not null)                        
   select top 1 @ConsumerID_CompetitionLink = ConsumerID,@IsVerified_CompetitionLink=IsVerified FROM coc_Consumers(NOLOCK) WHERE isactive= 1 and isdeleted = 0 AND (EmailID=@EmailID)                         
                           
  --if @ConsumerID_CompetitionLink = 0                        
  --BEGIN                        
  -- IF EXISTS (select GuestID FROM coc_guests(NOLOCK) WHERE (PrimaryMobile=@PrimaryMobile) and IsVerified=1 and isactive= 1 )                        
  --  select top 1 @GuestID_CompetitionLink = GuestID,@IsVerified_CompetitionLink=IsVerified FROM coc_guests(NOLOCK) WHERE (PrimaryMobile=@PrimaryMobile and IsVerified=1 and isactive= 1 )                         
  -- else IF EXISTS (select GuestID FROM coc_guests(NOLOCK) WHERE (EmailID=@EmailID)and isactive= 1 and IsVerified=1  )                        
  --  select top 1 @GuestID_CompetitionLink = GuestID,@IsVerified_CompetitionLink=IsVerified FROM coc_guests(NOLOCK) WHERE (EmailID=@EmailID)  and isactive= 1 and IsVerified=1                         
  --END                        
    
    
--IF (@GuestID_CompetitionLink = 0 and  @ConsumerID_CompetitionLink=0)        
--  begin        
--  select @GuestID_CompetitionLink = GuestID,@ConsumerID_CompetitionLink=ConsumerId from coc_ECouponParticipations (NOLOCK) where (ParticipationEmailID=@EmailID or ParticipationMobile=@PrimaryMobile)        
--   IF (@GuestID_CompetitionLink = 0 and  @ConsumerID_CompetitionLink=0)        
--   begin        
--     set  @GuestID_CompetitionLink=0;                      
--   set @ConsumerID_CompetitionLink=0;           
--  end        
--  IF (@GuestID_CompetitionLink  is null)        
--   begin        
--     set  @GuestID_CompetitionLink=0;                         
--  end        
--  IF (@ConsumerID_CompetitionLink is null)        
--   begin        
--   set @ConsumerID_CompetitionLink=0;           
--  end        
--  end        
        
        
         
        
        
  set @GuestID = @GuestID_CompetitionLink;                      
  set @ConsumerID = @ConsumerID_CompetitionLink;       
  set @IsVerified=@IsVerified_CompetitionLink;     
  select @GuestID GuestID ,@ConsumerID  ConsumerID         
  Select 'Success';                      
  END   
GO
/****** Object:  StoredProcedure [dbo].[USP_ValidateUser_FindTheTCompetitionLink]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_ValidateUser_FindTheTCompetitionLink]                      
   @PrimaryMobile nvarchar(15) = null                     
  ,@EmailID nvarchar(100)        = null        
  ,@ECouponID bigint =null    
  ,@GuestID [int] OUTPUT                         
  ,@ConsumerID [int] OUTPUT    
  ,@IsGuestParticipatedFirstTime [bit] OUTPUT                                      
AS                         
 SET NOCOUNT ON                        
  BEGIN                        
                    
 if(@EmailID = '')                
   set @EmailID = null                
 if(@PrimaryMobile = '')                
 set @PrimaryMobile = null                 
                
  DECLARE @GuestID_CompetitionLink integer =0;                      
  DECLARE @ConsumerID_CompetitionLink integer=0;                       
  DECLARE @GuestParticipatedFirstTime bit=0;                                    
  IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE isactive= 1 and isdeleted = 0 AND (PrimaryMobile=@PrimaryMobile))                      
   select top 1 @ConsumerID_CompetitionLink = ConsumerID FROM coc_Consumers(NOLOCK) WHERE  isactive= 1 and isdeleted = 0 AND (PrimaryMobile=@PrimaryMobile)                       
  else IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE isactive= 1 and isdeleted = 0 AND (EmailID=@EmailID))                      
   select top 1 @ConsumerID_CompetitionLink = ConsumerID FROM coc_Consumers(NOLOCK) WHERE isactive= 1 and isdeleted = 0 AND (EmailID=@EmailID)                       
                         
  if @ConsumerID_CompetitionLink = 0                      
  BEGIN                      
   IF EXISTS (select GuestID FROM coc_guests(NOLOCK) WHERE (PrimaryMobile=@PrimaryMobile) and IsVerified=1 and isactive= 1 )                      
    select top 1 @GuestID_CompetitionLink = GuestID FROM coc_guests(NOLOCK) WHERE (PrimaryMobile=@PrimaryMobile and IsVerified=1 and isactive= 1 )                       
   else IF EXISTS (select GuestID FROM coc_guests(NOLOCK) WHERE (EmailID=@EmailID)and isactive= 1 and IsVerified=1  )                      
    select top 1 @GuestID_CompetitionLink = GuestID FROM coc_guests(NOLOCK) WHERE (EmailID=@EmailID)  and isactive= 1 and IsVerified=1                       
  END                      
                    
  set @GuestID = @GuestID_CompetitionLink;     
  if(@GuestID <> 0)      
  begin    
   set @GuestParticipatedFirstTime=(select count(*) as FirstTimeParticipated from coc_ECouponParticipations(NOLOCK) where GuestID=@GuestID and ECouponID=@ECouponID)    
    if(@GuestParticipatedFirstTime >=1)     
  begin    
   set @IsGuestParticipatedFirstTime=1    
  end    
  else    
   set @IsGuestParticipatedFirstTime=0    
  end                 
  set @ConsumerID = @ConsumerID_CompetitionLink;      
  if(@ConsumerID <> 0)      
  begin    
   set @GuestParticipatedFirstTime=(select count(*) as FirstTimeParticipated from coc_ECouponParticipations(NOLOCK) where ConsumerID=@ConsumerID and ECouponID=@ECouponID)    
    if(@GuestParticipatedFirstTime >=1)     
  begin    
   set @IsGuestParticipatedFirstTime=1    
  end    
  else    
   set @IsGuestParticipatedFirstTime=0    
  end                               
  Select 'Success';                    
  END 
GO
/****** Object:  StoredProcedure [dbo].[USP_ValidateUser_SadafcoCompetitionLink]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_ValidateUser_SadafcoCompetitionLink]                    
   @PrimaryMobile nvarchar(15) = null    
  ,@EmailID nvarchar(100)        = null    
  ,@GuestID [int]  = null  OUTPUT                       
  ,@ConsumerID [int]  = null  OUTPUT                       
AS                       
 SET NOCOUNT ON                      
  BEGIN                      
                  
 if(@EmailID = '')              
   set @EmailID = null              
 if(@PrimaryMobile = '')              
 set @PrimaryMobile = null               
              
  DECLARE @GuestID_CompetitionLink integer =0;                    
  DECLARE @ConsumerID_CompetitionLink integer=0;                     
                  
  IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE isactive= 1 and isdeleted = 0 AND (PrimaryMobile=@PrimaryMobile AND EmailID=@EmailID ))                    
   select top 1 @ConsumerID_CompetitionLink = ConsumerID FROM coc_Consumers(NOLOCK) WHERE  isactive= 1 and isdeleted = 0 AND (PrimaryMobile=@PrimaryMobile)                     
  --else IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE isactive= 1 and isdeleted = 0 AND (EmailID=@EmailID))                    
  -- select top 1 @ConsumerID_CompetitionLink = ConsumerID FROM coc_Consumers(NOLOCK) WHERE isactive= 1 and isdeleted = 0 AND (EmailID=@EmailID)                     
                       
  if @ConsumerID_CompetitionLink = 0                    
  BEGIN                    
   IF EXISTS (select GuestID FROM coc_guests(NOLOCK) WHERE (PrimaryMobile=@PrimaryMobile and EmailID=@EmailID) and IsVerified=1 and isactive= 1 )                    
    select top 1 @GuestID_CompetitionLink = GuestID FROM coc_guests(NOLOCK) WHERE (PrimaryMobile=@PrimaryMobile and IsVerified=1 and isactive= 1 )                     
   --else IF EXISTS (select GuestID FROM coc_guests(NOLOCK) WHERE (EmailID=@EmailID)and isactive= 1 and IsVerified=1  )                    
   -- select top 1 @GuestID_CompetitionLink = GuestID FROM coc_guests(NOLOCK) WHERE (EmailID=@EmailID)  and isactive= 1 and IsVerified=1                     
  END                    
          
IF (@GuestID_CompetitionLink = 0 and  @ConsumerID_CompetitionLink=0)    
  begin    
  select @GuestID_CompetitionLink = GuestID,@ConsumerID_CompetitionLink=ConsumerId from coc_ECouponParticipations(NOLOCK) where (ParticipationEmailID=@EmailID and ParticipationMobile=@PrimaryMobile)    
   IF (@GuestID_CompetitionLink = 0 and  @ConsumerID_CompetitionLink=0)    
   begin    
     set  @GuestID_CompetitionLink=0;                  
	 set @ConsumerID_CompetitionLink=0;       
  end    
  IF (@GuestID_CompetitionLink  is null)    
   begin    
     set  @GuestID_CompetitionLink=0;                     
  end    
  IF (@ConsumerID_CompetitionLink is null)    
   begin    
   set @ConsumerID_CompetitionLink=0;       
  end    
  end    
    
    
     
    
    
  set @GuestID = @GuestID_CompetitionLink;                  
  set @ConsumerID = @ConsumerID_CompetitionLink;       
  select @GuestID GuestID ,@ConsumerID  ConsumerID     
  Select 'Success';                  
  END  
GO
/****** Object:  StoredProcedure [dbo].[USP_VerifyConsumer]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*Example exec  USP_VerifyConsumer 150828  */
CREATE PROCEDURE [dbo].[USP_VerifyConsumer]   
 @ConsumerID INTEGER   
AS  
SET NOCOUNT ON  
 BEGIN    
  declare @IsFullProfile int  
  declare @CustomerFullName nvarchar(100)  
  
  SELECT @IsFullProfile = Count(*) from coc_Consumers (NOLOCK) WHERE ConsumerID = @ConsumerID  
  AND (FullName is NOT NULL or FirstName IS NOT NULL)   
  AND  CityID IS NOT NULL 
  AND Gender IS NOT NULL   
  AND NationalityID IS NOT NULL 
  and UserIdentityNumber is not null
  
  SELECT @CustomerFullName = coalesce(FullName,FirstName,SecondName,FamilyName)     
   from coc_Consumers (NOLOCK)   
   WHERE ConsumerID = @ConsumerID    
  
  select @IsFullProfile as IsFullProfile, @CustomerFullName as CustomerFullName  
  
 END  
  
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_VerifyConsumerBasicProfile]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_VerifyConsumerBasicProfile] 

	@ConsumerID INTEGER	

	--USP_VerifyConsumerBasicProfile 20939

AS

SET NOCOUNT ON

	BEGIN		
		SELECT Count(*) IsBasicProfile from coc_Consumers (NOLOCK) WHERE ConsumerID = @ConsumerID  AND 
		(
		FirstName IS NOT NULL 
		and
		PrimaryMobile is not null
		and
		EmailID is not null
		)
	END



SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[Usp_VerifyDiscountVoucherBarcode]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Usp_VerifyDiscountVoucherBarcode]            
 @barcode  NVARCHAR(500),            
 @languageId INTEGER=1,         
 @corporateID BIGINT= NULL,        
 @isAPIRequest BIT= 0,        
 @ErrorMessage INTEGER OUTPUT,    
 @KioskID int = null    
AS            
BEGIN            
 SET NOCOUNT ON;            
 SET @ErrorMessage=0            
 DECLARE @Imageurl VARCHAR (100) = ''            
 DECLARE @BarcodeFlag BIT       
     
 IF(@KioskID IS NOT NULL AND @KioskID <> 0 AND     
 EXISTS(SELECT * FROM coc_EVoucher(nolock) WHERE EServiceID IN     
 (SELECT EServiceID FROM coc_Notifications(nolock) WHERE NotificationID IN (SELECT NotificationID FROM coc_EServiceBarcodes(nolock) WHERE Barcode = @barcode AND (@corporateID is  null or CorporateID= @corporateID) and Barcode=@barcode and IsUsed = 0 AND  
(ISNULL(ConsumerID,0)>0 or ISNULL(GuestID,0)>0) ))))     
 BEGIN     
   IF(NOT EXISTS(SELECT RetailOutletID FROM coc_EVoucherRetailOutlet(nolock) WHERE RetailOutletID IN (SELECT RetailOutletID FROM coc_KioskLocationRetailOutlets(NOLOCK) WHERE KioskLocationID=@KioskID)     
   AND EVoucherID IN(SELECT EVoucherID FROM coc_EVoucher(nolock) WHERE EServiceID IN     
 (SELECT EServiceID FROM coc_Notifications(nolock) WHERE NotificationID IN     
 (SELECT NotificationID FROM coc_EServiceBarcodes(nolock) WHERE Barcode = @barcode AND (@corporateID is  null or CorporateID= @corporateID) and Barcode=@barcode and IsUsed = 0 AND  (ISNULL(ConsumerID,0)>0 or ISNULL(GuestID,0)>0) )))))    
 BEGIN    
    SET @ErrorMessage=405    
    RETURN;    
 END    
 END    
    
 IF EXISTS(SELECT EServiceBarcodeID FROM coc_EServiceBarcodes(nolock) WHERE (@corporateID is  null or CorporateID= @corporateID) and Barcode=@barcode and IsUsed = 1 AND  (ISNULL(ConsumerID,0)>0 or ISNULL(GuestID,0)>0 ))            
 BEGIN             
               
  SET @ErrorMessage=406-- Barcode Used (Vch_UsedBarcode)            
              
 END            
 IF EXISTS(SELECT EServiceBarcodeID FROM coc_EServiceBarcodes(nolock) WHERE (@corporateID is  null or CorporateID= @corporateID) and Barcode=@barcode AND (ISNULL(ConsumerID,0)>0 or ISNULL(GuestID,0)>0 ))            
 BEGIN             
   SELECT             
                
    eb.EServiceBarcodeID,            
    evl.ResourceValue AS Description,            
    evls.ResourceValue AS VoucherName,              
    ev.ExpiryDate,            
    ev.EVoucherID, 
	ev.Type,
	ev.VoucherTypeID,
	ev.PromotionAmount,
	ev.VoucherAmount,
	ev.OriginalPrice,
	ev.DiscountAmount,
	ev.PriceAfterDiscount,
	ev.DiscountPercentage,
	eb.InvoiceAmount,
	eb.InvoiceNumber,
    eb.IsUsed,            
    ev.IsPrinted,            
    case when eb.ConsumerID is not null then  cs.FirstName else g.FullName end as FirstName,            
    cs.SecondName,            
    eb.Barcode,            
    crs.FirstName AS CorporateFirstName,            
    evl.LanguageID,            
    crs.CorporateName,            
    crs.MerchantCode,            
 '' as Distributor,        
 ev.VoucherType, --ev.OriginalPrice- ev.PriceAfterDiscount as DiscountAmount,        
    @Imageurl AS ImageUrl            
   FROM coc_EServiceBarcodes(nolock) eb            
   INNER JOIN coc_EVoucher(nolock) ev ON eb.EVoucherID=ev.EVoucherID AND ev.IsActive = 1              
   INNER JOIN coc_EVoucherLanguages(nolock) evl ON evl.EVoucherID=ev.EVoucherID AND evl.LanguageID = @languageId AND evl.ResourceKey = 'Description'            
   INNER JOIN coc_EVoucherLanguages(nolock) evls ON evls.EVoucherID=ev.EVoucherID AND evls.LanguageID = @languageId AND evls.ResourceKey = 'VoucherName'            
   LEFT JOIN coc_Consumers(nolock) cs ON cs.ConsumerID=eb.ConsumerID            
   LEFT JOIN coc_Guests(nolock) g ON g.GuestID =eb.GuestID            
   INNER JOIN coc_EServices(nolock) esrs ON esrs.EServiceID=ev.EServiceID            
   INNER JOIN coc_Corporates(nolock) crs ON crs.CorporateID=esrs.CorporateID            
   WHERE  eb.Barcode=@barcode  and (@corporateID is  null or eb.CorporateID = @corporateID)        
              
 END            
 ELSE            
 BEGIN            
   SET @ErrorMessage=405-- There is no records Exists Error(Vch_InvalidBarcode)            
 END            
             
END
GO
/****** Object:  StoredProcedure [dbo].[USP_VerifyUserOTP_CompetitionLink]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--declare @GuestID int,@ConsumerID int  
--exec USP_VerifyUserOTP_CompetitionLink 12345  @guestid out,@consumerid out  
CREATE PROCEDURE [dbo].[USP_VerifyUserOTP_CompetitionLink]        
   @OTPID int  
  ,@GuestID [int] OUTPUT           
  ,@ConsumerID [int] OUTPUT           
AS           
 SET NOCOUNT ON          
  BEGIN          
      
  DECLARE @GuestID_CompetitionLink integer =0;        
  DECLARE @ConsumerID_CompetitionLink integer=0;         
      
  IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=0 and isactive= 1 and isdeleted = 0 AND (OtpID=@OtpID))        
   begin  
   select top 1 @ConsumerID_CompetitionLink = ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=0  and isactive= 1 and isdeleted = 0 AND (OtpID=@OtpID)         
   Update coc_Consumers set IsVerified = 1 where IsVerified = 0  and isactive= 1 and isdeleted = 0 AND (OtpID=@OtpID)         
   end    
           
  if @ConsumerID_CompetitionLink = 0        
  BEGIN        
   IF EXISTS (select GuestID FROM coc_guests(NOLOCK) WHERE (OtpID=@OtpID))        
  begin  
  select top 1 @GuestID_CompetitionLink = GuestID FROM coc_guests(NOLOCK) WHERE (OtpID=@OtpID)         
  Update coc_guests set IsVerified = 1 where IsVerified = 0  and isactive= 1 and  OtpID=@OtpID         
 end  
     
  END        
      
  set @GuestID = @GuestID_CompetitionLink;      
  set @ConsumerID = @ConsumerID_CompetitionLink;      
  Select 'Success';      
  END 
GO
/****** Object:  StoredProcedure [dbo].[usp_VerifyVoucherBarcode]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_VerifyVoucherBarcode]        
 @barcode  NVARCHAR(500),        
 @languageId INTEGER=1,     
 @corporateID BIGINT= NULL,    
 @isAPIRequest BIT= 0,    
 @ErrorMessage INTEGER OUTPUT        
AS        
BEGIN        
 SET NOCOUNT ON;        
 SET @ErrorMessage=0        
 DECLARE @Imageurl VARCHAR (100) = ''        
 DECLARE @BarcodeFlag BIT        
 IF EXISTS(SELECT EServiceBarcodeID FROM coc_EServiceBarcodes(NOLOCK) WHERE (@corporateID is not null and CorporateID= @corporateID) and Barcode=@barcode and IsUsed = 1 AND  (ISNULL(ConsumerID,0)>0 or ISNULL(GuestID,0)>0 ))        
 BEGIN         
           
  SET @ErrorMessage=406-- Barcode Used (Vch_UsedBarcode)        
          
 END        
 IF EXISTS(SELECT EServiceBarcodeID FROM coc_EServiceBarcodes(NOLOCK) WHERE (@corporateID is not null and CorporateID= @corporateID) and Barcode=@barcode AND (ISNULL(ConsumerID,0)>0 or ISNULL(GuestID,0)>0 ))        
 BEGIN         
   SELECT         
            
    eb.EServiceBarcodeID,        
    evl.ResourceValue AS Description,        
    evls.ResourceValue AS VoucherName,          
    ev.ExpiryDate,        
    ev.EVoucherID,        
    eb.IsUsed,        
    ev.IsPrinted,        
    case when eb.ConsumerID is not null then  cs.FirstName else g.FullName end as FirstName,        
    cs.SecondName,        
    eb.Barcode,        
    crs.FirstName AS CorporateFirstName,        
    evl.LanguageID,        
    crs.CorporateName,        
    crs.MerchantCode,        
 '' as Distributor,    
   --ev.VoucherType,
  ev.OriginalPrice- ev.PriceAfterDiscount as DiscountAmount,    
    @Imageurl AS ImageUrl,
	ev.Type as VoucherType,
	ev.DiscountPercentage,
	ev.OriginalPrice,
	ev.PriceAfterDiscount	        
   FROM coc_EServiceBarcodes(NOLOCK) eb        
   LEFT JOIN coc_EVoucher(NOLOCK) ev ON eb.EVoucherID=ev.EVoucherID AND ev.IsActive = 1          
   LEFT JOIN coc_EVoucherLanguages(NOLOCK) evl ON evl.EVoucherID=ev.EVoucherID AND evl.LanguageID = @languageId AND evl.ResourceKey = 'Description'        
   left JOIN coc_EVoucherLanguages(NOLOCK) evls ON evls.EVoucherID=ev.EVoucherID AND evls.LanguageID = @languageId AND evls.ResourceKey = 'VoucherName'        
   LEFT JOIN coc_Consumers(NOLOCK) cs ON cs.ConsumerID=eb.ConsumerID        
   LEFT JOIN coc_Guests(NOLOCK) g ON g.GuestID =eb.GuestID        
   LEFT JOIN coc_EServices(NOLOCK) esrs ON esrs.EServiceID=ev.EServiceID        
   LEFT JOIN coc_Corporates(NOLOCK) crs ON crs.CorporateID=esrs.CorporateID        
   WHERE  eb.Barcode=@barcode  and (@corporateID is not null and eb.CorporateID = @corporateID)    
        
          
 END        
 ELSE        
 BEGIN        
   SET @ErrorMessage=405-- There is no records Exists Error(Vch_InvalidBarcode)        
 END        
         
         
END 
GO
/****** Object:  StoredProcedure [dbo].[USP_VOUCHERDASHBOARD]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_VOUCHERDASHBOARD] 

(

@VoucherID int

)

AS

BEGIN



Declare @VoucherName nvarchar(200);

Declare @VoucherStartDate datetime;

Declare @EserviceID int = 1;

Declare @NumberOfVouchers int = 0;

Declare @TotalDistributed int = 0;

Declare @TotalUsed int = 0;

Declare @DrTotalDistributed int = 0;

Declare @DrTotalUsed int = 0;

Declare @DrQrTotalDistributed int = 0;

Declare @DrQrTotalUsed int = 0;

Declare @BrETotalDistributed int = 0;

Declare @BrETotalUsed int = 0;

Declare @SmLTotalDistributed int = 0;

Declare @SmLTotalUsed int = 0;



set @EServiceID=(select top 1 EserviceID from coc_Evoucher(NOLOCK) where EVoucherID = @VoucherID)



Select @VoucherStartDate = AddDate from coc_Evoucher(NOLOCK) where EvoucherID = @VoucherID;



------NUMBER OF VOUCHERS------------

SELECT @NumberOfVouchers = SUM(NOTIFICATIONCOUNT) FROM coc_notifications(NOLOCK) WHERE ESERVICEID = @EserviceID;

------NUMBER OF VOUCHERS------------

 



------TOTAL DISTRIBUTED------------

SELECT @TotalDistributed = COUNT(*) FROM coc_EServiceBarcodes(NOLOCK) WHERE NotificationID IN (SELECT NotificationID FROM coc_notifications(NOLOCK) WHERE ESERVICEID = @EserviceID) AND 

(AsignedEmailID IS NOT NULL OR ConsumerID IS NOT NULL OR GuestID IS NOT NULL or AsignedMoile is not null) ;

------TOTAL DISTRIBUTED------------





------TOTAL USED------------

SELECT @TotalUsed = COUNT(*) FROM coc_EServiceBarcodes(NOLOCK) WHERE NotificationID IN (SELECT NotificationID FROM coc_notifications(NOLOCK) WHERE ESERVICEID = @EserviceID) AND  ISUSED = 1;

------TOTAL USED------------





------DIRECT FROM ECOPON MOBILE------------

SELECT @DrTotalDistributed = COUNT(*) FROM coc_EServiceBarcodes(NOLOCK) WHERE NotificationID IN (SELECT NotificationID FROM coc_notifications(NOLOCK) WHERE ESERVICEID = @EserviceID) AND 



(AsignedEmailID IS NOT NULL OR ConsumerID IS NOT NULL OR GuestID IS NOT NULL or AsignedMoile is not null) AND IsDirectVoucher = 1;





SELECT @DrTotalUsed = COUNT(*) FROM coc_EServiceBarcodes  (NOLOCK)



WHERE NotificationID IN (SELECT NotificationID FROM coc_notifications(NOLOCK) WHERE ESERVICEID = @EserviceID) AND  ISUSED = 1 AND IsDirectVoucher = 1;

------DIRECT FROM ECOPON MOBILE------------





------DISTRIBUTION QR CODE------------

SELECT @DrQrTotalDistributed = COUNT(*) FROM coc_EServiceBarcodes(NOLOCK) WHERE NotificationID IN (SELECT NotificationID FROM coc_notifications(NOLOCK) WHERE ESERVICEID = @EserviceID) AND 



(AsignedEmailID IS NOT NULL OR ConsumerID IS NOT NULL OR GuestID IS NOT NULL or AsignedMoile is not null) AND (Distributiontype is null or  Distributiontype = 0);





SELECT @DrQrTotalUsed = COUNT(*) FROM coc_EServiceBarcodes  (NOLOCK)



WHERE NotificationID IN (SELECT NotificationID FROM coc_notifications(NOLOCK) WHERE ESERVICEID = @EserviceID) AND  ISUSED = 1  AND (Distributiontype is null or  Distributiontype = 0);

------DISTRIBUTION QR CODE------------





------BROADCAST EMAIL------------

SELECT @BrETotalDistributed = COUNT(*) FROM coc_EServiceBarcodes(NOLOCK) WHERE NotificationID IN (SELECT NotificationID FROM coc_notifications(NOLOCK) WHERE ESERVICEID = @EserviceID) AND 



(AsignedEmailID IS NOT NULL OR ConsumerID IS NOT NULL OR GuestID IS NOT NULL or AsignedMoile is not null) AND Distributiontype = 2 ;





SELECT @BrETotalUsed = COUNT(*) FROM coc_EServiceBarcodes (NOLOCK) 



WHERE NotificationID IN (SELECT NotificationID FROM coc_notifications (NOLOCK) WHERE ESERVICEID = @EserviceID) AND  ISUSED = 1   AND Distributiontype = 2;

------BROADCAST EMAIL------------





------SOCIAL MEDIA LINK------------

SELECT @SmLTotalDistributed = COUNT(*) FROM coc_EServiceBarcodes(NOLOCK) WHERE NotificationID IN (SELECT NotificationID FROM coc_notifications (NOLOCK) WHERE ESERVICEID = @EserviceID) AND 



(AsignedEmailID IS NOT NULL OR ConsumerID IS NOT NULL OR GuestID IS NOT NULL or AsignedMoile is not null) AND Distributiontype = 1;





SELECT @SmLTotalUsed = COUNT(*) FROM coc_EServiceBarcodes  (NOLOCK)



WHERE NotificationID IN (SELECT NotificationID FROM coc_notifications (NOLOCK) WHERE ESERVICEID = @EserviceID) AND  ISUSED = 1   AND Distributiontype = 1;

------SOCIAL MEDIA LINK------------







SELECT @NumberOfVouchers NumberOfVouchers , @TotalDistributed TotalDistributed ,@TotalUsed TotalUsed,

@DrTotalDistributed DrTotalDistributed,@DrTotalUsed DrTotalUsed,@DrQrTotalDistributed DrQrTotalDistributed,@DrQrTotalUsed DrQrTotalUsed,

@BrETotalDistributed BrETotalDistributed,@BrETotalUsed BrETotalUsed,@VoucherStartDate VoucherStartDate,@SmLTotalDistributed SmLTotalDistributed,@SmLTotalUsed SmLTotalUsed;

----------Distribultion By QR Code table----------------

SELECT CC.CORPORATENAME,(SELECT SUM(coc_notifications.NOTIFICATIONCOUNT) FROM coc_notifications (NOLOCK) WHERE ESERVICEID = @EserviceID) NoOFVouchers FROM coc_Corporates(NOLOCK) CC JOIN coc_eservices(NOLOCK) CE ON CE.CORPORATEID = CC.CORPORATEID
join coc_notifications(NOLOCK) cn on cn.ESERVICEID = ce.EserviceID where CE.EserviceID = @EserviceID 

----------Distribultion By QR Code table----------------

END
GO
/****** Object:  StoredProcedure [dbo].[USP_Web_IsValidUser]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_Web_IsValidUser]  
 @UserName NVARCHAR(500)  
,@SocialUserID INTEGER = NULL  
AS  
SET NOCOUNT ON  
  
IF @SocialUserID IS NULL  
BEGIN  
 SELECT TOP (1) US.UserID  
  ,UserName  
  ,US.[Password]  
  ,US.IsActive  
  ,RoleID  
  ,US.MobileNumber  
  ,US.EmailID  
  ,LS.LoginTime  
  ,CASE   
   WHEN ISNULL(CE.CorporateID, '') = ''  
    THEN ISNULL(CR.CorporateID, '')  
   ELSE CE.CorporateID  
   END CorporateID  
  ,CR.CRNumber  
  ,CR.CorporateName  
  ,cr.JCCICode  
  ,US.ResetRequired  
  ,ISNULL(CS.ConsumerID, 0) [ConsumerID]  
  ,CS.IsVerified  
  ,CS.OtpID [VerificationCode]  
  ,CASE   
   WHEN ROLEID = 3  
    THEN ISNULL(CR.FirstName, '')  
   ELSE ISNULL(CS.FirstName, '')  
   END FirstName  
  ,ISNULL(US.FullName, '') FullName  
  ,ISNULL(CU.EmployeeName, '') EmployeeName  
  ,CASE   
   WHEN ROLEID = 3  
    THEN CA.City  
   ELSE CL.City  
   END [City]  
  ,CASE   
   WHEN ROLEID = 3  
    THEN SG.Country  
   ELSE CG.Country  
   END [Country]  
  ,CASE   
   WHEN ISNULL(CS.Address1, '') = ''  
    THEN 'Address'  
   ELSE CS.Address1  
   END Address1  
  ,CASE   
   WHEN ROLEID = 3  
    THEN ISNULL(CR.LastName, '')  
   ELSE CS.FamilyName  
   END [FamilyName]  
  ,CR.LogoFile  
 FROM [coc_Users] US(NOLOCK)  
 LEFT JOIN [coc_LoginUsers] LS(NOLOCK) ON LS.UserID = US.UserID  
  AND LS.UserID IS NOT NULL  
 LEFT JOIN [coc_Corporates] CR(NOLOCK) ON CR.UserID = US.UserID  
 LEFT JOIN [coc_CorporateUsers] CE(NOLOCK) ON CE.UserID = US.UserID  
 LEFT JOIN [coc_Consumers] CS(NOLOCK) ON CS.UserID = US.UserID  
 LEFT JOIN [coc_CorporateUsers] CU(NOLOCK) ON CU.UserID = US.UserID  
 LEFT JOIN [coc_CityLanguages] CL(NOLOCK) ON CS.CityID = CL.CityID  
  AND CL.LanguageID = 1  
 LEFT JOIN [coc_CountryLanguages] CG(NOLOCK) ON CS.CountryID = CG.CountryID  
  AND CG.LanguageID = 1  
 LEFT JOIN [coc_CityLanguages] CA(NOLOCK) ON CR.CityID = CA.CityID  
  AND CA.LanguageID = 1  
 LEFT JOIN [coc_CountryLanguages] SG(NOLOCK) ON CR.CountryID = SG.CountryID  
  AND SG.LanguageID = 1  
 WHERE (US.EmailID = @UserName  
  OR US.MobileNumber = @UserName 
  OR CR.CRNumber = @UserName  )
 AND US.IsActive=1  and us.IsDeleted = 0
END  
 
SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[Usp_webservice_Delete]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Usp_webservice_Delete]
 @mobile nvarchar(20)
,@ErrorMessage nvarchar(200) out
as
begin
Set @ErrorMessage = 0;
if exists(Select COUNT(*) from eCoponTest2020February5.dbo.coc_Consumers(nolock) where PrimaryMobile = @mobile and IsActive=1 and IsDeleted= 0)
    begin
		Update eCoponTest2020February5.dbo.coc_Users set IsActive = 0,IsDeleted = 1 where MobileNumber = @mobile and IsActive=1 and IsDeleted= 0;
		Update eCoponTest2020February5.dbo.coc_Consumers set IsActive = 0,IsDeleted = 1 where PrimaryMobile = @mobile and IsActive=1 and IsDeleted= 0;
		Set @ErrorMessage = 1;		
	end

end
GO
/****** Object:  StoredProcedure [dbo].[Usp_webservice_GetOtp]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[Usp_webservice_GetOtp]
 @mobile nvarchar(20)
,@ErrorMessage nvarchar(200) = null out
as
begin
Set @ErrorMessage = 0;
if exists(Select COUNT(*) from eCoponTest2020February5.dbo.coc_PreConsumerRegister(nolock) where PrimaryMobile = @mobile)
    begin
		Declare @OtpId int
		select Top 1 @OtpId = OtpID from eCoponTest2020February5.dbo.coc_PreConsumerRegister(nolock)  
		where PrimaryMobile = @mobile order by PreConsumerID desc;
		Select @ErrorMessage  = Otp from eCoponTest2020February5.dbo.coc_OTP(noLock) where OtpID=@OtpId;		
	end
end
GO
/****** Object:  StoredProcedure [dbo].[usp_Winservice_GetGeneralNotification]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Winservice_GetGeneralNotification]      
 @LanguageID INTEGER,      
 @SpResponseStatus int = null out,      
 @SpResponseMessage nvarchar(max) = null out,      
 @SpErrorDetails nvarchar(max) = null  out         
AS           
 Begin Try          
  if isnull(@LanguageID,0) = 0      
     set @LanguageID = 1;      
  Set @SpResponseStatus=1;           
  Set @SpResponseMessage='Success';          
  Set @SpErrorDetails='Success';       
 -- SET NOCOUNT ON added to prevent extra result sets from      
 -- interfering with SELECT statements.      
 SET NOCOUNT ON;      
        
  Declare @NotificationCount int;      
  set @NotificationCount  = 0;      
  Declare @notifications table(ConsumerNotificationID int, BadgeCount int,GeneralNotificationID bigint);      
        
  insert into @notifications (ConsumerNotificationID, BadgeCount,GeneralNotificationID)      
      SELECT top 1000 CN.ConsumerNotificationID, bdg.BadgeCount,NS.GeneralNotificationId      
         FROM coc_ConsumerNotifications (NOLOCK) CN         
           INNER JOIN coc_Consumers (NOLOCK) CU ON CU.ConsumerID=CN.ConsumerID      
           INNER JOIN coc_NotificationSends(NOLOCK) NS ON CN.NotificationSendID=NS.NotificationSendID      
           INNER JOIN coc_NotificationSendLanguages(NOLOCK) NL ON NL.NotificationSendID=CN.NotificationSendID AND LanguageID=@LanguageID --AND SendingType != 4      
           LEFT JOIN coc_Notifications(NOLOCK) NT ON NT.NotificationID=NS.NotificationID          
           LEFT JOIN (SELECT COUNT(*) as BadgeCount, CU.ConsumerID      
           FROM coc_ConsumerNotifications CN(NOLOCK)       
               INNER JOIN coc_Consumers (NOLOCK) CU ON CU.ConsumerID=CN.ConsumerID      
                INNER JOIN coc_NotificationSends(NOLOCK) NS ON CN.NotificationSendID=NS.NotificationSendID      
                INNER JOIN coc_NotificationSendLanguages(NOLOCK) NL ON NL.NotificationSendID=CN.NotificationSendID AND LanguageID=@LanguageID --AND SendingType != 4      
                --LEFT JOIN coc_Notifications(NOLOCK) NT ON NT.NotificationID=NS.NotificationID      
                --LEFT JOIN coc_EServiceBarcodes(NOLOCK) EB ON EB.NotificationID=NS.NotificationID AND CN.ConsumerID=EB.ConsumerID AND EB.ConsumerNotificationID=CN.ConsumerNotificationID      
                --LEFT JOIN coc_EServices(NOLOCK) ES ON ES.EServiceID=NT.EServiceID      
                --LEFT JOIN coc_corporates(NOLOCK) CO ON CO.CorporateID =ES.CorporateID      
      WHERE Convert(date,NS.SendingDate)<=Convert(date,GETDATE()) and CN.HasChecked = 0 and isnull(NS.GeneralNotificationId,0)<>0    
      group by CU.ConsumerID) bdg on bdg.ConsumerID = CU.ConsumerID      
                  
  WHERE Convert(date,NS.SendingDate)<=Convert(date,GETDATE()) and isnull(CN.PushNotified,0) = 'False' and isnull(CN.SendPushNotification,0) = 'True'      
    And (isnull(CU.DeviceToken, '') <> '' or isnull(CU.AndroidDeviceToken, '') <> '')  and isnull(NS.GeneralNotificationId,0)<>0              
    ORDER BY NS.SendingDate DESC      
          
  UPDATE CN set PushNotified = 'True'      
    FROM coc_ConsumerNotifications (NOLOCK) CN INNER JOIN @notifications NTemp on NTemp.ConsumerNotificationID = CN.ConsumerNotificationID         
      
   INNER JOIN coc_Consumers (NOLOCK) CU ON CU.ConsumerID=CN.ConsumerID      
      
   INNER JOIN coc_NotificationSends(NOLOCK) NS ON CN.NotificationSendID=NS.NotificationSendID      
      
   INNER JOIN coc_NotificationSendLanguages(NOLOCK) NL ON NL.NotificationSendID=CN.NotificationSendID AND LanguageID=@LanguageID --AND SendingType != 4      
      
   LEFT JOIN coc_Notifications(NOLOCK) NT ON NT.NotificationID=NS.NotificationID            
                  
  WHERE Convert(date,NS.SendingDate)<=Convert(date,GETDATE()) and isnull(CN.PushNotified,0) = 'False' and isnull(CN.SendPushNotification,0) = 'True'      
    And (isnull(CU.DeviceToken, '') <> '' or isnull(CU.AndroidDeviceToken, '') <> '')   and isnull(NS.GeneralNotificationId,0)<>0      
                
        
  SELECT CN.ConsumerNotificationID,NS.GeneralNotificationId,NS.NotificationSendID,ISNULL(NT.NotificationRead,0)NotificationRead,NS.NotificationID,Convert(nvarchar(20),FORMAT(NS.SendingDate,'dd MMM yyyy'))SendingDate,NS.SendingType,CONVERT(VARCHAR(8), SendingDate, 108)[Time],      
   ISNULL(NL1.[Subject],'')[Subject1],ISNULL(NL1.[Message],'')[Message1],      
   ISNULL(NL2.[Subject],'')[Subject2],ISNULL(NL2.[Message],'')[Message2],      
 CU.FirstName+' '+CU.SecondName+' '+CU.FamilyName [FirstName],CN.HasChecked,      
      CU.DeviceToken as IOSDeviceToken, CU.AndroidDeviceToken, CN.PushAction, isnull(NTemp.BadgeCount,0) as BadgeCount,   
(Case when exists(SELECT TOP 1 LanguageId from coc_checkversion (NOLOCK) WHERE ConsumerId= CU.ConsumerId AND DeviceType='Android' and LanguageId is not null ORDER BY CheckVersionID desc)
then (SELECT TOP 1 LanguageId from coc_checkversion (NOLOCK) WHERE ConsumerId= CU.ConsumerId AND DeviceType='Android' and LanguageId is not null ORDER BY CheckVersionID desc) else 1 end) AndroidDeviceLanguageId,  
(Case when exists(SELECT TOP 1 LanguageId from coc_checkversion (NOLOCK) WHERE ConsumerId= CU.ConsumerId AND DeviceType='iOS' and LanguageId is not null ORDER BY CheckVersionID desc)
 then (SELECT TOP 1 LanguageId from coc_checkversion (NOLOCK) WHERE ConsumerId= CU.ConsumerId AND DeviceType='iOS' and LanguageId is not null ORDER BY CheckVersionID desc) else 1 end) iOSDeviceLanguageId      
  FROM coc_ConsumerNotifications (NOLOCK) CN INNER JOIN @notifications NTemp on NTemp.ConsumerNotificationID = CN.ConsumerNotificationID      
      
   INNER JOIN coc_Consumers (NOLOCK) CU ON CU.ConsumerID=CN.ConsumerID      
      
   INNER JOIN coc_NotificationSends(NOLOCK) NS ON CN.NotificationSendID=NS.NotificationSendID      
      
   LEFT OUTER JOIN coc_NotificationSendLanguages(NOLOCK) NL1 ON NL1.NotificationSendID=CN.NotificationSendID AND NL1.LanguageID=1 --AND SendingType != 4      
      
   LEFT OUTER JOIN coc_NotificationSendLanguages(NOLOCK) NL2 ON NL2.NotificationSendID=CN.NotificationSendID AND NL2.LanguageID=2       
      
   LEFT JOIN coc_Notifications(NOLOCK) NT ON NT.NotificationID=NS.NotificationID            
                  
  WHERE Convert(date,NS.SendingDate)<=Convert(date,GETDATE()) and isnull(CN.SendPushNotification,0) = 'True'      
    And (isnull(CU.DeviceToken, '') <> '' or isnull(CU.AndroidDeviceToken, '') <> '') and isnull(NS.GeneralNotificationId,0)<>0        
  ORDER BY NS.SendingDate DESC   
  

END TRY                      
  BEGIN CATCH            
  Set @SpResponseStatus=0;           
  Set @SpResponseMessage='GenericError';          
  Set @SpErrorDetails ='ErrorNumber : <' + ERROR_NUMBER()+ '>, ErrorSeverity : <'+ ERROR_SEVERITY()+'>, ErrorState : <'+ERROR_STATE()+'> , ErrorProcedure : <'+ERROR_PROCEDURE()+'> , ErrorLine <'+ERROR_LINE()+'> ErrorMessage : <'+ERROR_MESSAGE()+'>';      
  
    
      
  END CATCH                      
 SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[ValidateConsumerForECouponVoucher]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author  : Arya  
-- Create date : 18-12-2017  
-- Description : Verify consumer eligibility to recieve voucher on ecopon purchase  
-- =============================================  
CREATE PROCEDURE [dbo].[ValidateConsumerForECouponVoucher]  
 @ConsumerId INTEGER,  
 @EserviceId INTEGER,  
 @EvoucherId INTEGER = 0,  
 @errortext VARCHAR(50) = NULL output  
AS  
 BEGIN  
   SET @errortext = '0'  
  DECLARE @genderRestriction INTEGER = 0  
  DECLARE @gender INTEGER  
  
  IF(EXISTS (SELECT * FROM coc_Consumers (NOLOCK)  
   --WHERE (Gender IS NULL OR ISNULL(FullName,'')= '' OR  CityID IS NULL OR NationalityID IS NULL)   
   WHERE (Gender IS NULL OR ISNULL(ISNULL(FullName, isnull(FirstName,'')+ ' '+  isnull(SecondName,'')+ ' ' + isnull(FamilyName,'')),'')= '' OR  CityID IS NULL OR NationalityID IS NULL or UserIdentityNumber is null)
   AND ConsumerID = @ConsumerId))  
    BEGIN  
     SET @errortext = 'ConsumerFullProfileNotFilled'  
     PRINT @errortext  
     RETURN  
    END  
    PRINT @errortext  
  
  --IF((SELECT SentEVoucher FROM coc_ECoupons WHERE EServiceID = @EserviceId)=1)  
  -- BEGIN  
    -- CAN SEND VOUCHER FOR THIS SERVICE  
    SELECT @genderRestriction = GenderRestriction FROM coc_ECoupons (NOLOCK) WHERE EServiceID = @EserviceId  
    IF(@genderRestriction!= 0)  
     BEGIN  
      SELECT @gender = Gender FROM coc_Consumers (NOLOCK) WHERE ConsumerID = @ConsumerId  
      IF((@genderRestriction = 2 AND @gender=2) OR (@genderRestriction = 1 AND @gender=1))  
       BEGIN  
        SET @errortext = '0'  
       END  
      ELSE  
       BEGIN  
        SET @errortext = 'GenderRestricted'  
       END  
     END      
   --END    
 END  
-----------------------------------------------------------------
GO
/****** Object:  StoredProcedure [dbo].[VerifyAddonServiceParticipationCount]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[VerifyAddonServiceParticipationCount]
	@EServiceAddOnId INTEGER,
	@errortext VARCHAR(100) output

	AS
	BEGIN 
		SET @errortext = '0'

		DECLARE @ActiveServiceCount INTEGER
		DECLARE @ParticipationCount INTEGER
		DECLARE @ParticipatedCount INTEGER

		SELECT @ActiveServiceCount = COUNT(*) FROM coc_EServices (NOLOCK) ES
		INNER JOIN coc_eServiceAddOn(NOLOCK) EA ON ES.EServiceID = EA.AddOnServiceID
		WHERE GETDATE() between ES.FromDate AND ES.ToDate AND ES.IsActive = 1 AND EA.EServiceAddOnId = @EServiceAddOnId

		IF(@ActiveServiceCount <= 0)
		BEGIN
			SET @errortext = 'AddOn Service Is Not Active'
			RETURN
		END

		SELECT @ActiveServiceCount = COUNT(*) FROM coc_EServices (NOLOCK) ES
		INNER JOIN coc_eServiceAddOn(NOLOCK) EA ON ES.EServiceID = EA.EServiceID
		WHERE GETDATE() between ES.FromDate AND ES.ToDate AND ES.IsActive = 1 AND EA.EServiceAddOnId = @EServiceAddOnId

		IF(@ActiveServiceCount <= 0)
		BEGIN
			SET @errortext = 'Parent Service Is Not Active'
			RETURN
		END

		SELECT @ParticipationCount = ParticipationCount FROM coc_eServiceAddOn(NOLOCK) WHERE EServiceAddOnId = @EServiceAddOnId
		SELECT @ParticipatedCount = COUNT(EServiceBarcodeID) FROM coc_EServiceBarcodes (NOLOCK) WHERE EServiceAddOnId = @EServiceAddOnId
		PRINT @ParticipatedCount

		IF(@ParticipationCount <= @ParticipatedCount)
		BEGIN
			SET @errortext = 'Participation Count Exceeded'
		END
	END
GO
/****** Object:  StoredProcedure [dbo].[VerifyBarCode]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[VerifyBarCode]
	@GuestMobileNumber [Phone],
	@GuestName [Code],
	@BarCode [NullDescription],
	@ErrorMessage [Remark] =NULL OUTPUT
AS
	SET NOCOUNT ON
	BEGIN TRY 
	BEGIN TRANSACTION TRN_VerifyBarCode
		DECLARE @EserviceTypeID INTEGER 
		DECLARE @UniqueID INTEGER
		DECLARE @RegistrationRequired BIT
		
	SELECT @RegistrationRequired=MemberOnly fROM coc_EServiceBarcodes EB(NOLOCK) --
		INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID=NT.NotificationID 
		INNER JOIN coc_ECoupons EC(NOLOCK) ON NT.EServiceID=EC.EServiceID
	WHERE EB.Barcode=@BarCode
	IF(@RegistrationRequired=1)
	BEGIN
		SELECT @EserviceTypeID=EC.EntryTypeID 
			FROM coc_ECoupons EC (NOLOCK)
				INNER JOIN coc_Notifications NS (NOLOCK) ON NS.EServiceID=EC.EServiceID
				INNER JOIN coc_EServiceBarcodes BC (NOLOCK) ON BC.NotificationID=NS.NotificationID
			WHERE BC.Barcode=@BarCode
		IF NOT EXISTS(SELECT NULL FROM  coc_EServiceBarcodes (NOLOCK) WHERE Barcode=@BarCode AND AsignedEmailID IS NULL AND AsignedMoile IS NULL AND @EserviceTypeID IN(41,43))
		BEGIN
			SET @ErrorMessage = 'BarcodeAlreadyUsedORInvalid' 
			SELECT @ErrorMessage [Otp]
		END
		ELSE BEGIN
			IF NOT EXISTS(SELECT NULL FROM coc_GuestParticipations (NOLOCK) WHERE Mobile=@GuestMobileNumber)
			BEGIN
				INSERT INTO coc_GuestParticipations(GuestName,Mobile,ParticipationDate)
					SELECT @GuestName,@GuestMobileNumber,GETDATE()
				SET @UniqueID = SCOPE_IDENTITY()
			END 
			ELSE BEGIN
				SELECT @UniqueID=GuestParticipationID FROM coc_GuestParticipations(NOLOCK) WHERE Mobile=@GuestMobileNumber
				
				UPDATE coc_GuestParticipations
					SET GuestName=@GuestName
				WHERE Mobile=@GuestMobileNumber
			END 
			EXEC GenerateOTP 138,@UniqueID
			SET @ErrorMessage=''
		END
	END
	ELSE BEGIN
		SET @ErrorMessage = 'NeedRegisteredUser' 
		SELECT @ErrorMessage [Otp]
	END
	COMMIT TRANSACTION TRN_VerifyBarCode
	END TRY
	BEGIN CATCH									
		ROLLBACK TRANSACTION TRN_VerifyBarCode
		SELECT @ErrorMessage= ERROR_MESSAGE()
		RAISERROR(@ErrorMessage, 16, 1);			
	END CATCH
	
	SET NOCOUNT OFF








GO
/****** Object:  StoredProcedure [dbo].[VerifyBarCodeAtKiosk]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[VerifyBarCodeAtKiosk]      
 @UserType nvarchar(50)= NULL,      
 @KioskLocationID INTEGER,      
 @BarCode [NullDescription],      
 @KioskScreenID INTEGER,       
 @LanguageID INTEGER,      
 @InvoiceNumberRequired BIT=NULL OUTPUT,      
 @InvoiceAmountRequired BIT=NULL OUTPUT,      
 @BarcodeID BIGINT =NULL OUTPUT,      
 @EServiceID BIGINT =NULL OUTPUT,      
 @ServiceName Remark OUTPUT,      
 @StartDate datetime OUTPUT,      
 @EndDate datetime OUTPUT,      
 @Description Remark OUTPUT,      
 @ErrorMessage [Remark] =NULL OUTPUT      
AS      
 SET NOCOUNT ON      
 BEGIN TRY       
 BEGIN TRANSACTION TRN_VerifyBarCodeAtKiosk      
  DECLARE @ParticipationCount INTEGER      
  DECLARE @MultipleParticipation BIT      
  DECLARE @ParticipationByKiosk BIT      
  DECLARE @RegistrationRequired BIT      
  DECLARE  @EserviceTypeID INT      
  DECLARE @IsUsed BIT      
      
 SELECT  @BarcodeID = EB.EServiceBarcodeID,        
   @MultipleParticipation= EC.MultipleParticipation,       
   @ParticipationCount = EC.ParticipationCount,      
   @ParticipationByKiosk = EC.ParticipationByKiosk,      
   @RegistrationRequired = EC.RegistrationRequired,      
   @IsUsed = EB.IsUsed,      
   @ServiceName = ESL.EService,      
   @StartDate = ES.FromDate,      
   @EndDate = ES.ToDate,      
   @EserviceTypeID = ES.ServiceTypeID,      
   @EServiceID = ES.EServiceID,      
   @Description = dbo.udf_StripAllHTML(isnull(EVL_Desc.ResourceValue,''))     
  fROM coc_EServiceBarcodes EB(NOLOCK) --      
  INNER JOIN coc_Notifications NT(NOLOCK) ON EB.NotificationID=NT.NotificationID       
  INNER JOIN coc_EServices ES(NOLOCK) ON ES.EServiceID=NT.EServiceID      
  INNER JOIN coc_EServiceLanguages ESL (NOLOCK) ON ESL.EServiceID = ES.EServiceID AND ESL.LanguageID = @LanguageID   
  
  LEFT JOIN coc_ECoupons EC(NOLOCK) ON NT.EServiceID=EC.EServiceID 
  LEFT JOIN coc_EVoucherLanguages EVL_Desc(NOLOCK) ON EVL_Desc.EVoucherID = EB.EVoucherID and EVL_Desc.LanguageID = @LanguageID and EVL_Desc.ResourceKey= 'Description'      
 WHERE EB.Barcode=@BarCode and ISNULL(EC.IsActive,1) = 1 and ES.IsActive = 1 and       
  convert(datetime,convert(varchar,GETDATE(),101),101) >=  convert(datetime,convert(varchar,ES.FromDate,101),101) and      
  convert(datetime,convert(varchar,GETDATE(),101),101) <=  convert(datetime,convert(varchar,ES.ToDate,101),101)    
    
 if(@EServiceID <>0 AND @EServiceID IS NOT NULL)  
 begin  
  if EXists(Select EVoucherID from coc_EVoucher (NOLOCK) where Type=3 and EServiceID=@EServiceID)  
    begin   
  set  @InvoiceNumberRequired=1       
      set @InvoiceAmountRequired=1     
 end   
 end  
  
      
 IF(@RegistrationRequired=1 and (@UserType IS NULL or @UserType = 'Member'))      
 BEGIN      
  SET @ErrorMessage='MsgRegistrationRequired'      
 END      
 ELSE      
 BEGIN    
        
  IF (@BarcodeID IS NULL)      
  BEGIN      
     
   SET @ErrorMessage = 'MsgBarcodeInvalid'       
   SET @BarcodeID= -1       
  END      
  IF (@IsUsed = 1)      
  BEGIN      
   SET @ErrorMessage = 'MsgBarcodeAlreadyUsed'       
   SET @BarcodeID= -1       
  END         
 END   
 COMMIT TRANSACTION TRN_VerifyBarCodeAtKiosk      
 END TRY      
 BEGIN CATCH               
  ROLLBACK TRANSACTION TRN_VerifyBarCodeAtKiosk      
  SET @ErrorMessage= ERROR_MESSAGE()      
  SET @BarcodeID= -1       
  RAISERROR(@ErrorMessage, 16, 1);         
 END CATCH     
       
 SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[VerifyConsumer]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[VerifyConsumer] 
	@Email [Email] = NULL,
	@Mobile [Mobile] = NULL,
	@ErrorMessage [Remark] OUTPUT
AS
SET NOCOUNT ON
BEGIN
	IF NOT EXISTS (SELECT 1  FROM coc_Consumers(NOLOCK) WHERE IsVerified = 1 AND IsActive = 1 AND IsDeleted = 0 AND ( ( @Email IS NULL OR EmailID = @Email ) OR ( @Mobile IS NULL OR PrimaryMobile = @Mobile ) ) )
	BEGIN
		SET @ErrorMessage = '0'
	END
	ELSE
	BEGIN
		IF NOT EXISTS (SELECT 1  FROM coc_users (NOLOCK) WHERE IsActive = 1 AND IsDeleted = 0 AND ( ( @Email IS NULL OR EmailID = @Email ) OR ( @Email IS NULL OR UserName = @Email ) OR ( @Mobile IS NULL OR MobileNumber = @Mobile ) ) )
		BEGIN
			SET @ErrorMessage = '0'
		END
		ELSE
		BEGIN
			SET @ErrorMessage = '1'
		END
	END
END

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[VerifyConsumerID]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[VerifyConsumerID]
 @ConsumerID INTEGER 
 ,@IsValid BIT OUTPUT
AS

BEGIN
DECLARE @IsActive BIT
 DECLARE @IsVerified BIT


	SELECT	
	@IsActive=IsActive,@IsVerified=IsVerified
			FROM coc_Consumers (NOLOCK)
			WHERE ConsumerID = @ConsumerID 

			IF(@IsActive=1 AND @IsVerified=1)
			BEGIN
			SET @IsValid=1
			END
			ELSE
			BEGIN
			SET @IsValid=0
			END

END
GO
/****** Object:  StoredProcedure [dbo].[VerifyCorporateUser]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[VerifyCorporateUser]  
 @Email [Email]=NULL,  
 @Mobile [Mobile]=NULL,  
 @ErrorMessage [Remark] =null OUTPUT  
AS   
 SET NOCOUNT ON  
  BEGIN  
  if (len(@Mobile) <> 14)
	begin
	 SET @ErrorMessage='3'  --invalid mobile
	 return;
	end

   IF  EXISTS (SELECT 1 FROM coc_Users(NOLOCK) WHERE IsActive=0 and Isdeleted = 0 AND ((@Email IS NULL OR EmailID=@Email) OR (@Mobile IS NULL OR MobileNumber=@Mobile)))  
   BEGIN  
    SET @ErrorMessage='2'  --inactive user
   END  
   else IF  EXISTS (SELECT 1 FROM coc_Users(NOLOCK) WHERE IsActive=0 and IsDeleted = 1 AND ((@Email IS NULL OR EmailID=@Email) OR (@Mobile IS NULL OR MobileNumber=@Mobile)))  
   BEGIN  
    SET @ErrorMessage='1'  --user deleted
   END  
   ELSE  if not EXISTS (SELECT 1 FROM coc_Users(NOLOCK) WHERE IsActive=1 and IsDeleted = 0 AND ((@Email IS NULL OR EmailID=@Email) OR (@Mobile IS NULL OR MobileNumber=@Mobile)))  
   BEGIN      
    SET @ErrorMessage='0'  -- not exists
   END  
  END  
 SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[VerifyGuest]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[VerifyGuest]
	@Email [Email]=NULL,
	@Mobile [Mobile]=NULL,
	@GuestID integer OUTPUT,
	@ConsumerID integer OUTPUT,
	@ErrorMessage [Remark] OUTPUT
AS	
	SET NOCOUNT ON
		BEGIN
			
			IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1 and isactive= 1 and isdeleted = 0 AND (PrimaryMobile=@Mobile))
				select top 1 @ConsumerID = ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1 and isactive= 1 and isdeleted = 0 AND (PrimaryMobile=@Mobile) 
			else IF EXISTS (select ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1 and isactive= 1 and isdeleted = 0 AND (EmailID=@Email))
				select top 1 @ConsumerID = ConsumerID FROM coc_Consumers(NOLOCK) WHERE IsVerified=1 and isactive= 1 and isdeleted = 0 AND (EmailID=@Email) 
			
			if @ConsumerID is not null
			BEGIN
				SET @ErrorMessage='2'
			END
			ELSE
			BEGIN
				IF EXISTS (select GuestID FROM coc_guests(NOLOCK) WHERE (PrimaryMobile=@Mobile))
					select top 1 @GuestID = GuestID FROM coc_guests(NOLOCK) WHERE (PrimaryMobile=@Mobile) 
				else IF EXISTS (select GuestID FROM coc_guests(NOLOCK) WHERE (EmailID=@Email))
					select top 1 @GuestID = GuestID FROM coc_guests(NOLOCK) WHERE (EmailID=@Email) 
			
				IF @GuestID is null
				BEGIN
					SET @ErrorMessage='0'
				END
				ELSE
				BEGIN
					SET @ErrorMessage='1'
				END
			END
		END
	SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[VerifyGuestOtp]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[VerifyGuestOtp]
	@BarCode [NullDescription],
	@Otp [NullPin],
	@UniqueID INTEGER,
	@Mobile [Phone],
	@ErrorMessage [Remark] =NULL OUTPUT
AS
SET NOCOUNT ON 
	DECLARE @EServiceBarcodeID INTEGER 

	EXEC VerifyOTP @UniqueID,138,@Otp,NULL,@ErrorMessage OUTPUT
	 
	IF(@ErrorMessage =1)
	BEGIN
		SELECT TOP 1 @EServiceBarcodeID=EServiceBarcodeID FROM coc_EServiceBarcodes (NOLOCK) WHERE Barcode=@BarCode

		UPDATE coc_EServiceBarcodes SET
			AsignedMoile=@Mobile,
			IsUsed=1,
			UsedDate=GETDATE()
		WHERE Barcode=@BarCode AND EServiceBarcodeID=@EServiceBarcodeID
		SET @ErrorMessage=''
	END ELSE
		SET @ErrorMessage='OtpMismatch'

	SELECT @ErrorMessage

SET NOCOUNT OFF








GO
/****** Object:  StoredProcedure [dbo].[VerifyIdentity]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[VerifyIdentity]  
 @MobileNo [Mobile]=NULL,  
 @Email [Email]=NULL,  
 @Password NVARCHAR(55),  
 @ErrorMessage [Remark] OUTPUT   
AS   
SET NOCOUNT ON  
 DECLARE @IsVerified BIT=0  
 DECLARE @ConsumerID INTEGER  
 DECLARE @EmailID [Email]  
 DECLARE @UserID INTEGER  
  
  
 SELECT NULL FROM COC_USERS (NOLOCK) WHERE MobileNumber = @MobileNo  
 SET @ErrorMessage = ''  
BEGIN TRY  
  IF EXISTS(SELECT NULL FROM COC_USERS (NOLOCK) WHERE MobileNumber = @MobileNo AND [Password]=@Password  AND @MobileNo IS NOT NULL and (IsActive = 1 and IsDeleted = 0))  
  BEGIN  
   SET @ErrorMessage='1'   
  END  
  ELSE IF EXISTS(SELECT NULL FROM COC_USERS (NOLOCK) WHERE EmailID = @Email AND [Password]=@Password AND @Email IS NOT NULL  and (IsActive = 1 and IsDeleted = 0))  
  BEGIN  
   SET @ErrorMessage='2'   
  END  
  ELSE  
  BEGIN  
   SET @ErrorMessage='0'   
  END  
 END TRY  
 BEGIN CATCH           
  SELECT @ErrorMessage=ERROR_MESSAGE()  
  RAISERROR(@ErrorMessage, 16, 1);     
 END CATCH  
SET NOCOUNT OFF  
GO
/****** Object:  StoredProcedure [dbo].[VerifyOrReceiveVoucherEligibility]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[VerifyOrReceiveVoucherEligibility]  
  
 @ConsumerID INTEGER   
  
,@LanguageID INTEGER = 1  
  
,@VoucherID INTEGER = NULL  
  
,@CorporateID INTEGER  
  
,@EBundleID INTEGER  
  
,@NumberOfEligibleVouchers INTEGER  
  
,@UpdateEligibility BIT = 0  
  
,@EVoucherBundleQRCodeID INTEGER OUTPUT  
  
,@ErrorMessage NVARCHAR(MAX) OUTPUT  
  
,@EligibilityMessage NVARCHAR(MAX) OUTPUT  
  
,@EVoucherBundleEligibilityForConsumersID INT  = null OUTPUT  
  
AS  
  
  
  
BEGIN  
  
  
  
--***Bundle start end date should not overlap voucher service start date end date  
  
--** Move MaxNumberOfVouchersPerCustomer and MaxNumberOfVouchersPerCustomerPerDay to bundle level  
  
  
  
-- Criterias  
  
-- A valid QRCode values exists for the input criteria  
  
-- The corporate using the QRCode should have a valid account (checking by isActive of corporate table)  
  
-- The associated Bundle for the QRCode is valid  
  
-- Atleast one voucher which is active is pending for the bundle  
  
--   
  
  
  
SET @ErrorMessage = ''  
  
  
  
DECLARE @validVoucherCount INTEGER  
  
DECLARE @consumptionCount INTEGER  
  
DECLARE @totalVouchersAssigned INTEGER  
  
DECLARE @availableVouchers INTEGER  
  
DECLARE @consumerEligibleVouchers INTEGER  
  
DECLARE @bundleQRCodeID INTEGER  
  
DECLARE @ConsumerName NVARCHAR(150)  
  
DECLARE @Corporate NVARCHAR(150)  
  
DECLARE @EligibilityMessageIn NVARCHAR(MAX)  
  
  
  
DECLARE @BundleVoucher TABLE(VoucherCount INTEGER, TotalVouchers INTEGER, BundleID INTEGER)  
  
  
  
IF NOT EXISTS(SELECT EVoucherBundleQRCodeID FROM coc_EVoucherBundleQRCode (NOLOCK)  
  
WHERE EBundleID = @EBundleID AND CorporateID = @CorporateID AND NumberOfEligibleVouchers = @NumberOfEligibleVouchers)  
  
BEGIN  
  
 SET @ErrorMessage= 'Vch_NoSuchQRCodeExists'  
  
 Return  
  
END  
  
  
  
  
  
DECLARE @AssignedVoucherForConsumerPerDay INTEGER  
  
DECLARE @MaximumVouchersPerCustomerPerDay INTEGER  
  
SELECT @AssignedVoucherForConsumerPerDay = SUM(EligibleNoOfVouchers) FROM [coc_EVoucherBundleEligibilityForConsumers](NOLOCK) WHERE ConsumerID=@ConsumerID AND CONVERT(NVARCHAR(12),EntryDate,106) = CONVERT(NVARCHAR(12),GETDATE(),106)  
  
SELECT @MaximumVouchersPerCustomerPerDay = MaxNumberOfVouchersPerCustomerPerDay FROM coc_EBundle(NOLOCK) WHERE EBundleID = @EBundleID  
  
  
  
IF(@AssignedVoucherForConsumerPerDay>=@MaximumVouchersPerCustomerPerDay)  
  
BEGIN  
  
 SET @ErrorMessage= 'Vch_ReachedMaximumVouchersPerCustomerPerDay'  
  
 Return  
  
END  
  
  
  
  
  
DECLARE @AssignedVoucherForConsumer INTEGER  
  
DECLARE @MaximumVouchersPerCustomer INTEGER  
  
SELECT @AssignedVoucherForConsumer = SUM(EligibleNoOfVouchers) FROM [coc_EVoucherBundleEligibilityForConsumers](NOLOCK) WHERE ConsumerID=@ConsumerID  
  
SELECT @MaximumVouchersPerCustomer = MaxNumberOfVouchersPerCustomer FROM coc_EBundle(NOLOCK) WHERE EBundleID = @EBundleID  
  
  
  
IF(@AssignedVoucherForConsumer>=@MaximumVouchersPerCustomer)  
  
BEGIN  
  
 SET @ErrorMessage= 'Vch_ReachedMaximumVouchersPerCustomer'  
  
 Return  
  
END  
  
  
  
  
  
--IF EXISTS(SELECT * FROM [coc_EVoucherBundleEligibilityForConsumers] WHERE ConsumerID=@ConsumerID AND EVoucherBundleQRCodeID = @EVoucherBundleQRCodeID)  
  
--BEGIN  
  
-- SET @ErrorMessage = 'Vch_ConsumerAlreadyEligible'  
  
-- Return  
  
--END  
  
  
  
  
  
 BEGIN TRY  
  
--Check for validity of QRCode. Check the bundle vouchers for the distributor whether any any valid voucher is assigned to the distributor.  
  
INSERT INTO @BundleVoucher  
  
SELECT  Count(*) VoucherCount,  SUM(EVBD.NoOfVouchers) TotalVouchers , EB.EBundleID FROM coc_EVoucher (NOLOCK) EV   
  
 INNER JOIN coc_EServices(NOLOCK) ES ON EV.EServiceID = ES.EServiceID   
  
 INNER JOIN coc_EVoucherBundle(NOLOCK) EVB ON EVB.EVoucherID = EV.EVoucherID    
  
 INNER JOIN coc_EBundle(NOLOCK) EB ON EB.EBundleID = EVB.EBundleID   
  
 INNER JOIN coc_Corporates(NOLOCK) EC ON EC.CorporateID= ES.CorporateID  
  
 INNER JOIN coc_Corporates(NOLOCK) EC2 ON EC2.CorporateID = @CorporateID --AND-- EC2.IsActive=1   --Check for distirbutor is valid  
  
 INNER JOIN coc_EVoucherBundleDistribution(NOLOCK) EVBD ON EVBD.EVoucherBundleID = EVB.EVoucherBundleID  
  
   
  
 WHERE ES.FromDate <= getdate() AND ES.ToDate >= getdate() AND EC.IsActive=1 AND EV.IsActive =1 AND EB.IsActive=1 AND EVB.IsActive=1 AND EVBD.IsActive=1 AND EB.EBundleID=@EBundleID AND   
  
       EVBD.CorporateID = @CorporateID   
  
    GROUP BY EB.EBundleID  
  
  
  
  
  
SELECT @validVoucherCount = VoucherCount , @totalVouchersAssigned = TotalVouchers FROM @BundleVoucher  
  
  
  
IF(@validVoucherCount = 0)  
  
BEGIN   
  
 --Invalid QRCode (still invalid since no records exists in the active voucher filtering)  
  
   SET @ErrorMessage = 'Vch_InvalidQRCode'  
  
  
  
END  
  
ELSE  
  
  
  
 --Check actual voucher count consumed by mobile users against the bundle  
  
 --Need not check any active state since count should be included even if the state is not active currently but  
  
 --might have active in the past.  
  
   
  
 SELECT  @consumptionCount = Count(*) FROM coc_EServiceBarCodes (NOLOCK) ESB   
  
 INNER JOIN coc_EVoucher(NOLOCK) EV ON EV.EVoucherID = ESB.EVoucherID  
  
 INNER JOIN coc_EVoucherBundle(NOLOCK) EVB ON EVB.EVoucherID = EV.EVoucherID   
  
 INNER JOIN coc_EVoucherBundleDistribution(NOLOCK) EVBD ON EVBD.EVoucherBundleID = EVB.EVoucherBundleID  
  
 WHERE EVBD.CorporateID =@CorporateID AND EVB.EBundleID = @EBundleID   
  
 if(@totalVouchersAssigned is null)  
 begin  
 set @totalVouchersAssigned = 0  
 end  
  
   PRINT @totalVouchersAssigned  
  
   PRINT '@consumptionCount'  
  
   PRINT @consumptionCount  
  
  
  
   IF (isnull(@consumptionCount,0) >= @totalVouchersAssigned)  
  
   BEGIN  
  
      --All vouchers assigned for the distributor is used  
  
     SET @ErrorMessage = 'Vch_AllVouchersUsed'  
  
   END  
  
 ELSE  
  
 BEGIN    
  
  SET @availableVouchers = @totalVouchersAssigned - @consumptionCount    
  
  SELECT @EVoucherBundleQRCodeID =EVoucherBundleQRCodeID FROM coc_EVoucherBundleQRCode   (NOLOCK)
  
  WHERE EBundleID = @EBundleID AND CorporateID = @CorporateID AND NumberOfEligibleVouchers = @NumberOfEligibleVouchers  
  
     
  
    SELECT @EligibilityMessageIn = ResourceValue FROM coc_EBundleLanguages (NOLOCK) 
  
  WHERE EBundleID = @EBundleID AND LanguageID = @LanguageID AND ResourceKey = 'EligibilityMessage'  
  
  
  
     SELECT @ConsumerName= FirstName +' ' + SecondName + ' '+ FamilyName   
  
    FROM coc_Consumers(NOLOCK) CU WHERE CU.ConsumerID=@ConsumerID  
  
  
  
     SELECT @Corporate = CorporateName FROM  coc_Corporates(NOLOCK) Corp WHERE Corp.CorporateID= @CorporateID  
  
  
  
    IF(@availableVouchers >=@NumberOfEligibleVouchers)  
  
    BEGIN  
  
    SET @consumerEligibleVouchers = @NumberOfEligibleVouchers  
  
  
  
    END  
  
    ELSE  
  
    BEGIN  
  
     SET @consumerEligibleVouchers = @availableVouchers  
  
    END  
  
  
  
      
  
    SELECT @EligibilityMessageIn = REPLACE(@EligibilityMessageIn,'@name', @ConsumerName)     
  
    SELECT @EligibilityMessageIn = REPLACE(@EligibilityMessageIn,'@distributorCorporate', @Corporate)     
  
    SELECT @EligibilityMessageIn = REPLACE(@EligibilityMessageIn,'@eligibilityCount', @consumerEligibleVouchers)  
  
  
  
    print @EligibilityMessageIn  
  
  
  
    --Update the eligibilty record for the consumer in case all validations are success  
  
    -- When this procedure calls for the first time (when scan qrcode ) @UpdateEligibility =0  
  
    -- When the user calls a confirmation request the eligibility record will be updated  
  
    IF(@UpdateEligibility = 1)  
  
    BEGIN  
  
   
  
  
  
     BEGIN TRANSACTION TRN_ReceiveEligibility        
  
  
  
   INSERT INTO [dbo].[coc_EVoucherBundleEligibilityForConsumers]  
  
           ([EVoucherBundleQRCodeID]  
  
           ,[ConsumerID]  
  
           ,[EBundleID]  
  
           ,[EligibleNoOfVouchers]  
  
           ,[ExpiryDate]  
  
           ,[EntryDate])  
  
     VALUES  
  
           (@EVoucherBundleQRCodeID  
  
           ,@ConsumerID  
  
           ,@EBundleID  
  
       ,@consumerEligibleVouchers  
  
           ,NULL  
  
           ,GETDATE())  
  
    
  
  
  
    SET @EVoucherBundleEligibilityForConsumersID = SCOPE_IDENTITY();  
  
  
  
     DECLARE @return_value int        
  
  
  
     EXEC @return_value = [dbo].[SaveNotificationForVoucherEligibility] @EVoucherBundleQRCodeID= @EVoucherBundleQRCodeID, @EVoucherBundleEligibilityForConsumersID=@EVoucherBundleEligibilityForConsumersID   
  
  
  
  
  
       
  
     COMMIT TRANSACTION TRN_ReceiveEligibility  
  
        
  
     SET @EligibilityMessage = @EligibilityMessageIn      
  
  
  
    END  
  
   ELSE  
  
   BEGIN  
  
    SET @EligibilityMessage = @EligibilityMessageIn  
  
   END  
  
   END  
  
    END TRY  
  
    BEGIN CATCH  
  
  SET @ErrorMessage = 'GenericError'  
  
    ROLLBACK TRANSACTION TRN_ReceiveEligibility  
  
    END CATCH  
  
END  
GO
/****** Object:  StoredProcedure [dbo].[VerifyOTP]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[VerifyOTP]     
@UniqueID INTEGER            
        
,@otpTypeID INTEGER           
     
,@Otp INTEGER                 
     
,@VerifyUserID INTEGER = NULL        
     
,@ReturnValue BIT      = NULL OUTPUT        
        
AS        
        
 SET NOCOUNT ON        
          
 DECLARE @RandomOtp INTEGER        
        
 DECLARE @OtpID INTEGER        
        
 DECLARE @Expity DATETIME        
           
 IF @OtpTypeID = 131           
 BEGIN        
        
  SELECT @OtpID = otpID        
        
  FROM coc_Consumers(NOLOCK)        
        
  WHERE ConsumerID = @UniqueID        
        
 END        
        
 ELSE IF @OtpTypeID = 135        
        
  BEGIN        
        
   SELECT @OtpID = MobileOtpID        
        
   FROM coc_ContactChanges(NOLOCK)        
        
   WHERE ContactChangeID = @UniqueID        
        
  END        
        
  ELSE IF @OtpTypeID = 134        
        
   BEGIN        
        
    SELECT @OtpID = EmailOtpID        
        
    FROM coc_ContactChanges(NOLOCK)        
        
    WHERE ContactChangeID = @UniqueID        
        
   END        
        
   ELSE IF @OtpTypeID = 137        
        
    BEGIN        
        
     SELECT @OtpID = otpID        
        
     FROM coc_Consumers(NOLOCK)        
        
     WHERE UserID = @UniqueID        
        
    END        
        
    ELSE IF @OtpTypeID = 136        
        
     BEGIN        
        
      SELECT @OtpID = otpID        
        
      FROM coc_ResetPassword(NOLOCK)        
        
      WHERE ResetPasswordID = @UniqueID        
        
     END        
        
     ELSE IF @OtpTypeID = 133        
        
      BEGIN        
        
       SELECT @OtpID = otpID        
        
       FROM coc_ConsumerRedemptions(NOLOCK)        
        
       WHERE ConsumerRedemptionID = @UniqueID        
        
      END        
        
      ELSE IF @OtpTypeID = 138        
        
       BEGIN        
        
        SELECT @OtpID = @UniqueID        
        
       END        
        
       ELSE IF @OtpTypeID = 139        
        
        BEGIN        
        
         SELECT @OtpID = otpID        
        
         FROM coc_Tickets(NOLOCK)        
        
         WHERE TicketID = @UniqueID        
        
        END        
        
        
        
 SELECT @RandomOtp = Otp        
        
 ,      @Expity = OtpExpity        
        
 FROM coc_OTP(NOLOCK)        
        
 WHERE OtpID = @OtpID        
        
 IF (@RandomOtp = @Otp AND GETDATE() < @Expity)        
        
 BEGIN        
        
  UPDATE coc_OTP        
        
  SET isVerified = 1        
        
  --WHERE otp = @RandomOtp      
   WHERE OtpID = @OtpID     
   -- updated where clause by Shamim (22 Aug 2020)    
        
        
        
  SET @ReturnValue = 1        
        
 END        
        
 ELSE        
        
 BEGIN        
        
  SET @ReturnValue = 0        
        
 END        
        
        
        
 IF @ReturnValue = 1        
        
  AND @OtpTypeID = 136        
        
 BEGIN        
        
  UPDATE coc_ResetPassword        
        
  SET IsVerified       = 1        
        
  ,   VerificationTime = GETDATE()        
        
  WHERE ResetPasswordID = @UniqueID        
        
 END        
        
 ELSE IF (        
        
   @ReturnValue = 1        
        
   AND (        
        
   @OtpTypeID = 135        
        
   OR @OtpTypeID = 134        
        
   )        
        
   )        
        
  BEGIN        
        
   UPDATE coc_ContactChanges        
        
   SET IsVerified       = 1        
        
   ,   VerificationTime = GETDATE()        
        
   WHERE ContactChangeID = @UniqueID        
        
  END        
        
  ELSE IF @ReturnValue = 1        
        
    AND (        
        
    @OtpTypeID = 131        
        
    OR @otpTypeID = 137        
        
    )        
        
   BEGIN        
        
    UPDATE coc_Consumers        
        
    SET IsVerified       = 1,IsMobileVerified=1       
        
    ,   VerificationDate = GETDATE()        
        
    WHERE ConsumerID = @UniqueID        
        
   END        
        
  ELSE IF @ReturnValue = 1        
        
     AND (@OtpTypeID = 138)        
        
    BEGIN        
        
      UPDATE coc_Consumers        
        
    SET IsVerified       = 1,IsMobileVerified=1  ,IsActive = 1      
        
    ,   VerificationDate = GETDATE()        
        
    WHERE ConsumerID = (select top 1 ConsumerID from coc_Consumers(NOLOCK) where OtpID =   @UniqueID)        
      
   UPDATE coc_Users   SET IsActive  = 1 WHERE UserID = (select top 1 UserID from coc_Consumers(NOLOCK) where OtpID =   @UniqueID)       
   UPDATE coc_guests   SET IsActive  = 1 ,IsVerified = 1 WHERE GuestId = (select top 1 GuestId from coc_guests(NOLOCK) where OtpID =   @UniqueID)       
        
    END      
      
   ELSE IF @ReturnValue = 1        
        
     AND (@OtpTypeID = 133)        
        
    BEGIN        
        
     UPDATE coc_ConsumerRedemptions        
        
     SET IsVerified         = 1        
        
     ,   VerificationDate   = GETDATE()        
        
     ,   VerificationUserID = @VerifyUserID        
        
     WHERE ConsumerRedemptionID = @UniqueID        
        
    END        
        
    ELSE IF @ReturnValue = 1        
        
      AND (@OtpTypeID = 139)        
        
     BEGIN        
        
      UPDATE coc_Tickets        
        
      SET IsVerified         = 1        
        
      ,   VerificationTime   = GETDATE()        
        
      ,   VerificationUserID = @VerifyUserID        
        
      WHERE TicketID = @UniqueID        
        
     END         

 SELECT @ReturnValue [ReturnValue]          
        
 SET NOCOUNT OFF 
GO
/****** Object:  StoredProcedure [dbo].[VerifyUser]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[VerifyUser]
@IsActive bit,
@UserID int,
@ReturnValue [Remark] OUTPUT
AS
SET NOCOUNT ON
		BEGIN TRY
			UPDATE coc_Users
				SET IsActive=@IsActive
				WHERE UserID=@UserID
				SET @ReturnValue=SCOPE_IDENTITY()
		END TRY
		BEGIN CATCH									
			SELECT @ReturnValue=ERROR_MESSAGE()
			RAISERROR(@ReturnValue, 16, 1);
		END CATCH
SET NOCOUNT OFF
	
GO
/****** Object:  StoredProcedure [dbo].[VerifyVoucherBarcode]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[VerifyVoucherBarcode]                      
 @barcode  NVARCHAR(500),                      
 @languageId INTEGER=1,                   
 @corporateID BIGINT= NULL,                  
 @isAPIRequest BIT= 0,                  
 @ErrorMessage INTEGER OUTPUT,              
 @KioskID int = null              
AS                      
BEGIN                      
 SET NOCOUNT ON;                      
 SET @ErrorMessage=0                      
 DECLARE @Imageurl VARCHAR (100) = ''                      
 DECLARE @BarcodeFlag BIT                 
               
 IF(@KioskID IS NOT NULL AND @KioskID <> 0 AND               
 EXISTS(SELECT * FROM coc_EVoucher(nolock) WHERE EServiceID IN               
 (SELECT EServiceID FROM coc_Notifications(nolock) WHERE NotificationID IN (SELECT NotificationID FROM coc_EServiceBarcodes(nolock) WHERE Barcode = @barcode AND (@corporateID is  null or CorporateID= @corporateID) and Barcode=@barcode and IsUsed = 0 AND             
(ISNULL(ConsumerID,0)>0 or ISNULL(GuestID,0)>0) ))))               
 BEGIN               
   IF(NOT EXISTS(SELECT RetailOutletID FROM coc_EVoucherRetailOutlet(nolock) WHERE RetailOutletID IN (SELECT RetailOutletID FROM coc_KioskLocationRetailOutlets (NOLOCK) WHERE KioskLocationID=@KioskID)               
   AND EVoucherID IN(SELECT EVoucherID FROM coc_EVoucher(nolock) WHERE EServiceID IN               
 (SELECT EServiceID FROM coc_Notifications(nolock) WHERE NotificationID IN               
 (SELECT NotificationID FROM coc_EServiceBarcodes(nolock) WHERE Barcode = @barcode AND (@corporateID is  null or CorporateID= @corporateID) and Barcode=@barcode and IsUsed = 0 AND  (ISNULL(ConsumerID,0)>0 or ISNULL(GuestID,0)>0) )))))              
 BEGIN              
    SET @ErrorMessage=405              
    RETURN;              
 END              
 END              
              
 IF EXISTS(SELECT EServiceBarcodeID FROM coc_EServiceBarcodes(nolock) WHERE (@corporateID is  null or CorporateID= @corporateID) and Barcode=@barcode and IsUsed = 1 AND  (ISNULL(ConsumerID,0)>0 or ISNULL(GuestID,0)>0 ))                      
 BEGIN                       
                         
  SET @ErrorMessage=406-- Barcode Used (Vch_UsedBarcode)                      
                        
 END                      
 IF EXISTS(SELECT EServiceBarcodeID FROM coc_EServiceBarcodes(nolock) WHERE (@corporateID is  null or CorporateID= @corporateID) and Barcode=@barcode AND (ISNULL(ConsumerID,0)>0 or ISNULL(GuestID,0)>0 ))                      
 BEGIN                       
   SELECT                        
    eb.EServiceBarcodeID,         
 dbo.udf_StripAllHTML(isnull(evl.ResourceValue,'')) AS Description,          
    evls.ResourceValue AS VoucherName,                        
    ev.ExpiryDate,                      
    ev.EVoucherID,           
 ev.Type,          
 ev.VoucherTypeID,          
 ev.PromotionAmount,          
 ev.VoucherAmount,          
 ev.OriginalPrice,          
 ev.DiscountAmount,          
 ev.PriceAfterDiscount,          
 ev.DiscountPercentage,          
 eb.InvoiceAmount,          
 eb.InvoiceNumber,          
    eb.IsUsed,                      
    ev.IsPrinted,                      
    case when eb.ConsumerID is not null then  cs.FirstName else g.FullName end as FirstName,                      
    cs.SecondName,                      
    eb.Barcode,                      
    crs.FirstName AS CorporateFirstName,                      
    evl.LanguageID,                      
    crs.CorporateName,                      
    isnull(crs.MerchantCode,'') as MerchantCode,                      
   '' as Distributor,                  
   ev.VoucherType, --ev.OriginalPrice- ev.PriceAfterDiscount as DiscountAmount,                  
    @Imageurl AS ImageUrl,    
 isnull(eb.PromoCodeID,0) AS VoucherPromoCodeID,    
 isnull(eb.ExtraDiscount,0.00) As PromoCodePercent,    
 (isnull(ev.DiscountPercentage,0)+isnull(eb.ExtraDiscount,0)) As TotalDiscountPercent,    
 ccp.PromoCode AS PromoCode,    
 0.00 AS PromoCodeDiscount    
   FROM coc_EServiceBarcodes(nolock) eb                      
   INNER JOIN coc_EVoucher(nolock) ev ON eb.EVoucherID=ev.EVoucherID AND ev.IsActive = 1                        
   INNER JOIN coc_EVoucherLanguages(nolock) evl ON evl.EVoucherID=ev.EVoucherID AND evl.LanguageID = @languageId AND evl.ResourceKey = 'Description'                      
   INNER JOIN coc_EVoucherLanguages(nolock) evls ON evls.EVoucherID=ev.EVoucherID AND evls.LanguageID = @languageId AND evls.ResourceKey = 'VoucherName'                      
   LEFT JOIN coc_Consumers(nolock) cs ON cs.ConsumerID=eb.ConsumerID                      
   LEFT JOIN coc_Guests(nolock) g ON g.GuestID =eb.GuestID                      
   INNER JOIN coc_EServices(nolock) esrs ON esrs.EServiceID=ev.EServiceID                      
   INNER JOIN coc_Corporates(nolock) crs ON crs.CorporateID=esrs.CorporateID  
   left join coc_core_PromoCodes(nolock) ccp on ccp.PromoCodeID=eb.PromoCodeID
   WHERE  eb.Barcode=@barcode  and (@corporateID is  null or eb.CorporateID = @corporateID)                  
                      
                        
 END                      
 ELSE                      
 BEGIN                      
   SET @ErrorMessage=405-- There is no records Exists Error(Vch_InvalidBarcode)                      
 END                      
                       
                       
END
GO
/****** Object:  StoredProcedure [dbo].[VerifyVouchersIsUsed]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[VerifyVouchersIsUsed]
 @EVoucherBundleEligibilityForConsumersID INTEGER
,@ErrorMessage NVARCHAR(100) = NULL OUTPUT

AS

BEGIN

IF EXISTS(SELECT EVoucherBundleEligibilityForConsumersID FROM coc_EVoucherBundleEligibilityForConsumers(NOLOCK)  WHERE EVoucherBundleEligibilityForConsumersID = @EVoucherBundleEligibilityForConsumersID AND IsUsed = 1)
  BEGIN
	SET @ErrorMessage = 'Vch_VouchersAlreadyUsedByTheCustomer'
END

END
GO
/****** Object:  StoredProcedure [dbo].[VoucherVerification]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[VoucherVerification]
	@barcode  NVARCHAR(500),
	--@consumerId INTEGER,
	@languageId INTEGER,
	@ErrorMessage INTEGER OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	SET @ErrorMessage=0
	DECLARE @BarcodeFlag BIT
	IF EXISTS(SELECT EServiceBarcodeID FROM coc_EServiceBarcodes(NOLOCK) WHERE Barcode=@barcode AND ConsumerID>0)
	BEGIN 
		--SELECT @BarcodeFlag=IsUsed FROM coc_EServiceBarcodes WHERE Barcode=@barcode
		--IF(@BarcodeFlag = 1)
		--BEGIN
			--SET @ErrorMessage=404-- Barcode Used Error(Vch_BarcodeUsed)
		--END
		--ELSE
		--BEGIN
			SELECT 
				
				eb.EServiceBarcodeID,
				evl.ResourceValue AS Description,
				evls.ResourceValue AS VoucherName,  
				ev.ExpiryDate,
				ev.EVoucherID,
				eb.IsUsed,
				ev.IsPrinted,
				cs.FirstName,
				cs.SecondName,
				eb.Barcode,
				crs.FirstName AS CorporateFirstName
			FROM coc_EServiceBarcodes(NOLOCK) eb
			INNER JOIN coc_EVoucher(NOLOCK) ev ON eb.EVoucherID=ev.EVoucherID AND ev.IsActive = 1  
			INNER JOIN coc_EVoucherLanguages(NOLOCK) evl ON evl.EVoucherID=ev.EVoucherID AND evl.LanguageID = @languageId AND evl.ResourceKey = 'Description'
			INNER JOIN coc_EVoucherLanguages(NOLOCK) evls ON evls.EVoucherID=ev.EVoucherID AND evls.LanguageID = @languageId AND evls.ResourceKey = 'VoucherName'
			INNER JOIN coc_Consumers(NOLOCK) cs ON cs.ConsumerID=eb.ConsumerID
			INNER JOIN coc_EServices(NOLOCK) esrs ON esrs.EServiceID=ev.EServiceID
			INNER JOIN coc_Corporates(NOLOCK) crs ON crs.CorporateID=esrs.CorporateID
			WHERE  eb.Barcode=@barcode --AND eb.IsUsed = 0
		--END

	END
	ELSE
	BEGIN
			SET @ErrorMessage=405-- There is no records Exists Error(Vch_InvalidBarcode)
	END
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[WEBAPI_USP_IsValidUser]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[WEBAPI_USP_IsValidUser]  
 @UserName NVARCHAR(500)  
,@Password nvarchar(200)  
AS  
SET NOCOUNT ON  
BEGIN  
 SELECT TOP (1) US.UserID  
  ,UserName  
  ,US.[Password]  
  ,US.IsActive  
  ,RoleID  
  ,US.MobileNumber  
  ,US.EmailID  
  ,LS.LoginTime  
  ,CASE   
   WHEN ISNULL(CE.CorporateID, '') = ''  
    THEN ISNULL(CR.CorporateID, '')  
   ELSE CE.CorporateID  
   END CorporateID  
  ,CR.CRNumber  
  ,CR.CorporateName  
  ,cr.JCCICode  
  ,US.ResetRequired  
  ,ISNULL(CS.ConsumerID, 0) [ConsumerID]  
  ,CS.IsVerified  
  ,CS.OtpID [VerificationCode]  
  ,CASE   
   WHEN ROLEID = 3  
    THEN ISNULL(CR.FirstName, '')  
   ELSE ISNULL(CS.FirstName, '')  
   END FirstName  
  ,ISNULL(US.FullName, '') FullName  
  ,ISNULL(CU.EmployeeName, '') EmployeeName  
  ,CASE   
   WHEN ROLEID = 3  
    THEN CA.City  
   ELSE CL.City  
   END [City]  
  ,CASE   
   WHEN ROLEID = 3  
    THEN SG.Country  
   ELSE CG.Country  
   END [Country]  
  ,CASE   
   WHEN ISNULL(CS.Address1, '') = ''  
    THEN 'Address'  
   ELSE CS.Address1  
   END Address1  
  ,CASE   
   WHEN ROLEID = 3  
    THEN ISNULL(CR.LastName, '')  
   ELSE CS.FamilyName  
   END [FamilyName]  
  ,CR.LogoFile  
 FROM [coc_Users] US(NOLOCK)  
 LEFT JOIN [coc_LoginUsers] LS(NOLOCK) ON LS.UserID = US.UserID  
  AND LS.UserID IS NOT NULL  
 LEFT JOIN [coc_Corporates] CR(NOLOCK) ON CR.UserID = US.UserID  
 LEFT JOIN [coc_CorporateUsers] CE(NOLOCK) ON CE.UserID = US.UserID  
 LEFT JOIN [coc_Consumers] CS(NOLOCK) ON CS.UserID = US.UserID  
 LEFT JOIN [coc_CorporateUsers] CU(NOLOCK) ON CU.UserID = US.UserID  
 LEFT JOIN [coc_CityLanguages] CL(NOLOCK) ON CS.CityID = CL.CityID  
  AND CL.LanguageID = 1  
 LEFT JOIN [coc_CountryLanguages] CG(NOLOCK) ON CS.CountryID = CG.CountryID  
  AND CG.LanguageID = 1  
 LEFT JOIN [coc_CityLanguages] CA(NOLOCK) ON CR.CityID = CA.CityID  
  AND CA.LanguageID = 1  
 LEFT JOIN [coc_CountryLanguages] SG(NOLOCK) ON CR.CountryID = SG.CountryID  
  AND SG.LanguageID = 1  
 WHERE (US.EmailID = @UserName and US.[Password] = @Password)  
  OR (US.MobileNumber = @UserName and US.[Password] = @Password)--AND US.IsActive=1  
  OR (CR.CRNumber = @UserName and US.[Password] = @Password)  
 ORDER BY LS.LoginTime DESC  
END  
SET NOCOUNT OFF  
GO
/****** Object:  DdlTrigger [backup_objects]    Script Date: 07/11/2021 17:05:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [backup_objects]
ON DATABASE
FOR CREATE_PROCEDURE, 
    ALTER_PROCEDURE, 
    DROP_PROCEDURE,
    CREATE_TABLE, 
    ALTER_TABLE, 
    DROP_TABLE,
    CREATE_FUNCTION, 
    ALTER_FUNCTION, 
    DROP_FUNCTION,
    CREATE_VIEW,
    ALTER_VIEW,
    DROP_VIEW
AS
 
SET NOCOUNT ON
 
DECLARE @data XML
SET @data = EVENTDATA()
 
INSERT INTO changelog(databasename, eventtype, 
    objectname, objecttype, sqlcommand, loginname)
VALUES(
@data.value('(/EVENT_INSTANCE/DatabaseName)[1]', 'varchar(256)'),
@data.value('(/EVENT_INSTANCE/EventType)[1]', 'varchar(50)'), 
@data.value('(/EVENT_INSTANCE/ObjectName)[1]', 'varchar(256)'), 
@data.value('(/EVENT_INSTANCE/ObjectType)[1]', 'varchar(25)'), 
@data.value('(/EVENT_INSTANCE/TSQLCommand)[1]', 'varchar(max)'), 
@data.value('(/EVENT_INSTANCE/LoginName)[1]', 'varchar(256)')
)
GO
ENABLE TRIGGER [backup_objects] ON DATABASE
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'1-Active,2-Inactive,3-Blocked,4-OnHold,5-Pending' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'coc_Core_ConsumerStatus', @level2type=N'COLUMN',@level2name=N'Type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'1=General,2=Invoice,3=UploadImage' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Coc_Core_DynamicLinks', @level2type=N'COLUMN',@level2name=N'CompetitionType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'1=Pending,2=Generated,3=Started,4=Failed' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'coc_core_PromoCodeBundle', @level2type=N'COLUMN',@level2name=N'Status'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'1. Mobile
2. Web application
3. Competition link
4. Kiosk
5. API' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'coc_ECouponParticipations', @level2type=N'COLUMN',@level2name=N'RequestSourceType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When participating from api call.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'coc_ECoupons', @level2type=N'COLUMN',@level2name=N'APIParticipationCount'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'1. Approved, 2. Rejected' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'coc_EserviceAdminApproval', @level2type=N'COLUMN',@level2name=N'Status'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'1.Promotions , 2.Vouchers , 3.Discounts' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'coc_EVoucher', @level2type=N'COLUMN',@level2name=N'Type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'1.Amount , 2.Percentage' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'coc_EVoucher', @level2type=N'COLUMN',@level2name=N'DiscountType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'0=Created,1=Requested for admin aprroval,2=Rejected,3=Apporved' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'coc_EVoucher', @level2type=N'COLUMN',@level2name=N'CurrentStatus'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'getdate()' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'coc_ExternalRedirectionDataMapping', @level2type=N'COLUMN',@level2name=N'CreatedDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'1. Mobile,2. Web application,3. Competition link,4. Kiosk,5. API' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'coc_Guests', @level2type=N'COLUMN',@level2name=N'RequestSourceType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'1=Bottom,2=Top' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'coc_VoucherTemplate', @level2type=N'COLUMN',@level2name=N'Position'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'1=Support, 2=Customer Service, 3=Info' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'core_coc_ContactUs', @level2type=N'COLUMN',@level2name=N'Name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Foreign Key to a system table' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'core_coc_InvoiceDetails', @level2type=N'COLUMN',@level2name=N'ServiceTypeID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'if barcode purchase' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'core_coc_InvoiceDetails', @level2type=N'COLUMN',@level2name=N'BarcodePackagePricingsID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'if barcode purchase or Kiosk then this value is needed' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'core_coc_InvoiceDetails', @level2type=N'COLUMN',@level2name=N'NumberOfBarcodes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'1- New, 2- Cancelled' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'core_coc_Invoices', @level2type=N'COLUMN',@level2name=N'Status'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'1 for purchase, 2 for Usage, 3 Opening Balance' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'core_coc_TransCorporateBarcodes', @level2type=N'COLUMN',@level2name=N'TransactionType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "coc_AdvertisementFiles"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 233
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'vw_MembersList'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'vw_MembersList'
GO
USE [master]
GO
ALTER DATABASE [eCoponTest2021July11] SET  READ_WRITE 
GO
